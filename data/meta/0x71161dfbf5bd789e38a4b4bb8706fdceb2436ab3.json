{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.10;\r\n\r\ncontract SafeMath {\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n    \r\n    function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\r\n      assert(b > 0);\r\n      uint c = a / b;\r\n      assert(a == b * c + a % b);\r\n      return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract Mondo is SafeMath, StandardToken {\r\n\r\n    string public constant name = \"Mondo Token\";\r\n    string public constant symbol = \"MND\";\r\n    uint256 public constant decimals = 18;\r\n    \r\n    uint256 private constant tokenCreationCapPreICO02 =  5000000*10**decimals;\r\n    uint256 private constant tokenCreationCapPreICO15 =  6000000*10**decimals;\r\n    uint256 public constant tokenCreationCap = 12500000*10**decimals;\r\n\r\n    address public constant owner = 0x0077DA9DF6507655CDb3aB9277A347EDe759F93F;\r\n\r\n    // 1 ETH = 300 USD Date: 11.08.2017\r\n    uint private oneTokenInWeiSale1 = 70175438596491; // 0,02 $\r\n    uint private oneTokenInWei1Sale2 = 526315789473684; // 0,15 $\r\n    uint private oneTokenInWei = 5473684210526320; // 1,56 $\r\n    \r\n    Phase public currentPhase = Phase.PreICO1;\r\n    \r\n    enum Phase {\r\n        PreICO1,\r\n        PreICO2,\r\n        ICO\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        if(owner != msg.sender) revert();\r\n        _;\r\n    }\r\n\r\n    event CreateMND(address indexed _to, uint256 _value);\r\n\r\n    function Mondo() {}\r\n\r\n    function () payable {\r\n        createTokens();\r\n    }\r\n\r\n    function createTokens() internal {\r\n        if (msg.value <= 0) revert();\r\n        \r\n        if (currentPhase == Phase.PreICO1) {\r\n            if (totalSupply <= tokenCreationCapPreICO02) {\r\n                generateTokens(oneTokenInWeiSale1);\r\n            }\r\n        } \r\n        else if (currentPhase == Phase.PreICO2) {\r\n            if (totalSupply > tokenCreationCapPreICO02 && totalSupply <= tokenCreationCapPreICO15) {\r\n                generateTokens(oneTokenInWei1Sale2);\r\n            }\r\n        }\r\n        else if (currentPhase == Phase.ICO) {\r\n            if (totalSupply > tokenCreationCapPreICO15 && totalSupply <= tokenCreationCap) {\r\n                generateTokens(oneTokenInWei);\r\n            }\r\n        } else { \r\n            revert();\r\n        }\r\n    }\r\n    \r\n    function generateTokens(uint _oneTokenInWei) internal {\r\n        uint multiplier = 10 ** decimals;\r\n        uint256 tokens = safeDiv(msg.value, _oneTokenInWei)*multiplier;\r\n        uint256 checkedSupply = safeAdd(totalSupply, tokens);\r\n        if (tokenCreationCap <= checkedSupply) revert();\r\n        balances[msg.sender] += tokens;\r\n        totalSupply = safeAdd(totalSupply, tokens);\r\n        CreateMND(msg.sender,tokens);\r\n    }\r\n    \r\n    function changePhaseToPreICO2() external onlyOwner returns (bool){\r\n        currentPhase = Phase.PreICO2;\r\n        return true;\r\n    }\r\n    \r\n    function changePhaseToICO() external onlyOwner returns (bool){\r\n        currentPhase = Phase.ICO;\r\n        return true;\r\n    }\r\n    \r\n    function changeTokenPrice(uint tpico1, uint tpico2, uint tpico) external onlyOwner returns (bool){\r\n        oneTokenInWeiSale1 = tpico1;\r\n        oneTokenInWei1Sale2 = tpico2;\r\n        oneTokenInWei = tpico;\r\n        return true;\r\n    }\r\n\r\n    function finalize() external onlyOwner returns (bool){\r\n      owner.transfer(this.balance);\r\n      return true;\r\n    }\r\n}",
	"ContractName": "Mondo",
	"CompilerVersion": "v0.4.15+commit.bbb8e64f"
}