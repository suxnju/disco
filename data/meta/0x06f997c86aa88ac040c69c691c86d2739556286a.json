{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.5.2;\r\ncontract ERC20 {\r\nfunction totalSupply() public returns (uint);\r\nfunction balanceOf(address tokenOwner) public view returns (uint balance);\r\nfunction allowance(address tokenOwner, address spender) public returns (uint remaining);\r\nfunction transfer(address to, uint tokens) public returns (bool success);\r\nfunction approve(address spender, uint tokens) public returns (bool success);\r\nfunction transferFrom(address from, address to, uint tokens) public returns (bool success);\r\nevent Transfer(address indexed from, address indexed to, uint tokens);\r\nevent Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract future1\r\n {\r\naddress public escrow;\r\naddress public useraddr;\r\nmapping (address => mapping(address => uint256)) public dep_token;\r\nmapping (address => uint256) public dep_ETH;\r\n\r\n \r\nconstructor() public\r\n{\r\nescrow = msg.sender;\r\n}\r\n\r\nfunction safeAdd(uint crtbal, uint depbal) public pure returns (uint)\r\n{\r\nuint totalbal = crtbal + depbal;\r\nreturn totalbal;\r\n}\r\n\r\nfunction safeSub(uint crtbal, uint depbal) public pure returns (uint)\r\n{\r\nuint totalbal = crtbal - depbal;\r\nreturn totalbal;\r\n}\r\n\r\nfunction balanceOf(address token,address user) public view returns(uint256) // show bal of perticular token in user add\r\n{\r\nreturn ERC20(token).balanceOf(user);\r\n}\r\n\r\nfunction transfer(address token, uint256 tokens)public payable // deposit perticular token balance to contract address (site address), can depoit multiple token\r\n{\r\nERC20(token).transferFrom(msg.sender, address(this), tokens);\r\ndep_token[msg.sender][token] = safeAdd(dep_token[msg.sender][token] , tokens);\r\n\r\n}\r\n\r\nfunction admin_token_withdraw(address token, address to, uint256 tokens)public payable // withdraw perticular token balance from contract to user\r\n{\r\nif(escrow==msg.sender)\r\n{ // here only admin can withdraw token\r\nif(dep_token[to][token]>=tokens)\r\n{\r\ndep_token[to][token] = safeSub(dep_token[to][token] , tokens) ;\r\nERC20(token).transfer(to, tokens);\r\n}\r\n}\r\n}\r\n\r\nfunction tok_bal_contract(address token) public view returns(uint256) // show balance of contract address\r\n{\r\nreturn ERC20(token).balanceOf(address(this));\r\n}\r\n\r\n \r\nfunction depositETH() payable external // this function deposit eth in contract address\r\n \r\n{\r\ndep_ETH[msg.sender] = safeAdd(dep_ETH[msg.sender] , msg.value);\r\n}\r\n\r\nfunction admin_withdrawETH(address payable to, uint256 value) public payable returns (bool) // this will withdraw eth from contract to address(to)\r\n{\r\n    require(escrow==msg.sender);\r\n    if(escrow==msg.sender)\r\n    { // only admin can withdraw ETH from user\r\n        if(dep_ETH[to]>=value)\r\n        {\r\n            dep_ETH[to]= safeSub(dep_ETH[to] ,value);\r\n            to.transfer(value);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nfunction find_Cont_ETH() public view returns(uint256) \r\n{\r\n    return address(this).balance;\r\n}\r\n\r\n// function getAllContETH() public payable returns(uint256) \r\n// {\r\n//     if(escrow==msg.sender)\r\n//     { \r\n//         msg.sender.transfer(address(this).balance);\r\n//     }\r\n// }\r\n\r\n}",
	"ContractName": "future1",
	"CompilerVersion": "v0.5.2+commit.1df8f40c"
}