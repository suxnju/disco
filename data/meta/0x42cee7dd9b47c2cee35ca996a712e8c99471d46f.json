{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.18;\r\n\r\n/*\r\nDeveloped by: https://www.investbtceur.com\r\n*/\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TokenERC20 {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 0;\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);\r\n        balanceOf[msg.sender] = totalSupply;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ALUXToken is owned, TokenERC20 {\r\n    uint256 public sellPrice = 10000000000000000;\r\n    uint256 public buyPrice = 10000000000000000;\r\n    bool public closeBuy = false;\r\n    bool public closeSell = false;\r\n    address public commissionGetter = 0xCd8bf69ad65c5158F0cfAA599bBF90d7f4b52Bb0;\r\n    uint256 public minimumCommission = 100000000000000;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n    event LogDeposit(address sender, uint amount);\r\n    event LogWithdrawal(address receiver, uint amount);\r\n\r\n    function ALUXToken(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);\r\n        require (balanceOf[_from] >= _value);\r\n        require (balanceOf[_to] + _value > balanceOf[_to]);\r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function refillTokens(uint256 _value) public onlyOwner{\r\n        _transfer(msg.sender, this, _value);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        uint market_value = _value * sellPrice;\r\n        uint commission = market_value * 4 / 1000;\r\n        if (commission < minimumCommission){ commission = minimumCommission; }\r\n        address contr = this;\r\n        require(contr.balance >= commission);\r\n        commissionGetter.transfer(commission);\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        uint market_value = _value * sellPrice;\r\n        uint commission = market_value * 4 / 1000;\r\n        if (commission < minimumCommission){ commission = minimumCommission; }\r\n        address contr = this;\r\n        require(contr.balance >= commission);\r\n        commissionGetter.transfer(commission);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function mintToken(uint256 mintedAmount) onlyOwner public {\r\n        balanceOf[owner] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        Transfer(0, this, mintedAmount);\r\n        Transfer(this, owner, mintedAmount);\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    function setStatus(bool isClosedBuy, bool isClosedSell) onlyOwner public {\r\n        closeBuy = isClosedBuy;\r\n        closeSell = isClosedSell;\r\n    }\r\n\r\n    function deposit() payable public returns(bool success) {\r\n        address contr = this;\r\n        require((contr.balance + msg.value) > contr.balance);\r\n        LogDeposit(msg.sender, msg.value);\r\n        return true;\r\n    }\r\n\r\n    function withdraw(uint amountInWeis) onlyOwner public {\r\n        LogWithdrawal(msg.sender, amountInWeis);\r\n        owner.transfer(amountInWeis);\r\n    }\r\n\r\n    function buy() payable public {\r\n        require(!closeBuy);\r\n        uint amount = msg.value / buyPrice;\r\n        uint market_value = amount * buyPrice;\r\n        uint commission = market_value * 4 / 1000;\r\n        if (commission < minimumCommission){ commission = minimumCommission; }\r\n        address contr = this;\r\n        require(contr.balance >= commission);\r\n        commissionGetter.transfer(commission);\r\n        _transfer(this, msg.sender, amount);\r\n    }\r\n\r\n    function sell(uint256 amount) public {\r\n    \trequire(!closeSell);\r\n        address contr = this;\r\n        uint market_value = amount * sellPrice;\r\n        uint commission = market_value * 4 / 1000;\r\n        if (commission < minimumCommission){ commission = minimumCommission; }\r\n        uint amount_weis = market_value + commission;\r\n        require(contr.balance >= amount_weis);\r\n        commissionGetter.transfer(commission);\r\n        _transfer(msg.sender, this, amount);\r\n        msg.sender.transfer(market_value);\r\n    }\r\n\r\n    function () public payable { buy(); }\r\n}",
	"ContractName": "ALUXToken",
	"CompilerVersion": "v0.4.18+commit.9cf6e910"
}