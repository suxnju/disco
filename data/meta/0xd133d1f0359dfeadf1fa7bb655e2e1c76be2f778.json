{
	"Language": "Vyper",
	"Source": "# Contract to migrate between old and new pools\r\nfrom vyper.interfaces import ERC20\r\n\r\nN_COINS: constant(int128) = 2\r\nZERO256: constant(uint256) = 0  # This hack is really bad XXX\r\nZEROS: constant(uint256[N_COINS]) = [ZERO256, ZERO256]  # <- changeuint256\r\n\r\ncontract Old:\r\n    def remove_liquidity(_amount: uint256, deadline: timestamp,\r\n                         min_amounts: uint256[N_COINS]): modifying\r\n\r\ncontract New:\r\n    def add_liquidity(amounts: uint256[N_COINS],\r\n                      min_mint_amount: uint256): modifying\r\n    def calc_token_amount(\r\n        amounts: uint256[N_COINS], deposit: bool) -> uint256: constant\r\n\r\nold: Old\r\nnew: New\r\nold_token: ERC20\r\nnew_token: ERC20\r\n\r\ncoins: public(address[N_COINS])\r\n\r\n\r\n@public\r\ndef __init__(_old: address, _old_token: address,\r\n             _new: address, _new_token: address,\r\n             _coins: address[N_COINS]):\r\n    self.old = Old(_old)\r\n    self.new = New(_new)\r\n    self.old_token = ERC20(_old_token)\r\n    self.new_token = ERC20(_new_token)\r\n    self.coins = _coins\r\n\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef migrate():\r\n    old_token_amount: uint256 = self.old_token.balanceOf(msg.sender)\r\n    assert_modifiable(\r\n        self.old_token.transferFrom(msg.sender, self, old_token_amount))\r\n    self.old.remove_liquidity(old_token_amount, block.timestamp + 86400, ZEROS)\r\n\r\n    balances: uint256[N_COINS] = ZEROS\r\n    for i in range(N_COINS):\r\n        balances[i] = ERC20(self.coins[i]).balanceOf(self)\r\n        ERC20(self.coins[i]).approve(self.new, balances[i])\r\n\r\n    min_mint_amount: uint256 = 0\r\n    if self.new_token.totalSupply() > 0:\r\n        min_mint_amount = self.new.calc_token_amount(balances, True)\r\n        min_mint_amount = min_mint_amount * 999 / 1000\r\n\r\n    self.new.add_liquidity(balances, min_mint_amount)\r\n\r\n    new_mint_amount: uint256 = self.new_token.balanceOf(self)\r\n    assert_modifiable(\r\n        self.new_token.transfer(msg.sender, new_mint_amount))",
	"ContractName": "Vyper_contract",
	"CompilerVersion": "vyper:0.1.0b16"
}