{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.15;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Token\r\n * @dev API interface for interacting with the WILD Token contract \r\n */\r\ninterface Token {\r\n  function transfer(address _to, uint256 _value) returns (bool);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract PreICO is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  Token token;\r\n\r\n  uint256 public constant RATE = 3000; // Number of tokens per Ether\r\n  uint256 public constant CAP = 2000; // Cap in Ether\r\n  uint256 public constant START = 1504357200; // Sep 2, 2017 @ 09:00 EST\r\n  uint256 public constant DAYS = 1; // 1 Day\r\n  \r\n  uint256 public constant initialTokens = 6000000 * 10**18; // Initial number of tokens available\r\n  bool public initialized = false;\r\n  uint256 public raisedAmount = 0;\r\n\r\n  event BoughtTokens(address indexed to, uint256 value);\r\n\r\n  modifier whenSaleIsActive() {\r\n    // Check if sale is active\r\n    assert(isActive());\r\n\r\n    _;\r\n  }\r\n\r\n  function PreICO(address _tokenAddr) {\r\n      require(_tokenAddr != 0);\r\n      token = Token(_tokenAddr);\r\n  }\r\n  \r\n  function initialize() onlyOwner {\r\n      require(initialized == false); // Can only be initialized once\r\n      require(tokensAvailable() == initialTokens); // Must have enough tokens allocated\r\n      initialized = true;\r\n  }\r\n\r\n  function isActive() constant returns (bool) {\r\n    return (\r\n        initialized == true &&\r\n        now >= START && // Must be after the START date\r\n        now <= START.add(DAYS * 1 days) && // Must be before the end date\r\n        goalReached() == false // Goal must not already be reached\r\n    );\r\n  }\r\n\r\n  function goalReached() constant returns (bool) {\r\n    return (raisedAmount >= CAP * 1 ether);\r\n  }\r\n\r\n  function () payable {\r\n    buyTokens();\r\n  }\r\n\r\n  /**\r\n  * @dev function that sells available tokens\r\n  */\r\n  function buyTokens() payable whenSaleIsActive {\r\n    // Calculate tokens to sell\r\n    uint256 weiAmount = msg.value;\r\n    uint256 tokens = weiAmount.mul(RATE);\r\n\r\n    BoughtTokens(msg.sender, tokens);\r\n\r\n    // Increment raised amount\r\n    raisedAmount = raisedAmount.add(msg.value);\r\n    \r\n    // Send tokens to buyer\r\n    token.transfer(msg.sender, tokens);\r\n    \r\n    // Send money to owner\r\n    owner.transfer(msg.value);\r\n  }\r\n\r\n  /**\r\n   * @dev returns the number of tokens allocated to this contract\r\n   */\r\n  function tokensAvailable() constant returns (uint256) {\r\n    return token.balanceOf(this);\r\n  }\r\n\r\n  /**\r\n   * @notice Terminate contract and refund to owner\r\n   */\r\n  function destroy() onlyOwner {\r\n    // Transfer tokens back to owner\r\n    uint256 balance = token.balanceOf(this);\r\n    assert(balance > 0);\r\n    token.transfer(owner, balance);\r\n\r\n    // There should be no ether in the contract but just in case\r\n    selfdestruct(owner);\r\n  }\r\n\r\n}",
	"ContractName": "PreICO",
	"CompilerVersion": "v0.4.15+commit.bbb8e64f"
}