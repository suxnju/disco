{
	"Language": "Solidity",
	"Source": "//FIREDATE COIN - LIPS\r\n//FIREDATE - Matches made in heaven\r\n//https://fire.date\r\n\r\npragma solidity ^0.4.23;\r\n\r\ncontract Token {\r\n/* This is a slight change to the ERC20 base standard.\r\nfunction totalSupply() constant returns (uint256 supply);\r\nis replaced with:\r\nuint256 public totalSupply;\r\nThis automatically creates a getter function for the totalSupply.\r\nThis is moved to the base contract since public getter functions are not\r\ncurrently recognised as an implementation of the matching abstract\r\nfunction by the compiler.\r\n*/\r\n/// total amount of tokens\r\nuint256 public totalSupply;\r\n\r\n/// @param _owner The address from which the balance will be retrieved\r\n/// @return The balance\r\nfunction balanceOf(address _owner) public constant returns (uint256 balance);\r\n\r\n/// @notice send '_value' token to '_to' from 'msg.sender'\r\n/// @param _to The address of the recipient\r\n/// @param _value The amount of token to be transferred\r\n/// @return Whether the transfer was successful or not\r\nfunction transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n/// @notice send '_value' token to '_to' from '_from' on the condition it is approved by '_from'\r\n/// @param _from The address of the sender\r\n/// @param _to The address of the recipient\r\n/// @param _value The amount of token to be transferred\r\n/// @return Whether the transfer was successful or not\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n/// @notice 'msg.sender' approves '_spender' to spend '_value' tokens\r\n/// @param _spender The address of the account able to transfer the tokens\r\n/// @param _value The amount of tokens to be approved for transfer\r\n/// @return Whether the approval was successful or not\r\nfunction approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n/// @param _owner The address of the account owning tokens\r\n/// @param _spender The address of the account able to transfer the tokens\r\n/// @return Amount of remaining tokens allowed to spent\r\nfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);\r\n\r\nevent Transfer(address indexed _from, address indexed _to, uint256 _value);\r\nevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract SafeMath {\r\n\r\n/* function assert(bool assertion) internal { */\r\n/*   if (!assertion) { */\r\n/*     revert(); */\r\n/*   } */\r\n/* }      // assert no longer needed once solidity is on 0.4.10 */\r\n\r\nfunction safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\r\nuint256 z = x + y;\r\nassert((z >= x) && (z >= y));\r\nreturn z;\r\n}\r\n\r\nfunction safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\r\nassert(x >= y);\r\nuint256 z = x - y;\r\nreturn z;\r\n}\r\n\r\nfunction safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\r\nuint256 z = x * y;\r\nassert((x == 0)||(z/x == y));\r\nreturn z;\r\n}\r\n\r\nfunction safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nassert(b <= a);\r\nreturn a - b;\r\n}\r\n\r\n}\r\n\r\ncontract StandardToken is Token, SafeMath {\r\n\r\nfunction transfer(address _to, uint256 _value) public returns (bool success) {\r\n//Default assumes totalSupply can't be over max (2^256 - 1).\r\n//If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\r\n//Replace the if with this one instead.\r\n//if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\nif (balances[msg.sender] >= _value && _value > 0) {\r\nbalances[msg.sender] -= _value;\r\nbalances[_to] += _value;\r\nemit Transfer(msg.sender, _to, _value);\r\nreturn true;\r\n} else { return false; }\r\n}\r\n\r\nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n//same as above. Replace this line with the following if you want to protect against wrapping uints.\r\n//if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\r\nif (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\nbalances[_to] += _value;\r\nbalances[_from] -= _value;\r\nallowed[_from][msg.sender] -= _value;\r\nemit Transfer(_from, _to, _value);\r\nreturn true;\r\n} else { return false; }\r\n}\r\n\r\nfunction balanceOf(address _owner) public constant returns (uint256 balance) {\r\nreturn balances[_owner];\r\n}\r\n\r\nfunction approve(address _spender, uint256 _value) public returns (bool success) {\r\nallowed[msg.sender][_spender] = _value;\r\nemit Approval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\nfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\nreturn allowed[_owner][_spender];\r\n}\r\n\r\nmapping (address => uint256) balances;\r\nmapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract FIREDATE is StandardToken {\r\n\r\n// metadata\r\nstring public constant name = \"FIREDATE\";\r\nstring public constant symbol = \"LIPS\";\r\nuint256 public constant decimals = 0;\r\nstring public version = \"1.0\";\r\n\r\n// contracts\r\naddress public ethFundDeposit;      // beneficiary address.\r\naddress public tokenFundDeposit;     // initial token owner\r\n\r\n// crowdsale parameters\r\nbool public isFinalized;       // switched to true in operational state\r\nuint256 public fundingStartBlock;\r\nuint256 public fundingEndBlock;\r\nuint256 public crowdsaleSupply = 0;         // crowdsale supply\r\nuint256 public tokenExchangeRate = 1000000;   // Investor gets 1 Million tokens per ETH\r\nuint256 public constant tokenCreationCap =  88 * (10 ** 6) * 10 ** 18; // 88 Million tokens total\r\nuint256 public tokenCrowdsaleCap =  80 * (10 ** 6) * 10 ** 18; //8 Million tokens reserved for business development\r\n// events\r\nevent CreateFIREDATE(address indexed _to, uint256 _value);\r\n\r\n// constructor\r\nconstructor() public\r\n{\r\n    isFinalized = false;                   //controls pre through crowdsale state\r\n    ethFundDeposit = 0x94EE3D36a7547dcb3Ff765901D81453cf1Ba67dC;\r\n    tokenFundDeposit = 0x94EE3D36a7547dcb3Ff765901D81453cf1Ba67dC;\r\n    tokenExchangeRate = 1000000; //1 Million coins per ETHER\r\n    fundingStartBlock = block.number;\r\n    fundingEndBlock = fundingStartBlock + 88888; //Sale will run for approximately 15.4 days or 88,888 blocks\r\n    totalSupply = tokenCreationCap;\r\n    balances[tokenFundDeposit] = tokenCreationCap;    // deposit all token to the initial address.\r\n    emit CreateFIREDATE(tokenFundDeposit, tokenCreationCap);\r\n}\r\n\r\nfunction () payable public {\r\nassert(!isFinalized);\r\nrequire(block.number >= fundingStartBlock);\r\nrequire(block.number < fundingEndBlock);\r\nrequire(msg.value > 0);\r\n\r\nuint256 tokens = safeMult(msg.value, tokenExchangeRate);\r\ncrowdsaleSupply = safeAdd(crowdsaleSupply, tokens);\r\n\r\n// return money if something goes wrong\r\nrequire(tokenCrowdsaleCap >= crowdsaleSupply);\r\n\r\nbalances[msg.sender] = safeAdd(balances[msg.sender], tokens);     // add amount of tokens to sender\r\nbalances[tokenFundDeposit] = safeSub(balances[tokenFundDeposit], tokens); // subtracts amount from initial balance\r\nemit CreateFIREDATE(msg.sender, tokens);\r\n}\r\n/// @dev Accepts ether and creates new tokens.\r\nfunction createTokens() payable external {\r\nrequire(!isFinalized);\r\nrequire(block.number >= fundingStartBlock);\r\nrequire(block.number < fundingEndBlock);\r\nrequire(msg.value > 0);\r\n\r\nuint256 tokens = safeMult(msg.value, tokenExchangeRate);    // check that we does not oversell\r\ncrowdsaleSupply = safeAdd(crowdsaleSupply, tokens);\r\n\r\n// return money if something goes wrong\r\nrequire(tokenCrowdsaleCap >= crowdsaleSupply);\r\n\r\nbalances[msg.sender] = safeAdd(balances[msg.sender], tokens);     // add amount of tokens to sender\r\nbalances[tokenFundDeposit] = safeSub(balances[tokenFundDeposit], tokens); // subtracts amount from initial balance\r\nemit CreateFIREDATE(msg.sender, tokens);      // logs token creation\r\n}\r\n\r\n/// @dev Update crowdsale parameter\r\nfunction updateParams(\r\nuint256 _tokenExchangeRate,\r\nuint256 _tokenCrowdsaleCap,\r\nuint256 _fundingStartBlock,\r\nuint256 _fundingEndBlock) external\r\n{\r\nassert(block.number < fundingStartBlock);\r\nassert(!isFinalized);\r\n\r\n// update system parameters\r\ntokenExchangeRate = _tokenExchangeRate;\r\ntokenCrowdsaleCap = _tokenCrowdsaleCap;\r\nfundingStartBlock = _fundingStartBlock;\r\nfundingEndBlock = _fundingEndBlock;\r\n}\r\n\r\nfunction checkContractBalance() public view returns(uint256) {\r\nreturn address(this).balance;\r\n}\r\n\r\n/// @dev Ends the funding period and sends the ETH home\r\nfunction finalize(uint256 _amount) external {\r\n    assert(!isFinalized);\r\n\r\n    // move to operational\r\n    isFinalized = true;\r\n    require(address(this).balance > _amount);\r\n    ethFundDeposit.transfer(_amount);\r\n}\r\n}",
	"ContractName": "FIREDATE",
	"CompilerVersion": "v0.4.26+commit.4563c3fc"
}