{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.5.8;\r\n\r\ncontract Owned {\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    address payable owner;\r\n    address payable newOwner;\r\n    function changeOwner(address payable _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        if (msg.sender == newOwner) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Stake is Owned {\r\n    uint8 public fee;\r\n    uint32 public stakers;\r\n    string public domain;\r\n    mapping (address=>uint256) stakes;\r\n    event Staked(address indexed _from, uint256 _value);\r\n    event Transfered(address indexed _from, address indexed _to, uint256 _value);\r\n    function stakeOf(address _user) view public returns (uint256 stake) {return stakes[_user];}\r\n    function transfer(address _to, uint256 _amount) public returns (bool ok){\r\n        require(_to!=address(0)&&_amount>100&&_amount<=stakes[msg.sender]);\r\n        stakes[msg.sender]-=_amount;\r\n        _amount-=payfee(_amount);\r\n        if (stakes[_to]==0) stakers++;\r\n        stakes[_to]+=_amount;\r\n        emit Transfered(msg.sender,_to,_amount);\r\n        return true;\r\n    }\r\n    function withdraw(uint256 _amount) public returns (bool ok){\r\n        require(_amount>100&&_amount<=stakes[msg.sender]);\r\n        stakes[msg.sender]-=_amount;\r\n        if (msg.sender==owner) owner.transfer(_amount);\r\n        else msg.sender.transfer(_amount-payfee(_amount));\r\n        return true;\r\n    }\r\n    function payfee(uint256 _amount) internal returns (uint256 fees){\r\n        if (msg.sender==owner) return 0;\r\n        fees = _amount*fee/100;\r\n        owner.transfer(fees);\r\n        return fees;\r\n    }\r\n}\r\n\r\ncontract EtherBoxStake is Stake{\r\n    \r\n    constructor() public{\r\n        fee = 1;\r\n        stakers = 0;\r\n        domain = 'www.etherbox.io';\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function () payable external {\r\n        require(msg.value>=100);\r\n        if (stakes[msg.sender]==0) stakers++;\r\n        stakes[msg.sender]+=msg.value-payfee(msg.value);\r\n        emit Staked(msg.sender,msg.value);\r\n    }\r\n}",
	"ContractName": "EtherBoxStake",
	"CompilerVersion": "v0.5.8+commit.23d335f2"
}