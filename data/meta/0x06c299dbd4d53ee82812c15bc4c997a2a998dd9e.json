{
	"Language": "Solidity",
	"Source": "/*\r\nImplements RAM-TOKEN-DEVELOPER 2018\r\n.*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\ncontract ERC20Interface {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n \r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ETHLightToken is ERC20Interface, Ownable {\r\n\r\n    uint256 constant private MAX_UINT256 = 2**256 - 1;\r\n    mapping (address => uint256) public balances;\r\n    mapping (address => mapping (address => uint256)) public allowed;\r\n   \r\n    string public name;                   \r\n    uint8 public decimals;                \r\n    string public symbol;                 \r\n    uint256 public totalSupply;\r\n    uint256 public tokenDecimal = 1000000000000000000;\r\n  \r\n\r\n    constructor() public {\r\n        totalSupply = 2000000000 * tokenDecimal;\r\n        balances[msg.sender] = totalSupply;           \r\n        name = \"ETH Light\";                                   \r\n        decimals = 18;                            \r\n        symbol = \"ELT\";                               \r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value);\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value); \r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyOwner public returns (bool success) {\r\n        require(balances[_from] >= _value);\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n\t\tallowed[_from][msg.sender] -= _value;\r\n        \r\n        emit Transfer(_from, _to, _value); \r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value); \r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    function () payable public {\r\n\t\tbalances[msg.sender] += msg.value;\r\n\t}\r\n}",
	"ContractName": "ETHLightToken",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}