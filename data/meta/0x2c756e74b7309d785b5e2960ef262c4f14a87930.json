{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.16;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is owned {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS paused\r\n     */\r\n    modifier whenNotPaused {\r\n        require(paused == false);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev modifier to allow actions only when the contract IS NOT paused\r\n     */\r\n    modifier whenPaused {\r\n        require(paused == true);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to pause, triggers stopped state\r\n     */\r\n    function pause() onlyOwner whenNotPaused public returns (bool) {\r\n        paused = true;\r\n        emit Pause();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev called by the owner to unpause, returns to normal state\r\n     */\r\n    function unpause() onlyOwner whenPaused public returns (bool) {\r\n        paused = false;\r\n        emit Unpause();\r\n        return true;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract StandardToken is Pausable {\r\n    // Variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 0;\r\n    uint256 public totalSupply;\r\n    uint256 public currentSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor(\r\n        uint256 initialSupply,\r\n        uint256 maxSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n        currentSupply = initialSupply;  // Update total supply with the decimal amount\r\n        totalSupply = maxSupply;\r\n        balanceOf[msg.sender] = currentSupply;                    // Give the creator all initial tokens\r\n        name = tokenName;                                         // Set the name for display purposes\r\n        symbol = tokenSymbol;                                     // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal { \r\n        require(_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(balanceOf[_from] >= _value);               // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to]; // Save this for an assertion in the future\r\n        balanceOf[_from] -= _value;                                // Subtract from the sender\r\n        balanceOf[_to] += _value;                                  // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     * Send `_value` tokens to `_to` from your account\r\n     */\r\n    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Transfer tokens from other address\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     */\r\n    function approve(address _spender, uint256 _value) whenNotPaused public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function Supplies() view public \r\n        returns (uint256 total, uint256 current) {\r\n        return (totalSupply, currentSupply);\r\n    }\r\n\r\n    // =========================\r\n    // ====== Unnecessary ======\r\n    // =========================\r\n    /**\r\n     * Set allowance for other address and notify\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     * Remove `_value` tokens from the system irreversibly\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        currentSupply -= _value;                    // Updates currentSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        currentSupply -= _value;                            // Update currentSupply\r\n        emit Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*       ADVANCED TOKEN STARTS HERE       */\r\n/******************************************/\r\n\r\ncontract AdvancedToken is owned, StandardToken {\r\n    \r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor(\r\n        uint256 initialSupply,\r\n        uint256 maxSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) StandardToken(initialSupply, maxSupply, tokenName, tokenSymbol) public {}\r\n\r\n    /// @notice Create `mintedAmount` tokens and send it to `target`\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        require (totalSupply >= currentSupply + mintedAmount);\r\n        balanceOf[target] += mintedAmount;\r\n        currentSupply += mintedAmount;\r\n        emit Transfer(0, this, mintedAmount);\r\n        emit Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\r\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    function freezeAccount(address target) onlyOwner public {\r\n        frozenAccount[target] = true;\r\n        emit FrozenFunds(target, true);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    function unfreezeAccount(address target) onlyOwner public {\r\n        frozenAccount[target] = false;\r\n        emit FrozenFunds(target, false);\r\n    }\r\n\r\n    function () payable public {\r\n    }\r\n}",
	"ContractName": "AdvancedToken",
	"CompilerVersion": "v0.4.25+commit.59dbf8f1"
}