{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.16;\r\n\r\n/**\r\n * PornTokenV2 Crowd Sale\r\n */\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount);\r\n}\r\n\r\ncontract PornTokenV2Crowdsale {\r\n    address public beneficiary;\r\n    uint public fundingGoal;\r\n    uint public amountRaised;\r\n    uint private currentBalance;\r\n    uint public deadline;\r\n    uint public price;\r\n    uint public initialTokenAmount;\r\n    uint public currentTokenAmount;\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    bool fundingGoalReached = false;\r\n    bool crowdsaleClosed = false;\r\n\r\n    event GoalReached(address recipient, uint totalAmountRaised);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Setup the owner\r\n     */\r\n    function PornTokenV2Crowdsale(\r\n        address sendTo,\r\n        uint fundingGoalInEthers,\r\n        uint durationInMinutes,\r\n        address addressOfTokenUsedAsReward\r\n    ) {\r\n        beneficiary = sendTo;\r\n        fundingGoal = fundingGoalInEthers * 1 ether;\r\n        deadline = now + durationInMinutes * 1 minutes;\r\n        /* 0.00001337 x 1 ether in wei */\r\n        price = 13370000000000;\r\n        initialTokenAmount = 747943160;\r\n        currentTokenAmount = 747943160;\r\n        tokenReward = token(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    /**\r\n     * Fallback function\r\n     *\r\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\r\n     */\r\n    function () payable {\r\n        require(!crowdsaleClosed);\r\n        uint amount = msg.value;\r\n        if (amount > 0) {\r\n            balanceOf[msg.sender] += amount;\r\n            amountRaised += amount;\r\n            currentBalance += amount;\r\n            uint tokenAmount = amount / price;\r\n            currentTokenAmount -= tokenAmount;\r\n            tokenReward.transfer(msg.sender, tokenAmount * 1 ether);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Bank tokens\r\n     *\r\n     * Deposit token sale proceeds to PornToken Account\r\n     */\r\n    function bank() public {\r\n        if (beneficiary == msg.sender && currentBalance > 0) {\r\n            uint amountToSend = currentBalance;\r\n            currentBalance = 0;\r\n            beneficiary.send(amountToSend);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Withdraw unusold tokens\r\n     *\r\n     * Deposit unsold tokens to PornToken Account\r\n     */\r\n    function returnUnsold() public {\r\n        if (beneficiary == msg.sender) {\r\n            tokenReward.transfer(beneficiary, currentTokenAmount);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Withdraw unusold tokens\r\n     *\r\n     * Deposit unsold tokens to PornToken Account 100k Safe\r\n     */\r\n    function returnUnsoldSafe() public {\r\n        if (beneficiary == msg.sender) {\r\n            uint tokenAmount = 100000;\r\n            tokenReward.transfer(beneficiary, tokenAmount);\r\n        }\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n\r\n    /**\r\n     * Check if goal was reached\r\n     *\r\n     * Checks if the goal or time limit has been reached and ends the campaign\r\n     */\r\n    function checkGoalReached() afterDeadline {\r\n        if (amountRaised >= fundingGoal){\r\n            fundingGoalReached = true;\r\n            GoalReached(beneficiary, amountRaised);\r\n        }\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n\r\n}",
	"ContractName": "PornTokenV2Crowdsale",
	"CompilerVersion": "v0.4.19+commit.c4cbbb05"
}