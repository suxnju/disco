{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.25;\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    bool public paused;\r\n    \r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    constructor() internal {\r\n        paused = false;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() public onlyOwner whenNotPaused {\r\n        paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function unpause() public onlyOwner whenPaused {\r\n        paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\ncontract BaseToken is Pausable {\r\n    using SafeMath for uint256;\r\n\r\n    string constant public name = '\u534e\u590f\u4ee5\u592a\u574a\u57fa\u91d1';\r\n    string constant public symbol = 'HXETH';\r\n    uint8 constant public decimals = 0;\r\n    uint256 public totalSupply = 0;\r\n    uint256 constant public _totalLimit = 100000000000000;\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function _transfer(address from, address to, uint value) internal {\r\n        require(to != address(0));\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n        totalSupply = totalSupply.add(value);\r\n        require(_totalLimit >= totalSupply);\r\n        balanceOf[account] = balanceOf[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        require(spender != address(0));\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {\r\n        require(spender != address(0));\r\n        allowance[msg.sender][spender] = allowance[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {\r\n        require(spender != address(0));\r\n        allowance[msg.sender][spender] = allowance[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract BurnToken is BaseToken {\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    function burn(uint256 value) public whenNotPaused returns (bool) {\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Burn(msg.sender, value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address from, uint256 value) public whenNotPaused returns (bool) {\r\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Burn(from, value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract InvestToken is BaseToken {\r\n    uint256 constant public investMax = 0;\r\n    uint256 public investTotal = 0;\r\n    uint256 public investEther = 0;\r\n    uint256 public investMin = 0;\r\n    uint256 public investRatio = 0;\r\n    uint256 public investBegintime = 1554726130;\r\n    uint256 public investEndtime = 1554726130;\r\n    address public investHolder = 0xbCADE28d8C2F22345165f0e07C94A600f6C4e925;\r\n\r\n    event Invest(address indexed from, uint256 indexed ratio, uint256 value, uint256 tokenValue);\r\n    event Withdraw(address indexed from, address indexed holder, uint256 value);\r\n    event InvestSetting(uint256 investMin, uint256 investRatio, uint256 investBegintime, uint256 investEndtime, address investHolder);\r\n\r\n    function invest() public payable {\r\n        require(block.timestamp >= investBegintime && block.timestamp <= investEndtime);\r\n        require(msg.value >= investMin);\r\n        uint256 tokenValue = (msg.value * investRatio * 10 ** uint256(decimals)) / (1 ether / 1 wei);\r\n        require(tokenValue > 0);\r\n        investTotal = investTotal.add(tokenValue);\r\n        if (investMax > 0 && investTotal > investMax) {\r\n            revert();\r\n        }\r\n        investEther = investEther.add(msg.value);\r\n        _mint(msg.sender, tokenValue);\r\n        emit Invest(msg.sender, investRatio, msg.value, tokenValue);\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint256 balance = address(this).balance;\r\n        investHolder.transfer(balance);\r\n        emit Withdraw(msg.sender, investHolder, balance);\r\n    }\r\n\r\n    function changeInvestSetting(uint256 newInvestMin, uint256 newInvestRatio, uint256 newInvestBegintime, uint256 newInvestEndtime, address newInvestHolder) public onlyOwner {\r\n        require(newInvestRatio <= 999999999);\r\n        investMin = newInvestMin;\r\n        investRatio = newInvestRatio;\r\n        investBegintime = newInvestBegintime;\r\n        investEndtime = newInvestEndtime;\r\n        investHolder = newInvestHolder;\r\n        emit InvestSetting(newInvestMin, newInvestRatio, newInvestBegintime, newInvestEndtime, newInvestHolder);\r\n    }\r\n}\r\n\r\ncontract CustomToken is BaseToken, BurnToken, InvestToken {\r\n    constructor() public {\r\n\r\n        owner = 0xbCADE28d8C2F22345165f0e07C94A600f6C4e925;\r\n    }\r\n\r\n    function() public payable {\r\n        invest();\r\n    }\r\n}",
	"ContractName": "CustomToken",
	"CompilerVersion": "v0.4.25+commit.59dbf8f1"
}