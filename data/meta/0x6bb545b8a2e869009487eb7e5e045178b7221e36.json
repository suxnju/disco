{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.24;\r\n\r\n/*\r\nDeveloped by: https://www.tradecryptocurrency.com/\r\n*/\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = 0x858A045e0559ffCc1bB0bB394774CF49b02593F0;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner)\r\n    onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract pays_commission {\r\n    address public commissionGetter;\r\n    uint256 public minimumEtherCommission;\r\n    uint public minimumTokenCommission;\r\n\r\n    constructor() public {\r\n        commissionGetter = 0xCd8bf69ad65c5158F0cfAA599bBF90d7f4b52Bb0;\r\n        minimumEtherCommission = 50000000000;\r\n        minimumTokenCommission = 1;\r\n    }\r\n\r\n    modifier onlyCommissionGetter {\r\n        require(msg.sender == commissionGetter);\r\n        _;\r\n    }\r\n\r\n    function transferCommissionGetter(address newCommissionGetter)\r\n    onlyCommissionGetter public {\r\n        commissionGetter = newCommissionGetter;\r\n    }\r\n\r\n    function changeMinimumCommission(\r\n        uint256 newMinEtherCommission, uint newMinTokenCommission)\r\n    onlyCommissionGetter public {\r\n        minimumEtherCommission = newMinEtherCommission;\r\n        minimumTokenCommission = newMinTokenCommission;\r\n    }\r\n}\r\n\r\n\r\ncontract SMBQToken is pays_commission, owned {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 0;\r\n    uint256 public totalSupply;\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    uint256 public buyPrice = 1700000000000000;\r\n    uint256 public sellPrice = 1500000000000000;\r\n    bool public closeSell = false;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n\r\n    // Events\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event FrozenFunds(address target, bool frozen);\r\n    event Deposit(address sender, uint amount);\r\n    event Withdrawal(address receiver, uint amount);\r\n\r\n\r\n    // Constructor\r\n\r\n    constructor(uint256 initialSupply, string tokenName, string tokenSymbol)\r\n    public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);\r\n        balanceOf[owner] = totalSupply;\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n    }\r\n\r\n\r\n    // Internal functions\r\n\r\n    function _transfer(address _from, address _to, uint _value)\r\n    internal {\r\n        require(_to != 0x0);\r\n        require(!frozenAccount[_from]);\r\n        require(!frozenAccount[_to]);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        emit Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function _pay_token_commission (uint256 _value)\r\n    internal {\r\n        uint market_value = _value * sellPrice;\r\n        uint commission_value = market_value * 1 / 100;\r\n        // The comision is paid with tokens\r\n        uint commission = commission_value / sellPrice;\r\n        if (commission < minimumTokenCommission){ \r\n            commission = minimumTokenCommission;\r\n        }\r\n        address contr = this;\r\n        _transfer(contr, commissionGetter, commission);\r\n    }\r\n\r\n\r\n    // Only owner functions\r\n\r\n    function refillTokens(uint256 _value)\r\n    onlyOwner public {\r\n        _transfer(msg.sender, this, _value);\r\n    }\r\n\r\n    function mintToken(uint256 mintedAmount)\r\n    onlyOwner public {\r\n        balanceOf[owner] += mintedAmount;\r\n        totalSupply += mintedAmount;\r\n        emit Transfer(0, this, mintedAmount);\r\n        emit Transfer(this, owner, mintedAmount);\r\n    }\r\n\r\n    function freezeAccount(address target, bool freeze)\r\n    onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice)\r\n    onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    function setStatus(bool isClosedSell)\r\n    onlyOwner public {\r\n        closeSell = isClosedSell;\r\n    }\r\n\r\n    function withdrawEther(uint amountInWeis)\r\n    onlyOwner public {\r\n        address contr = this;\r\n        require(contr.balance >= amountInWeis);\r\n        emit Withdrawal(msg.sender, amountInWeis);\r\n        owner.transfer(amountInWeis);\r\n    }\r\n\r\n\r\n    // Public functions\r\n\r\n    function transfer(address _to, uint256 _value)\r\n    public {\r\n        _pay_token_commission(_value);\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value)\r\n    public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);\r\n        _pay_token_commission(_value);\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function depositEther() payable\r\n    public returns(bool success) {\r\n        address contr = this;\r\n        require((contr.balance + msg.value) > contr.balance);\r\n        emit Deposit(msg.sender, msg.value);\r\n        return true;\r\n    }\r\n\r\n    function buy() payable\r\n    public {\r\n        uint amount = msg.value / buyPrice;\r\n        uint market_value = amount * buyPrice;\r\n        uint commission = market_value * 1 / 100;\r\n        // The comision is paid with Ether\r\n        if (commission < minimumEtherCommission){\r\n            commission = minimumEtherCommission;\r\n        }\r\n        address contr = this;\r\n        require(contr.balance >= commission);\r\n        commissionGetter.transfer(commission);\r\n        _transfer(this, msg.sender, amount);\r\n    }\r\n\r\n    function sell(uint256 amount)\r\n    public {\r\n    \trequire(!closeSell);\r\n        _pay_token_commission(amount);\r\n        _transfer(msg.sender, this, amount);\r\n        uint market_value = amount * sellPrice;\r\n        address contr = this;\r\n        require(contr.balance >= market_value);\r\n        msg.sender.transfer(market_value);\r\n    }\r\n\r\n    function () payable\r\n    public {\r\n        buy();\r\n    }\r\n}",
	"ContractName": "SMBQToken",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}