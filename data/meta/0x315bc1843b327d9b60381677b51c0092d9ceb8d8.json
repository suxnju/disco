{
	"Language": "Solidity",
	"Source": "pragma solidity 0.4.24;\r\n\r\n// Basic ICO for ERC20 tokens\r\n\r\ninterface iERC20 {\r\n    function totalSupply() external constant returns (uint256 supply);\r\n    function balanceOf(address owner) external constant returns (uint256 balance);    \r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n}\r\n\r\ncontract MeerkatICO {\r\n    iERC20 token;\r\n    address owner;\r\n    address tokenCo;\r\n    uint rateMe;\r\n    \r\n    modifier ownerOnly() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n   constructor(address mainToken) public {\r\n        token = iERC20(mainToken);\r\n        tokenCo = mainToken;\r\n        owner = msg.sender;\r\n        rateMe = 0;\r\n    }\r\n\r\n    function withdrawETH() public ownerOnly {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    function setRate(uint _rateMe) public ownerOnly {\r\n        rateMe = _rateMe;\r\n    }\r\n    \r\n    function CurrentRate() public constant returns (uint rate) {\r\n        return rateMe;\r\n    }\r\n    \r\n    function TokenLinked() public constant returns (address _token, uint _amountLeft) {\r\n        return (tokenCo, (token.balanceOf(address(this)) / 10**18)) ;\r\n    }\r\n    \r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public ownerOnly returns (bool success) {\r\n        return iERC20(tokenAddress).transfer(owner, tokens);\r\n    }\r\n\r\n    function () public payable {\r\n        require( (msg.value >= 100000000000000000) && (rateMe != 0) );\r\n        \r\n        uint value = msg.value * rateMe;\r\n\r\n        require(value/msg.value == rateMe);\r\n        \r\n        token.transfer(msg.sender, value);\r\n        \r\n    }\r\n}",
	"ContractName": "MeerkatICO",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}