{
	"Language": "Solidity",
	"Source": "pragma solidity 0.4.24;\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function setOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract PurchasePackInterface {\r\n    function basePrice() public returns (uint);\r\n    function purchaseFor(address user, uint16 packCount, address referrer) public payable;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Vault is Ownable { \r\n\r\n    function () public payable {\r\n\r\n    }\r\n\r\n    function getBalance() public view returns (uint) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function withdraw(uint amount) public onlyOwner {\r\n        require(address(this).balance >= amount);\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function withdrawAll() public onlyOwner {\r\n        withdraw(address(this).balance);\r\n    }\r\n}\r\n\r\n\r\n\r\ncontract DiscountPack is Vault {\r\n\r\n    PurchasePackInterface private pack;\r\n    uint public basePrice;\r\n    uint public baseDiscount;\r\n\r\n    constructor(PurchasePackInterface packToDiscount) public {\r\n        pack = packToDiscount;\r\n\r\n        baseDiscount = uint(7) * pack.basePrice() / uint(100);\r\n        basePrice = pack.basePrice() - baseDiscount;\r\n    }\r\n\r\n    event PackDiscount(address purchaser, uint16 packs, uint discount);\r\n \r\n    function() public payable {}\r\n\r\n    function purchase(uint16 packs) public payable {\r\n        uint discountedPrice = packs * basePrice;\r\n        uint discount = packs * baseDiscount;\r\n        uint fullPrice = discountedPrice + discount;\r\n\r\n        require(msg.value >= discountedPrice, \"Not enough value for the desired pack count.\");\r\n        require(address(this).balance >= discount, \"This contract is out of front money.\");\r\n\r\n        // This should route the referral back to this contract\r\n        pack.purchaseFor.value(fullPrice)(msg.sender, packs, this);\r\n        emit PackDiscount(msg.sender, packs, discount);\r\n    }\r\n\r\n    function fraction(uint value, uint8 num, uint8 denom) internal pure returns (uint) {\r\n        return (uint(num) * value) / uint(denom);\r\n    }\r\n}\r\n\r\n\r\ncontract DiscountEpicPack is DiscountPack {\r\n    constructor(PurchasePackInterface packToDiscount) public payable DiscountPack(packToDiscount) {\r\n        \r\n    }\r\n}",
	"ContractName": "DiscountEpicPack",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}