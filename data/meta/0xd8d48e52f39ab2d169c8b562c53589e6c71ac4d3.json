{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.19;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * ERC-20 Token Standard\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ncontract Token {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _owner) public view returns (uint256);\r\n    function transfer(address _to, uint256 _value) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\r\n    function approve(address _spender, uint256 _value) public returns (bool);\r\n    function allowance(address _owner, address _spender) public view returns (uint256);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/**\r\n * Interface for trading discounts and rebates for specific accounts\r\n */\r\ncontract FeeModifiersInterface {\r\n    function accountFeeModifiers(address _user) public view returns (uint256 feeDiscount, uint256 feeRebate);\r\n    function tradingFeeModifiers(address _maker, address _taker) public view returns (uint256 feeMakeDiscount, uint256 feeTakeDiscount, uint256 feeRebate);\r\n}\r\n\r\n\r\n/**\r\n * Interface for trade tracker to handle trade event\r\n */\r\ncontract TradeTrackerInterface {\r\n    function tradeEventHandler(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, address _maker, address _user, bytes32 _orderHash, uint256 _gasLimit) public;\r\n}\r\n\r\n\r\ncontract ETHERCExchange is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // the trade tracker address\r\n    address public tradeTracker;\r\n    // the contract which stores fee discounts/rebates\r\n    address public feeModifiers;\r\n    // the account that will receive fees\r\n    address public feeAccount;\r\n    // maker fee percentage times (1 ether)\r\n    uint256 public feeMake;\r\n    // taker fee percentage times (1 ether) \r\n    uint256 public feeTake;\r\n\r\n    // mapping of token addresses to mapping of account balances\r\n    mapping (address => mapping (address => uint256)) public tokens;\r\n    // mapping of order hash to status cancelled\r\n    mapping (bytes32 => bool) public cancelledOrders;\r\n    // mapping order hashes to uints (amount of order that has been filled)\r\n    mapping (bytes32 => uint256) public orderFills;\r\n\r\n    //Logging events\r\n    event Deposit(address token, address user, uint256 amount, uint256 balance);\r\n    event Withdraw(address token, address user, uint256 amount, uint256 balance);\r\n    event Cancel(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address maker, uint8 v, bytes32 r, bytes32 s, bytes32 orderHash, uint256 amountFilled);\r\n    event Trade(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, address maker, address taker, bytes32 orderHash);\r\n\r\n    function ETHERCExchange() public {\r\n        feeAccount = owner;\r\n    }\r\n\r\n    function() public {\r\n        revert();\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Fee Discounts, Rebates\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function getAccountFeeModifiers(address _user) public view returns(uint256 feeDiscount, uint256 feeRebate) {\r\n        if (feeModifiers != address(0)) {\r\n            (feeDiscount, feeRebate) = FeeModifiersInterface(feeModifiers).accountFeeModifiers(_user);\r\n        }\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Funds\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function deposit() public payable {\r\n        tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);\r\n        Deposit(address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);\r\n    }\r\n\r\n    function depositToken(address _token, uint256 _amount) public {\r\n        require(_token != address(0));\r\n\r\n        if (!Token(_token).transferFrom(msg.sender, this, _amount)) revert();\r\n        tokens[_token][msg.sender] = tokens[_token][msg.sender].add(_amount);\r\n        Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\r\n    }\r\n\r\n    function withdraw(uint256 _amount) public {\r\n        require(tokens[address(0)][msg.sender] >= _amount);\r\n\r\n        tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(_amount);\r\n        msg.sender.transfer(_amount);\r\n        Withdraw(address(0), msg.sender, _amount, tokens[address(0)][msg.sender]);\r\n    }\r\n\r\n    function withdrawToken(address _token, uint256 _amount) public {\r\n        require(_token != address(0));\r\n        require(tokens[_token][msg.sender] >= _amount);\r\n\r\n        tokens[_token][msg.sender] = tokens[_token][msg.sender].sub(_amount);\r\n        if (!Token(_token).transfer(msg.sender, _amount)) revert();\r\n        Withdraw(_token, msg.sender, _amount, tokens[_token][msg.sender]);\r\n    }\r\n\r\n    function balanceOf(address _token, address _user) public view returns (uint256) {\r\n        return tokens[_token][_user];\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Trading & Order\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function trade(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker, uint8 _v, bytes32 _r, bytes32 _s, uint256 _amountTrade) public {\r\n        uint256 executionGasLimit = msg.gas;\r\n        bytes32 orderHash = getOrderHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker);\r\n\r\n        if (ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", orderHash), _v, _r, _s) != _maker ||\r\n            cancelledOrders[orderHash] ||\r\n            block.number > _expires ||\r\n            orderFills[orderHash].add(_amountTrade) > _amountGet\r\n        ) revert();\r\n\r\n        tradeBalances(_tokenGet, _amountGet, _tokenGive, _amountGive, _maker, _amountTrade);\r\n        orderFills[orderHash] = orderFills[orderHash].add(_amountTrade);\r\n        uint256 amountTradeGive = _amountGive.mul(_amountTrade) / _amountGet;\r\n        if(tradeTracker != address(0)){\r\n            TradeTrackerInterface(tradeTracker).tradeEventHandler(_tokenGet, _amountTrade, _tokenGive, amountTradeGive, _maker, msg.sender, orderHash, executionGasLimit);\r\n        }\r\n        Trade(_tokenGet, _amountTrade, _tokenGive, amountTradeGive, _maker, msg.sender, orderHash);\r\n    }\r\n\r\n    function tradeBalances(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, address _maker, uint256 _amountTrade) private {\r\n        uint256 feeMakeValue = _amountTrade.mul(feeMake) / (1 ether);\r\n        uint256 feeTakeValue = _amountTrade.mul(feeTake) / (1 ether);\r\n        uint256 feeRebateValue = 0;\r\n\r\n        if (feeModifiers != address(0)) {\r\n            uint256 feeMakeDiscount; uint256 feeTakeDiscount; uint256 feeRebate;\r\n            (feeMakeDiscount, feeTakeDiscount, feeRebate) = FeeModifiersInterface(feeModifiers).tradingFeeModifiers(_maker, msg.sender);\r\n            if (feeMakeValue > 0 && feeMakeDiscount > 0 && feeMakeDiscount <= 100 ) feeMakeValue = feeMakeValue.mul(100 - feeMakeDiscount) / 100;\r\n            if (feeTakeValue > 0 && feeTakeDiscount > 0 && feeTakeDiscount <= 100 ) feeTakeValue = feeTakeValue.mul(100 - feeTakeDiscount) / 100;\r\n            if (feeTakeValue > 0 && feeRebate > 0 && feeRebate <= 100) feeRebateValue = feeTakeValue.mul(feeRebate) / 100;\r\n        }\r\n\r\n        tokens[_tokenGet][msg.sender] = tokens[_tokenGet][msg.sender].sub(_amountTrade.add(feeTakeValue));\r\n        tokens[_tokenGet][_maker] = tokens[_tokenGet][_maker].add(_amountTrade.sub(feeMakeValue).add(feeRebateValue));\r\n        tokens[_tokenGive][msg.sender] = tokens[_tokenGive][msg.sender].add(_amountGive.mul(_amountTrade) / _amountGet);\r\n        tokens[_tokenGive][_maker] = tokens[_tokenGive][_maker].sub(_amountGive.mul(_amountTrade) / _amountGet);\r\n        tokens[_tokenGet][feeAccount] = tokens[_tokenGet][feeAccount].add(feeMakeValue.add(feeTakeValue).sub(feeRebateValue));\r\n    }\r\n\r\n    function validateTrade(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker, uint8 _v, bytes32 _r, bytes32 _s, uint256 _amountTrade, address _taker) public view returns (uint8) {\r\n        uint256 feeTakeValue = calculateTakerFee(_taker, _amountTrade);\r\n\r\n        if (_amountTrade.add(feeTakeValue) > tokens[_tokenGet][_taker]) return 1;\r\n        if (availableVolume(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker, _v, _r, _s) < _amountTrade) return 2;\r\n        return 0;\r\n    }\r\n\r\n    function calculateTakerFee(address _taker, uint256 _amountTrade) public view returns (uint256) {\r\n        uint256 feeTakeValue = _amountTrade.mul(feeTake) / (1 ether);\r\n\r\n        uint256 feeDiscount; uint256 feeRebate;\r\n        (feeDiscount, feeRebate) = getAccountFeeModifiers(_taker);\r\n        if (feeTakeValue > 0 && feeDiscount > 0 && feeDiscount <= 100 ) feeTakeValue = feeTakeValue.mul(100 - feeDiscount) / 100;\r\n\r\n        return feeTakeValue;\r\n    }\r\n\r\n    function getOrderHash(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker) public view returns (bytes32) {\r\n        return keccak256(this, _tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker);\r\n    }\r\n\r\n    function availableVolume(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker, uint8 _v, bytes32 _r, bytes32 _s) public view returns (uint256) {\r\n        bytes32 orderHash = getOrderHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker);\r\n\r\n        if (ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", orderHash), _v, _r, _s) != _maker ||\r\n            cancelledOrders[orderHash] ||\r\n            block.number > _expires ||\r\n            _amountGet <= orderFills[orderHash]\r\n        ) return 0;\r\n\r\n        uint256[2] memory available;\r\n        available[0] = _amountGet.sub(orderFills[orderHash]);\r\n        available[1] = tokens[_tokenGive][_maker].mul(_amountGet) / _amountGive;\r\n        if (available[0] < available[1]) return available[0];\r\n        return available[1];\r\n    }\r\n\r\n    function amountFilled(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _maker) public view returns (uint256) {\r\n        bytes32 orderHash = getOrderHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, _maker);\r\n        return orderFills[orderHash];\r\n    }\r\n\r\n    function cancelOrder(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) public {\r\n        bytes32 orderHash = getOrderHash(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, msg.sender);\r\n        if (ecrecover(keccak256(\"\\x19Ethereum Signed Message:\\n32\", orderHash), _v, _r, _s) != msg.sender) revert();\r\n\r\n        cancelledOrders[orderHash] = true;\r\n        Cancel(_tokenGet, _amountGet, _tokenGive, _amountGive, _expires, _nonce, msg.sender, _v, _r, _s, orderHash, orderFills[orderHash]);\r\n    }\r\n\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n    // Setting\r\n    ////////////////////////////////////////////////////////////////////////////////\r\n\r\n    function changeFeeAccount(address _feeAccount) public onlyOwner {\r\n        require(_feeAccount != address(0));\r\n        feeAccount = _feeAccount;\r\n    }\r\n\r\n    function changeFeeMake(uint256 _feeMake) public onlyOwner {\r\n        require(_feeMake != feeMake);\r\n        feeMake = _feeMake;\r\n    }\r\n\r\n    function changeFeeTake(uint256 _feeTake) public onlyOwner {\r\n        require(_feeTake != feeTake);\r\n        feeTake = _feeTake;\r\n    }\r\n\r\n    function changeFeeModifiers(address _feeModifiers) public onlyOwner {\r\n        require(feeModifiers != _feeModifiers);\r\n        feeModifiers = _feeModifiers;\r\n    }\r\n\r\n    function changeTradeTracker(address _tradeTracker) public onlyOwner {\r\n        require(tradeTracker != _tradeTracker);\r\n        tradeTracker = _tradeTracker;\r\n    }\r\n}",
	"ContractName": "ETHERCExchange",
	"CompilerVersion": "v0.4.20+commit.3155dd80"
}