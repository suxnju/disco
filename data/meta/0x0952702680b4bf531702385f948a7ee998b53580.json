{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.18;\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) public;\r\n}\r\n\r\ncontract Crowdsale {\r\n    address public payoutAddr;\r\n\r\n    uint public deadline;\r\n    uint public amountRaised;\r\n    uint public price = 300;\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    bool crowdsaleClosed = false;\r\n\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    function Crowdsale (\r\n        address ifSuccessfulSendTo,\r\n        address addressOfTokenUsedAsReward,\r\n        uint durationInMinutes\r\n    ) public {\r\n        payoutAddr = ifSuccessfulSendTo;\r\n        tokenReward = token(addressOfTokenUsedAsReward);\r\n        deadline = now + durationInMinutes * 1 minutes;\r\n    }\r\n    \r\n    function () public payable {\r\n        require(!crowdsaleClosed);\r\n        balanceOf[msg.sender] += msg.value;\r\n        amountRaised += msg.value;\r\n        tokenReward.transfer(msg.sender, msg.value * price);\r\n        FundTransfer(msg.sender, msg.value, true);\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n\r\n    function closeSale() public afterDeadline {\r\n        crowdsaleClosed = true;\r\n    }\r\n\r\n    function safeWithdrawal() public afterDeadline {\r\n         if (payoutAddr == msg.sender) {\r\n            if (payoutAddr.send(amountRaised)) {\r\n                FundTransfer(payoutAddr, amountRaised, false);\r\n            } \r\n        }\r\n    }\r\n}",
	"ContractName": "Crowdsale",
	"CompilerVersion": "v0.4.18+commit.9cf6e910"
}