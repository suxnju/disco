{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.24;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n// ERC20 \r\ncontract ERC20 {\r\n    \r\n\tfunction transfer(address to, uint value) public returns (bool success);\r\n\tfunction transferFrom(address from, address to, uint value) public returns (bool success);\r\n\t \r\n   \r\n\tevent Transfer(address indexed from, address indexed to, uint value);\r\n \r\n}\r\n \r\n\r\n\r\n// contract owned\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n//CIPToken\r\ncontract CIPToken is ERC20, Owned {\r\n \r\n    using SafeMath for uint256;\r\n    //metadata\r\n    string  public name=\"CIP Token\";\r\n    string  public symbol=\"CIP\";\r\n    uint256 public decimals = 18;\r\n    string  public version = \"1.0\"; \r\n    uint public totalSupply = 4500000000  * 10 ** uint(decimals);\r\n    \r\n\r\n \r\n\tmapping(address => uint) public balanceOf;\r\n    mapping(address => uint256) public lockValues;\r\n\tmapping(address => mapping(address => uint)) public allowance;\r\n\t\r\n\t//event     \r\n\tevent FreezeIn(address[] indexed from, bool value);\r\n\tevent FreezeOut(address[] indexed from, bool value);\r\n  \r\n \r\n    //constructor\r\n     constructor ()  public {\r\n       \r\n        balanceOf[msg.sender] = totalSupply; \r\n    }\r\n    \r\n    function internalTransfer(address from, address toaddr, uint value) internal {\r\n\t\trequire(toaddr!=0);\r\n\t\trequire(balanceOf[from]>=value); \r\n\t\t\r\n\t\t\r\n\r\n\t\tbalanceOf[from]= balanceOf[from].sub(value);// safeSubtract(balanceOf[from], value);\r\n\t\tbalanceOf[toaddr]= balanceOf[toaddr].add(value);//safeAdd(balanceOf[toaddr], value);\r\n\r\n\t\temit Transfer(from, toaddr, value);\r\n\t}\r\n\t\r\n\r\n//\r\nfunction transfer(address _to, uint256 _value) public  returns (bool) {\r\n      \r\n  \r\n    require(_to != address(0));\r\n    require(_value <= balanceOf[msg.sender]);\r\n    uint256 transBlalance = balanceOf[msg.sender].sub(lockValues[msg.sender]);\r\n    require(_value <= transBlalance);\r\n    \r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\r\n    balanceOf[_to] = balanceOf[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\t\r\n\t//transfer from\r\n\tfunction transferFrom(address from, address toaddr, uint value) public returns (bool) {\r\n\t\trequire(allowance[from][msg.sender]>=value);\r\n\r\n\t\tallowance[from][msg.sender]=allowance[from][msg.sender].sub(value);//  safeSubtract(allowance[from][msg.sender], value);\r\n\r\n\t\tinternalTransfer(from, toaddr, value);\r\n\r\n\t\treturn true;\r\n\t}\r\n\t\r\n    // reset name and symbol\r\n    function setNameSymbol(string newName, string newSymbol) public onlyOwner {\r\n\t\tname=newName;\r\n\t\tsymbol=newSymbol;\r\n\t}\r\n\r\n   \r\n     \r\n    function addLockValue(address addr,uint256 _value) public onlyOwner{\r\n        \r\n       require(addr != address(0));\r\n        \r\n      lockValues[addr] = lockValues[addr].add(_value);\r\n        \r\n    }\r\n    \r\n    function subLockValue(address addr,uint256 _value) public onlyOwner{\r\n       \r\n       require(addr != address(0));\r\n       require(_value <= lockValues[addr]);\r\n       lockValues[addr] = lockValues[addr].sub(_value);\r\n        \r\n    }\r\n    \r\n   \r\n    // buy token\r\n    function () public payable {\r\n      \r\n    }\r\n}",
	"ContractName": "CIPToken",
	"CompilerVersion": "v0.4.25+commit.59dbf8f1"
}