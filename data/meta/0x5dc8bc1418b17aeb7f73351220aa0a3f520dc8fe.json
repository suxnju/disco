{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.24;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    \r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\ncontract CRTLotto is Owned {\r\n    uint public ticketPrice;\r\n    uint public totalTickets;\r\n\r\n    mapping(uint => address) public tickets;\r\n\r\n    constructor() public {\r\n        ticketPrice = 0.01 * 10 ** 18;\r\n        totalTickets = 0;\r\n    }\r\n    \r\n    function setTicketPrice(uint _ticketPrice) external onlyOwner {\r\n        ticketPrice = _ticketPrice;\r\n    }\r\n    \r\n    function() payable external {\r\n        uint ethSent = msg.value;\r\n        require(ethSent >= ticketPrice);\r\n        \r\n        tickets[totalTickets] = msg.sender;\r\n        totalTickets += 1;\r\n    }\r\n    \r\n    function resetLotto() external onlyOwner {\r\n        totalTickets = 0;\r\n    }\r\n    \r\n    function withdrawEth() external onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n}",
	"ContractName": "CRTLotto",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}