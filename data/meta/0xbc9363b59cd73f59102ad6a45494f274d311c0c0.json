{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.24;\r\n\r\ncontract Control {\r\n    address public owner;\r\n    bool public pause;\r\n\r\n    event PAUSED();\r\n    event STARTED();\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused {\r\n        require(pause);\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused {\r\n        require(!pause);\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _owner) onlyOwner public {\r\n        owner = _owner;\r\n    }\r\n\r\n    function setState(bool _pause) onlyOwner public {\r\n        pause = _pause;\r\n        if (pause) {\r\n            emit PAUSED();\r\n        } else {\r\n            emit STARTED();\r\n        }\r\n    }\r\n\r\n}\r\n/**\r\n * this contract stands for the holds of WestIndia group\r\n * all income will be split to holders according to their holds\r\n * user can buy holds from shareholders at his will\r\n */\r\ncontract Share is Control {    /**\r\n     * the holds of every holder\r\n     * the total holds stick to total\r\n     */\r\n    mapping (address => uint) public holds;\r\n\r\n    /**\r\n     * since we don't record holders' address in a list\r\n     * and we don't want to loop holders list everytime when there is income\r\n     *\r\n     * we use a mechanism called 'watermark'\r\n     * \r\n     * the watermark indicates the value that brought into each holds from the begining\r\n     * it only goes up when new income send to the contract\r\n\r\n     * fullfilled indicate the amount that the holder has withdrawaled from his share\r\n     * it goes up when user withdrawal bonus\r\n     * and it goes up when user sell holds, goes down when user buy holds, since the total bonus of him stays the same.\r\n     */\r\n    mapping (address => uint256) public fullfilled;\r\n\r\n    /**\r\n     * any one can setup a price to sell his holds\r\n     * if set to 0, means not on sell\r\n     */\r\n    mapping (address => uint256) public sellPrice;\r\n    mapping (address => uint256) public toSell;\r\n    mapping (address => mapping(address => uint256)) public allowance;\r\n    uint256 public watermark;\r\n    uint256 public total;\r\n    uint256 public decimals;\r\n    \r\n    string public symbol;\r\n    string public name;\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n    event INCOME(uint256);\r\n    event PRICE_SET(address holder, uint shares, uint256 price, uint sell);\r\n    event WITHDRAWAL(address owner, uint256 amount);\r\n    event SELL_HOLDS(address from, address to, uint amount, uint256 price);\r\n    event SEND_HOLDS(address from, address to, uint amount);\r\n\r\n    /**\r\n     * at start the owner has 100% share, which is 10,000 holds\r\n     */\r\n    constructor(string _symbol, string _name, uint256 _total) public {        \r\n        symbol = _symbol;\r\n        name = _name;\r\n        owner = msg.sender;\r\n        total = _total;\r\n        holds[owner] = total;\r\n        decimals = 0;\r\n        pause = false;\r\n    }\r\n\r\n    /**\r\n     * when there's income, the water mark goes up\r\n     */\r\n    function onIncome() public payable {\r\n        if (msg.value > 0) {\r\n            watermark += (msg.value / total);\r\n            assert(watermark * total > watermark);\r\n            emit INCOME(msg.value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * automatically split income\r\n     */\r\n    function() public payable {\r\n        onIncome();\r\n    }\r\n\r\n    function bonus() public view returns (uint256) {\r\n        return (watermark - fullfilled[msg.sender]) * holds[msg.sender];\r\n    }\r\n    \r\n    function setPrice(uint256 price, uint256 sell) public {\r\n        sellPrice[msg.sender] = price;\r\n        toSell[msg.sender] = sell;\r\n        emit PRICE_SET(msg.sender, holds[msg.sender], price, sell);\r\n    }\r\n\r\n    /**\r\n     * withdrawal the bonus\r\n     */\r\n    function withdrawal() public whenNotPaused {\r\n        if (holds[msg.sender] == 0) {\r\n            //you don't have any, don't bother\r\n            return;\r\n        }\r\n        uint256 value = bonus();\r\n        fullfilled[msg.sender] = watermark;\r\n\r\n        msg.sender.transfer(value);\r\n\r\n        emit WITHDRAWAL(msg.sender, value);\r\n    }\r\n\r\n    /**\r\n     * transfer holds from => to (only holds, no bouns)\r\n     * this will withdrawal the holder bonus of these holds\r\n     * and the to's fullfilled will go up, since total bonus unchanged, but holds goes more\r\n     */\r\n    function transferHolds(address from, address to, uint256 amount) internal {\r\n        require(holds[from] >= amount);\r\n        require(holds[to] + amount > holds[to]);\r\n\r\n        uint256 fromBonus = (watermark - fullfilled[from]) * amount;\r\n        uint256 toBonus = (watermark - fullfilled[to]) * holds[to];\r\n        \r\n\r\n        holds[from] -= amount;\r\n        holds[to] += amount;\r\n        fullfilled[to] = watermark - toBonus / holds[to];\r\n\r\n        from.transfer(fromBonus);\r\n\r\n        emit Transfer(from, to, amount);\r\n        emit WITHDRAWAL(from, fromBonus);\r\n    }\r\n\r\n    /**\r\n     * one can buy holds from anyone who set up an price,\r\n     * and u can buy @ price higher than he setup\r\n     */\r\n    function buyFrom(address from) public payable whenNotPaused {\r\n        require(sellPrice[from] > 0);\r\n        uint256 amount = msg.value / sellPrice[from];\r\n\r\n        if (amount >= holds[from]) {\r\n            amount = holds[from];\r\n        }\r\n\r\n        if (amount >= toSell[from]) {\r\n            amount = toSell[from];\r\n        }\r\n\r\n        require(amount > 0);\r\n\r\n        toSell[from] -= amount;\r\n        transferHolds(from, msg.sender, amount);\r\n        \r\n        from.transfer(msg.value);\r\n        emit SELL_HOLDS(from, msg.sender, amount, sellPrice[from]);\r\n    }\r\n    \r\n    function balanceOf(address _addr) public view returns (uint256) {\r\n        return holds[_addr];\r\n    }\r\n    \r\n    function transfer(address to, uint amount) public whenNotPaused returns(bool) {\r\n        transferHolds(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) public whenNotPaused returns (bool) {\r\n        require(allowance[from][msg.sender] >= amount);\r\n        \r\n        allowance[from][msg.sender] -= amount;\r\n        transferHolds(from, to, amount);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function approve(address to, uint256 amount) public returns (bool) {\r\n        allowance[msg.sender][to] = amount;\r\n        \r\n        emit Approval(msg.sender, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return total;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return allowance[owner][spender];\r\n    }\r\n}",
	"ContractName": "Share",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}