{
	"Language": "Solidity",
	"Source": "contract EtherealFoundationOwned {\r\n\taddress private Owner;\r\n    \r\n\tfunction IsOwner(address addr) view public returns(bool)\r\n\t{\r\n\t    return Owner == addr;\r\n\t}\r\n\t\r\n\tfunction TransferOwner(address newOwner) public onlyOwner\r\n\t{\r\n\t    Owner = newOwner;\r\n\t}\r\n\t\r\n\tfunction EtherealFoundationOwned() public\r\n\t{\r\n\t    Owner = msg.sender;\r\n\t}\r\n\t\r\n\tfunction Terminate() public onlyOwner\r\n\t{\r\n\t    selfdestruct(Owner);\r\n\t}\r\n\t\r\n\tmodifier onlyOwner(){\r\n        require(msg.sender == Owner);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract Bassdrops is EtherealFoundationOwned {\r\n    string public constant CONTRACT_NAME = \"Bassdrops\";\r\n    string public constant CONTRACT_VERSION = \"A\";\r\n\tstring public constant QUOTE = \"It\u2019s a permanent, perfect SIMULTANEOUS dichotomy of total insignificance and total significance merged as one into every single flashing second.\";\r\n    \r\n    string public constant name = \"Bassdrops, a Currency of Omnitempo Maximalism\";\r\n    string public constant symbol = \"BASS\";\r\n\t\r\n    uint256 public constant decimals = 11;  \r\n\t\r\n    bool private tradeable;\r\n    uint256 private currentSupply;\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping(address=> uint256)) private allowed;\r\n    mapping(address => bool) private lockedAccounts;  \r\n\t\r\n\r\n\t/*\r\n\t\tIncomming Ether and ERC20\r\n\t*/\t\r\n    event RecievedEth(address indexed _from, uint256 _value, uint256 timeStamp);\r\n\t//this is the fallback\r\n\tfunction () payable public {\r\n\t\tRecievedEth(msg.sender, msg.value, now);\t\t\r\n\t}\r\n\t\r\n\tevent TransferedEth(address indexed _to, uint256 _value);\r\n\tfunction FoundationTransfer(address _to, uint256 amtEth, uint256 amtToken) public onlyOwner\r\n\t{\r\n\t\trequire(this.balance >= amtEth && balances[this] >= amtToken );\r\n\t\t\r\n\t\tif(amtEth >0)\r\n\t\t{\r\n\t\t\t_to.transfer(amtEth);\r\n\t\t\tTransferedEth(_to, amtEth);\r\n\t\t}\r\n\t\t\r\n\t\tif(amtToken > 0)\r\n\t\t{\r\n\t\t\trequire(balances[_to] + amtToken > balances[_to]);\r\n\t\t\tbalances[this] -= amtToken;\r\n\t\t\tbalances[_to] += amtToken;\r\n\t\t\tTransfer(this, _to, amtToken);\r\n\t\t}\r\n\t}\t\t\r\n\t\r\n\tevent TransferedERC20(address indexed _to, address indexed tokenContract, uint256 amtToken);\r\n\tfunction TransferERC20Token(address _to, address tokenContract, uint256 amtToken) internal onlyOwner{\r\n\t\t\tERC20Basic token = ERC20Basic(tokenContract);\r\n\t\t\trequire(token.transfer( _to, amtToken));\r\n\t\t\tTransferedERC20(_to, tokenContract, amtToken);\r\n\t}\r\n\t\r\n\t\r\n\t/*\r\n\t\tEnd Incomming Ether\r\n\t*/\r\n\t\r\n\t\r\n\t\r\n    function Bassdrops(\r\n\t\tuint256 initialTotalSupply,\r\n\t\tuint256 initialTokensPerEth\r\n\t\t) public\r\n    {\r\n        currentSupply = initialTotalSupply * (10**decimals);\r\n        balances[this] =  initialTotalSupply * (10**decimals);\r\n        _tokenPerEth = initialTokensPerEth;\r\n        tradeable = true;\r\n        \r\n    }\r\n    \r\n    uint256 private _tokenPerEth;\r\n    function TokensPerWei() view public returns(uint256){\r\n        return _tokenPerEth;\r\n    }\r\n    function SetTokensPerWei(uint256 tpe) public onlyOwner{\r\n        _tokenPerEth = tpe;\r\n    }\r\n\t\r\n    event SoldToken(address indexed _buyer, uint256 _value, bytes32 note);\r\n    function BuyToken(bytes32 note) public payable\r\n    {\r\n\t\trequire(msg.value > 0);\r\n\t\t\r\n\t\t//calculate value\r\n\t\tuint256 tokensToBuy = ((_tokenPerEth * (10**decimals)) * msg.value) / (10**18);\r\n\t\t\r\n\t\trequire(balances[this] + tokensToBuy > balances[this]);\r\n\t\tSoldToken(msg.sender, tokensToBuy, note);\r\n\t\tTransfer(this,msg.sender,tokensToBuy);\r\n\t\tcurrentSupply += tokensToBuy;\r\n\t\tbalances[msg.sender] += tokensToBuy;\r\n        \r\n    }\r\n    \r\n    function LockAccount(address toLock) public onlyOwner\r\n    {\r\n        lockedAccounts[toLock] = true;\r\n    }\r\n    function UnlockAccount(address toUnlock) public onlyOwner\r\n    {\r\n        delete lockedAccounts[toUnlock];\r\n    }\r\n    \r\n    function SetTradeable(bool t) public onlyOwner\r\n    {\r\n        tradeable = t;\r\n    }\r\n    function IsTradeable() public view returns(bool)\r\n    {\r\n        return tradeable;\r\n    }\r\n    \r\n    \r\n    function totalSupply() constant public returns (uint256)\r\n    {\r\n        return currentSupply;\r\n    }\r\n    function balanceOf(address _owner) constant public returns (uint256 balance)\r\n    {\r\n        return balances[_owner];\r\n    }\r\n    function transfer(address _to, uint256 _value) public notLocked returns (bool success) {\r\n        require(tradeable);\r\n         if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\r\n             Transfer( msg.sender, _to,  _value);\r\n             balances[msg.sender] -= _value;\r\n             balances[_to] += _value;\r\n             return true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n    function transferFrom(address _from, address _to, uint _value)public notLocked returns (bool success) {\r\n        require(!lockedAccounts[_from] && !lockedAccounts[_to]);\r\n\t\trequire(tradeable);\r\n        if (balances[_from] >= _value\r\n            && allowed[_from][msg.sender] >= _value\r\n            && _value > 0\r\n            && balances[_to] + _value > balances[_to]) {\r\n                \r\n            Transfer( _from, _to,  _value);\r\n                \r\n            balances[_from] -= _value;\r\n            allowed[_from][msg.sender] -= _value;\r\n            balances[_to] += _value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    function approve(address _spender, uint _value) public returns (bool success) {\r\n        Approval(msg.sender,  _spender, _value);\r\n        allowed[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    function allowance(address _owner, address _spender) constant public returns (uint remaining){\r\n        return allowed[_owner][_spender];\r\n    }\r\n    event Transfer(address indexed _from, address indexed _to, uint _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n   \r\n   modifier notLocked(){\r\n       require (!lockedAccounts[msg.sender]);\r\n       _;\r\n   }\r\n}",
	"ContractName": "Bassdrops",
	"CompilerVersion": "v0.4.19+commit.c4cbbb05"
}