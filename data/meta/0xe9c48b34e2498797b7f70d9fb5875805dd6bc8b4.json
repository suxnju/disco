{
	"Language": "Solidity",
	"Source": "contract SafeMath {\r\n\r\n  function safeMul(uint a, uint b) returns (uint) {\r\n    if (a == 0) {\r\n      return 0;\r\n    } else {\r\n      uint c = a * b;\r\n      require(c / a == b);\r\n      return c;\r\n    }\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) returns (uint) {\r\n    require(b > 0);\r\n    uint c = a / b;\r\n    require(a == b * c + a % b);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\ncontract token {\r\n    function balanceOf( address who ) constant returns (uint value);\r\n    function transfer( address to, uint value) returns (bool ok);\r\n}\r\n\r\n\r\ncontract Exchange is SafeMath {\r\n\r\n    uint public priceInWei;\r\n    address public creator;\r\n    token public tokenExchanged;\r\n    bool public exchangeState = false;\r\n    uint public multiplier = 1000000000000000000; //Token decimals\r\n\r\n    event TokenTransfer(address _sender, uint _tokenAmount);\r\n    event TokenExchangeFailed(address _sender, uint _tokenAmount);\r\n    event EthFundTransfer(uint _ethAmount);\r\n    event TokenFundTransfer(uint _tokenAmount);\r\n\r\n\r\n    function Exchange(\r\n        uint tokenPriceInWei,\r\n        address addressOfTokenExchanged\r\n    ) {\r\n        creator = msg.sender;\r\n        priceInWei = tokenPriceInWei;\r\n        tokenExchanged = token(addressOfTokenExchanged);\r\n    }\r\n\r\n\r\n    modifier isCreator() {\r\n        require(msg.sender == creator);\r\n        _;\r\n    }\r\n\r\n\r\n    function setTokenPriceInWei(uint _price) isCreator() returns (bool result){\r\n      require(!exchangeState);\r\n      priceInWei = _price;\r\n      return true;\r\n    }\r\n\r\n\r\n    function stopExchange() isCreator() returns (bool result){\r\n      exchangeState = false;\r\n      return true;\r\n    }\r\n\r\n\r\n    function startExchange() isCreator() returns (bool result){\r\n      exchangeState = true;\r\n      return true;\r\n    }\r\n\r\n\r\n    function () payable {\r\n        require(exchangeState);\r\n        uint _etherAmountInWei = msg.value;\r\n        uint _tokenAmount = safeDiv(safeMul(_etherAmountInWei, multiplier), priceInWei);\r\n        if ( _tokenAmount <= tokenExchanged.balanceOf(this) ){\r\n          tokenExchanged.transfer(msg.sender, _tokenAmount);\r\n          TokenTransfer(msg.sender, _tokenAmount);\r\n        } else {\r\n          TokenExchangeFailed(msg.sender, _tokenAmount);\r\n          throw;\r\n        }\r\n    }\r\n\r\n\r\n    function drainEther() isCreator() returns (bool success){\r\n      require(!exchangeState);\r\n      if ( creator.send(this.balance) ) {\r\n        EthFundTransfer(this.balance);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n\r\n    function drainTokens() isCreator() returns (bool success){\r\n      require(!exchangeState);\r\n      if ( tokenExchanged.transfer(creator, tokenExchanged.balanceOf(this) ) ) {\r\n        TokenFundTransfer(this.balance);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n\r\n    function removeContract() public isCreator() {\r\n        require(!exchangeState);\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n}",
	"ContractName": "Exchange",
	"CompilerVersion": "v0.4.19+commit.c4cbbb05"
}