{
	"Language": "Solidity",
	"Source": "pragma solidity 0.5.10;\r\n\r\ncontract Receiver {\r\n    //The purpose of this contract is to act purely as a static address\r\n    //in the Ethereum uint256 address space from which to initiate other\r\n    //actions\r\n\r\n    //State\r\n    address public implementation;\r\n    bool public isPayable;\r\n\r\n    //Events\r\n    event LogImplementationChanged(address _oldImplementation, address _newImplementation);\r\n    event LogPaymentReceived(address sender, uint256 value);\r\n\r\n    constructor(address _implementation, bool _isPayable)\r\n        public\r\n    {\r\n        require(_implementation != address(0), \"Implementation address cannot be 0\");\r\n        implementation = _implementation;\r\n        isPayable = _isPayable;\r\n    }\r\n\r\n    modifier onlyImplementation\r\n    {\r\n        require(msg.sender == implementation, \"Only the contract implementation may perform this action\");\r\n        _;\r\n    }\r\n    \r\n    function drain()\r\n        external\r\n        onlyImplementation\r\n    {\r\n        msg.sender.call.value(address(this).balance)(\"\");\r\n    }\r\n\r\n    function ()\r\n        external\r\n        payable \r\n    {}\r\n}",
	"ContractName": "Receiver",
	"CompilerVersion": "v0.5.10+commit.5a6ea5b1"
}