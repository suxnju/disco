{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.15;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a * b;\r\n        if (a != 0 && c / a != b) revert();\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        if (b > a) revert();\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n        uint256 c = a + b;\r\n        if (c < a) revert();\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    function Ownable() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title RefundVault.\r\n * @dev This contract is used for storing funds while a crowdsale\r\n * is in progress. Supports refunding the money if crowdsale fails,\r\n * and forwarding it if crowdsale is successful.\r\n */\r\ncontract IRBPreRefundVault is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    enum State {Active, Refunding, Closed}\r\n    State public state;\r\n\r\n    mapping (address => uint256) public deposited;\r\n\r\n    uint256 public totalDeposited;\r\n\r\n    address public constant wallet = 0x26dB9eF39Bbfe437f5b384c3913E807e5633E7cE;\r\n\r\n    address preCrowdsaleContractAddress;\r\n\r\n    event Closed();\r\n\r\n    event RefundsEnabled();\r\n\r\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\r\n\r\n    event Withdrawal(address indexed receiver, uint256 weiAmount);\r\n\r\n    function IRBPreRefundVault() {\r\n        state = State.Active;\r\n    }\r\n\r\n    modifier onlyCrowdsaleContract() {\r\n        require(msg.sender == preCrowdsaleContractAddress);\r\n        _;\r\n    }\r\n\r\n    function setPreCrowdsaleAddress(address _preCrowdsaleAddress) external onlyOwner {\r\n        require(_preCrowdsaleAddress != address(0));\r\n        preCrowdsaleContractAddress = _preCrowdsaleAddress;\r\n    }\r\n\r\n    function deposit(address investor) onlyCrowdsaleContract external payable {\r\n        require(state == State.Active);\r\n        uint256 amount = msg.value;\r\n        deposited[investor] = deposited[investor].add(amount);\r\n        totalDeposited = totalDeposited.add(amount);\r\n    }\r\n\r\n    function close() onlyCrowdsaleContract external {\r\n        require(state == State.Active);\r\n        state = State.Closed;\r\n        totalDeposited = 0;\r\n        Closed();\r\n        wallet.transfer(this.balance);\r\n    }\r\n\r\n    function enableRefunds() onlyCrowdsaleContract external {\r\n        require(state == State.Active);\r\n        state = State.Refunding;\r\n        RefundsEnabled();\r\n    }\r\n\r\n    function refund(address investor) public {\r\n        require(state == State.Refunding);\r\n        uint256 depositedValue = deposited[investor];\r\n        deposited[investor] = 0;\r\n        investor.transfer(depositedValue);\r\n        Refunded(investor, depositedValue);\r\n    }\r\n\r\n    /**\r\n     * @dev withdraw method that can be used by crowdsale contract's owner\r\n     *      for the withdrawal funds to the owner\r\n     */\r\n    function withdraw(uint value) onlyCrowdsaleContract external returns (bool success) {\r\n        require(state == State.Active);\r\n        require(totalDeposited >= value);\r\n        totalDeposited = totalDeposited.sub(value);\r\n        wallet.transfer(value);\r\n        Withdrawal(wallet, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev killer method that can be used by owner to\r\n     *      kill the contract and send funds to owner\r\n     */\r\n    function kill() onlyOwner {\r\n        require(state == State.Closed);\r\n        selfdestruct(owner);\r\n    }\r\n}",
	"ContractName": "IRBPreRefundVault",
	"CompilerVersion": "v0.4.18+commit.9cf6e910"
}