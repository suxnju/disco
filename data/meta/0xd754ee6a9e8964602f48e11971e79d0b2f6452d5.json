{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.21;\r\n\r\ncontract Etherwow{\r\n    function userRollDice(uint, address) payable {uint;address;}\r\n}\r\n\r\n/**\r\n * @title FixBet31\r\n * @dev fix bet num = 31, bet size = 1 eth. \r\n */\r\ncontract FixBet31{\r\n    \r\n    modifier onlyOwner{\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    address public owner;\r\n    Etherwow public etherwow;\r\n    bool public bet;\r\n\r\n    /*\r\n     * @dev contract initialize\r\n     * @param new etherwow address\r\n     */        \r\n    function FixBet31(){\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /*\r\n     * @dev owner set etherwow contract address\r\n     * @param new etherwow address\r\n     */    \r\n    function ownerSetEtherwowAddress(address newEtherwowAddress) public\r\n        onlyOwner\r\n    {\r\n       etherwow = Etherwow(newEtherwowAddress);\r\n    }\r\n\r\n    /*\r\n     * @dev owner set fallback function mode\r\n     * @param new fallback function mode. true - bet, false - add funds to contract\r\n     */    \r\n    function ownerSetMod(bool newMod) public\r\n        onlyOwner\r\n    {\r\n        bet = newMod;\r\n    }\r\n\r\n    /*\r\n     * @dev add funds or bet. if bet == false, add funds to this contract for cover the txn gas fee\r\n     */     \r\n    function () payable{\r\n        if (bet == true){\r\n            require(msg.value == 1000000000000000000);\r\n            etherwow.userRollDice.value(msg.value)(31, msg.sender);  \r\n        }\r\n        else return;\r\n    }\r\n}",
	"ContractName": "FixBet31",
	"CompilerVersion": "v0.4.21+commit.dfe3193c"
}