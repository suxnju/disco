{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.0;\r\n\r\ncontract Hellevator {\r\n\r\n    event GiveUpTheDough(address indexed beneficiary);\r\n    event JoinTheFray(address indexed rube);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    uint public buyin = 0.01 ether;\r\n    uint public newRubesUntilPayout = 3;\r\n    uint public payout = 0.02 ether;\r\n    uint public queueFront;\r\n    uint public queueSize;\r\n\r\n    address owner;\r\n    mapping (address => uint) pendingWithdrawals;\r\n    mapping (uint => address) rubes;\r\n\r\n    function Hellevator() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function() public payable {\r\n        joinTheFray();\r\n    }\r\n\r\n    function withdraw() public {\r\n        uint amount = pendingWithdrawals[msg.sender];\r\n        pendingWithdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    // Internal\r\n\r\n    function addRube() internal {\r\n        rubes[queueSize] = msg.sender;\r\n        queueSize += 1;\r\n    }\r\n\r\n    function giveUpTheDough() internal {\r\n        address undeservingBeneficiary = rubes[queueFront];\r\n        pendingWithdrawals[undeservingBeneficiary] += payout;\r\n        queueFront += 1;\r\n        GiveUpTheDough(undeservingBeneficiary);\r\n    }\r\n\r\n    function isPayoutTime() internal view returns (bool) {\r\n        return queueSize % newRubesUntilPayout == 0;\r\n    }\r\n\r\n    function joinTheFray() internal {\r\n        bool isCheapskate = msg.value < buyin;\r\n\r\n        if (isCheapskate) {\r\n            return;\r\n        }\r\n\r\n        addRube();\r\n        JoinTheFray(msg.sender);\r\n\r\n        if (isPayoutTime()) {\r\n            giveUpTheDough();\r\n        }\r\n    }\r\n\r\n    // Administration\r\n\r\n    function changeBuyin(uint _buyin) public onlyOwner {\r\n        buyin = _buyin;\r\n    }\r\n\r\n    function changeNewRubesUntilPayout(uint _newRubesUntilPayout) public onlyOwner {\r\n        newRubesUntilPayout = _newRubesUntilPayout;\r\n    }\r\n\r\n    function changeOwner(address _owner) public onlyOwner {\r\n        owner = _owner;\r\n    }\r\n\r\n    function changePayout(uint _payout) public onlyOwner {\r\n        payout = _payout;\r\n    }\r\n\r\n    function payTheMan(uint amount) public onlyOwner {\r\n        owner.transfer(amount);\r\n    }\r\n}",
	"ContractName": "Hellevator",
	"CompilerVersion": "v0.4.19+commit.c4cbbb05"
}