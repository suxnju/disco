{
	"Language": "Solidity",
	"Source": "// DeadMansSwitch contract, by Gavin Wood.\r\n// Copyright Parity Technologies Ltd (UK), 2016.\r\n// This code may be distributed under the terms of the Apache Licence, version 2\r\n// or the MIT Licence, at your choice.\r\n\r\npragma solidity ^0.4;\r\n\r\n/// This is intended to be used as a basic wallet. It provides the Received event\r\n/// in order to track incoming transactions. It also has one piece of additional\r\n/// functionality: to nominate a backup owner which can, after a timeout period,\r\n/// claim ownership over the account.\r\ncontract DeadMansSwitch {\r\n\tevent ReclaimBegun();\r\n\tevent Reclaimed();\r\n\tevent Sent(address indexed to, uint value, bytes data);\r\n\tevent Received(address indexed from, uint value, bytes data);\r\n\tevent Reset();\r\n\tevent OwnerChanged(address indexed _old, address indexed _new);\r\n\tevent BackupChanged(address indexed _old, address indexed _new);\r\n\tevent ReclaimPeriodChanged(uint _old, uint _new);\r\n\r\n\tfunction DeadMansSwitch(address _owner, address _backup, uint _reclaimPeriod) {\r\n\t\towner = _owner;\r\n\t\tbackup = _backup;\r\n\t\treclaimPeriod = _reclaimPeriod;\r\n\t}\r\n\r\n\tfunction() payable { Received(msg.sender, msg.value, msg.data); }\r\n\r\n\t// Backup functions\r\n\r\n\tfunction beginReclaim() only_backup when_no_timeout {\r\n\t\ttimeout = now + reclaimPeriod;\r\n\t\tReclaimBegun();\r\n\t}\r\n\r\n\tfunction finalizeReclaim() only_backup when_timed_out {\r\n\t\towner = backup;\r\n\t\ttimeout = 0;\r\n\t\tReclaimed();\r\n\t}\r\n\r\n\tfunction reset() only_owner_or_backup {\r\n\t\ttimeout = 0;\r\n\t\tReset();\r\n\t}\r\n\r\n\t// Owner functions\r\n\r\n\tfunction send(address _to, uint _value, bytes _data) only_owner {\r\n\t\tif (!_to.call.value(_value)(_data)) throw;\r\n\t\tSent(_to, _value, _data);\r\n\t}\r\n\r\n\tfunction setOwner(address _owner) only_owner {\r\n\t\tOwnerChanged(owner, _owner);\r\n\t\towner = _owner;\r\n\t}\r\n\r\n\tfunction setBackup(address _backup) only_owner {\r\n\t\tBackupChanged(backup, _backup);\r\n\t\tbackup = _backup;\r\n\t}\r\n\r\n\tfunction setReclaimPeriod(uint _period) only_owner {\r\n\t\tReclaimPeriodChanged(reclaimPeriod, _period);\r\n\t\treclaimPeriod = _period;\r\n\t}\r\n\r\n\t// Inspectors\r\n\r\n\tfunction reclaimStarted() constant returns (bool) {\r\n\t\treturn timeout != 0;\r\n\t}\r\n\r\n\tfunction canFinalize() constant returns (bool) {\r\n\t\treturn timeout != 0 && now > timeout;\r\n\t}\r\n\r\n\tfunction timeLeft() constant only_when_timeout returns (uint) {\r\n\t\treturn now > timeout ? 0 : timeout - now;\r\n\t}\r\n\r\n\tmodifier only_owner { if (msg.sender != owner) throw; _; }\r\n\tmodifier only_backup { if (msg.sender != backup) throw; _; }\r\n\tmodifier only_owner_or_backup { if (msg.sender != backup && msg.sender != owner) throw; _; }\r\n\tmodifier only_when_timeout { if (timeout == 0) throw; _; }\r\n\tmodifier when_no_timeout { if (timeout == 0) _; }\r\n\tmodifier when_timed_out { if (timeout != 0 && now > timeout) _; }\r\n\r\n\taddress public owner;\r\n\taddress public backup;\r\n\tuint public reclaimPeriod;\r\n\tuint public timeout;\r\n}",
	"ContractName": "DeadMansSwitch",
	"CompilerVersion": "v0.4.15+commit.bbb8e64f"
}