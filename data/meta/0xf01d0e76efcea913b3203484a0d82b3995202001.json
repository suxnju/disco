{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.18;\r\n// Version 2\r\n\r\ncontract GiftCard2017{\r\n    address owner;\r\n    mapping (address => uint256) public authorizations;\r\n    \r\n    /// Constructor sets owner.\r\n    function GiftCard2017() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    /// Redeems authorized ETH.\r\n    function () public payable {                               // Accept ether only because some clients require it.\r\n        uint256 _redemption = authorizations[msg.sender];      // Amount mEth available to redeem.\r\n        require (_redemption > 0);\r\n        authorizations[msg.sender] = 0;                        // Clear authorization.\r\n        msg.sender.transfer(_redemption * 1e15 + msg.value);   // convert mEth to wei for transfer()\r\n    }\r\n    \r\n    /// Contract owner deposits ETH.\r\n    function deposit() public payable OwnerOnly {\r\n    }\r\n    \r\n    /// Contract owner withdraws ETH.\r\n    function withdraw(uint256 _amount) public OwnerOnly {\r\n        owner.transfer(_amount);\r\n    }\r\n\r\n    /// Contract owner authorizes redemptions in units of 1/1000 ETH.    \r\n    function authorize(address _addr, uint256 _amount_mEth) public OwnerOnly {\r\n        require (this.balance >= _amount_mEth);\r\n        authorizations[_addr] = _amount_mEth;\r\n    }\r\n    \r\n    /// Check that message came from the contract owner.\r\n    modifier OwnerOnly () {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n}",
	"ContractName": "GiftCard2017",
	"CompilerVersion": "v0.4.18+commit.9cf6e910"
}