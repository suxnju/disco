{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.20;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require (msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n        owner = newOwner;\r\n      }\r\n    }\r\n\r\n}\r\n\r\ncontract token {\r\n    string public standard = '';\r\n    string public name; \r\n    string public symbol; \r\n    uint8 public decimals = 18;  \r\n    uint256 public totalSupply; \r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);  //\u8f6c\u5e10\u901a\u77e5\u4e8b\u4ef6\r\n    event Burn(address indexed from, uint256 value);  //\u51cf\u53bb\u7528\u6237\u4f59\u989d\u4e8b\u4ef6\r\n\r\n    function token(uint256 initialSupply, string tokenName, string tokenSymbol) public {\r\n\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);    //\u4ee5\u592a\u5e01\u662f10^18\uff0c\u540e\u976218\u4e2a0\uff0c\u6240\u4ee5\u9ed8\u8ba4decimals\u662f18\r\n\r\n        balanceOf[this] = totalSupply;\r\n\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n\r\n      require(_to != 0x0);\r\n\r\n      require(balanceOf[_from] >= _value);\r\n\r\n      require(balanceOf[_to] + _value > balanceOf[_to]);\r\n\r\n      uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n      balanceOf[_from] -= _value;\r\n\r\n      balanceOf[_to] += _value;\r\n\r\n      Transfer(_from, _to, _value);\r\n\r\n      assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value)  public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);   // Check allowance\r\n        \r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        _transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n\r\n        balanceOf[msg.sender] -= _value;\r\n\r\n        totalSupply -= _value;\r\n\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n\r\n        require(balanceOf[_from] >= _value);\r\n\r\n        require(_value <= allowance[_from][msg.sender]);\r\n\r\n        balanceOf[_from] -= _value;\r\n        allowance[_from][msg.sender] -= _value;\r\n\r\n        totalSupply -= _value;\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\ncontract MLTKTOKEN is owned, token {\r\n\r\n    uint256 public sellPrice;\r\n\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    function MLTKTOKEN (\r\n      uint256 initialSupply,\r\n      string tokenName,\r\n      string tokenSymbol,\r\n      address centralMinter\r\n    ) payable token (initialSupply, tokenName, tokenSymbol) public {\r\n\r\n        if(centralMinter != 0 ) owner = centralMinter;\r\n\r\n        sellPrice = 2;     \r\n   \r\n    }\r\n\r\n    address fromAddress;\r\n    uint256 value;\r\n    uint256 code;\r\n    uint256 team;\r\n\r\n    function buyeths(uint256 _code, uint256 _team)public payable {\r\n        fromAddress = msg.sender;\r\n        value = msg.value;\r\n        code = _code;\r\n        team = _team;\r\n    }\r\n\r\n    function getInfo()public constant returns (address, uint256, uint256, uint256)\r\n    {\r\n        return (fromAddress, value, code, team);\r\n    }\r\n\r\n\r\n    function withdraw(address _to,uint256 _eth) onlyOwner public\r\n    {\r\n        address send_to_address = _to;\r\n        send_to_address.transfer(_eth);\r\n    }\r\n\r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    function setPrices(uint256 newSellPrice) onlyOwner public {\r\n        sellPrice = newSellPrice;\r\n    }\r\n\r\n\r\n    function sell(uint amount)public returns (uint256 revenue){\r\n    if(frozenAccount[msg.sender]){\r\n        revert();\r\n    }\r\n    require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\r\n    balanceOf[this] += amount;                        // adds the amount to owner's balance\r\n    balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\r\n    revenue = amount * (sellPrice/10000);\r\n    msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\r\n    Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\r\n    return revenue;                                   // ends function and returns\r\n    }\r\n\r\n    function transferTo(address _to,uint amount) onlyOwner public returns(uint256 revenue) {\r\n        require(balanceOf[this] >= amount);\r\n        balanceOf[this] -= amount;\r\n        balanceOf[_to] += amount;\r\n        Transfer(this, msg.sender, amount);\r\n        revenue = balanceOf[this];\r\n        return revenue;\r\n    }\r\n    \r\n    \r\n    function ()public payable{\r\n\r\n    }\r\n}",
	"ContractName": "MLTKTOKEN",
	"CompilerVersion": "v0.4.20+commit.3155dd80"
}