{
	"Language": "Vyper",
	"Source": "contract AaveProvider():\r\n    def getLendingPool() -> address: constant\r\n    def getLendingPoolCore() -> address: constant\r\n    def getFeeProvider() -> address: constant\r\n\r\ncontract AaveFees():\r\n    def getFlashLoanFeesInBips() -> uint256: constant\r\n\r\ncontract AaveLendingPool():\r\n    def flashLoan(_receiver: address, _reserve: address, _amount: uint256, _params: bytes32) -> address: modifying\r\n\r\nGood: event()\r\nEtherReceived: event()\r\nLogInt: event({key: uint256, val: uint256})\r\nLogAddr: event({key: uint256, val: address})\r\n\r\nAAVE_PROVIDER: constant(address) = 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8\r\nAAVE_ETH_RESERVE: constant(address) = 0x3a3A65aAb0dd2A17E3F1947bA16138cd37d08c04\r\n\r\nsaved: address\r\nowner: address\r\n\r\n@public\r\ndef __init__():\r\n  self.owner = msg.sender\r\n\r\n@public\r\n@payable\r\ndef __default__():\r\n  log.EtherReceived()\r\n\r\n@private\r\n@constant\r\ndef returnBalanceWithFee() -> uint256:\r\n  startBalance: uint256 = as_unitless_number(self.balance)\r\n  aaveFeesProvider: address = AaveProvider(AAVE_PROVIDER).getFeeProvider()\r\n  totalFeeBips: uint256 = AaveFees(aaveFeesProvider).getFlashLoanFeesInBips()\r\n  fee: uint256 = startBalance * totalFeeBips / 10000\r\n  returnBalanceWithFee: uint256 = startBalance + fee\r\n\r\n  log.LogInt(6, startBalance)\r\n  log.LogAddr(7, aaveFeesProvider)\r\n  log.LogInt(8, totalFeeBips)\r\n  log.LogInt(9, fee)\r\n  log.LogInt(10, returnBalanceWithFee)\r\n\r\n  return returnBalanceWithFee\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef initAaveBorrow(_address: address, _amount: uint256) -> bool:\r\n  assert msg.sender == self.owner\r\n\r\n  self.saved = _address\r\n  aavePool: address = AaveProvider(AAVE_PROVIDER).getLendingPool()\r\n\r\n  log.LogAddr(1, aavePool)\r\n  AaveLendingPool(aavePool).flashLoan(\r\n    self,\r\n    AAVE_ETH_RESERVE,\r\n    _amount,\r\n    EMPTY_BYTES32\r\n  )\r\n\r\n  return True\r\n\r\n@public\r\n@nonreentrant('lock')\r\ndef executeOperation(_reserve: address, _amount: uint256, _fee: uint256, _params: bytes32) -> bool:\r\n  aavePool: address = AaveProvider(AAVE_PROVIDER).getLendingPool()\r\n  log.LogAddr(2, aavePool)\r\n  log.LogAddr(3, self.saved)\r\n  log.LogAddr(4, msg.sender)\r\n  log.LogInt(5, as_unitless_number(self.balance))\r\n\r\n  assert msg.sender == aavePool, \"sender must be aave pool\"\r\n  assert self.saved != ZERO_ADDRESS, \"saved address cannot be empty\"\r\n  assert self.balance > 0, \"self balance cannot be zero\"\r\n\r\n  clear(self.saved)\r\n  assert self.saved == ZERO_ADDRESS, \"saved must be empty\"\r\n\r\n  returnBalanceWithFee: uint256(wei) = self.returnBalanceWithFee()\r\n  log.LogInt(11, as_unitless_number(returnBalanceWithFee))\r\n\r\n  aaveCore: address = AaveProvider(AAVE_PROVIDER).getLendingPoolCore()\r\n  log.LogAddr(12, aaveCore)\r\n  send(aaveCore, returnBalanceWithFee)\r\n\r\n  log.Good()\r\n  return True",
	"ContractName": "Vyper_contract",
	"CompilerVersion": "vyper:0.1.0b16"
}