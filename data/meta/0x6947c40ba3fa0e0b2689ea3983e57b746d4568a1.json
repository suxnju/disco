{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.24;\r\n\r\n//\u8a2d\u5b9a\u7ba1\u7406\u8005//\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n}    \r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract x32323 is owned{\r\n    \r\n//\u8a2d\u5b9a\u521d\u59cb\u503c//\r\n\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    event FrozenFunds(address target, bool frozen);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function freezeAccount(address target, bool freeze) onlyOwner {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 2;\r\n    uint256 public totalSupply;\r\n    \r\n//\u521d\u59cb\u5316//\r\n\r\n    function TokenERC20(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol\r\n    ) public {\r\n\ttotalSupply = 1000000000 * 100 ;\r\n    \tbalanceOf[msg.sender] = totalSupply ;\r\n        name = \"Leimen coin\";\r\n        symbol = \"Lem\";         \r\n    }\r\n    \r\n//\u7ba1\u7406\u6b0a\u9650//\r\n\r\n    uint256 minBalance ;\r\n    uint256 price ;\r\n    bool stopped ;\r\n    bool selling;\r\n\r\n\r\n    function set_prices(uint256 price_wei) onlyOwner {\r\n        price = price_wei  ;\r\n    }\r\n\r\n    function withdrawal_Lem(uint256 amount)  onlyOwner {\r\n        require(balanceOf[this] >= amount) ;\r\n        balanceOf[this] -= amount ;\r\n        balanceOf[msg.sender] += amount ;\r\n    }\r\n    \r\n    function withdrawal_Eth(uint amount_wei) onlyOwner {\r\n        msg.sender.transfer(amount_wei) ;\r\n    }\r\n    \r\n    function set_Name(string _name) onlyOwner {\r\n        name = _name;\r\n    }\r\n    \r\n    function set_symbol(string _symbol) onlyOwner {\r\n        symbol = _symbol;\r\n    }\r\n    \r\n    function set_sell(bool _selling) onlyOwner {\r\n        selling = _selling;\r\n    }\r\n    \r\n    function stop() onlyOwner {\r\n        stopped = true;\r\n    }\r\n\r\n    function start() onlyOwner {\r\n        stopped = false;\r\n    }\r\n\r\n//\u4ea4\u6613//\r\n\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n\t    require(!frozenAccount[_from]);\r\n\t    require(!stopped);\r\n        require(_to != 0x0);\r\n        \r\n        require(_value >= 0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        \r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n\t    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]); \r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n//\u8ca9\u552e\r\n\r\n    function () payable {\r\n        buy();\r\n    }\r\n\r\n    function buy() payable returns (uint amount){\r\n        require(price != 0);\r\n\t    require(selling);\r\n        amount = msg.value / price * 100 ;\r\n        require(balanceOf[this] > amount);           \r\n        balanceOf[msg.sender] += amount;           \r\n        balanceOf[this] -= amount; \r\n        Transfer(this, msg.sender, amount);         \r\n        return amount;    \r\n    }\r\n}",
	"ContractName": "x32323",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}