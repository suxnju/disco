{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.21;\r\n\r\ninterface token {\r\n  function transfer(address receiver, uint amount) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract KeplerTokenCrowdsale is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n    uint256 public TokensPerETH;\r\n    token public tokenReward;\r\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\r\n\r\n    function KeplerTokenCrowdsale(\r\n        uint256 etherPrice,\r\n        address addressOfTokenUsedAsReward\r\n    ) public {\r\n        TokensPerETH = etherPrice * 150 / 125;\r\n        tokenReward = token(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    function () payable public {\r\n    \trequire(msg.value != 0);\r\n        uint256 amount = msg.value;\r\n        tokenReward.transfer(msg.sender, amount * TokensPerETH);\r\n        emit FundTransfer(msg.sender, amount, true);\r\n    }\r\n\r\n    function changeEtherPrice(uint256 newEtherPrice) onlyOwner public {\r\n        TokensPerETH = newEtherPrice * 150 / 125;\r\n    }\r\n\r\n    function withdraw(uint256 value) onlyOwner public {\r\n        uint256 amount = value * 10**16;\r\n        owner.transfer(amount);\r\n        emit FundTransfer(owner, amount, false);\r\n    }\r\n\r\n    function withdrawTokens(address otherTokenAddress, uint256 amount) onlyOwner public {\r\n        token otherToken = token(otherTokenAddress);\r\n        otherToken.transfer(owner, amount);\r\n    }\r\n\r\n    function destroy() onlyOwner public {\r\n        selfdestruct(owner);\r\n    }\r\n}",
	"ContractName": "KeplerTokenCrowdsale",
	"CompilerVersion": "v0.4.21+commit.dfe3193c"
}