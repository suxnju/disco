{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.25;\r\n\r\n//\r\n// https://github.com/TheWeakestHodler/TheWeakestHodler\r\n//\r\n// HODL UNTIL YOU ARE HOMELESS\r\n//\r\ncontract TheWeakestHodler {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 constant public percentsRemaining = 90;\r\n    mapping(address => uint256) public shares;\r\n    uint256 public totalShares;\r\n    \r\n    function () public payable {\r\n        if (msg.value > 0) {\r\n            if (totalShares == 0) {\r\n                uint256 amount = msg.value;\r\n            } else {\r\n                amount = msg.value.mul(totalShares).div(address(this).balance.sub(msg.value));\r\n            }\r\n            shares[msg.sender] = shares[msg.sender].add(amount);\r\n            totalShares = totalShares.add(amount);\r\n        } else {\r\n            amount = balanceOf(msg.sender);\r\n            totalShares = totalShares.sub(shares[msg.sender]);\r\n            shares[msg.sender] = 0;\r\n            msg.sender.transfer(amount);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address _account) public view returns(uint256) {\r\n        if (totalShares == 0) {\r\n            return 0;\r\n        }\r\n        return address(this).balance.mul(shares[_account]).mul(percentsRemaining).div(totalShares).div(100);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}",
	"ContractName": "TheWeakestHodler",
	"CompilerVersion": "v0.4.25+commit.59dbf8f1"
}