{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.18;\r\n\r\ninterface token {\r\n    function transfer(address receiver, uint amount) public;\r\n}\r\n\r\n/*\r\n * SafeMath - Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    address public owner;\r\n    uint256 public amountRaised;\r\n    uint256 public amountRaisedPhase;\r\n    uint256 public price;\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /*\r\n    * Throws if called by any account other than the owner\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * Constrctor function - setup the owner\r\n     */\r\n    function Crowdsale(\r\n        address ownerAddress,\r\n        uint256 weiCostPerToken,\r\n        address rewardTokenAddress\r\n    ) public {\r\n        owner = ownerAddress;\r\n        price = weiCostPerToken;\r\n        tokenReward = token(rewardTokenAddress);\r\n    }\r\n\r\n    /*\r\n     * Fallback function - called when funds are sent to the contract\r\n     */\r\n    function () public payable {\r\n        uint256 amount = msg.value;\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\r\n        amountRaised = amountRaised.add(amount);\r\n        amountRaisedPhase = amountRaisedPhase.add(amount);\r\n        tokenReward.transfer(msg.sender, amount.mul(10**4).div(price));\r\n        FundTransfer(msg.sender, amount, true);\r\n    }\r\n\r\n    /*\r\n     * Withdraw the funds safely\r\n     */\r\n    function safeWithdrawal() public onlyOwner {\r\n        uint256 withdraw = amountRaisedPhase;\r\n        amountRaisedPhase = 0;\r\n        FundTransfer(owner, withdraw, false);\r\n        owner.transfer(withdraw);\r\n    }\r\n\r\n    /*\r\n     * Transfers the current balance to the owner and terminates the contract\r\n     */\r\n    function destroy() public onlyOwner {\r\n        selfdestruct(owner);\r\n    }\r\n    function destroyAndSend(address _recipient) public onlyOwner {\r\n        selfdestruct(_recipient);\r\n    }\r\n}",
	"ContractName": "Crowdsale",
	"CompilerVersion": "v0.4.18+commit.9cf6e910"
}