{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.10;\r\n\r\ncontract SafeMath {\r\n\r\n\r\n    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x + y;\r\n      assert((z >= x) && (z >= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\r\n      assert(x >= y);\r\n      uint256 z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\r\n      uint256 z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n\r\n}\r\n\r\ncontract Token {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n/*  ERC 20 token */\r\ncontract StandardToken is Token {\r\n\r\n    function transfer(address _to, uint256 _value) returns (bool success) {\r\n      if (balances[msg.sender] >= _value && _value > 0) {\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\r\n        balances[_to] += _value;\r\n        balances[_from] -= _value;\r\n        allowed[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    function balanceOf(address _owner) constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n      return allowed[_owner][_spender];\r\n    }\r\n\r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowed;\r\n}\r\n\r\ncontract SPINToken is StandardToken, SafeMath {\r\n\r\n    string public constant name = \"ETHERSPIN\";\r\n    string public constant symbol = \"SPIN\";\r\n    uint256 public constant decimals = 18;\r\n    string public version = \"2.0\";\r\n\r\n    address public ethFundDeposit;\r\n    address public SPINFundDeposit;\r\n\r\n    bool public isFinalized;\r\n    uint256 public fundingStartBlock;\r\n    uint256 public fundingEndBlock;\r\n    uint256 public constant SPINFund = 2000 * (10**3) * 10**decimals;\r\n\r\n    function tokenRate() constant returns(uint) {\r\n        if (block.number>=fundingStartBlock && block.number<fundingStartBlock+250) return 1300;\r\n        if (block.number>=fundingStartBlock && block.number<fundingStartBlock+33600) return 1000;\r\n        if (block.number>=fundingStartBlock && block.number<fundingStartBlock+67200) return 750;\r\n        if (block.number>=fundingStartBlock && block.number<fundingStartBlock+100800) return 600;\r\n        return 500;\r\n    }\r\n\r\n    // Total Cap is 10M\r\n    uint256 public constant tokenCreationCap =  10 * (10**6) * 10**decimals;\r\n\r\n\r\n    // events\r\n    event CreateSPIN(address indexed _to, uint256 _value);\r\n\r\n    // constructor\r\n    function SPINToken(\r\n        address _ethFundDeposit,\r\n        address _SPINFundDeposit,\r\n        uint256 _fundingStartBlock,\r\n        uint256 _fundingEndBlock)\r\n    {\r\n      isFinalized = false;\r\n      ethFundDeposit = _ethFundDeposit;\r\n      SPINFundDeposit = _SPINFundDeposit;\r\n      fundingStartBlock = _fundingStartBlock;\r\n      fundingEndBlock = _fundingEndBlock;\r\n      totalSupply = SPINFund;\r\n      balances[SPINFundDeposit] = SPINFund;\r\n      CreateSPIN(SPINFundDeposit, SPINFund);\r\n    }\r\n\r\n\r\n    function makeTokens() payable  {\r\n      if (isFinalized) throw;\r\n      if (block.number < fundingStartBlock) throw;\r\n      if (block.number > fundingEndBlock) throw;\r\n      if (msg.value == 0) throw;\r\n\r\n      uint256 tokens = safeMult(msg.value, tokenRate());\r\n\r\n      uint256 checkedSupply = safeAdd(totalSupply, tokens);\r\n\r\n      if (tokenCreationCap < checkedSupply) throw;\r\n\r\n      totalSupply = checkedSupply;\r\n      balances[msg.sender] += tokens;\r\n      CreateSPIN(msg.sender, tokens);\r\n    }\r\n\r\n    function() payable {\r\n        makeTokens();\r\n    }\r\n\r\n    function finalize() external {\r\n      if (isFinalized) throw;\r\n      if (msg.sender != ethFundDeposit) throw;\r\n\r\n      if(block.number <= fundingEndBlock && totalSupply != tokenCreationCap) throw;\r\n\r\n      isFinalized = true;\r\n      if(!ethFundDeposit.send(this.balance)) throw;\r\n    }\r\n\r\n\r\n\r\n}",
	"ContractName": "SPINToken",
	"CompilerVersion": "v0.4.21+commit.dfe3193c"
}