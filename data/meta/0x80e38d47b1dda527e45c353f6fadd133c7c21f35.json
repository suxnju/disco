{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.18;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\ncontract SkinPresale is Pausable {\r\n\r\n    // Record number of packages each account buy\r\n    mapping (address => uint256) public accountToBoughtNum;\r\n\r\n    // Total number of packages for presale\r\n    uint256 public totalSupplyForPresale = 10000;\r\n\r\n    // Number of packages each account can buy\r\n    uint256 public accountBuyLimit = 100;\r\n\r\n    // Remaining packages for presale\r\n    uint256 public remainPackage = 10000;\r\n\r\n    // Event\r\n    event BuyPresale(address account);\r\n\r\n    function buyPresale() payable external whenNotPaused {\r\n        address account = msg.sender;\r\n\r\n        // Check account limit\r\n        require(accountToBoughtNum[account] + 1 < accountBuyLimit);\r\n\r\n        // Check total presale limit\r\n        require(remainPackage > 0);\r\n\r\n        // Check enough money\r\n        uint256 price = 20 finney + (10000 - remainPackage) / 500 * 10 finney;\r\n        require(msg.value >= price);\r\n\r\n        // Perform purchase\r\n        accountToBoughtNum[account] += 1;\r\n        remainPackage -= 1;\r\n\r\n        // Fire event\r\n        BuyPresale(account);\r\n    }\r\n\r\n    function withdrawETH() external onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n}",
	"ContractName": "SkinPresale",
	"CompilerVersion": "v0.4.20+commit.3155dd80"
}