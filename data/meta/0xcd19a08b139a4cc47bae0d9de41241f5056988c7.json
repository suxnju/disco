{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.18;\r\n\r\n\r\n    contract ERC20 {\r\n    function totalSupply() public constant returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    library SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c; \r\n    }\r\n    }\r\n\r\n\r\n    contract Bitway is ERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    uint256 public totalSupply = 0;\r\n    uint256 public maxSupply = 22000000 * 10 ** uint256(decimals);\r\n    \r\n    string public constant symbol = \"BTW\";\r\n    string public constant name = \"Bitway\";\r\n    uint256 public constant decimals = 18;\r\n    \r\n    \r\n    \r\n    uint256 public constant RATE = 10000;\r\n    address public owner;\r\n    \r\n   \r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n    \r\n    \r\n    \r\n    function () public payable {\r\n        createTokens();\r\n        \r\n    }\r\n    \r\n    function Bitway() public {\r\n        owner = msg.sender;\r\n        \r\n    }\r\n    \r\n   \r\n    function createTokens() public payable {\r\n        require(msg.value > 0);\r\n        require(totalSupply < maxSupply);\r\n        uint256 tokens = msg.value.mul(RATE);\r\n        balances[msg.sender] = balances[msg.sender].add(tokens);\r\n        totalSupply = totalSupply.add(tokens);\r\n        \r\n    }\r\n    \r\n    \r\n    \r\n    function totalSupply() public constant returns (uint256){\r\n        return totalSupply;\r\n    }\r\n\r\n  \r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(\r\n        allowed[_from][msg.sender] >= _value\r\n        && balances[_from] >= _value\r\n        && _value > 0\r\n        );\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n   \r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    \r\n}",
	"ContractName": "Bitway",
	"CompilerVersion": "v0.4.20-nightly.2018.1.6+commit.2548228b"
}