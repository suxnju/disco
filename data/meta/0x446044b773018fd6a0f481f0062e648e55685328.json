{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.24;\r\n\r\n/*** @title SafeMath\r\n * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol */\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a / b;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface ERC20 {\r\n  function transfer (address _beneficiary, uint256 _tokenAmount) external returns (bool);\r\n  function mintFromICO(address _to, uint256 _amount) external  returns(bool);\r\n  function isWhitelisted(address wlCandidate) external returns(bool);\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n}\r\n\r\n/**\r\n * @title PreCrowdSale\r\n * @dev https://github.com/elephant-marketing/*/\r\n\r\ncontract PreSale is Ownable {\r\n\r\n  ERC20 public token;\r\n\r\n  ERC20 public authorize;\r\n\r\n  using SafeMath for uint;\r\n\r\n  address public backEndOperator = msg.sender;\r\n\r\n  address team = 0xe56E60dE6d2649d9Cd0c82cb1f9d00365f07BA92; // 10 % - founders\r\n\r\n  address bounty = 0x5731340239D8105F9F4e436021Ad29D3098AB6f8; // 2 % - bounty\r\n\r\n\r\n  mapping(address => uint256) public investedEther;\r\n\r\n\r\n  uint256 public startPreSale = 1539561600; // Monday, 15 October 2018 \u0433., 0:00:00\r\n\r\n  uint256 public endPreSale = 1542240000; // Thursday, 15 November 2018 \u0433., 0:00:00\r\n\r\n\r\n  uint256 stage1Sale = startPreSale + 2 days; // 0- 2  days\r\n\r\n  uint256 stage2Sale = startPreSale + 10 days; // 3 - 10 days\r\n\r\n  uint256 stage3Sale = startPreSale + 18 days; // 11 - 18  days\r\n\r\n  uint256 stage4Sale = startPreSale + 26 days; // 19 - 26 days\r\n\r\n  uint256 stage5Sale = startPreSale + 31 days; // 27 - 31  days\r\n\r\n  uint256 public weisRaised;\r\n\r\n  uint256 public buyPrice; // 1 USD\r\n\r\n  uint256 public dollarPrice;\r\n\r\n  uint256 public soldTokensPreSale;\r\n\r\n  uint256 public softcapPreSale = 4200000*1e18; // 4,200,000 VIONcoin\r\n\r\n  uint256 public hardCapPreSale = 34200000*1e18; // 34,200,000 VIONcoin\r\n\r\n  event UpdateDollar(uint256 time, uint256 _rate);\r\n\r\n  event Refund(uint256 sum, address investor);\r\n\r\n\r\n\r\n  modifier backEnd() {\r\n    require(msg.sender == backEndOperator || msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  constructor(ERC20 _token,ERC20 _authorize, uint256 usdETH) public {\r\n    token = _token;\r\n    authorize = _authorize;\r\n    dollarPrice = usdETH;\r\n    buyPrice = (1e18/dollarPrice).div(10); // 0.1 usd\r\n  }\r\n\r\n\r\n  function setStartPreSale(uint256 newStartPreSale) public onlyOwner {\r\n    startPreSale = newStartPreSale;\r\n  }\r\n\r\n  function setEndPreSale(uint256 newEndPreSale) public onlyOwner {\r\n    endPreSale = newEndPreSale;\r\n  }\r\n\r\n  function setBackEndAddress(address newBackEndOperator) public onlyOwner {\r\n    backEndOperator = newBackEndOperator;\r\n  }\r\n\r\n  function setBuyPrice(uint256 _dollar) public backEnd {\r\n    dollarPrice = _dollar;\r\n    buyPrice = (1e18/dollarPrice).div(10); // 0.1 usd\r\n    emit UpdateDollar(now, dollarPrice);\r\n  }\r\n\r\n\r\n  /*******************************************************************************\r\n   * Payable's section */\r\n\r\n  function isPreSale() public constant returns(bool) {\r\n    return now >= startPreSale && now <= endPreSale;\r\n  }\r\n\r\n\r\n  function () public payable {\r\n    require(authorize.isWhitelisted(msg.sender));\r\n    require(isPreSale());\r\n    preSale(msg.sender, msg.value);\r\n    require(soldTokensPreSale<=hardCapPreSale);\r\n    investedEther[msg.sender] = investedEther[msg.sender].add(msg.value);\r\n  }\r\n\r\n\r\n  function preSale(address _investor, uint256 _value) internal {\r\n    uint256 tokens = _value.mul(1e18).div(buyPrice);\r\n    uint256 tokensByDate = tokens.mul(bonusDate()).div(100);\r\n    tokens = tokens.add(tokensByDate);\r\n    token.mintFromICO(_investor, tokens);\r\n    soldTokensPreSale = soldTokensPreSale.add(tokens); // only sold\r\n\r\n    uint256 tokensTeam = tokens.mul(10).div(44); // 20 %\r\n    token.mintFromICO(team, tokensTeam);\r\n\r\n    uint256 tokensBoynty = tokens.mul(3).div(200); // 1.5 %\r\n    token.mintFromICO(bounty, tokensBoynty);\r\n\r\n    weisRaised = weisRaised.add(_value);\r\n  }\r\n\r\n\r\n  function bonusDate() private view returns (uint256){\r\n    if (now > startPreSale && now < stage1Sale) {  // 0 - 2 days preSale\r\n      return 50;\r\n    }\r\n    else if (now > stage1Sale && now < stage2Sale) { // 3 - 10 days preSale\r\n      return 40;\r\n    }\r\n    else if (now > stage2Sale && now < stage3Sale) { // 11 - 18 days preSale\r\n      return 33;\r\n    }\r\n    else if (now > stage3Sale && now < stage4Sale) { // 19 - 26 days preSale\r\n      return 30;\r\n    }\r\n    else if (now > stage4Sale && now < stage5Sale) { // 27 - 31 days preSale\r\n      return 25;\r\n    }\r\n\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  function mintManual(address receiver, uint256 _tokens) public backEnd {\r\n    token.mintFromICO(receiver, _tokens);\r\n    soldTokensPreSale = soldTokensPreSale.add(_tokens);\r\n\r\n    uint256 tokensTeam = _tokens.mul(10).div(44); // 20 %\r\n    token.mintFromICO(team, tokensTeam);\r\n\r\n    uint256 tokensBoynty = _tokens.mul(3).div(200); // 1.5 %\r\n    token.mintFromICO(bounty, tokensBoynty);\r\n  }\r\n\r\n\r\n  function transferEthFromContract(address _to, uint256 amount) public onlyOwner {\r\n    _to.transfer(amount);\r\n  }\r\n\r\n\r\n  function refundPreSale() public {\r\n    require(soldTokensPreSale < softcapPreSale && now > endPreSale);\r\n    uint256 rate = investedEther[msg.sender];\r\n    require(investedEther[msg.sender] >= 0);\r\n    investedEther[msg.sender] = 0;\r\n    msg.sender.transfer(rate);\r\n    weisRaised = weisRaised.sub(rate);\r\n    emit Refund(rate, msg.sender);\r\n  }\r\n}",
	"ContractName": "PreSale",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}