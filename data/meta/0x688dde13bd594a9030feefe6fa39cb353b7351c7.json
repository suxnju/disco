{
	"Language": "Solidity",
	"Source": "pragma solidity 0.4.25;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract ERC20 {\r\n    \r\n  function totalSupply()public view returns (uint256 total_Supply);\r\n  function balanceOf(address who)public view returns (uint256);\r\n  function allowance(address owner, address spender)public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value)public returns (bool ok);\r\n  function approve(address spender, uint256 value)public returns (bool ok);\r\n  function transfer(address to, uint256 value)public returns (bool ok);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n//--- Upgraded tokens must extend UpgradeAgent ----//\r\ncontract UpgradeAgent {\r\n  address public oldAddress;\r\n  function isUpgradeAgent() public pure returns (bool) {\r\n    return true;\r\n  }\r\n  function upgradeFrom(address _from, uint256 _value) public;\r\n}\r\n\r\ncontract CVEN is ERC20 { \r\n    using SafeMath for uint256;\r\n    //--- Token configurations ----// \r\n    string public constant name = \"Concordia Ventures Stablecoin\";\r\n    string public constant symbol = \"CVEN\";\r\n    uint8 public constant decimals = 18;\r\n    \r\n    //--- Token allocations -------//\r\n    uint256 public _totalsupply;\r\n    uint256 public mintedTokens;\r\n    uint256 public totalUpgraded;\r\n\r\n    //--- Address -----------------//\r\n    address public owner;\r\n    address public ethFundMain;\r\n    UpgradeAgent public upgradeAgent;\r\n    \r\n    //--- Variables ---------------//\r\n    bool public lockstatus = false;\r\n    bool public stopped = false;\r\n    \r\n    mapping(address => uint256) public balances;\r\n    mapping(address => mapping(address => uint256)) public allowed;\r\n    mapping(address => bool) public locked;\r\n    event Mint(address indexed from, address indexed to, uint256 amount);\r\n    event Burn(address indexed from, uint256 amount);\r\n    event Upgrade(address indexed _from, address indexed _to, uint256 _value);\r\n    event UpgradeAgentSet(address agent);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner is allowed\");\r\n        _;\r\n    }\r\n\r\n    constructor() public\r\n    {\r\n        owner = msg.sender;\r\n        ethFundMain = 0x657Eb3CE439CA61e58FF6Cb106df2e962C5e7890;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256 total_Supply) {\r\n        total_Supply = _totalsupply;\r\n    }\r\n    \r\n    function balanceOf(address _owner)public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transfer(address _to, uint256 _amount)public returns (bool success) {\r\n        require(!lockstatus, \"Token is locked now\");\r\n        require( _to != 0x0, \"Receiver can not be 0x0\");\r\n        require(balances[msg.sender] >= _amount, \"Balance does not have enough tokens\");\r\n        require(!locked[msg.sender], \"Sender address is locked\");\r\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        emit Transfer(msg.sender, _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom( address _from, address _to, uint256 _amount ) public returns (bool success)  {\r\n        require( _to != 0x0, \"Receiver can not be 0x0\");\r\n        require(!lockstatus, \"Token is locked now\");\r\n        require(balances[_from] >= _amount, \"Source balance is not enough\");\r\n        require(allowed[_from][msg.sender] >= _amount, \"Allowance is not enough\");\r\n        require(!locked[_from], \"From address is locked\");\r\n        balances[_from] = (balances[_from]).sub(_amount);\r\n        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\r\n        balances[_to] = (balances[_to]).add(_amount);\r\n        emit Transfer(_from, _to, _amount);\r\n        return true;\r\n    }\r\n    \r\n    function approve(address _spender, uint256 _amount)public returns (bool success)  {\r\n        require(!lockstatus, \"Token is locked now\");\r\n        require( _spender != 0x0, \"Address can not be 0x0\");\r\n        require(balances[msg.sender] >= _amount, \"Balance does not have enough tokens\");\r\n        require(!locked[msg.sender], \"Sender address is locked\");\r\n        allowed[msg.sender][_spender] = _amount;\r\n        emit Approval(msg.sender, _spender, _amount);\r\n        return true;\r\n    }\r\n  \r\n    function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balances[msg.sender] >= _value, \"Balance does not have enough tokens\");\r\n        require(!locked[msg.sender], \"Sender address is locked\");   \r\n        balances[msg.sender] = (balances[msg.sender]).sub(_value);            \r\n        _totalsupply = _totalsupply.sub(_value);                     \r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    function burnFrom(address from, uint256 _value) public returns (bool success) {\r\n        require(balances[from] >= _value, \"Source balance does not have enough tokens\");\r\n        require(allowed[from][msg.sender] >= _value, \"Source balance does not have enough tokens\");\r\n        require(!locked[from], \"Source address is locked\");   \r\n        balances[from] = (balances[from]).sub(_value);\r\n        allowed[from][msg.sender] = (allowed[from][msg.sender]).sub(_value);            \r\n        _totalsupply = _totalsupply.sub(_value);                     \r\n        emit Burn(from, _value);\r\n        return true;\r\n    }\r\n\r\n    function stopTransferToken() external onlyOwner {\r\n        require(!lockstatus, \"Token is locked\");\r\n        lockstatus = true;\r\n    }\r\n\r\n    function startTransferToken() external onlyOwner {\r\n        require(lockstatus, \"Token is transferable\");\r\n        lockstatus = false;\r\n    }\r\n\r\n    function () public payable {\r\n        require(!stopped, \"CrowdSale is stopping\");\r\n        mint(this, msg.sender, msg.value);\r\n    }\r\n\r\n    function manualMint(address receiver, uint256 _value) public onlyOwner{\r\n        require(!stopped, \"CrowdSale is stopping\");\r\n        mint(owner, receiver, _value);\r\n    }\r\n\r\n    function mint(address from, address receiver, uint256 value) internal {\r\n        require(receiver != 0x0, \"Address can not be 0x0\");\r\n        require(value > 0, \"Value should larger than 0\");\r\n        balances[receiver] = balances[receiver].add(value);\r\n        _totalsupply = _totalsupply.add(value);\r\n        mintedTokens = mintedTokens.add(value);\r\n        emit Mint(from, receiver, value);\r\n        emit Transfer(0, receiver, value);\r\n    }\r\n    \r\n    function haltMintToken() external onlyOwner {\r\n        require(!stopped, \"Minting is stopping\");\r\n        stopped = true;\r\n    }\r\n\r\n    function resumeMintToken() external onlyOwner {\r\n        require(stopped, \"Minting is running\");\r\n        stopped = false;\r\n    }\r\n\r\n    function changeReceiveWallet(address newAddress) external onlyOwner {\r\n        require(newAddress != 0x0, \"Address can not be 0x0\");\r\n        ethFundMain = newAddress;\r\n    }\r\n\r\n\tfunction assignOwnership(address newOwner) external onlyOwner {\r\n\t    require(newOwner != 0x0, \"Address can not be 0x0\");\r\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\r\n\t    balances[owner] = 0;\r\n\t    owner = newOwner;\r\n\t    emit Transfer(msg.sender, newOwner, balances[newOwner]);\r\n\t}\r\n\r\n    function forwardFunds() external onlyOwner { \r\n        address myAddress = this;\r\n        ethFundMain.transfer(myAddress.balance);\r\n    }\r\n\r\n    function withdrawTokens() external onlyOwner {\r\n        uint256 value = balances[this];\r\n        balances[owner] = (balances[owner]).add(value);\r\n        balances[this] = 0;\r\n        emit Transfer(this, owner, value);\r\n    }\r\n\r\n    function haltTokenTransferFromAddress(address investor) external onlyOwner {\r\n        locked[investor] = true;\r\n    }\r\n\r\n    function resumeTokenTransferFromAddress(address investor) external onlyOwner {\r\n        locked[investor] = false;\r\n    }\r\n\r\n    function setUpgradeAgent(address agent) external onlyOwner{\r\n        require(agent != 0x0, \"Upgrade agent can not be zero\");\r\n        require(totalUpgraded == 0, \"Token are upgrading\");\r\n        upgradeAgent = UpgradeAgent(agent);\r\n        require(upgradeAgent.isUpgradeAgent(), \"The address is not upgrade agent\");\r\n        require(upgradeAgent.oldAddress() == address(this), \"This is not right agent\");\r\n        emit UpgradeAgentSet(upgradeAgent);\r\n    }\r\n\r\n    function upgrade(uint256 value) public {\r\n        require (value != 0, \"Value can not be zero\");\r\n        require(balances[msg.sender] >= value, \"Balance is not enough\");\r\n        require(address(upgradeAgent) != 0x0, \"Upgrade agent is not set\");\r\n        balances[msg.sender] = (balances[msg.sender]).sub(value);\r\n        _totalsupply = _totalsupply.sub(value);\r\n        totalUpgraded = totalUpgraded.add(value);\r\n        upgradeAgent.upgradeFrom(msg.sender, value);\r\n        emit Upgrade(msg.sender, upgradeAgent, value);\r\n        emit Transfer(msg.sender, 0, value);\r\n    }\r\n}",
	"ContractName": "CVEN",
	"CompilerVersion": "v0.4.25+commit.59dbf8f1"
}