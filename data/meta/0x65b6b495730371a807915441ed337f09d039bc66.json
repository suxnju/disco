{
	"Language": "Solidity",
	"Source": "pragma solidity 0.4.19;\r\n\r\n\r\ncontract InterfaceDeusETH {\r\n    bool public gameOver;\r\n    bool public gameOverByUser;\r\n    function totalSupply() public view returns (uint256);\r\n    function livingSupply() public view returns (uint256);\r\n    function getState(uint256 _id) public returns (uint256);\r\n    function getHolder(uint256 _id) public returns (address);\r\n}\r\n\r\n\r\ncontract FundsKeeper {\r\n    using SafeMath for uint256;\r\n    InterfaceDeusETH private lottery = InterfaceDeusETH(0x0);\r\n    bool public started = false;\r\n\r\n    // address of tokens\r\n    address public deusETH;\r\n\r\n    uint256 public weiReceived;\r\n\r\n    // address of team\r\n    address public owner;\r\n    bool public salarySent = false;\r\n\r\n    uint256 public totalPayments = 0;\r\n\r\n    mapping(uint256 => bool) public payments;\r\n\r\n    event Bank(uint256 indexed _sum, uint256 indexed _add);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function FundsKeeper(address _owner) public {\r\n        require(_owner != address(0));\r\n        owner = _owner;\r\n    }\r\n\r\n    function () external payable {\r\n        weiReceive();\r\n    }\r\n\r\n    function getGain(uint256 _id) public {\r\n        require((lottery.gameOver() && salarySent) || lottery.gameOverByUser());\r\n        require(lottery.getHolder(_id) == msg.sender);\r\n        require(lottery.getState(_id) == 1); //living token only\r\n        require(payments[_id] == false);\r\n\r\n        address winner = msg.sender;\r\n\r\n        uint256 gain = calcGain();\r\n\r\n        require(gain != 0);\r\n        require(this.balance >= gain);\r\n\r\n        totalPayments = totalPayments.add(gain);\r\n        payments[_id] = true;\r\n\r\n        winner.transfer(gain);\r\n    }\r\n\r\n    function setLottery(address _lottery) public onlyOwner {\r\n        require(!started);\r\n        lottery = InterfaceDeusETH(_lottery);\r\n        deusETH = _lottery;\r\n        started = true;\r\n    }\r\n\r\n    function getTeamSalary() public onlyOwner {\r\n        require(!salarySent);\r\n        require(lottery.gameOver());\r\n        require(!lottery.gameOverByUser());\r\n        salarySent = true;\r\n        weiReceived = this.balance;\r\n        uint256 salary = weiReceived/10;\r\n        weiReceived = weiReceived.sub(salary);\r\n        owner.transfer(salary);\r\n    }\r\n\r\n    function weiReceive() internal {\r\n        Bank(this.balance, msg.value);\r\n    }\r\n\r\n    function calcGain() internal returns (uint256) {\r\n        if (lottery.gameOverByUser() && (weiReceived == 0)) {\r\n            weiReceived = this.balance;\r\n        }\r\n        return weiReceived/lottery.livingSupply();\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}",
	"ContractName": "FundsKeeper",
	"CompilerVersion": "v0.4.19+commit.c4cbbb05"
}