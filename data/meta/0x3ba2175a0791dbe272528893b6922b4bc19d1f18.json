{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.18;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public {\r\n        if (msg.sender != owner) return;\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract Dudecoin is owned {\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 18;\r\n    // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n\r\n    uint256 public buyPrice;\r\n    uint public amountRaised;\r\n\r\n    // deadline\r\n    uint public deadline;\r\n    uint duration;\r\n\r\n\r\n    bool closed = false;\r\n\r\n    uint256 initialSupply = 10000000000;\r\n    string tokenName = \"Dudecoin\";\r\n    string tokenSymbol = \"DUDE\";\r\n    uint256 initBuyPrice_inWei = 1000000000000;\r\n    uint durationInMinutes = 259200;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function Dudecoin() public {\r\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\r\n        balanceOf[this] = initialSupply * 8 * (10 ** uint256(decimals - 1));  // Give the contract 80% of initial tokens\r\n        balanceOf[msg.sender] = initialSupply * 2 * (10 ** uint256(decimals - 1)); // Give owners 20% of tokens\r\n        name = tokenName;                                   // Set the name for display purposes\r\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\r\n        buyPrice = initBuyPrice_inWei;\r\n        amountRaised = 0;\r\n\r\n        duration = durationInMinutes;\r\n        deadline = now + duration * 1 minutes;\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n\r\n    function postDeadline()\r\n        public\r\n        afterDeadline\r\n    {\r\n        owner.transfer(amountRaised);\r\n        amountRaised = 0;\r\n        closed = true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\r\n        totalSupply -= _value;                      // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\r\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\r\n        totalSupply -= _value;                              // Update totalSupply\r\n        Burn(_from, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function setPrices(uint256 newBuyPrice)\r\n        public\r\n        onlyOwner\r\n    {\r\n        if (msg.sender != owner) return;\r\n        buyPrice = newBuyPrice;\r\n    }\r\n\r\n    function () payable public {\r\n        require(!closed);\r\n        uint256 amount = (msg.value * 1 ether) / buyPrice;                    // calculates the amount\r\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\r\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\r\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\r\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\r\n        amountRaised += msg.value;\r\n\r\n        if (amountRaised >= 0.5 * 1 ether) {\r\n            owner.transfer(amountRaised);\r\n            amountRaised = 0;\r\n        }\r\n    }\r\n\r\n\r\n    function totalSupply() public constant returns (uint256)\r\n    {\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance)\r\n    {\r\n        return balanceOf[tokenOwner];\r\n    }\r\n\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining)\r\n    {\r\n        return allowance[tokenOwner][spender];\r\n    }\r\n}",
	"ContractName": "Dudecoin",
	"CompilerVersion": "v0.4.19+commit.c4cbbb05"
}