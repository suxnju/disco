{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.11;\r\n\r\n/* The Schmeckle */\r\n\r\ncontract TheSchmeckle {\r\n\r\n    string public standard = 'CoRToken';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n    uint256 public sellPrice;\r\n    uint256 public buyPrice;\r\n\r\n    function TheSchmeckle() {\r\n        totalSupply = 1000000000;\r\n        balanceOf[this] = totalSupply;\r\n        name = 'Schmeckle';\r\n        symbol = 'SHM';\r\n        decimals = 0;\r\n        sellPrice = 100000000000000;\r\n        buyPrice = 100000000000000;\r\n    }\r\n\r\n    mapping (address => uint256) public balanceOf;  \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function transfer(address _to, uint256 _value) {\r\n        if (balanceOf[msg.sender] < _value) revert();\r\n        if (balanceOf[_to] + _value < balanceOf[_to]) revert();\r\n        balanceOf[msg.sender] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function buy() payable {\r\n        uint amount = msg.value / buyPrice;\r\n        if (balanceOf[this] < amount) revert();\r\n        balanceOf[msg.sender] += amount;\r\n        balanceOf[this] -= amount;\r\n        Transfer(this, msg.sender, amount);\r\n    }\r\n\r\n    function sell(uint256 amount) {\r\n        if (balanceOf[msg.sender] < amount ) revert();\r\n        balanceOf[this] += amount;\r\n        balanceOf[msg.sender] -= amount;\r\n        if (!msg.sender.send(amount * sellPrice)) {\r\n            revert();\r\n        } else {\r\n            Transfer(msg.sender, this, amount);\r\n        }\r\n    }\r\n    \r\n    function () {\r\n        revert();\r\n    }\r\n}",
	"ContractName": "TheSchmeckle",
	"CompilerVersion": "v0.4.13+commit.fb4cb1a"
}