{
	"Language": "Vyper",
	"Source": "contract Exchange():\r\n    def setup(token_addr: address): modifying\r\n\r\nNewExchange: event({token: indexed(address), exchange: indexed(address)})\r\n\r\nexchangeTemplate: public(address)\r\ntokenCount: public(uint256)\r\ntoken_to_exchange: address[address]\r\nexchange_to_token: address[address]\r\nid_to_token: address[uint256]\r\n\r\n@public\r\ndef initializeFactory(template: address):\r\n    assert self.exchangeTemplate == ZERO_ADDRESS\r\n    assert template != ZERO_ADDRESS\r\n    self.exchangeTemplate = template\r\n\r\n@public\r\ndef createExchange(token: address) -> address:\r\n    assert token != ZERO_ADDRESS\r\n    assert self.exchangeTemplate != ZERO_ADDRESS\r\n    assert self.token_to_exchange[token] == ZERO_ADDRESS\r\n    exchange: address = create_with_code_of(self.exchangeTemplate)\r\n    Exchange(exchange).setup(token)\r\n    self.token_to_exchange[token] = exchange\r\n    self.exchange_to_token[exchange] = token\r\n    token_id: uint256 = self.tokenCount + 1\r\n    self.tokenCount = token_id\r\n    self.id_to_token[token_id] = token\r\n    log.NewExchange(token, exchange)\r\n    return exchange\r\n\r\n@public\r\n@constant\r\ndef getExchange(token: address) -> address:\r\n    return self.token_to_exchange[token]\r\n\r\n@public\r\n@constant\r\ndef getToken(exchange: address) -> address:\r\n    return self.exchange_to_token[exchange]\r\n\r\n@public\r\n@constant\r\ndef getTokenWithId(token_id: uint256) -> address:\r\n    return self.id_to_token[token_id]",
	"ContractName": "Vyper_contract",
	"CompilerVersion": "vyper:0.1.0b4"
}