{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.7;\r\ncontract MobaBase {\r\n    address public owner = 0x0;\r\n    bool public isLock = false;\r\n    constructor ()  public  {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    event transferToOwnerEvent(uint256 price);\r\n    \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"only owner can call this function\");\r\n        _;\r\n    }\r\n    \r\n    modifier notLock {\r\n        require(isLock == false,\"contract current is lock status\");\r\n        _;\r\n    }\r\n    \r\n    modifier msgSendFilter() {\r\n        address addr = msg.sender;\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        require(size <= 0,\"address must is not contract\");\r\n        require(msg.sender == tx.origin, \"msg.sender must equipt tx.origin\");\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function transferToOwner()    \r\n    onlyOwner \r\n    msgSendFilter \r\n    public {\r\n        uint256 totalBalace = address(this).balance;\r\n        owner.transfer(totalBalace);\r\n        emit transferToOwnerEvent(totalBalace);\r\n    }\r\n    \r\n    function updateLock(bool b) onlyOwner public {\r\n        \r\n        require(isLock != b,\" updateLock new status == old status\");\r\n        isLock = b;\r\n    }\r\n    \r\n   \r\n}\r\n\r\ncontract IBRInviteData {\r\n    function GetAddressByName(bytes32 name) public view returns (address);\r\n}\r\ncontract IBRPerSellData {\r\n   function GetPerSellInfo(uint16 id) public view returns (uint16,uint256 price,bool isOver);\r\n}\r\n\r\ncontract BRPerSellControl is MobaBase {\r\n    \r\n    IBRInviteData public mInviteAddr;\r\n    IBRPerSellData public mPerSellData;\r\n    mapping (address => uint16[]) public mBuyList;\r\n\r\n    event updateIntefaceEvent();\r\n    event transferToOwnerEvent(uint256 price);\r\n    event buyPerSellEvent(uint16 perSellId,bytes32 name,uint256 price);\r\n    constructor(address inviteData, address perSellData) public {\r\n        mInviteAddr  = IBRInviteData(inviteData);\r\n        mPerSellData = IBRPerSellData(perSellData);\r\n    }\r\n    \r\n    function updateInteface(address inviteData, address perSellData) \r\n    onlyOwner \r\n    msgSendFilter \r\n    public {\r\n        mInviteAddr  = IBRInviteData(inviteData);\r\n        mPerSellData = IBRPerSellData(perSellData);\r\n        emit updateIntefaceEvent();\r\n    }\r\n    \r\n    function GetPerSellInfo(uint16 id) public view returns (uint16 pesellId,uint256 price,bool isOver) {\r\n        return mPerSellData.GetPerSellInfo(id);\r\n    }\r\n    \r\n    function buyPerSell(uint16 perSellId,bytes32 name) \r\n    notLock\r\n    msgSendFilter \r\n    payable public {\r\n        uint16 id; uint256 price; bool isOver;\r\n        (id,price,isOver) = mPerSellData.GetPerSellInfo(perSellId);\r\n        require(id == perSellId && id > 0,\"perSell.Id is error\"  );\r\n        require(msg.value == price,\"msg.value is error\");\r\n        require(isOver == false,\"persell is over status\");\r\n        \r\n        address inviteAddr = mInviteAddr.GetAddressByName(name);\r\n        if(inviteAddr != address(0)) {\r\n           uint giveToEth   = msg.value * 10 / 100;\r\n           inviteAddr.transfer(giveToEth);\r\n        }\r\n        mBuyList[msg.sender].push(id);\r\n        emit buyPerSellEvent(perSellId,name,price);\r\n    }\r\n    \r\n    function getBuyInfo(address addr) public view returns (uint16[]){\r\n        return mBuyList[addr];\r\n    }\r\n    \r\n\r\n}",
	"ContractName": "BRPerSellControl",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}