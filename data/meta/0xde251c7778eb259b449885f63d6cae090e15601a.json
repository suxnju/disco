{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\ncontract ERC20Interface {\r\n    function transfer(address to, uint256 tokens) public returns (bool success);\r\n}\r\n\r\ncontract Etheropoly {\r\n\r\n    function buy(address) public payable returns(uint256);\r\n    function transfer(address, uint256) public returns(bool);\r\n    function myTokens() public view returns(uint256);\r\n    function myDividends(bool) public view returns(uint256);\r\n    function reinvest() public;\r\n}\r\n\r\n/**\r\n * Definition of contract accepting Etheropoly tokens\r\n * Games, casinos, anything can reuse this contract to support Etheropoly tokens\r\n */\r\ncontract AcceptsEtheropoly {\r\n    Etheropoly public tokenContract;\r\n\r\n    function AcceptsEtheropoly(address _tokenContract) public {\r\n        tokenContract = Etheropoly(_tokenContract);\r\n    }\r\n\r\n    modifier onlyTokenContract {\r\n        require(msg.sender == address(tokenContract));\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Standard ERC677 function that will handle incoming token transfers.\r\n    *\r\n    * @param _from  Token sender address.\r\n    * @param _value Amount of tokens.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\r\n}\r\n\r\n// 50 Tokens, seeded market of 8640000000 Eggs\r\ncontract EtheropolyShrimpFarmer is AcceptsEtheropoly {\r\n    //uint256 EGGS_PER_SHRIMP_PER_SECOND=1;\r\n    uint256 public EGGS_TO_HATCH_1SHRIMP=86400;//for final version should be seconds in a day\r\n    uint256 public STARTING_SHRIMP=300;\r\n    uint256 PSN=10000;\r\n    uint256 PSNH=5000;\r\n    bool public initialized=false;\r\n    address public ceoAddress;\r\n    mapping (address => uint256) public hatcheryShrimp;\r\n    mapping (address => uint256) public claimedEggs;\r\n    mapping (address => uint256) public lastHatch;\r\n    mapping (address => address) public referrals;\r\n    uint256 public marketEggs;\r\n\r\n    function EtheropolyShrimpFarmer(address _baseContract)\r\n      AcceptsEtheropoly(_baseContract)\r\n      public{\r\n        ceoAddress=msg.sender;\r\n    }\r\n\r\n    /**\r\n     * Fallback function for the contract, protect investors\r\n     */\r\n    function() payable public {\r\n      /* revert(); */\r\n    }\r\n\r\n    /**\r\n    * Deposit Etheropoly tokens to buy eggs in farm\r\n    *\r\n    * @dev Standard ERC677 function that will handle incoming token transfers.\r\n    * @param _from  Token sender address.\r\n    * @param _value Amount of tokens.\r\n    * @param _data  Transaction metadata.\r\n    */\r\n    function tokenFallback(address _from, uint256 _value, bytes _data)\r\n      external\r\n      onlyTokenContract\r\n      returns (bool) {\r\n        require(initialized);\r\n        require(!_isContract(_from));\r\n        require(_value >= 1 finney); // 0.001 OPOLY token\r\n\r\n        uint256 EtheropolyBalance = tokenContract.myTokens();\r\n\r\n        uint256 eggsBought=calculateEggBuy(_value, SafeMath.sub(EtheropolyBalance, _value));\r\n        eggsBought=SafeMath.sub(eggsBought,devFee(eggsBought));\r\n        reinvest();\r\n        tokenContract.transfer(ceoAddress, devFee(_value));\r\n        claimedEggs[_from]=SafeMath.add(claimedEggs[_from],eggsBought);\r\n\r\n        return true;\r\n    }\r\n\r\n    function hatchEggs(address ref) public{\r\n        require(initialized);\r\n        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender){\r\n            referrals[msg.sender]=ref;\r\n        }\r\n        uint256 eggsUsed=getMyEggs();\r\n        uint256 newShrimp=SafeMath.div(eggsUsed,EGGS_TO_HATCH_1SHRIMP);\r\n        hatcheryShrimp[msg.sender]=SafeMath.add(hatcheryShrimp[msg.sender],newShrimp);\r\n        claimedEggs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n\r\n        //send referral eggs\r\n        claimedEggs[referrals[msg.sender]]=SafeMath.add(claimedEggs[referrals[msg.sender]],SafeMath.div(eggsUsed,5));\r\n\r\n        //boost market to nerf shrimp hoarding\r\n        marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,10));\r\n    }\r\n\r\n    function sellEggs() public{\r\n        require(initialized);\r\n        uint256 hasEggs=getMyEggs();\r\n        uint256 eggValue=calculateEggSell(hasEggs);\r\n        uint256 fee=devFee(eggValue);\r\n        claimedEggs[msg.sender]=0;\r\n        lastHatch[msg.sender]=now;\r\n        marketEggs=SafeMath.add(marketEggs,hasEggs);\r\n        reinvest();\r\n        tokenContract.transfer(ceoAddress, fee);\r\n        tokenContract.transfer(msg.sender, SafeMath.sub(eggValue,fee));\r\n    }\r\n\r\n    // Dev should initially seed the game before start\r\n    function seedMarket(uint256 eggs) public {\r\n        require(marketEggs==0);\r\n        require(msg.sender==ceoAddress); // only CEO can seed the market\r\n        initialized=true;\r\n        marketEggs=eggs;\r\n    }\r\n\r\n    // Reinvest Etheropoly Shrimp Farm dividends\r\n    // All the dividends this contract makes will be used to grow token fund for players\r\n    // of the Etheropoly Schrimp Farm\r\n    function reinvest() public {\r\n       if(tokenContract.myDividends(true) > 1) {\r\n         tokenContract.reinvest();\r\n       }\r\n    }\r\n\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n\r\n    // Calculate trade to sell eggs\r\n    function calculateEggSell(uint256 eggs) public view returns(uint256){\r\n        return calculateTrade(eggs,marketEggs, tokenContract.myTokens());\r\n    }\r\n\r\n    // Calculate trade to buy eggs\r\n    function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth, contractBalance, marketEggs);\r\n    }\r\n\r\n    // Calculate eggs to buy simple\r\n    function calculateEggBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateEggBuy(eth, tokenContract.myTokens());\r\n    }\r\n\r\n    // Calculate dev fee in game\r\n    function devFee(uint256 amount) public view returns(uint256){\r\n        return SafeMath.div(SafeMath.mul(amount,4),100);\r\n    }\r\n\r\n    // Get amount of Shrimps user has\r\n    function getMyShrimp() public view returns(uint256){\r\n        return hatcheryShrimp[msg.sender];\r\n    }\r\n\r\n    // Get amount of eggs of current user\r\n    function getMyEggs() public view returns(uint256){\r\n        return SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));\r\n    }\r\n\r\n    // Get number of doges since last hatch\r\n    function getEggsSinceLastHatch(address adr) public view returns(uint256){\r\n        uint256 secondsPassed=min(EGGS_TO_HATCH_1SHRIMP,SafeMath.sub(now,lastHatch[adr]));\r\n        return SafeMath.mul(secondsPassed,hatcheryShrimp[adr]);\r\n    }\r\n\r\n    // Collect information about doge farm dividents amount\r\n    function getContractDividends() public view returns(uint256) {\r\n      return tokenContract.myDividends(true); // + this.balance;\r\n    }\r\n\r\n    // Get tokens balance of the doge farm\r\n    function getBalance() public view returns(uint256){\r\n        return tokenContract.myTokens();\r\n    }\r\n\r\n    // Check transaction coming from the contract or not\r\n    function _isContract(address _user) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(_user) }\r\n        return size > 0;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}",
	"ContractName": "EtheropolyShrimpFarmer",
	"CompilerVersion": "v0.4.21+commit.dfe3193c"
}