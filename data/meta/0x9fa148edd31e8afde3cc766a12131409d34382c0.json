{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.19;\r\n\r\ncontract MINTY {\r\n    string public name = 'MINTY';\r\n    string public symbol = 'MINTY';\r\n    uint8 public decimals = 18;\r\n    uint public totalSupply = 10000000000000000000000000;\r\n    uint public minted = totalSupply / 5;\r\n    uint public minReward = 1000000000000000000;\r\n    uint public fee = 700000000000000;\r\n    uint public reducer = 1000;\r\n    uint private randomNumber;\r\n    address public owner;\r\n    uint private ownerBalance;\r\n    \r\n    /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => uint256) public successesOf;\r\n    mapping (address => uint256) public failsOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    modifier onlyOwner {\r\n        if (msg.sender != owner) revert();\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) external onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n    \r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function MINTY() public {\r\n        owner = msg.sender;\r\n        balanceOf[owner] = minted;\r\n        balanceOf[this] = totalSupply - balanceOf[owner];\r\n    }\r\n    \r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(_to != 0x0);\r\n        require(balanceOf[_from] >= _value);\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        balanceOf[_from] -= _value;\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n    \r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) external {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n    \r\n    /* Transfer tokens from other address */\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    /* Set allowance for other address */\r\n    function approve(address _spender, uint256 _value) external returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n    \r\n    function withdrawEther() external onlyOwner {\r\n        owner.transfer(ownerBalance);\r\n        ownerBalance = 0;\r\n    }\r\n    \r\n    function () external payable {\r\n        if (msg.value == fee) {\r\n            randomNumber += block.timestamp + uint(msg.sender);\r\n            uint minedAtBlock = uint(block.blockhash(block.number - 1));\r\n            uint minedHashRel = uint(sha256(minedAtBlock + randomNumber + uint(msg.sender))) % 10000000;\r\n            uint balanceRel = balanceOf[msg.sender] * 1000 / minted;\r\n            if (balanceRel >= 1) {\r\n                if (balanceRel > 255) {\r\n                    balanceRel = 255;\r\n                }\r\n                balanceRel = 2 ** balanceRel;\r\n                balanceRel = 5000000 / balanceRel;\r\n                balanceRel = 5000000 - balanceRel;\r\n                if (minedHashRel < balanceRel) {\r\n                    uint reward = minReward + minedHashRel * 1000 / reducer * 100000000000000;\r\n                    _transfer(this, msg.sender, reward);\r\n                    minted += reward;\r\n                    successesOf[msg.sender]++;\r\n                } else {\r\n                    Transfer(this, msg.sender, 0);\r\n                    failsOf[msg.sender]++;\r\n                }\r\n                ownerBalance += fee;\r\n                reducer++;\r\n            } else {\r\n                revert();\r\n            }\r\n        } else {\r\n            revert();\r\n        }\r\n    }\r\n}",
	"ContractName": "MINTY",
	"CompilerVersion": "v0.4.19+commit.c4cbbb05"
}