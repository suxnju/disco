{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address internal _owner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @return the address of the owner.\r\n   */\r\n  function owner() public view returns(address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner());\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @return true if `msg.sender` is the owner of the contract.\r\n   */\r\n  function isOwner() public view returns(bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract HYPRO is Ownable{\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) public investedETH;\r\n    mapping (address => uint256) public lastInvest;\r\n    mapping (address => uint256) public lastWithdraw;\r\n    \r\n    mapping (address => uint256) public affiliateCommision;\r\n    \r\n    address public dev = address(0x0C513b1DA33446a15bD4afb5561Ac3d5B1CB84EE);\r\n    address public promoter1 = address(0x1b4360A5E654280fCd0149829Dc88cb4b4f06556);\r\n    address public promoter2 = address(0x6D990AD82d60Aafec9b193eC2E43CcAe7a514F59);\r\n    address public promoter3 = address(0x1ff0059F0173FE3484e51DD483049073Ad444647);\r\n    address public promoter4 = address(0xeC886efC31415b7C93030CD07cCb9592953eF6de);\r\n    address public promoter5 = address(0x0D54F6Ff455e9C4D54e5ad4F0D2aD9b8356fb625);\r\n    address public promoter6 = address(0x1Ca4F7Be21270da59C0BD806888A82583Ae48511);\r\n    \r\n    address public lastPotWinner;\r\n    \r\n    uint256 public pot = 0;\r\n    uint256 public maxpot = 2000000000000000000;\r\n    uint256 public launchtime = 1555164000;\r\n    uint256 public maxwithdraw = SafeMath.div(87, 10);\r\n    uint256 maxprofit = SafeMath.div(20, 10);\r\n   \r\n    \r\n    \r\n    event PotWinner(address indexed beneficiary, uint256 amount );\r\n    \r\n    constructor () public {\r\n        _owner = address(0x0C513b1DA33446a15bD4afb5561Ac3d5B1CB84EE);\r\n    }\r\n    \r\n    \r\n      mapping(address => uint256) public userWithdrawals;\r\n    mapping(address => uint256[]) public userSequentialDeposits;\r\n    \r\n    function maximumProfitUser() public view returns(uint256){ \r\n        return getInvested() * maxprofit;\r\n    }\r\n    \r\n    function getTotalNumberOfDeposits() public view returns(uint256){\r\n        return userSequentialDeposits[msg.sender].length;\r\n    }\r\n    \r\n    function() public payable{ }\r\n    \r\n    \r\n    \r\n      function investETH(address referral) public payable {\r\n      require(now >= launchtime);\r\n      require(msg.value >= 0.4 ether);\r\n      uint256 timelimit = SafeMath.sub(now, launchtime);\r\n      \r\n      \r\n      if(timelimit < 1296000 && getProfit(msg.sender) > 0){\r\n          reinvestProfit();\r\n        }\r\n        \r\n      if(timelimit > 1296000 && getProfit(msg.sender) > 0){\r\n            \r\n             uint256 profit = getProfit(msg.sender);\r\n             lastInvest[msg.sender] = now;\r\n             lastWithdraw[msg.sender] = now;\r\n             userWithdrawals[msg.sender] += profit;\r\n             msg.sender.transfer(profit);\r\n \r\n           \r\n        }\r\n       \r\n        \r\n        amount = msg.value;\r\n        uint256 commision = amount.mul(7).div(100);\r\n        uint256 commision1 = amount.mul(3).div(100);\r\n        uint256 commision2 = amount.mul(2).div(100);\r\n        uint256 _pot = amount.mul(3).div(100);\r\n        pot = pot.add(_pot);\r\n        uint256 amount = amount;\r\n        \r\n        \r\n        dev.transfer(commision1);\r\n        promoter1.transfer(commision1);\r\n        promoter2.transfer(commision1);\r\n        promoter3.transfer(commision1);\r\n        promoter4.transfer(commision1);\r\n        promoter5.transfer(commision1);\r\n        promoter6.transfer(commision2);\r\n       \r\n        \r\n        if(referral != msg.sender && referral != 0x1 && referral != promoter1 && referral != promoter2  && referral != promoter3  && referral != promoter4  && referral != promoter5  && referral != promoter6){\r\n            affiliateCommision[referral] = SafeMath.add(affiliateCommision[referral], commision);\r\n        }\r\n        \r\n        \r\n        \r\n        \r\n        investedETH[msg.sender] = investedETH[msg.sender].add(amount);\r\n        lastInvest[msg.sender] = now;\r\n        userSequentialDeposits[msg.sender].push(amount);\r\n        if(pot >= maxpot){\r\n            uint256 winningReward = pot;\r\n            msg.sender.transfer(winningReward);\r\n            lastPotWinner = msg.sender;\r\n            emit PotWinner(msg.sender, winningReward);\r\n            pot = 0;\r\n             }\r\n       \r\n    }\r\n    \r\n \r\n    \r\n    function withdraw() public{\r\n        uint256 profit = getProfit(msg.sender);\r\n        uint256 timelimit = SafeMath.sub(now, launchtime);\r\n        uint256 maximumProfit = maximumProfitUser();\r\n        uint256 availableProfit = maximumProfit - userWithdrawals[msg.sender];\r\n        uint256 maxwithdrawlimit = SafeMath.div(SafeMath.mul(maxwithdraw, investedETH[msg.sender]), 100);\r\n       \r\n\r\n        require(profit > 0);\r\n        require(timelimit >= 1296000);//15 days\r\n       \r\n        lastInvest[msg.sender] = now;\r\n        lastWithdraw[msg.sender] = now;\r\n       \r\n       \r\n       \r\n        if(profit < availableProfit){\r\n        \r\n        if(profit < maxwithdrawlimit){\r\n        userWithdrawals[msg.sender] += profit;\r\n        msg.sender.transfer(profit);\r\n        }\r\n        else if(profit >= maxwithdrawlimit){\r\n        uint256 PartPayment = maxwithdrawlimit;\r\n        uint256 finalprofit = SafeMath.sub(profit, PartPayment);\r\n        userWithdrawals[msg.sender] += profit;\r\n        msg.sender.transfer(PartPayment);\r\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], finalprofit);\r\n        } \r\n          \r\n        }\r\n        \r\n        else if(profit >= availableProfit && userWithdrawals[msg.sender] < maximumProfit){\r\n            uint256 finalPartialPayment = availableProfit;\r\n            if(finalPartialPayment < maxwithdrawlimit){\r\n            userWithdrawals[msg.sender] = 0;\r\n            investedETH[msg.sender] = 0;\r\n            delete userSequentialDeposits[msg.sender];\r\n            msg.sender.transfer(finalPartialPayment);\r\n            }\r\n             else if(finalPartialPayment >= maxwithdrawlimit){\r\n             \r\n        uint256 finalPartPayment = maxwithdrawlimit;\r\n        uint256 finalprofits = SafeMath.sub(finalPartialPayment, finalPartPayment);\r\n        userWithdrawals[msg.sender] += finalPartialPayment;\r\n        msg.sender.transfer(finalPartPayment);\r\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], finalprofits);\r\n        \r\n        \r\n             }\r\n        }\r\n    \r\n        \r\n    }\r\n   \r\n    function getProfitFromSender() public view returns(uint256){\r\n        return getProfit(msg.sender);\r\n    }\r\n\r\n    function getProfit(address customer) public view returns(uint256){\r\n        uint256 secondsPassed = SafeMath.sub(now, lastInvest[customer]);\r\n        uint256 profit = SafeMath.div(SafeMath.mul(secondsPassed, investedETH[customer]), 1234440);\r\n        uint256 maximumProfit = maximumProfitUser();\r\n        uint256 availableProfit = maximumProfit - userWithdrawals[msg.sender];\r\n\r\n        if(profit > availableProfit && userWithdrawals[msg.sender] < maximumProfit){\r\n            profit = availableProfit;\r\n        }\r\n        \r\n        uint256 bonus = getBonus();\r\n        if(bonus == 0){\r\n            return profit;\r\n        }\r\n        return SafeMath.add(profit, SafeMath.div(SafeMath.mul(profit, bonus), 100));\r\n    }\r\n    \r\n    function getBonus() public view returns(uint256){\r\n        uint256 invested = getInvested();\r\n        if(invested >= 0.5 ether && 4 ether >= invested){\r\n            return 0;\r\n        }else if(invested >= 4.01 ether && 7 ether >= invested){\r\n            return 20;\r\n        }else if(invested >= 7.01 ether && 10 ether >= invested){\r\n            return 40;\r\n        }else if(invested >= 10.01 ether && 15 ether >= invested){\r\n            return 60;\r\n        }else if(invested >= 15.01 ether){\r\n            return 99;\r\n        }\r\n    }\r\n    \r\n    function reinvestProfit() public {\r\n        uint256 profit = getProfit(msg.sender);\r\n        require(profit > 0);\r\n        lastInvest[msg.sender] = now;\r\n        userWithdrawals[msg.sender] += profit;\r\n        investedETH[msg.sender] = SafeMath.add(investedETH[msg.sender], profit);\r\n    } \r\n \r\n   \r\n    function getAffiliateCommision() public view returns(uint256){\r\n        return affiliateCommision[msg.sender];\r\n    }\r\n    \r\n    function withdrawAffiliateCommision() public {\r\n        require(affiliateCommision[msg.sender] > 0);\r\n        uint256 commision = affiliateCommision[msg.sender];\r\n        affiliateCommision[msg.sender] = 0;\r\n        msg.sender.transfer(commision);\r\n    }\r\n    \r\n    function getInvested() public view returns(uint256){\r\n        return investedETH[msg.sender];\r\n    }\r\n    \r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n    \r\n    function max(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n    \r\n    function updatePromoter1(address _address) external onlyOwner {\r\n        require(_address != address(0x0));\r\n        promoter1 = _address;\r\n    }\r\n    \r\n    function updatePromoter2(address _address) external onlyOwner {\r\n        require(_address != address(0x0));\r\n        promoter2 = _address;\r\n    }\r\n    \r\n    function updatePromoter3(address _address) external onlyOwner {\r\n        require(_address != address(0x0));\r\n        promoter3 = _address;\r\n    }\r\n    \r\n     function updatePromoter4(address _address) external onlyOwner {\r\n        require(_address != address(0x0));\r\n        promoter4 = _address;\r\n    }\r\n    \r\n     function updatePromoter5(address _address) external onlyOwner {\r\n        require(_address != address(0x0));\r\n        promoter5 = _address;\r\n    }\r\n    \r\n     function updatePromoter6(address _address) external onlyOwner {\r\n        require(_address != address(0x0));\r\n        promoter6 = _address;\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n     function updateMaxpot(uint256 _Maxpot) external onlyOwner {\r\n        maxpot = _Maxpot;\r\n    }\r\n    \r\n     function updateLaunchtime(uint256 _Launchtime) external onlyOwner {\r\n        launchtime = _Launchtime;\r\n    }\r\n   \r\n\r\n \r\n    \r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}",
	"ContractName": "HYPRO",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}