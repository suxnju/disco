{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.15;\r\n\r\ncontract etherDelta {\r\n    function deposit() payable;\r\n    function withdraw(uint amount);\r\n    function depositToken(address token, uint amount);\r\n    function withdrawToken(address token, uint amount);\r\n    function balanceOf(address token, address user) constant returns (uint);\r\n    function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce);\r\n    function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount);\r\n    function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) private;\r\n    function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) constant returns(uint);\r\n    function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) constant returns(uint);\r\n    function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s);\r\n}\r\n\r\ncontract Token {\r\n    function totalSupply() constant returns (uint256 supply);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n    function balanceOf(address _owner) constant returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\n\r\ncontract TradersWallet {\r\n    \r\n    address public owner;\r\n    string public version;\r\n    etherDelta private ethDelta;\r\n    address public ethDeltaDepositAddress;\r\n    \r\n    // init the TradersWallet()\r\n    function TradersWallet() {\r\n        owner = msg.sender;\r\n        version = \"ALPHA 0.1\";\r\n        ethDeltaDepositAddress = 0x8d12A197cB00D4747a1fe03395095ce2A5CC6819;\r\n        ethDelta = etherDelta(ethDeltaDepositAddress);\r\n    }\r\n    \r\n    // default function\r\n    function() payable {\r\n        \r\n    }\r\n    \r\n    // standard erc20 token balance in wallet from specific token address\r\n    function tokenBalance(address tokenAddress) constant returns (uint) {\r\n        Token token = Token(tokenAddress);\r\n        return token.balanceOf(this);\r\n    }\r\n    \r\n    // standard erc20 transferFrom function\r\n    function transferFromToken(address tokenAddress, address sendTo, address sendFrom, uint256 amount) external {\r\n        require(msg.sender==owner);\r\n        Token token = Token(tokenAddress);\r\n        token.transferFrom(sendTo, sendFrom, amount);\r\n    }\r\n    \r\n    // change owner this this trader wallet\r\n    function changeOwner(address newOwner) external {\r\n        require(msg.sender==owner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n    // send ether to another wallet\r\n    function sendEther(address toAddress, uint amount) external {\r\n        require(msg.sender==owner);\r\n        toAddress.transfer(amount);\r\n    }\r\n    \r\n    // standard erc20 transfer/send function\r\n    function sendToken(address tokenAddress, address sendTo, uint256 amount) external {\r\n        require(msg.sender==owner);\r\n        Token token = Token(tokenAddress);\r\n        token.transfer(sendTo, amount);\r\n    }\r\n    \r\n    // let the owner execute with data\r\n    function execute(address _to, uint _value, bytes _data) external returns (bytes32 _r) {\r\n        require(msg.sender==owner);\r\n        require(_to.call.value(_value)(_data));\r\n        return 0;\r\n    }\r\n    \r\n    // get ether delta token balance from token address\r\n    function EtherDeltaTokenBalance(address tokenAddress) constant returns (uint) {\r\n        return ethDelta.balanceOf(tokenAddress, this);\r\n    }\r\n    \r\n    // withdraw a token from etherdelta\r\n    function EtherDeltaWithdrawToken(address tokenAddress, uint amount) payable external {\r\n        require(msg.sender==owner);\r\n        ethDelta.withdrawToken(tokenAddress, amount);\r\n    }\r\n    \r\n    // change etherdelta exchange address\r\n    function changeEtherDeltaDeposit(address newEthDelta) external {\r\n        require(msg.sender==owner);\r\n        ethDeltaDepositAddress = newEthDelta;\r\n        ethDelta = etherDelta(newEthDelta);\r\n    }\r\n    \r\n    // deposit tokens to etherdelta\r\n    function EtherDeltaDepositToken(address tokenAddress, uint amount) payable external {\r\n        require(msg.sender==owner);\r\n        ethDelta.depositToken(tokenAddress, amount);\r\n    }\r\n    \r\n    // approve etherdelta to take take a specific amount\r\n    function EtherDeltaApproveToken(address tokenAddress, uint amount) payable external {\r\n        require(msg.sender==owner);\r\n        Token token = Token(tokenAddress);\r\n        token.approve(ethDeltaDepositAddress, amount);\r\n    }\r\n    \r\n    // deposit ether to etherdelta\r\n    function EtherDeltaDeposit(uint amount) payable external {\r\n        require(msg.sender==owner);\r\n        ethDelta.deposit.value(amount)();\r\n    }\r\n    \r\n    // withdraw ether from etherdelta\r\n    function EtherDeltaWithdraw(uint amount) external {\r\n        require(msg.sender==owner);\r\n        ethDelta.withdraw(amount);\r\n    }\r\n    \r\n    // destroy this wallet and send all ether to sender\r\n    // THIS DOES NOT INCLUDE ERC20 TOKENS\r\n    function kill() {\r\n        require(msg.sender==owner);\r\n        suicide(msg.sender);\r\n    }\r\n    \r\n}",
	"ContractName": "TradersWallet",
	"CompilerVersion": "v0.4.15+commit.bbb8e64f"
}