{
	"Language": "Vyper",
	"Source": "from vyper.interfaces import ERC721\r\n\r\nimplements: ERC721\r\n\r\ncontract ERC721Receiver:\r\n\tdef onERC721Received(_operator: address, _from: address, _tokenId: uint256, _data: bytes[1024]) -> bytes32: modifying\r\n\r\ncontract ERC20:\r\n\tdef transfer(_to: address, _value: uint256) -> bool: modifying\r\n\tdef burn(_value: uint256): modifying\r\n\r\nTransfer: event({_from: indexed(address), _to: indexed(address), _tokenId: indexed(uint256)})\r\nApproval: event({_owner: indexed(address), _approved: indexed(address), _tokenId: indexed(uint256)})\r\nApprovalForAll: event({_owner: indexed(address), _operator: indexed(address), _approved: bool})\r\nImmutable_IPFS_SHA3_256: event({_from: indexed(address), _hash: bytes[64], _tokenId: indexed(uint256)})\r\nMutable_IPFS_SHA3_256: event({_from: indexed(address), _hash: bytes[64], _tokenId: indexed(uint256)})\r\n\r\nname: public(string[64])\r\nsymbol: public(string[32])\r\ntokenURI: public(string[64])\r\nidToOwner: map(uint256, address)\r\nidToApprovals: map(uint256, address)\r\nidToImmutableIPFS_SHA3_256: map(uint256, bytes[64])\r\nidToMutableIPFS_SHA3_256: map(uint256, bytes[64])\r\nidToValuation: map(uint256, uint256)\r\nimmutableHashToId: map(bytes[64], uint256)\r\nownerIdxToTokenId: map(address, map(uint256, uint256))\r\nownerToNFTokenCount: map(address, uint256)\r\nownerToOperators: map(address, map(address, bool))\r\nsupportedInterfaces: map(bytes32, bool)\r\nERC165_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000001ffc9a7\r\nERC721_INTERFACE_ID: constant(bytes32) = 0x0000000000000000000000000000000000000000000000000000000080ac58cd\r\nERC20_ADDRESS: constant(address) = 0x64D56f087d87CdaeaC8119C69c48D0d440D560a7\r\npayment_address: address\r\nnonce: uint256\r\ntotal_supply: uint256\r\n\r\n@public\r\ndef __init__(_name: string[64], _symbol: string[32], _tokenURI: string[64]):\r\n\tself.supportedInterfaces[ERC165_INTERFACE_ID] = True\r\n\tself.supportedInterfaces[ERC721_INTERFACE_ID] = True\r\n\tself.payment_address = msg.sender\r\n\tself.name = _name\r\n\tself.symbol = _symbol\r\n\tself.tokenURI = _tokenURI\r\n\r\n@public\r\n@constant\r\ndef totalSupply() -> uint256:\r\n\treturn self.total_supply\r\n\r\n@public\r\n@constant\r\ndef supportsInterface(_interfaceID: bytes32) -> bool:\r\n\treturn self.supportedInterfaces[_interfaceID]\r\n\r\n@public\r\n@constant\r\ndef balanceOf(_owner: address) -> uint256:\r\n\tassert _owner != ZERO_ADDRESS\r\n\treturn self.ownerToNFTokenCount[_owner]\r\n\r\n@public\r\n@constant\r\ndef ownerOf(_tokenId: uint256) -> address:\r\n\towner: address = self.idToOwner[_tokenId]\r\n\tassert owner != ZERO_ADDRESS\r\n\treturn owner\r\n\r\n@public\r\n@constant\r\ndef tokenByIndex(_index: uint256) -> uint256:\r\n\tassert _index < self.total_supply\r\n\treturn _index\r\n\r\n@public\r\n@constant\r\ndef tokenOfOwnerByIndex(_owner: address, _index: uint256) -> uint256:\r\n\tassert _owner != ZERO_ADDRESS\r\n\tassert _index < self.ownerToNFTokenCount[_owner]\r\n\treturn self.ownerIdxToTokenId[_owner][_index]\r\n\r\n@public\r\n@constant\r\ndef getApproved(_tokenId: uint256) -> address:\r\n\tassert self.idToOwner[_tokenId] != ZERO_ADDRESS\r\n\treturn self.idToApprovals[_tokenId]\r\n\r\n@public\r\n@constant\r\ndef getValuation(_tokenId: uint256) -> uint256:\r\n\tassert self.idToOwner[_tokenId] != ZERO_ADDRESS\r\n\treturn self.idToValuation[_tokenId]\r\n\r\n@public\r\n@constant\r\ndef getImmutableHashOf(_tokenId: uint256) -> bytes[64]:\r\n\towner: address = self.idToOwner[_tokenId]\r\n\tassert owner != ZERO_ADDRESS\r\n\treturn self.idToImmutableIPFS_SHA3_256[_tokenId]\r\n\r\n@public\r\n@constant\r\ndef getMutableHashOf(_tokenId: uint256) -> bytes[64]:\r\n\towner: address = self.idToOwner[_tokenId]\r\n\tassert owner != ZERO_ADDRESS\r\n\treturn self.idToMutableIPFS_SHA3_256[_tokenId]\r\n\r\n@public\r\n@constant\r\ndef isApprovedForAll(_owner: address, _operator: address) -> bool:\r\n\treturn (self.ownerToOperators[_owner])[_operator]\r\n\r\n@private\r\n@constant\r\ndef _isApprovedOrOwner(_spender: address, _tokenId: uint256) -> bool:\r\n\towner: address = self.idToOwner[_tokenId]\r\n\tspenderIsOwner: bool = owner == _spender\r\n\tspenderIsApproved: bool = _spender == self.idToApprovals[_tokenId]\r\n\tspenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[_spender]\r\n\treturn (spenderIsOwner or spenderIsApproved) or spenderIsApprovedForAll\r\n\r\n@private\r\ndef _addTokenTo(_to: address, _tokenId: uint256):\r\n\tassert self.idToOwner[_tokenId] == ZERO_ADDRESS\r\n\tself.idToOwner[_tokenId] = _to\r\n\tself.ownerIdxToTokenId[_to][self.ownerToNFTokenCount[_to]] = _tokenId\r\n\tself.ownerToNFTokenCount[_to] += 1\r\n\r\n@private\r\ndef _removeTokenFrom(_from: address, _tokenId: uint256):\r\n\tassert self.idToOwner[_tokenId] == _from\r\n\tself.idToOwner[_tokenId] = ZERO_ADDRESS\r\n\tself.ownerToNFTokenCount[_from] -= 1\r\n\r\n@private\r\ndef _clearApproval(_owner: address, _tokenId: uint256):\r\n\tassert self.idToOwner[_tokenId] == _owner\r\n\tif self.idToApprovals[_tokenId] != ZERO_ADDRESS:\r\n\t\tself.idToApprovals[_tokenId] = ZERO_ADDRESS\r\n\r\n@private\r\ndef _transferFrom(_from: address, _to: address, _tokenId: uint256, _sender: address):\r\n\tassert self._isApprovedOrOwner(_sender, _tokenId)\r\n\tassert _to != ZERO_ADDRESS\r\n\tself._clearApproval(_from, _tokenId)\r\n\tself._removeTokenFrom(_from, _tokenId)\r\n\tself._addTokenTo(_to, _tokenId)\r\n\tlog.Transfer(_from, _to, _tokenId)\r\n\r\n@public\r\ndef transferFrom(_from: address, _to: address, _tokenId: uint256):\r\n\tself._transferFrom(_from, _to, _tokenId, msg.sender)\r\n\r\n@public\r\ndef safeTransferFrom(_from: address, _to: address, _tokenId: uint256, _data: bytes[1024]=\"\"):\r\n\tself._transferFrom(_from, _to, _tokenId, msg.sender)\r\n\tif _to.is_contract:\r\n\t\treturnValue: bytes32 = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data)\r\n\t\tassert returnValue == method_id(\"onERC721Received(address,address,uint256,bytes)\", bytes32)\r\n\r\n@public\r\ndef approve(_approved: address, _tokenId: uint256):\r\n\towner: address = self.idToOwner[_tokenId]\r\n\tassert owner != ZERO_ADDRESS\r\n\tassert _approved != owner\r\n\tsenderIsOwner: bool = self.idToOwner[_tokenId] == msg.sender\r\n\tsenderIsApprovedForAll: bool = (self.ownerToOperators[owner])[msg.sender]\r\n\tassert (senderIsOwner or senderIsApprovedForAll)\r\n\tself.idToApprovals[_tokenId] = _approved\r\n\tlog.Approval(owner, _approved, _tokenId)\r\n\r\n@public\r\ndef setApprovalForAll(_operator: address, _approved: bool):\r\n\tassert _operator != msg.sender\r\n\tself.ownerToOperators[msg.sender][_operator] = _approved\r\n\tlog.ApprovalForAll(msg.sender, _operator, _approved)\r\n\r\n@public\r\ndef setImmutableHash(_hash: bytes[64], _tokenId: uint256):\r\n\tassert self.idToOwner[_tokenId] == msg.sender\r\n\tassert _hash != ''\r\n\tassert self.idToMutableIPFS_SHA3_256[_tokenId] == ''\r\n\tassert self.immutableHashToId[_hash] == 0\r\n\tself.idToMutableIPFS_SHA3_256[_tokenId] = _hash\r\n\tlog.Mutable_IPFS_SHA3_256(msg.sender, _hash, _tokenId)\r\n\r\n@public\r\ndef setMutableHash(_hash: bytes[64], _tokenId: uint256):\r\n\tassert self.idToOwner[_tokenId] == msg.sender\r\n\tassert _hash != ''\r\n\tself.idToMutableIPFS_SHA3_256[_tokenId] = _hash\r\n\tlog.Mutable_IPFS_SHA3_256(msg.sender, _hash, _tokenId)\r\n\r\n@public\r\ndef updateTokenURI(_tokenURI: string[64]):\r\n\tassert msg.sender == self.payment_address\r\n\tself.tokenURI = _tokenURI\r\n\r\n@public\r\ndef onERC20Received(_from: address, _value: uint256) -> bytes32:\r\n\tassert msg.sender == ERC20_ADDRESS\r\n\tassert _value >= 20\r\n\r\n\tfee: uint256 = _value / 20\r\n\tvaluation: uint256 = _value - fee\r\n\tdidPayFee: bool = ERC20(ERC20_ADDRESS).transfer(self.payment_address, fee)\r\n\tERC20(ERC20_ADDRESS).burn(fee)\r\n\tassert didPayFee\r\n\r\n\tself.idToValuation[self.nonce] = valuation\r\n\tself._addTokenTo(_from, self.nonce)\r\n\tself.nonce += 1\r\n\tself.total_supply += 1\r\n\r\n\treturn method_id(\"onERC20Received(address,uint256)\", bytes32)",
	"ContractName": "Vyper_contract",
	"CompilerVersion": "vyper:0.1.0b16"
}