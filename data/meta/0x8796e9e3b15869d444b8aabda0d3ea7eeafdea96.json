{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.7;\r\ncontract MobaBase {\r\n    address public owner = 0x0;\r\n    bool public isLock = false;\r\n    constructor ()  public  {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    event transferToOwnerEvent(uint256 price);\r\n       \r\n    modifier onlyOwner {\r\n        require(msg.sender == owner,\"only owner can call this function\");\r\n        _;\r\n    }\r\n    \r\n    modifier notLock {\r\n        require(isLock == false,\"contract current is lock status\");\r\n        _;\r\n    }\r\n    \r\n    modifier msgSendFilter() {\r\n        address addr = msg.sender;\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        require(size <= 0,\"address must is not contract\");\r\n        require(msg.sender == tx.origin, \"msg.sender must equipt tx.origin\");\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        if (newOwner != address(0)) {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    function updateLock(bool b) onlyOwner public {\r\n        \r\n        require(isLock != b,\" updateLock new status == old status\");\r\n        isLock = b;\r\n    }\r\n    \r\n    function transferToOwner()    \r\n    onlyOwner \r\n    msgSendFilter \r\n    public {\r\n        uint256 totalBalace = address(this).balance;\r\n        owner.transfer(totalBalace);\r\n        emit transferToOwnerEvent(totalBalace);\r\n    }\r\n}\r\n\r\ncontract IOldInviteData{\r\n    \r\n    function checkUp(address addr,bytes32 name) public view returns (uint8);\r\n    function GetAddressByName(bytes32 name) public view returns (address);\r\n    function m_addrToName(address addr) public view returns (bytes32 name);\r\n        \r\n}\r\ncontract BRMobaInviteData is MobaBase {\r\n   \r\n    address owner = 0x0;\r\n    uint256 price = 10 finney;\r\n    mapping(bytes32 => address) public m_nameToAddr;\r\n    mapping(address => bytes32) public m_addrToName;\r\n    IOldInviteData public oldInviteAddr;\r\n    \r\n    constructor(IOldInviteData oldAddr) public {\r\n        oldInviteAddr = IOldInviteData(oldAddr);\r\n    }\r\n    event createInviteNameEvent(address addr,bytes32 name);\r\n    \r\n    function createInviteName(bytes32 name) \r\n    notLock \r\n    msgSendFilter\r\n    public payable {\r\n        require(msg.value == price);\r\n        require(checkUp(msg.sender,name) == 0,\"current name has been used or current address has been one name\"); \r\n        m_nameToAddr[name] = msg.sender;\r\n        m_addrToName[msg.sender] = name;\r\n        emit createInviteNameEvent(msg.sender,name);\r\n    }\r\n    \r\n    function checkUp(address addr,bytes32 name) public view returns (uint8) {\r\n        if(m_nameToAddr[name] != address(0)) {\r\n            return 1;\r\n        }\r\n        if ( m_addrToName[addr] != 0){\r\n            return 2;\r\n        }\r\n        uint8  oldResult = oldInviteAddr.checkUp(addr,name);\r\n        if(oldResult != 0) {\r\n             return oldResult;\r\n        }\r\n        return 0;\r\n    }\r\n    \r\n    function GetAddressByName(bytes32 name) public view returns (address){\r\n        address oldAddr =  oldInviteAddr.GetAddressByName(name);\r\n        if(oldAddr != address(0)) {\r\n            return oldAddr;\r\n        }\r\n        return m_nameToAddr[name];\r\n    }\r\n    \r\n     function GetNameByAddr(address addr) public view returns (bytes32 name){\r\n        bytes32 oldName =  oldInviteAddr.m_addrToName(addr);\r\n        if(oldName != 0) {\r\n            return oldName;\r\n        }\r\n        return m_addrToName[addr];\r\n    }\r\n}",
	"ContractName": "BRMobaInviteData",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}