{
	"Language": "Solidity",
	"Source": "// File: contracts/refund/IAlphaJobsManager.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\ncontract IAlphaJobsManager {\r\n    function broadcasters(address _broadcaster) public view returns (uint256 deposit, uint256 withdrawBlock);\r\n}\r\n\r\n// File: contracts/refund/Refunder.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\ncontract Refunder {\r\n    // Reference to alpha JobsManager\r\n    IAlphaJobsManager public alphaJobsManager;\r\n\r\n    // Keeps track of addresses that have withdrawn their refund\r\n    mapping (address => bool) public withdrawn;\r\n\r\n    event FundsReceived(address from, uint256 amount);\r\n    event RefundWithdrawn(address indexed addr, uint256 amount);\r\n\r\n    /**\r\n     * @notice Refunder constructor\r\n     * @param _alphaJobsManagerAddr Address of alpha JobsManager\r\n     */\r\n    constructor(address _alphaJobsManagerAddr) public {\r\n        alphaJobsManager = IAlphaJobsManager(_alphaJobsManagerAddr);\r\n    }\r\n\r\n    /**\r\n     * @dev Receive and log receipt of ETH\r\n     */\r\n    function() external payable {\r\n        emit FundsReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws the alpha JobsManager refund for the given address\r\n     * @param _addr The address to withdraw for\r\n     */\r\n    function withdraw(address payable _addr) external {\r\n        require(\r\n            !withdrawn[_addr],\r\n            \"address has already withdrawn alpha JobsManager refund\"\r\n        );\r\n\r\n        (uint256 deposit,) = alphaJobsManager.broadcasters(_addr);\r\n\r\n        require(\r\n            deposit > 0,\r\n            \"address does not have a deposit with alpha JobsManager\"\r\n        );\r\n\r\n        withdrawn[_addr] = true;\r\n\r\n        _addr.transfer(deposit);\r\n\r\n        emit RefundWithdrawn(_addr, deposit);\r\n    }\r\n}",
	"ContractName": "Refunder",
	"CompilerVersion": "v0.5.11+commit.c082d0b4"
}