{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.21;\r\n// The Original All For 1 -  www.allfor1.io\r\n// https://www.twitter.com/allfor1_io\r\n\r\n\r\ncontract AllForOne {\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    mapping (address => uint) private playerKey;\r\n    mapping (address => uint) public playerCount;\r\n    mapping (address => uint) public currentGame;\r\n    mapping (address => uint) public currentPlayersRequired;\r\n    \r\n    mapping (address => uint) private playerRegistrationStatus;\r\n    mapping (address => uint) private playerNumber;\r\n    mapping (uint => address) private numberToAddress;\r\n    \r\n    uint public currentBet = 0.005 ether;\r\n    address public contractAddress;\r\n    address public owner;\r\n    address public lastWinner;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n    \r\n    modifier noPendingBets {\r\n        require(playerCount[contractAddress] == 0);\r\n        _;\r\n    }\r\n    \r\n    function changeBet(uint _newBet) public noPendingBets onlyOwner {\r\n        currentBet = _newBet;\r\n    }\r\n    \r\n    function AllForOne() {\r\n        contractAddress = this;\r\n        currentGame[contractAddress]++;\r\n        currentPlayersRequired[contractAddress] = 100;\r\n        owner = msg.sender;\r\n        currentBet = 0.005 ether;\r\n        lastWinner = msg.sender;\r\n    }\r\n    \r\n    function canBet() view public returns (uint, uint, address) {\r\n        uint _status = 0;\r\n        uint _playerCount = playerCount[contractAddress];\r\n        address _lastWinner = lastWinner;\r\n        if (playerRegistrationStatus[msg.sender] < currentGame[contractAddress]) {\r\n        _status = 1;\r\n        }\r\n        return (_status, _playerCount, _lastWinner);\r\n    }\r\n    \r\n    modifier betCondition(uint _input) {\r\n        require (playerRegistrationStatus[msg.sender] < currentGame[contractAddress]);\r\n        require (playerCount[contractAddress] < 100);\r\n        require (msg.value == currentBet);\r\n        require (_input > 0 && _input != 0);\r\n        _;\r\n    }\r\n    \r\n    function placeBet (uint _input) payable betCondition(_input) {\r\n        playerNumber[msg.sender] = 0;\r\n        playerCount[contractAddress]++;\r\n        playerRegistrationStatus[msg.sender] = currentGame[contractAddress];\r\n        uint _playerKey = uint(keccak256(_input + now)) / now;\r\n        playerKey[contractAddress] += _playerKey;\r\n        playerNumber[msg.sender] = playerCount[contractAddress];\r\n        numberToAddress[playerNumber[msg.sender]] = msg.sender;\r\n            if (playerCount[contractAddress] == currentPlayersRequired[contractAddress]) {\r\n                currentGame[contractAddress]++;\r\n                uint _winningNumber = uint(keccak256(now + playerKey[contractAddress])) % 100 + 1;\r\n                address _winningAddress = numberToAddress[_winningNumber];\r\n                _winningAddress.transfer(currentBet * 99);\r\n                owner.transfer(currentBet * 1);\r\n                lastWinner = _winningAddress;\r\n                playerKey[contractAddress] = 0;\r\n                playerCount[contractAddress] = 0;\r\n            }\r\n        }\r\n}",
	"ContractName": "AllForOne",
	"CompilerVersion": "v0.4.21+commit.dfe3193c"
}