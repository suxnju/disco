{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.4;\r\n\r\ncontract PixelSelling {\r\n\r\n    struct Location{\r\n        address owner;\r\n        string image;\r\n        string message;\r\n        bool sale;\r\n        address saleTo;\r\n        uint price;\r\n    }\r\n\r\n    struct Share{\r\n        address owner;\r\n        uint lastCashout;\r\n        bool sale;\r\n        address saleTo;\r\n        uint price;\r\n    }\r\n\r\n    uint public latestprice;\r\n    uint public noShares;\r\n    uint public noSales;\r\n    mapping (address=>uint) public balances;\r\n\r\n    uint emptyLocationProvision;\r\n    uint privSaleProvision;\r\n    uint priceRise;\r\n    address creator;\r\n\r\n    mapping (uint=>Location) public locations;\r\n    mapping (uint=>Share) public shares;\r\n\r\n    uint[] provisions;\r\n\r\n    event Change(uint id, string eventType);\r\n\r\n    modifier isValidLocId(uint id){\r\n        if(!(id>=0 && id<10000))\r\n            throw;\r\n        _;\r\n    }\r\n\r\n    function PixelSelling() {\r\n        creator=msg.sender;\r\n        latestprice=10000000000000000;\r\n        priceRise  =20000000000000000;\r\n        noShares=0;\r\n        noSales=0;\r\n        emptyLocationProvision=90;\r\n        privSaleProvision=9;\r\n    }\r\n\r\n    function(){throw;}\r\n\r\n    function buyEmptyLocation(uint id) isValidLocId(id) payable{\r\n        Location l=locations[id];\r\n        if(l.owner==0x0 && msg.value==latestprice){\r\n            l.owner=msg.sender;\r\n            l.image='';\r\n            l.message='';\r\n\r\n            l.sale=false;\r\n            l.saleTo=0x0;\r\n            l.price=latestprice;\r\n\r\n            shares[id] = Share(msg.sender,noSales,false,0x0,latestprice);\r\n\r\n            if(noShares>0){\r\n                balances[creator]+=(latestprice/100)*(100-emptyLocationProvision);\r\n                creditShareProvision(latestprice, emptyLocationProvision);\r\n            }else{\r\n                balances[creator]+=latestprice;\r\n                provisions.push(0);\r\n                noSales+=1;\r\n            }\r\n\r\n            noShares+=1;\r\n\r\n            latestprice+=priceRise;\r\n\r\n            Change(id,'owner');\r\n        }else{\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function buyImagePriv(uint id) isValidLocId(id) payable{\r\n        Location l=locations[id];\r\n        if(\r\n            l.owner!=0x0 &&\r\n            l.sale==true &&\r\n            (l.saleTo==msg.sender||l.saleTo==0x0) &&\r\n            msg.value==l.price\r\n        ){\r\n            l.image='';\r\n            l.message='';\r\n            l.sale=false;\r\n            l.saleTo=0x0;\r\n\r\n            balances[creator]+=(msg.value/100);\r\n            balances[l.owner]+=(msg.value/100)*(99-privSaleProvision);\r\n\r\n            l.owner=msg.sender;\r\n\r\n            creditShareProvision(msg.value, privSaleProvision);\r\n\r\n            Change(id,'img owner');\r\n        }else{\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function buySharePriv(uint id) isValidLocId(id) payable{\r\n        Share s=shares[id];\r\n\t\tif(\r\n\t\t\ts.owner!=0x0 &&\r\n\t\t\ts.sale==true &&\r\n\t\t\t(s.saleTo==msg.sender||s.saleTo==0x0) &&\r\n\t\t\tmsg.value==s.price\r\n\t\t){\r\n            s.sale=false;\r\n            s.saleTo=0x0;\r\n\r\n            balances[creator]+=(msg.value/100);\r\n            balances[shares[id].owner]+=(msg.value/100)*(99-privSaleProvision);\r\n\r\n            shares[id].owner=msg.sender;\r\n\r\n            creditShareProvision(msg.value, privSaleProvision);\r\n\r\n            Change(id,'share owner');\r\n        }else{\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function setImage(uint id, string img) isValidLocId(id) {\r\n\t\tLocation l=locations[id];\r\n        if(l.owner==msg.sender && bytes(img).length<5001){\r\n            l.image=img;\r\n            Change(id,'image');\r\n        }else{\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function setMessage(uint id, string mssg) isValidLocId(id) {\r\n\t\tLocation l=locations[id];\r\n        if(l.owner==msg.sender && bytes(mssg).length<501){\r\n            l.message=mssg;\r\n            Change(id,'message');\r\n        }else{\r\n\t\t\tthrow;\r\n\t\t}\r\n    }\r\n\r\n    function setSaleImg(uint id, bool setSale, address to, uint p) isValidLocId(id) {\r\n        Location l=locations[id];\r\n\t\tif(l.owner==msg.sender){\r\n            l.sale=setSale;\r\n            l.price=p;\r\n            l.saleTo=to;\r\n            Change(id,'img sale');\r\n        }else{\r\n\t\t\tthrow;\r\n\t\t}\r\n    }\r\n\r\n    function setSaleShare(uint id, bool setSale, address to, uint p) isValidLocId(id) {\r\n        Share s=shares[id];\r\n\t\tif(s.owner==msg.sender){\r\n            s.sale=setSale;\r\n            s.price=p;\r\n            s.saleTo=to;\r\n            Change(id,'share sale');\r\n        }else{\r\n\t\t\tthrow;\r\n\t\t}\r\n    }\r\n\r\n    function creditShareProvision(uint price, uint provision) private {\r\n        provisions.push(provisions[noSales-1]+(((price/100)*provision)/noShares));\r\n        noSales+=1;\r\n    }\r\n\r\n    function getProvisionBalance(uint id) isValidLocId(id) constant returns (uint balance) {\r\n        Share s=shares[id];\r\n        if(s.owner!=0x0){\r\n            return provisions[noSales-1]-provisions[s.lastCashout];\r\n        }else{\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function collectProvisions(uint id) isValidLocId(id) {\r\n        Share s=shares[id];\r\n        if(s.owner==msg.sender){\r\n            balances[s.owner]+=provisions[noSales-1]-provisions[s.lastCashout];\r\n            s.lastCashout=noSales-1;\r\n        }else{\r\n            throw;\r\n        }\r\n    }\r\n\r\n    function withdrawBalance() {\r\n        if(balances[msg.sender]>0){\r\n            uint amtToWithdraw=balances[msg.sender];\r\n            balances[msg.sender]=0;\r\n            if(!msg.sender.send(amtToWithdraw)) throw;\r\n        }else{\r\n            throw;\r\n        }\r\n    }\r\n}",
	"ContractName": "PixelSelling",
	"CompilerVersion": "v0.4.4+commit.4633f3de"
}