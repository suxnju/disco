{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// This is an automated token exchange. It lets you buy and sell a specific token for Ethereum.\r\n// The more eth in the contract the higher the token price, the more tokens in the contract\r\n// the lower the token price. The formula is the same as for Ether Shrimp Farm.\r\n// There are no fees except gas cost.\r\n// ----------------------------------------------------------------------------\r\n\r\ncontract AutomatedExchange is ApproveAndCallFallBack{\r\n\r\n    uint256 PSN=100000000000000;\r\n    uint256 PSNH=50000000000000;\r\n    address tokenAddress=0x841D34aF2018D9487199678eDd47Dd46B140690B;\r\n    ERC20Interface tokenContract=ERC20Interface(tokenAddress);\r\n    function AutomatedExchange() public{\r\n    }\r\n    //Tokens are sold by sending them to this contract with ApproveAndCall\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public{\r\n        //only allow this to be called from the token contract\r\n        require(msg.sender==tokenAddress);\r\n        uint256 tokenValue=calculateTokenSell(tokens);\r\n        tokenContract.transferFrom(from,this,tokens);\r\n        from.transfer(tokenValue);\r\n    }\r\n    function buyTokens() public payable{\r\n        uint256 tokensBought=calculateTokenBuy(msg.value,SafeMath.sub(this.balance,msg.value));\r\n        tokenContract.transfer(msg.sender,tokensBought);\r\n    }\r\n    //magic trade balancing algorithm\r\n    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\r\n        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\r\n        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\r\n    }\r\n    function calculateTokenSell(uint256 tokens) public view returns(uint256){\r\n        return calculateTrade(tokens,tokenContract.balanceOf(this),this.balance);\r\n    }\r\n    function calculateTokenBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\r\n        return calculateTrade(eth,contractBalance,tokenContract.balanceOf(this));\r\n    }\r\n    function calculateTokenBuySimple(uint256 eth) public view returns(uint256){\r\n        return calculateTokenBuy(eth,this.balance);\r\n    }\r\n\r\n    //allow sending eth to the contract\r\n    function () public payable {}\r\n\r\n    function getBalance() public view returns(uint256){\r\n        return this.balance;\r\n    }\r\n    function getTokenBalance() public view returns(uint256){\r\n        return tokenContract.balanceOf(this);\r\n    }\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}",
	"ContractName": "AutomatedExchange",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}