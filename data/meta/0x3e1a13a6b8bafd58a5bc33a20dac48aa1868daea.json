{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.18;\r\n\r\ncontract MoneyBox {\r\n\taddress public owner;\r\n\tuint256 public mintarget = 100000000000000000;\r\n\tmapping(address=>uint256) public balances;\r\n\tmapping(address=>uint256) public targets;\r\n\tevent Reserved(address indexed _user, uint256 _value);\r\n\tevent Withdrawn(address indexed _user, uint256 _value);\r\n\tmodifier onlyOwner() {\r\n      if (msg.sender!=owner) revert();\r\n      _;\r\n    }\r\n    \r\n    function MoneyBox() public {\r\n    \towner = msg.sender;\r\n    \ttargets[owner] = mintarget;\r\n    }\r\n    \r\n    function setMinTarget(uint256 minTarget) public onlyOwner returns (bool ok){\r\n        mintarget = minTarget;\r\n        return true;\r\n    }\r\n    function setTarget(uint256 target) public returns (bool ok){\r\n        if (target<mintarget || balances[msg.sender]<=0) revert();\r\n        targets[msg.sender] = target;\r\n        return true;\r\n    }\r\n    \r\n    function withdrawMoney(uint256 sum) public returns (bool ok){\r\n        if (sum<=0 || balances[msg.sender]<targets[msg.sender] || balances[msg.sender]<sum) revert();\r\n        balances[msg.sender] -= sum;\r\n        uint256 bonus = sum*2/100;\r\n        balances[owner] += bonus;\r\n        msg.sender.transfer(sum-bonus);\r\n        Withdrawn(msg.sender,sum);\r\n        return true;\r\n    }\r\n    \r\n    function reserveMoney() private{\r\n        balances[msg.sender] += msg.value;\r\n        targets[msg.sender] = mintarget;\r\n        Reserved(msg.sender,msg.value);\r\n    }\r\n    \r\n    function () payable public {\r\n        reserveMoney();\r\n    }\r\n}",
	"ContractName": "MoneyBox",
	"CompilerVersion": "v0.4.18+commit.9cf6e910"
}