{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.11;\r\n\r\ncontract EthLot {\r\n    address public owner;\r\n    uint public price = 10000000000000000;\r\n    uint public fee = 256000000000000000;\r\n    uint public currentRound = 0;\r\n    uint8 public placesSold;\r\n    uint[] public places = [\r\n        768000000000000000,\r\n        614400000000000000,\r\n        460800000000000000,\r\n        307200000000000000,\r\n        153600000000000000\r\n    ];\r\n    uint public rand1;\r\n    uint8 public rand2;\r\n    \r\n    mapping (uint => mapping (uint8 => address)) public map;\r\n    mapping (address => uint256) public balanceOf;\r\n    \r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    \r\n    event BalanceChanged(address receiver, uint newBalance);\r\n    event RoundChanged(uint newRound);\r\n    event Placed(uint round, uint8 place, address backer);\r\n    event Finished(uint round, uint8 place1, uint8 place2, uint8 place3, uint8 place4, uint8 place5);\r\n    \r\n    function EthLot() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function withdraw() external {\r\n        require(balanceOf[msg.sender] > 0);\r\n        \r\n        msg.sender.transfer(balanceOf[msg.sender]);\r\n        FundTransfer(msg.sender, balanceOf[msg.sender], false);\r\n        \r\n        balanceOf[msg.sender] = 0;\r\n        BalanceChanged(msg.sender, 0);\r\n    }\r\n    \r\n    function place(uint8 cell) external payable {\r\n        require(map[currentRound][cell] == 0x0 && msg.value == price);\r\n        \r\n        map[currentRound][cell] = msg.sender;\r\n        Placed(currentRound, cell, msg.sender);\r\n        rand1 += uint(msg.sender) + block.timestamp;\r\n        rand2 -= uint8(msg.sender);\r\n        if (placesSold < 255) {\r\n            placesSold++;\r\n        } else {\r\n            placesSold = 0;\r\n            bytes32 hashRel = bytes32(uint(block.blockhash(block.number - rand2 - 1)) + block.timestamp + rand1);\r\n            \r\n            uint8 place1 = uint8(hashRel[31]);\r\n            uint8 place2 = uint8(hashRel[30]);\r\n            uint8 place3 = uint8(hashRel[29]);\r\n            uint8 place4 = uint8(hashRel[28]);\r\n            uint8 place5 = uint8(hashRel[27]);\r\n            \r\n            if (place2 == place1) {\r\n                place2++;\r\n            }\r\n            \r\n            if (place3 == place1) {\r\n                place3++;\r\n            }\r\n            if (place3 == place2) {\r\n                place3++;\r\n            }\r\n            \r\n            if (place4 == place1) {\r\n                place4++;\r\n            }\r\n            if (place4 == place2) {\r\n                place4++;\r\n            }\r\n            if (place4 == place3) {\r\n                place4++;\r\n            }\r\n            \r\n            if (place5 == place1) {\r\n                place5++;\r\n            }\r\n            if (place5 == place2) {\r\n                place5++;\r\n            }\r\n            if (place5 == place3) {\r\n                place5++;\r\n            }\r\n            if (place5 == place4) {\r\n                place5++;\r\n            }\r\n            \r\n            balanceOf[map[currentRound][place1]] += places[0];\r\n            balanceOf[map[currentRound][place2]] += places[1];\r\n            balanceOf[map[currentRound][place3]] += places[2];\r\n            balanceOf[map[currentRound][place4]] += places[3];\r\n            balanceOf[map[currentRound][place5]] += places[4];\r\n            balanceOf[owner] += fee;\r\n            \r\n            BalanceChanged(map[currentRound][place1], balanceOf[map[currentRound][place1]]);\r\n            BalanceChanged(map[currentRound][place2], balanceOf[map[currentRound][place2]]);\r\n            BalanceChanged(map[currentRound][place3], balanceOf[map[currentRound][place3]]);\r\n            BalanceChanged(map[currentRound][place4], balanceOf[map[currentRound][place4]]);\r\n            BalanceChanged(map[currentRound][place5], balanceOf[map[currentRound][place5]]);\r\n            BalanceChanged(owner, balanceOf[owner]);\r\n            \r\n            Finished(currentRound, place1, place2, place3, place4, place5);\r\n            \r\n            currentRound++;\r\n            RoundChanged(currentRound);\r\n        }\r\n    }\r\n}",
	"ContractName": "EthLot",
	"CompilerVersion": "v0.4.11+commit.68ef5810"
}