{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.5.0;\r\n\r\ncontract SuperToken {\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n    mapping(address => uint256) private balances;\r\n    \r\n    uint256 private _totalSupply;\r\n    uint256 private _rate= 0.006 ether;\r\n\r\n\r\n    function name() public pure returns (string memory) { return \"SuperToken\"; }\r\n    function symbol() public pure returns (string memory) { return \"STK\"; }\r\n    function decimals() public pure returns (uint8) { return 18; }\r\n    function totalSupply() public view returns (uint256) { return _totalSupply; }\r\n    function balanceOf(address _owner) public view returns (uint256) { return balances[_owner];}\r\n    \r\n    \r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        require (balances[msg.sender] >= _value) ;\r\n        balances[msg.sender] -= _value;\r\n        balances[_to] += _value;\r\n        emit Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n   \r\n    function mint(uint256 amount) payable public {\r\n        require(msg.value >= _rate*amount ) ; \r\n        _totalSupply += amount;\r\n        balances[msg.sender] += amount;\r\n    }  \r\n    \r\n    function burn(uint256 amount) public returns (bool success) {\r\n        require (balances[msg.sender] >= amount) ;\r\n        balances[msg.sender] -=amount;\r\n        _totalSupply -= amount;\r\n        return true;\r\n    }  \r\n\r\n\r\n}",
	"ContractName": "SuperToken",
	"CompilerVersion": "v0.5.0+commit.1d4f565a"
}