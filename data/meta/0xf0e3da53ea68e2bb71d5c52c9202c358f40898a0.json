{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.20;\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                                                                                                  //\r\n//                                       SAFE MATH LIBRARY                                          //\r\n//                                                                                                  //\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a + b;\r\n        require(c >= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b <= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b > 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                                                                                                  //\r\n//                                       ERC20 INTERFACE                                            //\r\n//                                                                                                  //\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public constant returns (uint);\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                                                                                                  //\r\n//                                      GAME EVENT INTERFACE                                        //\r\n//                                                                                                  //\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract GameEventInterface {\r\n    event BuyTickets(address game, address to, uint amount);\r\n    event Winner(address game, address to, uint prize, uint random_number, uint buyer_who_won);\r\n    event Jackpot(address game, address to, uint jackpot);\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                                                                                                  //\r\n//                                    AWARD TOKEN INTERFACE                                         //\r\n//                                                                                                  //\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract AwardsTokensInterface {\r\n    function awardToken(address toAddress, uint amount) public;\r\n    function receiveFromGame() public payable;\r\n    function addGame(address gameAddress, uint amount) public;\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//                                                                                                  //\r\n//                                          ICO CONTRACT                                            //\r\n//                                                                                                  //\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract ICO is ERC20Interface {\r\n    using SafeMath for uint;\r\n    \r\n    /////////////////////////----- VARIABLES -----////////////////////////////////////\r\n                                                                                    //\r\n    string public constant symbol = \"FXT\";                                          //\r\n    string public constant name = \"Fortunity Owners Token\";                         //\r\n    uint8 public constant decimals = 18;                                            //\r\n    uint256 _totalSupply = (1000000 * 10**uint(decimals)); // 1M tokens             //\r\n    mapping(address => uint256) balances;                                           //\r\n    mapping(address => mapping (address => uint256)) allowed;                       //\r\n                                                                                    //\r\n    //OWNERS                                                                        //\r\n    address public owner;                                                           //\r\n    address public affiliate; //will have owner rights                              //\r\n                                                                                    //\r\n    //FOR ICO DIVIDEND PAYOUT                                                       //\r\n    uint public payoutRound;                                                        //\r\n    bool public payoutOpen;                                                         //\r\n    uint public payoutProfit;                                                       //\r\n    uint public lastPayoutTime;                                                     //\r\n    mapping(address => uint) payoutPaidoutRound;                                    //\r\n                                                                                    //\r\n    //////////////////////////////////////////////////////////////////////////////////\r\n    \r\n\r\n  \r\n    /////////////////////////----- CONSTRUCTOR -----//////////////////////////////////\r\n                                                                                    //\r\n    function ICO() public {                                                         //\r\n        owner               = msg.sender;                                           //\r\n        balances[owner]     = _totalSupply;                                         //\r\n        Transfer(address(0), msg.sender, _totalSupply);                             //\r\n        affiliate           = msg.sender;                                           //\r\n        payoutRound        = 0;                                                     //\r\n        payoutOpen         = false;                                                 //\r\n        payoutProfit       = 0;                                                     //\r\n        lastPayoutTime     = 0;                                                     //\r\n    }                                                                               //\r\n                                                                                    //\r\n    //Midifier                                                                      //\r\n    modifier onlyAdmin () {                                                         //\r\n        require((msg.sender == owner) || (msg.sender == affiliate));                //                                                                         //\r\n        _;                                                                          //\r\n    }                                                                               //\r\n                                                                                    //\r\n    //////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    \r\n    /////////////////////////----- GAME SPECIFIC -----////////////////////////////////\r\n    event EthReceived(address inAddress, uint amount);                              //\r\n                                                                                    //\r\n    function() public payable {                                                     //\r\n        msg.sender.transfer(msg.value);                                             //\r\n    }                                                                               //\r\n                                                                                    //    \r\n    function receiveFromGame() public payable {                                     //\r\n        EthReceived(msg.sender, msg.value);                                         //\r\n    }                                                                               //\r\n                                                                                    //\r\n    //////////////////////////////////////////////////////////////////////////////////                                                                                    //\r\n                                                                                    \r\n                                                                                    \r\n                                                                                    \r\n    ///////////////////////////----- ICO SPECIFIC -----///////////////////////////////\r\n                                                                                    //\r\n    event PayoutStatus(bool status);                                                //\r\n                                                                                    //\r\n    //Open for ICO DIVIDEND payout round                                            //\r\n    function openPayout() public onlyAdmin {                                        //\r\n        require(!payoutOpen);                                                       //\r\n        payoutRound += 1;                                                           //\r\n        payoutOpen = true;                                                          //\r\n        payoutProfit = address(this).balance;                                       //\r\n        lastPayoutTime = now;                                                       //\r\n        PayoutStatus(payoutOpen);                                                   //\r\n    }                                                                               //\r\n                                                                                    //\r\n    //close for ICO DIVIDEND payout round                                           //\r\n    function closePayout() public onlyAdmin {                                       //\r\n        require(lastPayoutTime < (now.add(7 days)));                                //\r\n        payoutOpen = false;                                                         //\r\n        PayoutStatus(payoutOpen);                                                   //\r\n    }                                                                               //\r\n                                                                                    //\r\n    //ICO DIVIDEND Payout                                                           //\r\n    function requestDividendPayout() public {                                       //\r\n        require(payoutOpen);                                                        //\r\n        require(payoutPaidoutRound[msg.sender] != payoutRound);                     //\r\n        payoutPaidoutRound[msg.sender] = payoutRound;                               //\r\n        msg.sender.transfer((payoutProfit.mul(balances[msg.sender])).div(_totalSupply));\r\n    }                                                                               //\r\n                                                                                    //\r\n                                                                                    //\r\n    //////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n    ///////////////////////////----- OWNER SPECIFIC -----/////////////////////////////\r\n                                                                                    //\r\n    function changeAffiliate(address newAffiliate) public onlyAdmin {               //\r\n        require(newAffiliate != address(0));                                        //\r\n        affiliate = newAffiliate;                                                   //\r\n    }                                                                               //\r\n                                                                                    //\r\n    function takeAll() public onlyAdmin {                                           //\r\n        msg.sender.transfer(address(this).balance);                                 //\r\n    }                                                                               //\r\n    //////////////////////////////////////////////////////////////////////////////////\r\n    \r\n    \r\n    \r\n    ////////////////////////----- ERC20 IMPLEMENTATION -----//////////////////////////\r\n                                                                                    //\r\n    function totalSupply() public constant returns (uint) {                         //\r\n        return _totalSupply;                                                        //\r\n    }                                                                               //\r\n                                                                                    //\r\n    function balanceOf(address tokenOwner) public constant returns (uint balance) { //\r\n        return balances[tokenOwner];                                                //\r\n    }                                                                               //\r\n                                                                                    //\r\n    function transfer(address to, uint tokens) public returns (bool success) {      //\r\n        require(!payoutOpen);                                                       //\r\n        require(to != address(0));                                                  //                                  \r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);                    //\r\n        balances[to] = balances[to].add(tokens);                                    //\r\n        Transfer(msg.sender, to, tokens);                                           //\r\n        return true;                                                                //\r\n    }                                                                               //\r\n                                                                                    //\r\n    function approve(address spender, uint tokens) public returns (bool success) {  //\r\n        allowed[msg.sender][spender] = tokens;                                      //\r\n        Approval(msg.sender, spender, tokens);                                      //\r\n        return true;                                                                //\r\n    }                                                                               //\r\n                                                                                    //\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        require(!payoutOpen);                                                       //\r\n        require(to != address(0));                                                  //\r\n        balances[from] = balances[from].sub(tokens);                                //\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);          //\r\n        balances[to] = balances[to].add(tokens);                                    //\r\n        Transfer(from, to, tokens);                                                 //\r\n        return true;                                                                //\r\n    }                                                                               //\r\n                                                                                    //\r\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];                                        //\r\n    }                                                                               //\r\n                                                                                    //\r\n    //////////////////////////////////////////////////////////////////////////////////\r\n}",
	"ContractName": "ICO",
	"CompilerVersion": "v0.4.20+commit.3155dd80"
}