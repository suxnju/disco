{
	"Language": "Solidity",
	"Source": "/*\r\n * passive Ethereum incomes on MyTradingBot.online.\r\n * mintable MyTradinToken(MTT) buy price is 0.01ETH/MTT => burn MTT when buyback with price 0.02ETH/MTT without dump/pump\r\n * \r\n */\r\npragma solidity ^0.5.0;\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }   \r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n }\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n \r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, _allowances[from][msg.sender].sub(value));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        \r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        \r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        \r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        require(_balances[account] >= value);\r\n        \r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        \r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = value;\r\n        \r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(value));\r\n    }\r\n}\r\n\r\ncontract MyTradingToken is Ownable, ERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    uint public minInvestment = 0.01 ether;\r\n    uint public loanSize;\r\n    uint public withdrawalSize;\r\n    uint public rate;\r\n    uint public totalInvested;\r\n    address payable public loaner;\r\n    \r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    \r\n    event TokenWithdrawn(address indexed from, uint256 amount);\r\n    event Loan(address indexed loaner, uint256 amount);\r\n    event DebtReturned(address indexed addr, uint256 amount);\r\n    event NewLoaner(address indexed previousLoaner, address indexed newLoaner);\r\n\r\n    constructor () public {\r\n        _name = \"MyTradingToken\";\r\n        _symbol = \"MTT\";\r\n        _decimals = 18;\r\n        rate = 100;\r\n        loaner = 0x840A4023A0147094321444E74dDC09231A397a8A;\r\n    }\r\n\r\n    function buyTokens() public payable {\r\n        require(msg.value > minInvestment, \"\");\r\n\r\n        uint amount = msg.value.mul(rate);\r\n        _buyTokens(msg.sender, amount);\r\n        \r\n        loanSize = loanSize.add(msg.value);\r\n        totalInvested = totalInvested.add(msg.value);\r\n    }\r\n    \r\n    function _buyTokens(address buyer, uint amount) internal {\r\n        _mint(buyer, amount);\r\n    }\r\n    \r\n    function withdraw(uint _tokenAmount) public {\r\n        uint amountToSend = _tokenAmount.div(rate).mul(2);\r\n        \r\n        require(amountToSend <= withdrawalSize, \"\");\r\n        require(balanceOf(msg.sender) >= _tokenAmount, \"\");\r\n        \r\n        msg.sender.transfer(amountToSend);\r\n        \r\n        withdrawalSize = withdrawalSize.sub(amountToSend);\r\n        \r\n        _burn(msg.sender, _tokenAmount);\r\n       \r\n         emit TokenWithdrawn(msg.sender, _tokenAmount);\r\n    }\r\n    \r\n    function loan(uint _value) public {\r\n        require(msg.sender == loaner, \"\");\r\n        require(loanSize >= _value, \"\");\r\n        \r\n        loaner.transfer(_value);\r\n        loanSize = loanSize.sub(_value);\r\n      \r\n        emit Loan(loaner, _value);\r\n    }\r\n\r\n    function returnDebt() public payable {\r\n        withdrawalSize += msg.value;\r\n      \r\n        emit DebtReturned(msg.sender, msg.value);\r\n    }\r\n    \r\n    function setLoaner(address payable _newLoaner) public onlyOwner {\r\n        loaner = _newLoaner;\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function getLoanSize() public view returns (uint) {\r\n        return loanSize;\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}",
	"ContractName": "MyTradingToken",
	"CompilerVersion": "v0.5.1+commit.c8a2cb62"
}