{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.11;\r\n\r\ncontract token { function transfer(address, uint){  } }\r\n\r\ncontract CrowdsaleWatch {\r\n    address public beneficiary;\r\n    uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price;\r\n    token public tokenReward;\r\n    mapping(address => uint256) public balanceOf;\r\n    bool fundingGoalReached = false;\r\n    event GoalReached(address beneficiary, uint amountRaised);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n    bool crowdsaleClosed = false;\r\n\r\n    /* data structure to hold information about campaign contributors */\r\n\r\n    /*  at initialization, setup the owner */\r\n    function CrowdsaleWatch(\r\n        address ifSuccessfulSendTo,\r\n        uint fundingGoalInEthers,\r\n        uint durationInMinutes,\r\n        uint etherCostOfEachToken,\r\n        token addressOfTokenUsedAsReward\r\n    ) {\r\n        beneficiary = ifSuccessfulSendTo;\r\n        fundingGoal = fundingGoalInEthers * 5000 ether;\r\n        deadline = now + durationInMinutes * 1 minutes;\r\n        price = etherCostOfEachToken * 5000000 wei;\r\n        tokenReward = token(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\r\n    function () payable {\r\n        if (crowdsaleClosed) throw;\r\n        uint amount = msg.value;\r\n        balanceOf[msg.sender] = amount;\r\n        amountRaised += amount;\r\n        tokenReward.transfer(msg.sender, amount / price);\r\n        FundTransfer(msg.sender, amount, true);\r\n    }\r\n\r\n    modifier afterDeadline() { if (now >= deadline) _; }\r\n\r\n    /* checks if the goal or time limit has been reached and ends the campaign */\r\n    function checkGoalReached() afterDeadline {\r\n        if(amountRaised >= fundingGoal && !fundingGoalReached){\r\n            fundingGoalReached = true;\r\n            GoalReached(beneficiary, amountRaised);\r\n        }\r\n        crowdsaleClosed = true;\r\n    }\r\nfunction safeWithdrawal() afterDeadline {\r\n        checkGoalReached();\r\n        if (!fundingGoalReached) {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) {\r\n                if (msg.sender.send(amount)) {\r\n                    FundTransfer(msg.sender, amount, false);\r\n                } else {\r\n                    balanceOf[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fundingGoalReached && beneficiary == msg.sender) {\r\n            if (beneficiary.send(amountRaised)) {\r\n                FundTransfer(beneficiary, amountRaised, false);\r\n            } else {\r\n                //If we fail to send the funds to beneficiary, unlock funders balance\r\n                fundingGoalReached = false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function tokenWithdraw(uint256 amount) afterDeadline {\r\n        if(beneficiary == msg.sender){\r\n            tokenReward.transfer(msg.sender, amount);\r\n        }\r\n    }\r\n}",
	"ContractName": "CrowdsaleWatch",
	"CompilerVersion": "v0.4.11+commit.68ef5810"
}