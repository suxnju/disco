{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.13;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    function owned() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\r\n\r\ncontract PIN is owned {\r\n    /* Public variables of the token */\r\n    string public standard = 'PIN 0.1';\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals = 0;\r\n    uint256 public totalSupply;\r\n    bool public locked;\r\n    uint256 public icoSince;\r\n    uint256 public icoTill;\r\n\r\n     /* This creates an array with all balances */\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event IcoFinished();\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    uint256 public buyPrice = 0.01 ether;\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function PIN(\r\n        uint256 initialSupply,\r\n        string tokenName,\r\n        string tokenSymbol,\r\n        uint256 _icoSince,\r\n        uint256 _icoTill,\r\n        uint durationInDays\r\n    ) {\r\n        totalSupply = initialSupply;\r\n\r\n        balanceOf[this] = totalSupply / 100 * 22;             // Give the smart contract 22% of initial tokens\r\n        name = tokenName;                                     // Set the name for display purposes\r\n        symbol = tokenSymbol;                                 // Set the symbol for display purposes\r\n\r\n        balanceOf[msg.sender] = totalSupply / 100 * 78;       // Give remaining total supply to contract owner, will be destroyed\r\n\r\n        Transfer(this, msg.sender, balanceOf[msg.sender]);\r\n\r\n        if(_icoSince == 0 && _icoTill == 0) {\r\n            icoSince = now;\r\n            icoTill = now + durationInDays * 35 days;\r\n        }\r\n        else {\r\n            icoSince = _icoSince;\r\n            icoTill = _icoTill;\r\n        }\r\n    }\r\n\r\n    /* Send coins */\r\n    function transfer(address _to, uint256 _value) {\r\n        require(locked == false);                            // Check if smart contract is locked\r\n\r\n        require(balanceOf[msg.sender] >= _value);            // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);   // Check for overflows\r\n\r\n        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(address _spender, uint256 _value) returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\r\n        require(locked == false);                            // Check if smart contract is locked\r\n        require(_value > 0);\r\n        require(balanceOf[_from] >= _value);                 // Check if the sender has enough\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);   // Check for overflows\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n\r\n        balanceOf[_from] -= _value;                          // Subtract from the sender\r\n        balanceOf[_to] += _value;                            // Add the same to the recipient\r\n        allowance[_from][msg.sender] -= _value;\r\n        Transfer(_from, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function buy(uint256 ethers, uint256 time) internal {\r\n        require(locked == false);                            // Check if smart contract is locked\r\n        require(time >= icoSince && time <= icoTill);        // check for ico dates\r\n        require(ethers > 0);                             // check if ethers is greater than zero\r\n\r\n        uint amount = ethers / buyPrice;\r\n\r\n        require(balanceOf[this] >= amount);                  // check if smart contract has sufficient number of tokens\r\n\r\n        balanceOf[msg.sender] += amount;\r\n        balanceOf[this] -= amount;\r\n\r\n        Transfer(this, msg.sender, amount);\r\n    }\r\n\r\n    function () payable {\r\n        buy(msg.value, now);\r\n    }\r\n\r\n    function internalIcoFinished(uint256 time) internal returns (bool) {\r\n        if(time > icoTill) {\r\n            uint256 unsoldTokens = balanceOf[this];\r\n\r\n            balanceOf[owner] += unsoldTokens;\r\n            balanceOf[this] = 0;\r\n\r\n            Transfer(this, owner, unsoldTokens);\r\n\r\n            IcoFinished();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function icoFinished() onlyOwner {\r\n        internalIcoFinished(now);\r\n    }\r\n\r\n    function transferEthers() onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function setBuyPrice(uint256 _buyPrice) onlyOwner {\r\n        buyPrice = _buyPrice;\r\n    }\r\n\r\n    function setLocked(bool _locked) onlyOwner {\r\n        locked = _locked;\r\n    }\r\n\r\n    function burn(uint256 _value) onlyOwner returns (bool success) {\r\n        require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\r\n        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\r\n        totalSupply -= _value;                                // Updates totalSupply\r\n        Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n}",
	"ContractName": "PIN",
	"CompilerVersion": "v0.4.13+commit.fb4cb1a"
}