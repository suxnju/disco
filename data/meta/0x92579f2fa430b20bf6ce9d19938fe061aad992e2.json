{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.11;\r\n\r\ninterface token \r\n{\r\n    function transfer(address _to, uint256 _value);\r\n    function transferFrom(address _from, address _to, uint256 _value);\r\n    function approve(address _spender, uint256 _value);\r\n    function allowance(address _owner, address _spender) constant returns(uint256 remaining);\r\n    function getBalanceOf(address _who) returns(uint256 amount);\r\n}\r\n\r\ncontract DCY_preICO \r\n{\r\n    string public name = 'CONTRACT DICEYBIT.COM preICO';\r\n    address public beneficiary;\r\n\r\n    uint public fundingGoal;\r\n    uint public amountRaised;\r\n    uint public deadline;\r\n    uint public price;\r\n\r\n    token public tokenReward;\r\n    uint256 public tokensLeft;\r\n\r\n    mapping(address => uint256) public balanceOf;\r\n\r\n    bool public fundingGoalReached = false;\r\n    bool public crowdsaleClosed = false;\r\n\r\n    event GoalReached(address benef, uint amount);\r\n    event FundTransfer(address backer, uint amount, bool isContribution);\r\n\r\n    /*  at initialization, setup the owner */\r\n    function DCY_preICO(\r\n        address beneficiaryAddress,\r\n        token addressOfTokenUsedAsReward,\r\n        uint fundingGoalInEthers,\r\n        uint durationInMinutes,\r\n        uint weiPrice\r\n    ) {\r\n\r\n        beneficiary = beneficiaryAddress;\r\n        fundingGoal = fundingGoalInEthers * 1 ether;\r\n        deadline = now + durationInMinutes * 1 minutes;\r\n        price = weiPrice;\r\n\r\n        tokenReward = token(addressOfTokenUsedAsReward);\r\n    }\r\n\r\n    function () payable \r\n    {\r\n        require(!crowdsaleClosed);\r\n        require(tokensLeft >= amount / price);\r\n\r\n        uint amount = msg.value;\r\n        balanceOf[msg.sender] += amount;\r\n        amountRaised += amount;\r\n\r\n        tokenReward.transfer(msg.sender, amount / price);\r\n        FundTransfer(msg.sender, amount, true);\r\n\r\n        tokensLeft = tokenReward.getBalanceOf(address(this));\r\n        if (tokensLeft == 0) \r\n        {\r\n            crowdsaleClosed = true;\r\n        }\r\n    }\r\n\r\n    function updateTokensAvailable() \r\n    {\r\n        tokensLeft = tokenReward.getBalanceOf(address(this));\r\n    }\r\n\r\n    modifier afterDeadline() \r\n    {\r\n        if (now >= deadline) _;\r\n    }\r\n\r\n    /* checks if the goal or time limit has been reached and ends the campaign */\r\n    function checkGoalReached() afterDeadline \r\n    {        \r\n        if (amountRaised >= fundingGoal) \r\n        {\r\n            fundingGoalReached = true;\r\n            crowdsaleClosed = true;\r\n            GoalReached(beneficiary, amountRaised);\r\n        }\r\n    }\r\n\r\n    function safeWithdrawal() afterDeadline \r\n    {\r\n        \r\n        if (!fundingGoalReached) \r\n        {\r\n            uint amount = balanceOf[msg.sender];\r\n            balanceOf[msg.sender] = 0;\r\n            if (amount > 0) \r\n            {\r\n                if (msg.sender.send(amount)) \r\n                {\r\n                    FundTransfer(msg.sender, amount, false);\r\n                } \r\n                else \r\n                {\r\n                    balanceOf[msg.sender] = amount;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (fundingGoalReached && beneficiary == msg.sender) \r\n        {\r\n            if (beneficiary.send(amountRaised)) \r\n            {\r\n                FundTransfer(beneficiary, amountRaised, false);\r\n            } \r\n            else \r\n            {\r\n                fundingGoalReached = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    function bringBackTokens() afterDeadline \r\n    {\r\n        require(tokensLeft > 0);\r\n\r\n        if (msg.sender == beneficiary) \r\n        {\r\n            tokenReward.transfer(beneficiary, tokensLeft);\r\n            tokensLeft = tokenReward.getBalanceOf(address(this));\r\n        }\r\n    }\r\n}",
	"ContractName": "DCY_preICO",
	"CompilerVersion": "v0.4.12+commit.194ff033"
}