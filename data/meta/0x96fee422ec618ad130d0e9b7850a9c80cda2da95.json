{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns(address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if `msg.sender` is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns(bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the `onlyOwner`\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ncontract Ethpen is Ownable {\r\n    mapping (address => mapping (bytes32 =>uint)) public paidAmount;\r\n    mapping (address => uint) public balances;\r\n    uint8 public feeRate;\r\n\r\n    event PayForUrl(address _from, address _creator, string _url, uint amount);\r\n    event Withdraw(address _from, uint amount);\r\n    constructor (uint8 _feeRate) public {\r\n        feeRate = _feeRate;\r\n    }\r\n    function payForUrl(address _creator,string _url) public payable {\r\n        uint fee = (msg.value * feeRate) / 100; \r\n        balances[owner()] += fee;\r\n        balances[_creator] += msg.value - fee;\r\n        paidAmount[msg.sender][keccak256(_url)] += msg.value;\r\n        emit PayForUrl(msg.sender,_creator,_url,msg.value);\r\n    }\r\n    function setFeeRate (uint8 _feeRate)public onlyOwner{\r\n        require(_feeRate < feeRate, \"Cannot raise fee rate\");\r\n        feeRate = _feeRate;\r\n    }\r\n    function withdraw() public{\r\n        uint balance = balances[msg.sender];\r\n        require(balance > 0, \"Balance must be greater than zero\");\r\n        balances[msg.sender] = 0;\r\n        msg.sender.transfer(balance);\r\n        emit Withdraw(msg.sender, balance);\r\n    }\r\n}",
	"ContractName": "Ethpen",
	"CompilerVersion": "v0.4.24+commit.e67f0147"
}