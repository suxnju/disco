{
	"Language": "Solidity",
	"Source": "pragma solidity ^0.4.18;\r\n\r\n// File: contracts/Ownable.sol\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/SingleMessage.sol\r\n\r\ncontract SingleMessage is Ownable {\r\n  string public message;\r\n  uint256 public priceInWei;\r\n  uint256 public maxLength;\r\n\r\n  event MessageSet(string message, uint256 priceInWei, uint256 newPriceInWei, address payer);\r\n\r\n  function SingleMessage(string initialMessage, uint256 initialPriceInWei, uint256 maxLengthArg) public {\r\n    message = initialMessage;\r\n    priceInWei = initialPriceInWei;\r\n    maxLength = maxLengthArg;\r\n  }\r\n\r\n  function set(string newMessage) external payable {\r\n    require(msg.value >= priceInWei);\r\n    require(bytes(newMessage).length <= maxLength);\r\n\r\n    uint256 newPrice = priceInWei * 2;\r\n    MessageSet(newMessage, priceInWei, newPrice, msg.sender);\r\n    priceInWei = newPrice;\r\n    message = newMessage;\r\n  }\r\n\r\n  function withdraw(address destination, uint256 amountInWei) external onlyOwner {\r\n    require(this.balance >= amountInWei);\r\n    require(destination != address(0));\r\n    destination.transfer(amountInWei);\r\n  }\r\n}",
	"ContractName": "SingleMessage",
	"CompilerVersion": "v0.4.18+commit.9cf6e910"
}