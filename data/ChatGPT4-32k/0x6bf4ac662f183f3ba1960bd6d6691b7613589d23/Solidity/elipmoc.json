{
	"address": "0x6bf4ac662f183f3ba1960bd6d6691b7613589d23",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity code equivalent to the provided decompiled code could look like this:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    address private _adminAddress_1;\n    address private _adminAddress_2;\n    address private _adminAddress_3;\n    address private _token;\n\n    receive() external payable { \n    }\n\n    function getAdminAddress_1() public view returns (address) { \n        return _adminAddress_1;\n    }\n\n    function getAdminAddress_3() public view returns (address) { \n        return _adminAddress_3;\n    }\n\n    function transferDividends() public { \n        require(msg.sender == _adminAddress_1 || msg.sender == _adminAddress_2 || msg.sender == _adminAddress_3, \"Only admin can transfer dividends\");\n        require(_token != address(0), \"Token address is not set\");\n        (bool success, ) = _token.call{value: address(this).balance}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    function getAdminAddress_2() public view returns (address) { \n        return _adminAddress_2;\n    }\n\n    function getToken() public view returns (address) { \n        return _token;\n    }\n}\n```\nThis code assumes that `_token` is just an address and not a contract instance, so the `transferDividends` function just sends all the contract's ether balance to the `_token` address. If `_token` is supposed to be a contract instance, you would need to know its interface to correctly call its functions. \n\nAlso, the `__function_selector__` function was not reproduced in Solidity as it's essentially the functionality provided by Solidity itself to dispatch calls to the correct function based on the function selector in the call data.",
				"role": "assistant"
			}
		}
	],
	"created": 1701466671,
	"id": "chatcmpl-8R5UlOVK4NH7c0HYj2sFXTNM0EqZq",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 15:12 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _adminAddress_1; // STORAGE[0x0] bytes 0 to 19\naddress _adminAddress_2; // STORAGE[0x1] bytes 0 to 19\naddress _adminAddress_3; // STORAGE[0x2] bytes 0 to 19\naddress _token; // STORAGE[0x3] bytes 0 to 19\n\n\nfunction fallback() public payable { \n}\n\nfunction adminAddress_1() public nonPayable { \n    return _adminAddress_1;\n}\n\nfunction adminAddress_3() public nonPayable { \n    return _adminAddress_3;\n}\n\nfunction transferDividends() public nonPayable { \n    v0 = v1 = msg.sender == _adminAddress_1;\n    if (msg.sender != _adminAddress_1) {\n        v0 = v2 = msg.sender == _adminAddress_2;\n    }\n    if (!v0) {\n        v0 = msg.sender == _adminAddress_3;\n    }\n    require(v0);\n    require(_token.code.size);\n    v3 = _token.sendDividends().value(this.balance).gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n}\n\nfunction adminAddress_2() public nonPayable { \n    return _adminAddress_2;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x23be605d) {\n            adminAddress_1();\n        } else if (0x3b6e4ba0 == function_selector) {\n            adminAddress_3();\n        } else if (0x741ad7a3 == function_selector) {\n            transferDividends();\n        } else if (0xb04c6a0b == function_selector) {\n            adminAddress_2();\n        } else if (0xfc0c546a == function_selector) {\n            token();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 15:12 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _adminAddress_1; // STORAGE[0x0] bytes 0 to 19\naddress _adminAddress_2; // STORAGE[0x1] bytes 0 to 19\naddress _adminAddress_3; // STORAGE[0x2] bytes 0 to 19\naddress _token; // STORAGE[0x3] bytes 0 to 19\n\n\nfunction fallback() public payable { \n}\n\nfunction adminAddress_1() public nonPayable { \n    return _adminAddress_1;\n}\n\nfunction adminAddress_3() public nonPayable { \n    return _adminAddress_3;\n}\n\nfunction transferDividends() public nonPayable { \n    v0 = v1 = msg.sender == _adminAddress_1;\n    if (msg.sender != _adminAddress_1) {\n        v0 = v2 = msg.sender == _adminAddress_2;\n    }\n    if (!v0) {\n        v0 = msg.sender == _adminAddress_3;\n    }\n    require(v0);\n    require(_token.code.size);\n    v3 = _token.sendDividends().value(this.balance).gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n}\n\nfunction adminAddress_2() public nonPayable { \n    return _adminAddress_2;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x23be605d) {\n            adminAddress_1();\n        } else if (0x3b6e4ba0 == function_selector) {\n            adminAddress_3();\n        } else if (0x741ad7a3 == function_selector) {\n            transferDividends();\n        } else if (0xb04c6a0b == function_selector) {\n            adminAddress_2();\n        } else if (0xfc0c546a == function_selector) {\n            token();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 15:12 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _adminAddress_1; // STORAGE[0x0] bytes 0 to 19\naddress _adminAddress_2; // STORAGE[0x1] bytes 0 to 19\naddress _adminAddress_3; // STORAGE[0x2] bytes 0 to 19\naddress _token; // STORAGE[0x3] bytes 0 to 19\n\n\nfunction fallback() public payable { \n}\n\nfunction adminAddress_1() public nonPayable { \n    return _adminAddress_1;\n}\n\nfunction adminAddress_3() public nonPayable { \n    return _adminAddress_3;\n}\n\nfunction transferDividends() public nonPayable { \n    v0 = v1 = msg.sender == _adminAddress_1;\n    if (msg.sender != _adminAddress_1) {\n        v0 = v2 = msg.sender == _adminAddress_2;\n    }\n    if (!v0) {\n        v0 = msg.sender == _adminAddress_3;\n    }\n    require(v0);\n    require(_token.code.size);\n    v3 = _token.sendDividends().value(this.balance).gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n}\n\nfunction adminAddress_2() public nonPayable { \n    return _adminAddress_2;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x23be605d) {\n            adminAddress_1();\n        } else if (0x3b6e4ba0 == function_selector) {\n            adminAddress_3();\n        } else if (0x741ad7a3 == function_selector) {\n            transferDividends();\n        } else if (0xb04c6a0b == function_selector) {\n            adminAddress_2();\n        } else if (0xfc0c546a == function_selector) {\n            token();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 16.709260940551758,
	"usage": {
		"completion_tokens": 377,
		"prompt_tokens": 568,
		"total_tokens": 945
	}
}