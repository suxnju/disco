{
	"address": "0x4c0fc7abfa8d2a44b379704a8dc1e5b6169f8454",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The following is the Solidity contract code equivalent to the given decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping (address => uint256) public balances;\n    function withdraw(uint256 _amount) public {\n        if(balances[msg.sender] < _amount) {\n            revert(\"Insufficient balance\");\n        }\n        balances[msg.sender] -= _amount;\n        msg.sender.transfer(_amount);\n    }\n    function submitEvidence(uint256 _caseID, string memory _evidence) public {\n        // Implement your function logic here\n    }\n    function getState(uint256 _stateID) public view returns (address, uint256, bool) {\n        // Implement your function logic here\n    }\n}\n```\n\nPlease note that, as the decompiled code is incomplete and lacks context, the above Solidity code might not be the exact equivalent of the original bytecode. For example, the function logic for `submitEvidence` and `getState` is not provided in the decompiled code, so you may need to implement it according to your contract's requirements.\n\nAlso, the `withdraw` function in this Solidity code is a typical example of a withdrawal pattern in smart contracts. However, the actual function logic might vary based on the original bytecode.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473982,
	"id": "chatcmpl-8MvFeKEtHsSSG5ZbKYCVnpHncUy1B",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00E1:\n            var var0 = msg.value;\n        \n            if (!var0) { stop(); }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0;\n        \n            if (0xa60aef28 > var0) {\n                if (0x44c9af28 > var0) {\n                    if (var0 == 0x2e1a7d4d) {\n                        // Dispatch table entry for withdraw(uint256)\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x011a;\n                        var var2 = 0x04;\n                        var var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = msg.data[var2:var2 + 0x20];\n                        var3 = 0x00;\n                        var var4 = var3;\n                        var var5 = var2;\n                    \n                        if (var5 >= storage[var4]) { assert(); }\n                    \n                        memory[0x00:0x20] = var4;\n                        var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                        var4 = 0x055d;\n                        var5 = var3;\n                    \n                    label_2AE0:\n                        var var6 = 0x00;\n                        var var7 = 0x2afd;\n                        var var8 = storage[var5] / 0x02 ** 0xe0 & 0xffffffff;\n                        var var9 = 0x0b;\n                        var7 = withdraw(var8, var9);\n                    \n                    label_2AFD:\n                        var6 = var7;\n                        var4 = var6;\n                        // Error: Could not resolve jump destination!\n                    } else if (var0 == 0x31402a57) {\n                        // Dispatch table entry for 0x31402a57 (unknown)\n                        var1 = 0x011a;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = msg.data[var2:var2 + 0x20];\n                        var3 = 0x00;\n                        var4 = var3;\n                        var5 = var2;\n                    \n                        if (var5 >= storage[var4]) { assert(); }\n                    \n                        memory[0x00:0x20] = var4;\n                        var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                        var4 = 0x069b;\n                        var5 = var3;\n                        goto label_2AE0;\n                    } else if (var0 == 0x3b10f863) {\n                        // Dispatch table entry for 0x3b10f863 (unknown)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x011a;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = var2;\n                        var2 = msg.data[temp0:temp0 + 0x20];\n                        var3 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n                        var4 = !!msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n                        var5 = 0x00;\n                        var6 = var5;\n                        var7 = var2;\n                    \n                        if (var7 >= storage[var6]) { assert(); }\n                    \n                        memory[0x00:0x20] = var6;\n                        var5 = var7 * 0x04 + keccak256(memory[0x00:0x20]);\n                        var6 = 0x0a9d;\n                        var7 = var5;\n                        goto label_2AE0;\n                    } else { goto label_00E1; }\n                } else if (var0 == 0x44c9af28) {\n                    // Dispatch table entry for getState(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x019b;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1, var2, var3, var4 = getState(var2);\n                    var5 = memory[0x40:0x60];\n                    var6 = var5;\n                    var7 = var1;\n                    var8 = 0x60;\n                    var9 = var8;\n                    var var10 = var6;\n                    var var11 = var7;\n                    var var12 = 0x00;\n                \n                    if (var12 >= var9) {\n                    label_01C0:\n                        var temp1 = var8 + var6;\n                        var6 = temp1;\n                        var7 = var2;\n                        var8 = 0x20 * 0x10;\n                        var9 = var8;\n                        var10 = var6;\n                        var11 = var7;\n                        var12 = 0x00;\n                    \n                        if (var12 >= var9) {\n                        label_01EB:\n                            var temp2 = var8 + var6;\n                            var6 = temp2;\n                            var7 = var3;\n                            var8 = 0x20 * 0x0c;\n                            var9 = var8;\n                            var10 = var6;\n                            var11 = var7;\n                            var12 = 0x00;\n                        \n                            if (var12 >= var9) {\n                            label_0216:\n                                var temp3 = var8 + var6;\n                                var6 = temp3;\n                                var temp4 = var6 + 0x20;\n                                memory[var6:var6 + 0x20] = temp4 - var5;\n                                var temp5 = var4;\n                                memory[temp4:temp4 + 0x20] = memory[temp5:temp5 + 0x20];\n                                var7 = temp4 + 0x20;\n                                var8 = temp5 + 0x20;\n                                var9 = memory[temp5:temp5 + 0x20];\n                                var10 = var9;\n                                var11 = var7;\n                                var12 = var8;\n                                var var13 = 0x00;\n                            \n                                if (var13 >= var10) {\n                                label_0256:\n                                    var temp6 = var9;\n                                    var7 = temp6 + var7;\n                                    var8 = temp6 & 0x1f;\n                                \n                                    if (!var8) {\n                                        var temp7 = memory[0x40:0x60];\n                                        return memory[temp7:temp7 + var7 - temp7];\n                                    } else {\n                                        var temp8 = var8;\n                                        var temp9 = var7 - temp8;\n                                        memory[temp9:temp9 + 0x20] = ~(0x0100 ** (0x20 - temp8) - 0x01) & memory[temp9:temp9 + 0x20];\n                                        var temp10 = memory[0x40:0x60];\n                                        return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n                                    }\n                                } else {\n                                label_0247:\n                                    var temp11 = var13;\n                                    memory[temp11 + var11:temp11 + var11 + 0x20] = memory[temp11 + var12:temp11 + var12 + 0x20];\n                                    var13 = temp11 + 0x20;\n                                \n                                    if (var13 >= var10) { goto label_0256; }\n                                    else { goto label_0247; }\n                                }\n                            } else {\n                            label_0207:\n                                var temp12 = var12;\n                                memory[temp12 + var10:temp12 + var10 + 0x20] = memory[temp12 + var11:temp12 + var11 + 0x20];\n                                var12 = temp12 + 0x20;\n                            \n                                if (var12 >= var9) { goto label_0216; }\n                                else { goto label_0207; }\n                            }\n                        } else {\n                        label_01DC:\n                            var temp13 = var12;\n                            memory[temp13 + var10:temp13 + var10 + 0x20] = memory[temp13 + var11:temp13 + var11 + 0x20];\n                            var12 = temp13 + 0x20;\n                        \n                            if (var12 >= var9) { goto label_01EB; }\n                            else { goto label_01DC; }\n                        }\n                    } else {\n                    label_01B1:\n                        var temp14 = var12;\n                        memory[temp14 + var10:temp14 + var10 + 0x20] = memory[temp14 + var11:temp14 + var11 + 0x20];\n                        var12 = temp14 + 0x20;\n                    \n                        if (var12 >= var9) { goto label_01C0; }\n                        else { goto label_01B1; }\n                    }\n                } else if (var0 == 0x49514552) {\n                    // Dispatch table entry for 0x49514552 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = msg.data[var2:var2 + 0x20];\n                    var3 = 0x00;\n                    var4 = var3;\n                    var5 = var2;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                    var4 = 0x11c9;\n                    var5 = var3;\n                    goto label_2AE0;\n                } else if (var0 == 0x8382e843) {\n                    // Dispatch table entry for 0x8382e843 (unknown)\n                    var1 = 0x0391;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x01e0) { revert(memory[0x00:0x00]); }\n                \n                    var temp15 = var2;\n                    var2 = msg.data[temp15:temp15 + 0x20];\n                    var3 = temp15 + var3;\n                    var4 = temp15;\n                    var5 = var4 + 0x40;\n                    var6 = msg.data[var4 + 0x20:var4 + 0x20 + 0x20];\n                \n                    if (var6 > 0x0100000000) { revert(memory[0x00:0x00]); }\n                \n                    var temp16 = var4 + var6;\n                    var6 = temp16;\n                \n                    if (var6 + 0x20 > var3) { revert(memory[0x00:0x00]); }\n                \n                    var temp17 = var6;\n                    var temp18 = msg.data[temp17:temp17 + 0x20];\n                    var6 = temp18;\n                    var temp19 = var5;\n                    var5 = temp17 + 0x20;\n                    var7 = temp19;\n                \n                    if ((var6 > 0x0100000000) | (var5 + var6 > var3)) { revert(memory[0x00:0x00]); }\n                \n                    var temp20 = var7;\n                    var temp21 = var5;\n                    var5 = temp20;\n                    var temp22 = var3;\n                    var3 = temp21;\n                    var temp23 = var4;\n                    var4 = var6;\n                    var6 = var5 + 0x60;\n                    var8 = temp23;\n                    var7 = temp22;\n                    var9 = var5 + 0x01a0;\n                    var10 = msg.data[var5 + 0x0180:var5 + 0x0180 + 0x20];\n                \n                    if (var10 > 0x0100000000) { revert(memory[0x00:0x00]); }\n                \n                    var temp24 = var8 + var10;\n                    var10 = temp24;\n                \n                    if (var10 + 0x20 > var7) { revert(memory[0x00:0x00]); }\n                \n                    var temp25 = var10;\n                    var temp26 = msg.data[temp25:temp25 + 0x20];\n                    var10 = temp26;\n                    var11 = var9;\n                    var9 = temp25 + 0x20;\n                \n                    if ((var10 > 0x0100000000) | (var9 + var10 > var7)) { revert(memory[0x00:0x00]); }\n                \n                    var7 = var9;\n                    var8 = var10;\n                    var9 = 0x00;\n                \n                    if (msg.data[var5:var5 + 0x20] & 0x02 ** 0xa0 - 0x01 == msg.sender) {\n                        var10 = 0x14c9;\n                        var temp27 = var6;\n                        var11 = msg.data[temp27:temp27 + 0x20];\n                        var12 = msg.data[temp27 + 0x20 * 0x02:temp27 + 0x20 * 0x02 + 0x20];\n                        var10 = func_2F58(var11, var12);\n                    \n                        if (msg.value == var10) {\n                            var temp28 = var5;\n                            var temp29 = 0x02 ** 0xa0 - 0x01;\n                            var10 = msg.data[temp28 + 0x20:temp28 + 0x20 + 0x20] & temp29 == temp29 & msg.data[temp28:temp28 + 0x20];\n                        \n                            if (msg.data[temp28 + 0x20:temp28 + 0x20 + 0x20] & temp29 == temp29 & msg.data[temp28:temp28 + 0x20]) {\n                                var temp48 = var5;\n                                var temp49 = 0x02 ** 0xa0 - 0x01;\n                                var10 = msg.data[temp48 + 0x40:temp48 + 0x40 + 0x20] & temp49 != temp49 & msg.data[temp48:temp48 + 0x20];\n                            \n                                if (!var10) { goto label_157A; }\n                                else { goto label_155E; }\n                            } else if (!var10) {\n                            label_157A:\n                            \n                                if (var10) {\n                                label_15BA:\n                                    var10 = msg.data[var6 + 0xc0:var6 + 0xc0 + 0x20] >= 0x01;\n                                \n                                    if (msg.data[var6 + 0xc0:var6 + 0xc0 + 0x20] >= 0x01) {\n                                        if (var10) {\n                                        label_1615:\n                                            var10 = 0x161d;\n                                            var10 = func_3CE5();\n                                            var temp30 = 0x02 ** 0xa0 - 0x01;\n                                            var temp31 = var5;\n                                            var temp32 = var10;\n                                            memory[temp32 + 0xc0:temp32 + 0xc0 + 0x20] = temp30 & msg.data[temp31:temp31 + 0x20];\n                                            memory[temp32 + 0x0120:temp32 + 0x0120 + 0x20] = temp30 & msg.data[temp31 + 0x20:temp31 + 0x20 + 0x20];\n                                            memory[temp32 + 0x0180:temp32 + 0x0180 + 0x20] = temp30 & msg.data[temp31 + 0x40:temp31 + 0x40 + 0x20];\n                                            memory[temp32:temp32 + 0x20] = 0xffffffffffff;\n                                            memory[temp32 + 0x20:temp32 + 0x20 + 0x20] = 0xffffffffffff;\n                                            memory[temp32 + 0x60:temp32 + 0x60 + 0x20] = 0xffffffffffff;\n                                            var11 = 0x1670;\n                                            var12 = msg.data[var6:var6 + 0x20];\n                                            var13 = 0x00;\n                                            var var14 = 0x2afd;\n                                            var var15 = var12 / 0xe8d4a51000;\n                                            var var16 = 0x00;\n                                            var temp33 = var15;\n                                            var var17 = temp33;\n                                        \n                                            if (var17 == var17 & 0xffffffffffff) { goto label_2AFD; }\n                                        \n                                            var temp34 = memory[0x40:0x60];\n                                            memory[temp34:temp34 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                            memory[temp34 + 0x04:temp34 + 0x04 + 0x20] = 0x20;\n                                            memory[temp34 + 0x24:temp34 + 0x24 + 0x20] = 0x19;\n                                            memory[temp34 + 0x44:temp34 + 0x44 + 0x20] = 0x746f55696e743438206c6f737420736f6d652076616c75652e00000000000000;\n                                            var temp35 = memory[0x40:0x60];\n                                            revert(memory[temp35:temp35 + temp34 - temp35 + 0x64]);\n                                        } else {\n                                        label_15DC:\n                                            var temp36 = memory[0x40:0x60];\n                                            memory[temp36:temp36 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                            var temp37 = temp36 + 0x04;\n                                            var temp38 = temp37 + 0x20;\n                                            memory[temp37:temp37 + 0x20] = temp38 - temp37;\n                                            memory[temp38:temp38 + 0x20] = 0x30;\n                                            var temp39 = temp38 + 0x20;\n                                            memory[temp39:temp39 + 0x30] = code[0x40d6:0x4106];\n                                            var temp40 = memory[0x40:0x60];\n                                            revert(memory[temp40:temp40 + (temp39 + 0x40) - temp40]);\n                                        }\n                                    } else if (msg.data[var6 + 0xc0:var6 + 0xc0 + 0x20] <= 0x2ac6) { goto label_1615; }\n                                    else { goto label_15DC; }\n                                } else {\n                                label_1581:\n                                    var temp41 = memory[0x40:0x60];\n                                    memory[temp41:temp41 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                    var temp42 = temp41 + 0x04;\n                                    var temp43 = temp42 + 0x20;\n                                    memory[temp42:temp42 + 0x20] = temp43 - temp42;\n                                    memory[temp43:temp43 + 0x20] = 0x38;\n                                    var temp44 = temp43 + 0x20;\n                                    memory[temp44:temp44 + 0x38] = code[0x3e3b:0x3e73];\n                                    var temp45 = memory[0x40:0x60];\n                                    revert(memory[temp45:temp45 + (temp44 + 0x40) - temp45]);\n                                }\n                            } else {\n                            label_155E:\n                                var temp46 = var5;\n                                var temp47 = 0x02 ** 0xa0 - 0x01;\n                            \n                                if (msg.data[temp46 + 0x40:temp46 + 0x40 + 0x20] & temp47 != temp47 & msg.data[temp46 + 0x20:temp46 + 0x20 + 0x20]) { goto label_15BA; }\n                                else { goto label_1581; }\n                            }\n                        } else {\n                            var temp50 = memory[0x40:0x60];\n                            memory[temp50:temp50 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                            memory[temp50 + 0x04:temp50 + 0x04 + 0x20] = 0x20;\n                            memory[temp50 + 0x24:temp50 + 0x24 + 0x20] = 0x14;\n                            memory[temp50 + 0x44:temp50 + 0x44 + 0x20] = 0x5061796d656e74206e6f7420636f72726563742e000000000000000000000000;\n                            var temp51 = memory[0x40:0x60];\n                            revert(memory[temp51:temp51 + temp50 - temp51 + 0x64]);\n                        }\n                    } else {\n                        var temp52 = memory[0x40:0x60];\n                        memory[temp52:temp52 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        var temp53 = temp52 + 0x04;\n                        var temp54 = temp53 + 0x20;\n                        memory[temp53:temp53 + 0x20] = temp54 - temp53;\n                        memory[temp54:temp54 + 0x20] = 0x27;\n                        var temp55 = temp54 + 0x20;\n                        memory[temp55:temp55 + 0x27] = code[0x400c:0x4033];\n                        var temp56 = memory[0x40:0x60];\n                        revert(memory[temp56:temp56 + (temp55 + 0x40) - temp56]);\n                    }\n                } else if (var0 == 0x86fb09cf) {\n                    // Dispatch table entry for 0x86fb09cf (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var temp57 = var2;\n                    var2 = msg.data[temp57:temp57 + 0x20];\n                    var3 = !!msg.data[temp57 + 0x20:temp57 + 0x20 + 0x20];\n                    var4 = 0x00;\n                    var5 = var4;\n                    var6 = var2;\n                \n                    if (var6 >= storage[var5]) { assert(); }\n                \n                    memory[0x00:0x20] = var5;\n                    var4 = var6 * 0x04 + keccak256(memory[0x00:0x20]);\n                    var5 = 0x1c30;\n                    var6 = var4;\n                    goto label_2AE0;\n                } else { goto label_00E1; }\n            } else if (0xc4793a01 > var0) {\n                if (var0 == 0xa60aef28) {\n                    // Dispatch table entry for 0xa60aef28 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = msg.data[var2:var2 + 0x20];\n                    var3 = 0x00;\n                    var4 = var3;\n                    var5 = var2;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                    var4 = 0x1f8e;\n                    var5 = var3;\n                    goto label_2AE0;\n                } else if (var0 == 0xa6a7f0eb) {\n                    // Dispatch table entry for submitEvidence(uint256,string)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    submitEvidence(var2, var3);\n                    stop();\n                } else if (var0 == 0xb7072937) {\n                    // Dispatch table entry for 0xb7072937 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var temp58 = var2;\n                    var2 = msg.data[temp58:temp58 + 0x20];\n                    var3 = msg.data[temp58 + 0x20:temp58 + 0x20 + 0x20];\n                    var4 = !!msg.data[temp58 + 0x40:temp58 + 0x40 + 0x20];\n                    var5 = 0x00;\n                    var6 = var5;\n                    var7 = var2;\n                \n                    if (var7 >= storage[var6]) { assert(); }\n                \n                    memory[0x00:0x20] = var6;\n                    var5 = var7 * 0x04 + keccak256(memory[0x00:0x20]);\n                    var6 = 0x226a;\n                    var7 = var5;\n                    goto label_2AE0;\n                } else { goto label_00E1; }\n            } else if (var0 == 0xc4793a01) {\n                // Dispatch table entry for 0xc4793a01 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x011a;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp59 = var2;\n                var2 = msg.data[temp59:temp59 + 0x20];\n                var3 = !!msg.data[temp59 + 0x20:temp59 + 0x20 + 0x20];\n                var4 = 0x00;\n                var5 = var4;\n                var6 = var2;\n            \n                if (var6 >= storage[var5]) { assert(); }\n            \n                memory[0x00:0x20] = var5;\n                var4 = var6 * 0x04 + keccak256(memory[0x00:0x20]);\n                var5 = 0x256d;\n                var6 = var4;\n                goto label_2AE0;\n            } else if (var0 == 0xeeafd01e) {\n                // Dispatch table entry for 0xeeafd01e (unknown)\n                var1 = 0x011a;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = msg.data[var2:var2 + 0x20];\n                var3 = 0x00;\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                var4 = 0x2855;\n                var5 = var3;\n                goto label_2AE0;\n            } else if (var0 == 0xfd4eeacb) {\n                // Dispatch table entry for 0xfd4eeacb (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0391;\n                var1 = func_2AC4();\n            \n            label_0391:\n                var temp60 = memory[0x40:0x60];\n                memory[temp60:temp60 + 0x20] = var1;\n                var temp61 = memory[0x40:0x60];\n                return memory[temp61:temp61 + temp60 - temp61 + 0x20];\n            } else if (var0 == 0xfd4f3382) {\n                // Dispatch table entry for 0xfd4f3382 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0391;\n                var1 = func_2ACA();\n                goto label_0391;\n            } else { goto label_00E1; }\n        }\n    }\n    \n    function getState(var arg0) returns (var r0, var arg0, var r2, var r3) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r2 = 0x0da7;\n        r2 = func_3C86();\n        r3 = 0x0daf;\n        r3 = func_3CA5();\n        var var1 = 0x0db7;\n        var1 = func_3CC5();\n        var var2 = 0x60;\n    \n        if (arg0 < storage[0x00]) {\n            var var3 = 0x00;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n            var4 = 0x0e13;\n            var4 = func_3C86();\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x60;\n            var temp1 = var3;\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[temp0:temp0 + 0x20] = temp2 & storage[temp1 + 0x01];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp2 & storage[temp1 + 0x02];\n            var4 = temp0;\n            memory[var4 + 0x40:var4 + 0x40 + 0x20] = storage[temp1 + 0x03] & temp2;\n            var5 = 0x0e51;\n            var5 = func_3CA5();\n            var temp3 = memory[0x40:0x60];\n            var var6 = temp3;\n            memory[0x40:0x60] = var6 + 0x0200;\n            var var7 = var6;\n            var var8 = 0x0e72;\n            var var9 = storage[var3] & 0xffffffffffff;\n            var8 = func_32B4(var9);\n            var temp4 = var7;\n            memory[temp4:temp4 + 0x20] = var8;\n            var7 = temp4 + 0x20;\n            var8 = 0x0e97;\n            var9 = storage[var3] / 0x01000000000000 & 0xffffffffffff;\n            var8 = func_32B4(var9);\n            var temp5 = var7;\n            memory[temp5:temp5 + 0x20] = var8;\n            var7 = temp5 + 0x20;\n            var8 = 0x0ec8;\n            var9 = storage[var3] / 0x01000000000000000000000000000000000000 & 0xffffffffffff;\n            var8 = func_32B4(var9);\n            var temp6 = var7;\n            memory[temp6:temp6 + 0x20] = var8;\n            var7 = temp6 + 0x20;\n            var8 = 0x0ef3;\n            var9 = storage[var3] / 0x01000000000000000000000000 & 0xffffffffffff;\n            var8 = func_32B4(var9);\n            var temp7 = var7;\n            memory[temp7:temp7 + 0x20] = var8;\n            var7 = temp7 + 0x20;\n            var8 = 0x0f29;\n            var9 = storage[var3 + 0x01] / 0x010000000000000000000000000000000000000000 & 0xffffffffffff;\n            var var10 = 0x00;\n            var var11 = 0x2afd;\n            var var12 = var9;\n            var var13 = 0xe8d4a51000;\n            var11 = func_3982(var12, var13);\n            var10 = var11;\n            var8 = var10;\n            // Error: Could not resolve jump destination!\n        } else {\n            var3 = 0x0dcb;\n            var3 = func_3C86();\n            var4 = 0x0dd3;\n            var4 = func_3CA5();\n            var5 = 0x0ddb;\n            var5 = func_3CC5();\n            r2 = var3;\n            r3 = var4;\n            var1 = var5;\n            var2 = 0x60;\n            var temp8 = r3;\n            r3 = var2;\n            arg0 = temp8;\n            var temp9 = r2;\n            r2 = var1;\n            r0 = temp9;\n            return r0, arg0, r2, r3;\n        }\n    }\n    \n    function submitEvidence(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var1 = var0 + 0x40;\n        var var2 = msg.data[var0 + 0x20:var0 + 0x20 + 0x20];\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var0 + var2;\n        var2 = temp1;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var2;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var2 = temp3;\n        var temp4 = var1;\n        var1 = temp2 + 0x20;\n        var var3 = temp4;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        arg1 = var1;\n        var0 = var2;\n        var1 = 0x00;\n        var2 = var1;\n        var3 = arg0;\n    \n        if (var3 >= storage[var2]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n        var1 = var3 * 0x04 + keccak256(memory[0x00:0x20]);\n        var2 = msg.sender == storage[var1 + 0x01] & 0x02 ** 0xa0 - 0x01;\n    \n        if (!var2) {\n            var2 = msg.sender == storage[var1 + 0x02] & 0x02 ** 0xa0 - 0x01;\n        \n            if (var2) { goto label_2171; }\n            else { goto label_2160; }\n        } else if (var2) {\n        label_2171:\n        \n            if (var2) {\n            label_21C7:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x20;\n                var temp6 = var0;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp6;\n                var temp7 = temp5 + 0x40;\n                memory[temp7:temp7 + temp6] = msg.data[arg1:arg1 + temp6];\n                memory[temp6 + temp7:temp6 + temp7 + 0x20] = 0x00;\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + (temp7 + (temp6 + 0x1f & ~0x1f)) - temp8], [0xdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c, storage[stack[-1] + 0x03] & 0x02 ** 0xa0 - 0x01, stack[-4], msg.sender]);\n                return;\n            } else {\n            label_2178:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x14;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x556e617574686f72697a65642073656e6465722e000000000000000000000000;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else {\n        label_2160:\n        \n            if (msg.sender == storage[var1 + 0x03] & 0x02 ** 0xa0 - 0x01) { goto label_21C7; }\n            else { goto label_2178; }\n        }\n    }\n    \n    function func_2AC4() returns (var r0) { return storage[0x00]; }\n    \n    function func_2ACA() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x2adb;\n        var var2 = 0xffffffffffff;\n        return func_32B4(var2);\n    }\n    \n    function func_2F58(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1a;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x426164206164646974696f6e20696e2073616665206d6174682e000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_32B4(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 != 0xffffffffffff) {\n            var var1 = 0x2afd;\n            var var2 = arg0;\n            var var3 = 0xe8d4a51000;\n            var1 = func_3982(var2, var3);\n            var0 = var1;\n        \n        label_2B00:\n            return var0;\n        } else {\n            var0 = ~0x00;\n            goto label_2B00;\n        }\n    }\n    \n    function withdraw(var arg0, var arg1) returns (var r0) { return arg0 / 0x02 ** arg1 & 0x01 == 0x01; }\n    \n    function func_3982(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1d;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x4261642073616665206d617468206d756c7469706c69636174696f6e2e000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_3C86() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0:temp0 + 0x03 * 0x20] = code[code.length:code.length + 0x03 * 0x20];\n        return temp0;\n    }\n    \n    function func_3CA5() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0200;\n        memory[temp0:temp0 + 0x10 * 0x20] = code[code.length:code.length + 0x10 * 0x20];\n        return temp0;\n    }\n    \n    function func_3CC5() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0180;\n        memory[temp0:temp0 + 0x0c * 0x20] = code[code.length:code.length + 0x0c * 0x20];\n        return temp0;\n    }\n    \n    function func_3CE5() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0200;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x00;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x00;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x00;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = 0x00;\n        memory[temp0 + 0xc0:temp0 + 0xc0 + 0x20] = 0x00;\n        memory[temp0 + 0xe0:temp0 + 0xe0 + 0x20] = 0x00;\n        memory[temp0 + 0x0100:temp0 + 0x0100 + 0x20] = 0x00;\n        memory[temp0 + 0x0120:temp0 + 0x0120 + 0x20] = 0x00;\n        memory[temp0 + 0x0140:temp0 + 0x0140 + 0x20] = 0x00;\n        memory[temp0 + 0x0160:temp0 + 0x0160 + 0x20] = 0x00;\n        memory[temp0 + 0x0180:temp0 + 0x0180 + 0x20] = 0x00;\n        memory[temp0 + 0x01a0:temp0 + 0x01a0 + 0x20] = 0x00;\n        memory[temp0 + 0x01c0:temp0 + 0x01c0 + 0x20] = 0x00;\n        memory[temp0 + 0x01e0:temp0 + 0x01e0 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00E1:\n            var var0 = msg.value;\n        \n            if (!var0) { stop(); }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0;\n        \n            if (0xa60aef28 > var0) {\n                if (0x44c9af28 > var0) {\n                    if (var0 == 0x2e1a7d4d) {\n                        // Dispatch table entry for withdraw(uint256)\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x011a;\n                        var var2 = 0x04;\n                        var var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = msg.data[var2:var2 + 0x20];\n                        var3 = 0x00;\n                        var var4 = var3;\n                        var var5 = var2;\n                    \n                        if (var5 >= storage[var4]) { assert(); }\n                    \n                        memory[0x00:0x20] = var4;\n                        var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                        var4 = 0x055d;\n                        var5 = var3;\n                    \n                    label_2AE0:\n                        var var6 = 0x00;\n                        var var7 = 0x2afd;\n                        var var8 = storage[var5] / 0x02 ** 0xe0 & 0xffffffff;\n                        var var9 = 0x0b;\n                        var7 = withdraw(var8, var9);\n                    \n                    label_2AFD:\n                        var6 = var7;\n                        var4 = var6;\n                        // Error: Could not resolve jump destination!\n                    } else if (var0 == 0x31402a57) {\n                        // Dispatch table entry for 0x31402a57 (unknown)\n                        var1 = 0x011a;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = msg.data[var2:var2 + 0x20];\n                        var3 = 0x00;\n                        var4 = var3;\n                        var5 = var2;\n                    \n                        if (var5 >= storage[var4]) { assert(); }\n                    \n                        memory[0x00:0x20] = var4;\n                        var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                        var4 = 0x069b;\n                        var5 = var3;\n                        goto label_2AE0;\n                    } else if (var0 == 0x3b10f863) {\n                        // Dispatch table entry for 0x3b10f863 (unknown)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x011a;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = var2;\n                        var2 = msg.data[temp0:temp0 + 0x20];\n                        var3 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n                        var4 = !!msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n                        var5 = 0x00;\n                        var6 = var5;\n                        var7 = var2;\n                    \n                        if (var7 >= storage[var6]) { assert(); }\n                    \n                        memory[0x00:0x20] = var6;\n                        var5 = var7 * 0x04 + keccak256(memory[0x00:0x20]);\n                        var6 = 0x0a9d;\n                        var7 = var5;\n                        goto label_2AE0;\n                    } else { goto label_00E1; }\n                } else if (var0 == 0x44c9af28) {\n                    // Dispatch table entry for getState(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x019b;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1, var2, var3, var4 = getState(var2);\n                    var5 = memory[0x40:0x60];\n                    var6 = var5;\n                    var7 = var1;\n                    var8 = 0x60;\n                    var9 = var8;\n                    var var10 = var6;\n                    var var11 = var7;\n                    var var12 = 0x00;\n                \n                    if (var12 >= var9) {\n                    label_01C0:\n                        var temp1 = var8 + var6;\n                        var6 = temp1;\n                        var7 = var2;\n                        var8 = 0x20 * 0x10;\n                        var9 = var8;\n                        var10 = var6;\n                        var11 = var7;\n                        var12 = 0x00;\n                    \n                        if (var12 >= var9) {\n                        label_01EB:\n                            var temp2 = var8 + var6;\n                            var6 = temp2;\n                            var7 = var3;\n                            var8 = 0x20 * 0x0c;\n                            var9 = var8;\n                            var10 = var6;\n                            var11 = var7;\n                            var12 = 0x00;\n                        \n                            if (var12 >= var9) {\n                            label_0216:\n                                var temp3 = var8 + var6;\n                                var6 = temp3;\n                                var temp4 = var6 + 0x20;\n                                memory[var6:var6 + 0x20] = temp4 - var5;\n                                var temp5 = var4;\n                                memory[temp4:temp4 + 0x20] = memory[temp5:temp5 + 0x20];\n                                var7 = temp4 + 0x20;\n                                var8 = temp5 + 0x20;\n                                var9 = memory[temp5:temp5 + 0x20];\n                                var10 = var9;\n                                var11 = var7;\n                                var12 = var8;\n                                var var13 = 0x00;\n                            \n                                if (var13 >= var10) {\n                                label_0256:\n                                    var temp6 = var9;\n                                    var7 = temp6 + var7;\n                                    var8 = temp6 & 0x1f;\n                                \n                                    if (!var8) {\n                                        var temp7 = memory[0x40:0x60];\n                                        return memory[temp7:temp7 + var7 - temp7];\n                                    } else {\n                                        var temp8 = var8;\n                                        var temp9 = var7 - temp8;\n                                        memory[temp9:temp9 + 0x20] = ~(0x0100 ** (0x20 - temp8) - 0x01) & memory[temp9:temp9 + 0x20];\n                                        var temp10 = memory[0x40:0x60];\n                                        return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n                                    }\n                                } else {\n                                label_0247:\n                                    var temp11 = var13;\n                                    memory[temp11 + var11:temp11 + var11 + 0x20] = memory[temp11 + var12:temp11 + var12 + 0x20];\n                                    var13 = temp11 + 0x20;\n                                \n                                    if (var13 >= var10) { goto label_0256; }\n                                    else { goto label_0247; }\n                                }\n                            } else {\n                            label_0207:\n                                var temp12 = var12;\n                                memory[temp12 + var10:temp12 + var10 + 0x20] = memory[temp12 + var11:temp12 + var11 + 0x20];\n                                var12 = temp12 + 0x20;\n                            \n                                if (var12 >= var9) { goto label_0216; }\n                                else { goto label_0207; }\n                            }\n                        } else {\n                        label_01DC:\n                            var temp13 = var12;\n                            memory[temp13 + var10:temp13 + var10 + 0x20] = memory[temp13 + var11:temp13 + var11 + 0x20];\n                            var12 = temp13 + 0x20;\n                        \n                            if (var12 >= var9) { goto label_01EB; }\n                            else { goto label_01DC; }\n                        }\n                    } else {\n                    label_01B1:\n                        var temp14 = var12;\n                        memory[temp14 + var10:temp14 + var10 + 0x20] = memory[temp14 + var11:temp14 + var11 + 0x20];\n                        var12 = temp14 + 0x20;\n                    \n                        if (var12 >= var9) { goto label_01C0; }\n                        else { goto label_01B1; }\n                    }\n                } else if (var0 == 0x49514552) {\n                    // Dispatch table entry for 0x49514552 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = msg.data[var2:var2 + 0x20];\n                    var3 = 0x00;\n                    var4 = var3;\n                    var5 = var2;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                    var4 = 0x11c9;\n                    var5 = var3;\n                    goto label_2AE0;\n                } else if (var0 == 0x8382e843) {\n                    // Dispatch table entry for 0x8382e843 (unknown)\n                    var1 = 0x0391;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x01e0) { revert(memory[0x00:0x00]); }\n                \n                    var temp15 = var2;\n                    var2 = msg.data[temp15:temp15 + 0x20];\n                    var3 = temp15 + var3;\n                    var4 = temp15;\n                    var5 = var4 + 0x40;\n                    var6 = msg.data[var4 + 0x20:var4 + 0x20 + 0x20];\n                \n                    if (var6 > 0x0100000000) { revert(memory[0x00:0x00]); }\n                \n                    var temp16 = var4 + var6;\n                    var6 = temp16;\n                \n                    if (var6 + 0x20 > var3) { revert(memory[0x00:0x00]); }\n                \n                    var temp17 = var6;\n                    var temp18 = msg.data[temp17:temp17 + 0x20];\n                    var6 = temp18;\n                    var temp19 = var5;\n                    var5 = temp17 + 0x20;\n                    var7 = temp19;\n                \n                    if ((var6 > 0x0100000000) | (var5 + var6 > var3)) { revert(memory[0x00:0x00]); }\n                \n                    var temp20 = var7;\n                    var temp21 = var5;\n                    var5 = temp20;\n                    var temp22 = var3;\n                    var3 = temp21;\n                    var temp23 = var4;\n                    var4 = var6;\n                    var6 = var5 + 0x60;\n                    var8 = temp23;\n                    var7 = temp22;\n                    var9 = var5 + 0x01a0;\n                    var10 = msg.data[var5 + 0x0180:var5 + 0x0180 + 0x20];\n                \n                    if (var10 > 0x0100000000) { revert(memory[0x00:0x00]); }\n                \n                    var temp24 = var8 + var10;\n                    var10 = temp24;\n                \n                    if (var10 + 0x20 > var7) { revert(memory[0x00:0x00]); }\n                \n                    var temp25 = var10;\n                    var temp26 = msg.data[temp25:temp25 + 0x20];\n                    var10 = temp26;\n                    var11 = var9;\n                    var9 = temp25 + 0x20;\n                \n                    if ((var10 > 0x0100000000) | (var9 + var10 > var7)) { revert(memory[0x00:0x00]); }\n                \n                    var7 = var9;\n                    var8 = var10;\n                    var9 = 0x00;\n                \n                    if (msg.data[var5:var5 + 0x20] & 0x02 ** 0xa0 - 0x01 == msg.sender) {\n                        var10 = 0x14c9;\n                        var temp27 = var6;\n                        var11 = msg.data[temp27:temp27 + 0x20];\n                        var12 = msg.data[temp27 + 0x20 * 0x02:temp27 + 0x20 * 0x02 + 0x20];\n                        var10 = func_2F58(var11, var12);\n                    \n                        if (msg.value == var10) {\n                            var temp28 = var5;\n                            var temp29 = 0x02 ** 0xa0 - 0x01;\n                            var10 = msg.data[temp28 + 0x20:temp28 + 0x20 + 0x20] & temp29 == temp29 & msg.data[temp28:temp28 + 0x20];\n                        \n                            if (msg.data[temp28 + 0x20:temp28 + 0x20 + 0x20] & temp29 == temp29 & msg.data[temp28:temp28 + 0x20]) {\n                                var temp48 = var5;\n                                var temp49 = 0x02 ** 0xa0 - 0x01;\n                                var10 = msg.data[temp48 + 0x40:temp48 + 0x40 + 0x20] & temp49 != temp49 & msg.data[temp48:temp48 + 0x20];\n                            \n                                if (!var10) { goto label_157A; }\n                                else { goto label_155E; }\n                            } else if (!var10) {\n                            label_157A:\n                            \n                                if (var10) {\n                                label_15BA:\n                                    var10 = msg.data[var6 + 0xc0:var6 + 0xc0 + 0x20] >= 0x01;\n                                \n                                    if (msg.data[var6 + 0xc0:var6 + 0xc0 + 0x20] >= 0x01) {\n                                        if (var10) {\n                                        label_1615:\n                                            var10 = 0x161d;\n                                            var10 = func_3CE5();\n                                            var temp30 = 0x02 ** 0xa0 - 0x01;\n                                            var temp31 = var5;\n                                            var temp32 = var10;\n                                            memory[temp32 + 0xc0:temp32 + 0xc0 + 0x20] = temp30 & msg.data[temp31:temp31 + 0x20];\n                                            memory[temp32 + 0x0120:temp32 + 0x0120 + 0x20] = temp30 & msg.data[temp31 + 0x20:temp31 + 0x20 + 0x20];\n                                            memory[temp32 + 0x0180:temp32 + 0x0180 + 0x20] = temp30 & msg.data[temp31 + 0x40:temp31 + 0x40 + 0x20];\n                                            memory[temp32:temp32 + 0x20] = 0xffffffffffff;\n                                            memory[temp32 + 0x20:temp32 + 0x20 + 0x20] = 0xffffffffffff;\n                                            memory[temp32 + 0x60:temp32 + 0x60 + 0x20] = 0xffffffffffff;\n                                            var11 = 0x1670;\n                                            var12 = msg.data[var6:var6 + 0x20];\n                                            var13 = 0x00;\n                                            var var14 = 0x2afd;\n                                            var var15 = var12 / 0xe8d4a51000;\n                                            var var16 = 0x00;\n                                            var temp33 = var15;\n                                            var var17 = temp33;\n                                        \n                                            if (var17 == var17 & 0xffffffffffff) { goto label_2AFD; }\n                                        \n                                            var temp34 = memory[0x40:0x60];\n                                            memory[temp34:temp34 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                            memory[temp34 + 0x04:temp34 + 0x04 + 0x20] = 0x20;\n                                            memory[temp34 + 0x24:temp34 + 0x24 + 0x20] = 0x19;\n                                            memory[temp34 + 0x44:temp34 + 0x44 + 0x20] = 0x746f55696e743438206c6f737420736f6d652076616c75652e00000000000000;\n                                            var temp35 = memory[0x40:0x60];\n                                            revert(memory[temp35:temp35 + temp34 - temp35 + 0x64]);\n                                        } else {\n                                        label_15DC:\n                                            var temp36 = memory[0x40:0x60];\n                                            memory[temp36:temp36 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                            var temp37 = temp36 + 0x04;\n                                            var temp38 = temp37 + 0x20;\n                                            memory[temp37:temp37 + 0x20] = temp38 - temp37;\n                                            memory[temp38:temp38 + 0x20] = 0x30;\n                                            var temp39 = temp38 + 0x20;\n                                            memory[temp39:temp39 + 0x30] = code[0x40d6:0x4106];\n                                            var temp40 = memory[0x40:0x60];\n                                            revert(memory[temp40:temp40 + (temp39 + 0x40) - temp40]);\n                                        }\n                                    } else if (msg.data[var6 + 0xc0:var6 + 0xc0 + 0x20] <= 0x2ac6) { goto label_1615; }\n                                    else { goto label_15DC; }\n                                } else {\n                                label_1581:\n                                    var temp41 = memory[0x40:0x60];\n                                    memory[temp41:temp41 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                    var temp42 = temp41 + 0x04;\n                                    var temp43 = temp42 + 0x20;\n                                    memory[temp42:temp42 + 0x20] = temp43 - temp42;\n                                    memory[temp43:temp43 + 0x20] = 0x38;\n                                    var temp44 = temp43 + 0x20;\n                                    memory[temp44:temp44 + 0x38] = code[0x3e3b:0x3e73];\n                                    var temp45 = memory[0x40:0x60];\n                                    revert(memory[temp45:temp45 + (temp44 + 0x40) - temp45]);\n                                }\n                            } else {\n                            label_155E:\n                                var temp46 = var5;\n                                var temp47 = 0x02 ** 0xa0 - 0x01;\n                            \n                                if (msg.data[temp46 + 0x40:temp46 + 0x40 + 0x20] & temp47 != temp47 & msg.data[temp46 + 0x20:temp46 + 0x20 + 0x20]) { goto label_15BA; }\n                                else { goto label_1581; }\n                            }\n                        } else {\n                            var temp50 = memory[0x40:0x60];\n                            memory[temp50:temp50 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                            memory[temp50 + 0x04:temp50 + 0x04 + 0x20] = 0x20;\n                            memory[temp50 + 0x24:temp50 + 0x24 + 0x20] = 0x14;\n                            memory[temp50 + 0x44:temp50 + 0x44 + 0x20] = 0x5061796d656e74206e6f7420636f72726563742e000000000000000000000000;\n                            var temp51 = memory[0x40:0x60];\n                            revert(memory[temp51:temp51 + temp50 - temp51 + 0x64]);\n                        }\n                    } else {\n                        var temp52 = memory[0x40:0x60];\n                        memory[temp52:temp52 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        var temp53 = temp52 + 0x04;\n                        var temp54 = temp53 + 0x20;\n                        memory[temp53:temp53 + 0x20] = temp54 - temp53;\n                        memory[temp54:temp54 + 0x20] = 0x27;\n                        var temp55 = temp54 + 0x20;\n                        memory[temp55:temp55 + 0x27] = code[0x400c:0x4033];\n                        var temp56 = memory[0x40:0x60];\n                        revert(memory[temp56:temp56 + (temp55 + 0x40) - temp56]);\n                    }\n                } else if (var0 == 0x86fb09cf) {\n                    // Dispatch table entry for 0x86fb09cf (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var temp57 = var2;\n                    var2 = msg.data[temp57:temp57 + 0x20];\n                    var3 = !!msg.data[temp57 + 0x20:temp57 + 0x20 + 0x20];\n                    var4 = 0x00;\n                    var5 = var4;\n                    var6 = var2;\n                \n                    if (var6 >= storage[var5]) { assert(); }\n                \n                    memory[0x00:0x20] = var5;\n                    var4 = var6 * 0x04 + keccak256(memory[0x00:0x20]);\n                    var5 = 0x1c30;\n                    var6 = var4;\n                    goto label_2AE0;\n                } else { goto label_00E1; }\n            } else if (0xc4793a01 > var0) {\n                if (var0 == 0xa60aef28) {\n                    // Dispatch table entry for 0xa60aef28 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = msg.data[var2:var2 + 0x20];\n                    var3 = 0x00;\n                    var4 = var3;\n                    var5 = var2;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                    var4 = 0x1f8e;\n                    var5 = var3;\n                    goto label_2AE0;\n                } else if (var0 == 0xa6a7f0eb) {\n                    // Dispatch table entry for submitEvidence(uint256,string)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    submitEvidence(var2, var3);\n                    stop();\n                } else if (var0 == 0xb7072937) {\n                    // Dispatch table entry for 0xb7072937 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var temp58 = var2;\n                    var2 = msg.data[temp58:temp58 + 0x20];\n                    var3 = msg.data[temp58 + 0x20:temp58 + 0x20 + 0x20];\n                    var4 = !!msg.data[temp58 + 0x40:temp58 + 0x40 + 0x20];\n                    var5 = 0x00;\n                    var6 = var5;\n                    var7 = var2;\n                \n                    if (var7 >= storage[var6]) { assert(); }\n                \n                    memory[0x00:0x20] = var6;\n                    var5 = var7 * 0x04 + keccak256(memory[0x00:0x20]);\n                    var6 = 0x226a;\n                    var7 = var5;\n                    goto label_2AE0;\n                } else { goto label_00E1; }\n            } else if (var0 == 0xc4793a01) {\n                // Dispatch table entry for 0xc4793a01 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x011a;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp59 = var2;\n                var2 = msg.data[temp59:temp59 + 0x20];\n                var3 = !!msg.data[temp59 + 0x20:temp59 + 0x20 + 0x20];\n                var4 = 0x00;\n                var5 = var4;\n                var6 = var2;\n            \n                if (var6 >= storage[var5]) { assert(); }\n            \n                memory[0x00:0x20] = var5;\n                var4 = var6 * 0x04 + keccak256(memory[0x00:0x20]);\n                var5 = 0x256d;\n                var6 = var4;\n                goto label_2AE0;\n            } else if (var0 == 0xeeafd01e) {\n                // Dispatch table entry for 0xeeafd01e (unknown)\n                var1 = 0x011a;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = msg.data[var2:var2 + 0x20];\n                var3 = 0x00;\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                var4 = 0x2855;\n                var5 = var3;\n                goto label_2AE0;\n            } else if (var0 == 0xfd4eeacb) {\n                // Dispatch table entry for 0xfd4eeacb (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0391;\n                var1 = func_2AC4();\n            \n            label_0391:\n                var temp60 = memory[0x40:0x60];\n                memory[temp60:temp60 + 0x20] = var1;\n                var temp61 = memory[0x40:0x60];\n                return memory[temp61:temp61 + temp60 - temp61 + 0x20];\n            } else if (var0 == 0xfd4f3382) {\n                // Dispatch table entry for 0xfd4f3382 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0391;\n                var1 = func_2ACA();\n                goto label_0391;\n            } else { goto label_00E1; }\n        }\n    }\n    \n    function getState(var arg0) returns (var r0, var arg0, var r2, var r3) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r2 = 0x0da7;\n        r2 = func_3C86();\n        r3 = 0x0daf;\n        r3 = func_3CA5();\n        var var1 = 0x0db7;\n        var1 = func_3CC5();\n        var var2 = 0x60;\n    \n        if (arg0 < storage[0x00]) {\n            var var3 = 0x00;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n            var4 = 0x0e13;\n            var4 = func_3C86();\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x60;\n            var temp1 = var3;\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[temp0:temp0 + 0x20] = temp2 & storage[temp1 + 0x01];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp2 & storage[temp1 + 0x02];\n            var4 = temp0;\n            memory[var4 + 0x40:var4 + 0x40 + 0x20] = storage[temp1 + 0x03] & temp2;\n            var5 = 0x0e51;\n            var5 = func_3CA5();\n            var temp3 = memory[0x40:0x60];\n            var var6 = temp3;\n            memory[0x40:0x60] = var6 + 0x0200;\n            var var7 = var6;\n            var var8 = 0x0e72;\n            var var9 = storage[var3] & 0xffffffffffff;\n            var8 = func_32B4(var9);\n            var temp4 = var7;\n            memory[temp4:temp4 + 0x20] = var8;\n            var7 = temp4 + 0x20;\n            var8 = 0x0e97;\n            var9 = storage[var3] / 0x01000000000000 & 0xffffffffffff;\n            var8 = func_32B4(var9);\n            var temp5 = var7;\n            memory[temp5:temp5 + 0x20] = var8;\n            var7 = temp5 + 0x20;\n            var8 = 0x0ec8;\n            var9 = storage[var3] / 0x01000000000000000000000000000000000000 & 0xffffffffffff;\n            var8 = func_32B4(var9);\n            var temp6 = var7;\n            memory[temp6:temp6 + 0x20] = var8;\n            var7 = temp6 + 0x20;\n            var8 = 0x0ef3;\n            var9 = storage[var3] / 0x01000000000000000000000000 & 0xffffffffffff;\n            var8 = func_32B4(var9);\n            var temp7 = var7;\n            memory[temp7:temp7 + 0x20] = var8;\n            var7 = temp7 + 0x20;\n            var8 = 0x0f29;\n            var9 = storage[var3 + 0x01] / 0x010000000000000000000000000000000000000000 & 0xffffffffffff;\n            var var10 = 0x00;\n            var var11 = 0x2afd;\n            var var12 = var9;\n            var var13 = 0xe8d4a51000;\n            var11 = func_3982(var12, var13);\n            var10 = var11;\n            var8 = var10;\n            // Error: Could not resolve jump destination!\n        } else {\n            var3 = 0x0dcb;\n            var3 = func_3C86();\n            var4 = 0x0dd3;\n            var4 = func_3CA5();\n            var5 = 0x0ddb;\n            var5 = func_3CC5();\n            r2 = var3;\n            r3 = var4;\n            var1 = var5;\n            var2 = 0x60;\n            var temp8 = r3;\n            r3 = var2;\n            arg0 = temp8;\n            var temp9 = r2;\n            r2 = var1;\n            r0 = temp9;\n            return r0, arg0, r2, r3;\n        }\n    }\n    \n    function submitEvidence(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var1 = var0 + 0x40;\n        var var2 = msg.data[var0 + 0x20:var0 + 0x20 + 0x20];\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var0 + var2;\n        var2 = temp1;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var2;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var2 = temp3;\n        var temp4 = var1;\n        var1 = temp2 + 0x20;\n        var var3 = temp4;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        arg1 = var1;\n        var0 = var2;\n        var1 = 0x00;\n        var2 = var1;\n        var3 = arg0;\n    \n        if (var3 >= storage[var2]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n        var1 = var3 * 0x04 + keccak256(memory[0x00:0x20]);\n        var2 = msg.sender == storage[var1 + 0x01] & 0x02 ** 0xa0 - 0x01;\n    \n        if (!var2) {\n            var2 = msg.sender == storage[var1 + 0x02] & 0x02 ** 0xa0 - 0x01;\n        \n            if (var2) { goto label_2171; }\n            else { goto label_2160; }\n        } else if (var2) {\n        label_2171:\n        \n            if (var2) {\n            label_21C7:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x20;\n                var temp6 = var0;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp6;\n                var temp7 = temp5 + 0x40;\n                memory[temp7:temp7 + temp6] = msg.data[arg1:arg1 + temp6];\n                memory[temp6 + temp7:temp6 + temp7 + 0x20] = 0x00;\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + (temp7 + (temp6 + 0x1f & ~0x1f)) - temp8], [0xdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c, storage[stack[-1] + 0x03] & 0x02 ** 0xa0 - 0x01, stack[-4], msg.sender]);\n                return;\n            } else {\n            label_2178:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x14;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x556e617574686f72697a65642073656e6465722e000000000000000000000000;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else {\n        label_2160:\n        \n            if (msg.sender == storage[var1 + 0x03] & 0x02 ** 0xa0 - 0x01) { goto label_21C7; }\n            else { goto label_2178; }\n        }\n    }\n    \n    function func_2AC4() returns (var r0) { return storage[0x00]; }\n    \n    function func_2ACA() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x2adb;\n        var var2 = 0xffffffffffff;\n        return func_32B4(var2);\n    }\n    \n    function func_2F58(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1a;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x426164206164646974696f6e20696e2073616665206d6174682e000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_32B4(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 != 0xffffffffffff) {\n            var var1 = 0x2afd;\n            var var2 = arg0;\n            var var3 = 0xe8d4a51000;\n            var1 = func_3982(var2, var3);\n            var0 = var1;\n        \n        label_2B00:\n            return var0;\n        } else {\n            var0 = ~0x00;\n            goto label_2B00;\n        }\n    }\n    \n    function withdraw(var arg0, var arg1) returns (var r0) { return arg0 / 0x02 ** arg1 & 0x01 == 0x01; }\n    \n    function func_3982(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1d;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x4261642073616665206d617468206d756c7469706c69636174696f6e2e000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_3C86() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0:temp0 + 0x03 * 0x20] = code[code.length:code.length + 0x03 * 0x20];\n        return temp0;\n    }\n    \n    function func_3CA5() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0200;\n        memory[temp0:temp0 + 0x10 * 0x20] = code[code.length:code.length + 0x10 * 0x20];\n        return temp0;\n    }\n    \n    function func_3CC5() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0180;\n        memory[temp0:temp0 + 0x0c * 0x20] = code[code.length:code.length + 0x0c * 0x20];\n        return temp0;\n    }\n    \n    function func_3CE5() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0200;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x00;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x00;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x00;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = 0x00;\n        memory[temp0 + 0xc0:temp0 + 0xc0 + 0x20] = 0x00;\n        memory[temp0 + 0xe0:temp0 + 0xe0 + 0x20] = 0x00;\n        memory[temp0 + 0x0100:temp0 + 0x0100 + 0x20] = 0x00;\n        memory[temp0 + 0x0120:temp0 + 0x0120 + 0x20] = 0x00;\n        memory[temp0 + 0x0140:temp0 + 0x0140 + 0x20] = 0x00;\n        memory[temp0 + 0x0160:temp0 + 0x0160 + 0x20] = 0x00;\n        memory[temp0 + 0x0180:temp0 + 0x0180 + 0x20] = 0x00;\n        memory[temp0 + 0x01a0:temp0 + 0x01a0 + 0x20] = 0x00;\n        memory[temp0 + 0x01c0:temp0 + 0x01c0 + 0x20] = 0x00;\n        memory[temp0 + 0x01e0:temp0 + 0x01e0 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00E1:\n            var var0 = msg.value;\n        \n            if (!var0) { stop(); }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0;\n        \n            if (0xa60aef28 > var0) {\n                if (0x44c9af28 > var0) {\n                    if (var0 == 0x2e1a7d4d) {\n                        // Dispatch table entry for withdraw(uint256)\n                        var var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x011a;\n                        var var2 = 0x04;\n                        var var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = msg.data[var2:var2 + 0x20];\n                        var3 = 0x00;\n                        var var4 = var3;\n                        var var5 = var2;\n                    \n                        if (var5 >= storage[var4]) { assert(); }\n                    \n                        memory[0x00:0x20] = var4;\n                        var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                        var4 = 0x055d;\n                        var5 = var3;\n                    \n                    label_2AE0:\n                        var var6 = 0x00;\n                        var var7 = 0x2afd;\n                        var var8 = storage[var5] / 0x02 ** 0xe0 & 0xffffffff;\n                        var var9 = 0x0b;\n                        var7 = withdraw(var8, var9);\n                    \n                    label_2AFD:\n                        var6 = var7;\n                        var4 = var6;\n                        // Error: Could not resolve jump destination!\n                    } else if (var0 == 0x31402a57) {\n                        // Dispatch table entry for 0x31402a57 (unknown)\n                        var1 = 0x011a;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = msg.data[var2:var2 + 0x20];\n                        var3 = 0x00;\n                        var4 = var3;\n                        var5 = var2;\n                    \n                        if (var5 >= storage[var4]) { assert(); }\n                    \n                        memory[0x00:0x20] = var4;\n                        var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                        var4 = 0x069b;\n                        var5 = var3;\n                        goto label_2AE0;\n                    } else if (var0 == 0x3b10f863) {\n                        // Dispatch table entry for 0x3b10f863 (unknown)\n                        var1 = msg.value;\n                    \n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x011a;\n                        var2 = 0x04;\n                        var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                    \n                        var temp0 = var2;\n                        var2 = msg.data[temp0:temp0 + 0x20];\n                        var3 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n                        var4 = !!msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n                        var5 = 0x00;\n                        var6 = var5;\n                        var7 = var2;\n                    \n                        if (var7 >= storage[var6]) { assert(); }\n                    \n                        memory[0x00:0x20] = var6;\n                        var5 = var7 * 0x04 + keccak256(memory[0x00:0x20]);\n                        var6 = 0x0a9d;\n                        var7 = var5;\n                        goto label_2AE0;\n                    } else { goto label_00E1; }\n                } else if (var0 == 0x44c9af28) {\n                    // Dispatch table entry for getState(uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x019b;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1, var2, var3, var4 = getState(var2);\n                    var5 = memory[0x40:0x60];\n                    var6 = var5;\n                    var7 = var1;\n                    var8 = 0x60;\n                    var9 = var8;\n                    var var10 = var6;\n                    var var11 = var7;\n                    var var12 = 0x00;\n                \n                    if (var12 >= var9) {\n                    label_01C0:\n                        var temp1 = var8 + var6;\n                        var6 = temp1;\n                        var7 = var2;\n                        var8 = 0x20 * 0x10;\n                        var9 = var8;\n                        var10 = var6;\n                        var11 = var7;\n                        var12 = 0x00;\n                    \n                        if (var12 >= var9) {\n                        label_01EB:\n                            var temp2 = var8 + var6;\n                            var6 = temp2;\n                            var7 = var3;\n                            var8 = 0x20 * 0x0c;\n                            var9 = var8;\n                            var10 = var6;\n                            var11 = var7;\n                            var12 = 0x00;\n                        \n                            if (var12 >= var9) {\n                            label_0216:\n                                var temp3 = var8 + var6;\n                                var6 = temp3;\n                                var temp4 = var6 + 0x20;\n                                memory[var6:var6 + 0x20] = temp4 - var5;\n                                var temp5 = var4;\n                                memory[temp4:temp4 + 0x20] = memory[temp5:temp5 + 0x20];\n                                var7 = temp4 + 0x20;\n                                var8 = temp5 + 0x20;\n                                var9 = memory[temp5:temp5 + 0x20];\n                                var10 = var9;\n                                var11 = var7;\n                                var12 = var8;\n                                var var13 = 0x00;\n                            \n                                if (var13 >= var10) {\n                                label_0256:\n                                    var temp6 = var9;\n                                    var7 = temp6 + var7;\n                                    var8 = temp6 & 0x1f;\n                                \n                                    if (!var8) {\n                                        var temp7 = memory[0x40:0x60];\n                                        return memory[temp7:temp7 + var7 - temp7];\n                                    } else {\n                                        var temp8 = var8;\n                                        var temp9 = var7 - temp8;\n                                        memory[temp9:temp9 + 0x20] = ~(0x0100 ** (0x20 - temp8) - 0x01) & memory[temp9:temp9 + 0x20];\n                                        var temp10 = memory[0x40:0x60];\n                                        return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n                                    }\n                                } else {\n                                label_0247:\n                                    var temp11 = var13;\n                                    memory[temp11 + var11:temp11 + var11 + 0x20] = memory[temp11 + var12:temp11 + var12 + 0x20];\n                                    var13 = temp11 + 0x20;\n                                \n                                    if (var13 >= var10) { goto label_0256; }\n                                    else { goto label_0247; }\n                                }\n                            } else {\n                            label_0207:\n                                var temp12 = var12;\n                                memory[temp12 + var10:temp12 + var10 + 0x20] = memory[temp12 + var11:temp12 + var11 + 0x20];\n                                var12 = temp12 + 0x20;\n                            \n                                if (var12 >= var9) { goto label_0216; }\n                                else { goto label_0207; }\n                            }\n                        } else {\n                        label_01DC:\n                            var temp13 = var12;\n                            memory[temp13 + var10:temp13 + var10 + 0x20] = memory[temp13 + var11:temp13 + var11 + 0x20];\n                            var12 = temp13 + 0x20;\n                        \n                            if (var12 >= var9) { goto label_01EB; }\n                            else { goto label_01DC; }\n                        }\n                    } else {\n                    label_01B1:\n                        var temp14 = var12;\n                        memory[temp14 + var10:temp14 + var10 + 0x20] = memory[temp14 + var11:temp14 + var11 + 0x20];\n                        var12 = temp14 + 0x20;\n                    \n                        if (var12 >= var9) { goto label_01C0; }\n                        else { goto label_01B1; }\n                    }\n                } else if (var0 == 0x49514552) {\n                    // Dispatch table entry for 0x49514552 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = msg.data[var2:var2 + 0x20];\n                    var3 = 0x00;\n                    var4 = var3;\n                    var5 = var2;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                    var4 = 0x11c9;\n                    var5 = var3;\n                    goto label_2AE0;\n                } else if (var0 == 0x8382e843) {\n                    // Dispatch table entry for 0x8382e843 (unknown)\n                    var1 = 0x0391;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x01e0) { revert(memory[0x00:0x00]); }\n                \n                    var temp15 = var2;\n                    var2 = msg.data[temp15:temp15 + 0x20];\n                    var3 = temp15 + var3;\n                    var4 = temp15;\n                    var5 = var4 + 0x40;\n                    var6 = msg.data[var4 + 0x20:var4 + 0x20 + 0x20];\n                \n                    if (var6 > 0x0100000000) { revert(memory[0x00:0x00]); }\n                \n                    var temp16 = var4 + var6;\n                    var6 = temp16;\n                \n                    if (var6 + 0x20 > var3) { revert(memory[0x00:0x00]); }\n                \n                    var temp17 = var6;\n                    var temp18 = msg.data[temp17:temp17 + 0x20];\n                    var6 = temp18;\n                    var temp19 = var5;\n                    var5 = temp17 + 0x20;\n                    var7 = temp19;\n                \n                    if ((var6 > 0x0100000000) | (var5 + var6 > var3)) { revert(memory[0x00:0x00]); }\n                \n                    var temp20 = var7;\n                    var temp21 = var5;\n                    var5 = temp20;\n                    var temp22 = var3;\n                    var3 = temp21;\n                    var temp23 = var4;\n                    var4 = var6;\n                    var6 = var5 + 0x60;\n                    var8 = temp23;\n                    var7 = temp22;\n                    var9 = var5 + 0x01a0;\n                    var10 = msg.data[var5 + 0x0180:var5 + 0x0180 + 0x20];\n                \n                    if (var10 > 0x0100000000) { revert(memory[0x00:0x00]); }\n                \n                    var temp24 = var8 + var10;\n                    var10 = temp24;\n                \n                    if (var10 + 0x20 > var7) { revert(memory[0x00:0x00]); }\n                \n                    var temp25 = var10;\n                    var temp26 = msg.data[temp25:temp25 + 0x20];\n                    var10 = temp26;\n                    var11 = var9;\n                    var9 = temp25 + 0x20;\n                \n                    if ((var10 > 0x0100000000) | (var9 + var10 > var7)) { revert(memory[0x00:0x00]); }\n                \n                    var7 = var9;\n                    var8 = var10;\n                    var9 = 0x00;\n                \n                    if (msg.data[var5:var5 + 0x20] & 0x02 ** 0xa0 - 0x01 == msg.sender) {\n                        var10 = 0x14c9;\n                        var temp27 = var6;\n                        var11 = msg.data[temp27:temp27 + 0x20];\n                        var12 = msg.data[temp27 + 0x20 * 0x02:temp27 + 0x20 * 0x02 + 0x20];\n                        var10 = func_2F58(var11, var12);\n                    \n                        if (msg.value == var10) {\n                            var temp28 = var5;\n                            var temp29 = 0x02 ** 0xa0 - 0x01;\n                            var10 = msg.data[temp28 + 0x20:temp28 + 0x20 + 0x20] & temp29 == temp29 & msg.data[temp28:temp28 + 0x20];\n                        \n                            if (msg.data[temp28 + 0x20:temp28 + 0x20 + 0x20] & temp29 == temp29 & msg.data[temp28:temp28 + 0x20]) {\n                                var temp48 = var5;\n                                var temp49 = 0x02 ** 0xa0 - 0x01;\n                                var10 = msg.data[temp48 + 0x40:temp48 + 0x40 + 0x20] & temp49 != temp49 & msg.data[temp48:temp48 + 0x20];\n                            \n                                if (!var10) { goto label_157A; }\n                                else { goto label_155E; }\n                            } else if (!var10) {\n                            label_157A:\n                            \n                                if (var10) {\n                                label_15BA:\n                                    var10 = msg.data[var6 + 0xc0:var6 + 0xc0 + 0x20] >= 0x01;\n                                \n                                    if (msg.data[var6 + 0xc0:var6 + 0xc0 + 0x20] >= 0x01) {\n                                        if (var10) {\n                                        label_1615:\n                                            var10 = 0x161d;\n                                            var10 = func_3CE5();\n                                            var temp30 = 0x02 ** 0xa0 - 0x01;\n                                            var temp31 = var5;\n                                            var temp32 = var10;\n                                            memory[temp32 + 0xc0:temp32 + 0xc0 + 0x20] = temp30 & msg.data[temp31:temp31 + 0x20];\n                                            memory[temp32 + 0x0120:temp32 + 0x0120 + 0x20] = temp30 & msg.data[temp31 + 0x20:temp31 + 0x20 + 0x20];\n                                            memory[temp32 + 0x0180:temp32 + 0x0180 + 0x20] = temp30 & msg.data[temp31 + 0x40:temp31 + 0x40 + 0x20];\n                                            memory[temp32:temp32 + 0x20] = 0xffffffffffff;\n                                            memory[temp32 + 0x20:temp32 + 0x20 + 0x20] = 0xffffffffffff;\n                                            memory[temp32 + 0x60:temp32 + 0x60 + 0x20] = 0xffffffffffff;\n                                            var11 = 0x1670;\n                                            var12 = msg.data[var6:var6 + 0x20];\n                                            var13 = 0x00;\n                                            var var14 = 0x2afd;\n                                            var var15 = var12 / 0xe8d4a51000;\n                                            var var16 = 0x00;\n                                            var temp33 = var15;\n                                            var var17 = temp33;\n                                        \n                                            if (var17 == var17 & 0xffffffffffff) { goto label_2AFD; }\n                                        \n                                            var temp34 = memory[0x40:0x60];\n                                            memory[temp34:temp34 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                            memory[temp34 + 0x04:temp34 + 0x04 + 0x20] = 0x20;\n                                            memory[temp34 + 0x24:temp34 + 0x24 + 0x20] = 0x19;\n                                            memory[temp34 + 0x44:temp34 + 0x44 + 0x20] = 0x746f55696e743438206c6f737420736f6d652076616c75652e00000000000000;\n                                            var temp35 = memory[0x40:0x60];\n                                            revert(memory[temp35:temp35 + temp34 - temp35 + 0x64]);\n                                        } else {\n                                        label_15DC:\n                                            var temp36 = memory[0x40:0x60];\n                                            memory[temp36:temp36 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                            var temp37 = temp36 + 0x04;\n                                            var temp38 = temp37 + 0x20;\n                                            memory[temp37:temp37 + 0x20] = temp38 - temp37;\n                                            memory[temp38:temp38 + 0x20] = 0x30;\n                                            var temp39 = temp38 + 0x20;\n                                            memory[temp39:temp39 + 0x30] = code[0x40d6:0x4106];\n                                            var temp40 = memory[0x40:0x60];\n                                            revert(memory[temp40:temp40 + (temp39 + 0x40) - temp40]);\n                                        }\n                                    } else if (msg.data[var6 + 0xc0:var6 + 0xc0 + 0x20] <= 0x2ac6) { goto label_1615; }\n                                    else { goto label_15DC; }\n                                } else {\n                                label_1581:\n                                    var temp41 = memory[0x40:0x60];\n                                    memory[temp41:temp41 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                    var temp42 = temp41 + 0x04;\n                                    var temp43 = temp42 + 0x20;\n                                    memory[temp42:temp42 + 0x20] = temp43 - temp42;\n                                    memory[temp43:temp43 + 0x20] = 0x38;\n                                    var temp44 = temp43 + 0x20;\n                                    memory[temp44:temp44 + 0x38] = code[0x3e3b:0x3e73];\n                                    var temp45 = memory[0x40:0x60];\n                                    revert(memory[temp45:temp45 + (temp44 + 0x40) - temp45]);\n                                }\n                            } else {\n                            label_155E:\n                                var temp46 = var5;\n                                var temp47 = 0x02 ** 0xa0 - 0x01;\n                            \n                                if (msg.data[temp46 + 0x40:temp46 + 0x40 + 0x20] & temp47 != temp47 & msg.data[temp46 + 0x20:temp46 + 0x20 + 0x20]) { goto label_15BA; }\n                                else { goto label_1581; }\n                            }\n                        } else {\n                            var temp50 = memory[0x40:0x60];\n                            memory[temp50:temp50 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                            memory[temp50 + 0x04:temp50 + 0x04 + 0x20] = 0x20;\n                            memory[temp50 + 0x24:temp50 + 0x24 + 0x20] = 0x14;\n                            memory[temp50 + 0x44:temp50 + 0x44 + 0x20] = 0x5061796d656e74206e6f7420636f72726563742e000000000000000000000000;\n                            var temp51 = memory[0x40:0x60];\n                            revert(memory[temp51:temp51 + temp50 - temp51 + 0x64]);\n                        }\n                    } else {\n                        var temp52 = memory[0x40:0x60];\n                        memory[temp52:temp52 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        var temp53 = temp52 + 0x04;\n                        var temp54 = temp53 + 0x20;\n                        memory[temp53:temp53 + 0x20] = temp54 - temp53;\n                        memory[temp54:temp54 + 0x20] = 0x27;\n                        var temp55 = temp54 + 0x20;\n                        memory[temp55:temp55 + 0x27] = code[0x400c:0x4033];\n                        var temp56 = memory[0x40:0x60];\n                        revert(memory[temp56:temp56 + (temp55 + 0x40) - temp56]);\n                    }\n                } else if (var0 == 0x86fb09cf) {\n                    // Dispatch table entry for 0x86fb09cf (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var temp57 = var2;\n                    var2 = msg.data[temp57:temp57 + 0x20];\n                    var3 = !!msg.data[temp57 + 0x20:temp57 + 0x20 + 0x20];\n                    var4 = 0x00;\n                    var5 = var4;\n                    var6 = var2;\n                \n                    if (var6 >= storage[var5]) { assert(); }\n                \n                    memory[0x00:0x20] = var5;\n                    var4 = var6 * 0x04 + keccak256(memory[0x00:0x20]);\n                    var5 = 0x1c30;\n                    var6 = var4;\n                    goto label_2AE0;\n                } else { goto label_00E1; }\n            } else if (0xc4793a01 > var0) {\n                if (var0 == 0xa60aef28) {\n                    // Dispatch table entry for 0xa60aef28 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = msg.data[var2:var2 + 0x20];\n                    var3 = 0x00;\n                    var4 = var3;\n                    var5 = var2;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                    var4 = 0x1f8e;\n                    var5 = var3;\n                    goto label_2AE0;\n                } else if (var0 == 0xa6a7f0eb) {\n                    // Dispatch table entry for submitEvidence(uint256,string)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    submitEvidence(var2, var3);\n                    stop();\n                } else if (var0 == 0xb7072937) {\n                    // Dispatch table entry for 0xb7072937 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x011a;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var temp58 = var2;\n                    var2 = msg.data[temp58:temp58 + 0x20];\n                    var3 = msg.data[temp58 + 0x20:temp58 + 0x20 + 0x20];\n                    var4 = !!msg.data[temp58 + 0x40:temp58 + 0x40 + 0x20];\n                    var5 = 0x00;\n                    var6 = var5;\n                    var7 = var2;\n                \n                    if (var7 >= storage[var6]) { assert(); }\n                \n                    memory[0x00:0x20] = var6;\n                    var5 = var7 * 0x04 + keccak256(memory[0x00:0x20]);\n                    var6 = 0x226a;\n                    var7 = var5;\n                    goto label_2AE0;\n                } else { goto label_00E1; }\n            } else if (var0 == 0xc4793a01) {\n                // Dispatch table entry for 0xc4793a01 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x011a;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp59 = var2;\n                var2 = msg.data[temp59:temp59 + 0x20];\n                var3 = !!msg.data[temp59 + 0x20:temp59 + 0x20 + 0x20];\n                var4 = 0x00;\n                var5 = var4;\n                var6 = var2;\n            \n                if (var6 >= storage[var5]) { assert(); }\n            \n                memory[0x00:0x20] = var5;\n                var4 = var6 * 0x04 + keccak256(memory[0x00:0x20]);\n                var5 = 0x256d;\n                var6 = var4;\n                goto label_2AE0;\n            } else if (var0 == 0xeeafd01e) {\n                // Dispatch table entry for 0xeeafd01e (unknown)\n                var1 = 0x011a;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = msg.data[var2:var2 + 0x20];\n                var3 = 0x00;\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n                var4 = 0x2855;\n                var5 = var3;\n                goto label_2AE0;\n            } else if (var0 == 0xfd4eeacb) {\n                // Dispatch table entry for 0xfd4eeacb (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0391;\n                var1 = func_2AC4();\n            \n            label_0391:\n                var temp60 = memory[0x40:0x60];\n                memory[temp60:temp60 + 0x20] = var1;\n                var temp61 = memory[0x40:0x60];\n                return memory[temp61:temp61 + temp60 - temp61 + 0x20];\n            } else if (var0 == 0xfd4f3382) {\n                // Dispatch table entry for 0xfd4f3382 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0391;\n                var1 = func_2ACA();\n                goto label_0391;\n            } else { goto label_00E1; }\n        }\n    }\n    \n    function getState(var arg0) returns (var r0, var arg0, var r2, var r3) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r2 = 0x0da7;\n        r2 = func_3C86();\n        r3 = 0x0daf;\n        r3 = func_3CA5();\n        var var1 = 0x0db7;\n        var1 = func_3CC5();\n        var var2 = 0x60;\n    \n        if (arg0 < storage[0x00]) {\n            var var3 = 0x00;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var3 = var5 * 0x04 + keccak256(memory[0x00:0x20]);\n            var4 = 0x0e13;\n            var4 = func_3C86();\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x60;\n            var temp1 = var3;\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[temp0:temp0 + 0x20] = temp2 & storage[temp1 + 0x01];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp2 & storage[temp1 + 0x02];\n            var4 = temp0;\n            memory[var4 + 0x40:var4 + 0x40 + 0x20] = storage[temp1 + 0x03] & temp2;\n            var5 = 0x0e51;\n            var5 = func_3CA5();\n            var temp3 = memory[0x40:0x60];\n            var var6 = temp3;\n            memory[0x40:0x60] = var6 + 0x0200;\n            var var7 = var6;\n            var var8 = 0x0e72;\n            var var9 = storage[var3] & 0xffffffffffff;\n            var8 = func_32B4(var9);\n            var temp4 = var7;\n            memory[temp4:temp4 + 0x20] = var8;\n            var7 = temp4 + 0x20;\n            var8 = 0x0e97;\n            var9 = storage[var3] / 0x01000000000000 & 0xffffffffffff;\n            var8 = func_32B4(var9);\n            var temp5 = var7;\n            memory[temp5:temp5 + 0x20] = var8;\n            var7 = temp5 + 0x20;\n            var8 = 0x0ec8;\n            var9 = storage[var3] / 0x01000000000000000000000000000000000000 & 0xffffffffffff;\n            var8 = func_32B4(var9);\n            var temp6 = var7;\n            memory[temp6:temp6 + 0x20] = var8;\n            var7 = temp6 + 0x20;\n            var8 = 0x0ef3;\n            var9 = storage[var3] / 0x01000000000000000000000000 & 0xffffffffffff;\n            var8 = func_32B4(var9);\n            var temp7 = var7;\n            memory[temp7:temp7 + 0x20] = var8;\n            var7 = temp7 + 0x20;\n            var8 = 0x0f29;\n            var9 = storage[var3 + 0x01] / 0x010000000000000000000000000000000000000000 & 0xffffffffffff;\n            var var10 = 0x00;\n            var var11 = 0x2afd;\n            var var12 = var9;\n            var var13 = 0xe8d4a51000;\n            var11 = func_3982(var12, var13);\n            var10 = var11;\n            var8 = var10;\n            // Error: Could not resolve jump destination!\n        } else {\n            var3 = 0x0dcb;\n            var3 = func_3C86();\n            var4 = 0x0dd3;\n            var4 = func_3CA5();\n            var5 = 0x0ddb;\n            var5 = func_3CC5();\n            r2 = var3;\n            r3 = var4;\n            var1 = var5;\n            var2 = 0x60;\n            var temp8 = r3;\n            r3 = var2;\n            arg0 = temp8;\n            var temp9 = r2;\n            r2 = var1;\n            r0 = temp9;\n            return r0, arg0, r2, r3;\n        }\n    }\n    \n    function submitEvidence(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var1 = var0 + 0x40;\n        var var2 = msg.data[var0 + 0x20:var0 + 0x20 + 0x20];\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = var0 + var2;\n        var2 = temp1;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var2;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var2 = temp3;\n        var temp4 = var1;\n        var1 = temp2 + 0x20;\n        var var3 = temp4;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        arg1 = var1;\n        var0 = var2;\n        var1 = 0x00;\n        var2 = var1;\n        var3 = arg0;\n    \n        if (var3 >= storage[var2]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n        var1 = var3 * 0x04 + keccak256(memory[0x00:0x20]);\n        var2 = msg.sender == storage[var1 + 0x01] & 0x02 ** 0xa0 - 0x01;\n    \n        if (!var2) {\n            var2 = msg.sender == storage[var1 + 0x02] & 0x02 ** 0xa0 - 0x01;\n        \n            if (var2) { goto label_2171; }\n            else { goto label_2160; }\n        } else if (var2) {\n        label_2171:\n        \n            if (var2) {\n            label_21C7:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x20;\n                var temp6 = var0;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp6;\n                var temp7 = temp5 + 0x40;\n                memory[temp7:temp7 + temp6] = msg.data[arg1:arg1 + temp6];\n                memory[temp6 + temp7:temp6 + temp7 + 0x20] = 0x00;\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + (temp7 + (temp6 + 0x1f & ~0x1f)) - temp8], [0xdccf2f8b2cc26eafcd61905cba744cff4b81d14740725f6376390dc6298a6a3c, storage[stack[-1] + 0x03] & 0x02 ** 0xa0 - 0x01, stack[-4], msg.sender]);\n                return;\n            } else {\n            label_2178:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x14;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x556e617574686f72697a65642073656e6465722e000000000000000000000000;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else {\n        label_2160:\n        \n            if (msg.sender == storage[var1 + 0x03] & 0x02 ** 0xa0 - 0x01) { goto label_21C7; }\n            else { goto label_2178; }\n        }\n    }\n    \n    function func_2AC4() returns (var r0) { return storage[0x00]; }\n    \n    function func_2ACA() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x2adb;\n        var var2 = 0xffffffffffff;\n        return func_32B4(var2);\n    }\n    \n    function func_2F58(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1a;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x426164206164646974696f6e20696e2073616665206d6174682e000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_32B4(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 != 0xffffffffffff) {\n            var var1 = 0x2afd;\n            var var2 = arg0;\n            var var3 = 0xe8d4a51000;\n            var1 = func_3982(var2, var3);\n            var0 = var1;\n        \n        label_2B00:\n            return var0;\n        } else {\n            var0 = ~0x00;\n            goto label_2B00;\n        }\n    }\n    \n    function withdraw(var arg0, var arg1) returns (var r0) { return arg0 / 0x02 ** arg1 & 0x01 == 0x01; }\n    \n    function func_3982(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1d;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x4261642073616665206d617468206d756c7469706c69636174696f6e2e000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_3C86() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0:temp0 + 0x03 * 0x20] = code[code.length:code.length + 0x03 * 0x20];\n        return temp0;\n    }\n    \n    function func_3CA5() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0200;\n        memory[temp0:temp0 + 0x10 * 0x20] = code[code.length:code.length + 0x10 * 0x20];\n        return temp0;\n    }\n    \n    function func_3CC5() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0180;\n        memory[temp0:temp0 + 0x0c * 0x20] = code[code.length:code.length + 0x0c * 0x20];\n        return temp0;\n    }\n    \n    function func_3CE5() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0200;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x00;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x00;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x00;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = 0x00;\n        memory[temp0 + 0xc0:temp0 + 0xc0 + 0x20] = 0x00;\n        memory[temp0 + 0xe0:temp0 + 0xe0 + 0x20] = 0x00;\n        memory[temp0 + 0x0100:temp0 + 0x0100 + 0x20] = 0x00;\n        memory[temp0 + 0x0120:temp0 + 0x0120 + 0x20] = 0x00;\n        memory[temp0 + 0x0140:temp0 + 0x0140 + 0x20] = 0x00;\n        memory[temp0 + 0x0160:temp0 + 0x0160 + 0x20] = 0x00;\n        memory[temp0 + 0x0180:temp0 + 0x0180 + 0x20] = 0x00;\n        memory[temp0 + 0x01a0:temp0 + 0x01a0 + 0x20] = 0x00;\n        memory[temp0 + 0x01c0:temp0 + 0x01c0 + 0x20] = 0x00;\n        memory[temp0 + 0x01e0:temp0 + 0x01e0 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 24.59469699859619,
	"usage": {
		"completion_tokens": 262,
		"prompt_tokens": 10614,
		"total_tokens": 10876
	}
}