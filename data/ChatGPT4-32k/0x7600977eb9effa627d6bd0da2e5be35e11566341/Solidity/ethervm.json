{
	"address": "0x7600977eb9effa627d6bd0da2e5be35e11566341",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_011C:\n        \n            if (!msg.value) { revert(memory[0x00:0x00]); }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x08195e10) {\n                // Dispatch table entry for makerFeeRateE4()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x013f;\n                var var2 = makerFeeRateE4();\n            \n            label_013F:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2 & 0xffff;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x25e16063) {\n                // Dispatch table entry for withdrawEth(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                withdrawEth(var2);\n                stop();\n            } else if (var0 == 0x2f5e80c3) {\n                // Dispatch table entry for withdrawToken(address,uint16)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var var3 = msg.data[0x24:0x44] & 0xffff;\n                withdrawToken(var2, var3);\n                stop();\n            } else if (var0 == 0x37cb2162) {\n                // Dispatch table entry for 0x37cb2162 (unknown)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01eb;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n                var var4;\n                var var5;\n                var var6;\n                var var7;\n                var2, var3, var4, var5, var6, var7 = func_0D34(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0xffffffff;\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var3 & 0xff;\n                memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = var4 & 0xff;\n                memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = var5 & 0xffffffffffffffff;\n                memory[temp2 + 0x80:temp2 + 0x80 + 0x20] = var6 & 0xffffffffffffffff;\n                memory[temp2 + 0xa0:temp2 + 0xa0 + 0x20] = var7 & 0xffffffffffffffff;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0xc0) - temp3];\n            } else if (var0 == 0x53d142a7) {\n                // Dispatch table entry for setTokenInfo(uint16,string,address,uint64,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0xffff;\n                var temp4 = msg.data[0x24:0x44];\n                var temp5 = msg.data[temp4 + 0x04:temp4 + 0x04 + 0x20];\n                var temp6 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp6:temp6 + 0x20] = temp5;\n                memory[temp6 + 0x20:temp6 + 0x20 + temp5] = msg.data[temp4 + 0x24:temp4 + 0x24 + temp5];\n                var3 = temp6;\n                var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var5 = msg.data[0x64:0x84] & 0xffffffffffffffff;\n                var6 = msg.data[0x84:0xa4];\n                setTokenInfo(var2, var3, var4, var5, var6);\n                stop();\n            } else if (var0 == 0x624bd6c4) {\n                // Dispatch table entry for depositToken(address,uint16,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffff;\n                var4 = msg.data[0x44:0x64];\n                depositToken(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x722ded24) {\n                // Dispatch table entry for exeSequence(uint256,uint256[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24];\n                var temp7 = msg.data[0x24:0x44];\n                var3 = temp7 + 0x24;\n                var4 = msg.data[temp7 + 0x04:temp7 + 0x04 + 0x20];\n                exeSequence(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x7511ef65) {\n                // Dispatch table entry for setWithdrawAddr(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setWithdrawAddr(var2);\n                stop();\n            } else if (var0 == 0x8c32a2b1) {\n                // Dispatch table entry for deposits(uint64)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0366;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffff;\n                var2, var3, var4 = deposits(var2);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = var3 & 0xffff;\n                memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = var4 & 0xffffffffffffffff;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x60) - temp9];\n            } else if (var0 == 0x92a88fa2) {\n                // Dispatch table entry for traders(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03da;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2, var3 = traders(var2);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = var3 & 0xff;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x40) - temp11];\n            } else if (var0 == 0x951506d3) {\n                // Dispatch table entry for withdrawFeeRateE4()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = withdrawFeeRateE4();\n                goto label_013F;\n            } else if (var0 == 0xa1b8c40f) {\n                // Dispatch table entry for lastDepositIndex()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0432;\n                var2 = lastDepositIndex();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var2 & 0xffffffffffffffff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0xa45df835) {\n                // Dispatch table entry for 0xa45df835 (unknown)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047d;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffffffff;\n                var2, var3 = func_1D12(var2);\n            \n            label_047D:\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xffffffffffffffff;\n                memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = var3 & 0xffffffffffffffff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x40) - temp15];\n            } else if (var0 == 0xacfb208b) {\n                // Dispatch table entry for transferFee(uint16,uint64,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0xffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffff;\n                var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferFee(var2, var3, var4);\n                stop();\n            } else if (var0 == 0xad9d4ba3) {\n                // Dispatch table entry for depositEth(address)\n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                depositEth(var2);\n                stop();\n            } else if (var0 == 0xb8f6e7ff) {\n                // Dispatch table entry for changeMarketStatus(uint8)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                changeMarketStatus(var2);\n                stop();\n            } else if (var0 == 0xdd87c9f0) {\n                // Dispatch table entry for exeStatus()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047d;\n                var2, var3 = exeStatus();\n                goto label_047D;\n            } else if (var0 == 0xe056f2ff) {\n                // Dispatch table entry for takerFeeRateE4()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x013f;\n                var2 = takerFeeRateE4();\n                goto label_013F;\n            } else if (var0 == 0xe0e081d7) {\n                // Dispatch table entry for marketStatus()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0555;\n                var2 = marketStatus();\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var2 & 0xff;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0xf3c20de0) {\n                // Dispatch table entry for tokens(uint16)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0585;\n                var2 = msg.data[0x04:0x24] & 0xffff;\n                var2, var3, var4, var5 = tokens(var2);\n                var temp18 = memory[0x40:0x60];\n                var6 = temp18;\n                memory[var6 + 0x20:var6 + 0x20 + 0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[var6 + 0x40:var6 + 0x40 + 0x20] = var4 & 0xffffffffffffffff;\n                memory[var6 + 0x60:var6 + 0x60 + 0x20] = var5;\n                memory[var6:var6 + 0x20] = 0x80;\n                var7 = var6;\n                var temp19 = var7 + 0x80;\n                var temp20 = var2;\n                memory[temp19:temp19 + 0x20] = memory[temp20:temp20 + 0x20];\n                var var8 = temp19 + 0x20;\n                var var10 = memory[temp20:temp20 + 0x20];\n                var var9 = temp20 + 0x20;\n                var var11 = var10;\n                var var12 = var8;\n                var var13 = var9;\n                var var14 = 0x00;\n            \n                if (var14 >= var11) {\n                label_05F4:\n                    var temp21 = var10;\n                    var8 = temp21 + var8;\n                    var9 = temp21 & 0x1f;\n                \n                    if (!var9) {\n                        var temp22 = memory[0x40:0x60];\n                        return memory[temp22:temp22 + var8 - temp22];\n                    } else {\n                        var temp23 = var9;\n                        var temp24 = var8 - temp23;\n                        memory[temp24:temp24 + 0x20] = ~(0x0100 ** (0x20 - temp23) - 0x01) & memory[temp24:temp24 + 0x20];\n                        var temp25 = memory[0x40:0x60];\n                        return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n                    }\n                } else {\n                label_05E5:\n                    var temp26 = var14;\n                    memory[temp26 + var12:temp26 + var12 + 0x20] = memory[var13 + temp26:var13 + temp26 + 0x20];\n                    var14 = temp26 + 0x20;\n                \n                    if (var14 >= var11) { goto label_05F4; }\n                    else { goto label_05E5; }\n                }\n            } else if (var0 == 0xf851a440) {\n                // Dispatch table entry for admin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0645;\n                var2 = admin();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else { goto label_011C; }\n        }\n    }\n    \n    function makerFeeRateE4() returns (var r0) { return storage[0x02] / 0x0100 & 0xffff; }\n    \n    function withdrawEth(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length != 0x24) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = storage[keccak256(memory[0x00:0x40])] / 0x010000000000000000 & 0xffffffffffffffff;\n    \n        if (!var1) { goto label_088C; }\n    \n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & 0xffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var2 = var1 * 0x02540be400;\n        var3 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var3) {\n            var temp1 = var2;\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x00] = address(var3 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        \n            if (!temp3) { revert(memory[0x00:0x00]); }\n        \n        label_07C5:\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = 0x00 & 0xffff;\n            memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = var1 & 0xffffffffffffffff;\n            memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = storage[0x03] / 0x010000000000000000 & 0xffffffffffffffff;\n            memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = 0xa0;\n            memory[temp4 + 0xa0:temp4 + 0xa0 + 0x20] = 0x03;\n            memory[temp4 + 0xc0:temp4 + 0xc0 + 0x20] = 0x4554480000000000000000000000000000000000000000000000000000000000;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0xe0) - temp5], [0x7f6ff3208fa63e2d1f8034ca4710e5b59108a20cd613da81bb6dbbf9fe53ec70]);\n        \n        label_088C:\n            return;\n        } else {\n            var3 = arg0;\n            var temp6 = var2;\n            var temp7 = memory[0x40:0x60];\n            var temp8;\n            temp8, memory[temp7:temp7 + 0x00] = address(var3 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp7:temp7 + memory[0x40:0x60] - temp7]);\n        \n            if (temp8) { goto label_07C5; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function withdrawToken(var arg0, var arg1) {\n        var var0 = 0x089b;\n        var0 = func_3D67();\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg1 & 0xffff)) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length != 0x44) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0xffff;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0x80;\n        var var5 = temp1;\n        var var6 = temp0;\n        var var7 = var5;\n        var temp2 = var6;\n        var temp3 = storage[temp2];\n        var temp4 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n        var temp5 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp5 + (temp4 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var8 = temp5;\n        var var9 = temp2;\n        var var10 = temp4;\n        memory[var8:var8 + 0x20] = var10;\n        var var11 = var8 + 0x20;\n        var var12 = var9;\n        var temp6 = storage[var12];\n        var var13 = (!(temp6 & 0x01) * 0x0100 - 0x01 & temp6) / 0x02;\n    \n        if (!var13) {\n        label_0999:\n            var temp7 = var7;\n            memory[temp7:temp7 + 0x20] = var8;\n            var temp8 = var6;\n            var temp9 = storage[temp8 + 0x01];\n            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = temp9 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = temp9 / 0x010000000000000000000000000000000000000000 & 0xffffffffffffffff;\n            memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = storage[temp8 + 0x02];\n            var0 = var5;\n        \n            if (!(memory[var0 + 0x40:var0 + 0x40 + 0x20] & 0xffffffffffffffff)) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = ((arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (arg1 & 0xffff) * 0x010000000000000000000000000000000000000000) & 0xffffffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var1 = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (arg1 & 0xffff) * 0x010000000000000000000000000000000000000000;\n            var2 = storage[keccak256(memory[0x00:0x40])] / 0x010000000000000000 & 0xffffffffffffffff;\n        \n            if (!var2) { goto label_0D2B; }\n        \n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var temp10 = keccak256(memory[0x00:0x40]);\n            storage[temp10] = storage[temp10] & 0xffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff;\n            var5 = 0x05f5e100;\n            var6 = var2 * (memory[var0 + 0x40:var0 + 0x40 + 0x20] & 0xffffffffffffffff);\n        \n            if (!var5) { assert(); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var3 = var6 / var5;\n            var4 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var4) {\n                var temp11 = memory[var0 + 0x20:var0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var5 = temp11;\n                var6 = 0xa9059cbb;\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = var3;\n                var7 = temp12 + 0x44;\n                var8 = 0x20;\n                var9 = memory[0x40:0x60];\n                var10 = var7 - var9;\n                var11 = var9;\n                var12 = 0x00;\n                var13 = var5;\n            \n                if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n            \n            label_0BCA:\n                var temp13;\n                temp13, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n            \n                if (!temp13) { revert(memory[0x00:0x00]); }\n            \n                if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var temp14 = arg1;\n                memory[0x00:0x20] = temp14 & 0xffff;\n                memory[0x20:0x40] = 0x01;\n                var temp15 = keccak256(memory[0x00:0x40]);\n                var5 = 0x7f6ff3208fa63e2d1f8034ca4710e5b59108a20cd613da81bb6dbbf9fe53ec70;\n                var6 = arg0;\n                var7 = temp14;\n                var8 = temp15;\n                var9 = var2;\n                var10 = storage[0x03] / 0x010000000000000000 & 0xffffffffffffffff;\n                var temp16 = memory[0x40:0x60];\n                var11 = temp16;\n                memory[var11:var11 + 0x20] = var6 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[var11 + 0x20:var11 + 0x20 + 0x20] = var7 & 0xffff;\n                memory[var11 + 0x60:var11 + 0x60 + 0x20] = var9 & 0xffffffffffffffff;\n                memory[var11 + 0x80:var11 + 0x80 + 0x20] = var10 & 0xffffffffffffffff;\n                memory[var11 + 0x40:var11 + 0x40 + 0x20] = 0xa0;\n                var temp17 = storage[var8];\n                var temp18 = (temp17 & !(temp17 & 0x01) * 0x0100 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x02;\n                memory[var11 + 0xa0:var11 + 0xa0 + 0x20] = temp18;\n                var12 = var11 + 0x40;\n                var13 = var11 + 0xc0;\n                var var14 = var8;\n                var var15 = temp18;\n            \n                if (!var15) {\n                label_0D18:\n                    var temp19 = memory[0x40:0x60];\n                    log(memory[temp19:temp19 + var13 - temp19], [stack[-11]]);\n                \n                label_0D2B:\n                    return;\n                } else if (0x1f < var15) {\n                    var temp20 = var13;\n                    var temp21 = temp20 + var15;\n                    var13 = temp21;\n                    memory[0x00:0x20] = var14;\n                    var temp22 = keccak256(memory[0x00:0x20]);\n                    memory[temp20:temp20 + 0x20] = storage[temp22];\n                    var14 = temp22 + 0x01;\n                    var15 = temp20 + 0x20;\n                \n                    if (var13 <= var15) { goto label_0D0F; }\n                \n                label_0CFB:\n                    var temp23 = var14;\n                    var temp24 = var15;\n                    memory[temp24:temp24 + 0x20] = storage[temp23];\n                    var14 = temp23 + 0x01;\n                    var15 = temp24 + 0x20;\n                \n                    if (var13 > var15) { goto label_0CFB; }\n                \n                label_0D0F:\n                    var temp25 = var13;\n                    var temp26 = temp25 + (var15 - temp25 & 0x1f);\n                    var15 = temp25;\n                    var13 = temp26;\n                    goto label_0D18;\n                } else {\n                    var temp27 = var13;\n                    memory[temp27:temp27 + 0x20] = storage[var14] / 0x0100 * 0x0100;\n                    var15 = var15;\n                    var13 = temp27 + 0x20;\n                    goto label_0D18;\n                }\n            } else {\n                var4 = arg0;\n                var temp28 = memory[var0 + 0x20:var0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var5 = temp28;\n                var6 = 0xa9059cbb;\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = var3;\n                var7 = temp29 + 0x44;\n                var8 = 0x20;\n                var9 = memory[0x40:0x60];\n                var10 = var7 - var9;\n                var11 = var9;\n                var12 = 0x00;\n                var13 = var5;\n            \n                if (address(var13).code.length) { goto label_0BCA; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else if (0x1f < var13) {\n            var temp30 = var11;\n            var temp31 = temp30 + var13;\n            var11 = temp31;\n            memory[0x00:0x20] = var12;\n            var temp32 = keccak256(memory[0x00:0x20]);\n            memory[temp30:temp30 + 0x20] = storage[temp32];\n            var12 = temp32 + 0x01;\n            var13 = temp30 + 0x20;\n        \n            if (var11 <= var13) { goto label_0990; }\n        \n        label_097C:\n            var temp33 = var12;\n            var temp34 = var13;\n            memory[temp34:temp34 + 0x20] = storage[temp33];\n            var12 = temp33 + 0x01;\n            var13 = temp34 + 0x20;\n        \n            if (var11 > var13) { goto label_097C; }\n        \n        label_0990:\n            var temp35 = var11;\n            var temp36 = temp35 + (var13 - temp35 & 0x1f);\n            var13 = temp35;\n            var11 = temp36;\n            goto label_0999;\n        } else {\n            var temp37 = var11;\n            memory[temp37:temp37 + 0x20] = storage[var12] / 0x0100 * 0x0100;\n            var11 = temp37 + 0x20;\n            var13 = var13;\n            goto label_0999;\n        }\n    }\n    \n    function func_0D34(var arg0) returns (var arg0, var r1, var r2, var r3, var r4, var r5) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        arg0 = temp0 & 0xffffffff;\n        r1 = temp0 / 0x0100000000 & 0xff;\n        r2 = temp0 / 0x010000000000 & 0xff;\n        r3 = temp0 / 0x01000000000000 & 0xffffffffffffffff;\n        r4 = temp0 / 0x010000000000000000000000000000 & 0xffffffffffffffff;\n        r5 = temp0 / 0x0100000000000000000000000000000000000000000000 & 0xffffffffffffffff;\n        return arg0, r1, r2, r3, r4, r5;\n    }\n    \n    function setTokenInfo(var arg0, var arg1, var arg2, var arg3, var arg4) {\n        var var0 = 0x0db7;\n        var0 = func_3D67();\n    \n        if (storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x02] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg3 & 0xffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffff;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0x80;\n        var var1 = temp1;\n        var var2 = temp0;\n        var var3 = var1;\n        var temp2 = var2;\n        var temp3 = storage[temp2];\n        var temp4 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n        var temp5 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp5 + (temp4 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var4 = temp5;\n        var var5 = temp2;\n        var var6 = temp4;\n        memory[var4:var4 + 0x20] = var6;\n        var var7 = var4 + 0x20;\n        var var8 = var5;\n        var temp6 = storage[var8];\n        var var9 = (!(temp6 & 0x01) * 0x0100 - 0x01 & temp6) / 0x02;\n    \n        if (!var9) {\n        label_0EBF:\n            var temp7 = var3;\n            memory[temp7:temp7 + 0x20] = var4;\n            var temp8 = var2;\n            var temp9 = storage[temp8 + 0x01];\n            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = temp9 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = temp9 / 0x010000000000000000000000000000000000000000 & 0xffffffffffffffff;\n            memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = storage[temp8 + 0x02];\n            var0 = var1;\n        \n            if (!(memory[var0 + 0x40:var0 + 0x40 + 0x20] & 0xffffffffffffffff)) {\n                memory[0x00:0x20] = arg0 & 0xffff;\n                memory[0x20:0x40] = 0x01;\n                var temp10 = arg1;\n                var1 = 0x105c;\n                var2 = keccak256(memory[0x00:0x40]);\n                var3 = temp10 + 0x20;\n                var4 = memory[temp10:temp10 + 0x20];\n                var temp11 = var2;\n                var temp12 = storage[temp11];\n                memory[0x00:0x20] = temp11;\n                var5 = keccak256(memory[0x00:0x20]);\n                var temp13 = var3;\n                var3 = var5 + ((!(temp12 & 0x01) * 0x0100 - 0x01 & temp12) / 0x02 + 0x1f) / 0x20;\n                var6 = temp13;\n            \n                if (0x1f < var4) {\n                    var temp14 = var4;\n                    storage[var2] = temp14 + temp14 + 0x01;\n                \n                    if (!temp14) {\n                    label_3E04:\n                        var temp15 = var3;\n                        var3 = 0x3e10;\n                        var4 = temp15;\n                        var3 = func_3EB9(var4, var5);\n                        var1 = func_3E10(var2, var3);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp16 = var6;\n                        var temp17 = var4;\n                        var4 = temp16;\n                        var6 = var4 + temp17;\n                    \n                        if (var6 <= var4) { goto label_3E04; }\n                    \n                    label_3DF2:\n                        var temp18 = var4;\n                        var temp19 = var5;\n                        storage[temp19] = memory[temp18:temp18 + 0x20];\n                        var4 = temp18 + 0x20;\n                        var5 = temp19 + 0x01;\n                        var6 = var6;\n                    \n                        if (var6 <= var4) { goto label_3E04; }\n                        else { goto label_3DF2; }\n                    }\n                } else {\n                    var temp20 = var4;\n                    storage[var2] = temp20 + temp20 | (memory[var6:var6 + 0x20] & ~0xff);\n                    goto label_3E04;\n                }\n            } else {\n                var temp21 = arg0;\n                memory[0x00:0x20] = temp21 & 0xffff;\n                memory[0x20:0x40] = 0x01;\n                var temp22 = arg4;\n                storage[keccak256(memory[0x00:0x40]) + 0x02] = temp22;\n                var1 = 0x2bea0a0811f66be0b32925ea51a110967af6f7ea608abc41d6a2d2a8daa061bf;\n                var2 = temp21;\n                var temp23 = var0;\n                var temp24 = memory[temp23:temp23 + 0x20];\n                var3 = temp24;\n                var temp25 = memory[temp23 + 0x20:temp23 + 0x20 + 0x20];\n                var4 = temp25;\n                var temp26 = memory[temp23 + 0x40:temp23 + 0x40 + 0x20];\n                var5 = temp26;\n                var6 = temp22;\n                var temp27 = memory[0x40:0x60];\n                var7 = temp27;\n                memory[var7:var7 + 0x20] = var2 & 0xffff;\n                memory[var7 + 0x40:var7 + 0x40 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[var7 + 0x60:var7 + 0x60 + 0x20] = var5 & 0xffffffffffffffff;\n                memory[var7 + 0x80:var7 + 0x80 + 0x20] = var6;\n                memory[var7 + 0x20:var7 + 0x20 + 0x20] = 0xa0;\n                var8 = var7 + 0x20;\n                var temp28 = var7 + 0xa0;\n                memory[temp28:temp28 + 0x20] = memory[var3:var3 + 0x20];\n                var9 = temp28 + 0x20;\n                var var10 = var3 + 0x20;\n                var var11 = memory[var3:var3 + 0x20];\n                var var12 = var11;\n                var var13 = var9;\n                var var14 = var10;\n                var var15 = 0x00;\n            \n                if (var15 >= var12) {\n                label_0FF5:\n                    var temp29 = var11;\n                    var9 = temp29 + var9;\n                    var10 = temp29 & 0x1f;\n                \n                    if (!var10) {\n                        var temp30 = memory[0x40:0x60];\n                        log(memory[temp30:temp30 + var9 - temp30], [stack[-10]]);\n                    \n                    label_11E2:\n                        return;\n                    } else {\n                        var temp31 = var10;\n                        var temp32 = var9 - temp31;\n                        memory[temp32:temp32 + 0x20] = ~(0x0100 ** (0x20 - temp31) - 0x01) & memory[temp32:temp32 + 0x20];\n                        var temp33 = memory[0x40:0x60];\n                        log(memory[temp33:temp33 + (temp32 + 0x20) - temp33], [stack[-10]]);\n                        goto label_11E2;\n                    }\n                } else {\n                label_0FE6:\n                    var temp34 = var15;\n                    memory[temp34 + var13:temp34 + var13 + 0x20] = memory[var14 + temp34:var14 + temp34 + 0x20];\n                    var15 = temp34 + 0x20;\n                \n                    if (var15 >= var12) { goto label_0FF5; }\n                    else { goto label_0FE6; }\n                }\n            }\n        } else if (0x1f < var9) {\n            var temp35 = var7;\n            var temp36 = temp35 + var9;\n            var7 = temp36;\n            memory[0x00:0x20] = var8;\n            var temp37 = keccak256(memory[0x00:0x20]);\n            memory[temp35:temp35 + 0x20] = storage[temp37];\n            var8 = temp37 + 0x01;\n            var9 = temp35 + 0x20;\n        \n            if (var7 <= var9) { goto label_0EB6; }\n        \n        label_0EA2:\n            var temp38 = var8;\n            var temp39 = var9;\n            memory[temp39:temp39 + 0x20] = storage[temp38];\n            var8 = temp38 + 0x01;\n            var9 = temp39 + 0x20;\n        \n            if (var7 > var9) { goto label_0EA2; }\n        \n        label_0EB6:\n            var temp40 = var7;\n            var temp41 = temp40 + (var9 - temp40 & 0x1f);\n            var9 = temp40;\n            var7 = temp41;\n            goto label_0EBF;\n        } else {\n            var temp42 = var7;\n            memory[temp42:temp42 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n            var7 = temp42 + 0x20;\n            var9 = var9;\n            goto label_0EBF;\n        }\n    }\n    \n    function depositToken(var arg0, var arg1, var arg2) {\n        var var0 = 0x11f2;\n        var0 = func_3D67();\n        var var1 = 0x00;\n        var var2 = var1;\n    \n        if (storage[0x02] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg1 & 0xffff)) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length != 0x64) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0xffff;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0x80;\n        var var3 = temp1;\n        var var4 = temp0;\n        var var5 = var3;\n        var temp2 = var4;\n        var temp3 = storage[temp2];\n        var temp4 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n        var temp5 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp5 + (temp4 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var6 = temp5;\n        var var7 = temp2;\n        var var8 = temp4;\n        memory[var6:var6 + 0x20] = var8;\n        var var9 = var6 + 0x20;\n        var var10 = var7;\n        var temp6 = storage[var10];\n        var var11 = (!(temp6 & 0x01) * 0x0100 - 0x01 & temp6) / 0x02;\n    \n        if (!var11) {\n        label_1300:\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = var6;\n            var temp8 = var4;\n            var temp9 = storage[temp8 + 0x01];\n            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = temp9 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = temp9 / 0x010000000000000000000000000000000000000000 & 0xffffffffffffffff;\n            memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = storage[temp8 + 0x02];\n            var0 = var3;\n        \n            if (arg2 < memory[var0 + 0x60:var0 + 0x60 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            if (!(memory[var0 + 0x40:var0 + 0x40 + 0x20] & 0xffffffffffffffff)) { revert(memory[0x00:0x00]); }\n        \n            var temp10 = memory[var0 + 0x20:var0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = temp10;\n            var4 = 0x23b872dd;\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = msg.sender;\n            memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = address(this);\n            memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = arg2;\n            var5 = temp11 + 0x64;\n            var6 = 0x20;\n            var7 = memory[0x40:0x60];\n            var8 = var5 - var7;\n            var9 = var7;\n            var10 = 0x00;\n            var11 = var3;\n        \n            if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp12;\n            temp12, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n        \n            if (!temp12) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            if (arg2 > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b) { revert(memory[0x00:0x00]); }\n        \n            var3 = memory[var0 + 0x40:var0 + 0x40 + 0x20] & 0xffffffffffffffff;\n            var4 = arg2 * 0x05f5e100;\n        \n            if (!var3) { assert(); }\n        \n            var1 = var4 / var3;\n            var3 = var1 >= 0x010000000000000000;\n        \n            if (var3) {\n                if (var3) { revert(memory[0x00:0x00]); }\n            \n            label_14AE:\n                var temp13 = storage[0x02];\n                var2 = (temp13 / 0x0100000000000000 & 0xffffffffffffffff) + 0x01;\n                storage[0x02] = (var2 & 0xffffffffffffffff) * 0x0100000000000000 | (temp13 & 0xffffffffffffffffffffffffffffffffff0000000000000000ffffffffffffff);\n                var3 = 0x1508;\n                var4 = var2;\n                var5 = arg0;\n                var6 = arg1;\n                var7 = var1;\n                func_2567(var4, var5, var6, var7);\n                var temp14 = arg1;\n                memory[0x00:0x20] = temp14 & 0xffff;\n                memory[0x20:0x40] = 0x01;\n                var temp15 = keccak256(memory[0x00:0x40]);\n                var3 = 0x6d0d137345b2370af2f5ac7f9b3f4b13a25f0d552b2f16754f20131045607606;\n                var4 = arg0;\n                var6 = temp15;\n                var5 = temp14;\n                var7 = var1;\n                var8 = var2;\n                var temp16 = memory[0x40:0x60];\n                var9 = temp16;\n                memory[var9:var9 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[var9 + 0x20:var9 + 0x20 + 0x20] = var5 & 0xffff;\n                memory[var9 + 0x60:var9 + 0x60 + 0x20] = var7 & 0xffffffffffffffff;\n                memory[var9 + 0x80:var9 + 0x80 + 0x20] = var8 & 0xffffffffffffffff;\n                memory[var9 + 0x40:var9 + 0x40 + 0x20] = 0xa0;\n                var temp17 = storage[var6];\n                var temp18 = (temp17 & !(temp17 & 0x01) * 0x0100 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x02;\n                memory[var9 + 0xa0:var9 + 0xa0 + 0x20] = temp18;\n                var10 = var9 + 0x40;\n                var11 = var9 + 0xc0;\n                var var13 = temp18;\n                var var12 = var6;\n            \n                if (!var13) {\n                label_161A:\n                    var temp19 = memory[0x40:0x60];\n                    log(memory[temp19:temp19 + var11 - temp19], [stack[-11]]);\n                    return;\n                } else if (0x1f < var13) {\n                    var temp20 = var11;\n                    var temp21 = temp20 + var13;\n                    var11 = temp21;\n                    memory[0x00:0x20] = var12;\n                    var temp22 = keccak256(memory[0x00:0x20]);\n                    memory[temp20:temp20 + 0x20] = storage[temp22];\n                    var12 = temp22 + 0x01;\n                    var13 = temp20 + 0x20;\n                \n                    if (var11 <= var13) { goto label_1611; }\n                \n                label_15FD:\n                    var temp23 = var12;\n                    var temp24 = var13;\n                    memory[temp24:temp24 + 0x20] = storage[temp23];\n                    var12 = temp23 + 0x01;\n                    var13 = temp24 + 0x20;\n                \n                    if (var11 > var13) { goto label_15FD; }\n                \n                label_1611:\n                    var temp25 = var11;\n                    var temp26 = temp25 + (var13 - temp25 & 0x1f);\n                    var13 = temp25;\n                    var11 = temp26;\n                    goto label_161A;\n                } else {\n                    var temp27 = var11;\n                    memory[temp27:temp27 + 0x20] = storage[var12] / 0x0100 * 0x0100;\n                    var11 = temp27 + 0x20;\n                    var13 = var13;\n                    goto label_161A;\n                }\n            } else if (var1) { goto label_14AE; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (0x1f < var11) {\n            var temp28 = var9;\n            var temp29 = temp28 + var11;\n            var9 = temp29;\n            memory[0x00:0x20] = var10;\n            var temp30 = keccak256(memory[0x00:0x20]);\n            memory[temp28:temp28 + 0x20] = storage[temp30];\n            var10 = temp30 + 0x01;\n            var11 = temp28 + 0x20;\n        \n            if (var9 <= var11) { goto label_12F7; }\n        \n        label_12E3:\n            var temp31 = var10;\n            var temp32 = var11;\n            memory[temp32:temp32 + 0x20] = storage[temp31];\n            var10 = temp31 + 0x01;\n            var11 = temp32 + 0x20;\n        \n            if (var9 > var11) { goto label_12E3; }\n        \n        label_12F7:\n            var temp33 = var9;\n            var temp34 = temp33 + (var11 - temp33 & 0x1f);\n            var11 = temp33;\n            var9 = temp34;\n            goto label_1300;\n        } else {\n            var temp35 = var9;\n            memory[temp35:temp35 + 0x20] = storage[var10] / 0x0100 * 0x0100;\n            var9 = temp35 + 0x20;\n            var11 = var11;\n            goto label_1300;\n        }\n    }\n    \n    function exeSequence(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x1645;\n        var6 = func_3E14();\n        var var7 = 0x00;\n        var var8 = var7;\n        var var9 = 0x1650;\n        var9 = func_3E14();\n    \n        if (storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var0 = arg0;\n    \n        if (var0 & 0xffffffffffffffff != (storage[0x03] / 0x010000000000000000 & 0xffffffffffffffff) + 0x01 & 0xffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0 / 0x010000000000000000;\n    \n        if (var1 & 0xffffffffffffffff < storage[0x03] & 0xffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x00;\n    \n        if (var2 >= arg2) {\n        label_1B17:\n            var var10 = 0x1b24;\n            var var11 = var1;\n            var var12 = var0 - 0x01;\n            func_37BE(var11, var12);\n            return;\n        } else {\n        label_16E1:\n            var10 = arg1;\n            var11 = arg2;\n            var12 = var2;\n        \n            if (var12 >= var11) { assert(); }\n        \n            var temp0 = msg.data[var12 * 0x20 + var10:var12 * 0x20 + var10 + 0x20];\n            var3 = temp0 / 0x010000;\n            var4 = temp0 & 0xffff;\n        \n            if (var4 / 0x0100 != 0xde) { revert(memory[0x00:0x00]); }\n        \n            if (var4 == 0xde01) {\n                var10 = 0x172a;\n                var11 = var3;\n                func_264A(var11);\n                goto label_172A;\n            } else if (var4 == 0xde02) {\n                var10 = 0x172a;\n                var11 = var3;\n                var12 = var11 / 0x0100000000000000000000000000000000000000000000;\n                func_28FA(var11, var12);\n                goto label_172A;\n            } else if (!(storage[0x02] & 0xff)) {\n                if (var4 == 0xde03) {\n                    var temp2 = var3;\n                    var3 = temp2 / 0x0100;\n                    var5 = temp2;\n                \n                    if (var5 & 0xff) {\n                        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x06;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffff) { revert(memory[0x00:0x00]); }\n                    \n                        if (var2 + 0x04 >= arg2) { revert(memory[0x00:0x00]); }\n                    \n                        var10 = 0x18f4;\n                        var11 = var3;\n                        var12 = var5;\n                        var temp3 = arg2;\n                        var temp4 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp4 + temp3 * 0x20 + 0x20;\n                        var13 = temp4;\n                        memory[var13:var13 + 0x20] = temp3;\n                        var temp5 = temp3 * 0x20;\n                        memory[var13 + 0x20:var13 + 0x20 + temp5] = msg.data[arg1:arg1 + temp5];\n                        var var14 = var2;\n                        var10 = func_2B8E(var11, var12, var13, var14);\n                        var6 = var10;\n                        var2 = var2 + 0x04;\n                    \n                    label_18FD:\n                        var10 = arg1;\n                        var11 = arg2;\n                        var12 = var2;\n                    \n                        if (var12 >= var11) { assert(); }\n                    \n                        var7 = msg.data[var12 * 0x20 + var10:var12 * 0x20 + var10 + 0x20];\n                        var10 = 0x08;\n                        var11 = arg1;\n                        var12 = arg2;\n                        var13 = var2;\n                    \n                        if (var13 >= var12) { assert(); }\n                    \n                        var8 = msg.data[var13 * 0x20 + var11:var13 * 0x20 + var11 + 0x20] / 0x02 ** var10;\n                    \n                        if (var7 & 0xff != 0x00) {\n                            memory[0x00:0x20] = var8 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x06;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] & 0xffffffff) { revert(memory[0x00:0x00]); }\n                        \n                            if (var2 + 0x03 >= arg2) { revert(memory[0x00:0x00]); }\n                        \n                            var10 = 0x1a93;\n                            var11 = var8;\n                            var12 = var7;\n                            var temp6 = arg2;\n                            var temp7 = memory[0x40:0x60];\n                            memory[0x40:0x60] = temp7 + temp6 * 0x20 + 0x20;\n                            var13 = temp7;\n                            memory[var13:var13 + 0x20] = temp6;\n                            var temp8 = temp6 * 0x20;\n                            memory[var13 + 0x20:var13 + 0x20 + temp8] = msg.data[arg1:arg1 + temp8];\n                            var14 = var2;\n                            var10 = func_2B8E(var11, var12, var13, var14);\n                            var9 = var10;\n                            var2 = var2 + 0x04;\n                        \n                        label_1A9C:\n                            var10 = 0x1aa8;\n                            var11 = var3;\n                            var12 = var6;\n                            var13 = var8;\n                            var14 = var9;\n                            func_314F(var11, var12, var13, var14);\n                            goto label_1B0C;\n                        } else {\n                            memory[0x00:0x20] = var8 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x06;\n                            var temp9 = keccak256(memory[0x00:0x40]);\n                            var temp10 = memory[0x40:0x60];\n                            memory[0x40:0x60] = temp10 + 0xc0;\n                            var temp11 = storage[temp9];\n                            memory[temp10:temp10 + 0x20] = temp11 & 0xffffffff;\n                            memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp11 / 0x0100000000 & 0xff;\n                            memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = temp11 / 0x010000000000 & 0xff;\n                            memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = temp11 / 0x01000000000000 & 0xffffffffffffffff;\n                            memory[temp10 + 0x80:temp10 + 0x80 + 0x20] = temp11 / 0x010000000000000000000000000000 & 0xffffffffffffffff;\n                            memory[temp10 + 0xa0:temp10 + 0xa0 + 0x20] = temp11 / 0x0100000000000000000000000000000000000000000000 & 0xffffffffffffffff;\n                            var2 = var2 + 0x01;\n                            var9 = temp10;\n                            goto label_1A9C;\n                        }\n                    } else if (var2 + 0x01 < arg2) {\n                        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x06;\n                        var temp12 = keccak256(memory[0x00:0x40]);\n                        var temp13 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp13 + 0xc0;\n                        var temp14 = storage[temp12];\n                        memory[temp13:temp13 + 0x20] = temp14 & 0xffffffff;\n                        memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = temp14 / 0x0100000000 & 0xff;\n                        memory[temp13 + 0x40:temp13 + 0x40 + 0x20] = temp14 / 0x010000000000 & 0xff;\n                        memory[temp13 + 0x60:temp13 + 0x60 + 0x20] = temp14 / 0x01000000000000 & 0xffffffffffffffff;\n                        memory[temp13 + 0x80:temp13 + 0x80 + 0x20] = temp14 / 0x010000000000000000000000000000 & 0xffffffffffffffff;\n                        memory[temp13 + 0xa0:temp13 + 0xa0 + 0x20] = temp14 / 0x0100000000000000000000000000000000000000000000 & 0xffffffffffffffff;\n                        var2 = var2 + 0x01;\n                        var6 = temp13;\n                        goto label_18FD;\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var4 == 0xde04) {\n                    var10 = 0x172a;\n                    var11 = var3;\n                    func_34D5(var11);\n                    goto label_172A;\n                } else if (var4 == 0xde05) {\n                    var10 = 0x172a;\n                    var temp1 = var3;\n                    var11 = temp1;\n                    var12 = var11 / 0x010000;\n                    var var13 = var11 / 0x0100000000;\n                    func_35CB(var11, var12, var13);\n                    goto label_172A;\n                } else if (var4 != 0xde06) {\n                label_1B0C:\n                    var9 = var9;\n                    var0 = var0 + 0x01;\n                \n                    if (var2 >= arg2) { goto label_1B17; }\n                    else { goto label_16E1; }\n                } else {\n                    var10 = 0x172a;\n                    var11 = var3;\n                    var12 = var11 / 0x010000000000000000000000000000000000000000;\n                    func_36EB(var11, var12);\n                \n                label_172A:\n                    var2 = var2 + 0x01;\n                    goto label_1B0C;\n                }\n            } else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function setWithdrawAddr(var arg0) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        storage[temp1] = (temp2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp1] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x40) - temp4], [0x22ada3a1fa47ed4b75208e6ca30c33e1e69acbd292775a3dba6e7d03b80c10cb]);\n    }\n    \n    function deposits(var arg0) returns (var arg0, var r1, var r2) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        arg0 = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = temp0 / 0x010000000000000000000000000000000000000000 & 0xffff;\n        r2 = temp0 / 0x0100000000000000000000000000000000000000000000 & 0xffffffffffffffff;\n        return arg0, r1, r2;\n    }\n    \n    function traders(var arg0) returns (var arg0, var r1) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        arg0 = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = temp0 / 0x010000000000000000000000000000000000000000 & 0xff;\n        return arg0, r1;\n    }\n    \n    function withdrawFeeRateE4() returns (var r0) { return storage[0x02] / 0x010000000000 & 0xffff; }\n    \n    function lastDepositIndex() returns (var r0) { return storage[0x02] / 0x0100000000000000 & 0xffffffffffffffff; }\n    \n    function func_1D12(var arg0) returns (var arg0, var r1) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        arg0 = temp0 & 0xffffffffffffffff;\n        r1 = temp0 / 0x010000000000000000 & 0xffffffffffffffff;\n        return arg0, r1;\n    }\n    \n    function transferFee(var arg0, var arg1, var arg2) {\n        var var0 = 0x1d46;\n        var0 = func_3E49();\n        var var1 = 0x00;\n        var var2 = 0x1d50;\n        var2 = func_3D67();\n        var var3 = 0x00;\n    \n        if (storage[var3] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg2 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length != 0x64) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = (arg0 & 0xffff) * 0x010000000000000000000000000000000000000000 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0x40;\n        var temp2 = storage[temp0];\n        memory[temp1:temp1 + 0x20] = temp2 & 0xffffffffffffffff;\n        var temp3 = temp1 + 0x20;\n        memory[temp3:temp3 + 0x20] = temp2 / 0x010000000000000000 & 0xffffffffffffffff;\n        var0 = temp1;\n        var1 = memory[temp3:temp3 + 0x20];\n    \n        if (arg1 & 0xffffffffffffffff >= var1 & 0xffffffffffffffff) {\n            var temp4 = var0;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = memory[temp5:temp5 + 0x20] - var1 & 0xffffffffffffffff;\n            var temp6 = arg0;\n            memory[0x00:0x20] = (temp6 & 0xffff) * 0x010000000000000000000000000000000000000000 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            storage[temp7] = (memory[temp4:temp4 + 0x20] & 0xffffffffffffffff) | (storage[temp7] & 0xffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000);\n            storage[temp7] = (storage[temp7] & 0xffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff) | (memory[temp4 + 0x20:temp4 + 0x20 + 0x20] & 0xffffffffffffffff) * 0x010000000000000000;\n            memory[0x00:0x20] = temp6 & 0xffff;\n            memory[0x20:0x40] = 0x01;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            var temp9 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp9 + 0x80;\n            var var4 = temp9;\n            var var5 = temp8;\n            var var6 = var4;\n            var temp10 = var5;\n            var temp11 = storage[temp10];\n            var temp12 = (!(temp11 & 0x01) * 0x0100 - 0x01 & temp11) / 0x02;\n            var temp13 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp13 + (temp12 + 0x1f) / 0x20 * 0x20 + 0x20;\n            var var7 = temp13;\n            var var8 = temp10;\n            var var9 = temp12;\n            memory[var7:var7 + 0x20] = var9;\n            var var10 = var7 + 0x20;\n            var var11 = var8;\n            var temp14 = storage[var11];\n            var var12 = (!(temp14 & 0x01) * 0x0100 - 0x01 & temp14) / 0x02;\n        \n            if (!var12) {\n            label_1FD1:\n                var temp15 = var6;\n                memory[temp15:temp15 + 0x20] = var7;\n                var temp16 = var5;\n                var temp17 = storage[temp16 + 0x01];\n                memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = temp17 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = temp17 / 0x010000000000000000000000000000000000000000 & 0xffffffffffffffff;\n                memory[temp15 + 0x60:temp15 + 0x60 + 0x20] = storage[temp16 + 0x02];\n                var temp18 = var4;\n                var2 = temp18;\n                var4 = 0x05f5e100;\n                var5 = (var1 & 0xffffffffffffffff) * (memory[var2 + 0x40:var2 + 0x40 + 0x20] & 0xffffffffffffffff);\n            \n                if (!var4) { assert(); }\n            \n                var3 = var5 / var4;\n            \n                if (arg0 & 0xffff) {\n                    var temp19 = memory[var2 + 0x20:var2 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var4 = temp19;\n                    var5 = 0xa9059cbb;\n                    var temp20 = memory[0x40:0x60];\n                    memory[temp20:temp20 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                    memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = var3;\n                    var6 = temp20 + 0x44;\n                    var7 = 0x20;\n                    var8 = memory[0x40:0x60];\n                    var9 = var6 - var8;\n                    var10 = var8;\n                    var11 = 0x00;\n                    var12 = var4;\n                \n                    if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp21;\n                    temp21, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                \n                    if (!temp21) { revert(memory[0x00:0x00]); }\n                \n                    if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n                \n                label_215A:\n                    var temp22 = memory[0x40:0x60];\n                    memory[temp22:temp22 + 0x20] = arg0 & 0xffff;\n                    memory[temp22 + 0x20:temp22 + 0x20 + 0x20] = var1 & 0xffffffffffffffff;\n                    memory[temp22 + 0x40:temp22 + 0x40 + 0x20] = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp23 = memory[0x40:0x60];\n                    log(memory[temp23:temp23 + (temp22 + 0x60) - temp23], [0x637919f9a52c9374f773e049e9e260818d5c13c1942b60c45eb4d0e7ca712187]);\n                    return;\n                } else {\n                    var temp24 = var3;\n                    var temp25 = memory[0x40:0x60];\n                    var temp26;\n                    temp26, memory[temp25:temp25 + 0x00] = address(arg2 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp24 * 0x08fc).value(temp24)(memory[temp25:temp25 + memory[0x40:0x60] - temp25]);\n                \n                    if (temp26) { goto label_215A; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_1F8B:\n            \n                if (0x1f < var12) {\n                    var temp27 = var10;\n                    var temp28 = temp27 + var12;\n                    var10 = temp28;\n                    memory[0x00:0x20] = var11;\n                    var temp29 = keccak256(memory[0x00:0x20]);\n                    memory[temp27:temp27 + 0x20] = storage[temp29];\n                    var11 = temp29 + 0x01;\n                    var12 = temp27 + 0x20;\n                \n                    if (var10 <= var12) { goto label_1FC8; }\n                \n                label_1FB4:\n                    var temp30 = var11;\n                    var temp31 = var12;\n                    memory[temp31:temp31 + 0x20] = storage[temp30];\n                    var11 = temp30 + 0x01;\n                    var12 = temp31 + 0x20;\n                \n                    if (var10 > var12) { goto label_1FB4; }\n                \n                label_1FC8:\n                    var temp32 = var10;\n                    var temp33 = temp32 + (var12 - temp32 & 0x1f);\n                    var12 = temp32;\n                    var10 = temp33;\n                    goto label_1FD1;\n                } else {\n                    var temp34 = var10;\n                    memory[temp34:temp34 + 0x20] = storage[var11] / 0x0100 * 0x0100;\n                    var10 = temp34 + 0x20;\n                    var12 = var12;\n                    goto label_1FD1;\n                }\n            }\n        } else {\n            var1 = arg1;\n            var temp35 = var0;\n            var temp36 = temp35 + 0x20;\n            memory[temp36:temp36 + 0x20] = memory[temp36:temp36 + 0x20] - var1 & 0xffffffffffffffff;\n            var temp37 = arg0;\n            memory[0x00:0x20] = (temp37 & 0xffff) * 0x010000000000000000000000000000000000000000 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var temp38 = keccak256(memory[0x00:0x40]);\n            storage[temp38] = (memory[temp35:temp35 + 0x20] & 0xffffffffffffffff) | (storage[temp38] & 0xffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000);\n            storage[temp38] = (storage[temp38] & 0xffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff) | (memory[temp35 + 0x20:temp35 + 0x20 + 0x20] & 0xffffffffffffffff) * 0x010000000000000000;\n            memory[0x00:0x20] = temp37 & 0xffff;\n            memory[0x20:0x40] = 0x01;\n            var temp39 = keccak256(memory[0x00:0x40]);\n            var temp40 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp40 + 0x80;\n            var5 = temp39;\n            var4 = temp40;\n            var6 = var4;\n            var temp41 = var5;\n            var temp42 = storage[temp41];\n            var temp43 = (!(temp42 & 0x01) * 0x0100 - 0x01 & temp42) / 0x02;\n            var temp44 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp44 + (temp43 + 0x1f) / 0x20 * 0x20 + 0x20;\n            var7 = temp44;\n            var8 = temp41;\n            var9 = temp43;\n            memory[var7:var7 + 0x20] = var9;\n            var10 = var7 + 0x20;\n            var11 = var8;\n            var temp45 = storage[var11];\n            var12 = (!(temp45 & 0x01) * 0x0100 - 0x01 & temp45) / 0x02;\n        \n            if (!var12) { goto label_1FD1; }\n            else { goto label_1F8B; }\n        }\n    }\n    \n    function depositEth(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[0x02] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = 0x00;\n        memory[0x20:0x40] = 0x01;\n    \n        if (msg.value < storage[0xa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4b]) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length != 0x24) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.value / 0x02540be400;\n    \n        if (!(var0 & 0xffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x02];\n        var1 = (temp0 / 0x0100000000000000 & 0xffffffffffffffff) + 0x01;\n        storage[0x02] = (var1 & 0xffffffffffffffff) * 0x0100000000000000 | (temp0 & 0xffffffffffffffffffffffffffffffffff0000000000000000ffffffffffffff);\n        var var2 = 0x22c4;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = 0x00;\n        var var6 = var0;\n        func_2567(var3, var4, var5, var6);\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0x00 & 0xffff;\n        memory[temp1 + 0x60:temp1 + 0x60 + 0x20] = var0 & 0xffffffffffffffff;\n        memory[temp1 + 0x80:temp1 + 0x80 + 0x20] = var1 & 0xffffffffffffffff;\n        memory[temp1 + 0x40:temp1 + 0x40 + 0x20] = 0xa0;\n        memory[temp1 + 0xa0:temp1 + 0xa0 + 0x20] = 0x03;\n        memory[temp1 + 0xc0:temp1 + 0xc0 + 0x20] = 0x4554480000000000000000000000000000000000000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0xe0) - temp2], [0x6d0d137345b2370af2f5ac7f9b3f4b13a25f0d552b2f16754f20131045607606]);\n    }\n    \n    function changeMarketStatus(var arg0) {\n        if (storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x02] & 0xff == 0x02) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        storage[0x02] = (temp0 & 0xff) | (storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00);\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x8853484ae4a06c3395f689a3fa189b683f6542d0f6af1c3aa07b25e219cd08da]);\n    }\n    \n    function exeStatus() returns (var r0, var r1) {\n        var temp0 = storage[0x03];\n        r0 = temp0 & 0xffffffffffffffff;\n        r1 = temp0 / 0x010000000000000000 & 0xffffffffffffffff;\n        return r0, r1;\n    }\n    \n    function takerFeeRateE4() returns (var r0) { return storage[0x02] / 0x01000000 & 0xffff; }\n    \n    function marketStatus() returns (var r0) { return storage[0x02] & 0xff; }\n    \n    function tokens(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        arg0 = keccak256(memory[0x00:0x40]);\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r1 = temp3;\n        r2 = temp0;\n        r3 = temp2;\n        memory[r1:r1 + 0x20] = r3;\n        var var3 = r1 + 0x20;\n        var var4 = r2;\n        var temp4 = storage[var4];\n        var var5 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var5) {\n        label_24FA:\n            var temp5 = arg0;\n            var temp6 = storage[temp5 + 0x01];\n            arg0 = r1;\n            r1 = temp6 & 0xffffffffffffffffffffffffffffffffffffffff;\n            r3 = storage[temp5 + 0x02];\n            r2 = temp6 / 0x010000000000000000000000000000000000000000 & 0xffffffffffffffff;\n            return arg0, r1, r2, r3;\n        } else if (0x1f < var5) {\n            var temp7 = var3;\n            var temp8 = temp7 + var5;\n            var3 = temp8;\n            memory[0x00:0x20] = var4;\n            var temp9 = keccak256(memory[0x00:0x20]);\n            memory[temp7:temp7 + 0x20] = storage[temp9];\n            var4 = temp9 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 <= var5) { goto label_24F1; }\n        \n        label_24DD:\n            var temp10 = var4;\n            var temp11 = var5;\n            memory[temp11:temp11 + 0x20] = storage[temp10];\n            var4 = temp10 + 0x01;\n            var5 = temp11 + 0x20;\n        \n            if (var3 > var5) { goto label_24DD; }\n        \n        label_24F1:\n            var temp12 = var3;\n            var temp13 = temp12 + (var5 - temp12 & 0x1f);\n            var5 = temp12;\n            var3 = temp13;\n            goto label_24FA;\n        } else {\n            var temp14 = var3;\n            memory[temp14:temp14 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp14 + 0x20;\n            var5 = var5;\n            goto label_24FA;\n        }\n    }\n    \n    function admin() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_2567(var arg0, var arg1, var arg2, var arg3) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (((((storage[temp0] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000) | (arg1 & 0xffffffffffffffffffffffffffffffffffffffff)) & 0xffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff) | (arg2 & 0xffff) * 0x010000000000000000000000000000000000000000) & 0xffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffff) | (arg3 & 0xffffffffffffffff) * 0x0100000000000000000000000000000000000000000000;\n    }\n    \n    function func_264A(var arg0) {\n        var var0 = 0x2652;\n        var0 = func_3E60();\n        var var1 = 0x00;\n        var var2 = 0x265c;\n        var2 = func_3E49();\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0x60;\n        var temp2 = storage[temp0];\n        memory[temp1:temp1 + 0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp2 / 0x010000000000000000000000000000000000000000 & 0xffff;\n        memory[temp1 + 0x40:temp1 + 0x40 + 0x20] = temp2 / 0x0100000000000000000000000000000000000000000000 & 0xffffffffffffffff;\n        var0 = temp1;\n        var1 = (memory[var0 + 0x20:var0 + 0x20 + 0x20] & 0xffff) * 0x02 ** 0xa0 | (memory[var0:var0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff);\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + 0x40;\n        var temp5 = storage[temp3];\n        memory[temp4:temp4 + 0x20] = temp5 & 0xffffffffffffffff;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp5 / 0x010000000000000000 & 0xffffffffffffffff;\n        var2 = temp4;\n    \n        if (memory[var2:var2 + 0x20] + memory[var0 + 0x40:var0 + 0x40 + 0x20] & 0xffffffffffffffff <= memory[var2:var2 + 0x20] & 0xffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var0;\n        var temp7 = var2;\n        memory[temp7:temp7 + 0x20] = memory[temp6 + 0x40:temp6 + 0x40 + 0x20] + memory[temp7:temp7 + 0x20] & 0xffffffffffffffff;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        storage[temp8] = storage[temp8] & 0xffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffff;\n        var temp9 = memory[temp6 + 0x40:temp6 + 0x40 + 0x20];\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        var temp11 = storage[temp10];\n        storage[temp10] = ((temp11 & 0xffffffffffffffff) + temp9 & 0xffffffffffffffff) | (temp11 & 0xffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000);\n        var temp12 = memory[temp6 + 0x20:temp6 + 0x20 + 0x20];\n        var temp13 = memory[temp7:temp7 + 0x20];\n        var temp14 = memory[0x40:0x60];\n        memory[temp14:temp14 + 0x20] = memory[temp6:temp6 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = temp12 & 0xffff;\n        memory[temp14 + 0x40:temp14 + 0x40 + 0x20] = temp13 & 0xffffffffffffffff;\n        var temp15 = memory[0x40:0x60];\n        log(memory[temp15:temp15 + (temp14 + 0x60) - temp15], [0x5c70f6625b9efb544c7deb2881a25ef395af15b7dbd129b2353a92a48681e6b6]);\n    }\n    \n    function func_28FA(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp0 & 0xffffffffffffffff;\n        var var1 = temp0 / 0x010000000000000000 & 0xffffffffffffffff;\n        var var2 = 0x00;\n        var var3 = var0 < arg1 & 0xffffffffffffffff;\n    \n        if (var3) {\n            if (var3) { revert(memory[0x00:0x00]); }\n        \n        label_2961:\n            var0 = var0 - arg1;\n            var3 = 0x2982;\n            var var4 = arg1;\n            var var5 = storage[0x02] / 0x010000000000 & 0xffff;\n            var var6 = arg0;\n            var3 = func_382C(var4, var5, var6);\n            var2 = var3;\n            var temp1 = arg1 - var2;\n            arg1 = temp1;\n        \n            if (var1 + arg1 & 0xffffffffffffffff < arg1 & 0xffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (arg1 + var1 & 0xffffffffffffffff) * 0x010000000000000000 | (((var0 & 0xffffffffffffffff) | (storage[temp3] & 0xffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000)) & 0xffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff);\n            memory[0x00:0x20] = temp2 & 0xffff0000000000000000000000000000000000000000;\n            var1 = arg1 + var1;\n            var temp4 = var2;\n        \n            if (temp4 + (storage[keccak256(memory[0x00:0x40])] / 0x010000000000000000 & 0xffffffffffffffff) & 0xffffffffffffffff < temp4 & 0xffffffffffffffff) {\n                var temp5 = arg0;\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = temp5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = (temp5 & 0xffffffffffffffffffffffffffffffffffffffffffff) / 0x010000000000000000000000000000000000000000 & 0xffff;\n                memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = arg1 & 0xffffffffffffffff;\n                memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = var1 & 0xffffffffffffffff;\n                var temp7 = memory[0x40:0x60];\n                log(memory[temp7:temp7 + (temp6 + 0x80) - temp7], [0xeec77ff572621cf4b96c534f6afb74c1879d42e7470cb3d41cce416ab31ca95a]);\n                return;\n            } else {\n                var temp8 = arg0;\n                memory[0x00:0x20] = temp8 & 0xffff0000000000000000000000000000000000000000;\n                memory[0x20:0x40] = 0x05;\n                var temp9 = keccak256(memory[0x00:0x40]);\n                var temp10 = storage[temp9];\n                storage[temp9] = (temp10 & 0xffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff) | (var2 + (temp10 / 0x010000000000000000 & 0xffffffffffffffff) & 0xffffffffffffffff) * 0x010000000000000000;\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = temp8 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = (temp8 & 0xffffffffffffffffffffffffffffffffffffffffffff) / 0x010000000000000000000000000000000000000000 & 0xffff;\n                memory[temp11 + 0x40:temp11 + 0x40 + 0x20] = arg1 & 0xffffffffffffffff;\n                memory[temp11 + 0x60:temp11 + 0x60 + 0x20] = var1 & 0xffffffffffffffff;\n                var temp12 = memory[0x40:0x60];\n                log(memory[temp12:temp12 + (temp11 + 0x80) - temp12], [0xeec77ff572621cf4b96c534f6afb74c1879d42e7470cb3d41cce416ab31ca95a]);\n                return;\n            }\n        } else if (arg1 & 0xffffffffffffffff) { goto label_2961; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2B8E(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x2b96;\n        var0 = func_3E14();\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = 0x00;\n        var var4 = var3;\n        var var5 = 0x00;\n        var var6 = var5;\n        var var7 = 0x2ba7;\n        var7 = func_3E14();\n        var var8 = arg2;\n        var var9 = arg3 + 0x01;\n    \n        if (var9 >= memory[var8:var8 + 0x20]) { assert(); }\n    \n        var1 = memory[var9 * 0x20 + var8 + 0x20:var9 * 0x20 + var8 + 0x20 + 0x20];\n        var temp0 = arg0;\n        var2 = (temp0 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x010000000000000000000000000000000000000000;\n        var3 = temp0;\n    \n        if (!(var3 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a373044457832;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0x204f726465723a20000000000000000000000000000000000000000000000000;\n        memory[temp1 + 0x28:temp1 + 0x28 + 0x20] = address(this) * 0x01000000000000000000000000;\n        memory[temp1 + 0x3c:temp1 + 0x3c + 0x20] = (var2 & 0xffffffffffffffff) * 0x01000000000000000000000000000000000000000000000000;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = (var1 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) * 0x010000;\n        var temp2 = memory[0x40:0x60];\n        var4 = keccak256(memory[temp2:temp2 + (temp1 + 0x62) - temp2]);\n        var8 = 0x01;\n        var9 = var4;\n        var var10 = arg1;\n        var var11 = arg2;\n        var var12 = arg3 + 0x02;\n    \n        if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n    \n        var11 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n        var12 = arg2;\n        var var13 = arg3 + 0x03;\n    \n        if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n    \n        var temp3 = memory[var13 * 0x20 + var12 + 0x20:var13 * 0x20 + var12 + 0x20 + 0x20];\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = 0x00;\n        memory[0x40:0x60] = temp4 + 0x20;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = var9;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var10 & 0xff;\n        memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = var11;\n        memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = temp3;\n        var9 = temp5 + 0x80;\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6 - 0x20:temp6 - 0x20 + 0x20] = address(var8).staticcall.gas(msg.gas)(memory[temp6:temp6 + var9 - temp6]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff == var3 & 0xffffffffffffffffffffffffffffffffffffffff) {\n        label_30BB:\n            var temp8 = var1;\n            var temp9 = var7;\n            memory[temp9:temp9 + 0x20] = temp8 & 0xffffffff;\n            var temp10 = (temp8 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x0100000000;\n            memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = temp10 & 0xff;\n            var temp11 = (temp10 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x0100;\n            memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = temp11 & 0xff;\n            var temp12 = (temp11 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x0100;\n            memory[temp9 + 0x60:temp9 + 0x60 + 0x20] = temp12 & 0xffffffffffffffff;\n            var temp13 = (temp12 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x010000000000000000;\n            memory[temp9 + 0x80:temp9 + 0x80 + 0x20] = temp13 & 0xffffffffffffffff;\n            memory[temp9 + 0xa0:temp9 + 0xa0 + 0x20] = (temp13 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x010000000000000000 & 0xffffffffffffffff;\n            return temp9;\n        } else {\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = 0x44457832204f7264657200000000000000000000000000000000000000000000;\n            memory[temp14 + 0x0a:temp14 + 0x0a + 0x20] = address(this) * 0x01000000000000000000000000;\n            memory[temp14 + 0x1e:temp14 + 0x1e + 0x20] = (var2 & 0xffffffffffffffff) * 0x01000000000000000000000000000000000000000000000000;\n            memory[temp14 + 0x26:temp14 + 0x26 + 0x20] = (var1 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) * 0x010000;\n            var temp15 = memory[0x40:0x60];\n            var temp16 = keccak256(memory[temp15:temp15 + (temp14 + 0x44) - temp15]);\n            var5 = temp16;\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x737472696e67207469746c650000000000000000000000000000000000000000;\n            memory[temp17 + 0x0c:temp17 + 0x0c + 0x20] = 0x61646472657373206d61726b65745f6164647265737300000000000000000000;\n            memory[temp17 + 0x22:temp17 + 0x22 + 0x20] = 0x75696e743634206e6f6e63650000000000000000000000000000000000000000;\n            memory[temp17 + 0x2e:temp17 + 0x2e + 0x20] = 0x75696e743634206578706972655f74696d655f73656300000000000000000000;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x75696e74363420616d6f756e745f653800000000000000000000000000000000;\n            memory[temp17 + 0x54:temp17 + 0x54 + 0x20] = 0x75696e7436342070726963655f65380000000000000000000000000000000000;\n            memory[temp17 + 0x63:temp17 + 0x63 + 0x20] = 0x75696e743820696d6d6564696174655f6f725f63616e63656c00000000000000;\n            memory[temp17 + 0x7c:temp17 + 0x7c + 0x20] = 0x75696e743820616374696f6e0000000000000000000000000000000000000000;\n            memory[temp17 + 0x88:temp17 + 0x88 + 0x20] = 0x75696e74313620636173685f746f6b656e5f636f646500000000000000000000;\n            memory[temp17 + 0x9e:temp17 + 0x9e + 0x20] = 0x75696e7431362073746f636b5f746f6b656e5f636f6465000000000000000000;\n            var temp18 = memory[0x40:0x60];\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = keccak256(memory[temp18:temp18 + (temp17 + 0xb5) - temp18]);\n            memory[temp19 + 0x20:temp19 + 0x20 + 0x20] = var5;\n            var temp20 = memory[0x40:0x60];\n            var6 = keccak256(memory[temp20:temp20 + (temp19 + 0x40) - temp20]);\n            var8 = 0x01;\n            var9 = var6;\n            var10 = arg1;\n            var11 = arg2;\n            var12 = arg3 + 0x02;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var11 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var12 = arg2;\n            var13 = arg3 + 0x03;\n        \n            if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n        \n            var temp21 = memory[var13 * 0x20 + var12 + 0x20:var13 * 0x20 + var12 + 0x20 + 0x20];\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp22 + 0x20;\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = var9;\n            memory[temp23 + 0x20:temp23 + 0x20 + 0x20] = var10 & 0xff;\n            memory[temp23 + 0x40:temp23 + 0x40 + 0x20] = var11;\n            memory[temp23 + 0x60:temp23 + 0x60 + 0x20] = temp21;\n            var9 = temp23 + 0x80;\n            var temp24 = memory[0x40:0x60];\n            var temp25;\n            temp25, memory[temp24 - 0x20:temp24 - 0x20 + 0x20] = address(var8).staticcall.gas(msg.gas)(memory[temp24:temp24 + var9 - temp24]);\n        \n            if (!temp25) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff == var3 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_30BB; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_314F(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = 0x3157;\n        var0 = func_3E80();\n    \n        if (storage[0x02] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff == arg2 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (memory[arg1:arg1 + 0x20] & 0xffffffff != memory[arg3:arg3 + 0x20] & 0xffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (memory[arg1 + 0x20:arg1 + 0x20 + 0x20] & 0xff == memory[arg3 + 0x20:arg3 + 0x20 + 0x20] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = !(memory[arg1 + 0x60:arg1 + 0x60 + 0x20] & 0xffffffffffffffff);\n    \n        if (var1) {\n            if (var1) { revert(memory[0x00:0x00]); }\n        \n        label_3216:\n            var1 = !(memory[arg1 + 0x20:arg1 + 0x20 + 0x20] & 0xff);\n        \n            if (!var1) {\n                if (var1) { revert(memory[0x00:0x00]); }\n            \n            label_3250:\n                var1 = !(memory[arg3 + 0x20:arg3 + 0x20 + 0x20] & 0xff);\n            \n                if (!var1) {\n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                label_328A:\n                    var1 = !(memory[arg1 + 0x80:arg1 + 0x80 + 0x20] & 0xffffffffffffffff);\n                \n                    if (var1) {\n                        if (var1) { revert(memory[0x00:0x00]); }\n                    \n                    label_32BB:\n                    \n                        if (memory[arg1 + 0xa0:arg1 + 0xa0 + 0x20] & 0xffffffffffffffff <= storage[0x03] & 0xffffffffffffffff) { revert(memory[0x00:0x00]); }\n                    \n                        if (memory[arg3 + 0xa0:arg3 + 0xa0 + 0x20] & 0xffffffffffffffff <= storage[0x03] & 0xffffffffffffffff) { revert(memory[0x00:0x00]); }\n                    \n                        var1 = 0x3320;\n                        var temp0 = arg1;\n                        var var2 = memory[temp0:temp0 + 0x20];\n                        var var3 = memory[temp0 + 0x60:temp0 + 0x60 + 0x20];\n                        var var4 = memory[temp0 + 0x80:temp0 + 0x80 + 0x20];\n                        var var5 = memory[arg3 + 0x80:arg3 + 0x80 + 0x20];\n                        var1 = func_3895(var2, var3, var4, var5);\n                        var temp1 = var1;\n                        var0 = temp1;\n                        var1 = 0x3345;\n                        var2 = var0;\n                        var3 = arg0;\n                        var4 = storage[0x02] / 0x0100 & 0xffff;\n                        var5 = !(memory[arg1 + 0x20:arg1 + 0x20 + 0x20] & 0xff);\n                        func_395B(var2, var3, var4, var5);\n                        var1 = 0x3369;\n                        var2 = var0;\n                        var3 = arg2;\n                        var4 = storage[0x02] / 0x01000000 & 0xffff;\n                        var5 = !(memory[arg3 + 0x20:arg3 + 0x20 + 0x20] & 0xff);\n                        func_395B(var2, var3, var4, var5);\n                    \n                        if (memory[arg1 + 0x40:arg1 + 0x40 + 0x20] & 0xff != 0x01) {\n                            var temp2 = arg1 + 0x80;\n                            memory[temp2:temp2 + 0x20] = memory[temp2:temp2 + 0x20] - memory[var0 + 0x40:var0 + 0x40 + 0x20] & 0xffffffffffffffff;\n                        \n                            if (memory[arg3 + 0x40:arg3 + 0x40 + 0x20] & 0xff != 0x01) {\n                            label_33BC:\n                                var temp3 = arg3 + 0x80;\n                                memory[temp3:temp3 + 0x20] = memory[temp3:temp3 + 0x20] - memory[var0 + 0x40:var0 + 0x40 + 0x20] & 0xffffffffffffffff;\n                                var1 = 0x33fb;\n                                var2 = arg0;\n                                var temp4 = arg1;\n                                var3 = memory[temp4:temp4 + 0x20];\n                                var4 = memory[temp4 + 0x20:temp4 + 0x20 + 0x20];\n                                var5 = memory[temp4 + 0x40:temp4 + 0x40 + 0x20];\n                                var var6 = memory[temp4 + 0x60:temp4 + 0x60 + 0x20];\n                                var var7 = memory[temp4 + 0x80:temp4 + 0x80 + 0x20];\n                                var var8 = memory[temp4 + 0xa0:temp4 + 0xa0 + 0x20];\n                                func_3BEA(var2, var3, var4, var5, var6, var7, var8);\n                            \n                            label_33FB:\n                                var1 = 0x341f;\n                                var2 = arg2;\n                                var temp5 = arg3;\n                                var3 = memory[temp5:temp5 + 0x20];\n                                var4 = memory[temp5 + 0x20:temp5 + 0x20 + 0x20];\n                                var5 = memory[temp5 + 0x40:temp5 + 0x40 + 0x20];\n                                var6 = memory[temp5 + 0x60:temp5 + 0x60 + 0x20];\n                                var7 = memory[temp5 + 0x80:temp5 + 0x80 + 0x20];\n                                var8 = memory[temp5 + 0xa0:temp5 + 0xa0 + 0x20];\n                                func_3BEA(var2, var3, var4, var5, var6, var7, var8);\n                                var temp6 = arg0;\n                                var temp7 = arg2;\n                                var temp8 = memory[0x40:0x60];\n                                memory[temp8:temp8 + 0x20] = temp6 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = (temp6 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x010000000000000000000000000000000000000000 & 0xffffffffffffffff;\n                                memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = temp7 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[temp8 + 0x60:temp8 + 0x60 + 0x20] = (temp7 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x010000000000000000000000000000000000000000 & 0xffffffffffffffff;\n                                var temp9 = memory[0x40:0x60];\n                                log(memory[temp9:temp9 + (temp8 + 0x80) - temp9], [0xf9f438e06428b6123b3c14646c5933b422676f1822e7b82e19f6d1333ebf640c]);\n                                return;\n                            } else {\n                            label_33B1:\n                                memory[arg3 + 0x80:arg3 + 0x80 + 0x20] = 0x00;\n                                var1 = 0x33fb;\n                                var2 = arg0;\n                                var temp10 = arg1;\n                                var3 = memory[temp10:temp10 + 0x20];\n                                var4 = memory[temp10 + 0x20:temp10 + 0x20 + 0x20];\n                                var5 = memory[temp10 + 0x40:temp10 + 0x40 + 0x20];\n                                var6 = memory[temp10 + 0x60:temp10 + 0x60 + 0x20];\n                                var7 = memory[temp10 + 0x80:temp10 + 0x80 + 0x20];\n                                var8 = memory[temp10 + 0xa0:temp10 + 0xa0 + 0x20];\n                                func_3BEA(var2, var3, var4, var5, var6, var7, var8);\n                                goto label_33FB;\n                            }\n                        } else {\n                            memory[arg1 + 0x80:arg1 + 0x80 + 0x20] = 0x00;\n                        \n                            if (memory[arg3 + 0x40:arg3 + 0x40 + 0x20] & 0xff != 0x01) { goto label_33BC; }\n                            else { goto label_33B1; }\n                        }\n                    } else if (memory[arg3 + 0x80:arg3 + 0x80 + 0x20] & 0xffffffffffffffff) { goto label_32BB; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (memory[arg3 + 0x60:arg3 + 0x60 + 0x20] & 0xffffffffffffffff >= memory[arg1 + 0x60:arg1 + 0x60 + 0x20] & 0xffffffffffffffff) { goto label_328A; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (memory[arg1 + 0x60:arg1 + 0x60 + 0x20] & 0xffffffffffffffff >= memory[arg3 + 0x60:arg3 + 0x60 + 0x20] & 0xffffffffffffffff) { goto label_3250; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (memory[arg3 + 0x60:arg3 + 0x60 + 0x20] & 0xffffffffffffffff) { goto label_3216; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_34D5(var arg0) {\n        var temp0 = arg0;\n        var temp1 = temp0 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = ((storage[temp2] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000) | 0xffffffff) & 0xffffffffffffffffffff0000000000000000ffffffffffffffffffffffffffff;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp1 / 0x010000000000000000000000000000000000000000 & 0xffffffffffffffff;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x40) - temp4], [0x2ba90bac5da1e0e1c1f7387d9bb5d469e6a4d002c6e1ff5608cd9c40764b9c77]);\n    }\n    \n    function func_35CB(var arg0, var arg1, var arg2) {\n        if (arg0 & 0xffff > 0x3c) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0xffff > 0x3c) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 & 0xffff > 0x3c) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = arg1;\n        var temp2 = arg2;\n        storage[0x02] = (temp2 & 0xffff) * 0x010000000000 | (((temp1 & 0xffff) * 0x01000000 | (((temp0 & 0xffff) * 0x0100 | (storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff)) & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffffff)) & 0xffffffffffffffffffffffffffffffffffffffffffffffffff0000ffffffffff);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0 & 0xffff;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp1 & 0xffff;\n        memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = temp2 & 0xffff;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x60) - temp4], [0x4791147decc4394f7fd13853909dcce56c68c0f1643bc82bb183c4bf3b1c801c]);\n    }\n    \n    function func_36EB(var arg0, var arg1) {\n        if (arg1 & 0xff > 0x64) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1;\n        storage[temp1] = (temp2 & 0xff) * 0x010000000000000000000000000000000000000000 | (storage[temp1] & 0xffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp2 & 0xff;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x40) - temp4], [0x2129162b34d9f289e001ee201157cb73c7a3286a81706d9c3c99a1b54d10cce2]);\n    }\n    \n    function func_37BE(var arg0, var arg1) {\n        storage[0x03] = (((storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000) | (arg0 & 0xffffffffffffffff)) & 0xffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff) | (arg1 & 0xffffffffffffffff) * 0x010000000000000000;\n    }\n    \n    function func_382C(var arg0, var arg1, var arg2) returns (var r0) {\n        memory[0x00:0x20] = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = (arg1 * (arg0 & 0xffffffffffffffff)) / 0x2710;\n        return temp0 - (temp0 * (storage[keccak256(memory[0x00:0x40])] / 0x010000000000000000000000000000000000000000 & 0xff)) / 0x64;\n    }\n    \n    function func_3895(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x389d;\n        var0 = func_3E80();\n        var temp0 = arg0;\n        var temp1 = var0;\n        memory[temp1:temp1 + 0x20] = temp0 & 0xffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = (temp0 & 0xffffffff) / 0x010000 & 0xffff;\n        var var1 = 0x00;\n    \n        if (memory[temp1:temp1 + 0x20] & 0xffff == memory[temp2:temp2 + 0x20] & 0xffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 & 0xffffffffffffffff < arg3 & 0xffffffffffffffff) {\n            var temp3 = var0 + 0x40;\n            memory[temp3:temp3 + 0x20] = arg2 & 0xffffffffffffffff;\n            var var2 = 0x05f5e100;\n            var var3 = (arg1 & 0xffffffffffffffff) * (memory[temp3:temp3 + 0x20] & 0xffffffffffffffff);\n        \n            if (!var2) { assert(); }\n        \n        label_392C:\n            var1 = var3 / var2;\n        \n            if (var1 >= 0x010000000000000000) { revert(memory[0x00:0x00]); }\n        \n            memory[var0 + 0x60:var0 + 0x60 + 0x20] = var1 & 0xffffffffffffffff;\n            return var0;\n        } else {\n            var2 = arg3;\n            var temp4 = var0 + 0x40;\n            memory[temp4:temp4 + 0x20] = var2 & 0xffffffffffffffff;\n            var2 = 0x05f5e100;\n            var3 = (arg1 & 0xffffffffffffffff) * (memory[temp4:temp4 + 0x20] & 0xffffffffffffffff);\n        \n            if (var2) { goto label_392C; }\n            else { assert(); }\n        }\n    }\n    \n    function func_395B(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n    \n        if (arg3) {\n            var0 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20];\n        \n            if (arg3) {\n            label_3989:\n                var1 = memory[arg0:arg0 + 0x20];\n            \n                if (arg3) {\n                label_399D:\n                    var2 = memory[arg0 + 0x60:arg0 + 0x60 + 0x20];\n                \n                    if (arg3) {\n                    label_39B4:\n                        var3 = memory[arg0 + 0x40:arg0 + 0x40 + 0x20];\n                        var temp0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var4 = temp0 | (var0 & 0xffff) * 0x010000000000000000000000000000000000000000;\n                        var5 = (var1 & 0xffff) * 0x010000000000000000000000000000000000000000 | temp0;\n                        var var7 = 0x3a08;\n                        var var8 = var3;\n                        var var9 = arg2;\n                        var var10 = arg1;\n                        var7 = func_382C(var8, var9, var10);\n                    \n                    label_3A08:\n                        memory[0x00:0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var3 = var3 - var7;\n                        var6 = var7;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffff < var2 & 0xffffffffffffffff) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var temp1 = var3;\n                    \n                        if (temp1 + (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffff) & 0xffffffffffffffff < temp1 & 0xffffffffffffffff) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x00:0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var temp2 = keccak256(memory[0x00:0x40]);\n                        var temp3 = storage[temp2];\n                        storage[temp2] = (temp3 & 0xffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000) | ((temp3 & 0xffffffffffffffff) - var2 & 0xffffffffffffffff);\n                        memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n                        var temp4 = keccak256(memory[0x00:0x40]);\n                        var temp5 = storage[temp4];\n                        storage[temp4] = (temp5 & 0xffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000) | (var3 + (temp5 & 0xffffffffffffffff) & 0xffffffffffffffff);\n                        memory[0x00:0x20] = (var1 & 0xffff) * 0x010000000000000000000000000000000000000000 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n                        var temp6 = var6;\n                    \n                        if (temp6 + (storage[keccak256(memory[0x00:0x40])] / 0x010000000000000000 & 0xffffffffffffffff) & 0xffffffffffffffff < temp6 & 0xffffffffffffffff) { return; }\n                    \n                        memory[0x00:0x20] = (var1 & 0xffff) * 0x010000000000000000000000000000000000000000 & 0xffffffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var temp7 = keccak256(memory[0x00:0x40]);\n                        var temp8 = storage[temp7];\n                        storage[temp7] = (temp8 & 0xffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff) | (var6 + (temp8 / 0x010000000000000000 & 0xffffffffffffffff) & 0xffffffffffffffff) * 0x010000000000000000;\n                        return;\n                    } else {\n                    label_39AB:\n                        var7 = memory[arg0 + 0x60:arg0 + 0x60 + 0x20];\n                        var temp9 = var7;\n                        var3 = temp9;\n                        var temp10 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var4 = temp10 | (var0 & 0xffff) * 0x010000000000000000000000000000000000000000;\n                        var5 = (var1 & 0xffff) * 0x010000000000000000000000000000000000000000 | temp10;\n                        var7 = 0x3a08;\n                        var8 = var3;\n                        var9 = arg2;\n                        var10 = arg1;\n                        var7 = func_382C(var8, var9, var10);\n                        goto label_3A08;\n                    }\n                } else {\n                label_3994:\n                    var7 = memory[arg0 + 0x40:arg0 + 0x40 + 0x20];\n                    var2 = var7;\n                \n                    if (arg3) { goto label_39B4; }\n                    else { goto label_39AB; }\n                }\n            } else {\n            label_3980:\n                var7 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20];\n                var1 = var7;\n            \n                if (arg3) { goto label_399D; }\n                else { goto label_3994; }\n            }\n        } else {\n            var7 = memory[arg0:arg0 + 0x20];\n            var0 = var7;\n        \n            if (arg3) { goto label_3989; }\n            else { goto label_3980; }\n        }\n    }\n    \n    function func_3BEA(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (arg6 & 0xffffffffffffffff) * 0x0100000000000000000000000000000000000000000000 | (((arg5 & 0xffffffffffffffff) * 0x010000000000000000000000000000 | (((arg4 & 0xffffffffffffffff) * 0x01000000000000 | (((arg3 & 0xff) * 0x010000000000 | (((arg2 & 0xff) * 0x0100000000 | (((arg1 & 0xffffffff) | (storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000)) & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff)) & 0xffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffff)) & 0xffffffffffffffffffffffffffffffffffff0000000000000000ffffffffffff)) & 0xffffffffffffffffffff0000000000000000ffffffffffffffffffffffffffff)) & 0xffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_3D67() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        var var0 = temp0;\n        memory[0x40:0x60] = var0 + 0x80;\n        var var1 = var0;\n        var var2 = 0x3d7b;\n        var2 = func_3EA7();\n        var temp1 = var1;\n        memory[temp1:temp1 + 0x20] = var2;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = 0x00;\n        memory[temp1 + 0x40:temp1 + 0x40 + 0x20] = 0x00;\n        memory[temp1 + 0x60:temp1 + 0x60 + 0x20] = 0x00;\n        return var0;\n    }\n    \n    function func_3E10(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_3E14() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xc0;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x00;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x00;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x00;\n        memory[temp0 + 0xa0:temp0 + 0xa0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_3E49() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_3E60() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_3E80() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x80;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x00;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_3EA7() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_3EB9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x3ed3;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_3E10(arg1, var0); }\n    \n    label_3EC8:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_3EC8; }\n    \n        arg0 = func_3E10(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 34481 tokens. Please reduce the length of the messages."
}