{
	"address": "0x7da90089a73edd14c75b0c827cb54f4248d47ecc",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\ndef storage:\n  stor0 is address at storage 0\n  stor1 is address at storage 1\n  stor1 is uint256 at storage 1\n  stor2 is uint256 at storage 2\n  investorIDs is mapping of uint256 at storage 3\n  investors is mapping of struct at storage 4\n  numInvestors is uint256 at storage 5\n  invested is uint256 at storage 6\n  owner is address at storage 7\n  isStopped is uint8 at storage 8 offset 160\n  houseAddress is address at storage 8\n  stor9 is address at storage 9\n  stor10 is uint256 at storage 10\n  bets is mapping of struct at storage 11\n  betsKeys is array of uint256 at storage 12\n  investorsProfit is uint256 at storage 13\n  investorsLosses is uint256 at storage 14\n  stor15 is uint8 at storage 15\n\ndef numInvestors(): # not payable\n  return numInvestors\n\ndef isStopped(): # not payable\n  return bool(isStopped)\n\ndef investors(uint256 _param1): # not payable\n  return investors[_param1].field_0, investors[_param1].field_256, bool(investors[_param1].field_512)\n\ndef investorsLosses(): # not payable\n  return investorsLosses\n\ndef investorsProfit(): # not payable\n  return investorsProfit\n\ndef investorIDs(address _param1): # not payable\n  return investorIDs[_param1]\n\ndef betsKeys(uint256 _param1): # not payable\n  require _param1 < betsKeys.length\n  return betsKeys[_param1]\n\ndef owner(): # not payable\n  return owner\n\ndef bets(bytes32 _param1): # not payable\n  return bets[_param1].field_0, bets[_param1].field_256, bets[_param1].field_512\n\ndef invested(): # not payable\n  return invested\n\ndef houseAddress(): # not payable\n  return houseAddress\n\ndef numBets(): # not payable\n  return betsKeys.length\n\n#\n#  Regular functions\n#\n\ndef proposedWithdrawal(): # not payable\n  return stor9, stor10\n\ndef stopContract(): # not payable\n  require owner == caller\n  isStopped = 1\n  log LOG_ContractStopped()\n\ndef resumeContract(): # not payable\n  require owner == caller\n  isStopped = 0\n  log LOG_ContractResumed()\n\ndef getProfitShare(address currentInvestor): # not payable\n  require invested\n  return (investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested)\n\ndef getLossesShare(address currentInvestor): # not payable\n  require invested\n  return (investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested)\n\ndef changeOwnerAddress(address newOwner): # not payable\n  require owner == caller\n  require newOwner\n  owner = newOwner\n  log LOG_OwnerAddressChanged(\n        address oldAddr=address(newOwner),\n        address newOwnerAddress=newOwner)\n\ndef changeHouseAddress(address newHouse): # not payable\n  require owner == caller\n  require newHouse\n  houseAddress = newHouse\n  log LOG_HouseAddressChanged(\n        address oldAddr=address(newHouse),\n        address newHouseAddress=newHouse)\n\ndef changeGasLimitOfSafeSend(uint256 newGasLimit): # not payable\n  require owner == caller\n  require newGasLimit + 175000 >= 175000\n  require newGasLimit >= 25000\n  stor2 = newGasLimit\n  log LOG_GasLimitChanged(\n        uint256 oldGasLimit=newGasLimit,\n        uint256 newGasLimit=newGasLimit)\n\ndef getBet(uint256 id): # not payable\n  if id >= betsKeys.length:\n      return 0\n  return bets[stor12[id]].field_0, bets[stor12[id]].field_256, bets[stor12[id]].field_512\n\ndef voteEmergencyWithdrawal(bool vote): # not payable\n  require investorIDs[caller]\n  require stor9\n  require isStopped\n  investors[stor3[caller]].field_512 = uint8(vote)\n  log LOG_EmergencyWithdrawalVote(\n        address investor=caller,\n        bool vote=vote)\n\ndef getBankroll(): # not payable\n  if invested >= investorsProfit:\n      if invested + investorsProfit >= invested:\n          if invested + investorsProfit >= investorsLosses:\n              return (invested + investorsProfit - investorsLosses)\n          else:\n              return 0\n      else:\n          return 0\n  else:\n      return 0\n\ndef proposeEmergencyWithdrawal(address withdrawalAddress): # not payable\n  require isStopped\n  require owner == caller\n  idx = 1\n  while idx <= numInvestors:\n      mem[0] = idx\n      mem[32] = 4\n      investors[idx].field_512 = 0\n      idx = idx + 1\n      continue \n  stor9 = withdrawalAddress\n  stor10 = block.timestamp\n  log LOG_EmergencyWithdrawalProposed()\n\ndef getMinBetAmount(): # not payable\n  require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).getPrice(string _datasource, uint256 _gaslimit) with:\n       gas gas_remaining - 50 wei\n      args 0, 64, stor2 + 175000, 3, 0x55524c0000000000000000000000000000000000000000000000000000000000\n  require ext_call.success\n  return (ext_call.return_data[0] + 2 * 10^17)\n\ndef newInvestor() payable: \n  require not isStopped\n  require call.value\n  require not investorIDs[caller]\n  if numInvestors == 10:\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  require call.value > 0\n  if not stor15:\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  if numInvestors == 10:\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  numInvestors++\n  investorIDs[caller] = numInvestors + 1\n  investors[stor5 + 1].field_0 = caller\n  investors[stor5 + 1].field_256 = call.value\n  invested += call.value\n  log LOG_InvestorEntrance(\n        address investor=caller,\n        uint256 amount=call.value)\n  require numInvestors <= 10\n\ndef getMaxBetAmount(): # not payable\n  require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).getPrice(string _datasource, uint256 _gaslimit) with:\n       gas gas_remaining - 50 wei\n      args 0, 64, stor2 + 175000, 3, 0x55524c0000000000000000000000000000000000000000000000000000000000\n  require ext_call.success\n  if invested >= investorsProfit:\n      if invested + investorsProfit >= invested:\n          if invested + investorsProfit >= investorsLosses:\n              return (((250 * 3600 * invested) + (250 * 3600 * investorsProfit) - (250 * 3600 * investorsLosses) / 2250 * 3600) + ext_call.return_data[0])\n  return ext_call.return_data[0]\n\ndef changeOraclizeConfig(bytes32 _config): # not payable\n  require owner == caller\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n  require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).setConfig(bytes32 config_) with:\n       gas gas_remaining - 50 wei\n      args _config\n  require ext_call.success\n\ndef changeOraclizeProofType(bytes1 _proofType): # not payable\n  require owner == caller\n  require Mask(8, 248, _proofType)\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n  require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).setProofType(bytes1 _proofType) with:\n       gas gas_remaining - 50 wei\n      args 1, 0\n  require ext_call.success\n\ndef executeEmergencyWithdrawal(): # not payable\n  require owner == caller\n  require stor9\n  require isStopped\n  require stor10 + (72 * 24 * 3600) <= block.timestamp\n  idx = 1\n  s = 0\n  while idx <= numInvestors:\n      mem[0] = idx\n      mem[32] = 4\n      if bool(investors[idx].field_512) != 1:\n          idx = idx + 1\n          s = s\n          continue \n      mem[0] = idx\n      mem[32] = 4\n      investors[idx].field_512 = 0\n      idx = idx + 1\n      s = s + 1\n      continue \n  require s >= 10 * numInvestors / 100\n  call stor9 with:\n     value eth.balance(this.address) wei\n       gas 2300 * is_zero(value) wei\n  if ext_call.success:\n      log LOG_EmergencyWithdrawalSucceeded(\n            address withdrawalAddress=stor9,\n            uint256 amountWithdrawn=eth.balance(this.address))\n  else:\n      log LOG_EmergencyWithdrawalFailed(address withdrawalAddress=stor9)\n\ndef __callback(bytes32 myid, string result): # not payable\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n  require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).cbAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  require caller == ext_call.return_data[12 len 20]\n  require bets[myid].field_0\n  require bets[myid].field_512 <= 0\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef __callback(bytes32 myid, string result, bytes proof): # not payable\n  if not stor0:\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n      else:\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) > 0:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          else:\n              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n  require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).cbAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  require caller == ext_call.return_data[12 len 20]\n  require bets[myid].field_0\n  require bets[myid].field_512 <= 0\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef getBalance(address _address): # not payable\n  require invested\n  if investors[stor3[address(_address)]].field_256 + (investorsProfit * investors[stor3[address(_address)]].field_256 / invested) >= investorsProfit * investors[stor3[address(_address)]].field_256 / invested:\n      if investors[stor3[address(_address)]].field_256 + (investorsProfit * investors[stor3[address(_address)]].field_256 / invested) >= investors[stor3[address(_address)]].field_256:\n          if investors[stor3[address(_address)]].field_256 + (investorsProfit * investors[stor3[address(_address)]].field_256 / invested) >= investorsLosses * investors[stor3[address(_address)]].field_256 / invested:\n              return (investors[stor3[address(_address)]].field_256 + (investorsProfit * investors[stor3[address(_address)]].field_256 / invested) - (investorsLosses * investors[stor3[address(_address)]].field_256 / invested))\n          else:\n              return 0\n      else:\n          return 0\n  else:\n      return 0\n\ndef increaseInvestment() payable: \n  require not isStopped\n  require call.value\n  require investorIDs[caller]\n  if not stor15:\n      s = 0\n      s = 0\n      s = 0\n      idx = 1\n      s = 0\n      while idx <= numInvestors:\n          require invested\n          if investors[idx].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) < investors[idx].field_256:\n              isStopped = 1\n              log LOG_EmergencyAutoStop()\n          else:\n              if (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) + investors[idx].field_256 < investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                  isStopped = 1\n                  log LOG_EmergencyAutoStop()\n              else:\n                  investors[idx].field_256 = (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested) + investors[idx].field_256\n                  mem[96] = investors[idx].field_0\n                  mem[128] = (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested)\n                  log LOG_InvestorCapitalUpdate(\n                        address investor=investors[idx].field_0,\n                        int256 amount=(investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested))\n          mem[0] = idx\n          mem[32] = 4\n          if s + investors[idx].field_256 < s:\n              s = investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested\n              s = investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested\n              s = investors[idx].field_0\n              idx = idx + 1\n              s = s\n              continue \n          mem[0] = idx\n          mem[32] = 4\n          s = investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested\n          s = investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested\n          s = investors[idx].field_0\n          idx = idx + 1\n          s = investors[idx].field_256 + s\n          continue \n      investorsProfit = 0\n      investorsLosses = 0\n      invested = s\n      stor15 = 1\n  investors[stor3[caller]].field_256 += call.value\n  invested += call.value\n\ndef searchSmallestInvestor(): # not payable\n  idx = 1\n  while idx <= numInvestors:\n      require invested\n      require invested\n      mem[0] = investorIDs[stor4[idx].field_0]\n      mem[32] = 4\n      if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) < investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested:\n          if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n              if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                  if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n      else:\n          if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) < investors[stor3[investors[1].field_0]].field_256:\n              if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                  if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n          else:\n              if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested:\n                  if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                          if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) < investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n              else:\n                  if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                          if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n      idx = idx + 1\n      continue \n  return 1\n\ndef getMinInvestment(): # not payable\n  if numInvestors == 10:\n      idx = 1\n      while idx <= numInvestors:\n          require invested\n          require invested\n          mem[0] = investorIDs[stor4[idx].field_0]\n          mem[32] = 4\n          if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) < investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested:\n              if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                  if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n          else:\n              if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) < investors[stor3[investors[1].field_0]].field_256:\n                  if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                          if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n              else:\n                  if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested:\n                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                          if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                              if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) < investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                  else:\n                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                          if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                              if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n          idx = idx + 1\n          continue \n      require invested\n      if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested:\n          if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investors[stor3[investors[1].field_0]].field_256:\n              if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested:\n                  return (investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested))\n      return 0\n  else:\n      return 0\n\ndef divest(): # not payable\n  require investorIDs[caller]\n  if not stor15:\n      s = 0\n      s = 0\n      s = 0\n      idx = 1\n      s = 0\n      while idx <= numInvestors:\n          require invested\n          if investors[idx].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) < investors[idx].field_256:\n              isStopped = 1\n              log LOG_EmergencyAutoStop()\n          else:\n              if (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) + investors[idx].field_256 < investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                  isStopped = 1\n                  log LOG_EmergencyAutoStop()\n              else:\n                  investors[idx].field_256 = (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested) + investors[idx].field_256\n                  mem[96] = investors[idx].field_0\n                  mem[128] = (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested)\n                  log LOG_InvestorCapitalUpdate(\n                        address investor=investors[idx].field_0,\n                        int256 amount=(investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested))\n          mem[0] = idx\n          mem[32] = 4\n          if s + investors[idx].field_256 < s:\n              s = investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested\n              s = investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested\n              s = investors[idx].field_0\n              idx = idx + 1\n              s = s\n              continue \n          mem[0] = idx\n          mem[32] = 4\n          s = investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested\n          s = investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested\n          s = investors[idx].field_0\n          idx = idx + 1\n          s = investors[idx].field_256 + s\n          continue \n      investorsProfit = 0\n      investorsLosses = 0\n      invested = s\n      stor15 = 1\n  require invested\n  if investors[stor3[caller]].field_256 + (investorsProfit * investors[stor3[caller]].field_256 / invested) < investorsProfit * investors[stor3[caller]].field_256 / invested:\n      if invested < investors[stor3[caller]].field_256:\n          isStopped = 1\n          log LOG_EmergencyAutoStop()\n      else:\n          invested -= investors[stor3[caller]].field_256\n          investors[stor3[caller]].field_0 = 0\n          investors[stor3[caller]].field_256 = 0\n          investors[stor3[caller]].field_512 = 0\n          investorIDs[caller] = 0\n          if investorIDs[caller] != numInvestors:\n              investorIDs[stor4[stor5].field_0] = investorIDs[caller]\n              investors[stor3[caller]].field_0 = investors[stor5].field_0\n              investors[stor3[caller]].field_64 = 0\n              investors[stor3[caller]].field_256 = investors[stor5].field_256\n              investors[stor3[caller]].field_512 = 0\n              investors[stor5].field_0 = 0\n              investors[stor5].field_256 = 0\n              investors[stor5].field_512 = 0\n          numInvestors--\n          log LOG_ZeroSend()\n          log LOG_ZeroSend()\n          log LOG_InvestorExit(\n                address investor=caller,\n                uint256 amount=0)\n  else:\n      if investors[stor3[caller]].field_256 + (investorsProfit * investors[stor3[caller]].field_256 / invested) < investors[stor3[caller]].field_256:\n          if invested < investors[stor3[caller]].field_256:\n              isStopped = 1\n              log LOG_EmergencyAutoStop()\n          else:\n              invested -= investors[stor3[caller]].field_256\n              investors[stor3[caller]].field_0 = 0\n              investors[stor3[caller]].field_256 = 0\n              investors[stor3[caller]].field_512 = 0\n              investorIDs[caller] = 0\n              if investorIDs[caller] != numInvestors:\n                  investorIDs[stor4[stor5].field_0] = investorIDs[caller]\n                  investors[stor3[caller]].field_0 = investors[stor5].field_0\n                  investors[stor3[caller]].field_64 = 0\n                  investors[stor3[caller]].field_256 = investors[stor5].field_256\n                  investors[stor3[caller]].field_512 = 0\n                  investors[stor5].field_0 = 0\n                  investors[stor5].field_256 = 0\n                  investors[stor5].field_512 = 0\n              numInvestors--\n              log LOG_ZeroSend()\n              log LOG_ZeroSend()\n              log LOG_InvestorExit(\n                    address investor=caller,\n                    uint256 amount=0)\n      else:\n          if investors[stor3[caller]].field_256 + (investorsProfit * investors[stor3[caller]].field_256 / invested) < investorsLosses * investors[stor3[caller]].field_256 / invested:\n              if invested < investors[stor3[caller]].field_256:\n                  isStopped = 1\n                  log LOG_EmergencyAutoStop()\n              else:\n                  invested -= investors[stor3[caller]].field_256\n                  investors[stor3[caller]].field_0 = 0\n                  investors[stor3[caller]].field_256 = 0\n                  investors[stor3[caller]].field_512 = 0\n                  investorIDs[caller] = 0\n                  if investorIDs[caller] != numInvestors:\n                      investorIDs[stor4[stor5].field_0] = investorIDs[caller]\n                      investors[stor3[caller]].field_0 = investors[stor5].field_0\n                      investors[stor3[caller]].field_64 = 0\n                      investors[stor3[caller]].field_256 = investors[stor5].field_256\n                      investors[stor3[caller]].field_512 = 0\n                      investors[stor5].field_0 = 0\n                      investors[stor5].field_256 = 0\n                      investors[stor5].field_512 = 0\n                  numInvestors--\n                  log LOG_ZeroSend()\n                  log LOG_ZeroSend()\n                  log LOG_InvestorExit(\n                        address investor=caller,\n                        uint256 amount=0)\n          else:\n              if invested < investors[stor3[caller]].field_256:\n                  isStopped = 1\n                  log LOG_EmergencyAutoStop()\n              else:\n                  invested -= investors[stor3[caller]].field_256\n                  investors[stor3[caller]].field_0 = 0\n                  investors[stor3[caller]].field_256 = 0\n                  investors[stor3[caller]].field_512 = 0\n                  investorIDs[caller] = 0\n                  if investorIDs[caller] != numInvestors:\n                      investorIDs[stor4[stor5].field_0] = investorIDs[caller]\n                      investors[stor3[caller]].field_0 = investors[stor5].field_0\n                      investors[stor3[caller]].field_64 = 0\n                      investors[stor3[caller]].field_256 = investors[stor5].field_256\n                      investors[stor3[caller]].field_512 = 0\n                      investors[stor5].field_0 = 0\n                      investors[stor5].field_256 = 0\n                      investors[stor5].field_512 = 0\n                  numInvestors--\n                  if not investors[stor3[caller]].field_256 + (investorsProfit * investors[stor3[caller]].field_256 / invested) - (investorsLosses * investors[stor3[caller]].field_256 / invested) - ((50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000):\n                      log LOG_ZeroSend()\n                  else:\n                      if eth.balance(this.address) < investors[stor3[caller]].field_256 + (investorsProfit * investors[stor3[caller]].field_256 / invested) - (investorsLosses * investors[stor3[caller]].field_256 / invested) - ((50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000):\n                          log LOG_ValueIsTooBig()\n                      else:\n                          call caller with:\n                             value investors[stor3[caller]].field_256 + (investorsProfit * investors[stor3[caller]].field_256 / invested) - (investorsLosses * investors[stor3[caller]].field_256 / invested) - ((50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000) wei\n                               gas stor2 wei\n                          if not ext_call.success:\n                              log LOG_FailedSend(\n                                    address receiver=caller,\n                                    uint256 amount=investors[stor3[caller]].field_256 + (investorsProfit * investors[stor3[caller]].field_256 / invested) - (investorsLosses * investors[stor3[caller]].field_256 / invested) - ((50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000))\n                              if houseAddress != caller:\n                                  call houseAddress with:\n                                     value investors[stor3[caller]].field_256 + (investorsProfit * investors[stor3[caller]].field_256 / invested) - (investorsLosses * investors[stor3[caller]].field_256 / invested) - ((50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000) wei\n                                       gas stor2 wei\n                                  if not ext_call.success:\n                                      log LOG_FailedSend(\n                                            address receiver=houseAddress,\n                                            uint256 amount=investors[stor3[caller]].field_256 + (investorsProfit * investors[stor3[caller]].field_256 / invested) - (investorsLosses * investors[stor3[caller]].field_256 / invested) - ((50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000))\n                          log LOG_SuccessfulSend(\n                                address addr=caller,\n                                uint256 amount=investors[stor3[caller]].field_256 + (investorsProfit * investors[stor3[caller]].field_256 / invested) - (investorsLosses * investors[stor3[caller]].field_256 / invested) - ((50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000))\n                  if not (50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000:\n                      log LOG_ZeroSend()\n                  else:\n                      if eth.balance(this.address) < (50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000:\n                          log LOG_ValueIsTooBig()\n                      else:\n                          call houseAddress with:\n                             value (50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000 wei\n                               gas stor2 wei\n                          if not ext_call.success:\n                              log LOG_FailedSend(\n                                    address receiver=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000)\n                              if houseAddress != houseAddress:\n                                  call houseAddress with:\n                                     value (50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000 wei\n                                       gas stor2 wei\n                                  if not ext_call.success:\n                                      log LOG_FailedSend(\n                                            address receiver=houseAddress,\n                                            uint256 amount=(50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000)\n                          log LOG_SuccessfulSend(\n                                address addr=houseAddress,\n                                uint256 amount=(50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000)\n                  log LOG_InvestorExit(\n                        address investor=caller,\n                        uint256 amount=investors[stor3[caller]].field_256 + (investorsProfit * investors[stor3[caller]].field_256 / invested) - (investorsLosses * investors[stor3[caller]].field_256 / invested) - ((50 * investors[stor3[caller]].field_256) + (50 * investorsProfit * investors[stor3[caller]].field_256 / invested) - (50 * investorsLosses * investors[stor3[caller]].field_256 / invested) / 10000))\n  require numInvestors <= 10\n\ndef getStatus(): # not payable\n  if invested >= investorsProfit:\n      if invested + investorsProfit >= invested:\n          if invested + investorsProfit >= investorsLosses:\n              if numInvestors == 10:\n                  idx = 1\n                  while idx <= numInvestors:\n                      require invested\n                      require invested\n                      mem[0] = investorIDs[stor4[idx].field_0]\n                      mem[32] = 4\n                      if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) < investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested:\n                          if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                              if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                                  if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                      else:\n                          if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) < investors[stor3[investors[1].field_0]].field_256:\n                              if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                                  if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                          else:\n                              if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested:\n                                  if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                                          if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) < investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                              else:\n                                  if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                                          if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                      idx = idx + 1\n                      continue \n                  require invested\n                  if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested:\n                      if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investors[stor3[investors[1].field_0]].field_256:\n                          if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested:\n                              return invested + investorsProfit - investorsLosses, \n                                     9000,\n                                     190,\n                                     100,\n                                     2 * 10^17,\n                                     investorsProfit - investorsLosses,\n                                     investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested),\n                                     betsKeys.length\n              return invested + investorsProfit - investorsLosses, \n                     9000,\n                     190,\n                     100,\n                     2 * 10^17,\n                     investorsProfit - investorsLosses,\n                     0,\n                     betsKeys.length\n  if numInvestors == 10:\n      idx = 1\n      while idx <= numInvestors:\n          require invested\n          require invested\n          mem[0] = investorIDs[stor4[idx].field_0]\n          mem[32] = 4\n          if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) < investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested:\n              if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                  if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n          else:\n              if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) < investors[stor3[investors[1].field_0]].field_256:\n                  if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                          if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n              else:\n                  if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested:\n                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                          if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                              if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) < investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                  else:\n                      if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                          if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investors[stor3[investors[idx].field_0]].field_256:\n                              if investors[stor3[investors[idx].field_0]].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n          idx = idx + 1\n          continue \n      require invested\n      if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested:\n          if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investors[stor3[investors[1].field_0]].field_256:\n              if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) >= investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested:\n                  return 0, \n                         9000,\n                         190,\n                         100,\n                         2 * 10^17,\n                         investorsProfit - investorsLosses,\n                         investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested),\n                         betsKeys.length\n  return 0, 9000, 190, 100, 2 * 10^17, investorsProfit - investorsLosses, 0, betsKeys.length\n\ndef forceDivestOfOneInvestor(address currentInvestor): # not payable\n  require owner == caller\n  require isStopped\n  if not stor15:\n      s = 0\n      s = 0\n      s = 0\n      idx = 1\n      s = 0\n      while idx <= numInvestors:\n          require invested\n          if investors[idx].field_256 + (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) < investors[idx].field_256:\n              isStopped = 1\n              log LOG_EmergencyAutoStop()\n          else:\n              if (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) + investors[idx].field_256 < investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested:\n                  isStopped = 1\n                  log LOG_EmergencyAutoStop()\n              else:\n                  investors[idx].field_256 = (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested) + investors[idx].field_256\n                  mem[96] = investors[idx].field_0\n                  mem[128] = (investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested)\n                  log LOG_InvestorCapitalUpdate(\n                        address investor=investors[idx].field_0,\n                        int256 amount=(investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested))\n          mem[0] = idx\n          mem[32] = 4\n          if s + investors[idx].field_256 < s:\n              s = investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested\n              s = investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested\n              s = investors[idx].field_0\n              idx = idx + 1\n              s = s\n              continue \n          mem[0] = idx\n          mem[32] = 4\n          s = investorsLosses * investors[stor3[investors[idx].field_0]].field_256 / invested\n          s = investorsProfit * investors[stor3[investors[idx].field_0]].field_256 / invested\n          s = investors[idx].field_0\n          idx = idx + 1\n          s = investors[idx].field_256 + s\n          continue \n      investorsProfit = 0\n      investorsLosses = 0\n      invested = s\n      stor15 = 1\n  require invested\n  if investors[stor3[address(currentInvestor)]].field_256 + (investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) < investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested:\n      if invested < investors[stor3[address(currentInvestor)]].field_256:\n          isStopped = 1\n          log LOG_EmergencyAutoStop()\n      else:\n          invested -= investors[stor3[address(currentInvestor)]].field_256\n          investors[stor3[address(currentInvestor)]].field_0 = 0\n          investors[stor3[address(currentInvestor)]].field_256 = 0\n          investors[stor3[address(currentInvestor)]].field_512 = 0\n          investorIDs[address(currentInvestor)] = 0\n          if investorIDs[address(currentInvestor)] != numInvestors:\n              investorIDs[stor4[stor5].field_0] = investorIDs[address(currentInvestor)]\n              investors[stor3[address(currentInvestor)]].field_0 = investors[stor5].field_0\n              investors[stor3[address(currentInvestor)]].field_64 = 0\n              investors[stor3[address(currentInvestor)]].field_256 = investors[stor5].field_256\n              investors[stor3[address(currentInvestor)]].field_512 = 0\n              investors[stor5].field_0 = 0\n              investors[stor5].field_256 = 0\n              investors[stor5].field_512 = 0\n          numInvestors--\n          log LOG_ZeroSend()\n          log LOG_ZeroSend()\n          log LOG_InvestorExit(\n                address investor=address(currentInvestor),\n                uint256 amount=0)\n  else:\n      if investors[stor3[address(currentInvestor)]].field_256 + (investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) < investors[stor3[address(currentInvestor)]].field_256:\n          if invested < investors[stor3[address(currentInvestor)]].field_256:\n              isStopped = 1\n              log LOG_EmergencyAutoStop()\n          else:\n              invested -= investors[stor3[address(currentInvestor)]].field_256\n              investors[stor3[address(currentInvestor)]].field_0 = 0\n              investors[stor3[address(currentInvestor)]].field_256 = 0\n              investors[stor3[address(currentInvestor)]].field_512 = 0\n              investorIDs[address(currentInvestor)] = 0\n              if investorIDs[address(currentInvestor)] != numInvestors:\n                  investorIDs[stor4[stor5].field_0] = investorIDs[address(currentInvestor)]\n                  investors[stor3[address(currentInvestor)]].field_0 = investors[stor5].field_0\n                  investors[stor3[address(currentInvestor)]].field_64 = 0\n                  investors[stor3[address(currentInvestor)]].field_256 = investors[stor5].field_256\n                  investors[stor3[address(currentInvestor)]].field_512 = 0\n                  investors[stor5].field_0 = 0\n                  investors[stor5].field_256 = 0\n                  investors[stor5].field_512 = 0\n              numInvestors--\n              log LOG_ZeroSend()\n              log LOG_ZeroSend()\n              log LOG_InvestorExit(\n                    address investor=address(currentInvestor),\n                    uint256 amount=0)\n      else:\n          if investors[stor3[address(currentInvestor)]].field_256 + (investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) < investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested:\n              if invested < investors[stor3[address(currentInvestor)]].field_256:\n                  isStopped = 1\n                  log LOG_EmergencyAutoStop()\n              else:\n                  invested -= investors[stor3[address(currentInvestor)]].field_256\n                  investors[stor3[address(currentInvestor)]].field_0 = 0\n                  investors[stor3[address(currentInvestor)]].field_256 = 0\n                  investors[stor3[address(currentInvestor)]].field_512 = 0\n                  investorIDs[address(currentInvestor)] = 0\n                  if investorIDs[address(currentInvestor)] != numInvestors:\n                      investorIDs[stor4[stor5].field_0] = investorIDs[address(currentInvestor)]\n                      investors[stor3[address(currentInvestor)]].field_0 = investors[stor5].field_0\n                      investors[stor3[address(currentInvestor)]].field_64 = 0\n                      investors[stor3[address(currentInvestor)]].field_256 = investors[stor5].field_256\n                      investors[stor3[address(currentInvestor)]].field_512 = 0\n                      investors[stor5].field_0 = 0\n                      investors[stor5].field_256 = 0\n                      investors[stor5].field_512 = 0\n                  numInvestors--\n                  log LOG_ZeroSend()\n                  log LOG_ZeroSend()\n                  log LOG_InvestorExit(\n                        address investor=address(currentInvestor),\n                        uint256 amount=0)\n          else:\n              if invested < investors[stor3[address(currentInvestor)]].field_256:\n                  isStopped = 1\n                  log LOG_EmergencyAutoStop()\n              else:\n                  invested -= investors[stor3[address(currentInvestor)]].field_256\n                  investors[stor3[address(currentInvestor)]].field_0 = 0\n                  investors[stor3[address(currentInvestor)]].field_256 = 0\n                  investors[stor3[address(currentInvestor)]].field_512 = 0\n                  investorIDs[address(currentInvestor)] = 0\n                  if investorIDs[address(currentInvestor)] != numInvestors:\n                      investorIDs[stor4[stor5].field_0] = investorIDs[address(currentInvestor)]\n                      investors[stor3[address(currentInvestor)]].field_0 = investors[stor5].field_0\n                      investors[stor3[address(currentInvestor)]].field_64 = 0\n                      investors[stor3[address(currentInvestor)]].field_256 = investors[stor5].field_256\n                      investors[stor3[address(currentInvestor)]].field_512 = 0\n                      investors[stor5].field_0 = 0\n                      investors[stor5].field_256 = 0\n                      investors[stor5].field_512 = 0\n                  numInvestors--\n                  if not investors[stor3[address(currentInvestor)]].field_256 + (investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) - ((50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000):\n                      log LOG_ZeroSend()\n                  else:\n                      if eth.balance(this.address) < investors[stor3[address(currentInvestor)]].field_256 + (investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) - ((50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000):\n                          log LOG_ValueIsTooBig()\n                      else:\n                          call currentInvestor with:\n                             value investors[stor3[address(currentInvestor)]].field_256 + (investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) - ((50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000) wei\n                               gas stor2 wei\n                          if not ext_call.success:\n                              log LOG_FailedSend(\n                                    address receiver=address(currentInvestor),\n                                    uint256 amount=investors[stor3[address(currentInvestor)]].field_256 + (investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) - ((50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000))\n                              if houseAddress != currentInvestor:\n                                  call houseAddress with:\n                                     value investors[stor3[address(currentInvestor)]].field_256 + (investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) - ((50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000) wei\n                                       gas stor2 wei\n                                  if not ext_call.success:\n                                      log LOG_FailedSend(\n                                            address receiver=houseAddress,\n                                            uint256 amount=investors[stor3[address(currentInvestor)]].field_256 + (investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) - ((50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000))\n                          log LOG_SuccessfulSend(\n                                address addr=address(currentInvestor),\n                                uint256 amount=investors[stor3[address(currentInvestor)]].field_256 + (investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) - ((50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000))\n                  if not (50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000:\n                      log LOG_ZeroSend()\n                  else:\n                      if eth.balance(this.address) < (50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000:\n                          log LOG_ValueIsTooBig()\n                      else:\n                          call houseAddress with:\n                             value (50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000 wei\n                               gas stor2 wei\n                          if not ext_call.success:\n                              log LOG_FailedSend(\n                                    address receiver=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000)\n                              if houseAddress != houseAddress:\n                                  call houseAddress with:\n                                     value (50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000 wei\n                                       gas stor2 wei\n                                  if not ext_call.success:\n                                      log LOG_FailedSend(\n                                            address receiver=houseAddress,\n                                            uint256 amount=(50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000)\n                          log LOG_SuccessfulSend(\n                                address addr=houseAddress,\n                                uint256 amount=(50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000)\n                  log LOG_InvestorExit(\n                        address investor=address(currentInvestor),\n                        uint256 amount=investors[stor3[address(currentInvestor)]].field_256 + (investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) - ((50 * investors[stor3[address(currentInvestor)]].field_256) + (50 * investorsProfit * investors[stor3[address(currentInvestor)]].field_256 / invested) - (50 * investorsLosses * investors[stor3[address(currentInvestor)]].field_256 / invested) / 10000))\n  require numInvestors <= 10\n  stor9 = 0\n  stor10 = 0\n\ndef bet() payable: \n  require not isStopped\n  require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).getPrice(string _datasource, uint256 _gaslimit) with:\n       gas gas_remaining - 50 wei\n      args 0, 64, stor2 + 175000, 3, 0x55524c0000000000000000000000000000000000000000000000000000000000\n  require ext_call.success\n  require ext_call.return_data[0] < call.value\n  if invested < investorsProfit:\n      require (810 * call.value) - (810 * ext_call.return_data[0]) / 9000 <= 0\n      require call.value - ext_call.return_data[0] >= 2 * 10^17\n      log LOG_NewBet(\n            address playerAddress=caller,\n            uint256 amount=call.value - ext_call.return_data[0])\n      if stor0:\n          require ext_code.size(stor0)\n          call stor0.getAddress() with:\n               gas gas_remaining - 50 wei\n          require ext_call.success\n          uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n          mem[708] = mem[734 len 6]\n          require ext_code.size(address(stor1))\n          call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n               gas gas_remaining - 50 wei\n              args 64, stor2 + 175000, 6, mem[708]\n          require ext_call.success\n          if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n              bets[0].field_0 = caller\n              bets[0].field_256 = call.value - ext_call.return_data[0]\n              bets[0].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length <= betsKeys.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              betsKeys[betsKeys.length] = 0\n          else:\n              mem[772] = mem[798 len 6]\n              mem[1220] = mem[1243 len 9]\n              require ext_code.size(address(stor1))\n              call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                 value ext_call.return_data[0] wei\n                   gas gas_remaining - 9050 wei\n                  args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n              require ext_call.success\n              bets[ext_call.return_data[0]].field_0 = caller\n              bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n              bets[ext_call.return_data[0]].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length <= betsKeys.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              betsKeys[betsKeys.length] = ext_call.return_data[0]\n          stop\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          require ext_code.size(stor0)\n          call stor0.getAddress() with:\n               gas gas_remaining - 50 wei\n          require ext_call.success\n          uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n          mem[708] = mem[734 len 6]\n          require ext_code.size(address(stor1))\n          call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n               gas gas_remaining - 50 wei\n              args 64, stor2 + 175000, 6, mem[708]\n          require ext_call.success\n          if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n              bets[0].field_0 = caller\n              bets[0].field_256 = call.value - ext_call.return_data[0]\n              bets[0].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length <= betsKeys.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              betsKeys[betsKeys.length] = 0\n          else:\n              mem[772] = mem[798 len 6]\n              mem[1220] = mem[1243 len 9]\n              require ext_code.size(address(stor1))\n              call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                 value ext_call.return_data[0] wei\n                   gas gas_remaining - 9050 wei\n                  args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n              require ext_call.success\n              bets[ext_call.return_data[0]].field_0 = caller\n              bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n              bets[ext_call.return_data[0]].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length <= betsKeys.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              betsKeys[betsKeys.length] = ext_call.return_data[0]\n          stop\n      if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) <= 0:\n          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n          call stor0.getAddress() with:\n               gas gas_remaining - 50 wei\n          require ext_call.success\n          uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n          mem[708] = mem[734 len 6]\n          require ext_code.size(address(stor1))\n          call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n               gas gas_remaining - 50 wei\n              args 64, stor2 + 175000, 6, mem[708]\n          require ext_call.success\n          if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n              bets[0].field_0 = caller\n              bets[0].field_256 = call.value - ext_call.return_data[0]\n              bets[0].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length <= betsKeys.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              betsKeys[betsKeys.length] = 0\n              stop\n          mem[772] = mem[798 len 6]\n          mem[1220] = mem[1243 len 9]\n          require ext_code.size(address(stor1))\n          call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n             value ext_call.return_data[0] wei\n               gas gas_remaining - 9050 wei\n              args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n          require ext_call.success\n          bets[ext_call.return_data[0]].field_0 = caller\n          bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n          bets[ext_call.return_data[0]].field_512 = 0\n          betsKeys.length++\n      else:\n          stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          require ext_code.size(stor0)\n          call stor0.getAddress() with:\n               gas gas_remaining - 50 wei\n          require ext_call.success\n          uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n          mem[708] = mem[734 len 6]\n          require ext_code.size(address(stor1))\n          call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n               gas gas_remaining - 50 wei\n              args 64, stor2 + 175000, 6, mem[708]\n          require ext_call.success\n          if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n              bets[0].field_0 = caller\n              bets[0].field_256 = call.value - ext_call.return_data[0]\n              bets[0].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length <= betsKeys.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              betsKeys[betsKeys.length] = 0\n              stop\n          mem[772] = mem[798 len 6]\n          mem[1220] = mem[1243 len 9]\n          require ext_code.size(address(stor1))\n          call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n             value ext_call.return_data[0] wei\n               gas gas_remaining - 9050 wei\n              args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n          require ext_call.success\n          bets[ext_call.return_data[0]].field_0 = caller\n          bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n          bets[ext_call.return_data[0]].field_512 = 0\n          betsKeys.length++\n          if not betsKeys.length > betsKeys.length + 1:\n              betsKeys[betsKeys.length] = ext_call.return_data[0]\n  else:\n      if invested + investorsProfit < invested:\n          require (810 * call.value) - (810 * ext_call.return_data[0]) / 9000 <= 0\n          require call.value - ext_call.return_data[0] >= 2 * 10^17\n          log LOG_NewBet(\n                address playerAddress=caller,\n                uint256 amount=call.value - ext_call.return_data[0])\n          if stor0:\n              require ext_code.size(stor0)\n              call stor0.getAddress() with:\n                   gas gas_remaining - 50 wei\n              require ext_call.success\n              uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n              mem[708] = mem[734 len 6]\n              require ext_code.size(address(stor1))\n              call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                   gas gas_remaining - 50 wei\n                  args 64, stor2 + 175000, 6, mem[708]\n              require ext_call.success\n              if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                  bets[0].field_0 = caller\n                  bets[0].field_256 = call.value - ext_call.return_data[0]\n                  bets[0].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = 0\n              else:\n                  mem[772] = mem[798 len 6]\n                  mem[1220] = mem[1243 len 9]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                     value ext_call.return_data[0] wei\n                       gas gas_remaining - 9050 wei\n                      args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n                  require ext_call.success\n                  bets[ext_call.return_data[0]].field_0 = caller\n                  bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n                  bets[ext_call.return_data[0]].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = ext_call.return_data[0]\n              stop\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n              require ext_code.size(stor0)\n              call stor0.getAddress() with:\n                   gas gas_remaining - 50 wei\n              require ext_call.success\n              uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n              mem[708] = mem[734 len 6]\n              require ext_code.size(address(stor1))\n              call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                   gas gas_remaining - 50 wei\n                  args 64, stor2 + 175000, 6, mem[708]\n              require ext_call.success\n              if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                  bets[0].field_0 = caller\n                  bets[0].field_256 = call.value - ext_call.return_data[0]\n                  bets[0].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = 0\n              else:\n                  mem[772] = mem[798 len 6]\n                  mem[1220] = mem[1243 len 9]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                     value ext_call.return_data[0] wei\n                       gas gas_remaining - 9050 wei\n                      args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n                  require ext_call.success\n                  bets[ext_call.return_data[0]].field_0 = caller\n                  bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n                  bets[ext_call.return_data[0]].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = ext_call.return_data[0]\n              stop\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) <= 0:\n              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n              require ext_code.size(stor0)\n              call stor0.getAddress() with:\n                   gas gas_remaining - 50 wei\n              require ext_call.success\n              uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n              mem[708] = mem[734 len 6]\n              require ext_code.size(address(stor1))\n              call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                   gas gas_remaining - 50 wei\n                  args 64, stor2 + 175000, 6, mem[708]\n              require ext_call.success\n              if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                  bets[0].field_0 = caller\n                  bets[0].field_256 = call.value - ext_call.return_data[0]\n                  bets[0].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = 0\n                  stop\n              mem[772] = mem[798 len 6]\n              mem[1220] = mem[1243 len 9]\n              require ext_code.size(address(stor1))\n              call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                 value ext_call.return_data[0] wei\n                   gas gas_remaining - 9050 wei\n                  args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n              require ext_call.success\n              bets[ext_call.return_data[0]].field_0 = caller\n              bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n              bets[ext_call.return_data[0]].field_512 = 0\n              betsKeys.length++\n          else:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              require ext_code.size(stor0)\n              call stor0.getAddress() with:\n                   gas gas_remaining - 50 wei\n              require ext_call.success\n              uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n              mem[708] = mem[734 len 6]\n              require ext_code.size(address(stor1))\n              call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                   gas gas_remaining - 50 wei\n                  args 64, stor2 + 175000, 6, mem[708]\n              require ext_call.success\n              if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                  bets[0].field_0 = caller\n                  bets[0].field_256 = call.value - ext_call.return_data[0]\n                  bets[0].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = 0\n                  stop\n              mem[772] = mem[798 len 6]\n              mem[1220] = mem[1243 len 9]\n              require ext_code.size(address(stor1))\n              call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                 value ext_call.return_data[0] wei\n                   gas gas_remaining - 9050 wei\n                  args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n              require ext_call.success\n              bets[ext_call.return_data[0]].field_0 = caller\n              bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n              bets[ext_call.return_data[0]].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length > betsKeys.length + 1:\n                  betsKeys[betsKeys.length] = ext_call.return_data[0]\n      else:\n          if invested + investorsProfit >= investorsLosses:\n              require (810 * call.value) - (810 * ext_call.return_data[0]) / 9000 <= (100 * invested) + (100 * investorsProfit) - (100 * investorsLosses) / 10000\n          else:\n              require (810 * call.value) - (810 * ext_call.return_data[0]) / 9000 <= 0\n          require call.value - ext_call.return_data[0] >= 2 * 10^17\n          log LOG_NewBet(\n                address playerAddress=caller,\n                uint256 amount=call.value - ext_call.return_data[0])\n          if stor0:\n              require ext_code.size(stor0)\n              call stor0.getAddress() with:\n                   gas gas_remaining - 50 wei\n              require ext_call.success\n              uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n              mem[708] = mem[734 len 6]\n              require ext_code.size(address(stor1))\n              call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                   gas gas_remaining - 50 wei\n                  args 64, stor2 + 175000, 6, mem[708]\n              require ext_call.success\n              if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                  bets[0].field_0 = caller\n                  bets[0].field_256 = call.value - ext_call.return_data[0]\n                  bets[0].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = 0\n              else:\n                  mem[772] = mem[798 len 6]\n                  mem[1220] = mem[1243 len 9]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                     value ext_call.return_data[0] wei\n                       gas gas_remaining - 9050 wei\n                      args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n                  require ext_call.success\n                  bets[ext_call.return_data[0]].field_0 = caller\n                  bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n                  bets[ext_call.return_data[0]].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = ext_call.return_data[0]\n              stop\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n              require ext_code.size(stor0)\n              call stor0.getAddress() with:\n                   gas gas_remaining - 50 wei\n              require ext_call.success\n              uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n              mem[708] = mem[734 len 6]\n              require ext_code.size(address(stor1))\n              call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                   gas gas_remaining - 50 wei\n                  args 64, stor2 + 175000, 6, mem[708]\n              require ext_call.success\n              if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                  bets[0].field_0 = caller\n                  bets[0].field_256 = call.value - ext_call.return_data[0]\n                  bets[0].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = 0\n              else:\n                  mem[772] = mem[798 len 6]\n                  mem[1220] = mem[1243 len 9]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                     value ext_call.return_data[0] wei\n                       gas gas_remaining - 9050 wei\n                      args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n                  require ext_call.success\n                  bets[ext_call.return_data[0]].field_0 = caller\n                  bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n                  bets[ext_call.return_data[0]].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = ext_call.return_data[0]\n              stop\n          if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) <= 0:\n              if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                  stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n              require ext_code.size(stor0)\n              call stor0.getAddress() with:\n                   gas gas_remaining - 50 wei\n              require ext_call.success\n              uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n              mem[708] = mem[734 len 6]\n              require ext_code.size(address(stor1))\n              call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                   gas gas_remaining - 50 wei\n                  args 64, stor2 + 175000, 6, mem[708]\n              require ext_call.success\n              if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                  bets[0].field_0 = caller\n                  bets[0].field_256 = call.value - ext_call.return_data[0]\n                  bets[0].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length > betsKeys.length + 1:\n                      betsKeys[betsKeys.length] = 0\n              else:\n                  mem[772] = mem[798 len 6]\n                  mem[1220] = mem[1243 len 9]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                     value ext_call.return_data[0] wei\n                       gas gas_remaining - 9050 wei\n                      args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n                  require ext_call.success\n                  bets[ext_call.return_data[0]].field_0 = caller\n                  bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n                  bets[ext_call.return_data[0]].field_512 = 0\n                  betsKeys.length++\n          else:\n              stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n              require ext_code.size(stor0)\n              call stor0.getAddress() with:\n                   gas gas_remaining - 50 wei\n              require ext_call.success\n              uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n              mem[708] = mem[734 len 6]\n              require ext_code.size(address(stor1))\n              call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                   gas gas_remaining - 50 wei\n                  args 64, stor2 + 175000, 6, mem[708]\n              require ext_call.success\n              if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                  bets[0].field_0 = caller\n                  bets[0].field_256 = call.value - ext_call.return_data[0]\n                  bets[0].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = 0\n                  stop\n              mem[772] = mem[798 len 6]\n              mem[1220] = mem[1243 len 9]\n              require ext_code.size(address(stor1))\n              call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                 value ext_call.return_data[0] wei\n                   gas gas_remaining - 9050 wei\n                  args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n              require ext_call.success\n              bets[ext_call.return_data[0]].field_0 = caller\n              bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n              bets[ext_call.return_data[0]].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length > betsKeys.length + 1:\n                  betsKeys[betsKeys.length] = ext_call.return_data[0]\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef _fallback(?) payable: # default function\n  require not isStopped\n  require ext_code.size(stor0)\n  call stor0.getAddress() with:\n       gas gas_remaining - 50 wei\n  require ext_call.success\n  require ext_code.size(address(ext_call.return_data[0]))\n  call address(ext_call.return_data[0]).getPrice(string _datasource, uint256 _gaslimit) with:\n       gas gas_remaining - 50 wei\n      args 0, 64, stor2 + 175000, 3, 0x55524c0000000000000000000000000000000000000000000000000000000000\n  require ext_call.success\n  require ext_call.return_data[0] < call.value\n  if invested < investorsProfit:\n      require (810 * call.value) - (810 * ext_call.return_data[0]) / 9000 <= 0\n      require call.value - ext_call.return_data[0] >= 2 * 10^17\n      log LOG_NewBet(\n            address playerAddress=caller,\n            uint256 amount=call.value - ext_call.return_data[0])\n      if stor0:\n          require ext_code.size(stor0)\n          call stor0.getAddress() with:\n               gas gas_remaining - 50 wei\n          require ext_call.success\n          uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n          mem[708] = mem[734 len 6]\n          require ext_code.size(address(stor1))\n          call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n               gas gas_remaining - 50 wei\n              args Array(len=6, data=mem[708]), stor2 + 175000\n          require ext_call.success\n          if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n              bets[0].field_0 = caller\n              bets[0].field_256 = call.value - ext_call.return_data[0]\n              bets[0].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length <= betsKeys.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              betsKeys[betsKeys.length] = 0\n          else:\n              mem[772] = mem[798 len 6]\n              mem[1220] = mem[1243 len 9]\n              require ext_code.size(address(stor1))\n              call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                 value ext_call.return_data[0] wei\n                   gas gas_remaining - 9050 wei\n                  args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n              require ext_call.success\n              bets[ext_call.return_data[0]].field_0 = caller\n              bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n              bets[ext_call.return_data[0]].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length <= betsKeys.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              betsKeys[betsKeys.length] = ext_call.return_data[0]\n          stop\n      if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n          stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n          require ext_code.size(stor0)\n          call stor0.getAddress() with:\n               gas gas_remaining - 50 wei\n          require ext_call.success\n          uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n          mem[708] = mem[734 len 6]\n          require ext_code.size(address(stor1))\n          call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n               gas gas_remaining - 50 wei\n              args Array(len=6, data=mem[708]), stor2 + 175000\n          require ext_call.success\n          if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n              bets[0].field_0 = caller\n              bets[0].field_256 = call.value - ext_call.return_data[0]\n              bets[0].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length <= betsKeys.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              betsKeys[betsKeys.length] = 0\n          else:\n              mem[772] = mem[798 len 6]\n              mem[1220] = mem[1243 len 9]\n              require ext_code.size(address(stor1))\n              call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                 value ext_call.return_data[0] wei\n                   gas gas_remaining - 9050 wei\n                  args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n              require ext_call.success\n              bets[ext_call.return_data[0]].field_0 = caller\n              bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n              bets[ext_call.return_data[0]].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length <= betsKeys.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              betsKeys[betsKeys.length] = ext_call.return_data[0]\n          stop\n      if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) <= 0:\n          if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n              stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n          require ext_code.size(stor0)\n          call stor0.getAddress() with:\n               gas gas_remaining - 50 wei\n          require ext_call.success\n          uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n          mem[708] = mem[734 len 6]\n          require ext_code.size(address(stor1))\n          call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n               gas gas_remaining - 50 wei\n              args Array(len=6, data=mem[708]), stor2 + 175000\n          require ext_call.success\n          if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n              bets[0].field_0 = caller\n              bets[0].field_256 = call.value - ext_call.return_data[0]\n              bets[0].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length > betsKeys.length + 1:\n                  betsKeys[betsKeys.length] = 0\n          else:\n              mem[772] = mem[798 len 6]\n              mem[1220] = mem[1243 len 9]\n              require ext_code.size(address(stor1))\n              call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                 value ext_call.return_data[0] wei\n                   gas gas_remaining - 9050 wei\n                  args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n              require ext_call.success\n              bets[ext_call.return_data[0]].field_0 = caller\n              bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n              bets[ext_call.return_data[0]].field_512 = 0\n              betsKeys.length++\n      else:\n          stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n          require ext_code.size(stor0)\n          call stor0.getAddress() with:\n               gas gas_remaining - 50 wei\n          require ext_call.success\n          uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n          mem[708] = mem[734 len 6]\n          require ext_code.size(address(stor1))\n          call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n               gas gas_remaining - 50 wei\n              args Array(len=6, data=mem[708]), stor2 + 175000\n          require ext_call.success\n          if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n              bets[0].field_0 = caller\n              bets[0].field_256 = call.value - ext_call.return_data[0]\n              bets[0].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length <= betsKeys.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              betsKeys[betsKeys.length] = 0\n              stop\n          mem[772] = mem[798 len 6]\n          mem[1220] = mem[1243 len 9]\n          require ext_code.size(address(stor1))\n          call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n             value ext_call.return_data[0] wei\n               gas gas_remaining - 9050 wei\n              args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n          require ext_call.success\n          bets[ext_call.return_data[0]].field_0 = caller\n          bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n          bets[ext_call.return_data[0]].field_512 = 0\n          betsKeys.length++\n          if not betsKeys.length > betsKeys.length + 1:\n              betsKeys[betsKeys.length] = ext_call.return_data[0]\n  else:\n      if invested + investorsProfit < invested:\n          require (810 * call.value) - (810 * ext_call.return_data[0]) / 9000 <= 0\n          require call.value - ext_call.return_data[0] >= 2 * 10^17\n          log LOG_NewBet(\n                address playerAddress=caller,\n                uint256 amount=call.value - ext_call.return_data[0])\n          if stor0:\n              require ext_code.size(stor0)\n              call stor0.getAddress() with:\n                   gas gas_remaining - 50 wei\n              require ext_call.success\n              uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n              mem[708] = mem[734 len 6]\n              require ext_code.size(address(stor1))\n              call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                   gas gas_remaining - 50 wei\n                  args Array(len=6, data=mem[708]), stor2 + 175000\n              require ext_call.success\n              if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                  bets[0].field_0 = caller\n                  bets[0].field_256 = call.value - ext_call.return_data[0]\n                  bets[0].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = 0\n              else:\n                  mem[772] = mem[798 len 6]\n                  mem[1220] = mem[1243 len 9]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                     value ext_call.return_data[0] wei\n                       gas gas_remaining - 9050 wei\n                      args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n                  require ext_call.success\n                  bets[ext_call.return_data[0]].field_0 = caller\n                  bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n                  bets[ext_call.return_data[0]].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = ext_call.return_data[0]\n              stop\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n              require ext_code.size(stor0)\n              call stor0.getAddress() with:\n                   gas gas_remaining - 50 wei\n              require ext_call.success\n              uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n              mem[708] = mem[734 len 6]\n              require ext_code.size(address(stor1))\n              call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                   gas gas_remaining - 50 wei\n                  args Array(len=6, data=mem[708]), stor2 + 175000\n              require ext_call.success\n              if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                  bets[0].field_0 = caller\n                  bets[0].field_256 = call.value - ext_call.return_data[0]\n                  bets[0].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = 0\n                  stop\n              mem[772] = mem[798 len 6]\n              mem[1220] = mem[1243 len 9]\n              require ext_code.size(address(stor1))\n              call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                 value ext_call.return_data[0] wei\n                   gas gas_remaining - 9050 wei\n                  args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n              require ext_call.success\n              bets[ext_call.return_data[0]].field_0 = caller\n              bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n              bets[ext_call.return_data[0]].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length > betsKeys.length + 1:\n                  betsKeys[betsKeys.length] = ext_call.return_data[0]\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) <= 0:\n                  if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                      stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n                  require ext_code.size(stor0)\n                  call stor0.getAddress() with:\n                       gas gas_remaining - 50 wei\n                  require ext_call.success\n                  uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n                  mem[708] = mem[734 len 6]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                       gas gas_remaining - 50 wei\n                      args Array(len=6, data=mem[708]), stor2 + 175000\n                  require ext_call.success\n                  if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                      bets[0].field_0 = caller\n                      bets[0].field_256 = call.value - ext_call.return_data[0]\n                      bets[0].field_512 = 0\n                      betsKeys.length++\n                      if not betsKeys.length > betsKeys.length + 1:\n                          betsKeys[betsKeys.length] = 0\n                  else:\n                      mem[772] = mem[798 len 6]\n                      mem[1220] = mem[1243 len 9]\n                      require ext_code.size(address(stor1))\n                      call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                         value ext_call.return_data[0] wei\n                           gas gas_remaining - 9050 wei\n                          args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n                      require ext_call.success\n                      bets[ext_call.return_data[0]].field_0 = caller\n                      bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n                      bets[ext_call.return_data[0]].field_512 = 0\n                      betsKeys.length++\n              else:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n                  require ext_code.size(stor0)\n                  call stor0.getAddress() with:\n                       gas gas_remaining - 50 wei\n                  require ext_call.success\n                  uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n                  mem[708] = mem[734 len 6]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                       gas gas_remaining - 50 wei\n                      args Array(len=6, data=mem[708]), stor2 + 175000\n                  require ext_call.success\n                  if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                      bets[0].field_0 = caller\n                      bets[0].field_256 = call.value - ext_call.return_data[0]\n                      bets[0].field_512 = 0\n                      betsKeys.length++\n                      if not betsKeys.length <= betsKeys.length + 1:\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      betsKeys[betsKeys.length] = 0\n                      stop\n                  mem[772] = mem[798 len 6]\n                  mem[1220] = mem[1243 len 9]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                     value ext_call.return_data[0] wei\n                       gas gas_remaining - 9050 wei\n                      args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n                  require ext_call.success\n                  bets[ext_call.return_data[0]].field_0 = caller\n                  bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n                  bets[ext_call.return_data[0]].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length > betsKeys.length + 1:\n                      betsKeys[betsKeys.length] = ext_call.return_data[0]\n      else:\n          if invested + investorsProfit >= investorsLosses:\n              require (810 * call.value) - (810 * ext_call.return_data[0]) / 9000 <= (100 * invested) + (100 * investorsProfit) - (100 * investorsLosses) / 10000\n          else:\n              require (810 * call.value) - (810 * ext_call.return_data[0]) / 9000 <= 0\n          require call.value - ext_call.return_data[0] >= 2 * 10^17\n          log LOG_NewBet(\n                address playerAddress=caller,\n                uint256 amount=call.value - ext_call.return_data[0])\n          if stor0:\n              require ext_code.size(stor0)\n              call stor0.getAddress() with:\n                   gas gas_remaining - 50 wei\n              require ext_call.success\n              uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n              mem[708] = mem[734 len 6]\n              require ext_code.size(address(stor1))\n              call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                   gas gas_remaining - 50 wei\n                  args Array(len=6, data=mem[708]), stor2 + 175000\n              require ext_call.success\n              if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                  bets[0].field_0 = caller\n                  bets[0].field_256 = call.value - ext_call.return_data[0]\n                  bets[0].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = 0\n              else:\n                  mem[772] = mem[798 len 6]\n                  mem[1220] = mem[1243 len 9]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                     value ext_call.return_data[0] wei\n                       gas gas_remaining - 9050 wei\n                      args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n                  require ext_call.success\n                  bets[ext_call.return_data[0]].field_0 = caller\n                  bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n                  bets[ext_call.return_data[0]].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = ext_call.return_data[0]\n              stop\n          if ext_code.size(0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed) > 0:\n              stor0 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed\n              require ext_code.size(stor0)\n              call stor0.getAddress() with:\n                   gas gas_remaining - 50 wei\n              require ext_call.success\n              uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n              mem[708] = mem[734 len 6]\n              require ext_code.size(address(stor1))\n              call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                   gas gas_remaining - 50 wei\n                  args Array(len=6, data=mem[708]), stor2 + 175000\n              require ext_call.success\n              if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                  bets[0].field_0 = caller\n                  bets[0].field_256 = call.value - ext_call.return_data[0]\n                  bets[0].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length <= betsKeys.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  betsKeys[betsKeys.length] = 0\n                  stop\n              mem[772] = mem[798 len 6]\n              mem[1220] = mem[1243 len 9]\n              require ext_code.size(address(stor1))\n              call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                 value ext_call.return_data[0] wei\n                   gas gas_remaining - 9050 wei\n                  args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n              require ext_call.success\n              bets[ext_call.return_data[0]].field_0 = caller\n              bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n              bets[ext_call.return_data[0]].field_512 = 0\n              betsKeys.length++\n              if not betsKeys.length > betsKeys.length + 1:\n                  betsKeys[betsKeys.length] = ext_call.return_data[0]\n          else:\n              if ext_code.size(0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1) <= 0:\n                  if ext_code.size(0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa) > 0:\n                      stor0 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa\n                  require ext_code.size(stor0)\n                  call stor0.getAddress() with:\n                       gas gas_remaining - 50 wei\n                  require ext_call.success\n                  uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n                  mem[708] = mem[734 len 6]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                       gas gas_remaining - 50 wei\n                      args Array(len=6, data=mem[708]), stor2 + 175000\n                  require ext_call.success\n                  if ext_call.return_data[0] <= (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                      mem[772] = mem[798 len 6]\n                      mem[1220] = mem[1243 len 9]\n                      require ext_code.size(address(stor1))\n                      call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                         value ext_call.return_data[0] wei\n                           gas gas_remaining - 9050 wei\n                          args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n                      require ext_call.success\n                  else:\n                      bets[0].field_0 = caller\n                      bets[0].field_256 = call.value - ext_call.return_data[0]\n                      bets[0].field_512 = 0\n                      betsKeys.length++\n                      if not betsKeys.length > betsKeys.length + 1:\n                          betsKeys[betsKeys.length] = 0\n              else:\n                  stor0 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1\n                  require ext_code.size(stor0)\n                  call stor0.getAddress() with:\n                       gas gas_remaining - 50 wei\n                  require ext_call.success\n                  uint256(stor1) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor1))\n                  mem[708] = mem[734 len 6]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).getPrice(string _datasource, uint256 _gaslimit) with:\n                       gas gas_remaining - 50 wei\n                      args Array(len=6, data=mem[708]), stor2 + 175000\n                  require ext_call.success\n                  if ext_call.return_data[0] > (175000 * block.gasprice) + (stor2 * block.gasprice) + 10^18:\n                      bets[0].field_0 = caller\n                      bets[0].field_256 = call.value - ext_call.return_data[0]\n                      bets[0].field_512 = 0\n                      betsKeys.length++\n                      if not betsKeys.length <= betsKeys.length + 1:\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      betsKeys[betsKeys.length] = 0\n                      stop\n                  mem[772] = mem[798 len 6]\n                  mem[1220] = mem[1243 len 9]\n                  require ext_code.size(address(stor1))\n                  call address(stor1).query_withGasLimit(uint256 _timestamp, string _datasource, string _arg, uint256 _gaslimit) with:\n                     value ext_call.return_data[0] wei\n                       gas gas_remaining - 9050 wei\n                      args 0, 128, 192, stor2 + 175000, 6, mem[772], 393, code.data[10978 len 384], mem[1220]\n                  require ext_call.success\n                  bets[ext_call.return_data[0]].field_0 = caller\n                  bets[ext_call.return_data[0]].field_256 = call.value - ext_call.return_data[0]\n                  bets[ext_call.return_data[0]].field_512 = 0\n                  betsKeys.length++\n                  if not betsKeys.length > betsKeys.length + 1:\n                      betsKeys[betsKeys.length] = ext_call.return_data[0]\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef forceDivestOfAllInvestors(): # not payable\n  require owner == caller\n  idx = 1\n  while idx <= numInvestors:\n      if stor15:\n          require invested\n          mem[0] = investorIDs[stor4[1].field_0]\n          mem[32] = 4\n          if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) < investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested:\n              if invested < investors[stor3[investors[1].field_0]].field_256:\n                  isStopped = 1\n                  log LOG_EmergencyAutoStop()\n              else:\n                  invested -= investors[stor3[investors[1].field_0]].field_256\n                  investors[stor3[investors[1].field_0]].field_0 = 0\n                  investors[stor3[investors[1].field_0]].field_256 = 0\n                  investors[stor3[investors[1].field_0]].field_512 = 0\n                  mem[0] = investors[1].field_0\n                  mem[32] = 3\n                  investorIDs[stor4[1].field_0] = 0\n                  if investorIDs[stor4[1].field_0] != numInvestors:\n                      investorIDs[stor4[stor5].field_0] = investorIDs[stor4[1].field_0]\n                      mem[32] = 4\n                      investors[stor3[investors[1].field_0]].field_0 = investors[stor5].field_0\n                      investors[stor3[investors[1].field_0]].field_64 = 0\n                      investors[stor3[investors[1].field_0]].field_256 = investors[stor5].field_256\n                      investors[stor3[investors[1].field_0]].field_512 = 0\n                      mem[0] = numInvestors\n                      investors[stor5].field_0 = 0\n                      investors[stor5].field_256 = 0\n                      investors[stor5].field_512 = 0\n                  numInvestors--\n                  log LOG_ZeroSend()\n                  log LOG_ZeroSend()\n                  mem[96] = investors[1].field_0\n                  mem[128] = 0\n                  log LOG_InvestorExit(\n                        address investor=investors[1].field_0,\n                        uint256 amount=0)\n              require numInvestors <= 10\n              idx = idx + 1\n              continue \n          if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) < investors[stor3[investors[1].field_0]].field_256:\n              if invested < investors[stor3[investors[1].field_0]].field_256:\n                  isStopped = 1\n                  log LOG_EmergencyAutoStop()\n              else:\n                  invested -= investors[stor3[investors[1].field_0]].field_256\n                  investors[stor3[investors[1].field_0]].field_0 = 0\n                  investors[stor3[investors[1].field_0]].field_256 = 0\n                  investors[stor3[investors[1].field_0]].field_512 = 0\n                  mem[0] = investors[1].field_0\n                  mem[32] = 3\n                  investorIDs[stor4[1].field_0] = 0\n                  if investorIDs[stor4[1].field_0] != numInvestors:\n                      investorIDs[stor4[stor5].field_0] = investorIDs[stor4[1].field_0]\n                      mem[32] = 4\n                      investors[stor3[investors[1].field_0]].field_0 = investors[stor5].field_0\n                      investors[stor3[investors[1].field_0]].field_64 = 0\n                      investors[stor3[investors[1].field_0]].field_256 = investors[stor5].field_256\n                      investors[stor3[investors[1].field_0]].field_512 = 0\n                      mem[0] = numInvestors\n                      investors[stor5].field_0 = 0\n                      investors[stor5].field_256 = 0\n                      investors[stor5].field_512 = 0\n                  numInvestors--\n                  log LOG_ZeroSend()\n                  log LOG_ZeroSend()\n                  mem[96] = investors[1].field_0\n                  mem[128] = 0\n                  log LOG_InvestorExit(\n                        address investor=investors[1].field_0,\n                        uint256 amount=0)\n              require numInvestors <= 10\n              idx = idx + 1\n              continue \n          if investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) < investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested:\n              if invested < investors[stor3[investors[1].field_0]].field_256:\n                  isStopped = 1\n                  log LOG_EmergencyAutoStop()\n              else:\n                  invested -= investors[stor3[investors[1].field_0]].field_256\n                  investors[stor3[investors[1].field_0]].field_0 = 0\n                  investors[stor3[investors[1].field_0]].field_256 = 0\n                  investors[stor3[investors[1].field_0]].field_512 = 0\n                  mem[0] = investors[1].field_0\n                  mem[32] = 3\n                  investorIDs[stor4[1].field_0] = 0\n                  if investorIDs[stor4[1].field_0] != numInvestors:\n                      investorIDs[stor4[stor5].field_0] = investorIDs[stor4[1].field_0]\n                      mem[32] = 4\n                      investors[stor3[investors[1].field_0]].field_0 = investors[stor5].field_0\n                      investors[stor3[investors[1].field_0]].field_64 = 0\n                      investors[stor3[investors[1].field_0]].field_256 = investors[stor5].field_256\n                      investors[stor3[investors[1].field_0]].field_512 = 0\n                      mem[0] = numInvestors\n                      investors[stor5].field_0 = 0\n                      investors[stor5].field_256 = 0\n                      investors[stor5].field_512 = 0\n                  numInvestors--\n                  log LOG_ZeroSend()\n                  log LOG_ZeroSend()\n                  mem[96] = investors[1].field_0\n                  mem[128] = 0\n                  log LOG_InvestorExit(\n                        address investor=investors[1].field_0,\n                        uint256 amount=0)\n              require numInvestors <= 10\n              idx = idx + 1\n              continue \n          if invested < investors[stor3[investors[1].field_0]].field_256:\n              isStopped = 1\n              log LOG_EmergencyAutoStop()\n              require numInvestors <= 10\n              idx = idx + 1\n              continue \n          invested -= investors[stor3[investors[1].field_0]].field_256\n          investors[stor3[investors[1].field_0]].field_0 = 0\n          investors[stor3[investors[1].field_0]].field_256 = 0\n          investors[stor3[investors[1].field_0]].field_512 = 0\n          mem[0] = investors[1].field_0\n          mem[32] = 3\n          investorIDs[stor4[1].field_0] = 0\n          if investorIDs[stor4[1].field_0] == numInvestors:\n              numInvestors--\n              if not investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000):\n                  log LOG_ZeroSend()\n                  if not (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                      log LOG_ZeroSend()\n                  else:\n                      if eth.balance(this.address) < (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                          log LOG_ValueIsTooBig()\n                      else:\n                          call houseAddress with:\n                             value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                               gas stor2 wei\n                          if not ext_call.success:\n                              log LOG_FailedSend(\n                                    address receiver=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              if houseAddress != houseAddress:\n                                  call houseAddress with:\n                                     value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                                       gas stor2 wei\n                                  if not ext_call.success:\n                                      log LOG_FailedSend(\n                                            address receiver=houseAddress,\n                                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_SuccessfulSend(\n                                address addr=houseAddress,\n                                uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                  mem[96] = investors[1].field_0\n                  mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                  log LOG_InvestorExit(\n                        address investor=investors[1].field_0,\n                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                  require numInvestors <= 10\n                  idx = idx + 1\n                  continue \n              if eth.balance(this.address) < investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000):\n                  log LOG_ValueIsTooBig()\n                  if not (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                      log LOG_ZeroSend()\n                      mem[96] = investors[1].field_0\n                      mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      if numInvestors <= 10:\n                          idx = idx + 1\n                          continue \n                  else:\n                      if eth.balance(this.address) < (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                          log LOG_ValueIsTooBig()\n                          mem[96] = investors[1].field_0\n                          mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          if numInvestors <= 10:\n                              idx = idx + 1\n                              continue \n                      else:\n                          call houseAddress with:\n                             value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                               gas stor2 wei\n                          if ext_call.success:\n                              log LOG_SuccessfulSend(\n                                    address addr=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              mem[96] = investors[1].field_0\n                              mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                              if numInvestors <= 10:\n                                  idx = idx + 1\n                                  continue \n                          else:\n                              log LOG_FailedSend(\n                                    address receiver=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              if houseAddress == houseAddress:\n                                  log LOG_SuccessfulSend(\n                                        address addr=houseAddress,\n                                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  mem[96] = investors[1].field_0\n                                  mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_InvestorExit(\n                                        address investor=investors[1].field_0,\n                                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                                  if numInvestors <= 10:\n                                      idx = idx + 1\n                                      continue \n                              else:\n                                  call houseAddress with:\n                                     value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                                       gas stor2 wei\n                                  if not ext_call.success:\n                                      log LOG_FailedSend(\n                                            address receiver=houseAddress,\n                                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                      log LOG_SuccessfulSend(\n                                            address addr=houseAddress,\n                                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                      log LOG_InvestorExit(\n                                            address investor=investors[1].field_0,\n                                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                                      if numInvestors <= 10:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  else:\n                                      log LOG_SuccessfulSend(\n                                            address addr=houseAddress,\n                                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                      mem[96] = investors[1].field_0\n                                      mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                      log LOG_InvestorExit(\n                                            address investor=investors[1].field_0,\n                                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                                      if numInvestors <= 10:\n                                          idx = idx + 1\n                                          continue \n                  ('gt', ('stor', ('name', 'numInvestors', 5)), 10)\n                  revert \n              call investors[1].field_0 with:\n                 value investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000) wei\n                   gas stor2 wei\n              if ext_call.success:\n                  log LOG_SuccessfulSend(\n                        address addr=investors[1].field_0,\n                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                  if not (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                      log LOG_ZeroSend()\n                      mem[96] = investors[1].field_0\n                      mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      if numInvestors <= 10:\n                          idx = idx + 1\n                          continue \n                  else:\n                      if eth.balance(this.address) < (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                          log LOG_ValueIsTooBig()\n                          mem[96] = investors[1].field_0\n                          mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          if numInvestors <= 10:\n                              idx = idx + 1\n                              continue \n                      else:\n                          call houseAddress with:\n                             value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                               gas stor2 wei\n                          if ext_call.success:\n                              log LOG_SuccessfulSend(\n                                    address addr=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              mem[96] = investors[1].field_0\n                              mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                              if numInvestors <= 10:\n                                  idx = idx + 1\n                                  continue \n                          else:\n                              log LOG_FailedSend(\n                                    address receiver=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              if houseAddress == houseAddress:\n                                  log LOG_SuccessfulSend(\n                                        address addr=houseAddress,\n                                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  mem[96] = investors[1].field_0\n                                  mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_InvestorExit(\n                                        address investor=investors[1].field_0,\n                                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                                  if numInvestors <= 10:\n                                      idx = idx + 1\n                                      continue \n                              else:\n                                  call houseAddress with:\n                                     value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                                       gas stor2 wei\n                                  if not ext_call.success:\n                                      log LOG_FailedSend(\n                                            address receiver=houseAddress,\n                                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_SuccessfulSend(\n                                        address addr=houseAddress,\n                                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_InvestorExit(\n                                        address investor=investors[1].field_0,\n                                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                                  if numInvestors <= 10:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  ('gt', ('stor', ('name', 'numInvestors', 5)), 10)\n                  revert \n              log LOG_FailedSend(\n                    address receiver=investors[1].field_0,\n                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n              if houseAddress == investors[1].field_0:\n                  log LOG_SuccessfulSend(\n                        address addr=investors[1].field_0,\n                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                  if not (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                      log LOG_ZeroSend()\n                      mem[96] = investors[1].field_0\n                      mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      require numInvestors <= 10\n                      idx = idx + 1\n                      continue \n                  if eth.balance(this.address) < (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                      log LOG_ValueIsTooBig()\n                      mem[96] = investors[1].field_0\n                      mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      require numInvestors <= 10\n                      idx = idx + 1\n                      continue \n                  call houseAddress with:\n                     value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                       gas stor2 wei\n                  if ext_call.success:\n                      log LOG_SuccessfulSend(\n                            address addr=houseAddress,\n                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      mem[96] = investors[1].field_0\n                      mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      require numInvestors <= 10\n                      idx = idx + 1\n                      continue \n                  log LOG_FailedSend(\n                        address receiver=houseAddress,\n                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                  if houseAddress == houseAddress:\n                      log LOG_SuccessfulSend(\n                            address addr=houseAddress,\n                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      require numInvestors <= 10\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  call houseAddress with:\n                     value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                       gas stor2 wei\n                  if ext_call.success:\n                      log LOG_SuccessfulSend(\n                            address addr=houseAddress,\n                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      require numInvestors <= 10\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  log LOG_FailedSend(\n                        address receiver=houseAddress,\n                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                  log LOG_SuccessfulSend(\n                        address addr=houseAddress,\n                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                  log LOG_InvestorExit(\n                        address investor=investors[1].field_0,\n                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n              else:\n                  call houseAddress with:\n                     value investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000) wei\n                       gas stor2 wei\n                  if ext_call.success:\n                      log LOG_SuccessfulSend(\n                            address addr=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      if not (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                          log LOG_ZeroSend()\n                          mem[96] = investors[1].field_0\n                          mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          require numInvestors <= 10\n                          idx = idx + 1\n                          continue \n                      if eth.balance(this.address) < (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                          log LOG_ValueIsTooBig()\n                          mem[96] = investors[1].field_0\n                          mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          require numInvestors <= 10\n                          idx = idx + 1\n                          continue \n                      call houseAddress with:\n                         value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                           gas stor2 wei\n                      if ext_call.success:\n                          log LOG_SuccessfulSend(\n                                address addr=houseAddress,\n                                uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          require numInvestors <= 10\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      log LOG_FailedSend(\n                            address receiver=houseAddress,\n                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      if houseAddress == houseAddress:\n                          log LOG_SuccessfulSend(\n                                address addr=houseAddress,\n                                uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          require numInvestors <= 10\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      call houseAddress with:\n                         value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                           gas stor2 wei\n                      if not ext_call.success:\n                          log LOG_FailedSend(\n                                address receiver=houseAddress,\n                                uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_SuccessfulSend(\n                            address addr=houseAddress,\n                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                  else:\n                      log LOG_FailedSend(\n                            address receiver=houseAddress,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      log LOG_SuccessfulSend(\n                            address addr=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      if not (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                          log LOG_ZeroSend()\n                          mem[96] = investors[1].field_0\n                          mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          require numInvestors <= 10\n                          idx = idx + 1\n                          continue \n                      if eth.balance(this.address) < (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                          log LOG_ValueIsTooBig()\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          require numInvestors <= 10\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      call houseAddress with:\n                         value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                           gas stor2 wei\n                      if ext_call.success:\n                          log LOG_SuccessfulSend(\n                                address addr=houseAddress,\n                                uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          require numInvestors <= 10\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      log LOG_FailedSend(\n                            address receiver=houseAddress,\n                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      if houseAddress == houseAddress:\n                          log LOG_SuccessfulSend(\n                                address addr=houseAddress,\n                                uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      else:\n                          call houseAddress with:\n                             value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                               gas stor2 wei\n                          if ext_call.success:\n                              log LOG_SuccessfulSend(\n                                    address addr=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          else:\n                              log LOG_FailedSend(\n                                    address receiver=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              log LOG_SuccessfulSend(\n                                    address addr=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n          else:\n              investorIDs[stor4[stor5].field_0] = investorIDs[stor4[1].field_0]\n              mem[32] = 4\n              investors[stor3[investors[1].field_0]].field_0 = investors[stor5].field_0\n              investors[stor3[investors[1].field_0]].field_64 = 0\n              investors[stor3[investors[1].field_0]].field_256 = investors[stor5].field_256\n              investors[stor3[investors[1].field_0]].field_512 = 0\n              mem[0] = numInvestors\n              investors[stor5].field_0 = 0\n              investors[stor5].field_256 = 0\n              investors[stor5].field_512 = 0\n              numInvestors--\n              if not investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000):\n                  log LOG_ZeroSend()\n                  if not (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                      log LOG_ZeroSend()\n                      mem[96] = investors[1].field_0\n                      mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      if numInvestors <= 10:\n                          idx = idx + 1\n                          continue \n                  else:\n                      if eth.balance(this.address) < (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                          log LOG_ValueIsTooBig()\n                          mem[96] = investors[1].field_0\n                          mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          if numInvestors <= 10:\n                              idx = idx + 1\n                              continue \n                      else:\n                          call houseAddress with:\n                             value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                               gas stor2 wei\n                          if ext_call.success:\n                              log LOG_SuccessfulSend(\n                                    address addr=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              mem[96] = investors[1].field_0\n                              mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                              if numInvestors <= 10:\n                                  idx = idx + 1\n                                  continue \n                          else:\n                              log LOG_FailedSend(\n                                    address receiver=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              if houseAddress == houseAddress:\n                                  log LOG_SuccessfulSend(\n                                        address addr=houseAddress,\n                                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  mem[96] = investors[1].field_0\n                                  mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_InvestorExit(\n                                        address investor=investors[1].field_0,\n                                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                                  if numInvestors <= 10:\n                                      idx = idx + 1\n                                      continue \n                              else:\n                                  call houseAddress with:\n                                     value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                                       gas stor2 wei\n                                  if not ext_call.success:\n                                      log LOG_FailedSend(\n                                            address receiver=houseAddress,\n                                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                      log LOG_SuccessfulSend(\n                                            address addr=houseAddress,\n                                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                      log LOG_InvestorExit(\n                                            address investor=investors[1].field_0,\n                                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                                      if numInvestors <= 10:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  else:\n                                      log LOG_SuccessfulSend(\n                                            address addr=houseAddress,\n                                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                      mem[96] = investors[1].field_0\n                                      mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                      log LOG_InvestorExit(\n                                            address investor=investors[1].field_0,\n                                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                                      if numInvestors <= 10:\n                                          idx = idx + 1\n                                          continue \n                  ('gt', ('stor', ('name', 'numInvestors', 5)), 10)\n                  revert \n              if eth.balance(this.address) < investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000):\n                  log LOG_ValueIsTooBig()\n                  if not (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                      log LOG_ZeroSend()\n                      mem[96] = investors[1].field_0\n                      mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      if numInvestors <= 10:\n                          idx = idx + 1\n                          continue \n                  else:\n                      if eth.balance(this.address) < (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                          log LOG_ValueIsTooBig()\n                          mem[96] = investors[1].field_0\n                          mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          if numInvestors <= 10:\n                              idx = idx + 1\n                              continue \n                      else:\n                          call houseAddress with:\n                             value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                               gas stor2 wei\n                          if ext_call.success:\n                              log LOG_SuccessfulSend(\n                                    address addr=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              mem[96] = investors[1].field_0\n                              mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                              if numInvestors <= 10:\n                                  idx = idx + 1\n                                  continue \n                          else:\n                              log LOG_FailedSend(\n                                    address receiver=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              if houseAddress == houseAddress:\n                                  log LOG_SuccessfulSend(\n                                        address addr=houseAddress,\n                                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  mem[96] = investors[1].field_0\n                                  mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_InvestorExit(\n                                        address investor=investors[1].field_0,\n                                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                                  if numInvestors <= 10:\n                                      idx = idx + 1\n                                      continue \n                              else:\n                                  call houseAddress with:\n                                     value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                                       gas stor2 wei\n                                  if not ext_call.success:\n                                      log LOG_FailedSend(\n                                            address receiver=houseAddress,\n                                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_SuccessfulSend(\n                                        address addr=houseAddress,\n                                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_InvestorExit(\n                                        address investor=investors[1].field_0,\n                                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                                  if numInvestors <= 10:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  ('gt', ('stor', ('name', 'numInvestors', 5)), 10)\n                  revert \n              call investors[1].field_0 with:\n                 value investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000) wei\n                   gas stor2 wei\n              if ext_call.success:\n                  log LOG_SuccessfulSend(\n                        address addr=investors[1].field_0,\n                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                  if not (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                      log LOG_ZeroSend()\n                      mem[96] = investors[1].field_0\n                      mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      require numInvestors <= 10\n                      idx = idx + 1\n                      continue \n                  if eth.balance(this.address) < (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                      log LOG_ValueIsTooBig()\n                      mem[96] = investors[1].field_0\n                      mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      require numInvestors <= 10\n                      idx = idx + 1\n                      continue \n                  call houseAddress with:\n                     value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                       gas stor2 wei\n                  if ext_call.success:\n                      log LOG_SuccessfulSend(\n                            address addr=houseAddress,\n                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      mem[96] = investors[1].field_0\n                      mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      require numInvestors <= 10\n                      idx = idx + 1\n                      continue \n                  log LOG_FailedSend(\n                        address receiver=houseAddress,\n                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                  if houseAddress == houseAddress:\n                      log LOG_SuccessfulSend(\n                            address addr=houseAddress,\n                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      require numInvestors <= 10\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  call houseAddress with:\n                     value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                       gas stor2 wei\n                  if ext_call.success:\n                      log LOG_SuccessfulSend(\n                            address addr=houseAddress,\n                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      require numInvestors <= 10\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  log LOG_FailedSend(\n                        address receiver=houseAddress,\n                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                  log LOG_SuccessfulSend(\n                        address addr=houseAddress,\n                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                  log LOG_InvestorExit(\n                        address investor=investors[1].field_0,\n                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n              else:\n                  log LOG_FailedSend(\n                        address receiver=investors[1].field_0,\n                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                  if houseAddress == investors[1].field_0:\n                      log LOG_SuccessfulSend(\n                            address addr=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      if not (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                          log LOG_ZeroSend()\n                          mem[96] = investors[1].field_0\n                          mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          require numInvestors <= 10\n                          idx = idx + 1\n                          continue \n                      if eth.balance(this.address) < (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                          log LOG_ValueIsTooBig()\n                          mem[96] = investors[1].field_0\n                          mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          require numInvestors <= 10\n                          idx = idx + 1\n                          continue \n                      call houseAddress with:\n                         value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                           gas stor2 wei\n                      if ext_call.success:\n                          log LOG_SuccessfulSend(\n                                address addr=houseAddress,\n                                uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          require numInvestors <= 10\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      log LOG_FailedSend(\n                            address receiver=houseAddress,\n                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      if houseAddress == houseAddress:\n                          log LOG_SuccessfulSend(\n                                address addr=houseAddress,\n                                uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          log LOG_InvestorExit(\n                                address investor=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          require numInvestors <= 10\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      call houseAddress with:\n                         value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                           gas stor2 wei\n                      if not ext_call.success:\n                          log LOG_FailedSend(\n                                address receiver=houseAddress,\n                                uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_SuccessfulSend(\n                            address addr=houseAddress,\n                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                      log LOG_InvestorExit(\n                            address investor=investors[1].field_0,\n                            uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                  else:\n                      call houseAddress with:\n                         value investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000) wei\n                           gas stor2 wei\n                      if ext_call.success:\n                          log LOG_SuccessfulSend(\n                                address addr=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          if not (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                              log LOG_ZeroSend()\n                              mem[96] = investors[1].field_0\n                              mem[128] = investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                              require numInvestors <= 10\n                              idx = idx + 1\n                              continue \n                          if eth.balance(this.address) < (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                              log LOG_ValueIsTooBig()\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                              require numInvestors <= 10\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          call houseAddress with:\n                             value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                               gas stor2 wei\n                          if ext_call.success:\n                              log LOG_SuccessfulSend(\n                                    address addr=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                              require numInvestors <= 10\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          log LOG_FailedSend(\n                                address receiver=houseAddress,\n                                uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                          if houseAddress == houseAddress:\n                              log LOG_SuccessfulSend(\n                                    address addr=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          else:\n                              call houseAddress with:\n                                 value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                                   gas stor2 wei\n                              if ext_call.success:\n                                  log LOG_SuccessfulSend(\n                                        address addr=houseAddress,\n                                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_InvestorExit(\n                                        address investor=investors[1].field_0,\n                                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                              else:\n                                  log LOG_FailedSend(\n                                        address receiver=houseAddress,\n                                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_SuccessfulSend(\n                                        address addr=houseAddress,\n                                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_InvestorExit(\n                                        address investor=investors[1].field_0,\n                                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                      else:\n                          log LOG_FailedSend(\n                                address receiver=houseAddress,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          log LOG_SuccessfulSend(\n                                address addr=investors[1].field_0,\n                                uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          if not (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                              log LOG_ZeroSend()\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                              require numInvestors <= 10\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if eth.balance(this.address) < (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000:\n                              log LOG_ValueIsTooBig()\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                              require numInvestors <= 10\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          call houseAddress with:\n                             value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                               gas stor2 wei\n                          if ext_call.success:\n                              log LOG_SuccessfulSend(\n                                    address addr=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              log LOG_InvestorExit(\n                                    address investor=investors[1].field_0,\n                                    uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                          else:\n                              log LOG_FailedSend(\n                                    address receiver=houseAddress,\n                                    uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                              if houseAddress == houseAddress:\n                                  log LOG_SuccessfulSend(\n                                        address addr=houseAddress,\n                                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_InvestorExit(\n                                        address investor=investors[1].field_0,\n                                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n                              else:\n                                  call houseAddress with:\n                                     value (50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000 wei\n                                       gas stor2 wei\n                                  if not ext_call.success:\n                                      log LOG_FailedSend(\n                                            address receiver=houseAddress,\n                                            uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_SuccessfulSend(\n                                        address addr=houseAddress,\n                                        uint256 amount=(50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000)\n                                  log LOG_InvestorExit(\n                                        address investor=investors[1].field_0,\n                                        uint256 amount=investors[stor3[investors[1].field_0]].field_256 + (investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) - ((50 * investors[stor3[investors[1].field_0]].field_256) + (50 * investorsProfit * investors[stor3[investors[1].field_0]].field_256 / invested) - (50 * investorsLosses * investors[stor3[investors[1].field_0]].field_256 / invested) / 10000))\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 66218 tokens. Please reduce the length of the messages."
}