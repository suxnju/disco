{
	"address": "0x7da90089a73edd14c75b0c827cb54f4248d47ecc",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The code provided is a decompiled version of an Ethereum smart contract, written in EVM bytecode. The contract appears to be a betting game where users can bet, divest, and get a balance. The contract also appears to include functionality for emergency withdrawal, getting a bet, and getting a bankroll. \n\nHere is the equivalent Solidity contract for given EVM Bytecode:\n\n```solidity\npragma solidity >=0.4.22 <0.7.0;\n\ncontract BettingGame{\n    address public contractOwner;\n    address public houseAddress;\n    uint public bankRoll;\n    uint public numBets;\n    uint public numInvestors;\n    mapping(address => Investor) investors;\n    mapping(bytes32 => Bet) bets;\n    bytes32[] public betsKeys;\n    bool public stopped = false;\n    \n    struct Investor {\n        address addr;\n        uint256 balance;\n        bool voted;\n    }\n    \n    struct Bet {\n        address player;\n        uint256 amount;\n        uint256 rollUnder;\n        bool active;\n    }\n\n    constructor() public {\n        contractOwner = msg.sender;\n        houseAddress = msg.sender;\n    }\n\n    modifier onlyOwner(){\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    function bet(uint256 rollUnder) public payable {\n        require(msg.value > 0);\n        require(!stopped);\n        bytes32 betID = keccak256(abi.encodePacked(msg.sender, now));\n        bets[betID] = Bet(msg.sender, msg.value, rollUnder, true);\n        betsKeys.push(betID);\n        bankRoll += msg.value;\n        numBets++;\n    }\n\n    function divest() public {\n        require(investors[msg.sender].balance > 0);\n        uint256 amount = investors[msg.sender].balance;\n        investors[msg.sender].balance = 0;\n        msg.sender.transfer(amount);\n        bankRoll -= amount;\n    }\n\n    function getBet(bytes32 betID) public view returns (address, uint256, uint256, bool) {\n        Bet memory bet = bets[betID];\n        return (bet.player, bet.amount, bet.rollUnder, bet.active);\n    }\n\n    function getBankroll() public view returns (uint256) {\n        return bankRoll;\n    }\n\n    function stopContract() public onlyOwner {\n        stopped = true;\n    }\n\n    function resumeContract() public onlyOwner {\n        stopped = false;\n    }\n\n    function newInvestor() public payable {\n        require(msg.value > 0);\n        require(!stopped);\n        require(investors[msg.sender].balance == 0);\n        investors[msg.sender] = Investor(msg.sender, msg.value, false);\n        bankRoll += msg.value;\n        numInvestors++;\n    }\n}\n``` \n\nI have considered the main flow of the code and assumed some functionalities based on the given decompiled code. The names of functions, events, and variables might not be exactly the same as in the original contract. Also, please be aware that Solidity is a complex language and EVM Bytecode can be quite difficult to accurately decompile, especially with control flow operations and low-level calls. Therefore, the provided Solidity code is an approximation and may not perform exactly as the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473624,
	"id": "chatcmpl-8Mv9sJW69INsrBlnwWIP1bXiUjNPR",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n    label_0000:\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_01D7:\n            var var0 = 0x01e6;\n            var var1 = 0x01e3;\n            bet();\n            func_01E3();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0;\n        \n            if (var0 == 0x058aace1) {\n                // Dispatch table entry for divest()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    divest();\n                    stop();\n                }\n            } else if (var0 == 0x061e494f) {\n                // Dispatch table entry for getBet(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0207;\n                    var var2 = msg.data[0x04:0x24];\n                    var var3;\n                    var1, var2, var3 = getBet(var2);\n                \n                label_0207:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = var3;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + temp0 - temp1 + 0x60];\n                }\n            } else if (var0 == 0x0d1fce42) {\n                // Dispatch table entry for getBankroll()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = getBankroll();\n                \n                label_023C:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = var1;\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n                }\n            } else if (var0 == 0x11610c25) {\n                // Dispatch table entry for bet()\n                var1 = 0x01e6;\n                bet();\n                stop();\n            } else if (var0 == 0x116c6eab) {\n                // Dispatch table entry for getProfitShare(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var1 = getProfitShare(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0x12253a6c) {\n                // Dispatch table entry for stopContract()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    stopContract();\n                    stop();\n                }\n            } else if (var0 == 0x132ae5e9) {\n                // Dispatch table entry for numInvestors()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = numInvestors();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x1514ea54) {\n                // Dispatch table entry for getLossesShare(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var1 = getLossesShare(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0x187a62d5) {\n                // Dispatch table entry for voteEmergencyWithdrawal(bool)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    voteEmergencyWithdrawal(var2);\n                    stop();\n                }\n            } else if (var0 == 0x1efb17ee) {\n                // Dispatch table entry for changeHouseAddress(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeHouseAddress(var2);\n                    stop();\n                }\n            } else if (var0 == 0x232523e8) {\n                // Dispatch table entry for forceDivestOfAllInvestors()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    forceDivestOfAllInvestors();\n                    stop();\n                }\n            } else if (var0 == 0x27dc297e) {\n                // Dispatch table entry for __callback(bytes32,string)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp4 = memory[0x40:0x60];\n                    var temp5 = msg.data[0x24:0x44];\n                    var temp6 = msg.data[temp5 + 0x04:temp5 + 0x04 + 0x20];\n                    memory[0x40:0x60] = temp4 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp4:temp4 + 0x20] = temp6;\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    memory[temp4 + 0x20:temp4 + 0x20 + temp6] = msg.data[temp5 + 0x24:temp5 + 0x24 + temp6];\n                    var3 = temp4;\n                    var var4 = 0x0db1;\n                    var var5 = var2;\n                    var var6 = var3;\n                    var var7 = 0x00;\n                    var var8 = memory[0x40:0x60];\n                \n                    if (MSIZE() < var8) {\n                        var temp7 = var7;\n                        var temp8 = var8;\n                        memory[temp8:temp8 + 0x20] = temp7;\n                        memory[0x40:0x60] = temp8 + temp7 * 0x20 + 0x20;\n                        var7 = temp8;\n                        __callback(var5, var6, var7);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        func_0DC9(var5, var6, var7, var8);\n                        // Error: Could not resolve jump destination!\n                    }\n                }\n            } else if (var0 == 0x38bbfa50) {\n                // Dispatch table entry for __callback(bytes32,string,bytes)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp9 = memory[0x40:0x60];\n                    var temp10 = msg.data[0x24:0x44];\n                    var temp11 = msg.data[temp10 + 0x04:temp10 + 0x04 + 0x20];\n                    memory[0x40:0x60] = temp9 + (temp11 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp9:temp9 + 0x20] = temp11;\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    memory[temp9 + 0x20:temp9 + 0x20 + temp11] = msg.data[temp10 + 0x24:temp10 + 0x24 + temp11];\n                    var temp12 = memory[0x40:0x60];\n                    var temp13 = msg.data[0x44:0x64] + 0x04;\n                    var temp14 = msg.data[temp13:temp13 + 0x20];\n                    memory[0x40:0x60] = temp12 + (temp14 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp12:temp12 + 0x20] = temp14;\n                    var3 = temp9;\n                    memory[temp12 + 0x20:temp12 + 0x20 + temp14] = msg.data[temp13 + 0x20:temp13 + 0x20 + temp14];\n                    var4 = temp12;\n                    __callback(var2, var3, var4);\n                    stop();\n                }\n            } else if (var0 == 0x3f683b6a) {\n                // Dispatch table entry for isStopped()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x03f3;\n                    var2 = isStopped();\n                    var temp15 = memory[0x40:0x60];\n                    memory[temp15:temp15 + 0x20] = !!var2;\n                    var temp16 = memory[0x40:0x60];\n                    return memory[temp16:temp16 + temp15 - temp16 + 0x20];\n                }\n            } else if (var0 == 0x3feb5f2b) {\n                // Dispatch table entry for investors(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0417;\n                    var2 = msg.data[0x04:0x24];\n                    var2, var3, var4 = investors(var2);\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = var3;\n                    memory[temp17 + 0x40:temp17 + 0x40 + 0x20] = !!var4;\n                    var temp18 = memory[0x40:0x60];\n                    return memory[temp18:temp18 + temp17 - temp18 + 0x60];\n                }\n            } else if (var0 == 0x40a49a96) {\n                // Dispatch table entry for searchSmallestInvestor()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = searchSmallestInvestor();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x4671e65e) {\n                // Dispatch table entry for proposeEmergencyWithdrawal(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    proposeEmergencyWithdrawal(var2);\n                    stop();\n                }\n            } else if (var0 == 0x4e69d560) {\n                // Dispatch table entry for getStatus()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x047f;\n                    var1, var2, var3, var4, var5, var6, var7, var8 = getStatus();\n                    var temp19 = memory[0x40:0x60];\n                    memory[temp19:temp19 + 0x20] = var1;\n                    memory[temp19 + 0x20:temp19 + 0x20 + 0x20] = var2;\n                    memory[temp19 + 0x40:temp19 + 0x40 + 0x20] = var3;\n                    memory[temp19 + 0x60:temp19 + 0x60 + 0x20] = var4;\n                    memory[temp19 + 0x80:temp19 + 0x80 + 0x20] = var5;\n                    memory[temp19 + 0xa0:temp19 + 0xa0 + 0x20] = var6;\n                    memory[temp19 + 0xc0:temp19 + 0xc0 + 0x20] = var7;\n                    memory[temp19 + 0xe0:temp19 + 0xe0 + 0x20] = var8;\n                    var temp20 = memory[0x40:0x60];\n                    return memory[temp20:temp20 + temp19 - temp20 + 0x0100];\n                }\n            } else if (var0 == 0x5125796a) {\n                // Dispatch table entry for changeOraclizeProofType(bytes1)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeOraclizeProofType(var2);\n                    stop();\n                }\n            } else if (var0 == 0x51404cbe) {\n                // Dispatch table entry for forceDivestOfOneInvestor(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    forceDivestOfOneInvestor(var2);\n                    stop();\n                }\n            } else if (var0 == 0x518496b2) {\n                // Dispatch table entry for proposedWithdrawal()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x04f1;\n                    var2, var3 = proposedWithdrawal();\n                    var temp21 = memory[0x40:0x60];\n                    memory[temp21:temp21 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = var3;\n                    var temp22 = memory[0x40:0x60];\n                    return memory[temp22:temp22 + temp21 - temp22 + 0x40];\n                }\n            } else if (var0 == 0x550ed1f0) {\n                // Dispatch table entry for getMaxBetAmount()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = getMaxBetAmount();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x6128a4f3) {\n                // Dispatch table entry for investorsLosses()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = investorsLosses();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x66aee0fc) {\n                // Dispatch table entry for investorsProfit()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = investorsProfit();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x6be80de7) {\n                // Dispatch table entry for investorIDs(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var2 = investorIDs(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0x71d0ed05) {\n                // Dispatch table entry for betsKeys(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var2 = betsKeys(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0x724ae9d0) {\n                // Dispatch table entry for getMinInvestment()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = getMinInvestment();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x82a5285d) {\n                // Dispatch table entry for getMinBetAmount()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = getMinBetAmount();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x85eac05f) {\n                // Dispatch table entry for changeOwnerAddress(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeOwnerAddress(var2);\n                    stop();\n                }\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0612;\n                    var2 = owner();\n                \n                label_0612:\n                    var temp23 = memory[0x40:0x60];\n                    memory[temp23:temp23 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                    var temp24 = memory[0x40:0x60];\n                    return memory[temp24:temp24 + temp23 - temp24 + 0x20];\n                }\n            } else if (var0 == 0xa4beffa7) {\n                // Dispatch table entry for increaseInvestment()\n                var1 = 0x01e6;\n                increaseInvestment();\n                stop();\n            } else if (var0 == 0xc4bc5da5) {\n                // Dispatch table entry for resumeContract()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    resumeContract();\n                    stop();\n                }\n            } else if (var0 == 0xc902c3ae) {\n                // Dispatch table entry for bets(bytes32)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0207;\n                    var2 = msg.data[0x04:0x24];\n                    var2, var3, var4 = bets(var2);\n                    goto label_0207;\n                }\n            } else if (var0 == 0xcafb2202) {\n                // Dispatch table entry for invested()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = invested();\n                    goto label_023C;\n                }\n            } else if (var0 == 0xd21d7950) {\n                // Dispatch table entry for changeGasLimitOfSafeSend(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeGasLimitOfSafeSend(var2);\n                    stop();\n                }\n            } else if (var0 == 0xd7cee31e) {\n                // Dispatch table entry for houseAddress()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0612;\n                    var2 = houseAddress();\n                    goto label_0612;\n                }\n            } else if (var0 == 0xda0bba7b) {\n                // Dispatch table entry for changeOraclizeConfig(bytes32)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeOraclizeConfig(var2);\n                    stop();\n                }\n            } else if (var0 == 0xdf06f906) {\n                // Dispatch table entry for numBets()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = numBets();\n                    goto label_023C;\n                }\n            } else if (var0 == 0xf4993bbd) {\n                // Dispatch table entry for executeEmergencyWithdrawal()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    executeEmergencyWithdrawal();\n                    stop();\n                }\n            } else if (var0 == 0xf8b2cb4f) {\n                // Dispatch table entry for getBalance(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var1 = getBalance(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0xfb099c84) {\n                // Dispatch table entry for newInvestor()\n                var1 = 0x01e6;\n                newInvestor();\n                stop();\n            } else { goto label_01D7; }\n        }\n    }\n    \n    function func_01E3() {}\n    \n    function bet() {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n    \n        if (!(storage[0x08] / 0x0100 ** 0x14 & 0xff)) {\n            var var3 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var4 * 0x02 ** 0xe0;\n            var var5 = temp0 + 0x04;\n            var var6 = 0x20;\n            var var7 = memory[0x40:0x60];\n            var var8 = var5 - var7;\n            var var9 = var7;\n            var var10 = 0x00;\n            var var11 = var3;\n        \n            if (!address(var11).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x32).value(var10)(memory[var9:var9 + var8]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp2 = memory[0x40:0x60];\n                    var temp3 = memory[temp2:temp2 + 0x20];\n                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = 0x00;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = 0x0bbceb33 * 0x02 ** 0xe2;\n                    memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = storage[0x02] + 0x02ab98;\n                    memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x40;\n                    memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x03;\n                    memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x155493 * 0x02 ** 0xea;\n                    var3 = temp3 & 0x02 ** 0xa0 - 0x01;\n                    var4 = 0x2ef3accc;\n                    var5 = temp4 + 0x84;\n                    var6 = 0x20;\n                    var7 = memory[0x40:0x60];\n                    var8 = temp4 - var7 + 0x84;\n                    var10 = 0x00;\n                    var9 = var7;\n                    var11 = var3;\n                \n                    if (!address(var11).code.length) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp5;\n                        temp5, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x32).value(var10)(memory[var9:var9 + var8]);\n                    \n                        if (!temp5) {\n                            main();\n                            // Error: Could not resolve method call return address!\n                        } else {\n                            var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                        \n                            if (var0 < msg.value) {\n                                var1 = msg.value - var0;\n                                var3 = 0x2710;\n                                var4 = 0x0869;\n                                var4 = getBankroll();\n                                var4 = var4 * 0x64;\n                            \n                                if (!var3) {\n                                    main();\n                                    // Error: Could not resolve method call return address!\n                                } else {\n                                    var temp6 = (var1 * 0x032a) / 0x2328 <= var4 / var3;\n                                    var3 = temp6;\n                                \n                                    if (!var3) {\n                                        if (!var3) {\n                                        label_09FC:\n                                            main();\n                                            // Error: Could not resolve method call return address!\n                                        } else {\n                                        label_0898:\n                                            var temp7 = memory[0x40:0x60];\n                                            memory[temp7:temp7 + 0x20] = msg.sender;\n                                            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var1;\n                                            var temp8 = memory[0x40:0x60];\n                                            log(memory[temp8:temp8 + temp7 - temp8 + 0x40], [0xa39417f926ed806b475d2cd74083819551616e7fdb3f5bb7abf8e893eae244b4]);\n                                            var3 = 0x0942;\n                                            var temp9 = memory[0x40:0x60];\n                                            var4 = temp9;\n                                            memory[0x40:0x60] = var4 + 0x40;\n                                            memory[var4:var4 + 0x20] = 0x06;\n                                            memory[var4 + 0x20:var4 + 0x20 + 0x20] = 0x6e65737465640000000000000000000000000000000000000000000000000000;\n                                            var temp10 = memory[0x40:0x60];\n                                            var5 = temp10;\n                                            memory[0x40:0x60] = var5 + 0x01c0;\n                                            memory[var5:var5 + 0x20] = 0x0189;\n                                            memory[var5 + 0x20:var5 + 0x20 + 0x0189] = code[0x2ae2:0x2c6b];\n                                            var6 = storage[0x02] + 0x02ab98;\n                                            var3 = func_1AA4(var4, var5, var6);\n                                            var temp11 = memory[0x40:0x60];\n                                            memory[0x40:0x60] = temp11 + 0x60;\n                                            memory[temp11:temp11 + 0x20] = msg.sender;\n                                            var temp12 = temp11 + 0x20;\n                                            memory[temp12:temp12 + 0x20] = var1;\n                                            var temp13 = temp11 + 0x40;\n                                            memory[temp13:temp13 + 0x20] = 0x00;\n                                            memory[0x00:0x20] = var3;\n                                            memory[0x20:0x40] = 0x0b;\n                                            var temp14 = keccak256(memory[0x00:0x40]);\n                                            storage[temp14] = (memory[temp11:temp11 + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[temp14] & ~(0x02 ** 0xa0 - 0x01));\n                                            storage[temp14 + 0x01] = memory[temp12:temp12 + 0x20];\n                                            storage[temp14 + 0x02] = memory[temp13:temp13 + 0x20];\n                                            var temp15 = storage[0x0c];\n                                            var4 = temp15;\n                                            var temp16 = var4 + 0x01;\n                                            storage[0x0c] = temp16;\n                                            var2 = var3;\n                                            var3 = 0x0c;\n                                            var5 = temp16;\n                                            var6 = var3;\n                                            var7 = var5;\n                                            var8 = var4;\n                                        \n                                            if (!var8 > var7) {\n                                            label_09E0:\n                                                memory[0x00:0x20] = var3;\n                                                storage[var4 + keccak256(memory[0x00:0x20])] = var2;\n                                                return;\n                                            } else {\n                                                memory[0x00:0x20] = var6;\n                                                var temp17 = keccak256(memory[0x00:0x20]);\n                                                var temp18 = var8;\n                                                var8 = 0x09e0;\n                                                var9 = temp17 + temp18;\n                                                var10 = var7 + temp17;\n                                            \n                                                if (var9 <= var10) {\n                                                    var8 = var9;\n                                                    // Error: Could not resolve jump destination!\n                                                } else {\n                                                    var8 = func_09D1(var9, var10);\n                                                    goto label_09E0;\n                                                }\n                                            }\n                                        }\n                                    } else if (var1 < 0x02c68af0bb140000) { goto label_09FC; }\n                                    else { goto label_0898; }\n                                }\n                            } else {\n                                main();\n                                // Error: Could not resolve method call return address!\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_09D1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        storage[temp0] = 0x00;\n        arg1 = temp0 + 0x01;\n    \n        if (arg0 <= arg1) { return arg0; }\n    \n        r0 = func_09D1(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function divest() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])]) {\n            var var0 = 0x01e3;\n            var var1 = msg.sender;\n            func_1D80(var1);\n            func_01E3();\n            // Error: Could not resolve method call return address!\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getBet(var arg0) returns (var r0, var arg0, var r2) {\n        r2 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x00;\n    \n        if (arg0 >= storage[0x0c]) {\n        label_0A9A:\n            var temp0 = r2;\n            r2 = var2;\n            r0 = temp0;\n            arg0 = var1;\n            return r0, arg0, r2;\n        } else {\n            var var4 = 0x0c;\n            var var5 = arg0;\n        \n            if (var5 >= storage[var4]) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                memory[0x00:0x20] = var4;\n                var temp1 = storage[var5 + keccak256(memory[0x00:0x20])];\n                memory[0x00:0x20] = temp1;\n                memory[0x20:0x40] = 0x0b;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                r2 = storage[temp2] & 0x02 ** 0xa0 - 0x01;\n                var1 = storage[temp2 + 0x01];\n                var2 = storage[temp2 + 0x02];\n                var3 = temp1;\n                goto label_0A9A;\n            }\n        }\n    }\n    \n    function getBankroll() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x06] < storage[0x0d];\n    \n        if (!var1) {\n            var temp0 = storage[0x06];\n            var1 = temp0 + storage[0x0d] < temp0;\n        \n            if (var1) { goto label_0ACE; }\n            else { goto label_0AC2; }\n        } else if (var1) {\n        label_0ACE:\n        \n            if (!var1) {\n            label_0ADF:\n                return (storage[0x06] + storage[0x0d]) - storage[0x0e];\n            } else {\n            label_0AD4:\n                return 0x00;\n            }\n        } else {\n        label_0AC2:\n        \n            if (storage[0x06] + storage[0x0d] >= storage[0x0e]) { goto label_0ADF; }\n            else { goto label_0AD4; }\n        }\n    }\n    \n    function getProfitShare(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        var var0 = 0x00;\n        var var1 = storage[0x06];\n        var var2 = storage[0x0d] * storage[keccak256(memory[var0:var0 + 0x40]) + 0x01];\n    \n        if (var1) { return var2 / var1; }\n    \n        main();\n        // Error: Could not resolve method call return address!\n    }\n    \n    function stopContract() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            storage[0x08] = (storage[0x08] & ~(0xff * 0x02 ** 0xa0)) | 0x02 ** 0xa0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x3bb54b4ced112fe0d4fa7efd42b29a0a9036fde6e206de4290c4ff02d2dc2c5c]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function numInvestors() returns (var r0) { return storage[0x05]; }\n    \n    function getLossesShare(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        var var0 = 0x00;\n        var var1 = storage[0x06];\n        var var2 = storage[0x0e] * storage[keccak256(memory[var0:var0 + 0x40]) + 0x01];\n    \n        if (var1) { return var2 / var1; }\n    \n        main();\n        // Error: Could not resolve method call return address!\n    }\n    \n    function voteEmergencyWithdrawal(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!storage[keccak256(memory[0x00:0x40])]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x03;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])];\n            memory[0x20:0x40] = 0x04;\n            var temp1 = keccak256(memory[0x00:0x40]) + 0x02;\n            var temp2 = arg0;\n            storage[temp1] = (temp2 * 0x02 ** 0xf8) / 0x02 ** 0xf8 | (storage[temp1] & ~0xff);\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = temp0;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = !!temp2;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0xea22ee15de9c385abeff072b23d6e0de5ebda8c59098f5585f45e82b9faa5762]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function changeHouseAddress(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp1 = arg0;\n            var temp2 = (temp1 * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x08] & ~(0x02 ** 0xa0 - 0x01));\n            storage[0x08] = temp2;\n            var temp3 = memory[0x40:0x60];\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            memory[temp3:temp3 + 0x20] = temp4 & temp2;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp1 & temp4;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + temp3 - temp5 + 0x40], [0xb750ac854b12114073b8c76dcfe5fb889b30db5d3d60e07abc8ae66c349d7a68]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function forceDivestOfAllInvestors() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            var0 = storage[0x05];\n            var1 = 0x01;\n        \n            if (var1 > var0) {\n            label_0DB1:\n                return;\n            } else {\n            label_0D6B:\n                memory[0x00:0x20] = 0x01;\n                memory[0x20:0x40] = 0x04;\n                var var2 = 0x0da8;\n                var var3 = storage[0xabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05] & 0x02 ** 0xa0 - 0x01;\n                func_1D80(var3);\n                var1 = var1 + 0x01;\n            \n                if (var1 > var0) { goto label_0DB1; }\n                else { goto label_0D6B; }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_0DC9(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = MSIZE();\n        var temp1 = arg2;\n        memory[temp0:temp0 + 0x20] = temp1;\n        memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n        arg2 = temp0;\n        __callback(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function __callback(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x0df0;\n        var1 = func_1FAC();\n    \n        if (msg.sender == var1 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0b;\n            var1 = arg0;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0b;\n                var var2 = arg0;\n            \n                if (storage[keccak256(memory[0x00:0x40]) + 0x02] <= 0x00) {\n                    var var3 = arg0;\n                    var var4 = arg1;\n                    var var5 = 0x00;\n                    var var6 = 0x0e61;\n                    var var7 = var4;\n                    var6 = func_20C5(var7);\n                    var5 = var6;\n                    var6 = var5 < 0x01;\n                \n                    if (!var6) {\n                        var6 = var5 > 0x2710;\n                    \n                        if (!var6) { goto label_0E8E; }\n                        else { goto label_0E7A; }\n                    } else if (!var6) {\n                    label_0E8E:\n                    \n                        if (!var6) {\n                        label_0ECA:\n                            var6 = arg0;\n                            var7 = 0x2710;\n                            var var8 = 0x0ed6;\n                            var8 = getBankroll();\n                            var8 = var8 * 0x64;\n                        \n                            if (!var7) {\n                                main();\n                                // Error: Could not resolve method call return address!\n                            } else {\n                                memory[0x00:0x20] = var6;\n                                memory[0x20:0x40] = 0x0b;\n                                var temp0 = (storage[keccak256(memory[0x00:0x40]) + 0x01] * 0x032a) / 0x2328 <= var8 / var7;\n                                var7 = temp0;\n                            \n                                if (var7) {\n                                    memory[0x00:0x20] = var6;\n                                    memory[0x20:0x40] = 0x0b;\n                                \n                                    if (storage[keccak256(memory[0x00:0x40]) + 0x01] < 0x02c68af0bb140000) { goto label_0FDA; }\n                                    else { goto label_0F2C; }\n                                } else if (!var7) {\n                                label_0FDA:\n                                    memory[0x00:0x20] = var6;\n                                    memory[0x20:0x40] = 0x0b;\n                                    var temp1 = keccak256(memory[0x00:0x40]);\n                                    storage[temp1 + 0x02] = 0x01869f;\n                                    var7 = 0x0fd5;\n                                    var var9 = storage[temp1 + 0x01];\n                                    var8 = storage[temp1] & 0x02 ** 0xa0 - 0x01;\n                                    func_20DA(var8, var9);\n                                \n                                label_0FD5:\n                                \n                                label_1010:\n                                    return;\n                                } else {\n                                label_0F2C:\n                                    var7 = 0x0f34;\n                                    var8 = arg1;\n                                    var7 = func_20C5(var8);\n                                    memory[0x00:0x20] = arg0;\n                                    memory[0x20:0x40] = 0x0b;\n                                    var temp2 = keccak256(memory[0x00:0x40]);\n                                    var temp3 = var7;\n                                    storage[temp2 + 0x02] = temp3;\n                                    var temp4 = memory[0x40:0x60];\n                                    memory[0x40:0x60] = temp4 + 0x60;\n                                    memory[temp4:temp4 + 0x20] = storage[temp2] & 0x02 ** 0xa0 - 0x01;\n                                    memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[temp2 + 0x01];\n                                    memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = temp3;\n                                    var0 = temp3;\n                                    var7 = 0x0f82;\n                                    var8 = temp4;\n                                    var9 = var0;\n                                    func_228E(var8, var9);\n                                \n                                label_0F82:\n                                    memory[0x00:0x20] = arg0;\n                                    memory[0x20:0x40] = 0x0b;\n                                    var temp5 = keccak256(memory[0x00:0x40]);\n                                    var temp6 = memory[0x40:0x60];\n                                    memory[0x40:0x60] = temp6 + 0x60;\n                                    memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n                                    memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = storage[temp5 + 0x01];\n                                    memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = storage[temp5 + 0x02];\n                                    var8 = temp6;\n                                    var7 = 0x0fca;\n                                    var9 = var0;\n                                    func_234B(var8, var9);\n                                    storage[0x0f] = storage[0x0f] & ~0xff;\n                                    goto label_0FD5;\n                                }\n                            }\n                        } else {\n                        label_0E94:\n                            memory[0x00:0x20] = var3;\n                            memory[0x20:0x40] = 0x0b;\n                            var temp7 = keccak256(memory[0x00:0x40]);\n                            storage[temp7 + 0x02] = 0x01869f;\n                            var6 = 0x0ec5;\n                            var8 = storage[temp7 + 0x01];\n                            var7 = storage[temp7] & 0x02 ** 0xa0 - 0x01;\n                            func_20DA(var7, var8);\n                            goto label_1010;\n                        }\n                    } else {\n                    label_0E7A:\n                        memory[0x00:0x20] = var3;\n                        memory[0x20:0x40] = 0x0b;\n                    \n                        if (storage[keccak256(memory[0x00:0x40]) + 0x02]) { goto label_0ECA; }\n                        else { goto label_0E94; }\n                    }\n                } else {\n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function isStopped() returns (var r0) { return storage[0x08] / 0x02 ** 0xa0 & 0xff; }\n    \n    function investors(var arg0) returns (var arg0, var r1, var r2) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0xff;\n        return arg0, r1, r2;\n    }\n    \n    function searchSmallestInvestor() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = var1;\n    \n        if (var2 > storage[0x05]) {\n        label_10C0:\n            return var1;\n        } else {\n        label_106C:\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x04;\n            var var3 = 0x108c;\n            var var4 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var3 = getBalance(var4);\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x04;\n            var4 = 0x10ad;\n            var var5 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var4 = getBalance(var5);\n        \n            if (var4 >= var3) {\n                var2 = var2 + 0x01;\n            \n            label_1062:\n            \n                if (var2 > storage[0x05]) { goto label_10C0; }\n                else { goto label_106C; }\n            } else {\n                var1 = var2;\n                var2 = var1 + 0x01;\n                goto label_1062;\n            }\n        }\n    }\n    \n    function proposeEmergencyWithdrawal(var arg0) {\n        var var0 = 0x00;\n    \n        if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[0x07] & temp0 == temp0 & msg.sender) {\n                var0 = 0x01;\n            \n                if (var0 > storage[0x05]) {\n                label_112E:\n                    var temp1 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp1 + 0x40;\n                    var temp2 = arg0;\n                    memory[temp1:temp1 + 0x20] = temp2;\n                    var temp3 = block.timestamp;\n                    memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp3;\n                    storage[0x09] = (temp2 * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x09] & ~(0x02 ** 0xa0 - 0x01));\n                    storage[0x0a] = temp3;\n                    log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x6c0eb56f121418f16eaebbe01cb2694897b8578b3b1c549e634a1b7753ed2d8b]);\n                    return;\n                } else {\n                label_110D:\n                    var temp4 = var0;\n                    memory[0x00:0x20] = temp4;\n                    memory[0x20:0x40] = 0x04;\n                    var temp5 = keccak256(memory[0x00:0x40]) + 0x02;\n                    storage[temp5] = storage[temp5] & ~0xff;\n                    var0 = temp4 + 0x01;\n                \n                    if (var0 > storage[0x05]) { goto label_112E; }\n                    else { goto label_110D; }\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getStatus() returns (var r0, var r1, var r2, var r3, var r4, var r5, var r6, var r7) {\n        r1 = 0x00;\n        r2 = 0x00;\n        r3 = 0x00;\n        r4 = 0x00;\n        r5 = 0x00;\n        r6 = 0x00;\n        r7 = 0x00;\n        var var7 = 0x00;\n        var var8 = 0x00;\n        var var9 = 0x00;\n        var var10 = 0x11aa;\n        var10 = getBankroll();\n        var8 = var10;\n        var10 = 0x11b4;\n        var10 = getMinInvestment();\n        r7 = storage[0x0c];\n        r6 = var10;\n        r5 = storage[0x0d] - storage[0x0e];\n        r4 = 0x02c68af0bb140000;\n        r3 = 0x64;\n        r2 = 0xbe;\n        r1 = 0x2328;\n        r0 = var8;\n        return r0, r1, r2, r3, r4, r5, r6, r7;\n    }\n    \n    function changeOraclizeProofType(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (arg0 & ~(0x02 ** 0xf8 - 0x01)) {\n            var var0 = 0x0c9f;\n            var var1 = arg0 | 0x02 ** 0xf8;\n            func_2436(var1);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function forceDivestOfOneInvestor(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            var var0 = 0x1272;\n            var var1 = arg0;\n            func_1D80(var1);\n            storage[0x09] = storage[0x09] & ~(0x02 ** 0xa0 - 0x01);\n            storage[0x0a] = 0x00;\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function proposedWithdrawal() returns (var r0, var r1) {\n        r1 = storage[0x0a];\n        r0 = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n        return r0, r1;\n    }\n    \n    function getMaxBetAmount() returns (var r0) {\n        var var0 = 0x00;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x38cc4831 * 0x02 ** 0xe0;\n        var var1 = var0;\n        var var2 = var1;\n        var var6 = 0x20;\n        var var3 = storage[var2] & 0x02 ** 0xa0 - 0x01;\n        var var7 = memory[0x40:0x60];\n        var var4 = 0x38cc4831;\n        var var5 = temp0 + 0x04;\n        var var8 = temp0 - var7 + 0x04;\n        var var9 = var7;\n        var var10 = var2;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp1;\n            temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x32).value(var10)(memory[var9:var9 + var8]);\n        \n            if (!temp1) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp2 = memory[0x40:0x60];\n                var temp3 = memory[temp2:temp2 + 0x20];\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = 0x00;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x0bbceb33 * 0x02 ** 0xe2;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = storage[0x02] + 0x02ab98;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x40;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x03;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x155493 * 0x02 ** 0xea;\n                var3 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var4 = 0x2ef3accc;\n                var5 = temp4 + 0x84;\n                var6 = 0x20;\n                var7 = memory[0x40:0x60];\n                var8 = temp4 - var7 + 0x84;\n                var10 = 0x00;\n                var9 = var7;\n                var11 = var3;\n            \n                if (!address(var11).code.length) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp5;\n                    temp5, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x32).value(var10)(memory[var9:var9 + var8]);\n                \n                    if (!temp5) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                        var3 = 0x7b98a0;\n                        var4 = 0x2328;\n                        var5 = 0x1393;\n                        var5 = getBankroll();\n                        var4 = var5 * 0x64 * var4;\n                    \n                        if (var3) { return var4 / var3 + var1; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        }\n    }\n    \n    function investorsLosses() returns (var r0) { return storage[0x0e]; }\n    \n    function investorsProfit() returns (var r0) { return storage[0x0d]; }\n    \n    function investorIDs(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function betsKeys(var arg0) returns (var arg0) {\n        var var0 = 0x0c;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else {\n            memory[0x00:0x20] = var0;\n            return storage[var1 + keccak256(memory[0x00:0x20])];\n        }\n    }\n    \n    function getMinInvestment() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (storage[0x05] != 0x0a) {\n            var0 = 0x00;\n        \n        label_09DC:\n            return var0;\n        } else {\n            var var2 = 0x1401;\n            var2 = searchSmallestInvestor();\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x04;\n            var1 = var2;\n            var2 = 0x1425;\n            var var3 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var2 = getBalance(var3);\n            var0 = var2;\n            goto label_09DC;\n        }\n    }\n    \n    function getMinBetAmount() returns (var r0) {\n        var var0 = 0x00;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x38cc4831 * 0x02 ** 0xe0;\n        var var1 = var0;\n        var var2 = storage[var1] & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x38cc4831;\n        var var4 = temp0 + 0x04;\n        var var6 = memory[0x40:0x60];\n        var var5 = 0x20;\n        var var7 = temp0 - var6 + 0x04;\n        var var8 = var6;\n        var var9 = var1;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp1;\n            temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x32).value(var9)(memory[var8:var8 + var7]);\n        \n            if (!temp1) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp2 = memory[0x40:0x60];\n                var temp3 = memory[temp2:temp2 + 0x20];\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = 0x00;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x0bbceb33 * 0x02 ** 0xe2;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = storage[0x02] + 0x02ab98;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x40;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x03;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x155493 * 0x02 ** 0xea;\n                var2 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x2ef3accc;\n                var4 = temp4 + 0x84;\n                var5 = 0x20;\n                var6 = memory[0x40:0x60];\n                var7 = temp4 - var6 + 0x84;\n                var9 = 0x00;\n                var8 = var6;\n                var10 = var2;\n            \n                if (!address(var10).code.length) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp5;\n                    temp5, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x32).value(var9)(memory[var8:var8 + var7]);\n                \n                    if (temp5) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] + 0x02c68af0bb140000; }\n                \n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            }\n        }\n    }\n    \n    function changeOwnerAddress(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp1 = arg0;\n            var temp2 = (temp1 * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x07] & ~(0x02 ** 0xa0 - 0x01));\n            storage[0x07] = temp2;\n            var temp3 = memory[0x40:0x60];\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            memory[temp3:temp3 + 0x20] = temp4 & temp2;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp1 & temp4;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + temp3 - temp5 + 0x40], [0x4f67fe223bca69f22bf24552638f3c95bfb9e9763c4a33a3aa67a46484d81c2b]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function owner() returns (var r0) { return storage[0x07] & 0x02 ** 0xa0 - 0x01; }\n    \n    function increaseInvestment() {\n        if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (msg.value) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x03;\n        \n            if (storage[keccak256(memory[0x00:0x40])]) {\n                var var0 = 0x1623;\n                func_254D();\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x03;\n                memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])];\n                memory[0x20:0x40] = 0x04;\n                var temp0 = keccak256(memory[0x00:0x40]) + 0x01;\n                var temp1 = msg.value;\n                storage[temp0] = temp1 + storage[temp0];\n                storage[0x06] = temp1 + storage[0x06];\n                return;\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function resumeContract() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            storage[0x08] = storage[0x08] & ~(0xff * 0x02 ** 0xa0);\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xadf8f79dd508a8e1881e3cca67a5af02a21f971925c3a6a6cb8fc165d07e3463]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function bets(var arg0) returns (var arg0, var r1, var r2) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02];\n        return arg0, r1, r2;\n    }\n    \n    function invested() returns (var r0) { return storage[0x06]; }\n    \n    function changeGasLimitOfSafeSend(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            var var0 = arg0;\n        \n            if (var0 + 0x02ab98 < 0x02ab98) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else if (var0 >= 0x61a8) {\n                var temp1 = arg0;\n                storage[0x02] = temp1;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = temp1;\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp1;\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + temp2 - temp3 + 0x40], [0xb5e4ece1f96cc168fddcead7ee209f969a93607238c585767ea80fad5fe884b2]);\n                return;\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function houseAddress() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function changeOraclizeConfig(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            var var0 = 0x0c9f;\n            var var1 = arg0;\n            func_26E8(var1);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function numBets() returns (var r0) { return storage[0x0c]; }\n    \n    function executeEmergencyWithdrawal() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x08] / 0x02 ** 0xa0 & 0xff)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (storage[0x0a] + 0x03f480 <= block.timestamp) {\n            var1 = address(this).balance;\n            var2 = 0x01;\n        \n            if (var2 > storage[0x05]) {\n            label_187B:\n            \n                if (var0 < (storage[0x05] * 0x0a) / 0x64) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp1 = memory[0x40:0x60];\n                    var temp2 = var1;\n                    var temp3;\n                    temp3, memory[temp1:temp1 + 0x00] = address(storage[0x09] & 0x02 ** 0xa0 - 0x01).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp1:temp1 + 0x00]);\n                \n                    if (temp3) {\n                        var temp4 = memory[0x40:0x60];\n                        memory[temp4:temp4 + 0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var1;\n                        var temp5 = memory[0x40:0x60];\n                        log(memory[temp5:temp5 + temp4 - temp5 + 0x40], [0xe0376e740df28d6cbdef46880b37136bc75e027766e3295d4af8a44c557ae732]);\n                    \n                    label_0A01:\n                        return;\n                    } else {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                        var temp7 = memory[0x40:0x60];\n                        log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x0fd1ed783bf9505e3fc2545a18e022b8bd048d240d98a3c959646ccebd569b39]);\n                        goto label_0A01;\n                    }\n                }\n            } else {\n            label_1834:\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x04;\n            \n                if (!!(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff) != 0x01) {\n                    var2 = var2 + 0x01;\n                \n                label_182A:\n                \n                    if (var2 > storage[0x05]) { goto label_187B; }\n                    else { goto label_1834; }\n                } else {\n                    var temp8 = var2;\n                    memory[0x00:0x20] = temp8;\n                    memory[0x20:0x40] = 0x04;\n                    var temp9 = keccak256(memory[0x00:0x40]) + 0x02;\n                    storage[temp9] = storage[temp9] & ~0xff;\n                    var0 = var0 + 0x01;\n                    var2 = temp8 + 0x01;\n                    goto label_182A;\n                }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getBalance(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        memory[var0:var0 + 0x20] = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40]) + 0x01];\n        var var2 = var0;\n        var var3 = var2;\n        var var4 = 0x198e;\n        var var5 = arg0;\n        var4 = getProfitShare(var5);\n        var2 = var4;\n        var4 = 0x1999;\n        var5 = arg0;\n        var4 = getLossesShare(var5);\n        var3 = var4;\n        var temp0 = var2;\n        var4 = var1 + temp0 < temp0;\n    \n        if (!var4) {\n            var temp1 = var1;\n            var4 = temp1 + var2 < temp1;\n        \n            if (var4) { goto label_19B8; }\n            else { goto label_19B2; }\n        } else if (var4) {\n        label_19B8:\n        \n            if (!var4) {\n            label_19CA:\n                return (var1 + var2) - var3;\n            } else {\n            label_19BE:\n                return 0x00;\n            }\n        } else {\n        label_19B2:\n        \n            if (var1 + var2 >= var3) { goto label_19CA; }\n            else { goto label_19BE; }\n        }\n    }\n    \n    function newInvestor() {\n        var var0 = 0x00;\n    \n        if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (msg.value) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x03;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) {\n                var var1 = 0x1a2c;\n                var1 = getMinInvestment();\n            \n                if (msg.value > var1) {\n                    var1 = 0x1a3f;\n                    func_254D();\n                \n                    if (storage[0x05] != 0x0a) {\n                    label_1A76:\n                        var temp0 = storage[0x05] + 0x01;\n                        storage[0x05] = temp0;\n                        var var2 = temp0;\n                        var1 = 0x1a8b;\n                        func_27F6(var2);\n                    \n                        if (storage[0x05] <= 0x0a) { return; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var1 = 0x1a52;\n                        var1 = searchSmallestInvestor();\n                        memory[0x00:0x20] = var1;\n                        memory[0x20:0x40] = 0x04;\n                        var0 = var1;\n                        var1 = 0x1a76;\n                        var2 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                        func_1D80(var2);\n                        goto label_1A76;\n                    }\n                } else {\n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_1AA4(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[var1] & 0x02 ** 0xa0 - 0x01) {\n        label_1AC5:\n            var var2 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var3 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var3 * 0x02 ** 0xe0;\n            var var4 = temp0 + 0x04;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = 0x00;\n            var var10 = var2;\n        \n            if (!address(var10).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x32).value(var9)(memory[var8:var8 + var7]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    storage[0x01] = (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    var2 = storage[0x01] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                    var3 = 0x2ef3accc;\n                    var temp2 = arg0;\n                    var4 = temp2;\n                    var5 = arg2;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var3 * 0x02 ** 0xe0;\n                    var temp4 = temp3 + 0x04;\n                    var6 = temp4;\n                    var7 = var6;\n                    var temp5 = var7 + 0x20;\n                    memory[temp5:temp5 + 0x20] = var5;\n                    var temp6 = temp5 + 0x20;\n                    memory[var7:var7 + 0x20] = temp6 - var7;\n                    memory[temp6:temp6 + 0x20] = memory[var4:var4 + 0x20];\n                    var temp7 = temp6 + 0x20;\n                    var temp8 = memory[var4:var4 + 0x20];\n                    memory[temp7:temp7 + temp8] = address(0x04).call.gas((temp8 + 0x1f) / 0x20 * 0x03 + 0x0f)(memory[var4 + 0x20:var4 + 0x20 + temp8]);\n                    var8 = temp8 + temp7;\n                    var9 = temp8 & 0x1f;\n                \n                    if (!var9) {\n                        var4 = var8;\n                        var5 = 0x20;\n                        var6 = memory[0x40:0x60];\n                        var7 = var4 - var6;\n                        var8 = var6;\n                        var9 = 0x00;\n                        var10 = var2;\n                    \n                        if (!address(var10).code.length) {\n                            main();\n                            // Error: Could not resolve method call return address!\n                        } else {\n                        label_1C0F:\n                            var temp9;\n                            temp9, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x32).value(var9)(memory[var8:var8 + var7]);\n                        \n                            if (!temp9) {\n                                main();\n                                // Error: Could not resolve method call return address!\n                            } else {\n                                var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                            \n                                if (var1 <= arg2 * tx.gasprice + 0x0de0b6b3a7640000) {\n                                    var2 = storage[0x01] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                    var3 = 0xc51be90f;\n                                    var4 = var1;\n                                    var5 = 0x00;\n                                    var temp10 = arg0;\n                                    var6 = temp10;\n                                    var7 = arg1;\n                                    var8 = arg2;\n                                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                                    var temp11 = memory[0x40:0x60];\n                                    memory[temp11:temp11 + 0x20] = var3 * 0x02 ** 0xe0;\n                                    var temp12 = temp11 + 0x04;\n                                    var9 = temp12;\n                                    memory[var9:var9 + 0x20] = var5;\n                                    var temp13 = var9 + 0x20;\n                                    var10 = temp13;\n                                    var var11 = var10 + 0x20;\n                                    var temp14 = var11 + 0x20;\n                                    memory[temp14:temp14 + 0x20] = var8;\n                                    var temp15 = temp14 + 0x20;\n                                    memory[var10:var10 + 0x20] = temp15 - var9;\n                                    memory[temp15:temp15 + 0x20] = memory[var6:var6 + 0x20];\n                                    var temp16 = temp15 + 0x20;\n                                    var temp17 = memory[var6:var6 + 0x20];\n                                    memory[temp16:temp16 + temp17] = address(0x04).call.gas((temp17 + 0x1f) / 0x20 * 0x03 + 0x0f)(memory[var6 + 0x20:var6 + 0x20 + temp17]);\n                                    var var12 = temp17 + temp16;\n                                    var var13 = temp17 & 0x1f;\n                                \n                                    if (!var13) {\n                                        var temp18 = var12;\n                                        memory[var11:var11 + 0x20] = temp18 - var9;\n                                        var temp19 = var7;\n                                        memory[temp18:temp18 + 0x20] = memory[temp19:temp19 + 0x20];\n                                        var temp20 = temp18 + 0x20;\n                                        var temp21 = memory[temp19:temp19 + 0x20];\n                                        memory[temp20:temp20 + temp21] = address(0x04).call.gas((temp21 + 0x1f) / 0x20 * 0x03 + 0x0f)(memory[temp19 + 0x20:temp19 + 0x20 + temp21]);\n                                        var12 = temp21 + temp20;\n                                        var13 = temp21 & 0x1f;\n                                    \n                                        if (!var13) {\n                                        label_1D46:\n                                            var5 = var12;\n                                            var6 = 0x20;\n                                            var7 = memory[0x40:0x60];\n                                            var8 = var5 - var7;\n                                            var9 = var7;\n                                            var10 = var4;\n                                            var11 = var2;\n                                        \n                                            if (!address(var11).code.length) {\n                                                main();\n                                                // Error: Could not resolve method call return address!\n                                            } else {\n                                            label_1D62:\n                                                var temp22;\n                                                temp22, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x235a).value(var10)(memory[var9:var9 + var8]);\n                                            \n                                                if (!temp22) {\n                                                    main();\n                                                    // Error: Could not resolve method call return address!\n                                                } else {\n                                                    var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                                                \n                                                label_1D77:\n                                                    return var0;\n                                                }\n                                            }\n                                        } else {\n                                        label_1D2D:\n                                            var temp23 = var13;\n                                            var temp24 = var12 - temp23;\n                                            memory[temp24:temp24 + 0x20] = ~(0x0100 ** (0x20 - temp23) - 0x01) & memory[temp24:temp24 + 0x20];\n                                            var5 = temp24 + 0x20;\n                                            var6 = 0x20;\n                                            var7 = memory[0x40:0x60];\n                                            var8 = var5 - var7;\n                                            var9 = var7;\n                                            var10 = var4;\n                                            var11 = var2;\n                                        \n                                            if (address(var11).code.length) { goto label_1D62; }\n                                        \n                                            main();\n                                            // Error: Could not resolve method call return address!\n                                        }\n                                    } else {\n                                        var temp25 = var13;\n                                        var temp26 = var12 - temp25;\n                                        memory[temp26:temp26 + 0x20] = ~(0x0100 ** (0x20 - temp25) - 0x01) & memory[temp26:temp26 + 0x20];\n                                        var temp27 = temp26 + 0x20;\n                                        memory[var11:var11 + 0x20] = temp27 - var9;\n                                        var temp28 = var7;\n                                        memory[temp27:temp27 + 0x20] = memory[temp28:temp28 + 0x20];\n                                        var temp29 = temp27 + 0x20;\n                                        var temp30 = memory[temp28:temp28 + 0x20];\n                                        memory[temp29:temp29 + temp30] = address(0x04).call.gas((temp30 + 0x1f) / 0x20 * 0x03 + 0x0f)(memory[temp28 + 0x20:temp28 + 0x20 + temp30]);\n                                        var12 = temp30 + temp29;\n                                        var13 = temp30 & 0x1f;\n                                    \n                                        if (!var13) { goto label_1D46; }\n                                        else { goto label_1D2D; }\n                                    }\n                                } else {\n                                    var0 = 0x00;\n                                    goto label_1D77;\n                                }\n                            }\n                        }\n                    } else {\n                        var temp31 = var9;\n                        var temp32 = var8 - temp31;\n                        memory[temp32:temp32 + 0x20] = ~(0x0100 ** (0x20 - temp31) - 0x01) & memory[temp32:temp32 + 0x20];\n                        var4 = temp32 + 0x20;\n                        var5 = 0x20;\n                        var6 = memory[0x40:0x60];\n                        var7 = var4 - var6;\n                        var8 = var6;\n                        var9 = 0x00;\n                        var10 = var2;\n                    \n                        if (address(var10).code.length) { goto label_1C0F; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        } else {\n            var2 = 0x1ac3;\n            var3 = 0x00;\n            var2 = func_288B(var3);\n        \n        label_1AC3:\n            goto label_1AC5;\n        }\n    }\n    \n    function func_1D80(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = 0x1d90;\n        func_254D();\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x1db4;\n        var var5 = arg0;\n        var4 = getBalance(var5);\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x04;\n        var1 = var4;\n    \n        if (storage[0x06] < storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n            storage[0x08] = (storage[0x08] & ~(0xff * 0x02 ** 0xa0)) | 0x02 ** 0xa0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x52e578ad17dc8fe0ff456fdf1f81516f7d29eb85fff301475a3a29d0e84bb31a]);\n        \n            if (storage[0x05] <= 0x0a) {\n            label_1016:\n                return;\n            } else {\n            label_1FA0:\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            var temp0 = var0;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x04;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = temp1 + 0x01;\n            storage[0x06] = storage[0x06] - storage[temp2];\n            storage[temp1] = storage[temp1] & ~(0x02 ** 0xa0 - 0x01);\n            storage[temp2] = 0x00;\n            var temp3 = temp1 + 0x02;\n            storage[temp3] = storage[temp3] & ~0xff;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var temp4 = var1;\n            var1 = temp4 - (temp4 * 0x32) / 0x2710;\n            var2 = (temp4 * 0x32) / 0x2710;\n        \n            if (temp0 == storage[0x05]) {\n                storage[0x05] = storage[0x05] + ~0x00;\n                var4 = 0x1ef4;\n                var5 = arg0;\n                var var6 = var1;\n                func_20DA(var5, var6);\n            \n            label_1EF4:\n                var4 = 0x1f0a;\n                var5 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                var6 = var2;\n                func_20DA(var5, var6);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var1;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0x3026a12843449d7e7377f8932a40bdb5d1b1125efbfbe147132016f8beac0f34]);\n            \n                if (storage[0x05] <= 0x0a) { goto label_1016; }\n                else { goto label_1FA0; }\n            } else {\n                memory[0x00:0x20] = storage[0x05];\n                memory[0x20:0x40] = 0x04;\n                var temp7 = keccak256(memory[0x00:0x40]);\n                var temp8 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp8 & storage[temp7];\n                memory[0x20:0x40] = 0x03;\n                var temp9 = var0;\n                storage[keccak256(memory[0x00:0x40])] = temp9;\n                memory[0x00:0x20] = temp9;\n                memory[0x20:0x40] = 0x04;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                var temp11 = ~(0x02 ** 0xa0 - 0x01);\n                storage[temp10] = (temp11 & storage[temp10]) | ((temp8 & storage[temp7]) * 0x02 ** 0x60) / 0x02 ** 0x60;\n                storage[temp10 + 0x01] = storage[temp7 + 0x01];\n                var temp12 = temp10 + 0x02;\n                var temp13 = ~0xff;\n                storage[temp12] = (temp13 & storage[temp12]) | ((storage[temp7 + 0x02] & 0xff) * 0x02 ** 0xf8) / 0x02 ** 0xf8;\n                memory[0x00:0x20] = storage[0x05];\n                var temp14 = keccak256(memory[0x00:0x40]);\n                storage[temp14] = temp11 & storage[temp14];\n                storage[temp14 + 0x01] = 0x00;\n                var3 = temp7;\n                var temp15 = temp14 + 0x02;\n                storage[temp15] = temp13 & storage[temp15];\n                storage[0x05] = storage[0x05] + ~0x00;\n                var4 = 0x1ef4;\n                var5 = arg0;\n                var6 = var1;\n                func_20DA(var5, var6);\n                goto label_1EF4;\n            }\n        }\n    }\n    \n    function func_1FAC() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0x02 ** 0xa0 - 0x01) {\n        label_1FCB:\n            var var1 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var2 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var2 * 0x02 ** 0xe0;\n            var var3 = temp0 + 0x04;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x32).value(var8)(memory[var7:var7 + var6]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp2 = memory[0x40:0x60];\n                    var temp3 = (memory[temp2:temp2 + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    storage[0x01] = temp3;\n                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = 0x00;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = 0xc281d19e00000000000000000000000000000000000000000000000000000000;\n                    var1 = temp3 & 0x02 ** 0xa0 - 0x01;\n                    var2 = 0xc281d19e;\n                    var3 = temp4 + 0x04;\n                    var4 = 0x20;\n                    var5 = memory[0x40:0x60];\n                    var6 = temp4 - var5 + 0x04;\n                    var8 = 0x00;\n                    var7 = var5;\n                    var9 = var1;\n                \n                    if (!address(var9).code.length) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp5;\n                        temp5, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x32).value(var8)(memory[var7:var7 + var6]);\n                    \n                        if (temp5) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        } else {\n            var1 = 0x1fc9;\n            var2 = 0x00;\n            var1 = func_288B(var2);\n        \n        label_1FC9:\n            goto label_1FCB;\n        }\n    }\n    \n    function func_20C5(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20d2;\n        var var2 = arg0;\n        var var3 = 0x00;\n        return func_298F(var2, var3);\n    }\n    \n    function func_20DA(var arg0, var arg1) {\n        if (!arg1) {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x4763e3feef50167ae1957a20ba2b75b5f4093062392e81d5e351b709b1d8261f]);\n            goto label_0DB1;\n        } else if (address(this).balance >= arg1) {\n            var temp0 = memory[0x40:0x60];\n            var temp1;\n            temp1, memory[temp0:temp0 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(storage[0x02]).value(arg1)(memory[temp0:temp0 + 0x00]);\n        \n            if (temp1) {\n            label_2243:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = arg1;\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + temp2 - temp3 + 0x40], [0xc7e416c5685d8971558840f05c5e63e02575b29997d8da6b9ba44dc10da6a370]);\n                return;\n            } else {\n                var temp4 = memory[0x40:0x60];\n                var temp5 = arg0;\n                memory[temp4:temp4 + 0x20] = temp5 & 0x02 ** 0xa0 - 0x01;\n                memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg1;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + temp4 - temp6 + 0x40], [0x949201d78c50a6b453f7068ed19a5c7d74aaa07c12cadfd3855357a0b0f47405]);\n                var temp7 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x08] & temp7 == temp7 & temp5) { goto label_2243; }\n            \n                var temp8 = memory[0x40:0x60];\n                var temp9;\n                temp9, memory[temp8:temp8 + 0x00] = address(storage[0x08] & 0x02 ** 0xa0 - 0x01).call.gas(storage[0x02]).value(arg1)(memory[temp8:temp8 + 0x00]);\n            \n                if (temp9) { goto label_2243; }\n            \n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = arg1;\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + temp10 - temp11 + 0x40], [0x949201d78c50a6b453f7068ed19a5c7d74aaa07c12cadfd3855357a0b0f47405]);\n                goto label_2243;\n            }\n        } else {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x504b0ae89b95779262e99243870eb936180a8c33b444f17f01807c40a20c7aa7]);\n        \n        label_0DB1:\n            return;\n        }\n    }\n    \n    function func_228E(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = arg1;\n    \n        if (var1 - 0x01 >= 0x2328) { return; }\n    \n        var temp0 = arg0;\n        var temp1 = (memory[temp0 + 0x20:temp0 + 0x20 + 0x20] * 0x2652) / 0x2328;\n        var0 = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = memory[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = arg1;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xa5acb022726d980b249ddc212f4992ad87f28c093550232fcc48bd8af803f2d5]);\n        var var2 = 0x230e;\n        var var3 = memory[temp0:temp0 + 0x20];\n        var var4 = var0;\n        func_20DA(var3, var4);\n        var temp6 = storage[0x0e];\n        var2 = temp6 + var0 < temp6;\n    \n        if (var2) {\n            if (!var2) {\n            label_2331:\n                storage[0x0e] = storage[0x0e] + (var0 - memory[arg0 + 0x20:arg0 + 0x20 + 0x20]);\n                return;\n            } else {\n            label_232D:\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else if (storage[0x0e] + var0 >= memory[arg0 + 0x20:arg0 + 0x20 + 0x20]) { goto label_2331; }\n        else { goto label_232D; }\n    }\n    \n    function func_234B(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n    \n        if (var2 + ~0x00 < 0x2328) {\n        label_1016:\n            return;\n        } else {\n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = memory[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = arg1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0xf6db2bace4ac8277384553ad9603d045220a91fb2448ab6130d7a6f044f9a8cf]);\n            var var4 = memory[temp0:temp0 + 0x20];\n            var var3 = 0x23af;\n            var var5 = 0x01;\n            func_20DA(var4, var5);\n            var temp3 = storage[0x0d];\n            var3 = temp3 + memory[arg0 + 0x20:arg0 + 0x20 + 0x20] < temp3;\n        \n            if (!var3) {\n                var temp8 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20];\n                var3 = temp8 + storage[0x0d] < temp8;\n            \n                if (var3) { goto label_23DB; }\n                else { goto label_23D2; }\n            } else if (var3) {\n            label_23DB:\n            \n                if (!var3) {\n                label_23E5:\n                    var temp4 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20];\n                    var temp5 = ~0x00;\n                    var temp6 = temp5 + temp4 + storage[0x0d];\n                    var0 = temp6;\n                    var temp7 = ((temp5 + temp4) * 0x26b6) / 0x2710 + storage[0x0d];\n                    storage[0x0d] = temp7;\n                    var1 = var0 - temp7;\n                    var3 = 0x1016;\n                    var4 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    func_20DA(var4, var5);\n                    goto label_1016;\n                } else {\n                label_23E1:\n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            } else {\n            label_23D2:\n            \n                if (memory[arg0 + 0x20:arg0 + 0x20 + 0x20] != 0x01) { goto label_23E5; }\n                else { goto label_23E1; }\n            }\n        }\n    }\n    \n    function func_2436(var arg0) {\n        if (storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n        label_2454:\n            var var0 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var1 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1 * 0x02 ** 0xe0;\n            var var2 = temp0 + 0x04;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp2 = memory[0x40:0x60];\n                    var temp3 = (memory[temp2:temp2 + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    storage[0x01] = temp3;\n                    memory[temp2:temp2 + 0x20] = 0x688dcfd700000000000000000000000000000000000000000000000000000000;\n                    memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = arg0 & ~(0x02 ** 0xf8 - 0x01);\n                    var0 = temp3 & 0x02 ** 0xa0 - 0x01;\n                    var1 = 0x688dcfd7;\n                    var2 = temp2 + 0x24;\n                    var3 = 0x00;\n                    var4 = memory[0x40:0x60];\n                    var5 = temp2 - var4 + 0x24;\n                    var6 = var4;\n                    var7 = var3;\n                    var8 = var0;\n                \n                    if (!address(var8).code.length) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp4;\n                        temp4, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n                    \n                        if (temp4) { return; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        } else {\n            var0 = 0x2452;\n            var1 = 0x00;\n            var0 = func_288B(var1);\n        \n        label_2452:\n            goto label_2454;\n        }\n    }\n    \n    function func_254D() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (storage[0x0f] & 0xff) { return; }\n    \n        var1 = 0x01;\n    \n        if (var1 > storage[0x05]) {\n        label_26C2:\n            storage[0x0d] = 0x00;\n            storage[0x0e] = 0x00;\n            storage[0x06] = var0;\n            storage[0x0f] = (storage[0x0f] & ~0xff) | 0x01;\n            return;\n        } else {\n        label_2573:\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x04;\n            var2 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var var5 = 0x2595;\n            var var6 = var2;\n            var5 = getProfitShare(var6);\n            var3 = var5;\n            var5 = 0x25a0;\n            var6 = var2;\n            var5 = getLossesShare(var6);\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x04;\n            var temp0 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n            var4 = var5;\n            var5 = temp0 + var3 < temp0;\n        \n            if (temp0 + var3 < temp0) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n            \n                if (var3 + storage[keccak256(memory[0x00:0x40]) + 0x01] < var4) { goto label_2643; }\n                else { goto label_25E0; }\n            } else if (!var5) {\n            label_2643:\n                storage[0x08] = (storage[0x08] & ~(0xff * 0x02 ** 0xa0)) | 0x02 ** 0xa0;\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x52e578ad17dc8fe0ff456fdf1f81516f7d29eb85fff301475a3a29d0e84bb31a]);\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n                var temp1 = var0;\n            \n                if (temp1 + storage[keccak256(memory[0x00:0x40]) + 0x01] < temp1) {\n                label_26B6:\n                    var4 = var4;\n                    var1 = var1 + 0x01;\n                \n                label_2569:\n                \n                    if (var1 > storage[0x05]) { goto label_26C2; }\n                    else { goto label_2573; }\n                } else {\n                label_269F:\n                    var temp2 = var1;\n                    memory[0x00:0x20] = temp2;\n                    memory[0x20:0x40] = 0x04;\n                    var0 = storage[keccak256(memory[0x00:0x40]) + 0x01] + var0;\n                    var4 = var4;\n                    var1 = temp2 + 0x01;\n                    goto label_2569;\n                }\n            } else {\n            label_25E0:\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n                var temp3 = keccak256(memory[0x00:0x40]) + 0x01;\n                var temp4 = var3 - var4;\n                storage[temp3] = temp4 + storage[temp3];\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp4;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0x8ff49347da9034aab52b79ac6b2ba8cf17d221516834af5e5fa04bef1df4d7cd]);\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n                var temp7 = var0;\n            \n                if (temp7 + storage[keccak256(memory[0x00:0x40]) + 0x01] < temp7) { goto label_26B6; }\n                else { goto label_269F; }\n            }\n        }\n    }\n    \n    function func_26E8(var arg0) {\n        if (storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n        label_2706:\n            var var0 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var1 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1 * 0x02 ** 0xe0;\n            var var2 = temp0 + 0x04;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp2 = memory[0x40:0x60];\n                    var temp3 = (memory[temp2:temp2 + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    storage[0x01] = temp3;\n                    memory[temp2:temp2 + 0x20] = 0xe8a5282d00000000000000000000000000000000000000000000000000000000;\n                    memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = arg0;\n                    var0 = temp3 & 0x02 ** 0xa0 - 0x01;\n                    var1 = 0xe8a5282d;\n                    var2 = temp2 + 0x24;\n                    var3 = 0x00;\n                    var4 = memory[0x40:0x60];\n                    var5 = temp2 - var4 + 0x24;\n                    var6 = var4;\n                    var7 = var3;\n                    var8 = var0;\n                \n                    if (!address(var8).code.length) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp4;\n                        temp4, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n                    \n                        if (temp4) { return; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        } else {\n            var0 = 0x2704;\n            var1 = 0x00;\n            var0 = func_288B(var1);\n        \n        label_2704:\n            goto label_2706;\n        }\n    }\n    \n    function func_27F6(var arg0) {\n        var temp0 = msg.sender;\n        var temp1 = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x03;\n        var temp2 = arg0;\n        storage[keccak256(memory[0x00:0x40])] = temp2;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (temp0 * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n        var temp4 = msg.value;\n        storage[temp3 + 0x01] = temp4;\n        storage[0x06] = temp4 + storage[0x06];\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp1;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0xa4a46f45c9996c78320ae470714f930acba653b022fddec1735c1400209780e4]);\n    }\n    \n    function func_288B(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x28ac;\n        var var3 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed;\n        var2 = func_2ADA(var3);\n    \n        if (var2 <= var1) {\n            var1 = 0x00;\n            var2 = 0x28ff;\n            var3 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1;\n            var2 = func_2ADA(var3);\n        \n            if (var2 <= var1) {\n                var1 = 0x00;\n                var2 = 0x2952;\n                var3 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa;\n                var2 = func_2ADA(var3);\n            \n                if (var2 <= var1) { return 0x00; }\n            \n                storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa;\n                var0 = 0x01;\n            \n            label_0B2D:\n                return var0;\n            } else {\n                storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1;\n                var0 = 0x01;\n                goto label_0B2D;\n            }\n        } else {\n            storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed;\n            var0 = 0x01;\n            goto label_0B2D;\n        }\n    }\n    \n    function func_298F(var arg0, var arg1) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        var var0 = 0x00;\n        memory[temp0:temp0 + 0x20] = var0;\n        var var1 = arg0;\n        var var2 = var0;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (var4 >= memory[var1:var1 + 0x20]) {\n        label_2ABA:\n        \n            if (arg1 <= 0x00) { return var2; }\n            else { return var2 * 0x0a ** arg1; }\n        } else {\n        label_29AF:\n            var var5 = 0x02 ** 0xf8 * 0x30;\n            var var6 = var1;\n            var var7 = var4;\n        \n            if (var7 >= memory[var6:var6 + 0x20]) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1 = memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) >= var5;\n                var5 = temp1;\n            \n                if (!var5) {\n                label_2A1A:\n                \n                    if (!var5) {\n                        var5 = var1;\n                        var6 = var4;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) {\n                            main();\n                            // Error: Could not resolve method call return address!\n                        } else if (memory[var5 + 0x20 + var6:var5 + 0x20 + var6 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) != 0x02 ** 0xf8 * 0x2e) {\n                        label_2AB0:\n                            var4 = var4 + 0x01;\n                        \n                            if (var4 >= memory[var1:var1 + 0x20]) { goto label_2ABA; }\n                            else { goto label_29AF; }\n                        } else {\n                            var3 = 0x01;\n                            goto label_2AB0;\n                        }\n                    } else if (!var3) {\n                    label_2A3D:\n                        var2 = var2 * 0x0a;\n                        var5 = 0x30;\n                        var6 = var1;\n                        var7 = var4;\n                    \n                        if (var7 >= memory[var6:var6 + 0x20]) {\n                            main();\n                            // Error: Could not resolve method call return address!\n                        } else {\n                            var2 = var2 + ((memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 - var5);\n                            goto label_2AB0;\n                        }\n                    } else if (arg1) {\n                        var4 = var4;\n                        arg1 = arg1 + ~0x00;\n                        goto label_2A3D;\n                    } else { goto label_2ABA; }\n                } else {\n                    var5 = 0x02 ** 0xf8 * 0x39;\n                    var6 = var1;\n                    var7 = var4;\n                \n                    if (var7 >= memory[var6:var6 + 0x20]) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var5 = memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) <= var5;\n                        goto label_2A1A;\n                    }\n                }\n            }\n        }\n    }\n    \n    function func_2ADA(var arg0) returns (var r0) { return address(arg0).code.length; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n    label_0000:\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_01D7:\n            var var0 = 0x01e6;\n            var var1 = 0x01e3;\n            bet();\n            func_01E3();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0;\n        \n            if (var0 == 0x058aace1) {\n                // Dispatch table entry for divest()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    divest();\n                    stop();\n                }\n            } else if (var0 == 0x061e494f) {\n                // Dispatch table entry for getBet(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0207;\n                    var var2 = msg.data[0x04:0x24];\n                    var var3;\n                    var1, var2, var3 = getBet(var2);\n                \n                label_0207:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = var3;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + temp0 - temp1 + 0x60];\n                }\n            } else if (var0 == 0x0d1fce42) {\n                // Dispatch table entry for getBankroll()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = getBankroll();\n                \n                label_023C:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = var1;\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n                }\n            } else if (var0 == 0x11610c25) {\n                // Dispatch table entry for bet()\n                var1 = 0x01e6;\n                bet();\n                stop();\n            } else if (var0 == 0x116c6eab) {\n                // Dispatch table entry for getProfitShare(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var1 = getProfitShare(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0x12253a6c) {\n                // Dispatch table entry for stopContract()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    stopContract();\n                    stop();\n                }\n            } else if (var0 == 0x132ae5e9) {\n                // Dispatch table entry for numInvestors()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = numInvestors();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x1514ea54) {\n                // Dispatch table entry for getLossesShare(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var1 = getLossesShare(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0x187a62d5) {\n                // Dispatch table entry for voteEmergencyWithdrawal(bool)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    voteEmergencyWithdrawal(var2);\n                    stop();\n                }\n            } else if (var0 == 0x1efb17ee) {\n                // Dispatch table entry for changeHouseAddress(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeHouseAddress(var2);\n                    stop();\n                }\n            } else if (var0 == 0x232523e8) {\n                // Dispatch table entry for forceDivestOfAllInvestors()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    forceDivestOfAllInvestors();\n                    stop();\n                }\n            } else if (var0 == 0x27dc297e) {\n                // Dispatch table entry for __callback(bytes32,string)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp4 = memory[0x40:0x60];\n                    var temp5 = msg.data[0x24:0x44];\n                    var temp6 = msg.data[temp5 + 0x04:temp5 + 0x04 + 0x20];\n                    memory[0x40:0x60] = temp4 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp4:temp4 + 0x20] = temp6;\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    memory[temp4 + 0x20:temp4 + 0x20 + temp6] = msg.data[temp5 + 0x24:temp5 + 0x24 + temp6];\n                    var3 = temp4;\n                    var var4 = 0x0db1;\n                    var var5 = var2;\n                    var var6 = var3;\n                    var var7 = 0x00;\n                    var var8 = memory[0x40:0x60];\n                \n                    if (MSIZE() < var8) {\n                        var temp7 = var7;\n                        var temp8 = var8;\n                        memory[temp8:temp8 + 0x20] = temp7;\n                        memory[0x40:0x60] = temp8 + temp7 * 0x20 + 0x20;\n                        var7 = temp8;\n                        __callback(var5, var6, var7);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        func_0DC9(var5, var6, var7, var8);\n                        // Error: Could not resolve jump destination!\n                    }\n                }\n            } else if (var0 == 0x38bbfa50) {\n                // Dispatch table entry for __callback(bytes32,string,bytes)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp9 = memory[0x40:0x60];\n                    var temp10 = msg.data[0x24:0x44];\n                    var temp11 = msg.data[temp10 + 0x04:temp10 + 0x04 + 0x20];\n                    memory[0x40:0x60] = temp9 + (temp11 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp9:temp9 + 0x20] = temp11;\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    memory[temp9 + 0x20:temp9 + 0x20 + temp11] = msg.data[temp10 + 0x24:temp10 + 0x24 + temp11];\n                    var temp12 = memory[0x40:0x60];\n                    var temp13 = msg.data[0x44:0x64] + 0x04;\n                    var temp14 = msg.data[temp13:temp13 + 0x20];\n                    memory[0x40:0x60] = temp12 + (temp14 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp12:temp12 + 0x20] = temp14;\n                    var3 = temp9;\n                    memory[temp12 + 0x20:temp12 + 0x20 + temp14] = msg.data[temp13 + 0x20:temp13 + 0x20 + temp14];\n                    var4 = temp12;\n                    __callback(var2, var3, var4);\n                    stop();\n                }\n            } else if (var0 == 0x3f683b6a) {\n                // Dispatch table entry for isStopped()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x03f3;\n                    var2 = isStopped();\n                    var temp15 = memory[0x40:0x60];\n                    memory[temp15:temp15 + 0x20] = !!var2;\n                    var temp16 = memory[0x40:0x60];\n                    return memory[temp16:temp16 + temp15 - temp16 + 0x20];\n                }\n            } else if (var0 == 0x3feb5f2b) {\n                // Dispatch table entry for investors(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0417;\n                    var2 = msg.data[0x04:0x24];\n                    var2, var3, var4 = investors(var2);\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = var3;\n                    memory[temp17 + 0x40:temp17 + 0x40 + 0x20] = !!var4;\n                    var temp18 = memory[0x40:0x60];\n                    return memory[temp18:temp18 + temp17 - temp18 + 0x60];\n                }\n            } else if (var0 == 0x40a49a96) {\n                // Dispatch table entry for searchSmallestInvestor()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = searchSmallestInvestor();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x4671e65e) {\n                // Dispatch table entry for proposeEmergencyWithdrawal(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    proposeEmergencyWithdrawal(var2);\n                    stop();\n                }\n            } else if (var0 == 0x4e69d560) {\n                // Dispatch table entry for getStatus()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x047f;\n                    var1, var2, var3, var4, var5, var6, var7, var8 = getStatus();\n                    var temp19 = memory[0x40:0x60];\n                    memory[temp19:temp19 + 0x20] = var1;\n                    memory[temp19 + 0x20:temp19 + 0x20 + 0x20] = var2;\n                    memory[temp19 + 0x40:temp19 + 0x40 + 0x20] = var3;\n                    memory[temp19 + 0x60:temp19 + 0x60 + 0x20] = var4;\n                    memory[temp19 + 0x80:temp19 + 0x80 + 0x20] = var5;\n                    memory[temp19 + 0xa0:temp19 + 0xa0 + 0x20] = var6;\n                    memory[temp19 + 0xc0:temp19 + 0xc0 + 0x20] = var7;\n                    memory[temp19 + 0xe0:temp19 + 0xe0 + 0x20] = var8;\n                    var temp20 = memory[0x40:0x60];\n                    return memory[temp20:temp20 + temp19 - temp20 + 0x0100];\n                }\n            } else if (var0 == 0x5125796a) {\n                // Dispatch table entry for changeOraclizeProofType(bytes1)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeOraclizeProofType(var2);\n                    stop();\n                }\n            } else if (var0 == 0x51404cbe) {\n                // Dispatch table entry for forceDivestOfOneInvestor(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    forceDivestOfOneInvestor(var2);\n                    stop();\n                }\n            } else if (var0 == 0x518496b2) {\n                // Dispatch table entry for proposedWithdrawal()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x04f1;\n                    var2, var3 = proposedWithdrawal();\n                    var temp21 = memory[0x40:0x60];\n                    memory[temp21:temp21 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = var3;\n                    var temp22 = memory[0x40:0x60];\n                    return memory[temp22:temp22 + temp21 - temp22 + 0x40];\n                }\n            } else if (var0 == 0x550ed1f0) {\n                // Dispatch table entry for getMaxBetAmount()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = getMaxBetAmount();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x6128a4f3) {\n                // Dispatch table entry for investorsLosses()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = investorsLosses();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x66aee0fc) {\n                // Dispatch table entry for investorsProfit()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = investorsProfit();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x6be80de7) {\n                // Dispatch table entry for investorIDs(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var2 = investorIDs(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0x71d0ed05) {\n                // Dispatch table entry for betsKeys(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var2 = betsKeys(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0x724ae9d0) {\n                // Dispatch table entry for getMinInvestment()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = getMinInvestment();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x82a5285d) {\n                // Dispatch table entry for getMinBetAmount()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = getMinBetAmount();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x85eac05f) {\n                // Dispatch table entry for changeOwnerAddress(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeOwnerAddress(var2);\n                    stop();\n                }\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0612;\n                    var2 = owner();\n                \n                label_0612:\n                    var temp23 = memory[0x40:0x60];\n                    memory[temp23:temp23 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                    var temp24 = memory[0x40:0x60];\n                    return memory[temp24:temp24 + temp23 - temp24 + 0x20];\n                }\n            } else if (var0 == 0xa4beffa7) {\n                // Dispatch table entry for increaseInvestment()\n                var1 = 0x01e6;\n                increaseInvestment();\n                stop();\n            } else if (var0 == 0xc4bc5da5) {\n                // Dispatch table entry for resumeContract()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    resumeContract();\n                    stop();\n                }\n            } else if (var0 == 0xc902c3ae) {\n                // Dispatch table entry for bets(bytes32)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0207;\n                    var2 = msg.data[0x04:0x24];\n                    var2, var3, var4 = bets(var2);\n                    goto label_0207;\n                }\n            } else if (var0 == 0xcafb2202) {\n                // Dispatch table entry for invested()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = invested();\n                    goto label_023C;\n                }\n            } else if (var0 == 0xd21d7950) {\n                // Dispatch table entry for changeGasLimitOfSafeSend(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeGasLimitOfSafeSend(var2);\n                    stop();\n                }\n            } else if (var0 == 0xd7cee31e) {\n                // Dispatch table entry for houseAddress()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0612;\n                    var2 = houseAddress();\n                    goto label_0612;\n                }\n            } else if (var0 == 0xda0bba7b) {\n                // Dispatch table entry for changeOraclizeConfig(bytes32)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeOraclizeConfig(var2);\n                    stop();\n                }\n            } else if (var0 == 0xdf06f906) {\n                // Dispatch table entry for numBets()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = numBets();\n                    goto label_023C;\n                }\n            } else if (var0 == 0xf4993bbd) {\n                // Dispatch table entry for executeEmergencyWithdrawal()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    executeEmergencyWithdrawal();\n                    stop();\n                }\n            } else if (var0 == 0xf8b2cb4f) {\n                // Dispatch table entry for getBalance(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var1 = getBalance(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0xfb099c84) {\n                // Dispatch table entry for newInvestor()\n                var1 = 0x01e6;\n                newInvestor();\n                stop();\n            } else { goto label_01D7; }\n        }\n    }\n    \n    function func_01E3() {}\n    \n    function bet() {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n    \n        if (!(storage[0x08] / 0x0100 ** 0x14 & 0xff)) {\n            var var3 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var4 * 0x02 ** 0xe0;\n            var var5 = temp0 + 0x04;\n            var var6 = 0x20;\n            var var7 = memory[0x40:0x60];\n            var var8 = var5 - var7;\n            var var9 = var7;\n            var var10 = 0x00;\n            var var11 = var3;\n        \n            if (!address(var11).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x32).value(var10)(memory[var9:var9 + var8]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp2 = memory[0x40:0x60];\n                    var temp3 = memory[temp2:temp2 + 0x20];\n                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = 0x00;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = 0x0bbceb33 * 0x02 ** 0xe2;\n                    memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = storage[0x02] + 0x02ab98;\n                    memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x40;\n                    memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x03;\n                    memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x155493 * 0x02 ** 0xea;\n                    var3 = temp3 & 0x02 ** 0xa0 - 0x01;\n                    var4 = 0x2ef3accc;\n                    var5 = temp4 + 0x84;\n                    var6 = 0x20;\n                    var7 = memory[0x40:0x60];\n                    var8 = temp4 - var7 + 0x84;\n                    var10 = 0x00;\n                    var9 = var7;\n                    var11 = var3;\n                \n                    if (!address(var11).code.length) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp5;\n                        temp5, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x32).value(var10)(memory[var9:var9 + var8]);\n                    \n                        if (!temp5) {\n                            main();\n                            // Error: Could not resolve method call return address!\n                        } else {\n                            var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                        \n                            if (var0 < msg.value) {\n                                var1 = msg.value - var0;\n                                var3 = 0x2710;\n                                var4 = 0x0869;\n                                var4 = getBankroll();\n                                var4 = var4 * 0x64;\n                            \n                                if (!var3) {\n                                    main();\n                                    // Error: Could not resolve method call return address!\n                                } else {\n                                    var temp6 = (var1 * 0x032a) / 0x2328 <= var4 / var3;\n                                    var3 = temp6;\n                                \n                                    if (!var3) {\n                                        if (!var3) {\n                                        label_09FC:\n                                            main();\n                                            // Error: Could not resolve method call return address!\n                                        } else {\n                                        label_0898:\n                                            var temp7 = memory[0x40:0x60];\n                                            memory[temp7:temp7 + 0x20] = msg.sender;\n                                            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var1;\n                                            var temp8 = memory[0x40:0x60];\n                                            log(memory[temp8:temp8 + temp7 - temp8 + 0x40], [0xa39417f926ed806b475d2cd74083819551616e7fdb3f5bb7abf8e893eae244b4]);\n                                            var3 = 0x0942;\n                                            var temp9 = memory[0x40:0x60];\n                                            var4 = temp9;\n                                            memory[0x40:0x60] = var4 + 0x40;\n                                            memory[var4:var4 + 0x20] = 0x06;\n                                            memory[var4 + 0x20:var4 + 0x20 + 0x20] = 0x6e65737465640000000000000000000000000000000000000000000000000000;\n                                            var temp10 = memory[0x40:0x60];\n                                            var5 = temp10;\n                                            memory[0x40:0x60] = var5 + 0x01c0;\n                                            memory[var5:var5 + 0x20] = 0x0189;\n                                            memory[var5 + 0x20:var5 + 0x20 + 0x0189] = code[0x2ae2:0x2c6b];\n                                            var6 = storage[0x02] + 0x02ab98;\n                                            var3 = func_1AA4(var4, var5, var6);\n                                            var temp11 = memory[0x40:0x60];\n                                            memory[0x40:0x60] = temp11 + 0x60;\n                                            memory[temp11:temp11 + 0x20] = msg.sender;\n                                            var temp12 = temp11 + 0x20;\n                                            memory[temp12:temp12 + 0x20] = var1;\n                                            var temp13 = temp11 + 0x40;\n                                            memory[temp13:temp13 + 0x20] = 0x00;\n                                            memory[0x00:0x20] = var3;\n                                            memory[0x20:0x40] = 0x0b;\n                                            var temp14 = keccak256(memory[0x00:0x40]);\n                                            storage[temp14] = (memory[temp11:temp11 + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[temp14] & ~(0x02 ** 0xa0 - 0x01));\n                                            storage[temp14 + 0x01] = memory[temp12:temp12 + 0x20];\n                                            storage[temp14 + 0x02] = memory[temp13:temp13 + 0x20];\n                                            var temp15 = storage[0x0c];\n                                            var4 = temp15;\n                                            var temp16 = var4 + 0x01;\n                                            storage[0x0c] = temp16;\n                                            var2 = var3;\n                                            var3 = 0x0c;\n                                            var5 = temp16;\n                                            var6 = var3;\n                                            var7 = var5;\n                                            var8 = var4;\n                                        \n                                            if (!var8 > var7) {\n                                            label_09E0:\n                                                memory[0x00:0x20] = var3;\n                                                storage[var4 + keccak256(memory[0x00:0x20])] = var2;\n                                                return;\n                                            } else {\n                                                memory[0x00:0x20] = var6;\n                                                var temp17 = keccak256(memory[0x00:0x20]);\n                                                var temp18 = var8;\n                                                var8 = 0x09e0;\n                                                var9 = temp17 + temp18;\n                                                var10 = var7 + temp17;\n                                            \n                                                if (var9 <= var10) {\n                                                    var8 = var9;\n                                                    // Error: Could not resolve jump destination!\n                                                } else {\n                                                    var8 = func_09D1(var9, var10);\n                                                    goto label_09E0;\n                                                }\n                                            }\n                                        }\n                                    } else if (var1 < 0x02c68af0bb140000) { goto label_09FC; }\n                                    else { goto label_0898; }\n                                }\n                            } else {\n                                main();\n                                // Error: Could not resolve method call return address!\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_09D1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        storage[temp0] = 0x00;\n        arg1 = temp0 + 0x01;\n    \n        if (arg0 <= arg1) { return arg0; }\n    \n        r0 = func_09D1(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function divest() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])]) {\n            var var0 = 0x01e3;\n            var var1 = msg.sender;\n            func_1D80(var1);\n            func_01E3();\n            // Error: Could not resolve method call return address!\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getBet(var arg0) returns (var r0, var arg0, var r2) {\n        r2 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x00;\n    \n        if (arg0 >= storage[0x0c]) {\n        label_0A9A:\n            var temp0 = r2;\n            r2 = var2;\n            r0 = temp0;\n            arg0 = var1;\n            return r0, arg0, r2;\n        } else {\n            var var4 = 0x0c;\n            var var5 = arg0;\n        \n            if (var5 >= storage[var4]) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                memory[0x00:0x20] = var4;\n                var temp1 = storage[var5 + keccak256(memory[0x00:0x20])];\n                memory[0x00:0x20] = temp1;\n                memory[0x20:0x40] = 0x0b;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                r2 = storage[temp2] & 0x02 ** 0xa0 - 0x01;\n                var1 = storage[temp2 + 0x01];\n                var2 = storage[temp2 + 0x02];\n                var3 = temp1;\n                goto label_0A9A;\n            }\n        }\n    }\n    \n    function getBankroll() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x06] < storage[0x0d];\n    \n        if (!var1) {\n            var temp0 = storage[0x06];\n            var1 = temp0 + storage[0x0d] < temp0;\n        \n            if (var1) { goto label_0ACE; }\n            else { goto label_0AC2; }\n        } else if (var1) {\n        label_0ACE:\n        \n            if (!var1) {\n            label_0ADF:\n                return (storage[0x06] + storage[0x0d]) - storage[0x0e];\n            } else {\n            label_0AD4:\n                return 0x00;\n            }\n        } else {\n        label_0AC2:\n        \n            if (storage[0x06] + storage[0x0d] >= storage[0x0e]) { goto label_0ADF; }\n            else { goto label_0AD4; }\n        }\n    }\n    \n    function getProfitShare(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        var var0 = 0x00;\n        var var1 = storage[0x06];\n        var var2 = storage[0x0d] * storage[keccak256(memory[var0:var0 + 0x40]) + 0x01];\n    \n        if (var1) { return var2 / var1; }\n    \n        main();\n        // Error: Could not resolve method call return address!\n    }\n    \n    function stopContract() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            storage[0x08] = (storage[0x08] & ~(0xff * 0x02 ** 0xa0)) | 0x02 ** 0xa0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x3bb54b4ced112fe0d4fa7efd42b29a0a9036fde6e206de4290c4ff02d2dc2c5c]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function numInvestors() returns (var r0) { return storage[0x05]; }\n    \n    function getLossesShare(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        var var0 = 0x00;\n        var var1 = storage[0x06];\n        var var2 = storage[0x0e] * storage[keccak256(memory[var0:var0 + 0x40]) + 0x01];\n    \n        if (var1) { return var2 / var1; }\n    \n        main();\n        // Error: Could not resolve method call return address!\n    }\n    \n    function voteEmergencyWithdrawal(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!storage[keccak256(memory[0x00:0x40])]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x03;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])];\n            memory[0x20:0x40] = 0x04;\n            var temp1 = keccak256(memory[0x00:0x40]) + 0x02;\n            var temp2 = arg0;\n            storage[temp1] = (temp2 * 0x02 ** 0xf8) / 0x02 ** 0xf8 | (storage[temp1] & ~0xff);\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = temp0;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = !!temp2;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0xea22ee15de9c385abeff072b23d6e0de5ebda8c59098f5585f45e82b9faa5762]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function changeHouseAddress(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp1 = arg0;\n            var temp2 = (temp1 * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x08] & ~(0x02 ** 0xa0 - 0x01));\n            storage[0x08] = temp2;\n            var temp3 = memory[0x40:0x60];\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            memory[temp3:temp3 + 0x20] = temp4 & temp2;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp1 & temp4;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + temp3 - temp5 + 0x40], [0xb750ac854b12114073b8c76dcfe5fb889b30db5d3d60e07abc8ae66c349d7a68]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function forceDivestOfAllInvestors() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            var0 = storage[0x05];\n            var1 = 0x01;\n        \n            if (var1 > var0) {\n            label_0DB1:\n                return;\n            } else {\n            label_0D6B:\n                memory[0x00:0x20] = 0x01;\n                memory[0x20:0x40] = 0x04;\n                var var2 = 0x0da8;\n                var var3 = storage[0xabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05] & 0x02 ** 0xa0 - 0x01;\n                func_1D80(var3);\n                var1 = var1 + 0x01;\n            \n                if (var1 > var0) { goto label_0DB1; }\n                else { goto label_0D6B; }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_0DC9(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = MSIZE();\n        var temp1 = arg2;\n        memory[temp0:temp0 + 0x20] = temp1;\n        memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n        arg2 = temp0;\n        __callback(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function __callback(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x0df0;\n        var1 = func_1FAC();\n    \n        if (msg.sender == var1 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0b;\n            var1 = arg0;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0b;\n                var var2 = arg0;\n            \n                if (storage[keccak256(memory[0x00:0x40]) + 0x02] <= 0x00) {\n                    var var3 = arg0;\n                    var var4 = arg1;\n                    var var5 = 0x00;\n                    var var6 = 0x0e61;\n                    var var7 = var4;\n                    var6 = func_20C5(var7);\n                    var5 = var6;\n                    var6 = var5 < 0x01;\n                \n                    if (!var6) {\n                        var6 = var5 > 0x2710;\n                    \n                        if (!var6) { goto label_0E8E; }\n                        else { goto label_0E7A; }\n                    } else if (!var6) {\n                    label_0E8E:\n                    \n                        if (!var6) {\n                        label_0ECA:\n                            var6 = arg0;\n                            var7 = 0x2710;\n                            var var8 = 0x0ed6;\n                            var8 = getBankroll();\n                            var8 = var8 * 0x64;\n                        \n                            if (!var7) {\n                                main();\n                                // Error: Could not resolve method call return address!\n                            } else {\n                                memory[0x00:0x20] = var6;\n                                memory[0x20:0x40] = 0x0b;\n                                var temp0 = (storage[keccak256(memory[0x00:0x40]) + 0x01] * 0x032a) / 0x2328 <= var8 / var7;\n                                var7 = temp0;\n                            \n                                if (var7) {\n                                    memory[0x00:0x20] = var6;\n                                    memory[0x20:0x40] = 0x0b;\n                                \n                                    if (storage[keccak256(memory[0x00:0x40]) + 0x01] < 0x02c68af0bb140000) { goto label_0FDA; }\n                                    else { goto label_0F2C; }\n                                } else if (!var7) {\n                                label_0FDA:\n                                    memory[0x00:0x20] = var6;\n                                    memory[0x20:0x40] = 0x0b;\n                                    var temp1 = keccak256(memory[0x00:0x40]);\n                                    storage[temp1 + 0x02] = 0x01869f;\n                                    var7 = 0x0fd5;\n                                    var var9 = storage[temp1 + 0x01];\n                                    var8 = storage[temp1] & 0x02 ** 0xa0 - 0x01;\n                                    func_20DA(var8, var9);\n                                \n                                label_0FD5:\n                                \n                                label_1010:\n                                    return;\n                                } else {\n                                label_0F2C:\n                                    var7 = 0x0f34;\n                                    var8 = arg1;\n                                    var7 = func_20C5(var8);\n                                    memory[0x00:0x20] = arg0;\n                                    memory[0x20:0x40] = 0x0b;\n                                    var temp2 = keccak256(memory[0x00:0x40]);\n                                    var temp3 = var7;\n                                    storage[temp2 + 0x02] = temp3;\n                                    var temp4 = memory[0x40:0x60];\n                                    memory[0x40:0x60] = temp4 + 0x60;\n                                    memory[temp4:temp4 + 0x20] = storage[temp2] & 0x02 ** 0xa0 - 0x01;\n                                    memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[temp2 + 0x01];\n                                    memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = temp3;\n                                    var0 = temp3;\n                                    var7 = 0x0f82;\n                                    var8 = temp4;\n                                    var9 = var0;\n                                    func_228E(var8, var9);\n                                \n                                label_0F82:\n                                    memory[0x00:0x20] = arg0;\n                                    memory[0x20:0x40] = 0x0b;\n                                    var temp5 = keccak256(memory[0x00:0x40]);\n                                    var temp6 = memory[0x40:0x60];\n                                    memory[0x40:0x60] = temp6 + 0x60;\n                                    memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n                                    memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = storage[temp5 + 0x01];\n                                    memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = storage[temp5 + 0x02];\n                                    var8 = temp6;\n                                    var7 = 0x0fca;\n                                    var9 = var0;\n                                    func_234B(var8, var9);\n                                    storage[0x0f] = storage[0x0f] & ~0xff;\n                                    goto label_0FD5;\n                                }\n                            }\n                        } else {\n                        label_0E94:\n                            memory[0x00:0x20] = var3;\n                            memory[0x20:0x40] = 0x0b;\n                            var temp7 = keccak256(memory[0x00:0x40]);\n                            storage[temp7 + 0x02] = 0x01869f;\n                            var6 = 0x0ec5;\n                            var8 = storage[temp7 + 0x01];\n                            var7 = storage[temp7] & 0x02 ** 0xa0 - 0x01;\n                            func_20DA(var7, var8);\n                            goto label_1010;\n                        }\n                    } else {\n                    label_0E7A:\n                        memory[0x00:0x20] = var3;\n                        memory[0x20:0x40] = 0x0b;\n                    \n                        if (storage[keccak256(memory[0x00:0x40]) + 0x02]) { goto label_0ECA; }\n                        else { goto label_0E94; }\n                    }\n                } else {\n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function isStopped() returns (var r0) { return storage[0x08] / 0x02 ** 0xa0 & 0xff; }\n    \n    function investors(var arg0) returns (var arg0, var r1, var r2) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0xff;\n        return arg0, r1, r2;\n    }\n    \n    function searchSmallestInvestor() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = var1;\n    \n        if (var2 > storage[0x05]) {\n        label_10C0:\n            return var1;\n        } else {\n        label_106C:\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x04;\n            var var3 = 0x108c;\n            var var4 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var3 = getBalance(var4);\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x04;\n            var4 = 0x10ad;\n            var var5 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var4 = getBalance(var5);\n        \n            if (var4 >= var3) {\n                var2 = var2 + 0x01;\n            \n            label_1062:\n            \n                if (var2 > storage[0x05]) { goto label_10C0; }\n                else { goto label_106C; }\n            } else {\n                var1 = var2;\n                var2 = var1 + 0x01;\n                goto label_1062;\n            }\n        }\n    }\n    \n    function proposeEmergencyWithdrawal(var arg0) {\n        var var0 = 0x00;\n    \n        if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[0x07] & temp0 == temp0 & msg.sender) {\n                var0 = 0x01;\n            \n                if (var0 > storage[0x05]) {\n                label_112E:\n                    var temp1 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp1 + 0x40;\n                    var temp2 = arg0;\n                    memory[temp1:temp1 + 0x20] = temp2;\n                    var temp3 = block.timestamp;\n                    memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp3;\n                    storage[0x09] = (temp2 * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x09] & ~(0x02 ** 0xa0 - 0x01));\n                    storage[0x0a] = temp3;\n                    log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x6c0eb56f121418f16eaebbe01cb2694897b8578b3b1c549e634a1b7753ed2d8b]);\n                    return;\n                } else {\n                label_110D:\n                    var temp4 = var0;\n                    memory[0x00:0x20] = temp4;\n                    memory[0x20:0x40] = 0x04;\n                    var temp5 = keccak256(memory[0x00:0x40]) + 0x02;\n                    storage[temp5] = storage[temp5] & ~0xff;\n                    var0 = temp4 + 0x01;\n                \n                    if (var0 > storage[0x05]) { goto label_112E; }\n                    else { goto label_110D; }\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getStatus() returns (var r0, var r1, var r2, var r3, var r4, var r5, var r6, var r7) {\n        r1 = 0x00;\n        r2 = 0x00;\n        r3 = 0x00;\n        r4 = 0x00;\n        r5 = 0x00;\n        r6 = 0x00;\n        r7 = 0x00;\n        var var7 = 0x00;\n        var var8 = 0x00;\n        var var9 = 0x00;\n        var var10 = 0x11aa;\n        var10 = getBankroll();\n        var8 = var10;\n        var10 = 0x11b4;\n        var10 = getMinInvestment();\n        r7 = storage[0x0c];\n        r6 = var10;\n        r5 = storage[0x0d] - storage[0x0e];\n        r4 = 0x02c68af0bb140000;\n        r3 = 0x64;\n        r2 = 0xbe;\n        r1 = 0x2328;\n        r0 = var8;\n        return r0, r1, r2, r3, r4, r5, r6, r7;\n    }\n    \n    function changeOraclizeProofType(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (arg0 & ~(0x02 ** 0xf8 - 0x01)) {\n            var var0 = 0x0c9f;\n            var var1 = arg0 | 0x02 ** 0xf8;\n            func_2436(var1);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function forceDivestOfOneInvestor(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            var var0 = 0x1272;\n            var var1 = arg0;\n            func_1D80(var1);\n            storage[0x09] = storage[0x09] & ~(0x02 ** 0xa0 - 0x01);\n            storage[0x0a] = 0x00;\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function proposedWithdrawal() returns (var r0, var r1) {\n        r1 = storage[0x0a];\n        r0 = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n        return r0, r1;\n    }\n    \n    function getMaxBetAmount() returns (var r0) {\n        var var0 = 0x00;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x38cc4831 * 0x02 ** 0xe0;\n        var var1 = var0;\n        var var2 = var1;\n        var var6 = 0x20;\n        var var3 = storage[var2] & 0x02 ** 0xa0 - 0x01;\n        var var7 = memory[0x40:0x60];\n        var var4 = 0x38cc4831;\n        var var5 = temp0 + 0x04;\n        var var8 = temp0 - var7 + 0x04;\n        var var9 = var7;\n        var var10 = var2;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp1;\n            temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x32).value(var10)(memory[var9:var9 + var8]);\n        \n            if (!temp1) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp2 = memory[0x40:0x60];\n                var temp3 = memory[temp2:temp2 + 0x20];\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = 0x00;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x0bbceb33 * 0x02 ** 0xe2;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = storage[0x02] + 0x02ab98;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x40;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x03;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x155493 * 0x02 ** 0xea;\n                var3 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var4 = 0x2ef3accc;\n                var5 = temp4 + 0x84;\n                var6 = 0x20;\n                var7 = memory[0x40:0x60];\n                var8 = temp4 - var7 + 0x84;\n                var10 = 0x00;\n                var9 = var7;\n                var11 = var3;\n            \n                if (!address(var11).code.length) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp5;\n                    temp5, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x32).value(var10)(memory[var9:var9 + var8]);\n                \n                    if (!temp5) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                        var3 = 0x7b98a0;\n                        var4 = 0x2328;\n                        var5 = 0x1393;\n                        var5 = getBankroll();\n                        var4 = var5 * 0x64 * var4;\n                    \n                        if (var3) { return var4 / var3 + var1; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        }\n    }\n    \n    function investorsLosses() returns (var r0) { return storage[0x0e]; }\n    \n    function investorsProfit() returns (var r0) { return storage[0x0d]; }\n    \n    function investorIDs(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function betsKeys(var arg0) returns (var arg0) {\n        var var0 = 0x0c;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else {\n            memory[0x00:0x20] = var0;\n            return storage[var1 + keccak256(memory[0x00:0x20])];\n        }\n    }\n    \n    function getMinInvestment() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (storage[0x05] != 0x0a) {\n            var0 = 0x00;\n        \n        label_09DC:\n            return var0;\n        } else {\n            var var2 = 0x1401;\n            var2 = searchSmallestInvestor();\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x04;\n            var1 = var2;\n            var2 = 0x1425;\n            var var3 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var2 = getBalance(var3);\n            var0 = var2;\n            goto label_09DC;\n        }\n    }\n    \n    function getMinBetAmount() returns (var r0) {\n        var var0 = 0x00;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x38cc4831 * 0x02 ** 0xe0;\n        var var1 = var0;\n        var var2 = storage[var1] & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x38cc4831;\n        var var4 = temp0 + 0x04;\n        var var6 = memory[0x40:0x60];\n        var var5 = 0x20;\n        var var7 = temp0 - var6 + 0x04;\n        var var8 = var6;\n        var var9 = var1;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp1;\n            temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x32).value(var9)(memory[var8:var8 + var7]);\n        \n            if (!temp1) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp2 = memory[0x40:0x60];\n                var temp3 = memory[temp2:temp2 + 0x20];\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = 0x00;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x0bbceb33 * 0x02 ** 0xe2;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = storage[0x02] + 0x02ab98;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x40;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x03;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x155493 * 0x02 ** 0xea;\n                var2 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x2ef3accc;\n                var4 = temp4 + 0x84;\n                var5 = 0x20;\n                var6 = memory[0x40:0x60];\n                var7 = temp4 - var6 + 0x84;\n                var9 = 0x00;\n                var8 = var6;\n                var10 = var2;\n            \n                if (!address(var10).code.length) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp5;\n                    temp5, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x32).value(var9)(memory[var8:var8 + var7]);\n                \n                    if (temp5) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] + 0x02c68af0bb140000; }\n                \n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            }\n        }\n    }\n    \n    function changeOwnerAddress(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp1 = arg0;\n            var temp2 = (temp1 * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x07] & ~(0x02 ** 0xa0 - 0x01));\n            storage[0x07] = temp2;\n            var temp3 = memory[0x40:0x60];\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            memory[temp3:temp3 + 0x20] = temp4 & temp2;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp1 & temp4;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + temp3 - temp5 + 0x40], [0x4f67fe223bca69f22bf24552638f3c95bfb9e9763c4a33a3aa67a46484d81c2b]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function owner() returns (var r0) { return storage[0x07] & 0x02 ** 0xa0 - 0x01; }\n    \n    function increaseInvestment() {\n        if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (msg.value) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x03;\n        \n            if (storage[keccak256(memory[0x00:0x40])]) {\n                var var0 = 0x1623;\n                func_254D();\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x03;\n                memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])];\n                memory[0x20:0x40] = 0x04;\n                var temp0 = keccak256(memory[0x00:0x40]) + 0x01;\n                var temp1 = msg.value;\n                storage[temp0] = temp1 + storage[temp0];\n                storage[0x06] = temp1 + storage[0x06];\n                return;\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function resumeContract() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            storage[0x08] = storage[0x08] & ~(0xff * 0x02 ** 0xa0);\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xadf8f79dd508a8e1881e3cca67a5af02a21f971925c3a6a6cb8fc165d07e3463]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function bets(var arg0) returns (var arg0, var r1, var r2) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02];\n        return arg0, r1, r2;\n    }\n    \n    function invested() returns (var r0) { return storage[0x06]; }\n    \n    function changeGasLimitOfSafeSend(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            var var0 = arg0;\n        \n            if (var0 + 0x02ab98 < 0x02ab98) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else if (var0 >= 0x61a8) {\n                var temp1 = arg0;\n                storage[0x02] = temp1;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = temp1;\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp1;\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + temp2 - temp3 + 0x40], [0xb5e4ece1f96cc168fddcead7ee209f969a93607238c585767ea80fad5fe884b2]);\n                return;\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function houseAddress() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function changeOraclizeConfig(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            var var0 = 0x0c9f;\n            var var1 = arg0;\n            func_26E8(var1);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function numBets() returns (var r0) { return storage[0x0c]; }\n    \n    function executeEmergencyWithdrawal() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x08] / 0x02 ** 0xa0 & 0xff)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (storage[0x0a] + 0x03f480 <= block.timestamp) {\n            var1 = address(this).balance;\n            var2 = 0x01;\n        \n            if (var2 > storage[0x05]) {\n            label_187B:\n            \n                if (var0 < (storage[0x05] * 0x0a) / 0x64) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp1 = memory[0x40:0x60];\n                    var temp2 = var1;\n                    var temp3;\n                    temp3, memory[temp1:temp1 + 0x00] = address(storage[0x09] & 0x02 ** 0xa0 - 0x01).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp1:temp1 + 0x00]);\n                \n                    if (temp3) {\n                        var temp4 = memory[0x40:0x60];\n                        memory[temp4:temp4 + 0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var1;\n                        var temp5 = memory[0x40:0x60];\n                        log(memory[temp5:temp5 + temp4 - temp5 + 0x40], [0xe0376e740df28d6cbdef46880b37136bc75e027766e3295d4af8a44c557ae732]);\n                    \n                    label_0A01:\n                        return;\n                    } else {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                        var temp7 = memory[0x40:0x60];\n                        log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x0fd1ed783bf9505e3fc2545a18e022b8bd048d240d98a3c959646ccebd569b39]);\n                        goto label_0A01;\n                    }\n                }\n            } else {\n            label_1834:\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x04;\n            \n                if (!!(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff) != 0x01) {\n                    var2 = var2 + 0x01;\n                \n                label_182A:\n                \n                    if (var2 > storage[0x05]) { goto label_187B; }\n                    else { goto label_1834; }\n                } else {\n                    var temp8 = var2;\n                    memory[0x00:0x20] = temp8;\n                    memory[0x20:0x40] = 0x04;\n                    var temp9 = keccak256(memory[0x00:0x40]) + 0x02;\n                    storage[temp9] = storage[temp9] & ~0xff;\n                    var0 = var0 + 0x01;\n                    var2 = temp8 + 0x01;\n                    goto label_182A;\n                }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getBalance(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        memory[var0:var0 + 0x20] = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40]) + 0x01];\n        var var2 = var0;\n        var var3 = var2;\n        var var4 = 0x198e;\n        var var5 = arg0;\n        var4 = getProfitShare(var5);\n        var2 = var4;\n        var4 = 0x1999;\n        var5 = arg0;\n        var4 = getLossesShare(var5);\n        var3 = var4;\n        var temp0 = var2;\n        var4 = var1 + temp0 < temp0;\n    \n        if (!var4) {\n            var temp1 = var1;\n            var4 = temp1 + var2 < temp1;\n        \n            if (var4) { goto label_19B8; }\n            else { goto label_19B2; }\n        } else if (var4) {\n        label_19B8:\n        \n            if (!var4) {\n            label_19CA:\n                return (var1 + var2) - var3;\n            } else {\n            label_19BE:\n                return 0x00;\n            }\n        } else {\n        label_19B2:\n        \n            if (var1 + var2 >= var3) { goto label_19CA; }\n            else { goto label_19BE; }\n        }\n    }\n    \n    function newInvestor() {\n        var var0 = 0x00;\n    \n        if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (msg.value) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x03;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) {\n                var var1 = 0x1a2c;\n                var1 = getMinInvestment();\n            \n                if (msg.value > var1) {\n                    var1 = 0x1a3f;\n                    func_254D();\n                \n                    if (storage[0x05] != 0x0a) {\n                    label_1A76:\n                        var temp0 = storage[0x05] + 0x01;\n                        storage[0x05] = temp0;\n                        var var2 = temp0;\n                        var1 = 0x1a8b;\n                        func_27F6(var2);\n                    \n                        if (storage[0x05] <= 0x0a) { return; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var1 = 0x1a52;\n                        var1 = searchSmallestInvestor();\n                        memory[0x00:0x20] = var1;\n                        memory[0x20:0x40] = 0x04;\n                        var0 = var1;\n                        var1 = 0x1a76;\n                        var2 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                        func_1D80(var2);\n                        goto label_1A76;\n                    }\n                } else {\n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_1AA4(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[var1] & 0x02 ** 0xa0 - 0x01) {\n        label_1AC5:\n            var var2 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var3 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var3 * 0x02 ** 0xe0;\n            var var4 = temp0 + 0x04;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = 0x00;\n            var var10 = var2;\n        \n            if (!address(var10).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x32).value(var9)(memory[var8:var8 + var7]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    storage[0x01] = (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    var2 = storage[0x01] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                    var3 = 0x2ef3accc;\n                    var temp2 = arg0;\n                    var4 = temp2;\n                    var5 = arg2;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var3 * 0x02 ** 0xe0;\n                    var temp4 = temp3 + 0x04;\n                    var6 = temp4;\n                    var7 = var6;\n                    var temp5 = var7 + 0x20;\n                    memory[temp5:temp5 + 0x20] = var5;\n                    var temp6 = temp5 + 0x20;\n                    memory[var7:var7 + 0x20] = temp6 - var7;\n                    memory[temp6:temp6 + 0x20] = memory[var4:var4 + 0x20];\n                    var temp7 = temp6 + 0x20;\n                    var temp8 = memory[var4:var4 + 0x20];\n                    memory[temp7:temp7 + temp8] = address(0x04).call.gas((temp8 + 0x1f) / 0x20 * 0x03 + 0x0f)(memory[var4 + 0x20:var4 + 0x20 + temp8]);\n                    var8 = temp8 + temp7;\n                    var9 = temp8 & 0x1f;\n                \n                    if (!var9) {\n                        var4 = var8;\n                        var5 = 0x20;\n                        var6 = memory[0x40:0x60];\n                        var7 = var4 - var6;\n                        var8 = var6;\n                        var9 = 0x00;\n                        var10 = var2;\n                    \n                        if (!address(var10).code.length) {\n                            main();\n                            // Error: Could not resolve method call return address!\n                        } else {\n                        label_1C0F:\n                            var temp9;\n                            temp9, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x32).value(var9)(memory[var8:var8 + var7]);\n                        \n                            if (!temp9) {\n                                main();\n                                // Error: Could not resolve method call return address!\n                            } else {\n                                var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                            \n                                if (var1 <= arg2 * tx.gasprice + 0x0de0b6b3a7640000) {\n                                    var2 = storage[0x01] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                    var3 = 0xc51be90f;\n                                    var4 = var1;\n                                    var5 = 0x00;\n                                    var temp10 = arg0;\n                                    var6 = temp10;\n                                    var7 = arg1;\n                                    var8 = arg2;\n                                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                                    var temp11 = memory[0x40:0x60];\n                                    memory[temp11:temp11 + 0x20] = var3 * 0x02 ** 0xe0;\n                                    var temp12 = temp11 + 0x04;\n                                    var9 = temp12;\n                                    memory[var9:var9 + 0x20] = var5;\n                                    var temp13 = var9 + 0x20;\n                                    var10 = temp13;\n                                    var var11 = var10 + 0x20;\n                                    var temp14 = var11 + 0x20;\n                                    memory[temp14:temp14 + 0x20] = var8;\n                                    var temp15 = temp14 + 0x20;\n                                    memory[var10:var10 + 0x20] = temp15 - var9;\n                                    memory[temp15:temp15 + 0x20] = memory[var6:var6 + 0x20];\n                                    var temp16 = temp15 + 0x20;\n                                    var temp17 = memory[var6:var6 + 0x20];\n                                    memory[temp16:temp16 + temp17] = address(0x04).call.gas((temp17 + 0x1f) / 0x20 * 0x03 + 0x0f)(memory[var6 + 0x20:var6 + 0x20 + temp17]);\n                                    var var12 = temp17 + temp16;\n                                    var var13 = temp17 & 0x1f;\n                                \n                                    if (!var13) {\n                                        var temp18 = var12;\n                                        memory[var11:var11 + 0x20] = temp18 - var9;\n                                        var temp19 = var7;\n                                        memory[temp18:temp18 + 0x20] = memory[temp19:temp19 + 0x20];\n                                        var temp20 = temp18 + 0x20;\n                                        var temp21 = memory[temp19:temp19 + 0x20];\n                                        memory[temp20:temp20 + temp21] = address(0x04).call.gas((temp21 + 0x1f) / 0x20 * 0x03 + 0x0f)(memory[temp19 + 0x20:temp19 + 0x20 + temp21]);\n                                        var12 = temp21 + temp20;\n                                        var13 = temp21 & 0x1f;\n                                    \n                                        if (!var13) {\n                                        label_1D46:\n                                            var5 = var12;\n                                            var6 = 0x20;\n                                            var7 = memory[0x40:0x60];\n                                            var8 = var5 - var7;\n                                            var9 = var7;\n                                            var10 = var4;\n                                            var11 = var2;\n                                        \n                                            if (!address(var11).code.length) {\n                                                main();\n                                                // Error: Could not resolve method call return address!\n                                            } else {\n                                            label_1D62:\n                                                var temp22;\n                                                temp22, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x235a).value(var10)(memory[var9:var9 + var8]);\n                                            \n                                                if (!temp22) {\n                                                    main();\n                                                    // Error: Could not resolve method call return address!\n                                                } else {\n                                                    var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                                                \n                                                label_1D77:\n                                                    return var0;\n                                                }\n                                            }\n                                        } else {\n                                        label_1D2D:\n                                            var temp23 = var13;\n                                            var temp24 = var12 - temp23;\n                                            memory[temp24:temp24 + 0x20] = ~(0x0100 ** (0x20 - temp23) - 0x01) & memory[temp24:temp24 + 0x20];\n                                            var5 = temp24 + 0x20;\n                                            var6 = 0x20;\n                                            var7 = memory[0x40:0x60];\n                                            var8 = var5 - var7;\n                                            var9 = var7;\n                                            var10 = var4;\n                                            var11 = var2;\n                                        \n                                            if (address(var11).code.length) { goto label_1D62; }\n                                        \n                                            main();\n                                            // Error: Could not resolve method call return address!\n                                        }\n                                    } else {\n                                        var temp25 = var13;\n                                        var temp26 = var12 - temp25;\n                                        memory[temp26:temp26 + 0x20] = ~(0x0100 ** (0x20 - temp25) - 0x01) & memory[temp26:temp26 + 0x20];\n                                        var temp27 = temp26 + 0x20;\n                                        memory[var11:var11 + 0x20] = temp27 - var9;\n                                        var temp28 = var7;\n                                        memory[temp27:temp27 + 0x20] = memory[temp28:temp28 + 0x20];\n                                        var temp29 = temp27 + 0x20;\n                                        var temp30 = memory[temp28:temp28 + 0x20];\n                                        memory[temp29:temp29 + temp30] = address(0x04).call.gas((temp30 + 0x1f) / 0x20 * 0x03 + 0x0f)(memory[temp28 + 0x20:temp28 + 0x20 + temp30]);\n                                        var12 = temp30 + temp29;\n                                        var13 = temp30 & 0x1f;\n                                    \n                                        if (!var13) { goto label_1D46; }\n                                        else { goto label_1D2D; }\n                                    }\n                                } else {\n                                    var0 = 0x00;\n                                    goto label_1D77;\n                                }\n                            }\n                        }\n                    } else {\n                        var temp31 = var9;\n                        var temp32 = var8 - temp31;\n                        memory[temp32:temp32 + 0x20] = ~(0x0100 ** (0x20 - temp31) - 0x01) & memory[temp32:temp32 + 0x20];\n                        var4 = temp32 + 0x20;\n                        var5 = 0x20;\n                        var6 = memory[0x40:0x60];\n                        var7 = var4 - var6;\n                        var8 = var6;\n                        var9 = 0x00;\n                        var10 = var2;\n                    \n                        if (address(var10).code.length) { goto label_1C0F; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        } else {\n            var2 = 0x1ac3;\n            var3 = 0x00;\n            var2 = func_288B(var3);\n        \n        label_1AC3:\n            goto label_1AC5;\n        }\n    }\n    \n    function func_1D80(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = 0x1d90;\n        func_254D();\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x1db4;\n        var var5 = arg0;\n        var4 = getBalance(var5);\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x04;\n        var1 = var4;\n    \n        if (storage[0x06] < storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n            storage[0x08] = (storage[0x08] & ~(0xff * 0x02 ** 0xa0)) | 0x02 ** 0xa0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x52e578ad17dc8fe0ff456fdf1f81516f7d29eb85fff301475a3a29d0e84bb31a]);\n        \n            if (storage[0x05] <= 0x0a) {\n            label_1016:\n                return;\n            } else {\n            label_1FA0:\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            var temp0 = var0;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x04;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = temp1 + 0x01;\n            storage[0x06] = storage[0x06] - storage[temp2];\n            storage[temp1] = storage[temp1] & ~(0x02 ** 0xa0 - 0x01);\n            storage[temp2] = 0x00;\n            var temp3 = temp1 + 0x02;\n            storage[temp3] = storage[temp3] & ~0xff;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var temp4 = var1;\n            var1 = temp4 - (temp4 * 0x32) / 0x2710;\n            var2 = (temp4 * 0x32) / 0x2710;\n        \n            if (temp0 == storage[0x05]) {\n                storage[0x05] = storage[0x05] + ~0x00;\n                var4 = 0x1ef4;\n                var5 = arg0;\n                var var6 = var1;\n                func_20DA(var5, var6);\n            \n            label_1EF4:\n                var4 = 0x1f0a;\n                var5 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                var6 = var2;\n                func_20DA(var5, var6);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var1;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0x3026a12843449d7e7377f8932a40bdb5d1b1125efbfbe147132016f8beac0f34]);\n            \n                if (storage[0x05] <= 0x0a) { goto label_1016; }\n                else { goto label_1FA0; }\n            } else {\n                memory[0x00:0x20] = storage[0x05];\n                memory[0x20:0x40] = 0x04;\n                var temp7 = keccak256(memory[0x00:0x40]);\n                var temp8 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp8 & storage[temp7];\n                memory[0x20:0x40] = 0x03;\n                var temp9 = var0;\n                storage[keccak256(memory[0x00:0x40])] = temp9;\n                memory[0x00:0x20] = temp9;\n                memory[0x20:0x40] = 0x04;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                var temp11 = ~(0x02 ** 0xa0 - 0x01);\n                storage[temp10] = (temp11 & storage[temp10]) | ((temp8 & storage[temp7]) * 0x02 ** 0x60) / 0x02 ** 0x60;\n                storage[temp10 + 0x01] = storage[temp7 + 0x01];\n                var temp12 = temp10 + 0x02;\n                var temp13 = ~0xff;\n                storage[temp12] = (temp13 & storage[temp12]) | ((storage[temp7 + 0x02] & 0xff) * 0x02 ** 0xf8) / 0x02 ** 0xf8;\n                memory[0x00:0x20] = storage[0x05];\n                var temp14 = keccak256(memory[0x00:0x40]);\n                storage[temp14] = temp11 & storage[temp14];\n                storage[temp14 + 0x01] = 0x00;\n                var3 = temp7;\n                var temp15 = temp14 + 0x02;\n                storage[temp15] = temp13 & storage[temp15];\n                storage[0x05] = storage[0x05] + ~0x00;\n                var4 = 0x1ef4;\n                var5 = arg0;\n                var6 = var1;\n                func_20DA(var5, var6);\n                goto label_1EF4;\n            }\n        }\n    }\n    \n    function func_1FAC() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0x02 ** 0xa0 - 0x01) {\n        label_1FCB:\n            var var1 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var2 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var2 * 0x02 ** 0xe0;\n            var var3 = temp0 + 0x04;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x32).value(var8)(memory[var7:var7 + var6]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp2 = memory[0x40:0x60];\n                    var temp3 = (memory[temp2:temp2 + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    storage[0x01] = temp3;\n                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = 0x00;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = 0xc281d19e00000000000000000000000000000000000000000000000000000000;\n                    var1 = temp3 & 0x02 ** 0xa0 - 0x01;\n                    var2 = 0xc281d19e;\n                    var3 = temp4 + 0x04;\n                    var4 = 0x20;\n                    var5 = memory[0x40:0x60];\n                    var6 = temp4 - var5 + 0x04;\n                    var8 = 0x00;\n                    var7 = var5;\n                    var9 = var1;\n                \n                    if (!address(var9).code.length) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp5;\n                        temp5, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x32).value(var8)(memory[var7:var7 + var6]);\n                    \n                        if (temp5) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        } else {\n            var1 = 0x1fc9;\n            var2 = 0x00;\n            var1 = func_288B(var2);\n        \n        label_1FC9:\n            goto label_1FCB;\n        }\n    }\n    \n    function func_20C5(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20d2;\n        var var2 = arg0;\n        var var3 = 0x00;\n        return func_298F(var2, var3);\n    }\n    \n    function func_20DA(var arg0, var arg1) {\n        if (!arg1) {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x4763e3feef50167ae1957a20ba2b75b5f4093062392e81d5e351b709b1d8261f]);\n            goto label_0DB1;\n        } else if (address(this).balance >= arg1) {\n            var temp0 = memory[0x40:0x60];\n            var temp1;\n            temp1, memory[temp0:temp0 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(storage[0x02]).value(arg1)(memory[temp0:temp0 + 0x00]);\n        \n            if (temp1) {\n            label_2243:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = arg1;\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + temp2 - temp3 + 0x40], [0xc7e416c5685d8971558840f05c5e63e02575b29997d8da6b9ba44dc10da6a370]);\n                return;\n            } else {\n                var temp4 = memory[0x40:0x60];\n                var temp5 = arg0;\n                memory[temp4:temp4 + 0x20] = temp5 & 0x02 ** 0xa0 - 0x01;\n                memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg1;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + temp4 - temp6 + 0x40], [0x949201d78c50a6b453f7068ed19a5c7d74aaa07c12cadfd3855357a0b0f47405]);\n                var temp7 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x08] & temp7 == temp7 & temp5) { goto label_2243; }\n            \n                var temp8 = memory[0x40:0x60];\n                var temp9;\n                temp9, memory[temp8:temp8 + 0x00] = address(storage[0x08] & 0x02 ** 0xa0 - 0x01).call.gas(storage[0x02]).value(arg1)(memory[temp8:temp8 + 0x00]);\n            \n                if (temp9) { goto label_2243; }\n            \n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = arg1;\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + temp10 - temp11 + 0x40], [0x949201d78c50a6b453f7068ed19a5c7d74aaa07c12cadfd3855357a0b0f47405]);\n                goto label_2243;\n            }\n        } else {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x504b0ae89b95779262e99243870eb936180a8c33b444f17f01807c40a20c7aa7]);\n        \n        label_0DB1:\n            return;\n        }\n    }\n    \n    function func_228E(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = arg1;\n    \n        if (var1 - 0x01 >= 0x2328) { return; }\n    \n        var temp0 = arg0;\n        var temp1 = (memory[temp0 + 0x20:temp0 + 0x20 + 0x20] * 0x2652) / 0x2328;\n        var0 = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = memory[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = arg1;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xa5acb022726d980b249ddc212f4992ad87f28c093550232fcc48bd8af803f2d5]);\n        var var2 = 0x230e;\n        var var3 = memory[temp0:temp0 + 0x20];\n        var var4 = var0;\n        func_20DA(var3, var4);\n        var temp6 = storage[0x0e];\n        var2 = temp6 + var0 < temp6;\n    \n        if (var2) {\n            if (!var2) {\n            label_2331:\n                storage[0x0e] = storage[0x0e] + (var0 - memory[arg0 + 0x20:arg0 + 0x20 + 0x20]);\n                return;\n            } else {\n            label_232D:\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else if (storage[0x0e] + var0 >= memory[arg0 + 0x20:arg0 + 0x20 + 0x20]) { goto label_2331; }\n        else { goto label_232D; }\n    }\n    \n    function func_234B(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n    \n        if (var2 + ~0x00 < 0x2328) {\n        label_1016:\n            return;\n        } else {\n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = memory[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = arg1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0xf6db2bace4ac8277384553ad9603d045220a91fb2448ab6130d7a6f044f9a8cf]);\n            var var4 = memory[temp0:temp0 + 0x20];\n            var var3 = 0x23af;\n            var var5 = 0x01;\n            func_20DA(var4, var5);\n            var temp3 = storage[0x0d];\n            var3 = temp3 + memory[arg0 + 0x20:arg0 + 0x20 + 0x20] < temp3;\n        \n            if (!var3) {\n                var temp8 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20];\n                var3 = temp8 + storage[0x0d] < temp8;\n            \n                if (var3) { goto label_23DB; }\n                else { goto label_23D2; }\n            } else if (var3) {\n            label_23DB:\n            \n                if (!var3) {\n                label_23E5:\n                    var temp4 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20];\n                    var temp5 = ~0x00;\n                    var temp6 = temp5 + temp4 + storage[0x0d];\n                    var0 = temp6;\n                    var temp7 = ((temp5 + temp4) * 0x26b6) / 0x2710 + storage[0x0d];\n                    storage[0x0d] = temp7;\n                    var1 = var0 - temp7;\n                    var3 = 0x1016;\n                    var4 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    func_20DA(var4, var5);\n                    goto label_1016;\n                } else {\n                label_23E1:\n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            } else {\n            label_23D2:\n            \n                if (memory[arg0 + 0x20:arg0 + 0x20 + 0x20] != 0x01) { goto label_23E5; }\n                else { goto label_23E1; }\n            }\n        }\n    }\n    \n    function func_2436(var arg0) {\n        if (storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n        label_2454:\n            var var0 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var1 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1 * 0x02 ** 0xe0;\n            var var2 = temp0 + 0x04;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp2 = memory[0x40:0x60];\n                    var temp3 = (memory[temp2:temp2 + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    storage[0x01] = temp3;\n                    memory[temp2:temp2 + 0x20] = 0x688dcfd700000000000000000000000000000000000000000000000000000000;\n                    memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = arg0 & ~(0x02 ** 0xf8 - 0x01);\n                    var0 = temp3 & 0x02 ** 0xa0 - 0x01;\n                    var1 = 0x688dcfd7;\n                    var2 = temp2 + 0x24;\n                    var3 = 0x00;\n                    var4 = memory[0x40:0x60];\n                    var5 = temp2 - var4 + 0x24;\n                    var6 = var4;\n                    var7 = var3;\n                    var8 = var0;\n                \n                    if (!address(var8).code.length) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp4;\n                        temp4, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n                    \n                        if (temp4) { return; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        } else {\n            var0 = 0x2452;\n            var1 = 0x00;\n            var0 = func_288B(var1);\n        \n        label_2452:\n            goto label_2454;\n        }\n    }\n    \n    function func_254D() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (storage[0x0f] & 0xff) { return; }\n    \n        var1 = 0x01;\n    \n        if (var1 > storage[0x05]) {\n        label_26C2:\n            storage[0x0d] = 0x00;\n            storage[0x0e] = 0x00;\n            storage[0x06] = var0;\n            storage[0x0f] = (storage[0x0f] & ~0xff) | 0x01;\n            return;\n        } else {\n        label_2573:\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x04;\n            var2 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var var5 = 0x2595;\n            var var6 = var2;\n            var5 = getProfitShare(var6);\n            var3 = var5;\n            var5 = 0x25a0;\n            var6 = var2;\n            var5 = getLossesShare(var6);\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x04;\n            var temp0 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n            var4 = var5;\n            var5 = temp0 + var3 < temp0;\n        \n            if (temp0 + var3 < temp0) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n            \n                if (var3 + storage[keccak256(memory[0x00:0x40]) + 0x01] < var4) { goto label_2643; }\n                else { goto label_25E0; }\n            } else if (!var5) {\n            label_2643:\n                storage[0x08] = (storage[0x08] & ~(0xff * 0x02 ** 0xa0)) | 0x02 ** 0xa0;\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x52e578ad17dc8fe0ff456fdf1f81516f7d29eb85fff301475a3a29d0e84bb31a]);\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n                var temp1 = var0;\n            \n                if (temp1 + storage[keccak256(memory[0x00:0x40]) + 0x01] < temp1) {\n                label_26B6:\n                    var4 = var4;\n                    var1 = var1 + 0x01;\n                \n                label_2569:\n                \n                    if (var1 > storage[0x05]) { goto label_26C2; }\n                    else { goto label_2573; }\n                } else {\n                label_269F:\n                    var temp2 = var1;\n                    memory[0x00:0x20] = temp2;\n                    memory[0x20:0x40] = 0x04;\n                    var0 = storage[keccak256(memory[0x00:0x40]) + 0x01] + var0;\n                    var4 = var4;\n                    var1 = temp2 + 0x01;\n                    goto label_2569;\n                }\n            } else {\n            label_25E0:\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n                var temp3 = keccak256(memory[0x00:0x40]) + 0x01;\n                var temp4 = var3 - var4;\n                storage[temp3] = temp4 + storage[temp3];\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp4;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0x8ff49347da9034aab52b79ac6b2ba8cf17d221516834af5e5fa04bef1df4d7cd]);\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n                var temp7 = var0;\n            \n                if (temp7 + storage[keccak256(memory[0x00:0x40]) + 0x01] < temp7) { goto label_26B6; }\n                else { goto label_269F; }\n            }\n        }\n    }\n    \n    function func_26E8(var arg0) {\n        if (storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n        label_2706:\n            var var0 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var1 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1 * 0x02 ** 0xe0;\n            var var2 = temp0 + 0x04;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp2 = memory[0x40:0x60];\n                    var temp3 = (memory[temp2:temp2 + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    storage[0x01] = temp3;\n                    memory[temp2:temp2 + 0x20] = 0xe8a5282d00000000000000000000000000000000000000000000000000000000;\n                    memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = arg0;\n                    var0 = temp3 & 0x02 ** 0xa0 - 0x01;\n                    var1 = 0xe8a5282d;\n                    var2 = temp2 + 0x24;\n                    var3 = 0x00;\n                    var4 = memory[0x40:0x60];\n                    var5 = temp2 - var4 + 0x24;\n                    var6 = var4;\n                    var7 = var3;\n                    var8 = var0;\n                \n                    if (!address(var8).code.length) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp4;\n                        temp4, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n                    \n                        if (temp4) { return; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        } else {\n            var0 = 0x2704;\n            var1 = 0x00;\n            var0 = func_288B(var1);\n        \n        label_2704:\n            goto label_2706;\n        }\n    }\n    \n    function func_27F6(var arg0) {\n        var temp0 = msg.sender;\n        var temp1 = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x03;\n        var temp2 = arg0;\n        storage[keccak256(memory[0x00:0x40])] = temp2;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (temp0 * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n        var temp4 = msg.value;\n        storage[temp3 + 0x01] = temp4;\n        storage[0x06] = temp4 + storage[0x06];\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp1;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0xa4a46f45c9996c78320ae470714f930acba653b022fddec1735c1400209780e4]);\n    }\n    \n    function func_288B(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x28ac;\n        var var3 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed;\n        var2 = func_2ADA(var3);\n    \n        if (var2 <= var1) {\n            var1 = 0x00;\n            var2 = 0x28ff;\n            var3 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1;\n            var2 = func_2ADA(var3);\n        \n            if (var2 <= var1) {\n                var1 = 0x00;\n                var2 = 0x2952;\n                var3 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa;\n                var2 = func_2ADA(var3);\n            \n                if (var2 <= var1) { return 0x00; }\n            \n                storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa;\n                var0 = 0x01;\n            \n            label_0B2D:\n                return var0;\n            } else {\n                storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1;\n                var0 = 0x01;\n                goto label_0B2D;\n            }\n        } else {\n            storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed;\n            var0 = 0x01;\n            goto label_0B2D;\n        }\n    }\n    \n    function func_298F(var arg0, var arg1) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        var var0 = 0x00;\n        memory[temp0:temp0 + 0x20] = var0;\n        var var1 = arg0;\n        var var2 = var0;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (var4 >= memory[var1:var1 + 0x20]) {\n        label_2ABA:\n        \n            if (arg1 <= 0x00) { return var2; }\n            else { return var2 * 0x0a ** arg1; }\n        } else {\n        label_29AF:\n            var var5 = 0x02 ** 0xf8 * 0x30;\n            var var6 = var1;\n            var var7 = var4;\n        \n            if (var7 >= memory[var6:var6 + 0x20]) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1 = memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) >= var5;\n                var5 = temp1;\n            \n                if (!var5) {\n                label_2A1A:\n                \n                    if (!var5) {\n                        var5 = var1;\n                        var6 = var4;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) {\n                            main();\n                            // Error: Could not resolve method call return address!\n                        } else if (memory[var5 + 0x20 + var6:var5 + 0x20 + var6 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) != 0x02 ** 0xf8 * 0x2e) {\n                        label_2AB0:\n                            var4 = var4 + 0x01;\n                        \n                            if (var4 >= memory[var1:var1 + 0x20]) { goto label_2ABA; }\n                            else { goto label_29AF; }\n                        } else {\n                            var3 = 0x01;\n                            goto label_2AB0;\n                        }\n                    } else if (!var3) {\n                    label_2A3D:\n                        var2 = var2 * 0x0a;\n                        var5 = 0x30;\n                        var6 = var1;\n                        var7 = var4;\n                    \n                        if (var7 >= memory[var6:var6 + 0x20]) {\n                            main();\n                            // Error: Could not resolve method call return address!\n                        } else {\n                            var2 = var2 + ((memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 - var5);\n                            goto label_2AB0;\n                        }\n                    } else if (arg1) {\n                        var4 = var4;\n                        arg1 = arg1 + ~0x00;\n                        goto label_2A3D;\n                    } else { goto label_2ABA; }\n                } else {\n                    var5 = 0x02 ** 0xf8 * 0x39;\n                    var6 = var1;\n                    var7 = var4;\n                \n                    if (var7 >= memory[var6:var6 + 0x20]) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var5 = memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) <= var5;\n                        goto label_2A1A;\n                    }\n                }\n            }\n        }\n    }\n    \n    function func_2ADA(var arg0) returns (var r0) { return address(arg0).code.length; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n    label_0000:\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_01D7:\n            var var0 = 0x01e6;\n            var var1 = 0x01e3;\n            bet();\n            func_01E3();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0;\n        \n            if (var0 == 0x058aace1) {\n                // Dispatch table entry for divest()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    divest();\n                    stop();\n                }\n            } else if (var0 == 0x061e494f) {\n                // Dispatch table entry for getBet(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0207;\n                    var var2 = msg.data[0x04:0x24];\n                    var var3;\n                    var1, var2, var3 = getBet(var2);\n                \n                label_0207:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n                    memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = var3;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + temp0 - temp1 + 0x60];\n                }\n            } else if (var0 == 0x0d1fce42) {\n                // Dispatch table entry for getBankroll()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = getBankroll();\n                \n                label_023C:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = var1;\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n                }\n            } else if (var0 == 0x11610c25) {\n                // Dispatch table entry for bet()\n                var1 = 0x01e6;\n                bet();\n                stop();\n            } else if (var0 == 0x116c6eab) {\n                // Dispatch table entry for getProfitShare(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var1 = getProfitShare(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0x12253a6c) {\n                // Dispatch table entry for stopContract()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    stopContract();\n                    stop();\n                }\n            } else if (var0 == 0x132ae5e9) {\n                // Dispatch table entry for numInvestors()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = numInvestors();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x1514ea54) {\n                // Dispatch table entry for getLossesShare(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var1 = getLossesShare(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0x187a62d5) {\n                // Dispatch table entry for voteEmergencyWithdrawal(bool)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    voteEmergencyWithdrawal(var2);\n                    stop();\n                }\n            } else if (var0 == 0x1efb17ee) {\n                // Dispatch table entry for changeHouseAddress(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeHouseAddress(var2);\n                    stop();\n                }\n            } else if (var0 == 0x232523e8) {\n                // Dispatch table entry for forceDivestOfAllInvestors()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    forceDivestOfAllInvestors();\n                    stop();\n                }\n            } else if (var0 == 0x27dc297e) {\n                // Dispatch table entry for __callback(bytes32,string)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp4 = memory[0x40:0x60];\n                    var temp5 = msg.data[0x24:0x44];\n                    var temp6 = msg.data[temp5 + 0x04:temp5 + 0x04 + 0x20];\n                    memory[0x40:0x60] = temp4 + (temp6 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp4:temp4 + 0x20] = temp6;\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    memory[temp4 + 0x20:temp4 + 0x20 + temp6] = msg.data[temp5 + 0x24:temp5 + 0x24 + temp6];\n                    var3 = temp4;\n                    var var4 = 0x0db1;\n                    var var5 = var2;\n                    var var6 = var3;\n                    var var7 = 0x00;\n                    var var8 = memory[0x40:0x60];\n                \n                    if (MSIZE() < var8) {\n                        var temp7 = var7;\n                        var temp8 = var8;\n                        memory[temp8:temp8 + 0x20] = temp7;\n                        memory[0x40:0x60] = temp8 + temp7 * 0x20 + 0x20;\n                        var7 = temp8;\n                        __callback(var5, var6, var7);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        func_0DC9(var5, var6, var7, var8);\n                        // Error: Could not resolve jump destination!\n                    }\n                }\n            } else if (var0 == 0x38bbfa50) {\n                // Dispatch table entry for __callback(bytes32,string,bytes)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp9 = memory[0x40:0x60];\n                    var temp10 = msg.data[0x24:0x44];\n                    var temp11 = msg.data[temp10 + 0x04:temp10 + 0x04 + 0x20];\n                    memory[0x40:0x60] = temp9 + (temp11 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp9:temp9 + 0x20] = temp11;\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    memory[temp9 + 0x20:temp9 + 0x20 + temp11] = msg.data[temp10 + 0x24:temp10 + 0x24 + temp11];\n                    var temp12 = memory[0x40:0x60];\n                    var temp13 = msg.data[0x44:0x64] + 0x04;\n                    var temp14 = msg.data[temp13:temp13 + 0x20];\n                    memory[0x40:0x60] = temp12 + (temp14 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp12:temp12 + 0x20] = temp14;\n                    var3 = temp9;\n                    memory[temp12 + 0x20:temp12 + 0x20 + temp14] = msg.data[temp13 + 0x20:temp13 + 0x20 + temp14];\n                    var4 = temp12;\n                    __callback(var2, var3, var4);\n                    stop();\n                }\n            } else if (var0 == 0x3f683b6a) {\n                // Dispatch table entry for isStopped()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x03f3;\n                    var2 = isStopped();\n                    var temp15 = memory[0x40:0x60];\n                    memory[temp15:temp15 + 0x20] = !!var2;\n                    var temp16 = memory[0x40:0x60];\n                    return memory[temp16:temp16 + temp15 - temp16 + 0x20];\n                }\n            } else if (var0 == 0x3feb5f2b) {\n                // Dispatch table entry for investors(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0417;\n                    var2 = msg.data[0x04:0x24];\n                    var2, var3, var4 = investors(var2);\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = var3;\n                    memory[temp17 + 0x40:temp17 + 0x40 + 0x20] = !!var4;\n                    var temp18 = memory[0x40:0x60];\n                    return memory[temp18:temp18 + temp17 - temp18 + 0x60];\n                }\n            } else if (var0 == 0x40a49a96) {\n                // Dispatch table entry for searchSmallestInvestor()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = searchSmallestInvestor();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x4671e65e) {\n                // Dispatch table entry for proposeEmergencyWithdrawal(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    proposeEmergencyWithdrawal(var2);\n                    stop();\n                }\n            } else if (var0 == 0x4e69d560) {\n                // Dispatch table entry for getStatus()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x047f;\n                    var1, var2, var3, var4, var5, var6, var7, var8 = getStatus();\n                    var temp19 = memory[0x40:0x60];\n                    memory[temp19:temp19 + 0x20] = var1;\n                    memory[temp19 + 0x20:temp19 + 0x20 + 0x20] = var2;\n                    memory[temp19 + 0x40:temp19 + 0x40 + 0x20] = var3;\n                    memory[temp19 + 0x60:temp19 + 0x60 + 0x20] = var4;\n                    memory[temp19 + 0x80:temp19 + 0x80 + 0x20] = var5;\n                    memory[temp19 + 0xa0:temp19 + 0xa0 + 0x20] = var6;\n                    memory[temp19 + 0xc0:temp19 + 0xc0 + 0x20] = var7;\n                    memory[temp19 + 0xe0:temp19 + 0xe0 + 0x20] = var8;\n                    var temp20 = memory[0x40:0x60];\n                    return memory[temp20:temp20 + temp19 - temp20 + 0x0100];\n                }\n            } else if (var0 == 0x5125796a) {\n                // Dispatch table entry for changeOraclizeProofType(bytes1)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeOraclizeProofType(var2);\n                    stop();\n                }\n            } else if (var0 == 0x51404cbe) {\n                // Dispatch table entry for forceDivestOfOneInvestor(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    forceDivestOfOneInvestor(var2);\n                    stop();\n                }\n            } else if (var0 == 0x518496b2) {\n                // Dispatch table entry for proposedWithdrawal()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x04f1;\n                    var2, var3 = proposedWithdrawal();\n                    var temp21 = memory[0x40:0x60];\n                    memory[temp21:temp21 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = var3;\n                    var temp22 = memory[0x40:0x60];\n                    return memory[temp22:temp22 + temp21 - temp22 + 0x40];\n                }\n            } else if (var0 == 0x550ed1f0) {\n                // Dispatch table entry for getMaxBetAmount()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = getMaxBetAmount();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x6128a4f3) {\n                // Dispatch table entry for investorsLosses()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = investorsLosses();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x66aee0fc) {\n                // Dispatch table entry for investorsProfit()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = investorsProfit();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x6be80de7) {\n                // Dispatch table entry for investorIDs(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var2 = investorIDs(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0x71d0ed05) {\n                // Dispatch table entry for betsKeys(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var2 = betsKeys(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0x724ae9d0) {\n                // Dispatch table entry for getMinInvestment()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = getMinInvestment();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x82a5285d) {\n                // Dispatch table entry for getMinBetAmount()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = getMinBetAmount();\n                    goto label_023C;\n                }\n            } else if (var0 == 0x85eac05f) {\n                // Dispatch table entry for changeOwnerAddress(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeOwnerAddress(var2);\n                    stop();\n                }\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0612;\n                    var2 = owner();\n                \n                label_0612:\n                    var temp23 = memory[0x40:0x60];\n                    memory[temp23:temp23 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                    var temp24 = memory[0x40:0x60];\n                    return memory[temp24:temp24 + temp23 - temp24 + 0x20];\n                }\n            } else if (var0 == 0xa4beffa7) {\n                // Dispatch table entry for increaseInvestment()\n                var1 = 0x01e6;\n                increaseInvestment();\n                stop();\n            } else if (var0 == 0xc4bc5da5) {\n                // Dispatch table entry for resumeContract()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    resumeContract();\n                    stop();\n                }\n            } else if (var0 == 0xc902c3ae) {\n                // Dispatch table entry for bets(bytes32)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0207;\n                    var2 = msg.data[0x04:0x24];\n                    var2, var3, var4 = bets(var2);\n                    goto label_0207;\n                }\n            } else if (var0 == 0xcafb2202) {\n                // Dispatch table entry for invested()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = invested();\n                    goto label_023C;\n                }\n            } else if (var0 == 0xd21d7950) {\n                // Dispatch table entry for changeGasLimitOfSafeSend(uint256)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeGasLimitOfSafeSend(var2);\n                    stop();\n                }\n            } else if (var0 == 0xd7cee31e) {\n                // Dispatch table entry for houseAddress()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x0612;\n                    var2 = houseAddress();\n                    goto label_0612;\n                }\n            } else if (var0 == 0xda0bba7b) {\n                // Dispatch table entry for changeOraclizeConfig(bytes32)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    var2 = msg.data[0x04:0x24];\n                    changeOraclizeConfig(var2);\n                    stop();\n                }\n            } else if (var0 == 0xdf06f906) {\n                // Dispatch table entry for numBets()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var1 = numBets();\n                    goto label_023C;\n                }\n            } else if (var0 == 0xf4993bbd) {\n                // Dispatch table entry for executeEmergencyWithdrawal()\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x01e6;\n                    executeEmergencyWithdrawal();\n                    stop();\n                }\n            } else if (var0 == 0xf8b2cb4f) {\n                // Dispatch table entry for getBalance(address)\n                if (msg.value) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var1 = 0x023c;\n                    var2 = msg.data[0x04:0x24];\n                    var1 = getBalance(var2);\n                    goto label_023C;\n                }\n            } else if (var0 == 0xfb099c84) {\n                // Dispatch table entry for newInvestor()\n                var1 = 0x01e6;\n                newInvestor();\n                stop();\n            } else { goto label_01D7; }\n        }\n    }\n    \n    function func_01E3() {}\n    \n    function bet() {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n    \n        if (!(storage[0x08] / 0x0100 ** 0x14 & 0xff)) {\n            var var3 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var4 * 0x02 ** 0xe0;\n            var var5 = temp0 + 0x04;\n            var var6 = 0x20;\n            var var7 = memory[0x40:0x60];\n            var var8 = var5 - var7;\n            var var9 = var7;\n            var var10 = 0x00;\n            var var11 = var3;\n        \n            if (!address(var11).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x32).value(var10)(memory[var9:var9 + var8]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp2 = memory[0x40:0x60];\n                    var temp3 = memory[temp2:temp2 + 0x20];\n                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = 0x00;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = 0x0bbceb33 * 0x02 ** 0xe2;\n                    memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = storage[0x02] + 0x02ab98;\n                    memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x40;\n                    memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x03;\n                    memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x155493 * 0x02 ** 0xea;\n                    var3 = temp3 & 0x02 ** 0xa0 - 0x01;\n                    var4 = 0x2ef3accc;\n                    var5 = temp4 + 0x84;\n                    var6 = 0x20;\n                    var7 = memory[0x40:0x60];\n                    var8 = temp4 - var7 + 0x84;\n                    var10 = 0x00;\n                    var9 = var7;\n                    var11 = var3;\n                \n                    if (!address(var11).code.length) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp5;\n                        temp5, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x32).value(var10)(memory[var9:var9 + var8]);\n                    \n                        if (!temp5) {\n                            main();\n                            // Error: Could not resolve method call return address!\n                        } else {\n                            var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                        \n                            if (var0 < msg.value) {\n                                var1 = msg.value - var0;\n                                var3 = 0x2710;\n                                var4 = 0x0869;\n                                var4 = getBankroll();\n                                var4 = var4 * 0x64;\n                            \n                                if (!var3) {\n                                    main();\n                                    // Error: Could not resolve method call return address!\n                                } else {\n                                    var temp6 = (var1 * 0x032a) / 0x2328 <= var4 / var3;\n                                    var3 = temp6;\n                                \n                                    if (!var3) {\n                                        if (!var3) {\n                                        label_09FC:\n                                            main();\n                                            // Error: Could not resolve method call return address!\n                                        } else {\n                                        label_0898:\n                                            var temp7 = memory[0x40:0x60];\n                                            memory[temp7:temp7 + 0x20] = msg.sender;\n                                            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var1;\n                                            var temp8 = memory[0x40:0x60];\n                                            log(memory[temp8:temp8 + temp7 - temp8 + 0x40], [0xa39417f926ed806b475d2cd74083819551616e7fdb3f5bb7abf8e893eae244b4]);\n                                            var3 = 0x0942;\n                                            var temp9 = memory[0x40:0x60];\n                                            var4 = temp9;\n                                            memory[0x40:0x60] = var4 + 0x40;\n                                            memory[var4:var4 + 0x20] = 0x06;\n                                            memory[var4 + 0x20:var4 + 0x20 + 0x20] = 0x6e65737465640000000000000000000000000000000000000000000000000000;\n                                            var temp10 = memory[0x40:0x60];\n                                            var5 = temp10;\n                                            memory[0x40:0x60] = var5 + 0x01c0;\n                                            memory[var5:var5 + 0x20] = 0x0189;\n                                            memory[var5 + 0x20:var5 + 0x20 + 0x0189] = code[0x2ae2:0x2c6b];\n                                            var6 = storage[0x02] + 0x02ab98;\n                                            var3 = func_1AA4(var4, var5, var6);\n                                            var temp11 = memory[0x40:0x60];\n                                            memory[0x40:0x60] = temp11 + 0x60;\n                                            memory[temp11:temp11 + 0x20] = msg.sender;\n                                            var temp12 = temp11 + 0x20;\n                                            memory[temp12:temp12 + 0x20] = var1;\n                                            var temp13 = temp11 + 0x40;\n                                            memory[temp13:temp13 + 0x20] = 0x00;\n                                            memory[0x00:0x20] = var3;\n                                            memory[0x20:0x40] = 0x0b;\n                                            var temp14 = keccak256(memory[0x00:0x40]);\n                                            storage[temp14] = (memory[temp11:temp11 + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[temp14] & ~(0x02 ** 0xa0 - 0x01));\n                                            storage[temp14 + 0x01] = memory[temp12:temp12 + 0x20];\n                                            storage[temp14 + 0x02] = memory[temp13:temp13 + 0x20];\n                                            var temp15 = storage[0x0c];\n                                            var4 = temp15;\n                                            var temp16 = var4 + 0x01;\n                                            storage[0x0c] = temp16;\n                                            var2 = var3;\n                                            var3 = 0x0c;\n                                            var5 = temp16;\n                                            var6 = var3;\n                                            var7 = var5;\n                                            var8 = var4;\n                                        \n                                            if (!var8 > var7) {\n                                            label_09E0:\n                                                memory[0x00:0x20] = var3;\n                                                storage[var4 + keccak256(memory[0x00:0x20])] = var2;\n                                                return;\n                                            } else {\n                                                memory[0x00:0x20] = var6;\n                                                var temp17 = keccak256(memory[0x00:0x20]);\n                                                var temp18 = var8;\n                                                var8 = 0x09e0;\n                                                var9 = temp17 + temp18;\n                                                var10 = var7 + temp17;\n                                            \n                                                if (var9 <= var10) {\n                                                    var8 = var9;\n                                                    // Error: Could not resolve jump destination!\n                                                } else {\n                                                    var8 = func_09D1(var9, var10);\n                                                    goto label_09E0;\n                                                }\n                                            }\n                                        }\n                                    } else if (var1 < 0x02c68af0bb140000) { goto label_09FC; }\n                                    else { goto label_0898; }\n                                }\n                            } else {\n                                main();\n                                // Error: Could not resolve method call return address!\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_09D1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        storage[temp0] = 0x00;\n        arg1 = temp0 + 0x01;\n    \n        if (arg0 <= arg1) { return arg0; }\n    \n        r0 = func_09D1(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function divest() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])]) {\n            var var0 = 0x01e3;\n            var var1 = msg.sender;\n            func_1D80(var1);\n            func_01E3();\n            // Error: Could not resolve method call return address!\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getBet(var arg0) returns (var r0, var arg0, var r2) {\n        r2 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x00;\n    \n        if (arg0 >= storage[0x0c]) {\n        label_0A9A:\n            var temp0 = r2;\n            r2 = var2;\n            r0 = temp0;\n            arg0 = var1;\n            return r0, arg0, r2;\n        } else {\n            var var4 = 0x0c;\n            var var5 = arg0;\n        \n            if (var5 >= storage[var4]) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                memory[0x00:0x20] = var4;\n                var temp1 = storage[var5 + keccak256(memory[0x00:0x20])];\n                memory[0x00:0x20] = temp1;\n                memory[0x20:0x40] = 0x0b;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                r2 = storage[temp2] & 0x02 ** 0xa0 - 0x01;\n                var1 = storage[temp2 + 0x01];\n                var2 = storage[temp2 + 0x02];\n                var3 = temp1;\n                goto label_0A9A;\n            }\n        }\n    }\n    \n    function getBankroll() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x06] < storage[0x0d];\n    \n        if (!var1) {\n            var temp0 = storage[0x06];\n            var1 = temp0 + storage[0x0d] < temp0;\n        \n            if (var1) { goto label_0ACE; }\n            else { goto label_0AC2; }\n        } else if (var1) {\n        label_0ACE:\n        \n            if (!var1) {\n            label_0ADF:\n                return (storage[0x06] + storage[0x0d]) - storage[0x0e];\n            } else {\n            label_0AD4:\n                return 0x00;\n            }\n        } else {\n        label_0AC2:\n        \n            if (storage[0x06] + storage[0x0d] >= storage[0x0e]) { goto label_0ADF; }\n            else { goto label_0AD4; }\n        }\n    }\n    \n    function getProfitShare(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        var var0 = 0x00;\n        var var1 = storage[0x06];\n        var var2 = storage[0x0d] * storage[keccak256(memory[var0:var0 + 0x40]) + 0x01];\n    \n        if (var1) { return var2 / var1; }\n    \n        main();\n        // Error: Could not resolve method call return address!\n    }\n    \n    function stopContract() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            storage[0x08] = (storage[0x08] & ~(0xff * 0x02 ** 0xa0)) | 0x02 ** 0xa0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x3bb54b4ced112fe0d4fa7efd42b29a0a9036fde6e206de4290c4ff02d2dc2c5c]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function numInvestors() returns (var r0) { return storage[0x05]; }\n    \n    function getLossesShare(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        var var0 = 0x00;\n        var var1 = storage[0x06];\n        var var2 = storage[0x0e] * storage[keccak256(memory[var0:var0 + 0x40]) + 0x01];\n    \n        if (var1) { return var2 / var1; }\n    \n        main();\n        // Error: Could not resolve method call return address!\n    }\n    \n    function voteEmergencyWithdrawal(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!storage[keccak256(memory[0x00:0x40])]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x03;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])];\n            memory[0x20:0x40] = 0x04;\n            var temp1 = keccak256(memory[0x00:0x40]) + 0x02;\n            var temp2 = arg0;\n            storage[temp1] = (temp2 * 0x02 ** 0xf8) / 0x02 ** 0xf8 | (storage[temp1] & ~0xff);\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = temp0;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = !!temp2;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0xea22ee15de9c385abeff072b23d6e0de5ebda8c59098f5585f45e82b9faa5762]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function changeHouseAddress(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp1 = arg0;\n            var temp2 = (temp1 * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x08] & ~(0x02 ** 0xa0 - 0x01));\n            storage[0x08] = temp2;\n            var temp3 = memory[0x40:0x60];\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            memory[temp3:temp3 + 0x20] = temp4 & temp2;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp1 & temp4;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + temp3 - temp5 + 0x40], [0xb750ac854b12114073b8c76dcfe5fb889b30db5d3d60e07abc8ae66c349d7a68]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function forceDivestOfAllInvestors() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            var0 = storage[0x05];\n            var1 = 0x01;\n        \n            if (var1 > var0) {\n            label_0DB1:\n                return;\n            } else {\n            label_0D6B:\n                memory[0x00:0x20] = 0x01;\n                memory[0x20:0x40] = 0x04;\n                var var2 = 0x0da8;\n                var var3 = storage[0xabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05] & 0x02 ** 0xa0 - 0x01;\n                func_1D80(var3);\n                var1 = var1 + 0x01;\n            \n                if (var1 > var0) { goto label_0DB1; }\n                else { goto label_0D6B; }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_0DC9(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = MSIZE();\n        var temp1 = arg2;\n        memory[temp0:temp0 + 0x20] = temp1;\n        memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n        arg2 = temp0;\n        __callback(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function __callback(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x0df0;\n        var1 = func_1FAC();\n    \n        if (msg.sender == var1 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0b;\n            var1 = arg0;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0b;\n                var var2 = arg0;\n            \n                if (storage[keccak256(memory[0x00:0x40]) + 0x02] <= 0x00) {\n                    var var3 = arg0;\n                    var var4 = arg1;\n                    var var5 = 0x00;\n                    var var6 = 0x0e61;\n                    var var7 = var4;\n                    var6 = func_20C5(var7);\n                    var5 = var6;\n                    var6 = var5 < 0x01;\n                \n                    if (!var6) {\n                        var6 = var5 > 0x2710;\n                    \n                        if (!var6) { goto label_0E8E; }\n                        else { goto label_0E7A; }\n                    } else if (!var6) {\n                    label_0E8E:\n                    \n                        if (!var6) {\n                        label_0ECA:\n                            var6 = arg0;\n                            var7 = 0x2710;\n                            var var8 = 0x0ed6;\n                            var8 = getBankroll();\n                            var8 = var8 * 0x64;\n                        \n                            if (!var7) {\n                                main();\n                                // Error: Could not resolve method call return address!\n                            } else {\n                                memory[0x00:0x20] = var6;\n                                memory[0x20:0x40] = 0x0b;\n                                var temp0 = (storage[keccak256(memory[0x00:0x40]) + 0x01] * 0x032a) / 0x2328 <= var8 / var7;\n                                var7 = temp0;\n                            \n                                if (var7) {\n                                    memory[0x00:0x20] = var6;\n                                    memory[0x20:0x40] = 0x0b;\n                                \n                                    if (storage[keccak256(memory[0x00:0x40]) + 0x01] < 0x02c68af0bb140000) { goto label_0FDA; }\n                                    else { goto label_0F2C; }\n                                } else if (!var7) {\n                                label_0FDA:\n                                    memory[0x00:0x20] = var6;\n                                    memory[0x20:0x40] = 0x0b;\n                                    var temp1 = keccak256(memory[0x00:0x40]);\n                                    storage[temp1 + 0x02] = 0x01869f;\n                                    var7 = 0x0fd5;\n                                    var var9 = storage[temp1 + 0x01];\n                                    var8 = storage[temp1] & 0x02 ** 0xa0 - 0x01;\n                                    func_20DA(var8, var9);\n                                \n                                label_0FD5:\n                                \n                                label_1010:\n                                    return;\n                                } else {\n                                label_0F2C:\n                                    var7 = 0x0f34;\n                                    var8 = arg1;\n                                    var7 = func_20C5(var8);\n                                    memory[0x00:0x20] = arg0;\n                                    memory[0x20:0x40] = 0x0b;\n                                    var temp2 = keccak256(memory[0x00:0x40]);\n                                    var temp3 = var7;\n                                    storage[temp2 + 0x02] = temp3;\n                                    var temp4 = memory[0x40:0x60];\n                                    memory[0x40:0x60] = temp4 + 0x60;\n                                    memory[temp4:temp4 + 0x20] = storage[temp2] & 0x02 ** 0xa0 - 0x01;\n                                    memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[temp2 + 0x01];\n                                    memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = temp3;\n                                    var0 = temp3;\n                                    var7 = 0x0f82;\n                                    var8 = temp4;\n                                    var9 = var0;\n                                    func_228E(var8, var9);\n                                \n                                label_0F82:\n                                    memory[0x00:0x20] = arg0;\n                                    memory[0x20:0x40] = 0x0b;\n                                    var temp5 = keccak256(memory[0x00:0x40]);\n                                    var temp6 = memory[0x40:0x60];\n                                    memory[0x40:0x60] = temp6 + 0x60;\n                                    memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n                                    memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = storage[temp5 + 0x01];\n                                    memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = storage[temp5 + 0x02];\n                                    var8 = temp6;\n                                    var7 = 0x0fca;\n                                    var9 = var0;\n                                    func_234B(var8, var9);\n                                    storage[0x0f] = storage[0x0f] & ~0xff;\n                                    goto label_0FD5;\n                                }\n                            }\n                        } else {\n                        label_0E94:\n                            memory[0x00:0x20] = var3;\n                            memory[0x20:0x40] = 0x0b;\n                            var temp7 = keccak256(memory[0x00:0x40]);\n                            storage[temp7 + 0x02] = 0x01869f;\n                            var6 = 0x0ec5;\n                            var8 = storage[temp7 + 0x01];\n                            var7 = storage[temp7] & 0x02 ** 0xa0 - 0x01;\n                            func_20DA(var7, var8);\n                            goto label_1010;\n                        }\n                    } else {\n                    label_0E7A:\n                        memory[0x00:0x20] = var3;\n                        memory[0x20:0x40] = 0x0b;\n                    \n                        if (storage[keccak256(memory[0x00:0x40]) + 0x02]) { goto label_0ECA; }\n                        else { goto label_0E94; }\n                    }\n                } else {\n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function isStopped() returns (var r0) { return storage[0x08] / 0x02 ** 0xa0 & 0xff; }\n    \n    function investors(var arg0) returns (var arg0, var r1, var r2) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02] & 0xff;\n        return arg0, r1, r2;\n    }\n    \n    function searchSmallestInvestor() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = var1;\n    \n        if (var2 > storage[0x05]) {\n        label_10C0:\n            return var1;\n        } else {\n        label_106C:\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x04;\n            var var3 = 0x108c;\n            var var4 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var3 = getBalance(var4);\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x04;\n            var4 = 0x10ad;\n            var var5 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var4 = getBalance(var5);\n        \n            if (var4 >= var3) {\n                var2 = var2 + 0x01;\n            \n            label_1062:\n            \n                if (var2 > storage[0x05]) { goto label_10C0; }\n                else { goto label_106C; }\n            } else {\n                var1 = var2;\n                var2 = var1 + 0x01;\n                goto label_1062;\n            }\n        }\n    }\n    \n    function proposeEmergencyWithdrawal(var arg0) {\n        var var0 = 0x00;\n    \n        if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[0x07] & temp0 == temp0 & msg.sender) {\n                var0 = 0x01;\n            \n                if (var0 > storage[0x05]) {\n                label_112E:\n                    var temp1 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp1 + 0x40;\n                    var temp2 = arg0;\n                    memory[temp1:temp1 + 0x20] = temp2;\n                    var temp3 = block.timestamp;\n                    memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp3;\n                    storage[0x09] = (temp2 * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x09] & ~(0x02 ** 0xa0 - 0x01));\n                    storage[0x0a] = temp3;\n                    log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x6c0eb56f121418f16eaebbe01cb2694897b8578b3b1c549e634a1b7753ed2d8b]);\n                    return;\n                } else {\n                label_110D:\n                    var temp4 = var0;\n                    memory[0x00:0x20] = temp4;\n                    memory[0x20:0x40] = 0x04;\n                    var temp5 = keccak256(memory[0x00:0x40]) + 0x02;\n                    storage[temp5] = storage[temp5] & ~0xff;\n                    var0 = temp4 + 0x01;\n                \n                    if (var0 > storage[0x05]) { goto label_112E; }\n                    else { goto label_110D; }\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getStatus() returns (var r0, var r1, var r2, var r3, var r4, var r5, var r6, var r7) {\n        r1 = 0x00;\n        r2 = 0x00;\n        r3 = 0x00;\n        r4 = 0x00;\n        r5 = 0x00;\n        r6 = 0x00;\n        r7 = 0x00;\n        var var7 = 0x00;\n        var var8 = 0x00;\n        var var9 = 0x00;\n        var var10 = 0x11aa;\n        var10 = getBankroll();\n        var8 = var10;\n        var10 = 0x11b4;\n        var10 = getMinInvestment();\n        r7 = storage[0x0c];\n        r6 = var10;\n        r5 = storage[0x0d] - storage[0x0e];\n        r4 = 0x02c68af0bb140000;\n        r3 = 0x64;\n        r2 = 0xbe;\n        r1 = 0x2328;\n        r0 = var8;\n        return r0, r1, r2, r3, r4, r5, r6, r7;\n    }\n    \n    function changeOraclizeProofType(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (arg0 & ~(0x02 ** 0xf8 - 0x01)) {\n            var var0 = 0x0c9f;\n            var var1 = arg0 | 0x02 ** 0xf8;\n            func_2436(var1);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function forceDivestOfOneInvestor(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            var var0 = 0x1272;\n            var var1 = arg0;\n            func_1D80(var1);\n            storage[0x09] = storage[0x09] & ~(0x02 ** 0xa0 - 0x01);\n            storage[0x0a] = 0x00;\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function proposedWithdrawal() returns (var r0, var r1) {\n        r1 = storage[0x0a];\n        r0 = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n        return r0, r1;\n    }\n    \n    function getMaxBetAmount() returns (var r0) {\n        var var0 = 0x00;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x38cc4831 * 0x02 ** 0xe0;\n        var var1 = var0;\n        var var2 = var1;\n        var var6 = 0x20;\n        var var3 = storage[var2] & 0x02 ** 0xa0 - 0x01;\n        var var7 = memory[0x40:0x60];\n        var var4 = 0x38cc4831;\n        var var5 = temp0 + 0x04;\n        var var8 = temp0 - var7 + 0x04;\n        var var9 = var7;\n        var var10 = var2;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp1;\n            temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x32).value(var10)(memory[var9:var9 + var8]);\n        \n            if (!temp1) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp2 = memory[0x40:0x60];\n                var temp3 = memory[temp2:temp2 + 0x20];\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = 0x00;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x0bbceb33 * 0x02 ** 0xe2;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = storage[0x02] + 0x02ab98;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x40;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x03;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x155493 * 0x02 ** 0xea;\n                var3 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var4 = 0x2ef3accc;\n                var5 = temp4 + 0x84;\n                var6 = 0x20;\n                var7 = memory[0x40:0x60];\n                var8 = temp4 - var7 + 0x84;\n                var10 = 0x00;\n                var9 = var7;\n                var11 = var3;\n            \n                if (!address(var11).code.length) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp5;\n                    temp5, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x32).value(var10)(memory[var9:var9 + var8]);\n                \n                    if (!temp5) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                        var3 = 0x7b98a0;\n                        var4 = 0x2328;\n                        var5 = 0x1393;\n                        var5 = getBankroll();\n                        var4 = var5 * 0x64 * var4;\n                    \n                        if (var3) { return var4 / var3 + var1; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        }\n    }\n    \n    function investorsLosses() returns (var r0) { return storage[0x0e]; }\n    \n    function investorsProfit() returns (var r0) { return storage[0x0d]; }\n    \n    function investorIDs(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function betsKeys(var arg0) returns (var arg0) {\n        var var0 = 0x0c;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else {\n            memory[0x00:0x20] = var0;\n            return storage[var1 + keccak256(memory[0x00:0x20])];\n        }\n    }\n    \n    function getMinInvestment() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (storage[0x05] != 0x0a) {\n            var0 = 0x00;\n        \n        label_09DC:\n            return var0;\n        } else {\n            var var2 = 0x1401;\n            var2 = searchSmallestInvestor();\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x04;\n            var1 = var2;\n            var2 = 0x1425;\n            var var3 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var2 = getBalance(var3);\n            var0 = var2;\n            goto label_09DC;\n        }\n    }\n    \n    function getMinBetAmount() returns (var r0) {\n        var var0 = 0x00;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x38cc4831 * 0x02 ** 0xe0;\n        var var1 = var0;\n        var var2 = storage[var1] & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x38cc4831;\n        var var4 = temp0 + 0x04;\n        var var6 = memory[0x40:0x60];\n        var var5 = 0x20;\n        var var7 = temp0 - var6 + 0x04;\n        var var8 = var6;\n        var var9 = var1;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp1;\n            temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x32).value(var9)(memory[var8:var8 + var7]);\n        \n            if (!temp1) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp2 = memory[0x40:0x60];\n                var temp3 = memory[temp2:temp2 + 0x20];\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = 0x00;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x0bbceb33 * 0x02 ** 0xe2;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = storage[0x02] + 0x02ab98;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x40;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x03;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x155493 * 0x02 ** 0xea;\n                var2 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x2ef3accc;\n                var4 = temp4 + 0x84;\n                var5 = 0x20;\n                var6 = memory[0x40:0x60];\n                var7 = temp4 - var6 + 0x84;\n                var9 = 0x00;\n                var8 = var6;\n                var10 = var2;\n            \n                if (!address(var10).code.length) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp5;\n                    temp5, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x32).value(var9)(memory[var8:var8 + var7]);\n                \n                    if (temp5) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] + 0x02c68af0bb140000; }\n                \n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            }\n        }\n    }\n    \n    function changeOwnerAddress(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp1 = arg0;\n            var temp2 = (temp1 * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x07] & ~(0x02 ** 0xa0 - 0x01));\n            storage[0x07] = temp2;\n            var temp3 = memory[0x40:0x60];\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            memory[temp3:temp3 + 0x20] = temp4 & temp2;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp1 & temp4;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + temp3 - temp5 + 0x40], [0x4f67fe223bca69f22bf24552638f3c95bfb9e9763c4a33a3aa67a46484d81c2b]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function owner() returns (var r0) { return storage[0x07] & 0x02 ** 0xa0 - 0x01; }\n    \n    function increaseInvestment() {\n        if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (msg.value) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x03;\n        \n            if (storage[keccak256(memory[0x00:0x40])]) {\n                var var0 = 0x1623;\n                func_254D();\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x03;\n                memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40])];\n                memory[0x20:0x40] = 0x04;\n                var temp0 = keccak256(memory[0x00:0x40]) + 0x01;\n                var temp1 = msg.value;\n                storage[temp0] = temp1 + storage[temp0];\n                storage[0x06] = temp1 + storage[0x06];\n                return;\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function resumeContract() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            storage[0x08] = storage[0x08] & ~(0xff * 0x02 ** 0xa0);\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xadf8f79dd508a8e1881e3cca67a5af02a21f971925c3a6a6cb8fc165d07e3463]);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function bets(var arg0) returns (var arg0, var r1, var r2) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02];\n        return arg0, r1, r2;\n    }\n    \n    function invested() returns (var r0) { return storage[0x06]; }\n    \n    function changeGasLimitOfSafeSend(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            var var0 = arg0;\n        \n            if (var0 + 0x02ab98 < 0x02ab98) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else if (var0 >= 0x61a8) {\n                var temp1 = arg0;\n                storage[0x02] = temp1;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = temp1;\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp1;\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + temp2 - temp3 + 0x40], [0xb5e4ece1f96cc168fddcead7ee209f969a93607238c585767ea80fad5fe884b2]);\n                return;\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function houseAddress() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function changeOraclizeConfig(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 == temp0 & msg.sender) {\n            var var0 = 0x0c9f;\n            var var1 = arg0;\n            func_26E8(var1);\n            return;\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function numBets() returns (var r0) { return storage[0x0c]; }\n    \n    function executeEmergencyWithdrawal() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (!(storage[0x08] / 0x02 ** 0xa0 & 0xff)) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (storage[0x0a] + 0x03f480 <= block.timestamp) {\n            var1 = address(this).balance;\n            var2 = 0x01;\n        \n            if (var2 > storage[0x05]) {\n            label_187B:\n            \n                if (var0 < (storage[0x05] * 0x0a) / 0x64) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp1 = memory[0x40:0x60];\n                    var temp2 = var1;\n                    var temp3;\n                    temp3, memory[temp1:temp1 + 0x00] = address(storage[0x09] & 0x02 ** 0xa0 - 0x01).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp1:temp1 + 0x00]);\n                \n                    if (temp3) {\n                        var temp4 = memory[0x40:0x60];\n                        memory[temp4:temp4 + 0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var1;\n                        var temp5 = memory[0x40:0x60];\n                        log(memory[temp5:temp5 + temp4 - temp5 + 0x40], [0xe0376e740df28d6cbdef46880b37136bc75e027766e3295d4af8a44c557ae732]);\n                    \n                    label_0A01:\n                        return;\n                    } else {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                        var temp7 = memory[0x40:0x60];\n                        log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x0fd1ed783bf9505e3fc2545a18e022b8bd048d240d98a3c959646ccebd569b39]);\n                        goto label_0A01;\n                    }\n                }\n            } else {\n            label_1834:\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x04;\n            \n                if (!!(storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xff) != 0x01) {\n                    var2 = var2 + 0x01;\n                \n                label_182A:\n                \n                    if (var2 > storage[0x05]) { goto label_187B; }\n                    else { goto label_1834; }\n                } else {\n                    var temp8 = var2;\n                    memory[0x00:0x20] = temp8;\n                    memory[0x20:0x40] = 0x04;\n                    var temp9 = keccak256(memory[0x00:0x40]) + 0x02;\n                    storage[temp9] = storage[temp9] & ~0xff;\n                    var0 = var0 + 0x01;\n                    var2 = temp8 + 0x01;\n                    goto label_182A;\n                }\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function getBalance(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        memory[var0:var0 + 0x20] = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40]) + 0x01];\n        var var2 = var0;\n        var var3 = var2;\n        var var4 = 0x198e;\n        var var5 = arg0;\n        var4 = getProfitShare(var5);\n        var2 = var4;\n        var4 = 0x1999;\n        var5 = arg0;\n        var4 = getLossesShare(var5);\n        var3 = var4;\n        var temp0 = var2;\n        var4 = var1 + temp0 < temp0;\n    \n        if (!var4) {\n            var temp1 = var1;\n            var4 = temp1 + var2 < temp1;\n        \n            if (var4) { goto label_19B8; }\n            else { goto label_19B2; }\n        } else if (var4) {\n        label_19B8:\n        \n            if (!var4) {\n            label_19CA:\n                return (var1 + var2) - var3;\n            } else {\n            label_19BE:\n                return 0x00;\n            }\n        } else {\n        label_19B2:\n        \n            if (var1 + var2 >= var3) { goto label_19CA; }\n            else { goto label_19BE; }\n        }\n    }\n    \n    function newInvestor() {\n        var var0 = 0x00;\n    \n        if (storage[0x08] / 0x02 ** 0xa0 & 0xff) {\n            main();\n            // Error: Could not resolve method call return address!\n        } else if (msg.value) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x03;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) {\n                var var1 = 0x1a2c;\n                var1 = getMinInvestment();\n            \n                if (msg.value > var1) {\n                    var1 = 0x1a3f;\n                    func_254D();\n                \n                    if (storage[0x05] != 0x0a) {\n                    label_1A76:\n                        var temp0 = storage[0x05] + 0x01;\n                        storage[0x05] = temp0;\n                        var var2 = temp0;\n                        var1 = 0x1a8b;\n                        func_27F6(var2);\n                    \n                        if (storage[0x05] <= 0x0a) { return; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var1 = 0x1a52;\n                        var1 = searchSmallestInvestor();\n                        memory[0x00:0x20] = var1;\n                        memory[0x20:0x40] = 0x04;\n                        var0 = var1;\n                        var1 = 0x1a76;\n                        var2 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                        func_1D80(var2);\n                        goto label_1A76;\n                    }\n                } else {\n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            } else {\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            main();\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_1AA4(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[var1] & 0x02 ** 0xa0 - 0x01) {\n        label_1AC5:\n            var var2 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var3 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var3 * 0x02 ** 0xe0;\n            var var4 = temp0 + 0x04;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = 0x00;\n            var var10 = var2;\n        \n            if (!address(var10).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x32).value(var9)(memory[var8:var8 + var7]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    storage[0x01] = (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    var2 = storage[0x01] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                    var3 = 0x2ef3accc;\n                    var temp2 = arg0;\n                    var4 = temp2;\n                    var5 = arg2;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var3 * 0x02 ** 0xe0;\n                    var temp4 = temp3 + 0x04;\n                    var6 = temp4;\n                    var7 = var6;\n                    var temp5 = var7 + 0x20;\n                    memory[temp5:temp5 + 0x20] = var5;\n                    var temp6 = temp5 + 0x20;\n                    memory[var7:var7 + 0x20] = temp6 - var7;\n                    memory[temp6:temp6 + 0x20] = memory[var4:var4 + 0x20];\n                    var temp7 = temp6 + 0x20;\n                    var temp8 = memory[var4:var4 + 0x20];\n                    memory[temp7:temp7 + temp8] = address(0x04).call.gas((temp8 + 0x1f) / 0x20 * 0x03 + 0x0f)(memory[var4 + 0x20:var4 + 0x20 + temp8]);\n                    var8 = temp8 + temp7;\n                    var9 = temp8 & 0x1f;\n                \n                    if (!var9) {\n                        var4 = var8;\n                        var5 = 0x20;\n                        var6 = memory[0x40:0x60];\n                        var7 = var4 - var6;\n                        var8 = var6;\n                        var9 = 0x00;\n                        var10 = var2;\n                    \n                        if (!address(var10).code.length) {\n                            main();\n                            // Error: Could not resolve method call return address!\n                        } else {\n                        label_1C0F:\n                            var temp9;\n                            temp9, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x32).value(var9)(memory[var8:var8 + var7]);\n                        \n                            if (!temp9) {\n                                main();\n                                // Error: Could not resolve method call return address!\n                            } else {\n                                var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                            \n                                if (var1 <= arg2 * tx.gasprice + 0x0de0b6b3a7640000) {\n                                    var2 = storage[0x01] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                    var3 = 0xc51be90f;\n                                    var4 = var1;\n                                    var5 = 0x00;\n                                    var temp10 = arg0;\n                                    var6 = temp10;\n                                    var7 = arg1;\n                                    var8 = arg2;\n                                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                                    var temp11 = memory[0x40:0x60];\n                                    memory[temp11:temp11 + 0x20] = var3 * 0x02 ** 0xe0;\n                                    var temp12 = temp11 + 0x04;\n                                    var9 = temp12;\n                                    memory[var9:var9 + 0x20] = var5;\n                                    var temp13 = var9 + 0x20;\n                                    var10 = temp13;\n                                    var var11 = var10 + 0x20;\n                                    var temp14 = var11 + 0x20;\n                                    memory[temp14:temp14 + 0x20] = var8;\n                                    var temp15 = temp14 + 0x20;\n                                    memory[var10:var10 + 0x20] = temp15 - var9;\n                                    memory[temp15:temp15 + 0x20] = memory[var6:var6 + 0x20];\n                                    var temp16 = temp15 + 0x20;\n                                    var temp17 = memory[var6:var6 + 0x20];\n                                    memory[temp16:temp16 + temp17] = address(0x04).call.gas((temp17 + 0x1f) / 0x20 * 0x03 + 0x0f)(memory[var6 + 0x20:var6 + 0x20 + temp17]);\n                                    var var12 = temp17 + temp16;\n                                    var var13 = temp17 & 0x1f;\n                                \n                                    if (!var13) {\n                                        var temp18 = var12;\n                                        memory[var11:var11 + 0x20] = temp18 - var9;\n                                        var temp19 = var7;\n                                        memory[temp18:temp18 + 0x20] = memory[temp19:temp19 + 0x20];\n                                        var temp20 = temp18 + 0x20;\n                                        var temp21 = memory[temp19:temp19 + 0x20];\n                                        memory[temp20:temp20 + temp21] = address(0x04).call.gas((temp21 + 0x1f) / 0x20 * 0x03 + 0x0f)(memory[temp19 + 0x20:temp19 + 0x20 + temp21]);\n                                        var12 = temp21 + temp20;\n                                        var13 = temp21 & 0x1f;\n                                    \n                                        if (!var13) {\n                                        label_1D46:\n                                            var5 = var12;\n                                            var6 = 0x20;\n                                            var7 = memory[0x40:0x60];\n                                            var8 = var5 - var7;\n                                            var9 = var7;\n                                            var10 = var4;\n                                            var11 = var2;\n                                        \n                                            if (!address(var11).code.length) {\n                                                main();\n                                                // Error: Could not resolve method call return address!\n                                            } else {\n                                            label_1D62:\n                                                var temp22;\n                                                temp22, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x235a).value(var10)(memory[var9:var9 + var8]);\n                                            \n                                                if (!temp22) {\n                                                    main();\n                                                    // Error: Could not resolve method call return address!\n                                                } else {\n                                                    var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                                                \n                                                label_1D77:\n                                                    return var0;\n                                                }\n                                            }\n                                        } else {\n                                        label_1D2D:\n                                            var temp23 = var13;\n                                            var temp24 = var12 - temp23;\n                                            memory[temp24:temp24 + 0x20] = ~(0x0100 ** (0x20 - temp23) - 0x01) & memory[temp24:temp24 + 0x20];\n                                            var5 = temp24 + 0x20;\n                                            var6 = 0x20;\n                                            var7 = memory[0x40:0x60];\n                                            var8 = var5 - var7;\n                                            var9 = var7;\n                                            var10 = var4;\n                                            var11 = var2;\n                                        \n                                            if (address(var11).code.length) { goto label_1D62; }\n                                        \n                                            main();\n                                            // Error: Could not resolve method call return address!\n                                        }\n                                    } else {\n                                        var temp25 = var13;\n                                        var temp26 = var12 - temp25;\n                                        memory[temp26:temp26 + 0x20] = ~(0x0100 ** (0x20 - temp25) - 0x01) & memory[temp26:temp26 + 0x20];\n                                        var temp27 = temp26 + 0x20;\n                                        memory[var11:var11 + 0x20] = temp27 - var9;\n                                        var temp28 = var7;\n                                        memory[temp27:temp27 + 0x20] = memory[temp28:temp28 + 0x20];\n                                        var temp29 = temp27 + 0x20;\n                                        var temp30 = memory[temp28:temp28 + 0x20];\n                                        memory[temp29:temp29 + temp30] = address(0x04).call.gas((temp30 + 0x1f) / 0x20 * 0x03 + 0x0f)(memory[temp28 + 0x20:temp28 + 0x20 + temp30]);\n                                        var12 = temp30 + temp29;\n                                        var13 = temp30 & 0x1f;\n                                    \n                                        if (!var13) { goto label_1D46; }\n                                        else { goto label_1D2D; }\n                                    }\n                                } else {\n                                    var0 = 0x00;\n                                    goto label_1D77;\n                                }\n                            }\n                        }\n                    } else {\n                        var temp31 = var9;\n                        var temp32 = var8 - temp31;\n                        memory[temp32:temp32 + 0x20] = ~(0x0100 ** (0x20 - temp31) - 0x01) & memory[temp32:temp32 + 0x20];\n                        var4 = temp32 + 0x20;\n                        var5 = 0x20;\n                        var6 = memory[0x40:0x60];\n                        var7 = var4 - var6;\n                        var8 = var6;\n                        var9 = 0x00;\n                        var10 = var2;\n                    \n                        if (address(var10).code.length) { goto label_1C0F; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        } else {\n            var2 = 0x1ac3;\n            var3 = 0x00;\n            var2 = func_288B(var3);\n        \n        label_1AC3:\n            goto label_1AC5;\n        }\n    }\n    \n    function func_1D80(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = 0x1d90;\n        func_254D();\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x1db4;\n        var var5 = arg0;\n        var4 = getBalance(var5);\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x04;\n        var1 = var4;\n    \n        if (storage[0x06] < storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n            storage[0x08] = (storage[0x08] & ~(0xff * 0x02 ** 0xa0)) | 0x02 ** 0xa0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x52e578ad17dc8fe0ff456fdf1f81516f7d29eb85fff301475a3a29d0e84bb31a]);\n        \n            if (storage[0x05] <= 0x0a) {\n            label_1016:\n                return;\n            } else {\n            label_1FA0:\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            var temp0 = var0;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x04;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = temp1 + 0x01;\n            storage[0x06] = storage[0x06] - storage[temp2];\n            storage[temp1] = storage[temp1] & ~(0x02 ** 0xa0 - 0x01);\n            storage[temp2] = 0x00;\n            var temp3 = temp1 + 0x02;\n            storage[temp3] = storage[temp3] & ~0xff;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var temp4 = var1;\n            var1 = temp4 - (temp4 * 0x32) / 0x2710;\n            var2 = (temp4 * 0x32) / 0x2710;\n        \n            if (temp0 == storage[0x05]) {\n                storage[0x05] = storage[0x05] + ~0x00;\n                var4 = 0x1ef4;\n                var5 = arg0;\n                var var6 = var1;\n                func_20DA(var5, var6);\n            \n            label_1EF4:\n                var4 = 0x1f0a;\n                var5 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                var6 = var2;\n                func_20DA(var5, var6);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var1;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0x3026a12843449d7e7377f8932a40bdb5d1b1125efbfbe147132016f8beac0f34]);\n            \n                if (storage[0x05] <= 0x0a) { goto label_1016; }\n                else { goto label_1FA0; }\n            } else {\n                memory[0x00:0x20] = storage[0x05];\n                memory[0x20:0x40] = 0x04;\n                var temp7 = keccak256(memory[0x00:0x40]);\n                var temp8 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp8 & storage[temp7];\n                memory[0x20:0x40] = 0x03;\n                var temp9 = var0;\n                storage[keccak256(memory[0x00:0x40])] = temp9;\n                memory[0x00:0x20] = temp9;\n                memory[0x20:0x40] = 0x04;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                var temp11 = ~(0x02 ** 0xa0 - 0x01);\n                storage[temp10] = (temp11 & storage[temp10]) | ((temp8 & storage[temp7]) * 0x02 ** 0x60) / 0x02 ** 0x60;\n                storage[temp10 + 0x01] = storage[temp7 + 0x01];\n                var temp12 = temp10 + 0x02;\n                var temp13 = ~0xff;\n                storage[temp12] = (temp13 & storage[temp12]) | ((storage[temp7 + 0x02] & 0xff) * 0x02 ** 0xf8) / 0x02 ** 0xf8;\n                memory[0x00:0x20] = storage[0x05];\n                var temp14 = keccak256(memory[0x00:0x40]);\n                storage[temp14] = temp11 & storage[temp14];\n                storage[temp14 + 0x01] = 0x00;\n                var3 = temp7;\n                var temp15 = temp14 + 0x02;\n                storage[temp15] = temp13 & storage[temp15];\n                storage[0x05] = storage[0x05] + ~0x00;\n                var4 = 0x1ef4;\n                var5 = arg0;\n                var6 = var1;\n                func_20DA(var5, var6);\n                goto label_1EF4;\n            }\n        }\n    }\n    \n    function func_1FAC() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0x02 ** 0xa0 - 0x01) {\n        label_1FCB:\n            var var1 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var2 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var2 * 0x02 ** 0xe0;\n            var var3 = temp0 + 0x04;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x32).value(var8)(memory[var7:var7 + var6]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp2 = memory[0x40:0x60];\n                    var temp3 = (memory[temp2:temp2 + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    storage[0x01] = temp3;\n                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = 0x00;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = 0xc281d19e00000000000000000000000000000000000000000000000000000000;\n                    var1 = temp3 & 0x02 ** 0xa0 - 0x01;\n                    var2 = 0xc281d19e;\n                    var3 = temp4 + 0x04;\n                    var4 = 0x20;\n                    var5 = memory[0x40:0x60];\n                    var6 = temp4 - var5 + 0x04;\n                    var8 = 0x00;\n                    var7 = var5;\n                    var9 = var1;\n                \n                    if (!address(var9).code.length) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp5;\n                        temp5, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x32).value(var8)(memory[var7:var7 + var6]);\n                    \n                        if (temp5) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        } else {\n            var1 = 0x1fc9;\n            var2 = 0x00;\n            var1 = func_288B(var2);\n        \n        label_1FC9:\n            goto label_1FCB;\n        }\n    }\n    \n    function func_20C5(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20d2;\n        var var2 = arg0;\n        var var3 = 0x00;\n        return func_298F(var2, var3);\n    }\n    \n    function func_20DA(var arg0, var arg1) {\n        if (!arg1) {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x4763e3feef50167ae1957a20ba2b75b5f4093062392e81d5e351b709b1d8261f]);\n            goto label_0DB1;\n        } else if (address(this).balance >= arg1) {\n            var temp0 = memory[0x40:0x60];\n            var temp1;\n            temp1, memory[temp0:temp0 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(storage[0x02]).value(arg1)(memory[temp0:temp0 + 0x00]);\n        \n            if (temp1) {\n            label_2243:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = arg1;\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + temp2 - temp3 + 0x40], [0xc7e416c5685d8971558840f05c5e63e02575b29997d8da6b9ba44dc10da6a370]);\n                return;\n            } else {\n                var temp4 = memory[0x40:0x60];\n                var temp5 = arg0;\n                memory[temp4:temp4 + 0x20] = temp5 & 0x02 ** 0xa0 - 0x01;\n                memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg1;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + temp4 - temp6 + 0x40], [0x949201d78c50a6b453f7068ed19a5c7d74aaa07c12cadfd3855357a0b0f47405]);\n                var temp7 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x08] & temp7 == temp7 & temp5) { goto label_2243; }\n            \n                var temp8 = memory[0x40:0x60];\n                var temp9;\n                temp9, memory[temp8:temp8 + 0x00] = address(storage[0x08] & 0x02 ** 0xa0 - 0x01).call.gas(storage[0x02]).value(arg1)(memory[temp8:temp8 + 0x00]);\n            \n                if (temp9) { goto label_2243; }\n            \n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = arg1;\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + temp10 - temp11 + 0x40], [0x949201d78c50a6b453f7068ed19a5c7d74aaa07c12cadfd3855357a0b0f47405]);\n                goto label_2243;\n            }\n        } else {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x504b0ae89b95779262e99243870eb936180a8c33b444f17f01807c40a20c7aa7]);\n        \n        label_0DB1:\n            return;\n        }\n    }\n    \n    function func_228E(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = arg1;\n    \n        if (var1 - 0x01 >= 0x2328) { return; }\n    \n        var temp0 = arg0;\n        var temp1 = (memory[temp0 + 0x20:temp0 + 0x20 + 0x20] * 0x2652) / 0x2328;\n        var0 = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = memory[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = arg1;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xa5acb022726d980b249ddc212f4992ad87f28c093550232fcc48bd8af803f2d5]);\n        var var2 = 0x230e;\n        var var3 = memory[temp0:temp0 + 0x20];\n        var var4 = var0;\n        func_20DA(var3, var4);\n        var temp6 = storage[0x0e];\n        var2 = temp6 + var0 < temp6;\n    \n        if (var2) {\n            if (!var2) {\n            label_2331:\n                storage[0x0e] = storage[0x0e] + (var0 - memory[arg0 + 0x20:arg0 + 0x20 + 0x20]);\n                return;\n            } else {\n            label_232D:\n                main();\n                // Error: Could not resolve method call return address!\n            }\n        } else if (storage[0x0e] + var0 >= memory[arg0 + 0x20:arg0 + 0x20 + 0x20]) { goto label_2331; }\n        else { goto label_232D; }\n    }\n    \n    function func_234B(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n    \n        if (var2 + ~0x00 < 0x2328) {\n        label_1016:\n            return;\n        } else {\n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = memory[temp0:temp0 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = arg1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0xf6db2bace4ac8277384553ad9603d045220a91fb2448ab6130d7a6f044f9a8cf]);\n            var var4 = memory[temp0:temp0 + 0x20];\n            var var3 = 0x23af;\n            var var5 = 0x01;\n            func_20DA(var4, var5);\n            var temp3 = storage[0x0d];\n            var3 = temp3 + memory[arg0 + 0x20:arg0 + 0x20 + 0x20] < temp3;\n        \n            if (!var3) {\n                var temp8 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20];\n                var3 = temp8 + storage[0x0d] < temp8;\n            \n                if (var3) { goto label_23DB; }\n                else { goto label_23D2; }\n            } else if (var3) {\n            label_23DB:\n            \n                if (!var3) {\n                label_23E5:\n                    var temp4 = memory[arg0 + 0x20:arg0 + 0x20 + 0x20];\n                    var temp5 = ~0x00;\n                    var temp6 = temp5 + temp4 + storage[0x0d];\n                    var0 = temp6;\n                    var temp7 = ((temp5 + temp4) * 0x26b6) / 0x2710 + storage[0x0d];\n                    storage[0x0d] = temp7;\n                    var1 = var0 - temp7;\n                    var3 = 0x1016;\n                    var4 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    func_20DA(var4, var5);\n                    goto label_1016;\n                } else {\n                label_23E1:\n                    main();\n                    // Error: Could not resolve method call return address!\n                }\n            } else {\n            label_23D2:\n            \n                if (memory[arg0 + 0x20:arg0 + 0x20 + 0x20] != 0x01) { goto label_23E5; }\n                else { goto label_23E1; }\n            }\n        }\n    }\n    \n    function func_2436(var arg0) {\n        if (storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n        label_2454:\n            var var0 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var1 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1 * 0x02 ** 0xe0;\n            var var2 = temp0 + 0x04;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp2 = memory[0x40:0x60];\n                    var temp3 = (memory[temp2:temp2 + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    storage[0x01] = temp3;\n                    memory[temp2:temp2 + 0x20] = 0x688dcfd700000000000000000000000000000000000000000000000000000000;\n                    memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = arg0 & ~(0x02 ** 0xf8 - 0x01);\n                    var0 = temp3 & 0x02 ** 0xa0 - 0x01;\n                    var1 = 0x688dcfd7;\n                    var2 = temp2 + 0x24;\n                    var3 = 0x00;\n                    var4 = memory[0x40:0x60];\n                    var5 = temp2 - var4 + 0x24;\n                    var6 = var4;\n                    var7 = var3;\n                    var8 = var0;\n                \n                    if (!address(var8).code.length) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp4;\n                        temp4, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n                    \n                        if (temp4) { return; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        } else {\n            var0 = 0x2452;\n            var1 = 0x00;\n            var0 = func_288B(var1);\n        \n        label_2452:\n            goto label_2454;\n        }\n    }\n    \n    function func_254D() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (storage[0x0f] & 0xff) { return; }\n    \n        var1 = 0x01;\n    \n        if (var1 > storage[0x05]) {\n        label_26C2:\n            storage[0x0d] = 0x00;\n            storage[0x0e] = 0x00;\n            storage[0x06] = var0;\n            storage[0x0f] = (storage[0x0f] & ~0xff) | 0x01;\n            return;\n        } else {\n        label_2573:\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x04;\n            var2 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n            var var5 = 0x2595;\n            var var6 = var2;\n            var5 = getProfitShare(var6);\n            var3 = var5;\n            var5 = 0x25a0;\n            var6 = var2;\n            var5 = getLossesShare(var6);\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x04;\n            var temp0 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n            var4 = var5;\n            var5 = temp0 + var3 < temp0;\n        \n            if (temp0 + var3 < temp0) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n            \n                if (var3 + storage[keccak256(memory[0x00:0x40]) + 0x01] < var4) { goto label_2643; }\n                else { goto label_25E0; }\n            } else if (!var5) {\n            label_2643:\n                storage[0x08] = (storage[0x08] & ~(0xff * 0x02 ** 0xa0)) | 0x02 ** 0xa0;\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x52e578ad17dc8fe0ff456fdf1f81516f7d29eb85fff301475a3a29d0e84bb31a]);\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n                var temp1 = var0;\n            \n                if (temp1 + storage[keccak256(memory[0x00:0x40]) + 0x01] < temp1) {\n                label_26B6:\n                    var4 = var4;\n                    var1 = var1 + 0x01;\n                \n                label_2569:\n                \n                    if (var1 > storage[0x05]) { goto label_26C2; }\n                    else { goto label_2573; }\n                } else {\n                label_269F:\n                    var temp2 = var1;\n                    memory[0x00:0x20] = temp2;\n                    memory[0x20:0x40] = 0x04;\n                    var0 = storage[keccak256(memory[0x00:0x40]) + 0x01] + var0;\n                    var4 = var4;\n                    var1 = temp2 + 0x01;\n                    goto label_2569;\n                }\n            } else {\n            label_25E0:\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n                var temp3 = keccak256(memory[0x00:0x40]) + 0x01;\n                var temp4 = var3 - var4;\n                storage[temp3] = temp4 + storage[temp3];\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp4;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0x8ff49347da9034aab52b79ac6b2ba8cf17d221516834af5e5fa04bef1df4d7cd]);\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x04;\n                var temp7 = var0;\n            \n                if (temp7 + storage[keccak256(memory[0x00:0x40]) + 0x01] < temp7) { goto label_26B6; }\n                else { goto label_269F; }\n            }\n        }\n    }\n    \n    function func_26E8(var arg0) {\n        if (storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n        label_2706:\n            var var0 = storage[0x00] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var var1 = 0x38cc4831;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1 * 0x02 ** 0xe0;\n            var var2 = temp0 + 0x04;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1;\n                temp1, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n            \n                if (!temp1) {\n                    main();\n                    // Error: Could not resolve method call return address!\n                } else {\n                    var temp2 = memory[0x40:0x60];\n                    var temp3 = (memory[temp2:temp2 + 0x20] * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    storage[0x01] = temp3;\n                    memory[temp2:temp2 + 0x20] = 0xe8a5282d00000000000000000000000000000000000000000000000000000000;\n                    memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = arg0;\n                    var0 = temp3 & 0x02 ** 0xa0 - 0x01;\n                    var1 = 0xe8a5282d;\n                    var2 = temp2 + 0x24;\n                    var3 = 0x00;\n                    var4 = memory[0x40:0x60];\n                    var5 = temp2 - var4 + 0x24;\n                    var6 = var4;\n                    var7 = var3;\n                    var8 = var0;\n                \n                    if (!address(var8).code.length) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp4;\n                        temp4, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x32).value(var7)(memory[var6:var6 + var5]);\n                    \n                        if (temp4) { return; }\n                    \n                        main();\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            }\n        } else {\n            var0 = 0x2704;\n            var1 = 0x00;\n            var0 = func_288B(var1);\n        \n        label_2704:\n            goto label_2706;\n        }\n    }\n    \n    function func_27F6(var arg0) {\n        var temp0 = msg.sender;\n        var temp1 = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x03;\n        var temp2 = arg0;\n        storage[keccak256(memory[0x00:0x40])] = temp2;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (temp0 * 0x02 ** 0x60) / 0x02 ** 0x60 | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n        var temp4 = msg.value;\n        storage[temp3 + 0x01] = temp4;\n        storage[0x06] = temp4 + storage[0x06];\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp1;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0xa4a46f45c9996c78320ae470714f930acba653b022fddec1735c1400209780e4]);\n    }\n    \n    function func_288B(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x28ac;\n        var var3 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed;\n        var2 = func_2ADA(var3);\n    \n        if (var2 <= var1) {\n            var1 = 0x00;\n            var2 = 0x28ff;\n            var3 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1;\n            var2 = func_2ADA(var3);\n        \n            if (var2 <= var1) {\n                var1 = 0x00;\n                var2 = 0x2952;\n                var3 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa;\n                var2 = func_2ADA(var3);\n            \n                if (var2 <= var1) { return 0x00; }\n            \n                storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa;\n                var0 = 0x01;\n            \n            label_0B2D:\n                return var0;\n            } else {\n                storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1;\n                var0 = 0x01;\n                goto label_0B2D;\n            }\n        } else {\n            storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed;\n            var0 = 0x01;\n            goto label_0B2D;\n        }\n    }\n    \n    function func_298F(var arg0, var arg1) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        var var0 = 0x00;\n        memory[temp0:temp0 + 0x20] = var0;\n        var var1 = arg0;\n        var var2 = var0;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (var4 >= memory[var1:var1 + 0x20]) {\n        label_2ABA:\n        \n            if (arg1 <= 0x00) { return var2; }\n            else { return var2 * 0x0a ** arg1; }\n        } else {\n        label_29AF:\n            var var5 = 0x02 ** 0xf8 * 0x30;\n            var var6 = var1;\n            var var7 = var4;\n        \n            if (var7 >= memory[var6:var6 + 0x20]) {\n                main();\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp1 = memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) >= var5;\n                var5 = temp1;\n            \n                if (!var5) {\n                label_2A1A:\n                \n                    if (!var5) {\n                        var5 = var1;\n                        var6 = var4;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) {\n                            main();\n                            // Error: Could not resolve method call return address!\n                        } else if (memory[var5 + 0x20 + var6:var5 + 0x20 + var6 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) != 0x02 ** 0xf8 * 0x2e) {\n                        label_2AB0:\n                            var4 = var4 + 0x01;\n                        \n                            if (var4 >= memory[var1:var1 + 0x20]) { goto label_2ABA; }\n                            else { goto label_29AF; }\n                        } else {\n                            var3 = 0x01;\n                            goto label_2AB0;\n                        }\n                    } else if (!var3) {\n                    label_2A3D:\n                        var2 = var2 * 0x0a;\n                        var5 = 0x30;\n                        var6 = var1;\n                        var7 = var4;\n                    \n                        if (var7 >= memory[var6:var6 + 0x20]) {\n                            main();\n                            // Error: Could not resolve method call return address!\n                        } else {\n                            var2 = var2 + ((memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 - var5);\n                            goto label_2AB0;\n                        }\n                    } else if (arg1) {\n                        var4 = var4;\n                        arg1 = arg1 + ~0x00;\n                        goto label_2A3D;\n                    } else { goto label_2ABA; }\n                } else {\n                    var5 = 0x02 ** 0xf8 * 0x39;\n                    var6 = var1;\n                    var7 = var4;\n                \n                    if (var7 >= memory[var6:var6 + 0x20]) {\n                        main();\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var5 = memory[var6 + 0x20 + var7:var6 + 0x20 + var7 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) <= var5;\n                        goto label_2A1A;\n                    }\n                }\n            }\n        }\n    }\n    \n    function func_2ADA(var arg0) returns (var r0) { return address(arg0).code.length; }\n}\n\n.",
	"status": "1",
	"time_cost": 58.73336362838745,
	"usage": {
		"completion_tokens": 658,
		"prompt_tokens": 31145,
		"total_tokens": 31803
	}
}