{
	"address": "0x3c07b3f4a6e253915d83c86707f0af07521d1cd8",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract reconstructed from the decompiled code:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract CloudToken {\n    uint256 private _totalSupply;\n    uint256 private _cloudsPerEth;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    address private _owner;\n    bool private _selling;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function approve(address spender, uint256 value) public returns (bool) { \n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function selling() public view returns (bool) { \n        return _selling;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) { \n        require(_balanceOf[from] >= value, \"Insufficient balance.\");\n        require(_allowance[from][msg.sender] >= value, \"Insufficient allowance.\");\n        require(value > 0, \"Value must be positive.\");\n        require(_balanceOf[to] + value > _balanceOf[to], \"Overflow error.\");\n\n        _balanceOf[from] -= value;\n        _allowance[from][msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function decimals() public pure returns (uint8) { \n        return 0;\n    }\n\n    function changeSale(bool newValue) public { \n        require(_owner == msg.sender);\n        _selling = newValue;\n    }\n\n    function sale() public payable { \n        require(_selling);\n        uint256 clouds = msg.value * _cloudsPerEth;\n        require(_balanceOf[_owner] >= clouds);\n\n        _balanceOf[msg.sender] += clouds;\n        _balanceOf[_owner] -= clouds;\n        emit Transfer(_owner, msg.sender, clouds);\n    }\n\n    function changeCloudsPerEth(uint256 newValue) public { \n        require(_owner == msg.sender);\n        _cloudsPerEth = newValue;\n    }\n\n    function balanceOf(address account) public view returns (uint256) { \n        return _balanceOf[account];\n    }\n\n    function cloudsPerEth() public view returns (uint256) { \n        return _cloudsPerEth;\n    }\n\n    function owner() public view returns (address) { \n        return _owner;\n    }\n\n    function symbol() public pure returns (string memory) { \n        return \"APIH\";\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) { \n        require(_balanceOf[msg.sender] >= value, \"Insufficient balance.\");\n        require(value > 0, \"Value must be positive.\");\n        require(_balanceOf[to] + value > _balanceOf[to], \"Overflow error.\");\n\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) { \n        return _allowance[owner][spender];\n    }\n\n    function transferOwnership(address newOwner) public { \n        require(_owner == msg.sender);\n        _balanceOf[newOwner] = _balanceOf[_owner];\n        _balanceOf[_owner] = 0;\n        _owner = newOwner;\n    }\n\n    function name() public pure returns (string memory) { \n        return \"API Heaven clouds\";\n    }\n}\n```\n\nThis Solidity code is only a rough reconstruction and may not exactly match the original contract. Please note that the function selector logic and some other parts of the decompiled code are not included, as they are usually generated by the Solidity compiler and not part of actual Solidity code. Furthermore, this reconstructed code has not been tested and may contain errors.",
				"role": "assistant"
			}
		}
	],
	"created": 1701459959,
	"id": "chatcmpl-8R3kVMo6eh5JIVmmYtOAULhi7s9C3",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 21:05 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nuint256 _cloudsPerEth; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\naddress _changeCloudsPerEth; // STORAGE[0x2] bytes 0 to 19\nuint8 _selling; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction selling() public nonPayable { \n    return _selling;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v0) {\n        v4 = v5 = 0;\n    } else {\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg2;\n        _balanceOf[varg1] += varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v4 = v6 = 1;\n    }\n    return v4;\n}\n\nfunction decimals() public nonPayable { \n    return 0;\n}\n\nfunction changeSale(bool varg0) public nonPayable { \n    require(_changeCloudsPerEth == msg.sender);\n    _selling = varg0;\n}\n\nfunction sale() public payable { \n    require(_selling);\n    require(_balanceOf[_changeCloudsPerEth] >= msg.value / 0x38d7ea4c68000 * _cloudsPerEth);\n    _balanceOf[msg.sender] += msg.value / 0x38d7ea4c68000 * _cloudsPerEth;\n    _balanceOf[_changeCloudsPerEth] = _balanceOf[_changeCloudsPerEth] - msg.value / 0x38d7ea4c68000 * _cloudsPerEth;\n    emit Transfer(_changeCloudsPerEth, msg.sender, msg.value / 0x38d7ea4c68000 * _cloudsPerEth);\n}\n\nfunction changeCloudsPerEth(uint256 varg0) public nonPayable { \n    require(_changeCloudsPerEth == msg.sender);\n    _cloudsPerEth = varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction cloudsPerEth() public nonPayable { \n    return _cloudsPerEth;\n}\n\nfunction owner() public nonPayable { \n    return _changeCloudsPerEth;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0xe298810000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n        goto 0x4d20x7e7B0x3b1;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_changeCloudsPerEth == msg.sender);\n    _balanceOf[varg0] = _balanceOf[_changeCloudsPerEth];\n    _balanceOf[_changeCloudsPerEth] = 0;\n    _changeCloudsPerEth = varg0;\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (17) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffff & 'API Heaven clouds';\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23aed228 == function_selector) {\n            selling();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42be9307 == function_selector) {\n            changeSale(bool);\n        } else if (0x6ad1fe02 == function_selector) {\n            sale();\n        } else if (0x702c728e == function_selector) {\n            changeCloudsPerEth(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x883cd1a5 == function_selector) {\n            cloudsPerEth();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    revert();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 21:05 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nuint256 _cloudsPerEth; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\naddress _changeCloudsPerEth; // STORAGE[0x2] bytes 0 to 19\nuint8 _selling; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction selling() public nonPayable { \n    return _selling;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v0) {\n        v4 = v5 = 0;\n    } else {\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg2;\n        _balanceOf[varg1] += varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v4 = v6 = 1;\n    }\n    return v4;\n}\n\nfunction decimals() public nonPayable { \n    return 0;\n}\n\nfunction changeSale(bool varg0) public nonPayable { \n    require(_changeCloudsPerEth == msg.sender);\n    _selling = varg0;\n}\n\nfunction sale() public payable { \n    require(_selling);\n    require(_balanceOf[_changeCloudsPerEth] >= msg.value / 0x38d7ea4c68000 * _cloudsPerEth);\n    _balanceOf[msg.sender] += msg.value / 0x38d7ea4c68000 * _cloudsPerEth;\n    _balanceOf[_changeCloudsPerEth] = _balanceOf[_changeCloudsPerEth] - msg.value / 0x38d7ea4c68000 * _cloudsPerEth;\n    emit Transfer(_changeCloudsPerEth, msg.sender, msg.value / 0x38d7ea4c68000 * _cloudsPerEth);\n}\n\nfunction changeCloudsPerEth(uint256 varg0) public nonPayable { \n    require(_changeCloudsPerEth == msg.sender);\n    _cloudsPerEth = varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction cloudsPerEth() public nonPayable { \n    return _cloudsPerEth;\n}\n\nfunction owner() public nonPayable { \n    return _changeCloudsPerEth;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0xe298810000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n        goto 0x4d20x7e7B0x3b1;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_changeCloudsPerEth == msg.sender);\n    _balanceOf[varg0] = _balanceOf[_changeCloudsPerEth];\n    _balanceOf[_changeCloudsPerEth] = 0;\n    _changeCloudsPerEth = varg0;\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (17) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffff & 'API Heaven clouds';\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23aed228 == function_selector) {\n            selling();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42be9307 == function_selector) {\n            changeSale(bool);\n        } else if (0x6ad1fe02 == function_selector) {\n            sale();\n        } else if (0x702c728e == function_selector) {\n            changeCloudsPerEth(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x883cd1a5 == function_selector) {\n            cloudsPerEth();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    revert();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 21:05 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nuint256 _cloudsPerEth; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\naddress _changeCloudsPerEth; // STORAGE[0x2] bytes 0 to 19\nuint8 _selling; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction selling() public nonPayable { \n    return _selling;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v0) {\n        v4 = v5 = 0;\n    } else {\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg2;\n        _balanceOf[varg1] += varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v4 = v6 = 1;\n    }\n    return v4;\n}\n\nfunction decimals() public nonPayable { \n    return 0;\n}\n\nfunction changeSale(bool varg0) public nonPayable { \n    require(_changeCloudsPerEth == msg.sender);\n    _selling = varg0;\n}\n\nfunction sale() public payable { \n    require(_selling);\n    require(_balanceOf[_changeCloudsPerEth] >= msg.value / 0x38d7ea4c68000 * _cloudsPerEth);\n    _balanceOf[msg.sender] += msg.value / 0x38d7ea4c68000 * _cloudsPerEth;\n    _balanceOf[_changeCloudsPerEth] = _balanceOf[_changeCloudsPerEth] - msg.value / 0x38d7ea4c68000 * _cloudsPerEth;\n    emit Transfer(_changeCloudsPerEth, msg.sender, msg.value / 0x38d7ea4c68000 * _cloudsPerEth);\n}\n\nfunction changeCloudsPerEth(uint256 varg0) public nonPayable { \n    require(_changeCloudsPerEth == msg.sender);\n    _cloudsPerEth = varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction cloudsPerEth() public nonPayable { \n    return _cloudsPerEth;\n}\n\nfunction owner() public nonPayable { \n    return _changeCloudsPerEth;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0xe298810000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n        goto 0x4d20x7e7B0x3b1;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_changeCloudsPerEth == msg.sender);\n    _balanceOf[varg0] = _balanceOf[_changeCloudsPerEth];\n    _balanceOf[_changeCloudsPerEth] = 0;\n    _changeCloudsPerEth = varg0;\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (17) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffff & 'API Heaven clouds';\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23aed228 == function_selector) {\n            selling();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42be9307 == function_selector) {\n            changeSale(bool);\n        } else if (0x6ad1fe02 == function_selector) {\n            sale();\n        } else if (0x702c728e == function_selector) {\n            changeCloudsPerEth(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x883cd1a5 == function_selector) {\n            cloudsPerEth();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    revert();\n}\n.",
	"status": "1",
	"time_cost": 39.21315860748291,
	"usage": {
		"completion_tokens": 863,
		"prompt_tokens": 1771,
		"total_tokens": 2634
	}
}