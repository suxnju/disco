{
	"address": "0x61dc3c6da3f97f544c5352fd0508d0b849896e87",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a rough Solidity contract interpretation of the decompiled EVM code. Due to its complexity, some parts of the code might not be fully accurate. Some constructs are not directly translatable to Solidity, so assumptions have been made.\n\n```solidity\npragma solidity ^0.6.0;\n\ncontract YourContract {\n    address[] private _coins;\n    address[] private _underlying_coins;\n    address private _curve;\n    address private _token;\n    uint256 private _withdraw_donated_dust;\n\n    function add_liquidity(uint256[4] memory amounts) public payable {\n        require(_withdraw_donated_dust == 0);\n        _withdraw_donated_dust = 1;\n        require(msg.value == 0);\n        \n        // ... The rest of the code ...\n        \n        _withdraw_donated_dust = 0;\n    }\n\n    function remove_liquidity(uint256 amount, uint256[4] memory amounts) public payable {\n        require(_withdraw_donated_dust == 0);\n        _withdraw_donated_dust = 1;\n        require(msg.value == 0);\n        \n        // ... The rest of the code ...\n        \n        _withdraw_donated_dust = 0;\n    }\n\n    function remove_liquidity_imbalance(uint256[4] memory amounts) public payable {\n        require(_withdraw_donated_dust == 0);\n        _withdraw_donated_dust = 1;\n        require(msg.value == 0);\n        \n        // ... The rest of the code ...\n        \n        _withdraw_donated_dust = 0;\n    }\n\n    function calc_withdraw_one_coin(uint256 amount, int128 index) public view {\n        require(index >= 0 && index < _coins.length);\n        \n        // ... The rest of the code ...\n    }\n\n    function remove_liquidity_one_coin(uint256 amount, int128 index, uint256 minAmount) public payable {\n        require(index >= 0 && index < _coins.length);\n        require(_withdraw_donated_dust == 0);\n        _withdraw_donated_dust = 1;\n        require(msg.value == 0);\n        \n        // ... The rest of the code ...\n        \n        _withdraw_donated_dust = 0;\n    }\n\n    function withdraw_donated_dust() public payable {\n        require(_withdraw_donated_dust == 0);\n        _withdraw_donated_dust = 1;\n        require(msg.value == 0);\n        \n        // ... The rest of the code ...\n        \n        _withdraw_donated_dust = 0;\n    }\n\n    function coins(int128 index) public view returns (address) {\n        require(index >= 0 && index < _coins.length);\n        return _coins[index];\n    }\n\n    function underlying_coins(int128 index) public view returns (address) {\n        require(index >= 0 && index < _underlying_coins.length);\n        return _underlying_coins[index];\n    }\n\n    function curve() public view returns (address) {\n        return _curve;\n    }\n\n    function token() public view returns (address) {\n        return _token;\n    }\n}\n```\n\nThe decompiled code is complex and contains a lot of low-level operations, a lot of the higher-level functionality is lost in translation. The actual functionality of the smart contract may vary greatly from the interpretation given above. The code above is provided as a rough guideline and may not be fully functional.",
				"role": "assistant"
			}
		}
	],
	"created": 1698041012,
	"id": "chatcmpl-8CiKCAL7uPcevf0zysv2CqoEyWzM0",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2023.10.11 08:03 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _coins; // STORAGE[0x0]\nuint256[] _underlying_coins; // STORAGE[0x1]\nuint256 _curve; // STORAGE[0x2]\nuint256 _token; // STORAGE[0x3]\nuint256 _withdraw_donated_dust; // STORAGE[0xffffff]\n\n\n\nfunction add_liquidity(uint256[4] varg0) public payable { \n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    MEM[320] = 0;\n    MEM[352] = 0;\n    MEM[384] = 1;\n    MEM[416] = 0;\n    while (0 >= 4) {\n        require(0 < 4);\n        if (!MEM[320]) {\n            require(MEM[576] < 4);\n            require((_underlying_coins[MEM[576]]).code.size);\n            require(MEM[576] < 4);\n            require(this ^ _underlying_coins[MEM[576]]);\n            require(MEM[576] < 4);\n            v0 = _underlying_coins[MEM[576]].transferFrom(msg.sender, this, msg.data[4]).gas(msg.gas);\n            require(v0);\n            require(MEM[832]);\n        } else {\n            require(MEM[576] < 4);\n            require((_underlying_coins[MEM[576]]).code.size);\n            require(MEM[576] < 4);\n            require(this ^ _underlying_coins[MEM[576]]);\n            require(MEM[576] < 4);\n            v1 = _underlying_coins[MEM[576]].transferFrom(msg.sender, this, msg.data[4]).gas(msg.gas);\n            require(v1);\n        }\n        require(0 < 4);\n        require((_underlying_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _underlying_coins[0x0]);\n        require(0 < 4);\n        require(0 < 4);\n        v2 = _underlying_coins[0x0].approve(_coins[0], msg.data[4]).gas(msg.gas);\n        require(v2);\n        require(0 < 4);\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v3 = _coins[0x0].deposit(msg.data[4]).gas(msg.gas);\n        require(v3);\n        require(0 < 4);\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v4 = _coins[0x0].balanceOf(this).gas(msg.gas);\n        require(v4);\n        require(0 < 4);\n        MEM[448] = MEM[1504];\n        require(0 < 4);\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        require(0 < 4);\n        v5 = _coins[0x0].approve(_curve, MEM[448]).gas(msg.gas);\n        require(v5);\n        MEM[576] = 1;\n        if (4 == 1) {\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v6 = _curve.add_liquidity(0, 0, 0, 0, varg0).gas(msg.gas);\n            require(v6);\n            require(_token.code.size);\n            require(this ^ _token);\n            v7 = _token.balanceOf(this).gas(msg.gas);\n            require(v7);\n            require(_token.code.size);\n            require(this ^ _token);\n            v8 = _token.transfer(msg.sender, MEM[2144]).gas(msg.gas);\n            require(v8);\n            require(MEM[2336]);\n            _withdraw_donated_dust = 0;\n            exit;\n        }\n    }\n    revert();\n}\n\nfunction remove_liquidity(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4) public payable { \n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    require(_token.code.size);\n    require(this ^ _token);\n    v0 = _token.transferFrom(msg.sender, this, varg0).gas(msg.gas);\n    require(v0);\n    require(MEM[640]);\n    require(_curve.code.size);\n    require(this ^ _curve);\n    v1 = _curve.remove_liquidity(varg0, 0, 0, 0, 0).gas(msg.gas);\n    require(v1);\n    while (352 < 928) {\n    }\n    MEM[960] = 0xeb9ec691;\n    MEM[352] = varg1;\n    MEM[384] = varg2;\n    MEM[416] = varg3;\n    MEM[448] = varg4;\n    MEM[544] = 0;\n    MEM[576] = 0;\n    MEM[608] = 1;\n    MEM[640] = 0;\n    while (1) {\n        if (!0) {\n            // Unknown jump to Block 0x9480x28ab. Refer to 3-address code (TAC);\n        }\n        require(MEM[672] < 4);\n        require((_coins[MEM[672]]).code.size);\n        require(this ^ _coins[MEM[672]]);\n        require((_coins[MEM[672]]).code.size);\n        require(this ^ _coins[MEM[672]]);\n        v2 = _coins[MEM[672]].balanceOf(this).gas(msg.gas);\n        require(v2);\n        v3 = _coins[MEM[672]].withdraw(MEM[864]).gas(msg.gas);\n        require(v3);\n        require(MEM[672] < 4);\n        require((_underlying_coins[MEM[672]]).code.size);\n        require(this ^ _underlying_coins[MEM[672]]);\n        v4 = _underlying_coins[MEM[672]].balanceOf(this).gas(msg.gas);\n        require(v4);\n        require(MEM[672] < 4);\n        require(MEM[1216] >= MEM[(MEM[672] << 5) + 352], Error(32, 26, 'Not enough coins withdrawn'));\n        require(MEM[672] < 4);\n        if (!MEM[(MEM[672] << 5) + 544]) {\n            require((_underlying_coins[MEM[672]]).code.size);\n            require(this ^ _underlying_coins[MEM[672]]);\n            v5 = _underlying_coins[MEM[672]].transfer(msg.sender, MEM[1216]).gas(msg.gas);\n            require(v5);\n            require(MEM[1568]);\n        } else {\n            require((_underlying_coins[MEM[672]]).code.size);\n            require(this ^ _underlying_coins[MEM[672]]);\n            v6 = _underlying_coins[MEM[672]].transfer(msg.sender, MEM[1216]).gas(msg.gas);\n            require(v6);\n        }\n        MEM[672] = 1;\n        if (4 == 1) {\n        }\n    }\n}\n\nfunction remove_liquidity_imbalance(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4) public payable { \n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    MEM[320] = 0;\n    MEM[352] = 0;\n    MEM[384] = 1;\n    MEM[416] = 0;\n    while (0 >= 4) {\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n        require(v0);\n        require(0 < 4);\n        require((MEM[480] * 0xde0b6b3a7640000 / MEM[480] == 0xde0b6b3a7640000) | !MEM[480]);\n        require(MEM[768]);\n        require(0 < 4);\n        MEM[480] = MEM[480] * 0xde0b6b3a7640000 / MEM[768];\n        MEM[608] = 1;\n        if (4 == 1) {\n            require(_token.code.size);\n            require(this ^ _token);\n            v1 = _token.balanceOf(msg.sender).gas(msg.gas);\n            require(v1);\n            if (MEM[960] > varg4) {\n                MEM[800] = varg4;\n            }\n            require(_token.code.size);\n            require(this ^ _token);\n            v2 = _token.transferFrom(msg.sender, this, MEM[800]).gas(msg.gas);\n            require(v2);\n            require(MEM[1184]);\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v3 = _curve.remove_liquidity_imbalance(varg0, varg1, varg2, varg3, varg4).gas(msg.gas);\n            require(v3);\n            require(_token.code.size);\n            require(this ^ _token);\n            v4 = _token.balanceOf(this).gas(msg.gas);\n            require(v4);\n            require(_token.code.size);\n            require(this ^ _token);\n            v5 = _token.transfer(msg.sender, MEM[1600]).gas(msg.gas);\n            require(v5);\n            require(MEM[1792]);\n            while (352 < 1824) {\n            }\n            MEM[1856] = 0xeb9ec691;\n            MEM[352] = 0;\n            MEM[384] = 0;\n            MEM[416] = 0;\n            MEM[448] = 0;\n            MEM[544] = 0;\n            MEM[576] = 0;\n            MEM[608] = 1;\n            MEM[640] = 0;\n            while (1) {\n                if (!0) {\n                    // Unknown jump to Block 0x9480x28ae. Refer to 3-address code (TAC);\n                }\n                require(MEM[672] < 4);\n                require((_coins[MEM[672]]).code.size);\n                require(this ^ _coins[MEM[672]]);\n                require((_coins[MEM[672]]).code.size);\n                require(this ^ _coins[MEM[672]]);\n                v6 = _coins[MEM[672]].balanceOf(this).gas(msg.gas);\n                require(v6);\n                v7 = _coins[MEM[672]].withdraw(MEM[864]).gas(msg.gas);\n                require(v7);\n                require(MEM[672] < 4);\n                require((_underlying_coins[MEM[672]]).code.size);\n                require(this ^ _underlying_coins[MEM[672]]);\n                v8 = _underlying_coins[MEM[672]].balanceOf(this).gas(msg.gas);\n                require(v8);\n                require(MEM[672] < 4);\n                require(MEM[1216] >= MEM[(MEM[672] << 5) + 352], Error(32, 26, 'Not enough coins withdrawn', varg4));\n                require(MEM[672] < 4);\n                if (!MEM[(MEM[672] << 5) + 544]) {\n                    require((_underlying_coins[MEM[672]]).code.size);\n                    require(this ^ _underlying_coins[MEM[672]]);\n                    v9 = _underlying_coins[MEM[672]].transfer(msg.sender, MEM[1216]).gas(msg.gas);\n                    require(v9);\n                    require(MEM[1568]);\n                } else {\n                    require((_underlying_coins[MEM[672]]).code.size);\n                    require(this ^ _underlying_coins[MEM[672]]);\n                    v10 = _underlying_coins[MEM[672]].transfer(msg.sender, MEM[1216]).gas(msg.gas);\n                    require(v10);\n                }\n                MEM[672] = 1;\n                if (4 == 1) {\n                }\n            }\n        }\n    }\n    revert();\n}\n\nfunction calc_withdraw_one_coin(uint256 varg0, int128 varg1) public nonPayable { \n    require(varg1 <= MEM[64]);\n    require(varg1 >= MEM[96]);\n    while (0 >= 4) {\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n        require(v0);\n        require(0 < 4);\n        MEM[320] = MEM[576];\n        MEM[448] = 1;\n        if (4 == 1) {\n            MEM[640] = 0x800c1cbc;\n            MEM[512] = 8283;\n            MEM[320] = varg0;\n            MEM[352] = varg1;\n            MEM[384] = 0;\n            MEM[416] = 0;\n            MEM[448] = 0;\n            MEM[480] = 0;\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v1 = _curve.A().gas(msg.gas);\n            require(v1);\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v2 = _curve.fee().gas(msg.gas);\n            require(v2);\n            require(((MEM[864] << 2) / MEM[864] == 4) | !MEM[864]);\n            require(12);\n            require(((MEM[864] << 2) / 12 * 0x9502f900 / ((MEM[864] << 2) / 12) == 0x9502f900) | !((MEM[864] << 2) / 12));\n            require(0x2540be400);\n            require((MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400 >= (MEM[864] << 2) / 12);\n            MEM[736] = (MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400;\n            MEM[896] = 1;\n            MEM[928] = 0xe8d4a51000;\n            MEM[960] = 0xe8d4a51000;\n            MEM[992] = 1;\n            require(_token.code.size);\n            require(this ^ _token);\n            v3 = _token.totalSupply().gas(msg.gas);\n            require(v3);\n            MEM[1024] = MEM[1152];\n            while (0 >= 4) {\n                require(_curve.code.size);\n                require(this ^ _curve);\n                v4 = _curve.balances(0).gas(msg.gas);\n                require(v4);\n                require((MEM[1184] * MEM[1504] / MEM[1184] == MEM[1504]) | !MEM[1184]);\n                MEM[1184] = MEM[1184] * MEM[1504];\n                require(0 < 4);\n                require(0 < 4);\n                require((MEM[1184] * MEM[384] / MEM[1184] == MEM[384]) | !MEM[1184]);\n                require(0xde0b6b3a7640000);\n                require(0 < 4);\n                MEM[1184] = MEM[1184] * MEM[384] / 0xde0b6b3a7640000;\n                require(0 < 4);\n                require(0 + MEM[1184] >= 0);\n                MEM[1312] = 0 + MEM[1184];\n                MEM[1344] = 1;\n                if (4 == 1) {\n                    while (352 < 1568) {\n                    }\n                    MEM[1600] = 0x7b724151;\n                    MEM[352] = 1;\n                    MEM[384] = 0xe8d4a51000;\n                    MEM[416] = 0xe8d4a51000;\n                    MEM[448] = 1;\n                    while (0 + MEM[352] < 0) {\n                        MEM[576] = 1;\n                        if (4 == 1) {\n                            if (bool(0 + MEM[352])) {\n                                MEM[640] = 0;\n                                require(((MEM[704] << 2) / MEM[704] == 4) | !MEM[704]);\n                                while (1) {\n                                    while (!((v5 * v5 / v5 == v5) | !v5)) {\n                                        require(((MEM[352] << 2) / MEM[352] == 4) | !MEM[352]);\n                                        require((MEM[352] << 2) + 1 >= MEM[352] << 2);\n                                        require((MEM[352] << 2) + 1);\n                                        v6 = v5 * v5 / ((MEM[352] << 2) + 1);\n                                        MEM[832] = 1;\n                                        if (4 == 1) {\n                                            v7 = (MEM[704] << 2) * (0 + MEM[352]);\n                                            require((v7 / (MEM[704] << 2) == 0 + MEM[352]) | !(MEM[704] << 2));\n                                            require(((v6 << 2) / v6 == 4) | !v6);\n                                            require(v7 + (v6 << 2) >= v7);\n                                            require(((v7 + (v6 << 2)) * v5 / (v7 + (v6 << 2)) == v5) | !(v7 + (v6 << 2)));\n                                            require(MEM[704] << 2 >= 1);\n                                            require((((MEM[704] << 2) - 1) * v5 / ((MEM[704] << 2) - 1) == v5) | !((MEM[704] << 2) - 1));\n                                            require((5 * v6 / 5 == v6) | !0x5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6 >= ((MEM[704] << 2) - 1) * v5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            v8 = (v7 + (v6 << 2)) * v5 / (((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            if (v8 <= v5) {\n                                                require(v5 >= v8);\n                                                if (!bool(v5 - v8 > 1)) {\n                                                    // Unknown jump to Block 0x13ce0x28b1. Refer to 3-address code (TAC);\n                                                }\n                                            } else {\n                                                require(v8 >= v5);\n                                                if (!bool(v8 - v5 > 1)) {\n                                                }\n                                            }\n                                            MEM[736] = 1;\n                                            if (uint8.max != 1) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                revert();\n                            }\n                        }\n                    }\n                    revert();\n                }\n            }\n            revert();\n        }\n    }\n    revert();\n}\n\nfunction remove_liquidity_one_coin(uint256 varg0, int128 varg1) public payable { \n    MEM[320] = 0;\n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    require(varg1 <= MEM[64]);\n    require(varg1 >= MEM[96]);\n    MEM[480] = _token;\n    while (0 >= 4) {\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n        require(v0);\n        require(0 < 4);\n        MEM[352] = MEM[640];\n        MEM[512] = 1;\n        if (4 == 1) {\n            while (352 < 704) {\n            }\n            MEM[736] = 0x800c1cbc;\n            MEM[512] = 8844;\n            MEM[320] = varg0;\n            MEM[352] = varg1;\n            MEM[384] = 0;\n            MEM[416] = 0;\n            MEM[448] = 0;\n            MEM[480] = 0;\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v1 = _curve.A().gas(msg.gas);\n            require(v1);\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v2 = _curve.fee().gas(msg.gas);\n            require(v2);\n            require(((MEM[864] << 2) / MEM[864] == 4) | !MEM[864]);\n            require(12);\n            require(((MEM[864] << 2) / 12 * 0x9502f900 / ((MEM[864] << 2) / 12) == 0x9502f900) | !((MEM[864] << 2) / 12));\n            require(0x2540be400);\n            require((MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400 >= (MEM[864] << 2) / 12);\n            MEM[736] = (MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400;\n            MEM[896] = 1;\n            MEM[928] = 0xe8d4a51000;\n            MEM[960] = 0xe8d4a51000;\n            MEM[992] = 1;\n            require(_token.code.size);\n            require(this ^ _token);\n            v3 = _token.totalSupply().gas(msg.gas);\n            require(v3);\n            MEM[1024] = MEM[1152];\n            while (0 >= 4) {\n                require(_curve.code.size);\n                require(this ^ _curve);\n                v4 = _curve.balances(0).gas(msg.gas);\n                require(v4);\n                require((MEM[1184] * MEM[1504] / MEM[1184] == MEM[1504]) | !MEM[1184]);\n                MEM[1184] = MEM[1184] * MEM[1504];\n                require(0 < 4);\n                require(0 < 4);\n                require((MEM[1184] * MEM[384] / MEM[1184] == MEM[384]) | !MEM[1184]);\n                require(0xde0b6b3a7640000);\n                require(0 < 4);\n                MEM[1184] = MEM[1184] * MEM[384] / 0xde0b6b3a7640000;\n                require(0 < 4);\n                require(0 + MEM[1184] >= 0);\n                MEM[1312] = 0 + MEM[1184];\n                MEM[1344] = 1;\n                if (4 == 1) {\n                    while (352 < 1568) {\n                    }\n                    MEM[1600] = 0x7b724151;\n                    MEM[352] = 1;\n                    MEM[384] = 0xe8d4a51000;\n                    MEM[416] = 0xe8d4a51000;\n                    MEM[448] = 1;\n                    while (0 + MEM[352] < 0) {\n                        MEM[576] = 1;\n                        if (4 == 1) {\n                            if (bool(0 + MEM[352])) {\n                                MEM[640] = 0;\n                                require(((MEM[704] << 2) / MEM[704] == 4) | !MEM[704]);\n                                while (1) {\n                                    while (!((v5 * v5 / v5 == v5) | !v5)) {\n                                        require(((MEM[352] << 2) / MEM[352] == 4) | !MEM[352]);\n                                        require((MEM[352] << 2) + 1 >= MEM[352] << 2);\n                                        require((MEM[352] << 2) + 1);\n                                        v6 = v5 * v5 / ((MEM[352] << 2) + 1);\n                                        MEM[832] = 1;\n                                        if (4 == 1) {\n                                            v7 = (MEM[704] << 2) * (0 + MEM[352]);\n                                            require((v7 / (MEM[704] << 2) == 0 + MEM[352]) | !(MEM[704] << 2));\n                                            require(((v6 << 2) / v6 == 4) | !v6);\n                                            require(v7 + (v6 << 2) >= v7);\n                                            require(((v7 + (v6 << 2)) * v5 / (v7 + (v6 << 2)) == v5) | !(v7 + (v6 << 2)));\n                                            require(MEM[704] << 2 >= 1);\n                                            require((((MEM[704] << 2) - 1) * v5 / ((MEM[704] << 2) - 1) == v5) | !((MEM[704] << 2) - 1));\n                                            require((5 * v6 / 5 == v6) | !0x5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6 >= ((MEM[704] << 2) - 1) * v5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            v8 = (v7 + (v6 << 2)) * v5 / (((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            if (v8 <= v5) {\n                                                require(v5 >= v8);\n                                                if (!bool(v5 - v8 > 1)) {\n                                                    // Unknown jump to Block 0x13ce0x28b4. Refer to 3-address code (TAC);\n                                                }\n                                            } else {\n                                                require(v8 >= v5);\n                                                if (!bool(v8 - v5 > 1)) {\n                                                }\n                                            }\n                                            MEM[736] = 1;\n                                            if (uint8.max != 1) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                revert();\n                            }\n                        }\n                    }\n                    revert();\n                }\n            }\n            revert();\n        }\n    }\n    revert();\n}\n\nfunction remove_liquidity_one_coin(uint256 varg0, int128 varg1, uint256 varg2) public payable { \n    require(varg2 < 2);\n    CALLDATACOPY(320, 100, 32);\n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    require(varg1 <= MEM[64]);\n    require(varg1 >= MEM[96]);\n    MEM[480] = _token;\n    while (0 >= 4) {\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n        require(v0);\n        require(0 < 4);\n        MEM[352] = MEM[640];\n        MEM[512] = 1;\n        if (4 == 1) {\n            while (352 < 704) {\n            }\n            MEM[736] = 0x800c1cbc;\n            MEM[512] = 8844;\n            MEM[320] = varg0;\n            MEM[352] = varg1;\n            MEM[384] = 0;\n            MEM[416] = 0;\n            MEM[448] = 0;\n            MEM[480] = 0;\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v1 = _curve.A().gas(msg.gas);\n            require(v1);\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v2 = _curve.fee().gas(msg.gas);\n            require(v2);\n            require(((MEM[864] << 2) / MEM[864] == 4) | !MEM[864]);\n            require(12);\n            require(((MEM[864] << 2) / 12 * 0x9502f900 / ((MEM[864] << 2) / 12) == 0x9502f900) | !((MEM[864] << 2) / 12));\n            require(0x2540be400);\n            require((MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400 >= (MEM[864] << 2) / 12);\n            MEM[736] = (MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400;\n            MEM[896] = 1;\n            MEM[928] = 0xe8d4a51000;\n            MEM[960] = 0xe8d4a51000;\n            MEM[992] = 1;\n            require(_token.code.size);\n            require(this ^ _token);\n            v3 = _token.totalSupply().gas(msg.gas);\n            require(v3);\n            MEM[1024] = MEM[1152];\n            while (0 >= 4) {\n                require(_curve.code.size);\n                require(this ^ _curve);\n                v4 = _curve.balances(0).gas(msg.gas);\n                require(v4);\n                require((MEM[1184] * MEM[1504] / MEM[1184] == MEM[1504]) | !MEM[1184]);\n                MEM[1184] = MEM[1184] * MEM[1504];\n                require(0 < 4);\n                require(0 < 4);\n                require((MEM[1184] * MEM[384] / MEM[1184] == MEM[384]) | !MEM[1184]);\n                require(0xde0b6b3a7640000);\n                require(0 < 4);\n                MEM[1184] = MEM[1184] * MEM[384] / 0xde0b6b3a7640000;\n                require(0 < 4);\n                require(0 + MEM[1184] >= 0);\n                MEM[1312] = 0 + MEM[1184];\n                MEM[1344] = 1;\n                if (4 == 1) {\n                    while (352 < 1568) {\n                    }\n                    MEM[1600] = 0x7b724151;\n                    MEM[352] = 1;\n                    MEM[384] = 0xe8d4a51000;\n                    MEM[416] = 0xe8d4a51000;\n                    MEM[448] = 1;\n                    while (0 + MEM[352] < 0) {\n                        MEM[576] = 1;\n                        if (4 == 1) {\n                            if (bool(0 + MEM[352])) {\n                                MEM[640] = 0;\n                                require(((MEM[704] << 2) / MEM[704] == 4) | !MEM[704]);\n                                while (1) {\n                                    while (!((v5 * v5 / v5 == v5) | !v5)) {\n                                        require(((MEM[352] << 2) / MEM[352] == 4) | !MEM[352]);\n                                        require((MEM[352] << 2) + 1 >= MEM[352] << 2);\n                                        require((MEM[352] << 2) + 1);\n                                        v6 = v5 * v5 / ((MEM[352] << 2) + 1);\n                                        MEM[832] = 1;\n                                        if (4 == 1) {\n                                            v7 = (MEM[704] << 2) * (0 + MEM[352]);\n                                            require((v7 / (MEM[704] << 2) == 0 + MEM[352]) | !(MEM[704] << 2));\n                                            require(((v6 << 2) / v6 == 4) | !v6);\n                                            require(v7 + (v6 << 2) >= v7);\n                                            require(((v7 + (v6 << 2)) * v5 / (v7 + (v6 << 2)) == v5) | !(v7 + (v6 << 2)));\n                                            require(MEM[704] << 2 >= 1);\n                                            require((((MEM[704] << 2) - 1) * v5 / ((MEM[704] << 2) - 1) == v5) | !((MEM[704] << 2) - 1));\n                                            require((5 * v6 / 5 == v6) | !0x5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6 >= ((MEM[704] << 2) - 1) * v5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            v8 = (v7 + (v6 << 2)) * v5 / (((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            if (v8 <= v5) {\n                                                require(v5 >= v8);\n                                                if (!bool(v5 - v8 > 1)) {\n                                                    // Unknown jump to Block 0x13ce0x28b7. Refer to 3-address code (TAC);\n                                                }\n                                            } else {\n                                                require(v8 >= v5);\n                                                if (!bool(v8 - v5 > 1)) {\n                                                }\n                                            }\n                                            MEM[736] = 1;\n                                            if (uint8.max != 1) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                revert();\n                            }\n                        }\n                    }\n                    revert();\n                }\n            }\n            revert();\n        }\n    }\n    revert();\n}\n\nfunction withdraw_donated_dust() public payable { \n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    require(_curve.code.size);\n    require(this ^ _curve);\n    v0 = _curve.owner().gas(msg.gas);\n    require(v0);\n    require(msg.sender == MEM[448]);\n    require(_token.code.size);\n    require(this ^ _token);\n    require(_token.code.size);\n    require(this ^ _token);\n    v1 = _token.balanceOf(this).gas(msg.gas);\n    require(v1);\n    v2 = _token.transfer(MEM[448], MEM[640]).gas(msg.gas);\n    require(v2);\n    require(MEM[832]);\n    _withdraw_donated_dust = 0;\n}\n\nfunction coins(int128 varg0) public nonPayable { \n    require(varg0 <= MEM[64]);\n    require(varg0 >= MEM[96]);\n    require(varg0 < 4);\n    return _coins[varg0];\n}\n\nfunction underlying_coins(int128 varg0) public nonPayable { \n    require(varg0 <= MEM[64]);\n    require(varg0 >= MEM[96]);\n    require(varg0 < 4);\n    return _underlying_coins[varg0];\n}\n\nfunction curve() public nonPayable { \n    return _curve;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector, uint256 varg1, uint256 varg2) public payable { \n    if (msg.data.length >= 4) {\n        MEM[32] = 0x10000000000000000000000000000000000000000;\n        MEM[128] = 0x12a05f1fffffffffffffffffffffffffdabf41c00;\n        MEM[160] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n        if (function_selector != 0x29b2f34) {\n            if (!0) {\n                if (function_selector != 0x7d49d875) {\n                    if (function_selector != 0x18a7bd76) {\n                        if (!0) {\n                            if (!0) {\n                                if (!0) {\n                                    if (!0) {\n                                        if (function_selector != 0xcc2b27d7) {\n                                            if (function_selector != 0x1a4d01d2) {\n                                                if (function_selector != 0x517a55a3) {\n                                                    if (!0) {\n                                                        if (function_selector != 0x6c956a54) {\n                                                            if (function_selector != 0x23746eb8) {\n                                                                if (function_selector != 0xb739953e) {\n                                                                    if (function_selector != 0x7165485d) {\n                                                                        if (function_selector == 0xfc0c546a) {\n                                                                            token();\n                                                                        }\n                                                                    } else {\n                                                                        curve();\n                                                                    }\n                                                                } else {\n                                                                    underlying_coins(int128);\n                                                                }\n                                                            } else {\n                                                                coins(int128);\n                                                            }\n                                                        } else {\n                                                            withdraw_donated_dust();\n                                                        }\n                                                    } else {\n                                                        require(!_withdraw_donated_dust);\n                                                        _withdraw_donated_dust = 1;\n                                                        require(!msg.value);\n                                                        require(varg2 <= MEM[64]);\n                                                        require(varg2 >= int128.min);\n                                                        MEM[480] = _token;\n                                                        while (0 >= 4) {\n                                                            require((_coins[0]).code.size);\n                                                            require(0 < 4);\n                                                            require(this ^ _coins[0x0]);\n                                                            require(0 < 4);\n                                                            v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n                                                            require(v0);\n                                                            require(0 < 4);\n                                                            MEM[352] = MEM[640];\n                                                            MEM[512] = 1;\n                                                            if (4 == 1) {\n                                                                while (352 < 704) {\n                                                                }\n                                                                MEM[736] = 0x800c1cbc;\n                                                            }\n                                                        }\n                                                        revert();\n                                                    }\n                                                } else {\n                                                    remove_liquidity_one_coin(uint256,int128,uint256,bool);\n                                                }\n                                            } else {\n                                                remove_liquidity_one_coin(uint256,int128,uint256);\n                                            }\n                                        } else {\n                                            calc_withdraw_one_coin(uint256,int128);\n                                        }\n                                    }\n                                    MEM[512] = 8844;\n                                    MEM[320] = varg1;\n                                    MEM[352] = varg2;\n                                    MEM[384] = 0;\n                                    MEM[416] = 0;\n                                    MEM[448] = 0;\n                                    MEM[480] = 0;\n                                    require(_curve.code.size);\n                                    require(this ^ _curve);\n                                    v1 = _curve.A().gas(msg.gas);\n                                    require(v1);\n                                    require(_curve.code.size);\n                                    require(this ^ _curve);\n                                    v2 = _curve.fee().gas(msg.gas);\n                                    require(v2);\n                                    require(((MEM[864] << 2) / MEM[864] == 4) | !MEM[864]);\n                                    require(12);\n                                    require(((MEM[864] << 2) / 12 * 0x9502f900 / ((MEM[864] << 2) / 12) == 0x9502f900) | !((MEM[864] << 2) / 12));\n                                    require(0x2540be400);\n                                    require((MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400 >= (MEM[864] << 2) / 12);\n                                    MEM[736] = (MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400;\n                                    MEM[896] = 1;\n                                    MEM[928] = 0xe8d4a51000;\n                                    MEM[960] = 0xe8d4a51000;\n                                    MEM[992] = 1;\n                                    require(_token.code.size);\n                                    require(this ^ _token);\n                                    v3 = _token.totalSupply().gas(msg.gas);\n                                    require(v3);\n                                    MEM[1024] = MEM[1152];\n                                    while (0 >= 4) {\n                                        require(_curve.code.size);\n                                        require(this ^ _curve);\n                                        v4 = _curve.balances(0).gas(msg.gas);\n                                        require(v4);\n                                        require((MEM[1184] * MEM[1504] / MEM[1184] == MEM[1504]) | !MEM[1184]);\n                                        MEM[1184] = MEM[1184] * MEM[1504];\n                                        require(0 < 4);\n                                        require(0 < 4);\n                                        require((MEM[1184] * MEM[384] / MEM[1184] == MEM[384]) | !MEM[1184]);\n                                        require(0xde0b6b3a7640000);\n                                        require(0 < 4);\n                                        MEM[1184] = MEM[1184] * MEM[384] / 0xde0b6b3a7640000;\n                                        require(0 < 4);\n                                        require(0 + MEM[1184] >= 0);\n                                        MEM[1312] = 0 + MEM[1184];\n                                        MEM[1344] = 1;\n                                        if (4 == 1) {\n                                            while (352 < 1568) {\n                                            }\n                                            MEM[1600] = 0x7b724151;\n                                        }\n                                    }\n                                    revert();\n                                } else {\n                                    require((MEM[352] >= 0) & (MEM[352] < 4));\n                                    require(((MEM[320] << 2) / MEM[320] == 4) | !MEM[320]);\n                                    MEM[672] = 0;\n                                    while (1) {\n                                        if (!(0x0 ^ MEM[0x160])) {\n                                            // Unknown jump to Block 0x1498. Refer to 3-address code (TAC);\n                                        }\n                                        require(MEM[704] < 4);\n                                        require(0 + MEM[(MEM[704] << 5) + 384] >= 0);\n                                        MEM[608] = 0 + MEM[(MEM[704] << 5) + 384];\n                                        require((MEM[512] * MEM[512] / MEM[512] == MEM[512]) | !MEM[512]);\n                                        require(((MEM[(MEM[704] << 5) + 384] << 2) / MEM[(MEM[704] << 5) + 384] == 4) | !MEM[(MEM[704] << 5) + 384]);\n                                        require(MEM[(MEM[704] << 5) + 384] << 2);\n                                        MEM[576] = MEM[512] * MEM[512] / (MEM[(MEM[704] << 5) + 384] << 2);\n                                        MEM[704] = 1;\n                                        if (4 == 1) {\n                                            require((MEM[576] * MEM[512] / MEM[576] == MEM[512]) | !MEM[576]);\n                                            require(((MEM[320] << 2 << 2) / (MEM[320] << 2) == 4) | !(MEM[320] << 2));\n                                            require(MEM[320] << 2 << 2);\n                                            require(MEM[320] << 2);\n                                            require(MEM[608] + MEM[512] / (MEM[320] << 2) >= MEM[608]);\n                                            MEM[768] = 0;\n                                            while (!((MEM[512] * MEM[512] / MEM[512] == MEM[512]) | !MEM[512])) {\n                                                require(MEM[512] * MEM[512] + MEM[576] * MEM[512] / (MEM[320] << 2 << 2) >= MEM[512] * MEM[512]);\n                                                require((MEM[512] << 1 >> 1 == MEM[512]) | !0x2);\n                                                require((MEM[512] << 1) + (MEM[608] + MEM[512] / (MEM[320] << 2)) >= MEM[512] << 1);\n                                                require((MEM[512] << 1) + (MEM[608] + MEM[512] / (MEM[320] << 2)) >= MEM[512]);\n                                                require((MEM[512] << 1) + (MEM[608] + MEM[512] / (MEM[320] << 2)) - MEM[512]);\n                                                v5 = (MEM[512] * MEM[512] + MEM[576] * MEM[512] / (MEM[320] << 2 << 2)) / ((MEM[512] << 1) + (MEM[608] + MEM[512] / (MEM[320] << 2)) - MEM[512]);\n                                                if (v5 <= MEM[512]) {\n                                                    require(MEM[512] >= v5);\n                                                    if (!bool(MEM[512] - v5 > 1)) {\n                                                        // Unknown jump to Block 0x16fb. Refer to 3-address code (TAC);\n                                                    }\n                                                } else {\n                                                    require(v5 >= MEM[512]);\n                                                    if (!bool(v5 - MEM[512] > 1)) {\n                                                    }\n                                                }\n                                                MEM[832] = 1;\n                                                if (uint8.max != 1) {\n                                                    break;\n                                                }\n                                            }\n                                            revert();\n                                        }\n                                    }\n                                }\n                            }\n                            MEM[352] = 1;\n                            MEM[384] = 0xe8d4a51000;\n                            MEM[416] = 0xe8d4a51000;\n                            MEM[448] = 1;\n                            while (0 + MEM[352] < 0) {\n                                MEM[576] = 1;\n                                if (4 == 1) {\n                                    if (bool(0 + MEM[352])) {\n                                        MEM[640] = 0;\n                                        require(((MEM[704] << 2) / MEM[704] == 4) | !MEM[704]);\n                                        while (1) {\n                                            while (!((v6 * v6 / v6 == v6) | !v6)) {\n                                                require(((MEM[352] << 2) / MEM[352] == 4) | !MEM[352]);\n                                                require((MEM[352] << 2) + 1 >= MEM[352] << 2);\n                                                require((MEM[352] << 2) + 1);\n                                                v7 = v6 * v6 / ((MEM[352] << 2) + 1);\n                                                MEM[832] = 1;\n                                                if (4 == 1) {\n                                                    v8 = (MEM[704] << 2) * (0 + MEM[352]);\n                                                    require((v8 / (MEM[704] << 2) == 0 + MEM[352]) | !(MEM[704] << 2));\n                                                    require(((v7 << 2) / v7 == 4) | !v7);\n                                                    require(v8 + (v7 << 2) >= v8);\n                                                    require(((v8 + (v7 << 2)) * v6 / (v8 + (v7 << 2)) == v6) | !(v8 + (v7 << 2)));\n                                                    require(MEM[704] << 2 >= 1);\n                                                    require((((MEM[704] << 2) - 1) * v6 / ((MEM[704] << 2) - 1) == v6) | !((MEM[704] << 2) - 1));\n                                                    require((5 * v7 / 5 == v7) | !0x5);\n                                                    require(((MEM[704] << 2) - 1) * v6 + 5 * v7 >= ((MEM[704] << 2) - 1) * v6);\n                                                    require(((MEM[704] << 2) - 1) * v6 + 5 * v7);\n                                                    v9 = (v8 + (v7 << 2)) * v6 / (((MEM[704] << 2) - 1) * v6 + 5 * v7);\n                                                    if (v9 <= v6) {\n                                                        require(v6 >= v9);\n                                                        if (!bool(v6 - v9 > 1)) {\n                                                            // Unknown jump to Block 0x13ce0x0. Refer to 3-address code (TAC);\n                                                        }\n                                                    } else {\n                                                        require(v9 >= v6);\n                                                        if (!bool(v9 - v6 > 1)) {\n                                                        }\n                                                    }\n                                                    MEM[736] = 1;\n                                                    if (uint8.max != 1) {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        revert();\n                                    }\n                                }\n                            }\n                            revert();\n                        } else {\n                            MEM[608] = MEM[320];\n                            MEM[640] = MEM[352];\n                            MEM[672] = MEM[384];\n                            MEM[704] = MEM[416];\n                            while (0 >= 4) {\n                                require(0 < 4);\n                                require((MEM[608] * MEM[448] / MEM[608] == MEM[448]) | !MEM[608]);\n                                require(0xde0b6b3a7640000);\n                                require(0 < 4);\n                                MEM[608] = MEM[608] * MEM[448] / 0xde0b6b3a7640000;\n                                MEM[736] = 1;\n                                if (4 == 1) {\n                                    while (!bool(128 > 0)) {\n                                        MEM[768] = 96;\n                                    }\n                                }\n                            }\n                            revert();\n                        }\n                    } else {\n                        remove_liquidity_imbalance(uint256[4],uint256);\n                    }\n                } else {\n                    remove_liquidity(uint256,uint256[4]);\n                }\n            } else {\n                MEM[544] = 0;\n                MEM[576] = 0;\n                MEM[608] = 1;\n                MEM[640] = 0;\n                while (1) {\n                    if (!((MEM[480] < 0) | (0 == MEM[480]))) {\n                        // Unknown jump to Block 0x9480x0. Refer to 3-address code (TAC);\n                    }\n                    require(MEM[672] < 4);\n                    require((_coins[MEM[672]]).code.size);\n                    require(this ^ _coins[MEM[672]]);\n                    require((_coins[MEM[672]]).code.size);\n                    require(this ^ _coins[MEM[672]]);\n                    v10 = _coins[MEM[672]].balanceOf(this).gas(msg.gas);\n                    require(v10);\n                    v11 = _coins[MEM[672]].withdraw(MEM[864]).gas(msg.gas);\n                    require(v11);\n                    require(MEM[672] < 4);\n                    require((_underlying_coins[MEM[672]]).code.size);\n                    require(this ^ _underlying_coins[MEM[672]]);\n                    v12 = _underlying_coins[MEM[672]].balanceOf(this).gas(msg.gas);\n                    require(v12);\n                    require(MEM[672] < 4);\n                    require(MEM[1216] >= MEM[(MEM[672] << 5) + 352], Error(32, 26, 'Not enough coins withdrawn'));\n                    require(MEM[672] < 4);\n                    if (!MEM[(MEM[672] << 5) + 544]) {\n                        require((_underlying_coins[MEM[672]]).code.size);\n                        require(this ^ _underlying_coins[MEM[672]]);\n                        v13 = _underlying_coins[MEM[672]].transfer(MEM[320], MEM[1216]).gas(msg.gas);\n                        require(v13);\n                        require(MEM[1568]);\n                    } else {\n                        require((_underlying_coins[MEM[672]]).code.size);\n                        require(this ^ _underlying_coins[MEM[672]]);\n                        v14 = _underlying_coins[MEM[672]].transfer(MEM[320], MEM[1216]).gas(msg.gas);\n                        require(v14);\n                    }\n                    MEM[672] = 1;\n                    if (4 == 1) {\n                    }\n                }\n            }\n        } else {\n            add_liquidity(uint256[4],uint256);\n        }\n    }\n    revert();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2023.10.11 08:03 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _coins; // STORAGE[0x0]\nuint256[] _underlying_coins; // STORAGE[0x1]\nuint256 _curve; // STORAGE[0x2]\nuint256 _token; // STORAGE[0x3]\nuint256 _withdraw_donated_dust; // STORAGE[0xffffff]\n\n\n\nfunction add_liquidity(uint256[4] varg0) public payable { \n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    MEM[320] = 0;\n    MEM[352] = 0;\n    MEM[384] = 1;\n    MEM[416] = 0;\n    while (0 >= 4) {\n        require(0 < 4);\n        if (!MEM[320]) {\n            require(MEM[576] < 4);\n            require((_underlying_coins[MEM[576]]).code.size);\n            require(MEM[576] < 4);\n            require(this ^ _underlying_coins[MEM[576]]);\n            require(MEM[576] < 4);\n            v0 = _underlying_coins[MEM[576]].transferFrom(msg.sender, this, msg.data[4]).gas(msg.gas);\n            require(v0);\n            require(MEM[832]);\n        } else {\n            require(MEM[576] < 4);\n            require((_underlying_coins[MEM[576]]).code.size);\n            require(MEM[576] < 4);\n            require(this ^ _underlying_coins[MEM[576]]);\n            require(MEM[576] < 4);\n            v1 = _underlying_coins[MEM[576]].transferFrom(msg.sender, this, msg.data[4]).gas(msg.gas);\n            require(v1);\n        }\n        require(0 < 4);\n        require((_underlying_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _underlying_coins[0x0]);\n        require(0 < 4);\n        require(0 < 4);\n        v2 = _underlying_coins[0x0].approve(_coins[0], msg.data[4]).gas(msg.gas);\n        require(v2);\n        require(0 < 4);\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v3 = _coins[0x0].deposit(msg.data[4]).gas(msg.gas);\n        require(v3);\n        require(0 < 4);\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v4 = _coins[0x0].balanceOf(this).gas(msg.gas);\n        require(v4);\n        require(0 < 4);\n        MEM[448] = MEM[1504];\n        require(0 < 4);\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        require(0 < 4);\n        v5 = _coins[0x0].approve(_curve, MEM[448]).gas(msg.gas);\n        require(v5);\n        MEM[576] = 1;\n        if (4 == 1) {\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v6 = _curve.add_liquidity(0, 0, 0, 0, varg0).gas(msg.gas);\n            require(v6);\n            require(_token.code.size);\n            require(this ^ _token);\n            v7 = _token.balanceOf(this).gas(msg.gas);\n            require(v7);\n            require(_token.code.size);\n            require(this ^ _token);\n            v8 = _token.transfer(msg.sender, MEM[2144]).gas(msg.gas);\n            require(v8);\n            require(MEM[2336]);\n            _withdraw_donated_dust = 0;\n            exit;\n        }\n    }\n    revert();\n}\n\nfunction remove_liquidity(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4) public payable { \n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    require(_token.code.size);\n    require(this ^ _token);\n    v0 = _token.transferFrom(msg.sender, this, varg0).gas(msg.gas);\n    require(v0);\n    require(MEM[640]);\n    require(_curve.code.size);\n    require(this ^ _curve);\n    v1 = _curve.remove_liquidity(varg0, 0, 0, 0, 0).gas(msg.gas);\n    require(v1);\n    while (352 < 928) {\n    }\n    MEM[960] = 0xeb9ec691;\n    MEM[352] = varg1;\n    MEM[384] = varg2;\n    MEM[416] = varg3;\n    MEM[448] = varg4;\n    MEM[544] = 0;\n    MEM[576] = 0;\n    MEM[608] = 1;\n    MEM[640] = 0;\n    while (1) {\n        if (!0) {\n            // Unknown jump to Block 0x9480x28ab. Refer to 3-address code (TAC);\n        }\n        require(MEM[672] < 4);\n        require((_coins[MEM[672]]).code.size);\n        require(this ^ _coins[MEM[672]]);\n        require((_coins[MEM[672]]).code.size);\n        require(this ^ _coins[MEM[672]]);\n        v2 = _coins[MEM[672]].balanceOf(this).gas(msg.gas);\n        require(v2);\n        v3 = _coins[MEM[672]].withdraw(MEM[864]).gas(msg.gas);\n        require(v3);\n        require(MEM[672] < 4);\n        require((_underlying_coins[MEM[672]]).code.size);\n        require(this ^ _underlying_coins[MEM[672]]);\n        v4 = _underlying_coins[MEM[672]].balanceOf(this).gas(msg.gas);\n        require(v4);\n        require(MEM[672] < 4);\n        require(MEM[1216] >= MEM[(MEM[672] << 5) + 352], Error(32, 26, 'Not enough coins withdrawn'));\n        require(MEM[672] < 4);\n        if (!MEM[(MEM[672] << 5) + 544]) {\n            require((_underlying_coins[MEM[672]]).code.size);\n            require(this ^ _underlying_coins[MEM[672]]);\n            v5 = _underlying_coins[MEM[672]].transfer(msg.sender, MEM[1216]).gas(msg.gas);\n            require(v5);\n            require(MEM[1568]);\n        } else {\n            require((_underlying_coins[MEM[672]]).code.size);\n            require(this ^ _underlying_coins[MEM[672]]);\n            v6 = _underlying_coins[MEM[672]].transfer(msg.sender, MEM[1216]).gas(msg.gas);\n            require(v6);\n        }\n        MEM[672] = 1;\n        if (4 == 1) {\n        }\n    }\n}\n\nfunction remove_liquidity_imbalance(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4) public payable { \n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    MEM[320] = 0;\n    MEM[352] = 0;\n    MEM[384] = 1;\n    MEM[416] = 0;\n    while (0 >= 4) {\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n        require(v0);\n        require(0 < 4);\n        require((MEM[480] * 0xde0b6b3a7640000 / MEM[480] == 0xde0b6b3a7640000) | !MEM[480]);\n        require(MEM[768]);\n        require(0 < 4);\n        MEM[480] = MEM[480] * 0xde0b6b3a7640000 / MEM[768];\n        MEM[608] = 1;\n        if (4 == 1) {\n            require(_token.code.size);\n            require(this ^ _token);\n            v1 = _token.balanceOf(msg.sender).gas(msg.gas);\n            require(v1);\n            if (MEM[960] > varg4) {\n                MEM[800] = varg4;\n            }\n            require(_token.code.size);\n            require(this ^ _token);\n            v2 = _token.transferFrom(msg.sender, this, MEM[800]).gas(msg.gas);\n            require(v2);\n            require(MEM[1184]);\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v3 = _curve.remove_liquidity_imbalance(varg0, varg1, varg2, varg3, varg4).gas(msg.gas);\n            require(v3);\n            require(_token.code.size);\n            require(this ^ _token);\n            v4 = _token.balanceOf(this).gas(msg.gas);\n            require(v4);\n            require(_token.code.size);\n            require(this ^ _token);\n            v5 = _token.transfer(msg.sender, MEM[1600]).gas(msg.gas);\n            require(v5);\n            require(MEM[1792]);\n            while (352 < 1824) {\n            }\n            MEM[1856] = 0xeb9ec691;\n            MEM[352] = 0;\n            MEM[384] = 0;\n            MEM[416] = 0;\n            MEM[448] = 0;\n            MEM[544] = 0;\n            MEM[576] = 0;\n            MEM[608] = 1;\n            MEM[640] = 0;\n            while (1) {\n                if (!0) {\n                    // Unknown jump to Block 0x9480x28ae. Refer to 3-address code (TAC);\n                }\n                require(MEM[672] < 4);\n                require((_coins[MEM[672]]).code.size);\n                require(this ^ _coins[MEM[672]]);\n                require((_coins[MEM[672]]).code.size);\n                require(this ^ _coins[MEM[672]]);\n                v6 = _coins[MEM[672]].balanceOf(this).gas(msg.gas);\n                require(v6);\n                v7 = _coins[MEM[672]].withdraw(MEM[864]).gas(msg.gas);\n                require(v7);\n                require(MEM[672] < 4);\n                require((_underlying_coins[MEM[672]]).code.size);\n                require(this ^ _underlying_coins[MEM[672]]);\n                v8 = _underlying_coins[MEM[672]].balanceOf(this).gas(msg.gas);\n                require(v8);\n                require(MEM[672] < 4);\n                require(MEM[1216] >= MEM[(MEM[672] << 5) + 352], Error(32, 26, 'Not enough coins withdrawn', varg4));\n                require(MEM[672] < 4);\n                if (!MEM[(MEM[672] << 5) + 544]) {\n                    require((_underlying_coins[MEM[672]]).code.size);\n                    require(this ^ _underlying_coins[MEM[672]]);\n                    v9 = _underlying_coins[MEM[672]].transfer(msg.sender, MEM[1216]).gas(msg.gas);\n                    require(v9);\n                    require(MEM[1568]);\n                } else {\n                    require((_underlying_coins[MEM[672]]).code.size);\n                    require(this ^ _underlying_coins[MEM[672]]);\n                    v10 = _underlying_coins[MEM[672]].transfer(msg.sender, MEM[1216]).gas(msg.gas);\n                    require(v10);\n                }\n                MEM[672] = 1;\n                if (4 == 1) {\n                }\n            }\n        }\n    }\n    revert();\n}\n\nfunction calc_withdraw_one_coin(uint256 varg0, int128 varg1) public nonPayable { \n    require(varg1 <= MEM[64]);\n    require(varg1 >= MEM[96]);\n    while (0 >= 4) {\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n        require(v0);\n        require(0 < 4);\n        MEM[320] = MEM[576];\n        MEM[448] = 1;\n        if (4 == 1) {\n            MEM[640] = 0x800c1cbc;\n            MEM[512] = 8283;\n            MEM[320] = varg0;\n            MEM[352] = varg1;\n            MEM[384] = 0;\n            MEM[416] = 0;\n            MEM[448] = 0;\n            MEM[480] = 0;\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v1 = _curve.A().gas(msg.gas);\n            require(v1);\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v2 = _curve.fee().gas(msg.gas);\n            require(v2);\n            require(((MEM[864] << 2) / MEM[864] == 4) | !MEM[864]);\n            require(12);\n            require(((MEM[864] << 2) / 12 * 0x9502f900 / ((MEM[864] << 2) / 12) == 0x9502f900) | !((MEM[864] << 2) / 12));\n            require(0x2540be400);\n            require((MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400 >= (MEM[864] << 2) / 12);\n            MEM[736] = (MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400;\n            MEM[896] = 1;\n            MEM[928] = 0xe8d4a51000;\n            MEM[960] = 0xe8d4a51000;\n            MEM[992] = 1;\n            require(_token.code.size);\n            require(this ^ _token);\n            v3 = _token.totalSupply().gas(msg.gas);\n            require(v3);\n            MEM[1024] = MEM[1152];\n            while (0 >= 4) {\n                require(_curve.code.size);\n                require(this ^ _curve);\n                v4 = _curve.balances(0).gas(msg.gas);\n                require(v4);\n                require((MEM[1184] * MEM[1504] / MEM[1184] == MEM[1504]) | !MEM[1184]);\n                MEM[1184] = MEM[1184] * MEM[1504];\n                require(0 < 4);\n                require(0 < 4);\n                require((MEM[1184] * MEM[384] / MEM[1184] == MEM[384]) | !MEM[1184]);\n                require(0xde0b6b3a7640000);\n                require(0 < 4);\n                MEM[1184] = MEM[1184] * MEM[384] / 0xde0b6b3a7640000;\n                require(0 < 4);\n                require(0 + MEM[1184] >= 0);\n                MEM[1312] = 0 + MEM[1184];\n                MEM[1344] = 1;\n                if (4 == 1) {\n                    while (352 < 1568) {\n                    }\n                    MEM[1600] = 0x7b724151;\n                    MEM[352] = 1;\n                    MEM[384] = 0xe8d4a51000;\n                    MEM[416] = 0xe8d4a51000;\n                    MEM[448] = 1;\n                    while (0 + MEM[352] < 0) {\n                        MEM[576] = 1;\n                        if (4 == 1) {\n                            if (bool(0 + MEM[352])) {\n                                MEM[640] = 0;\n                                require(((MEM[704] << 2) / MEM[704] == 4) | !MEM[704]);\n                                while (1) {\n                                    while (!((v5 * v5 / v5 == v5) | !v5)) {\n                                        require(((MEM[352] << 2) / MEM[352] == 4) | !MEM[352]);\n                                        require((MEM[352] << 2) + 1 >= MEM[352] << 2);\n                                        require((MEM[352] << 2) + 1);\n                                        v6 = v5 * v5 / ((MEM[352] << 2) + 1);\n                                        MEM[832] = 1;\n                                        if (4 == 1) {\n                                            v7 = (MEM[704] << 2) * (0 + MEM[352]);\n                                            require((v7 / (MEM[704] << 2) == 0 + MEM[352]) | !(MEM[704] << 2));\n                                            require(((v6 << 2) / v6 == 4) | !v6);\n                                            require(v7 + (v6 << 2) >= v7);\n                                            require(((v7 + (v6 << 2)) * v5 / (v7 + (v6 << 2)) == v5) | !(v7 + (v6 << 2)));\n                                            require(MEM[704] << 2 >= 1);\n                                            require((((MEM[704] << 2) - 1) * v5 / ((MEM[704] << 2) - 1) == v5) | !((MEM[704] << 2) - 1));\n                                            require((5 * v6 / 5 == v6) | !0x5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6 >= ((MEM[704] << 2) - 1) * v5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            v8 = (v7 + (v6 << 2)) * v5 / (((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            if (v8 <= v5) {\n                                                require(v5 >= v8);\n                                                if (!bool(v5 - v8 > 1)) {\n                                                    // Unknown jump to Block 0x13ce0x28b1. Refer to 3-address code (TAC);\n                                                }\n                                            } else {\n                                                require(v8 >= v5);\n                                                if (!bool(v8 - v5 > 1)) {\n                                                }\n                                            }\n                                            MEM[736] = 1;\n                                            if (uint8.max != 1) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                revert();\n                            }\n                        }\n                    }\n                    revert();\n                }\n            }\n            revert();\n        }\n    }\n    revert();\n}\n\nfunction remove_liquidity_one_coin(uint256 varg0, int128 varg1) public payable { \n    MEM[320] = 0;\n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    require(varg1 <= MEM[64]);\n    require(varg1 >= MEM[96]);\n    MEM[480] = _token;\n    while (0 >= 4) {\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n        require(v0);\n        require(0 < 4);\n        MEM[352] = MEM[640];\n        MEM[512] = 1;\n        if (4 == 1) {\n            while (352 < 704) {\n            }\n            MEM[736] = 0x800c1cbc;\n            MEM[512] = 8844;\n            MEM[320] = varg0;\n            MEM[352] = varg1;\n            MEM[384] = 0;\n            MEM[416] = 0;\n            MEM[448] = 0;\n            MEM[480] = 0;\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v1 = _curve.A().gas(msg.gas);\n            require(v1);\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v2 = _curve.fee().gas(msg.gas);\n            require(v2);\n            require(((MEM[864] << 2) / MEM[864] == 4) | !MEM[864]);\n            require(12);\n            require(((MEM[864] << 2) / 12 * 0x9502f900 / ((MEM[864] << 2) / 12) == 0x9502f900) | !((MEM[864] << 2) / 12));\n            require(0x2540be400);\n            require((MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400 >= (MEM[864] << 2) / 12);\n            MEM[736] = (MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400;\n            MEM[896] = 1;\n            MEM[928] = 0xe8d4a51000;\n            MEM[960] = 0xe8d4a51000;\n            MEM[992] = 1;\n            require(_token.code.size);\n            require(this ^ _token);\n            v3 = _token.totalSupply().gas(msg.gas);\n            require(v3);\n            MEM[1024] = MEM[1152];\n            while (0 >= 4) {\n                require(_curve.code.size);\n                require(this ^ _curve);\n                v4 = _curve.balances(0).gas(msg.gas);\n                require(v4);\n                require((MEM[1184] * MEM[1504] / MEM[1184] == MEM[1504]) | !MEM[1184]);\n                MEM[1184] = MEM[1184] * MEM[1504];\n                require(0 < 4);\n                require(0 < 4);\n                require((MEM[1184] * MEM[384] / MEM[1184] == MEM[384]) | !MEM[1184]);\n                require(0xde0b6b3a7640000);\n                require(0 < 4);\n                MEM[1184] = MEM[1184] * MEM[384] / 0xde0b6b3a7640000;\n                require(0 < 4);\n                require(0 + MEM[1184] >= 0);\n                MEM[1312] = 0 + MEM[1184];\n                MEM[1344] = 1;\n                if (4 == 1) {\n                    while (352 < 1568) {\n                    }\n                    MEM[1600] = 0x7b724151;\n                    MEM[352] = 1;\n                    MEM[384] = 0xe8d4a51000;\n                    MEM[416] = 0xe8d4a51000;\n                    MEM[448] = 1;\n                    while (0 + MEM[352] < 0) {\n                        MEM[576] = 1;\n                        if (4 == 1) {\n                            if (bool(0 + MEM[352])) {\n                                MEM[640] = 0;\n                                require(((MEM[704] << 2) / MEM[704] == 4) | !MEM[704]);\n                                while (1) {\n                                    while (!((v5 * v5 / v5 == v5) | !v5)) {\n                                        require(((MEM[352] << 2) / MEM[352] == 4) | !MEM[352]);\n                                        require((MEM[352] << 2) + 1 >= MEM[352] << 2);\n                                        require((MEM[352] << 2) + 1);\n                                        v6 = v5 * v5 / ((MEM[352] << 2) + 1);\n                                        MEM[832] = 1;\n                                        if (4 == 1) {\n                                            v7 = (MEM[704] << 2) * (0 + MEM[352]);\n                                            require((v7 / (MEM[704] << 2) == 0 + MEM[352]) | !(MEM[704] << 2));\n                                            require(((v6 << 2) / v6 == 4) | !v6);\n                                            require(v7 + (v6 << 2) >= v7);\n                                            require(((v7 + (v6 << 2)) * v5 / (v7 + (v6 << 2)) == v5) | !(v7 + (v6 << 2)));\n                                            require(MEM[704] << 2 >= 1);\n                                            require((((MEM[704] << 2) - 1) * v5 / ((MEM[704] << 2) - 1) == v5) | !((MEM[704] << 2) - 1));\n                                            require((5 * v6 / 5 == v6) | !0x5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6 >= ((MEM[704] << 2) - 1) * v5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            v8 = (v7 + (v6 << 2)) * v5 / (((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            if (v8 <= v5) {\n                                                require(v5 >= v8);\n                                                if (!bool(v5 - v8 > 1)) {\n                                                    // Unknown jump to Block 0x13ce0x28b4. Refer to 3-address code (TAC);\n                                                }\n                                            } else {\n                                                require(v8 >= v5);\n                                                if (!bool(v8 - v5 > 1)) {\n                                                }\n                                            }\n                                            MEM[736] = 1;\n                                            if (uint8.max != 1) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                revert();\n                            }\n                        }\n                    }\n                    revert();\n                }\n            }\n            revert();\n        }\n    }\n    revert();\n}\n\nfunction remove_liquidity_one_coin(uint256 varg0, int128 varg1, uint256 varg2) public payable { \n    require(varg2 < 2);\n    CALLDATACOPY(320, 100, 32);\n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    require(varg1 <= MEM[64]);\n    require(varg1 >= MEM[96]);\n    MEM[480] = _token;\n    while (0 >= 4) {\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n        require(v0);\n        require(0 < 4);\n        MEM[352] = MEM[640];\n        MEM[512] = 1;\n        if (4 == 1) {\n            while (352 < 704) {\n            }\n            MEM[736] = 0x800c1cbc;\n            MEM[512] = 8844;\n            MEM[320] = varg0;\n            MEM[352] = varg1;\n            MEM[384] = 0;\n            MEM[416] = 0;\n            MEM[448] = 0;\n            MEM[480] = 0;\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v1 = _curve.A().gas(msg.gas);\n            require(v1);\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v2 = _curve.fee().gas(msg.gas);\n            require(v2);\n            require(((MEM[864] << 2) / MEM[864] == 4) | !MEM[864]);\n            require(12);\n            require(((MEM[864] << 2) / 12 * 0x9502f900 / ((MEM[864] << 2) / 12) == 0x9502f900) | !((MEM[864] << 2) / 12));\n            require(0x2540be400);\n            require((MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400 >= (MEM[864] << 2) / 12);\n            MEM[736] = (MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400;\n            MEM[896] = 1;\n            MEM[928] = 0xe8d4a51000;\n            MEM[960] = 0xe8d4a51000;\n            MEM[992] = 1;\n            require(_token.code.size);\n            require(this ^ _token);\n            v3 = _token.totalSupply().gas(msg.gas);\n            require(v3);\n            MEM[1024] = MEM[1152];\n            while (0 >= 4) {\n                require(_curve.code.size);\n                require(this ^ _curve);\n                v4 = _curve.balances(0).gas(msg.gas);\n                require(v4);\n                require((MEM[1184] * MEM[1504] / MEM[1184] == MEM[1504]) | !MEM[1184]);\n                MEM[1184] = MEM[1184] * MEM[1504];\n                require(0 < 4);\n                require(0 < 4);\n                require((MEM[1184] * MEM[384] / MEM[1184] == MEM[384]) | !MEM[1184]);\n                require(0xde0b6b3a7640000);\n                require(0 < 4);\n                MEM[1184] = MEM[1184] * MEM[384] / 0xde0b6b3a7640000;\n                require(0 < 4);\n                require(0 + MEM[1184] >= 0);\n                MEM[1312] = 0 + MEM[1184];\n                MEM[1344] = 1;\n                if (4 == 1) {\n                    while (352 < 1568) {\n                    }\n                    MEM[1600] = 0x7b724151;\n                    MEM[352] = 1;\n                    MEM[384] = 0xe8d4a51000;\n                    MEM[416] = 0xe8d4a51000;\n                    MEM[448] = 1;\n                    while (0 + MEM[352] < 0) {\n                        MEM[576] = 1;\n                        if (4 == 1) {\n                            if (bool(0 + MEM[352])) {\n                                MEM[640] = 0;\n                                require(((MEM[704] << 2) / MEM[704] == 4) | !MEM[704]);\n                                while (1) {\n                                    while (!((v5 * v5 / v5 == v5) | !v5)) {\n                                        require(((MEM[352] << 2) / MEM[352] == 4) | !MEM[352]);\n                                        require((MEM[352] << 2) + 1 >= MEM[352] << 2);\n                                        require((MEM[352] << 2) + 1);\n                                        v6 = v5 * v5 / ((MEM[352] << 2) + 1);\n                                        MEM[832] = 1;\n                                        if (4 == 1) {\n                                            v7 = (MEM[704] << 2) * (0 + MEM[352]);\n                                            require((v7 / (MEM[704] << 2) == 0 + MEM[352]) | !(MEM[704] << 2));\n                                            require(((v6 << 2) / v6 == 4) | !v6);\n                                            require(v7 + (v6 << 2) >= v7);\n                                            require(((v7 + (v6 << 2)) * v5 / (v7 + (v6 << 2)) == v5) | !(v7 + (v6 << 2)));\n                                            require(MEM[704] << 2 >= 1);\n                                            require((((MEM[704] << 2) - 1) * v5 / ((MEM[704] << 2) - 1) == v5) | !((MEM[704] << 2) - 1));\n                                            require((5 * v6 / 5 == v6) | !0x5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6 >= ((MEM[704] << 2) - 1) * v5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            v8 = (v7 + (v6 << 2)) * v5 / (((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            if (v8 <= v5) {\n                                                require(v5 >= v8);\n                                                if (!bool(v5 - v8 > 1)) {\n                                                    // Unknown jump to Block 0x13ce0x28b7. Refer to 3-address code (TAC);\n                                                }\n                                            } else {\n                                                require(v8 >= v5);\n                                                if (!bool(v8 - v5 > 1)) {\n                                                }\n                                            }\n                                            MEM[736] = 1;\n                                            if (uint8.max != 1) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                revert();\n                            }\n                        }\n                    }\n                    revert();\n                }\n            }\n            revert();\n        }\n    }\n    revert();\n}\n\nfunction withdraw_donated_dust() public payable { \n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    require(_curve.code.size);\n    require(this ^ _curve);\n    v0 = _curve.owner().gas(msg.gas);\n    require(v0);\n    require(msg.sender == MEM[448]);\n    require(_token.code.size);\n    require(this ^ _token);\n    require(_token.code.size);\n    require(this ^ _token);\n    v1 = _token.balanceOf(this).gas(msg.gas);\n    require(v1);\n    v2 = _token.transfer(MEM[448], MEM[640]).gas(msg.gas);\n    require(v2);\n    require(MEM[832]);\n    _withdraw_donated_dust = 0;\n}\n\nfunction coins(int128 varg0) public nonPayable { \n    require(varg0 <= MEM[64]);\n    require(varg0 >= MEM[96]);\n    require(varg0 < 4);\n    return _coins[varg0];\n}\n\nfunction underlying_coins(int128 varg0) public nonPayable { \n    require(varg0 <= MEM[64]);\n    require(varg0 >= MEM[96]);\n    require(varg0 < 4);\n    return _underlying_coins[varg0];\n}\n\nfunction curve() public nonPayable { \n    return _curve;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector, uint256 varg1, uint256 varg2) public payable { \n    if (msg.data.length >= 4) {\n        MEM[32] = 0x10000000000000000000000000000000000000000;\n        MEM[128] = 0x12a05f1fffffffffffffffffffffffffdabf41c00;\n        MEM[160] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n        if (function_selector != 0x29b2f34) {\n            if (!0) {\n                if (function_selector != 0x7d49d875) {\n                    if (function_selector != 0x18a7bd76) {\n                        if (!0) {\n                            if (!0) {\n                                if (!0) {\n                                    if (!0) {\n                                        if (function_selector != 0xcc2b27d7) {\n                                            if (function_selector != 0x1a4d01d2) {\n                                                if (function_selector != 0x517a55a3) {\n                                                    if (!0) {\n                                                        if (function_selector != 0x6c956a54) {\n                                                            if (function_selector != 0x23746eb8) {\n                                                                if (function_selector != 0xb739953e) {\n                                                                    if (function_selector != 0x7165485d) {\n                                                                        if (function_selector == 0xfc0c546a) {\n                                                                            token();\n                                                                        }\n                                                                    } else {\n                                                                        curve();\n                                                                    }\n                                                                } else {\n                                                                    underlying_coins(int128);\n                                                                }\n                                                            } else {\n                                                                coins(int128);\n                                                            }\n                                                        } else {\n                                                            withdraw_donated_dust();\n                                                        }\n                                                    } else {\n                                                        require(!_withdraw_donated_dust);\n                                                        _withdraw_donated_dust = 1;\n                                                        require(!msg.value);\n                                                        require(varg2 <= MEM[64]);\n                                                        require(varg2 >= int128.min);\n                                                        MEM[480] = _token;\n                                                        while (0 >= 4) {\n                                                            require((_coins[0]).code.size);\n                                                            require(0 < 4);\n                                                            require(this ^ _coins[0x0]);\n                                                            require(0 < 4);\n                                                            v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n                                                            require(v0);\n                                                            require(0 < 4);\n                                                            MEM[352] = MEM[640];\n                                                            MEM[512] = 1;\n                                                            if (4 == 1) {\n                                                                while (352 < 704) {\n                                                                }\n                                                                MEM[736] = 0x800c1cbc;\n                                                            }\n                                                        }\n                                                        revert();\n                                                    }\n                                                } else {\n                                                    remove_liquidity_one_coin(uint256,int128,uint256,bool);\n                                                }\n                                            } else {\n                                                remove_liquidity_one_coin(uint256,int128,uint256);\n                                            }\n                                        } else {\n                                            calc_withdraw_one_coin(uint256,int128);\n                                        }\n                                    }\n                                    MEM[512] = 8844;\n                                    MEM[320] = varg1;\n                                    MEM[352] = varg2;\n                                    MEM[384] = 0;\n                                    MEM[416] = 0;\n                                    MEM[448] = 0;\n                                    MEM[480] = 0;\n                                    require(_curve.code.size);\n                                    require(this ^ _curve);\n                                    v1 = _curve.A().gas(msg.gas);\n                                    require(v1);\n                                    require(_curve.code.size);\n                                    require(this ^ _curve);\n                                    v2 = _curve.fee().gas(msg.gas);\n                                    require(v2);\n                                    require(((MEM[864] << 2) / MEM[864] == 4) | !MEM[864]);\n                                    require(12);\n                                    require(((MEM[864] << 2) / 12 * 0x9502f900 / ((MEM[864] << 2) / 12) == 0x9502f900) | !((MEM[864] << 2) / 12));\n                                    require(0x2540be400);\n                                    require((MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400 >= (MEM[864] << 2) / 12);\n                                    MEM[736] = (MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400;\n                                    MEM[896] = 1;\n                                    MEM[928] = 0xe8d4a51000;\n                                    MEM[960] = 0xe8d4a51000;\n                                    MEM[992] = 1;\n                                    require(_token.code.size);\n                                    require(this ^ _token);\n                                    v3 = _token.totalSupply().gas(msg.gas);\n                                    require(v3);\n                                    MEM[1024] = MEM[1152];\n                                    while (0 >= 4) {\n                                        require(_curve.code.size);\n                                        require(this ^ _curve);\n                                        v4 = _curve.balances(0).gas(msg.gas);\n                                        require(v4);\n                                        require((MEM[1184] * MEM[1504] / MEM[1184] == MEM[1504]) | !MEM[1184]);\n                                        MEM[1184] = MEM[1184] * MEM[1504];\n                                        require(0 < 4);\n                                        require(0 < 4);\n                                        require((MEM[1184] * MEM[384] / MEM[1184] == MEM[384]) | !MEM[1184]);\n                                        require(0xde0b6b3a7640000);\n                                        require(0 < 4);\n                                        MEM[1184] = MEM[1184] * MEM[384] / 0xde0b6b3a7640000;\n                                        require(0 < 4);\n                                        require(0 + MEM[1184] >= 0);\n                                        MEM[1312] = 0 + MEM[1184];\n                                        MEM[1344] = 1;\n                                        if (4 == 1) {\n                                            while (352 < 1568) {\n                                            }\n                                            MEM[1600] = 0x7b724151;\n                                        }\n                                    }\n                                    revert();\n                                } else {\n                                    require((MEM[352] >= 0) & (MEM[352] < 4));\n                                    require(((MEM[320] << 2) / MEM[320] == 4) | !MEM[320]);\n                                    MEM[672] = 0;\n                                    while (1) {\n                                        if (!(0x0 ^ MEM[0x160])) {\n                                            // Unknown jump to Block 0x1498. Refer to 3-address code (TAC);\n                                        }\n                                        require(MEM[704] < 4);\n                                        require(0 + MEM[(MEM[704] << 5) + 384] >= 0);\n                                        MEM[608] = 0 + MEM[(MEM[704] << 5) + 384];\n                                        require((MEM[512] * MEM[512] / MEM[512] == MEM[512]) | !MEM[512]);\n                                        require(((MEM[(MEM[704] << 5) + 384] << 2) / MEM[(MEM[704] << 5) + 384] == 4) | !MEM[(MEM[704] << 5) + 384]);\n                                        require(MEM[(MEM[704] << 5) + 384] << 2);\n                                        MEM[576] = MEM[512] * MEM[512] / (MEM[(MEM[704] << 5) + 384] << 2);\n                                        MEM[704] = 1;\n                                        if (4 == 1) {\n                                            require((MEM[576] * MEM[512] / MEM[576] == MEM[512]) | !MEM[576]);\n                                            require(((MEM[320] << 2 << 2) / (MEM[320] << 2) == 4) | !(MEM[320] << 2));\n                                            require(MEM[320] << 2 << 2);\n                                            require(MEM[320] << 2);\n                                            require(MEM[608] + MEM[512] / (MEM[320] << 2) >= MEM[608]);\n                                            MEM[768] = 0;\n                                            while (!((MEM[512] * MEM[512] / MEM[512] == MEM[512]) | !MEM[512])) {\n                                                require(MEM[512] * MEM[512] + MEM[576] * MEM[512] / (MEM[320] << 2 << 2) >= MEM[512] * MEM[512]);\n                                                require((MEM[512] << 1 >> 1 == MEM[512]) | !0x2);\n                                                require((MEM[512] << 1) + (MEM[608] + MEM[512] / (MEM[320] << 2)) >= MEM[512] << 1);\n                                                require((MEM[512] << 1) + (MEM[608] + MEM[512] / (MEM[320] << 2)) >= MEM[512]);\n                                                require((MEM[512] << 1) + (MEM[608] + MEM[512] / (MEM[320] << 2)) - MEM[512]);\n                                                v5 = (MEM[512] * MEM[512] + MEM[576] * MEM[512] / (MEM[320] << 2 << 2)) / ((MEM[512] << 1) + (MEM[608] + MEM[512] / (MEM[320] << 2)) - MEM[512]);\n                                                if (v5 <= MEM[512]) {\n                                                    require(MEM[512] >= v5);\n                                                    if (!bool(MEM[512] - v5 > 1)) {\n                                                        // Unknown jump to Block 0x16fb. Refer to 3-address code (TAC);\n                                                    }\n                                                } else {\n                                                    require(v5 >= MEM[512]);\n                                                    if (!bool(v5 - MEM[512] > 1)) {\n                                                    }\n                                                }\n                                                MEM[832] = 1;\n                                                if (uint8.max != 1) {\n                                                    break;\n                                                }\n                                            }\n                                            revert();\n                                        }\n                                    }\n                                }\n                            }\n                            MEM[352] = 1;\n                            MEM[384] = 0xe8d4a51000;\n                            MEM[416] = 0xe8d4a51000;\n                            MEM[448] = 1;\n                            while (0 + MEM[352] < 0) {\n                                MEM[576] = 1;\n                                if (4 == 1) {\n                                    if (bool(0 + MEM[352])) {\n                                        MEM[640] = 0;\n                                        require(((MEM[704] << 2) / MEM[704] == 4) | !MEM[704]);\n                                        while (1) {\n                                            while (!((v6 * v6 / v6 == v6) | !v6)) {\n                                                require(((MEM[352] << 2) / MEM[352] == 4) | !MEM[352]);\n                                                require((MEM[352] << 2) + 1 >= MEM[352] << 2);\n                                                require((MEM[352] << 2) + 1);\n                                                v7 = v6 * v6 / ((MEM[352] << 2) + 1);\n                                                MEM[832] = 1;\n                                                if (4 == 1) {\n                                                    v8 = (MEM[704] << 2) * (0 + MEM[352]);\n                                                    require((v8 / (MEM[704] << 2) == 0 + MEM[352]) | !(MEM[704] << 2));\n                                                    require(((v7 << 2) / v7 == 4) | !v7);\n                                                    require(v8 + (v7 << 2) >= v8);\n                                                    require(((v8 + (v7 << 2)) * v6 / (v8 + (v7 << 2)) == v6) | !(v8 + (v7 << 2)));\n                                                    require(MEM[704] << 2 >= 1);\n                                                    require((((MEM[704] << 2) - 1) * v6 / ((MEM[704] << 2) - 1) == v6) | !((MEM[704] << 2) - 1));\n                                                    require((5 * v7 / 5 == v7) | !0x5);\n                                                    require(((MEM[704] << 2) - 1) * v6 + 5 * v7 >= ((MEM[704] << 2) - 1) * v6);\n                                                    require(((MEM[704] << 2) - 1) * v6 + 5 * v7);\n                                                    v9 = (v8 + (v7 << 2)) * v6 / (((MEM[704] << 2) - 1) * v6 + 5 * v7);\n                                                    if (v9 <= v6) {\n                                                        require(v6 >= v9);\n                                                        if (!bool(v6 - v9 > 1)) {\n                                                            // Unknown jump to Block 0x13ce0x0. Refer to 3-address code (TAC);\n                                                        }\n                                                    } else {\n                                                        require(v9 >= v6);\n                                                        if (!bool(v9 - v6 > 1)) {\n                                                        }\n                                                    }\n                                                    MEM[736] = 1;\n                                                    if (uint8.max != 1) {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        revert();\n                                    }\n                                }\n                            }\n                            revert();\n                        } else {\n                            MEM[608] = MEM[320];\n                            MEM[640] = MEM[352];\n                            MEM[672] = MEM[384];\n                            MEM[704] = MEM[416];\n                            while (0 >= 4) {\n                                require(0 < 4);\n                                require((MEM[608] * MEM[448] / MEM[608] == MEM[448]) | !MEM[608]);\n                                require(0xde0b6b3a7640000);\n                                require(0 < 4);\n                                MEM[608] = MEM[608] * MEM[448] / 0xde0b6b3a7640000;\n                                MEM[736] = 1;\n                                if (4 == 1) {\n                                    while (!bool(128 > 0)) {\n                                        MEM[768] = 96;\n                                    }\n                                }\n                            }\n                            revert();\n                        }\n                    } else {\n                        remove_liquidity_imbalance(uint256[4],uint256);\n                    }\n                } else {\n                    remove_liquidity(uint256,uint256[4]);\n                }\n            } else {\n                MEM[544] = 0;\n                MEM[576] = 0;\n                MEM[608] = 1;\n                MEM[640] = 0;\n                while (1) {\n                    if (!((MEM[480] < 0) | (0 == MEM[480]))) {\n                        // Unknown jump to Block 0x9480x0. Refer to 3-address code (TAC);\n                    }\n                    require(MEM[672] < 4);\n                    require((_coins[MEM[672]]).code.size);\n                    require(this ^ _coins[MEM[672]]);\n                    require((_coins[MEM[672]]).code.size);\n                    require(this ^ _coins[MEM[672]]);\n                    v10 = _coins[MEM[672]].balanceOf(this).gas(msg.gas);\n                    require(v10);\n                    v11 = _coins[MEM[672]].withdraw(MEM[864]).gas(msg.gas);\n                    require(v11);\n                    require(MEM[672] < 4);\n                    require((_underlying_coins[MEM[672]]).code.size);\n                    require(this ^ _underlying_coins[MEM[672]]);\n                    v12 = _underlying_coins[MEM[672]].balanceOf(this).gas(msg.gas);\n                    require(v12);\n                    require(MEM[672] < 4);\n                    require(MEM[1216] >= MEM[(MEM[672] << 5) + 352], Error(32, 26, 'Not enough coins withdrawn'));\n                    require(MEM[672] < 4);\n                    if (!MEM[(MEM[672] << 5) + 544]) {\n                        require((_underlying_coins[MEM[672]]).code.size);\n                        require(this ^ _underlying_coins[MEM[672]]);\n                        v13 = _underlying_coins[MEM[672]].transfer(MEM[320], MEM[1216]).gas(msg.gas);\n                        require(v13);\n                        require(MEM[1568]);\n                    } else {\n                        require((_underlying_coins[MEM[672]]).code.size);\n                        require(this ^ _underlying_coins[MEM[672]]);\n                        v14 = _underlying_coins[MEM[672]].transfer(MEM[320], MEM[1216]).gas(msg.gas);\n                        require(v14);\n                    }\n                    MEM[672] = 1;\n                    if (4 == 1) {\n                    }\n                }\n            }\n        } else {\n            add_liquidity(uint256[4],uint256);\n        }\n    }\n    revert();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2023.10.11 08:03 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _coins; // STORAGE[0x0]\nuint256[] _underlying_coins; // STORAGE[0x1]\nuint256 _curve; // STORAGE[0x2]\nuint256 _token; // STORAGE[0x3]\nuint256 _withdraw_donated_dust; // STORAGE[0xffffff]\n\n\n\nfunction add_liquidity(uint256[4] varg0) public payable { \n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    MEM[320] = 0;\n    MEM[352] = 0;\n    MEM[384] = 1;\n    MEM[416] = 0;\n    while (0 >= 4) {\n        require(0 < 4);\n        if (!MEM[320]) {\n            require(MEM[576] < 4);\n            require((_underlying_coins[MEM[576]]).code.size);\n            require(MEM[576] < 4);\n            require(this ^ _underlying_coins[MEM[576]]);\n            require(MEM[576] < 4);\n            v0 = _underlying_coins[MEM[576]].transferFrom(msg.sender, this, msg.data[4]).gas(msg.gas);\n            require(v0);\n            require(MEM[832]);\n        } else {\n            require(MEM[576] < 4);\n            require((_underlying_coins[MEM[576]]).code.size);\n            require(MEM[576] < 4);\n            require(this ^ _underlying_coins[MEM[576]]);\n            require(MEM[576] < 4);\n            v1 = _underlying_coins[MEM[576]].transferFrom(msg.sender, this, msg.data[4]).gas(msg.gas);\n            require(v1);\n        }\n        require(0 < 4);\n        require((_underlying_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _underlying_coins[0x0]);\n        require(0 < 4);\n        require(0 < 4);\n        v2 = _underlying_coins[0x0].approve(_coins[0], msg.data[4]).gas(msg.gas);\n        require(v2);\n        require(0 < 4);\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v3 = _coins[0x0].deposit(msg.data[4]).gas(msg.gas);\n        require(v3);\n        require(0 < 4);\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v4 = _coins[0x0].balanceOf(this).gas(msg.gas);\n        require(v4);\n        require(0 < 4);\n        MEM[448] = MEM[1504];\n        require(0 < 4);\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        require(0 < 4);\n        v5 = _coins[0x0].approve(_curve, MEM[448]).gas(msg.gas);\n        require(v5);\n        MEM[576] = 1;\n        if (4 == 1) {\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v6 = _curve.add_liquidity(0, 0, 0, 0, varg0).gas(msg.gas);\n            require(v6);\n            require(_token.code.size);\n            require(this ^ _token);\n            v7 = _token.balanceOf(this).gas(msg.gas);\n            require(v7);\n            require(_token.code.size);\n            require(this ^ _token);\n            v8 = _token.transfer(msg.sender, MEM[2144]).gas(msg.gas);\n            require(v8);\n            require(MEM[2336]);\n            _withdraw_donated_dust = 0;\n            exit;\n        }\n    }\n    revert();\n}\n\nfunction remove_liquidity(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4) public payable { \n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    require(_token.code.size);\n    require(this ^ _token);\n    v0 = _token.transferFrom(msg.sender, this, varg0).gas(msg.gas);\n    require(v0);\n    require(MEM[640]);\n    require(_curve.code.size);\n    require(this ^ _curve);\n    v1 = _curve.remove_liquidity(varg0, 0, 0, 0, 0).gas(msg.gas);\n    require(v1);\n    while (352 < 928) {\n    }\n    MEM[960] = 0xeb9ec691;\n    MEM[352] = varg1;\n    MEM[384] = varg2;\n    MEM[416] = varg3;\n    MEM[448] = varg4;\n    MEM[544] = 0;\n    MEM[576] = 0;\n    MEM[608] = 1;\n    MEM[640] = 0;\n    while (1) {\n        if (!0) {\n            // Unknown jump to Block 0x9480x28ab. Refer to 3-address code (TAC);\n        }\n        require(MEM[672] < 4);\n        require((_coins[MEM[672]]).code.size);\n        require(this ^ _coins[MEM[672]]);\n        require((_coins[MEM[672]]).code.size);\n        require(this ^ _coins[MEM[672]]);\n        v2 = _coins[MEM[672]].balanceOf(this).gas(msg.gas);\n        require(v2);\n        v3 = _coins[MEM[672]].withdraw(MEM[864]).gas(msg.gas);\n        require(v3);\n        require(MEM[672] < 4);\n        require((_underlying_coins[MEM[672]]).code.size);\n        require(this ^ _underlying_coins[MEM[672]]);\n        v4 = _underlying_coins[MEM[672]].balanceOf(this).gas(msg.gas);\n        require(v4);\n        require(MEM[672] < 4);\n        require(MEM[1216] >= MEM[(MEM[672] << 5) + 352], Error(32, 26, 'Not enough coins withdrawn'));\n        require(MEM[672] < 4);\n        if (!MEM[(MEM[672] << 5) + 544]) {\n            require((_underlying_coins[MEM[672]]).code.size);\n            require(this ^ _underlying_coins[MEM[672]]);\n            v5 = _underlying_coins[MEM[672]].transfer(msg.sender, MEM[1216]).gas(msg.gas);\n            require(v5);\n            require(MEM[1568]);\n        } else {\n            require((_underlying_coins[MEM[672]]).code.size);\n            require(this ^ _underlying_coins[MEM[672]]);\n            v6 = _underlying_coins[MEM[672]].transfer(msg.sender, MEM[1216]).gas(msg.gas);\n            require(v6);\n        }\n        MEM[672] = 1;\n        if (4 == 1) {\n        }\n    }\n}\n\nfunction remove_liquidity_imbalance(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4) public payable { \n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    MEM[320] = 0;\n    MEM[352] = 0;\n    MEM[384] = 1;\n    MEM[416] = 0;\n    while (0 >= 4) {\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n        require(v0);\n        require(0 < 4);\n        require((MEM[480] * 0xde0b6b3a7640000 / MEM[480] == 0xde0b6b3a7640000) | !MEM[480]);\n        require(MEM[768]);\n        require(0 < 4);\n        MEM[480] = MEM[480] * 0xde0b6b3a7640000 / MEM[768];\n        MEM[608] = 1;\n        if (4 == 1) {\n            require(_token.code.size);\n            require(this ^ _token);\n            v1 = _token.balanceOf(msg.sender).gas(msg.gas);\n            require(v1);\n            if (MEM[960] > varg4) {\n                MEM[800] = varg4;\n            }\n            require(_token.code.size);\n            require(this ^ _token);\n            v2 = _token.transferFrom(msg.sender, this, MEM[800]).gas(msg.gas);\n            require(v2);\n            require(MEM[1184]);\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v3 = _curve.remove_liquidity_imbalance(varg0, varg1, varg2, varg3, varg4).gas(msg.gas);\n            require(v3);\n            require(_token.code.size);\n            require(this ^ _token);\n            v4 = _token.balanceOf(this).gas(msg.gas);\n            require(v4);\n            require(_token.code.size);\n            require(this ^ _token);\n            v5 = _token.transfer(msg.sender, MEM[1600]).gas(msg.gas);\n            require(v5);\n            require(MEM[1792]);\n            while (352 < 1824) {\n            }\n            MEM[1856] = 0xeb9ec691;\n            MEM[352] = 0;\n            MEM[384] = 0;\n            MEM[416] = 0;\n            MEM[448] = 0;\n            MEM[544] = 0;\n            MEM[576] = 0;\n            MEM[608] = 1;\n            MEM[640] = 0;\n            while (1) {\n                if (!0) {\n                    // Unknown jump to Block 0x9480x28ae. Refer to 3-address code (TAC);\n                }\n                require(MEM[672] < 4);\n                require((_coins[MEM[672]]).code.size);\n                require(this ^ _coins[MEM[672]]);\n                require((_coins[MEM[672]]).code.size);\n                require(this ^ _coins[MEM[672]]);\n                v6 = _coins[MEM[672]].balanceOf(this).gas(msg.gas);\n                require(v6);\n                v7 = _coins[MEM[672]].withdraw(MEM[864]).gas(msg.gas);\n                require(v7);\n                require(MEM[672] < 4);\n                require((_underlying_coins[MEM[672]]).code.size);\n                require(this ^ _underlying_coins[MEM[672]]);\n                v8 = _underlying_coins[MEM[672]].balanceOf(this).gas(msg.gas);\n                require(v8);\n                require(MEM[672] < 4);\n                require(MEM[1216] >= MEM[(MEM[672] << 5) + 352], Error(32, 26, 'Not enough coins withdrawn', varg4));\n                require(MEM[672] < 4);\n                if (!MEM[(MEM[672] << 5) + 544]) {\n                    require((_underlying_coins[MEM[672]]).code.size);\n                    require(this ^ _underlying_coins[MEM[672]]);\n                    v9 = _underlying_coins[MEM[672]].transfer(msg.sender, MEM[1216]).gas(msg.gas);\n                    require(v9);\n                    require(MEM[1568]);\n                } else {\n                    require((_underlying_coins[MEM[672]]).code.size);\n                    require(this ^ _underlying_coins[MEM[672]]);\n                    v10 = _underlying_coins[MEM[672]].transfer(msg.sender, MEM[1216]).gas(msg.gas);\n                    require(v10);\n                }\n                MEM[672] = 1;\n                if (4 == 1) {\n                }\n            }\n        }\n    }\n    revert();\n}\n\nfunction calc_withdraw_one_coin(uint256 varg0, int128 varg1) public nonPayable { \n    require(varg1 <= MEM[64]);\n    require(varg1 >= MEM[96]);\n    while (0 >= 4) {\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n        require(v0);\n        require(0 < 4);\n        MEM[320] = MEM[576];\n        MEM[448] = 1;\n        if (4 == 1) {\n            MEM[640] = 0x800c1cbc;\n            MEM[512] = 8283;\n            MEM[320] = varg0;\n            MEM[352] = varg1;\n            MEM[384] = 0;\n            MEM[416] = 0;\n            MEM[448] = 0;\n            MEM[480] = 0;\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v1 = _curve.A().gas(msg.gas);\n            require(v1);\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v2 = _curve.fee().gas(msg.gas);\n            require(v2);\n            require(((MEM[864] << 2) / MEM[864] == 4) | !MEM[864]);\n            require(12);\n            require(((MEM[864] << 2) / 12 * 0x9502f900 / ((MEM[864] << 2) / 12) == 0x9502f900) | !((MEM[864] << 2) / 12));\n            require(0x2540be400);\n            require((MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400 >= (MEM[864] << 2) / 12);\n            MEM[736] = (MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400;\n            MEM[896] = 1;\n            MEM[928] = 0xe8d4a51000;\n            MEM[960] = 0xe8d4a51000;\n            MEM[992] = 1;\n            require(_token.code.size);\n            require(this ^ _token);\n            v3 = _token.totalSupply().gas(msg.gas);\n            require(v3);\n            MEM[1024] = MEM[1152];\n            while (0 >= 4) {\n                require(_curve.code.size);\n                require(this ^ _curve);\n                v4 = _curve.balances(0).gas(msg.gas);\n                require(v4);\n                require((MEM[1184] * MEM[1504] / MEM[1184] == MEM[1504]) | !MEM[1184]);\n                MEM[1184] = MEM[1184] * MEM[1504];\n                require(0 < 4);\n                require(0 < 4);\n                require((MEM[1184] * MEM[384] / MEM[1184] == MEM[384]) | !MEM[1184]);\n                require(0xde0b6b3a7640000);\n                require(0 < 4);\n                MEM[1184] = MEM[1184] * MEM[384] / 0xde0b6b3a7640000;\n                require(0 < 4);\n                require(0 + MEM[1184] >= 0);\n                MEM[1312] = 0 + MEM[1184];\n                MEM[1344] = 1;\n                if (4 == 1) {\n                    while (352 < 1568) {\n                    }\n                    MEM[1600] = 0x7b724151;\n                    MEM[352] = 1;\n                    MEM[384] = 0xe8d4a51000;\n                    MEM[416] = 0xe8d4a51000;\n                    MEM[448] = 1;\n                    while (0 + MEM[352] < 0) {\n                        MEM[576] = 1;\n                        if (4 == 1) {\n                            if (bool(0 + MEM[352])) {\n                                MEM[640] = 0;\n                                require(((MEM[704] << 2) / MEM[704] == 4) | !MEM[704]);\n                                while (1) {\n                                    while (!((v5 * v5 / v5 == v5) | !v5)) {\n                                        require(((MEM[352] << 2) / MEM[352] == 4) | !MEM[352]);\n                                        require((MEM[352] << 2) + 1 >= MEM[352] << 2);\n                                        require((MEM[352] << 2) + 1);\n                                        v6 = v5 * v5 / ((MEM[352] << 2) + 1);\n                                        MEM[832] = 1;\n                                        if (4 == 1) {\n                                            v7 = (MEM[704] << 2) * (0 + MEM[352]);\n                                            require((v7 / (MEM[704] << 2) == 0 + MEM[352]) | !(MEM[704] << 2));\n                                            require(((v6 << 2) / v6 == 4) | !v6);\n                                            require(v7 + (v6 << 2) >= v7);\n                                            require(((v7 + (v6 << 2)) * v5 / (v7 + (v6 << 2)) == v5) | !(v7 + (v6 << 2)));\n                                            require(MEM[704] << 2 >= 1);\n                                            require((((MEM[704] << 2) - 1) * v5 / ((MEM[704] << 2) - 1) == v5) | !((MEM[704] << 2) - 1));\n                                            require((5 * v6 / 5 == v6) | !0x5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6 >= ((MEM[704] << 2) - 1) * v5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            v8 = (v7 + (v6 << 2)) * v5 / (((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            if (v8 <= v5) {\n                                                require(v5 >= v8);\n                                                if (!bool(v5 - v8 > 1)) {\n                                                    // Unknown jump to Block 0x13ce0x28b1. Refer to 3-address code (TAC);\n                                                }\n                                            } else {\n                                                require(v8 >= v5);\n                                                if (!bool(v8 - v5 > 1)) {\n                                                }\n                                            }\n                                            MEM[736] = 1;\n                                            if (uint8.max != 1) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                revert();\n                            }\n                        }\n                    }\n                    revert();\n                }\n            }\n            revert();\n        }\n    }\n    revert();\n}\n\nfunction remove_liquidity_one_coin(uint256 varg0, int128 varg1) public payable { \n    MEM[320] = 0;\n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    require(varg1 <= MEM[64]);\n    require(varg1 >= MEM[96]);\n    MEM[480] = _token;\n    while (0 >= 4) {\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n        require(v0);\n        require(0 < 4);\n        MEM[352] = MEM[640];\n        MEM[512] = 1;\n        if (4 == 1) {\n            while (352 < 704) {\n            }\n            MEM[736] = 0x800c1cbc;\n            MEM[512] = 8844;\n            MEM[320] = varg0;\n            MEM[352] = varg1;\n            MEM[384] = 0;\n            MEM[416] = 0;\n            MEM[448] = 0;\n            MEM[480] = 0;\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v1 = _curve.A().gas(msg.gas);\n            require(v1);\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v2 = _curve.fee().gas(msg.gas);\n            require(v2);\n            require(((MEM[864] << 2) / MEM[864] == 4) | !MEM[864]);\n            require(12);\n            require(((MEM[864] << 2) / 12 * 0x9502f900 / ((MEM[864] << 2) / 12) == 0x9502f900) | !((MEM[864] << 2) / 12));\n            require(0x2540be400);\n            require((MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400 >= (MEM[864] << 2) / 12);\n            MEM[736] = (MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400;\n            MEM[896] = 1;\n            MEM[928] = 0xe8d4a51000;\n            MEM[960] = 0xe8d4a51000;\n            MEM[992] = 1;\n            require(_token.code.size);\n            require(this ^ _token);\n            v3 = _token.totalSupply().gas(msg.gas);\n            require(v3);\n            MEM[1024] = MEM[1152];\n            while (0 >= 4) {\n                require(_curve.code.size);\n                require(this ^ _curve);\n                v4 = _curve.balances(0).gas(msg.gas);\n                require(v4);\n                require((MEM[1184] * MEM[1504] / MEM[1184] == MEM[1504]) | !MEM[1184]);\n                MEM[1184] = MEM[1184] * MEM[1504];\n                require(0 < 4);\n                require(0 < 4);\n                require((MEM[1184] * MEM[384] / MEM[1184] == MEM[384]) | !MEM[1184]);\n                require(0xde0b6b3a7640000);\n                require(0 < 4);\n                MEM[1184] = MEM[1184] * MEM[384] / 0xde0b6b3a7640000;\n                require(0 < 4);\n                require(0 + MEM[1184] >= 0);\n                MEM[1312] = 0 + MEM[1184];\n                MEM[1344] = 1;\n                if (4 == 1) {\n                    while (352 < 1568) {\n                    }\n                    MEM[1600] = 0x7b724151;\n                    MEM[352] = 1;\n                    MEM[384] = 0xe8d4a51000;\n                    MEM[416] = 0xe8d4a51000;\n                    MEM[448] = 1;\n                    while (0 + MEM[352] < 0) {\n                        MEM[576] = 1;\n                        if (4 == 1) {\n                            if (bool(0 + MEM[352])) {\n                                MEM[640] = 0;\n                                require(((MEM[704] << 2) / MEM[704] == 4) | !MEM[704]);\n                                while (1) {\n                                    while (!((v5 * v5 / v5 == v5) | !v5)) {\n                                        require(((MEM[352] << 2) / MEM[352] == 4) | !MEM[352]);\n                                        require((MEM[352] << 2) + 1 >= MEM[352] << 2);\n                                        require((MEM[352] << 2) + 1);\n                                        v6 = v5 * v5 / ((MEM[352] << 2) + 1);\n                                        MEM[832] = 1;\n                                        if (4 == 1) {\n                                            v7 = (MEM[704] << 2) * (0 + MEM[352]);\n                                            require((v7 / (MEM[704] << 2) == 0 + MEM[352]) | !(MEM[704] << 2));\n                                            require(((v6 << 2) / v6 == 4) | !v6);\n                                            require(v7 + (v6 << 2) >= v7);\n                                            require(((v7 + (v6 << 2)) * v5 / (v7 + (v6 << 2)) == v5) | !(v7 + (v6 << 2)));\n                                            require(MEM[704] << 2 >= 1);\n                                            require((((MEM[704] << 2) - 1) * v5 / ((MEM[704] << 2) - 1) == v5) | !((MEM[704] << 2) - 1));\n                                            require((5 * v6 / 5 == v6) | !0x5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6 >= ((MEM[704] << 2) - 1) * v5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            v8 = (v7 + (v6 << 2)) * v5 / (((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            if (v8 <= v5) {\n                                                require(v5 >= v8);\n                                                if (!bool(v5 - v8 > 1)) {\n                                                    // Unknown jump to Block 0x13ce0x28b4. Refer to 3-address code (TAC);\n                                                }\n                                            } else {\n                                                require(v8 >= v5);\n                                                if (!bool(v8 - v5 > 1)) {\n                                                }\n                                            }\n                                            MEM[736] = 1;\n                                            if (uint8.max != 1) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                revert();\n                            }\n                        }\n                    }\n                    revert();\n                }\n            }\n            revert();\n        }\n    }\n    revert();\n}\n\nfunction remove_liquidity_one_coin(uint256 varg0, int128 varg1, uint256 varg2) public payable { \n    require(varg2 < 2);\n    CALLDATACOPY(320, 100, 32);\n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    require(varg1 <= MEM[64]);\n    require(varg1 >= MEM[96]);\n    MEM[480] = _token;\n    while (0 >= 4) {\n        require((_coins[0]).code.size);\n        require(0 < 4);\n        require(this ^ _coins[0x0]);\n        require(0 < 4);\n        v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n        require(v0);\n        require(0 < 4);\n        MEM[352] = MEM[640];\n        MEM[512] = 1;\n        if (4 == 1) {\n            while (352 < 704) {\n            }\n            MEM[736] = 0x800c1cbc;\n            MEM[512] = 8844;\n            MEM[320] = varg0;\n            MEM[352] = varg1;\n            MEM[384] = 0;\n            MEM[416] = 0;\n            MEM[448] = 0;\n            MEM[480] = 0;\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v1 = _curve.A().gas(msg.gas);\n            require(v1);\n            require(_curve.code.size);\n            require(this ^ _curve);\n            v2 = _curve.fee().gas(msg.gas);\n            require(v2);\n            require(((MEM[864] << 2) / MEM[864] == 4) | !MEM[864]);\n            require(12);\n            require(((MEM[864] << 2) / 12 * 0x9502f900 / ((MEM[864] << 2) / 12) == 0x9502f900) | !((MEM[864] << 2) / 12));\n            require(0x2540be400);\n            require((MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400 >= (MEM[864] << 2) / 12);\n            MEM[736] = (MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400;\n            MEM[896] = 1;\n            MEM[928] = 0xe8d4a51000;\n            MEM[960] = 0xe8d4a51000;\n            MEM[992] = 1;\n            require(_token.code.size);\n            require(this ^ _token);\n            v3 = _token.totalSupply().gas(msg.gas);\n            require(v3);\n            MEM[1024] = MEM[1152];\n            while (0 >= 4) {\n                require(_curve.code.size);\n                require(this ^ _curve);\n                v4 = _curve.balances(0).gas(msg.gas);\n                require(v4);\n                require((MEM[1184] * MEM[1504] / MEM[1184] == MEM[1504]) | !MEM[1184]);\n                MEM[1184] = MEM[1184] * MEM[1504];\n                require(0 < 4);\n                require(0 < 4);\n                require((MEM[1184] * MEM[384] / MEM[1184] == MEM[384]) | !MEM[1184]);\n                require(0xde0b6b3a7640000);\n                require(0 < 4);\n                MEM[1184] = MEM[1184] * MEM[384] / 0xde0b6b3a7640000;\n                require(0 < 4);\n                require(0 + MEM[1184] >= 0);\n                MEM[1312] = 0 + MEM[1184];\n                MEM[1344] = 1;\n                if (4 == 1) {\n                    while (352 < 1568) {\n                    }\n                    MEM[1600] = 0x7b724151;\n                    MEM[352] = 1;\n                    MEM[384] = 0xe8d4a51000;\n                    MEM[416] = 0xe8d4a51000;\n                    MEM[448] = 1;\n                    while (0 + MEM[352] < 0) {\n                        MEM[576] = 1;\n                        if (4 == 1) {\n                            if (bool(0 + MEM[352])) {\n                                MEM[640] = 0;\n                                require(((MEM[704] << 2) / MEM[704] == 4) | !MEM[704]);\n                                while (1) {\n                                    while (!((v5 * v5 / v5 == v5) | !v5)) {\n                                        require(((MEM[352] << 2) / MEM[352] == 4) | !MEM[352]);\n                                        require((MEM[352] << 2) + 1 >= MEM[352] << 2);\n                                        require((MEM[352] << 2) + 1);\n                                        v6 = v5 * v5 / ((MEM[352] << 2) + 1);\n                                        MEM[832] = 1;\n                                        if (4 == 1) {\n                                            v7 = (MEM[704] << 2) * (0 + MEM[352]);\n                                            require((v7 / (MEM[704] << 2) == 0 + MEM[352]) | !(MEM[704] << 2));\n                                            require(((v6 << 2) / v6 == 4) | !v6);\n                                            require(v7 + (v6 << 2) >= v7);\n                                            require(((v7 + (v6 << 2)) * v5 / (v7 + (v6 << 2)) == v5) | !(v7 + (v6 << 2)));\n                                            require(MEM[704] << 2 >= 1);\n                                            require((((MEM[704] << 2) - 1) * v5 / ((MEM[704] << 2) - 1) == v5) | !((MEM[704] << 2) - 1));\n                                            require((5 * v6 / 5 == v6) | !0x5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6 >= ((MEM[704] << 2) - 1) * v5);\n                                            require(((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            v8 = (v7 + (v6 << 2)) * v5 / (((MEM[704] << 2) - 1) * v5 + 5 * v6);\n                                            if (v8 <= v5) {\n                                                require(v5 >= v8);\n                                                if (!bool(v5 - v8 > 1)) {\n                                                    // Unknown jump to Block 0x13ce0x28b7. Refer to 3-address code (TAC);\n                                                }\n                                            } else {\n                                                require(v8 >= v5);\n                                                if (!bool(v8 - v5 > 1)) {\n                                                }\n                                            }\n                                            MEM[736] = 1;\n                                            if (uint8.max != 1) {\n                                                break;\n                                            }\n                                        }\n                                    }\n                                }\n                                revert();\n                            }\n                        }\n                    }\n                    revert();\n                }\n            }\n            revert();\n        }\n    }\n    revert();\n}\n\nfunction withdraw_donated_dust() public payable { \n    require(!_withdraw_donated_dust);\n    _withdraw_donated_dust = 1;\n    require(!msg.value);\n    require(_curve.code.size);\n    require(this ^ _curve);\n    v0 = _curve.owner().gas(msg.gas);\n    require(v0);\n    require(msg.sender == MEM[448]);\n    require(_token.code.size);\n    require(this ^ _token);\n    require(_token.code.size);\n    require(this ^ _token);\n    v1 = _token.balanceOf(this).gas(msg.gas);\n    require(v1);\n    v2 = _token.transfer(MEM[448], MEM[640]).gas(msg.gas);\n    require(v2);\n    require(MEM[832]);\n    _withdraw_donated_dust = 0;\n}\n\nfunction coins(int128 varg0) public nonPayable { \n    require(varg0 <= MEM[64]);\n    require(varg0 >= MEM[96]);\n    require(varg0 < 4);\n    return _coins[varg0];\n}\n\nfunction underlying_coins(int128 varg0) public nonPayable { \n    require(varg0 <= MEM[64]);\n    require(varg0 >= MEM[96]);\n    require(varg0 < 4);\n    return _underlying_coins[varg0];\n}\n\nfunction curve() public nonPayable { \n    return _curve;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector, uint256 varg1, uint256 varg2) public payable { \n    if (msg.data.length >= 4) {\n        MEM[32] = 0x10000000000000000000000000000000000000000;\n        MEM[128] = 0x12a05f1fffffffffffffffffffffffffdabf41c00;\n        MEM[160] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n        if (function_selector != 0x29b2f34) {\n            if (!0) {\n                if (function_selector != 0x7d49d875) {\n                    if (function_selector != 0x18a7bd76) {\n                        if (!0) {\n                            if (!0) {\n                                if (!0) {\n                                    if (!0) {\n                                        if (function_selector != 0xcc2b27d7) {\n                                            if (function_selector != 0x1a4d01d2) {\n                                                if (function_selector != 0x517a55a3) {\n                                                    if (!0) {\n                                                        if (function_selector != 0x6c956a54) {\n                                                            if (function_selector != 0x23746eb8) {\n                                                                if (function_selector != 0xb739953e) {\n                                                                    if (function_selector != 0x7165485d) {\n                                                                        if (function_selector == 0xfc0c546a) {\n                                                                            token();\n                                                                        }\n                                                                    } else {\n                                                                        curve();\n                                                                    }\n                                                                } else {\n                                                                    underlying_coins(int128);\n                                                                }\n                                                            } else {\n                                                                coins(int128);\n                                                            }\n                                                        } else {\n                                                            withdraw_donated_dust();\n                                                        }\n                                                    } else {\n                                                        require(!_withdraw_donated_dust);\n                                                        _withdraw_donated_dust = 1;\n                                                        require(!msg.value);\n                                                        require(varg2 <= MEM[64]);\n                                                        require(varg2 >= int128.min);\n                                                        MEM[480] = _token;\n                                                        while (0 >= 4) {\n                                                            require((_coins[0]).code.size);\n                                                            require(0 < 4);\n                                                            require(this ^ _coins[0x0]);\n                                                            require(0 < 4);\n                                                            v0 = _coins[0x0].getPricePerFullShare().gas(msg.gas);\n                                                            require(v0);\n                                                            require(0 < 4);\n                                                            MEM[352] = MEM[640];\n                                                            MEM[512] = 1;\n                                                            if (4 == 1) {\n                                                                while (352 < 704) {\n                                                                }\n                                                                MEM[736] = 0x800c1cbc;\n                                                            }\n                                                        }\n                                                        revert();\n                                                    }\n                                                } else {\n                                                    remove_liquidity_one_coin(uint256,int128,uint256,bool);\n                                                }\n                                            } else {\n                                                remove_liquidity_one_coin(uint256,int128,uint256);\n                                            }\n                                        } else {\n                                            calc_withdraw_one_coin(uint256,int128);\n                                        }\n                                    }\n                                    MEM[512] = 8844;\n                                    MEM[320] = varg1;\n                                    MEM[352] = varg2;\n                                    MEM[384] = 0;\n                                    MEM[416] = 0;\n                                    MEM[448] = 0;\n                                    MEM[480] = 0;\n                                    require(_curve.code.size);\n                                    require(this ^ _curve);\n                                    v1 = _curve.A().gas(msg.gas);\n                                    require(v1);\n                                    require(_curve.code.size);\n                                    require(this ^ _curve);\n                                    v2 = _curve.fee().gas(msg.gas);\n                                    require(v2);\n                                    require(((MEM[864] << 2) / MEM[864] == 4) | !MEM[864]);\n                                    require(12);\n                                    require(((MEM[864] << 2) / 12 * 0x9502f900 / ((MEM[864] << 2) / 12) == 0x9502f900) | !((MEM[864] << 2) / 12));\n                                    require(0x2540be400);\n                                    require((MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400 >= (MEM[864] << 2) / 12);\n                                    MEM[736] = (MEM[864] << 2) / 12 + (MEM[864] << 2) / 12 * 0x9502f900 / 0x2540be400;\n                                    MEM[896] = 1;\n                                    MEM[928] = 0xe8d4a51000;\n                                    MEM[960] = 0xe8d4a51000;\n                                    MEM[992] = 1;\n                                    require(_token.code.size);\n                                    require(this ^ _token);\n                                    v3 = _token.totalSupply().gas(msg.gas);\n                                    require(v3);\n                                    MEM[1024] = MEM[1152];\n                                    while (0 >= 4) {\n                                        require(_curve.code.size);\n                                        require(this ^ _curve);\n                                        v4 = _curve.balances(0).gas(msg.gas);\n                                        require(v4);\n                                        require((MEM[1184] * MEM[1504] / MEM[1184] == MEM[1504]) | !MEM[1184]);\n                                        MEM[1184] = MEM[1184] * MEM[1504];\n                                        require(0 < 4);\n                                        require(0 < 4);\n                                        require((MEM[1184] * MEM[384] / MEM[1184] == MEM[384]) | !MEM[1184]);\n                                        require(0xde0b6b3a7640000);\n                                        require(0 < 4);\n                                        MEM[1184] = MEM[1184] * MEM[384] / 0xde0b6b3a7640000;\n                                        require(0 < 4);\n                                        require(0 + MEM[1184] >= 0);\n                                        MEM[1312] = 0 + MEM[1184];\n                                        MEM[1344] = 1;\n                                        if (4 == 1) {\n                                            while (352 < 1568) {\n                                            }\n                                            MEM[1600] = 0x7b724151;\n                                        }\n                                    }\n                                    revert();\n                                } else {\n                                    require((MEM[352] >= 0) & (MEM[352] < 4));\n                                    require(((MEM[320] << 2) / MEM[320] == 4) | !MEM[320]);\n                                    MEM[672] = 0;\n                                    while (1) {\n                                        if (!(0x0 ^ MEM[0x160])) {\n                                            // Unknown jump to Block 0x1498. Refer to 3-address code (TAC);\n                                        }\n                                        require(MEM[704] < 4);\n                                        require(0 + MEM[(MEM[704] << 5) + 384] >= 0);\n                                        MEM[608] = 0 + MEM[(MEM[704] << 5) + 384];\n                                        require((MEM[512] * MEM[512] / MEM[512] == MEM[512]) | !MEM[512]);\n                                        require(((MEM[(MEM[704] << 5) + 384] << 2) / MEM[(MEM[704] << 5) + 384] == 4) | !MEM[(MEM[704] << 5) + 384]);\n                                        require(MEM[(MEM[704] << 5) + 384] << 2);\n                                        MEM[576] = MEM[512] * MEM[512] / (MEM[(MEM[704] << 5) + 384] << 2);\n                                        MEM[704] = 1;\n                                        if (4 == 1) {\n                                            require((MEM[576] * MEM[512] / MEM[576] == MEM[512]) | !MEM[576]);\n                                            require(((MEM[320] << 2 << 2) / (MEM[320] << 2) == 4) | !(MEM[320] << 2));\n                                            require(MEM[320] << 2 << 2);\n                                            require(MEM[320] << 2);\n                                            require(MEM[608] + MEM[512] / (MEM[320] << 2) >= MEM[608]);\n                                            MEM[768] = 0;\n                                            while (!((MEM[512] * MEM[512] / MEM[512] == MEM[512]) | !MEM[512])) {\n                                                require(MEM[512] * MEM[512] + MEM[576] * MEM[512] / (MEM[320] << 2 << 2) >= MEM[512] * MEM[512]);\n                                                require((MEM[512] << 1 >> 1 == MEM[512]) | !0x2);\n                                                require((MEM[512] << 1) + (MEM[608] + MEM[512] / (MEM[320] << 2)) >= MEM[512] << 1);\n                                                require((MEM[512] << 1) + (MEM[608] + MEM[512] / (MEM[320] << 2)) >= MEM[512]);\n                                                require((MEM[512] << 1) + (MEM[608] + MEM[512] / (MEM[320] << 2)) - MEM[512]);\n                                                v5 = (MEM[512] * MEM[512] + MEM[576] * MEM[512] / (MEM[320] << 2 << 2)) / ((MEM[512] << 1) + (MEM[608] + MEM[512] / (MEM[320] << 2)) - MEM[512]);\n                                                if (v5 <= MEM[512]) {\n                                                    require(MEM[512] >= v5);\n                                                    if (!bool(MEM[512] - v5 > 1)) {\n                                                        // Unknown jump to Block 0x16fb. Refer to 3-address code (TAC);\n                                                    }\n                                                } else {\n                                                    require(v5 >= MEM[512]);\n                                                    if (!bool(v5 - MEM[512] > 1)) {\n                                                    }\n                                                }\n                                                MEM[832] = 1;\n                                                if (uint8.max != 1) {\n                                                    break;\n                                                }\n                                            }\n                                            revert();\n                                        }\n                                    }\n                                }\n                            }\n                            MEM[352] = 1;\n                            MEM[384] = 0xe8d4a51000;\n                            MEM[416] = 0xe8d4a51000;\n                            MEM[448] = 1;\n                            while (0 + MEM[352] < 0) {\n                                MEM[576] = 1;\n                                if (4 == 1) {\n                                    if (bool(0 + MEM[352])) {\n                                        MEM[640] = 0;\n                                        require(((MEM[704] << 2) / MEM[704] == 4) | !MEM[704]);\n                                        while (1) {\n                                            while (!((v6 * v6 / v6 == v6) | !v6)) {\n                                                require(((MEM[352] << 2) / MEM[352] == 4) | !MEM[352]);\n                                                require((MEM[352] << 2) + 1 >= MEM[352] << 2);\n                                                require((MEM[352] << 2) + 1);\n                                                v7 = v6 * v6 / ((MEM[352] << 2) + 1);\n                                                MEM[832] = 1;\n                                                if (4 == 1) {\n                                                    v8 = (MEM[704] << 2) * (0 + MEM[352]);\n                                                    require((v8 / (MEM[704] << 2) == 0 + MEM[352]) | !(MEM[704] << 2));\n                                                    require(((v7 << 2) / v7 == 4) | !v7);\n                                                    require(v8 + (v7 << 2) >= v8);\n                                                    require(((v8 + (v7 << 2)) * v6 / (v8 + (v7 << 2)) == v6) | !(v8 + (v7 << 2)));\n                                                    require(MEM[704] << 2 >= 1);\n                                                    require((((MEM[704] << 2) - 1) * v6 / ((MEM[704] << 2) - 1) == v6) | !((MEM[704] << 2) - 1));\n                                                    require((5 * v7 / 5 == v7) | !0x5);\n                                                    require(((MEM[704] << 2) - 1) * v6 + 5 * v7 >= ((MEM[704] << 2) - 1) * v6);\n                                                    require(((MEM[704] << 2) - 1) * v6 + 5 * v7);\n                                                    v9 = (v8 + (v7 << 2)) * v6 / (((MEM[704] << 2) - 1) * v6 + 5 * v7);\n                                                    if (v9 <= v6) {\n                                                        require(v6 >= v9);\n                                                        if (!bool(v6 - v9 > 1)) {\n                                                            // Unknown jump to Block 0x13ce0x0. Refer to 3-address code (TAC);\n                                                        }\n                                                    } else {\n                                                        require(v9 >= v6);\n                                                        if (!bool(v9 - v6 > 1)) {\n                                                        }\n                                                    }\n                                                    MEM[736] = 1;\n                                                    if (uint8.max != 1) {\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        revert();\n                                    }\n                                }\n                            }\n                            revert();\n                        } else {\n                            MEM[608] = MEM[320];\n                            MEM[640] = MEM[352];\n                            MEM[672] = MEM[384];\n                            MEM[704] = MEM[416];\n                            while (0 >= 4) {\n                                require(0 < 4);\n                                require((MEM[608] * MEM[448] / MEM[608] == MEM[448]) | !MEM[608]);\n                                require(0xde0b6b3a7640000);\n                                require(0 < 4);\n                                MEM[608] = MEM[608] * MEM[448] / 0xde0b6b3a7640000;\n                                MEM[736] = 1;\n                                if (4 == 1) {\n                                    while (!bool(128 > 0)) {\n                                        MEM[768] = 96;\n                                    }\n                                }\n                            }\n                            revert();\n                        }\n                    } else {\n                        remove_liquidity_imbalance(uint256[4],uint256);\n                    }\n                } else {\n                    remove_liquidity(uint256,uint256[4]);\n                }\n            } else {\n                MEM[544] = 0;\n                MEM[576] = 0;\n                MEM[608] = 1;\n                MEM[640] = 0;\n                while (1) {\n                    if (!((MEM[480] < 0) | (0 == MEM[480]))) {\n                        // Unknown jump to Block 0x9480x0. Refer to 3-address code (TAC);\n                    }\n                    require(MEM[672] < 4);\n                    require((_coins[MEM[672]]).code.size);\n                    require(this ^ _coins[MEM[672]]);\n                    require((_coins[MEM[672]]).code.size);\n                    require(this ^ _coins[MEM[672]]);\n                    v10 = _coins[MEM[672]].balanceOf(this).gas(msg.gas);\n                    require(v10);\n                    v11 = _coins[MEM[672]].withdraw(MEM[864]).gas(msg.gas);\n                    require(v11);\n                    require(MEM[672] < 4);\n                    require((_underlying_coins[MEM[672]]).code.size);\n                    require(this ^ _underlying_coins[MEM[672]]);\n                    v12 = _underlying_coins[MEM[672]].balanceOf(this).gas(msg.gas);\n                    require(v12);\n                    require(MEM[672] < 4);\n                    require(MEM[1216] >= MEM[(MEM[672] << 5) + 352], Error(32, 26, 'Not enough coins withdrawn'));\n                    require(MEM[672] < 4);\n                    if (!MEM[(MEM[672] << 5) + 544]) {\n                        require((_underlying_coins[MEM[672]]).code.size);\n                        require(this ^ _underlying_coins[MEM[672]]);\n                        v13 = _underlying_coins[MEM[672]].transfer(MEM[320], MEM[1216]).gas(msg.gas);\n                        require(v13);\n                        require(MEM[1568]);\n                    } else {\n                        require((_underlying_coins[MEM[672]]).code.size);\n                        require(this ^ _underlying_coins[MEM[672]]);\n                        v14 = _underlying_coins[MEM[672]].transfer(MEM[320], MEM[1216]).gas(msg.gas);\n                        require(v14);\n                    }\n                    MEM[672] = 1;\n                    if (4 == 1) {\n                    }\n                }\n            }\n        } else {\n            add_liquidity(uint256[4],uint256);\n        }\n    }\n    revert();\n}\n.",
	"status": "1",
	"time_cost": 56.759334087371826,
	"usage": {
		"completion_tokens": 705,
		"prompt_tokens": 11838,
		"total_tokens": 12543
	}
}