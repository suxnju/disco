{
	"address": "0xc29021a71f3a6c3fd9f361035d748b5f7912f55e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is a simplified version of the contract written in Solidity:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract CrowdSale {\n    uint256 public initialEPXSupply;\n    uint256 public remainingEPXSupply;\n    uint256 public amountRaisedInWei;\n    uint256 public fundingMinCapInWei;\n    uint256 public fundingStartBlock;\n    uint256 public fundingEndBlock;\n    bool public isCrowdSaleClosed;\n    mapping (address => uint256) public ownerBalance;\n    address public owner;\n    address public admin;\n    address public tokenReward;\n    address public beneficiary;\n\n    event Buy(address indexed buyer, uint256 weiAmount);\n    event Burn(address indexed buyer, uint256 weiAmount);\n    event Refund(address indexed buyer, uint256 weiAmount);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor(address _owner, address _admin, address _tokenReward, address _beneficiary) {\n        owner = _owner;\n        admin = _admin;\n        tokenReward = _tokenReward;\n        beneficiary = _beneficiary;\n        initialEPXSupply = 10000;\n        remainingEPXSupply = initialEPXSupply;\n    }\n\n    function checkGoalReached() public {\n        require(msg.sender == owner, \"Only owner can call this function.\");\n        if (amountRaisedInWei < fundingMinCapInWei) {\n            if (block.number > fundingEndBlock && remainingEPXSupply > 0) {\n                isCrowdSaleClosed = true;\n            }\n            if (block.number > fundingEndBlock && remainingEPXSupply == 0) {\n                isCrowdSaleClosed = true;\n            }\n        } else {\n            if (block.number > fundingEndBlock && remainingEPXSupply > 0) {\n                isCrowdSaleClosed = true;\n            }\n            if (block.number <= fundingEndBlock && remainingEPXSupply > 0) {\n                isCrowdSaleClosed = true;\n            }\n        }\n    }\n\n    function refund() public {\n        require(amountRaisedInWei < fundingMinCapInWei, \"Funding goal reached.\");\n        require(block.number > fundingEndBlock, \"Crowdsale is still open.\");\n        require(ownerBalance[msg.sender] > 0, \"No funds to refund.\");\n        \n        uint256 amountToRefund = ownerBalance[msg.sender];\n        ownerBalance[msg.sender] = 0;\n        \n        (bool success, ) = msg.sender.call{value: amountToRefund}(\"\");\n        require(success, \"Refund failed.\");\n        \n        emit Refund(msg.sender, amountToRefund);\n    }\n\n    function beneficiaryMultiSigWithdraw(uint256 amount) public {\n        require(msg.sender == owner, \"Only owner can call this function.\");\n        require(amountRaisedInWei >= fundingMinCapInWei, \"Funding goal not reached.\");\n        \n        (bool success, ) = beneficiary.call{value: amount}(\"\");\n        require(success, \"Withdraw failed.\");\n        \n        emit Transfer(address(this), beneficiary, amount);\n    }\n\n    function setupCrowdsale(uint256 startBlock, uint256 endBlock) public {\n        require(msg.sender == owner, \"Only owner can call this function.\");\n        fundingStartBlock = startBlock;\n        fundingEndBlock = endBlock;\n        isCrowdSaleClosed = false;\n    }\n\n    function buy() public payable {\n        require(msg.value > 0, \"No funds sent.\");\n        require(block.number >= fundingStartBlock, \"Crowdsale not started.\");\n        require(block.number <= fundingEndBlock, \"Crowdsale closed.\");\n        require(remainingEPXSupply > 0, \"Sold out.\");\n        \n        uint256 amount = msg.value;\n        ownerBalance[msg.sender] += amount;\n        amountRaisedInWei += amount;\n        \n        uint256 tokens = amount * 100; // Assume 1 ETH = 100 tokens\n        remainingEPXSupply -= tokens;\n        \n        // Assume tokenReward is an ERC20 token contract\n        // ERC20(tokenReward).transfer(msg.sender, tokens);\n\n        emit Buy(msg.sender, amount);\n    }\n\n    fallback() external payable {\n        buy();\n    }\n}\n```\nPlease note that this is a simplified version and may not cover all the aspects of the original contract. It's always recommended to perform thorough testing on each function before deploying it to a live network.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457867,
	"id": "chatcmpl-8R3CloAt0IiLKwnID1qoxTr1hO7L7",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.14 12:11 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _initialEPXSupply; // STORAGE[0x3]\nuint256 _remainingEPXSupply; // STORAGE[0x4]\nuint256 _amountRaisedInWei; // STORAGE[0x6]\nuint256 _fundingMinCapInWei; // STORAGE[0x7]\nuint256[] _currentStatus; // STORAGE[0x8]\nuint256 _fundingStartBlock; // STORAGE[0x9]\nuint256 _fundingEndBlock; // STORAGE[0xa]\nuint256 _isCrowdSaleClosed; // STORAGE[0xb]\nmapping (uint256 => [uint256]) map_c; // STORAGE[0xc]\nmapping (uint256 => [uint256]) owner_d; // STORAGE[0xd]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _admin; // STORAGE[0x1] bytes 0 to 19\naddress _tokenReward; // STORAGE[0x2] bytes 0 to 19\naddress stor_5_0_19; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nBuy(address, uint256, uint256);\nBurn(address, uint256);\nRefund(address, uint256);\nTransfer(address, address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    require(_owner == msg.sender);\n    require(0xff & _isCrowdSaleClosed >> 16);\n    v0 = v1 = _amountRaisedInWei < _fundingMinCapInWei;\n    if (v1) {\n        v0 = v2 = block.number <= _fundingEndBlock;\n        if (v2) {\n            v0 = block.number >= _fundingStartBlock;\n        }\n    }\n    if (!v0) {\n        v3 = v4 = _amountRaisedInWei < _fundingMinCapInWei;\n        if (v4) {\n            v3 = block.number < _fundingStartBlock;\n        }\n        if (!v3) {\n            v5 = v6 = _amountRaisedInWei < _fundingMinCapInWei;\n            if (v6) {\n                v5 = block.number > _fundingEndBlock;\n            }\n            if (!v5) {\n                v7 = v8 = _amountRaisedInWei >= _fundingMinCapInWei;\n                if (v8) {\n                    v7 = !_remainingEPXSupply;\n                }\n                if (!v7) {\n                    v9 = v10 = _amountRaisedInWei >= _fundingMinCapInWei;\n                    if (v10) {\n                        v9 = v11 = block.number > _fundingEndBlock;\n                    }\n                    if (v9) {\n                        v9 = _remainingEPXSupply > 0;\n                    }\n                    if (!v9) {\n                        v12 = v13 = _amountRaisedInWei >= _fundingMinCapInWei;\n                        if (v13) {\n                            v12 = v14 = _remainingEPXSupply > 0;\n                        }\n                        if (v12) {\n                            v12 = block.number <= _fundingEndBlock;\n                        }\n                        if (v12) {\n                            _isCrowdSaleClosed = (0x100 | _isCrowdSaleClosed & ~0xff00) & ~0xff;\n                            v15 = v16 = v17.data;\n                            if (31 < v17.length) {\n                                _currentStatus.length = 59;\n                                if (v17.length) {\n                                    while (v16 + v17.length > v15) {\n                                        STORAGE[v18] = MEM[v15];\n                                        v15 += 32;\n                                        v18 += 1;\n                                    }\n                                }\n                            } else {\n                                _currentStatus.length = 0x3a | ~0xff & 'In progress (Eth >= Softcap)!';\n                            }\n                            while (v19 + (31 + _currentStatus.length >> 5) > v18) {\n                                STORAGE[v18] = 0;\n                                v18 += 1;\n                            }\n                        }\n                    } else {\n                        _isCrowdSaleClosed = 0x1 | (0x100 | _isCrowdSaleClosed & ~0xff00) & ~0xff;\n                        v20 = v21 = v22.data;\n                        if (31 < v22.length) {\n                            _currentStatus.length = 57;\n                            if (v22.length) {\n                                while (v21 + v22.length > v20) {\n                                    STORAGE[v23] = MEM[v20];\n                                    v20 += 32;\n                                    v23 += 1;\n                                }\n                            }\n                        } else {\n                            _currentStatus.length = 0x38 | ~0xff & 'Successful (Eth >= Softcap)!';\n                        }\n                        while (v24 + (31 + _currentStatus.length >> 5) > v23) {\n                            STORAGE[v23] = 0;\n                            v23 += 1;\n                        }\n                        goto 0x5c3B0x28d;\n                    }\n                } else {\n                    _isCrowdSaleClosed = 0x1 | (0x100 | _isCrowdSaleClosed & ~0xff00) & ~0xff;\n                    v25 = v26 = v27.data;\n                    if (31 < v27.length) {\n                        _currentStatus.length = 57;\n                        if (v27.length) {\n                            while (v26 + v27.length > v25) {\n                                STORAGE[v28] = MEM[v25];\n                                v25 += 32;\n                                v28 += 1;\n                            }\n                        }\n                    } else {\n                        _currentStatus.length = 0x38 | ~0xff & 'Successful (EPX >= Hardcap)!';\n                    }\n                    while (v29 + (31 + _currentStatus.length >> 5) > v28) {\n                        STORAGE[v28] = 0;\n                        v28 += 1;\n                    }\n                    goto 0x5c3B0x28d;\n                }\n            } else {\n                _isCrowdSaleClosed = 0x1 | ~0xffff & _isCrowdSaleClosed;\n                v30 = v31 = v32.data;\n                if (31 < v32.length) {\n                    _currentStatus.length = 57;\n                    if (v32.length) {\n                        while (v31 + v32.length > v30) {\n                            STORAGE[v33] = MEM[v30];\n                            v30 += 32;\n                            v33 += 1;\n                        }\n                    }\n                } else {\n                    _currentStatus.length = 0x38 | ~0xff & 'Unsuccessful (Eth < Softcap)';\n                }\n                while (v34 + (31 + _currentStatus.length >> 5) > v33) {\n                    STORAGE[v33] = 0;\n                    v33 += 1;\n                }\n                goto 0x5c3B0x28d;\n            }\n        } else {\n            _isCrowdSaleClosed = ~0xffff & _isCrowdSaleClosed;\n            v35 = v36 = v37.data;\n            if (31 < v37.length) {\n                _currentStatus.length = 37;\n                if (v37.length) {\n                    while (v36 + v37.length > v35) {\n                        STORAGE[v38] = MEM[v35];\n                        v35 += 32;\n                        v38 += 1;\n                    }\n                }\n            } else {\n                _currentStatus.length = 0x24 | ~0xff & 'Crowdsale is setup';\n            }\n            while (v39 + (31 + _currentStatus.length >> 5) > v38) {\n                STORAGE[v38] = 0;\n                v38 += 1;\n            }\n            goto 0x5c3B0x28d;\n        }\n    } else {\n        _isCrowdSaleClosed = ~0xffff & _isCrowdSaleClosed;\n        v40 = v41 = v42.data;\n        if (31 < v42.length) {\n            _currentStatus.length = 55;\n            if (v42.length) {\n                while (v41 + v42.length > v40) {\n                    STORAGE[v43] = MEM[v40];\n                    v40 += 32;\n                    v43 += 1;\n                }\n            }\n        } else {\n            _currentStatus.length = 0x36 | ~0xff & 'In progress (Eth < Softcap)';\n        }\n        while (v44 + (31 + _currentStatus.length >> 5) > v43) {\n            STORAGE[v43] = 0;\n            v43 += 1;\n        }\n    }\n}\n\nfunction remainingEPXSupply() public nonPayable { \n    v0 = _SafeDiv(10000, _remainingEPXSupply);\n    return v0;\n}\n\nfunction isCrowdSaleSetup() public nonPayable { \n    return 0xff & _isCrowdSaleClosed >> 16;\n}\n\nfunction refund() public nonPayable { \n    v0 = v1 = _amountRaisedInWei < _fundingMinCapInWei;\n    if (v1) {\n        v0 = v2 = 0xff & _isCrowdSaleClosed;\n    }\n    if (v0) {\n        v0 = v3 = block.number > _fundingEndBlock;\n    }\n    if (v0) {\n        v0 = v4 = owner_d[msg.sender] > 0;\n    }\n    require(v0);\n    map_c[msg.sender] = 0;\n    MEM[32] = 13;\n    owner_d[msg.sender] = 0;\n    emit Burn(msg.sender, 0);\n    v5 = msg.sender.call().value(owner_d[msg.sender]).gas(2300 * !owner_d[msg.sender]);\n    require(v5);\n    emit Refund(msg.sender, owner_d[msg.sender]);\n}\n\nfunction initialEPXSupply() public nonPayable { \n    v0 = _SafeDiv(10000, _initialEPXSupply);\n    return v0;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction amountRaisedInWei() public nonPayable { \n    return _amountRaisedInWei;\n}\n\nfunction beneficiaryMultiSigWithdraw(uint256 varg0) public nonPayable { \n    require(_owner == msg.sender);\n    v0 = v1 = 0xff & _isCrowdSaleClosed >> 8;\n    if (v1) {\n        v0 = v2 = _amountRaisedInWei >= _fundingMinCapInWei;\n    }\n    require(v0);\n    v3 = stor_5_0_19.call().value(varg0).gas(2300 * !varg0);\n    require(v3);\n    emit Transfer(address(this), stor_5_0_19, varg0);\n}\n\nfunction fundingMinCapInWei() public nonPayable { \n    return _fundingMinCapInWei;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction fundingEndBlock() public nonPayable { \n    return _fundingEndBlock;\n}\n\nfunction isCrowdSaleClosed() public nonPayable { \n    return 0xff & _isCrowdSaleClosed;\n}\n\nfunction SetupCrowdsale(uint256 varg0, uint256 varg1) public nonPayable { \n    require(_owner == msg.sender);\n    v0 = v1 = _admin == msg.sender;\n    if (v1) {\n        v0 = v2 = !(0xff & _isCrowdSaleClosed >> 16);\n    }\n    if (v0) {\n        v0 = stor_5_0_19 <= 0;\n    }\n    if (!v0) {\n        if (_admin == msg.sender) {\n            v3 = v4 = 'campaign cannot be changed';\n        } else {\n            v3 = v5 = 'not authorised';\n        }\n    } else {\n        stor_5_0_19 = 0x7a29e1343c6a107ce78199f1b3a1d2952efd77ba;\n        _tokenReward = 0x35baa72038f127f9f8c8f9b491049f64f377914d;\n        _fundingMinCapInWei = 0x1a055690d9db80000;\n        _amountRaisedInWei = 0;\n        _initialEPXSupply = 0x2e90edd000;\n        _remainingEPXSupply = 0x2e90edd000;\n        _fundingStartBlock = varg0;\n        _fundingEndBlock = varg1;\n        _isCrowdSaleClosed = (0x10000 | _isCrowdSaleClosed & ~0xff0000) & ~0xff;\n        v6 = v7 = v8.data;\n        if (31 < v8.length) {\n            _currentStatus.length = 37;\n            if (v8.length) {\n                while (v7 + v8.length > v6) {\n                    STORAGE[v9] = MEM[v6];\n                    v6 += 32;\n                    v9 += 1;\n                }\n            }\n        } else {\n            _currentStatus.length = 0x24 | ~0xff & 'Crowdsale is setup';\n        }\n        while (v10 + (31 + _currentStatus.length >> 5) > v9) {\n            STORAGE[v9] = 0;\n            v9 += 1;\n        }\n        v3 = v11 = 'Crowdsale is setup';\n        goto 0x5120xa8aB0x3b8;\n    }\n    return v3;\n}\n\nfunction fundingStartBlock() public nonPayable { \n    return _fundingStartBlock;\n}\n\nfunction CurrentStatus() public nonPayable { \n    v0 = new bytes[](_currentStatus.length);\n    v1 = v2 = v0.data;\n    if (_currentStatus.length) {\n        if (31 < _currentStatus.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _currentStatus.length <= v1);\n        } else {\n            MEM[v2] = _currentStatus.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction admin() public nonPayable { \n    return _admin;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    v1 = v0 < varg1;\n    v2 = v3 = v0 >= varg1;\n    if (v0 >= varg1) {\n        v2 = v4 = v0 >= varg0;\n    }\n    require(v2);\n    return v0;\n}\n\nfunction 0xd09(uint256 varg0) private { \n    require(varg0);\n    return ;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    0xd09(varg0 > 0);\n    assert(varg0);\n    v0 = varg1 / varg0;\n    assert(varg0);\n    require(varg1 == varg0 * v0 + varg1 % varg0);\n    return v0;\n}\n\nfunction fallback() public payable { \n    v0 = v1 = msg.value;\n    if (msg.value) {\n        v0 = v2 = !msg.data.length;\n    }\n    if (v0) {\n        v0 = v3 = block.number <= _fundingEndBlock;\n    }\n    if (v0) {\n        v0 = v4 = block.number >= _fundingStartBlock;\n    }\n    if (v0) {\n        v0 = v5 = _remainingEPXSupply > 0;\n    }\n    require(v0);\n    v6 = _SafeAdd(msg.value, _amountRaisedInWei);\n    _amountRaisedInWei = v6;\n    v7 = v8 = 0;\n    if (block.number < 0x2b57e + _fundingStartBlock) {\n        if (block.number < 0x1e572 + _fundingStartBlock) {\n            if (block.number >= _fundingStartBlock) {\n                v7 = v9 = 8800;\n            }\n        } else {\n            v7 = v10 = 8200;\n        }\n    } else {\n        v7 = v11 = 7600;\n    }\n    v12 = v13 = !msg.value;\n    if (msg.value) {\n        assert(msg.value);\n        v12 = v14 = v7 * msg.value / msg.value == v7;\n    }\n    require(v12);\n    assert(0x5af3107a4000);\n    0xd09(v7 * msg.value / 0x5af3107a4000 <= _remainingEPXSupply);\n    _remainingEPXSupply = _remainingEPXSupply - v7 * msg.value / 0x5af3107a4000;\n    MEM[32 + MEM[64]] = 0;\n    require(_tokenReward.code.size);\n    v15, v16 = _tokenReward.transfer(msg.sender, v7 * msg.value / 0x5af3107a4000).gas(msg.gas - 710);\n    require(v15);\n    v17 = _SafeAdd(msg.value, owner_d[msg.sender]);\n    owner_d[msg.sender] = v17;\n    emit Buy(msg.sender, msg.value, v7 * msg.value / 0x5af3107a4000);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x1cb3b20) {\n            checkGoalReached();\n        } else if (0x1de1441f == function_selector) {\n            remainingEPXSupply();\n        } else if (0x37205d76 == function_selector) {\n            isCrowdSaleSetup();\n        } else if (0x590e1ae3 == function_selector) {\n            refund();\n        } else if (0x670be445 == function_selector) {\n            initialEPXSupply();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x72729ff2 == function_selector) {\n            amountRaisedInWei();\n        } else if (0x79ca0792 == function_selector) {\n            beneficiaryMultiSigWithdraw(uint256);\n        } else if (0x7ee6b2d0 == function_selector) {\n            fundingMinCapInWei();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x91b43d13 == function_selector) {\n            fundingEndBlock();\n        } else if (0xa26d7b94 == function_selector) {\n            isCrowdSaleClosed();\n        } else if (0xac06e302 == function_selector) {\n            SetupCrowdsale(uint256,uint256);\n        } else if (0xd648a647 == function_selector) {\n            fundingStartBlock();\n        } else if (0xe3306a6f == function_selector) {\n            CurrentStatus();\n        } else if (0xf851a440 == function_selector) {\n            admin();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 12:11 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _initialEPXSupply; // STORAGE[0x3]\nuint256 _remainingEPXSupply; // STORAGE[0x4]\nuint256 _amountRaisedInWei; // STORAGE[0x6]\nuint256 _fundingMinCapInWei; // STORAGE[0x7]\nuint256[] _currentStatus; // STORAGE[0x8]\nuint256 _fundingStartBlock; // STORAGE[0x9]\nuint256 _fundingEndBlock; // STORAGE[0xa]\nuint256 _isCrowdSaleClosed; // STORAGE[0xb]\nmapping (uint256 => [uint256]) map_c; // STORAGE[0xc]\nmapping (uint256 => [uint256]) owner_d; // STORAGE[0xd]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _admin; // STORAGE[0x1] bytes 0 to 19\naddress _tokenReward; // STORAGE[0x2] bytes 0 to 19\naddress stor_5_0_19; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nBuy(address, uint256, uint256);\nBurn(address, uint256);\nRefund(address, uint256);\nTransfer(address, address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    require(_owner == msg.sender);\n    require(0xff & _isCrowdSaleClosed >> 16);\n    v0 = v1 = _amountRaisedInWei < _fundingMinCapInWei;\n    if (v1) {\n        v0 = v2 = block.number <= _fundingEndBlock;\n        if (v2) {\n            v0 = block.number >= _fundingStartBlock;\n        }\n    }\n    if (!v0) {\n        v3 = v4 = _amountRaisedInWei < _fundingMinCapInWei;\n        if (v4) {\n            v3 = block.number < _fundingStartBlock;\n        }\n        if (!v3) {\n            v5 = v6 = _amountRaisedInWei < _fundingMinCapInWei;\n            if (v6) {\n                v5 = block.number > _fundingEndBlock;\n            }\n            if (!v5) {\n                v7 = v8 = _amountRaisedInWei >= _fundingMinCapInWei;\n                if (v8) {\n                    v7 = !_remainingEPXSupply;\n                }\n                if (!v7) {\n                    v9 = v10 = _amountRaisedInWei >= _fundingMinCapInWei;\n                    if (v10) {\n                        v9 = v11 = block.number > _fundingEndBlock;\n                    }\n                    if (v9) {\n                        v9 = _remainingEPXSupply > 0;\n                    }\n                    if (!v9) {\n                        v12 = v13 = _amountRaisedInWei >= _fundingMinCapInWei;\n                        if (v13) {\n                            v12 = v14 = _remainingEPXSupply > 0;\n                        }\n                        if (v12) {\n                            v12 = block.number <= _fundingEndBlock;\n                        }\n                        if (v12) {\n                            _isCrowdSaleClosed = (0x100 | _isCrowdSaleClosed & ~0xff00) & ~0xff;\n                            v15 = v16 = v17.data;\n                            if (31 < v17.length) {\n                                _currentStatus.length = 59;\n                                if (v17.length) {\n                                    while (v16 + v17.length > v15) {\n                                        STORAGE[v18] = MEM[v15];\n                                        v15 += 32;\n                                        v18 += 1;\n                                    }\n                                }\n                            } else {\n                                _currentStatus.length = 0x3a | ~0xff & 'In progress (Eth >= Softcap)!';\n                            }\n                            while (v19 + (31 + _currentStatus.length >> 5) > v18) {\n                                STORAGE[v18] = 0;\n                                v18 += 1;\n                            }\n                        }\n                    } else {\n                        _isCrowdSaleClosed = 0x1 | (0x100 | _isCrowdSaleClosed & ~0xff00) & ~0xff;\n                        v20 = v21 = v22.data;\n                        if (31 < v22.length) {\n                            _currentStatus.length = 57;\n                            if (v22.length) {\n                                while (v21 + v22.length > v20) {\n                                    STORAGE[v23] = MEM[v20];\n                                    v20 += 32;\n                                    v23 += 1;\n                                }\n                            }\n                        } else {\n                            _currentStatus.length = 0x38 | ~0xff & 'Successful (Eth >= Softcap)!';\n                        }\n                        while (v24 + (31 + _currentStatus.length >> 5) > v23) {\n                            STORAGE[v23] = 0;\n                            v23 += 1;\n                        }\n                        goto 0x5c3B0x28d;\n                    }\n                } else {\n                    _isCrowdSaleClosed = 0x1 | (0x100 | _isCrowdSaleClosed & ~0xff00) & ~0xff;\n                    v25 = v26 = v27.data;\n                    if (31 < v27.length) {\n                        _currentStatus.length = 57;\n                        if (v27.length) {\n                            while (v26 + v27.length > v25) {\n                                STORAGE[v28] = MEM[v25];\n                                v25 += 32;\n                                v28 += 1;\n                            }\n                        }\n                    } else {\n                        _currentStatus.length = 0x38 | ~0xff & 'Successful (EPX >= Hardcap)!';\n                    }\n                    while (v29 + (31 + _currentStatus.length >> 5) > v28) {\n                        STORAGE[v28] = 0;\n                        v28 += 1;\n                    }\n                    goto 0x5c3B0x28d;\n                }\n            } else {\n                _isCrowdSaleClosed = 0x1 | ~0xffff & _isCrowdSaleClosed;\n                v30 = v31 = v32.data;\n                if (31 < v32.length) {\n                    _currentStatus.length = 57;\n                    if (v32.length) {\n                        while (v31 + v32.length > v30) {\n                            STORAGE[v33] = MEM[v30];\n                            v30 += 32;\n                            v33 += 1;\n                        }\n                    }\n                } else {\n                    _currentStatus.length = 0x38 | ~0xff & 'Unsuccessful (Eth < Softcap)';\n                }\n                while (v34 + (31 + _currentStatus.length >> 5) > v33) {\n                    STORAGE[v33] = 0;\n                    v33 += 1;\n                }\n                goto 0x5c3B0x28d;\n            }\n        } else {\n            _isCrowdSaleClosed = ~0xffff & _isCrowdSaleClosed;\n            v35 = v36 = v37.data;\n            if (31 < v37.length) {\n                _currentStatus.length = 37;\n                if (v37.length) {\n                    while (v36 + v37.length > v35) {\n                        STORAGE[v38] = MEM[v35];\n                        v35 += 32;\n                        v38 += 1;\n                    }\n                }\n            } else {\n                _currentStatus.length = 0x24 | ~0xff & 'Crowdsale is setup';\n            }\n            while (v39 + (31 + _currentStatus.length >> 5) > v38) {\n                STORAGE[v38] = 0;\n                v38 += 1;\n            }\n            goto 0x5c3B0x28d;\n        }\n    } else {\n        _isCrowdSaleClosed = ~0xffff & _isCrowdSaleClosed;\n        v40 = v41 = v42.data;\n        if (31 < v42.length) {\n            _currentStatus.length = 55;\n            if (v42.length) {\n                while (v41 + v42.length > v40) {\n                    STORAGE[v43] = MEM[v40];\n                    v40 += 32;\n                    v43 += 1;\n                }\n            }\n        } else {\n            _currentStatus.length = 0x36 | ~0xff & 'In progress (Eth < Softcap)';\n        }\n        while (v44 + (31 + _currentStatus.length >> 5) > v43) {\n            STORAGE[v43] = 0;\n            v43 += 1;\n        }\n    }\n}\n\nfunction remainingEPXSupply() public nonPayable { \n    v0 = _SafeDiv(10000, _remainingEPXSupply);\n    return v0;\n}\n\nfunction isCrowdSaleSetup() public nonPayable { \n    return 0xff & _isCrowdSaleClosed >> 16;\n}\n\nfunction refund() public nonPayable { \n    v0 = v1 = _amountRaisedInWei < _fundingMinCapInWei;\n    if (v1) {\n        v0 = v2 = 0xff & _isCrowdSaleClosed;\n    }\n    if (v0) {\n        v0 = v3 = block.number > _fundingEndBlock;\n    }\n    if (v0) {\n        v0 = v4 = owner_d[msg.sender] > 0;\n    }\n    require(v0);\n    map_c[msg.sender] = 0;\n    MEM[32] = 13;\n    owner_d[msg.sender] = 0;\n    emit Burn(msg.sender, 0);\n    v5 = msg.sender.call().value(owner_d[msg.sender]).gas(2300 * !owner_d[msg.sender]);\n    require(v5);\n    emit Refund(msg.sender, owner_d[msg.sender]);\n}\n\nfunction initialEPXSupply() public nonPayable { \n    v0 = _SafeDiv(10000, _initialEPXSupply);\n    return v0;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction amountRaisedInWei() public nonPayable { \n    return _amountRaisedInWei;\n}\n\nfunction beneficiaryMultiSigWithdraw(uint256 varg0) public nonPayable { \n    require(_owner == msg.sender);\n    v0 = v1 = 0xff & _isCrowdSaleClosed >> 8;\n    if (v1) {\n        v0 = v2 = _amountRaisedInWei >= _fundingMinCapInWei;\n    }\n    require(v0);\n    v3 = stor_5_0_19.call().value(varg0).gas(2300 * !varg0);\n    require(v3);\n    emit Transfer(address(this), stor_5_0_19, varg0);\n}\n\nfunction fundingMinCapInWei() public nonPayable { \n    return _fundingMinCapInWei;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction fundingEndBlock() public nonPayable { \n    return _fundingEndBlock;\n}\n\nfunction isCrowdSaleClosed() public nonPayable { \n    return 0xff & _isCrowdSaleClosed;\n}\n\nfunction SetupCrowdsale(uint256 varg0, uint256 varg1) public nonPayable { \n    require(_owner == msg.sender);\n    v0 = v1 = _admin == msg.sender;\n    if (v1) {\n        v0 = v2 = !(0xff & _isCrowdSaleClosed >> 16);\n    }\n    if (v0) {\n        v0 = stor_5_0_19 <= 0;\n    }\n    if (!v0) {\n        if (_admin == msg.sender) {\n            v3 = v4 = 'campaign cannot be changed';\n        } else {\n            v3 = v5 = 'not authorised';\n        }\n    } else {\n        stor_5_0_19 = 0x7a29e1343c6a107ce78199f1b3a1d2952efd77ba;\n        _tokenReward = 0x35baa72038f127f9f8c8f9b491049f64f377914d;\n        _fundingMinCapInWei = 0x1a055690d9db80000;\n        _amountRaisedInWei = 0;\n        _initialEPXSupply = 0x2e90edd000;\n        _remainingEPXSupply = 0x2e90edd000;\n        _fundingStartBlock = varg0;\n        _fundingEndBlock = varg1;\n        _isCrowdSaleClosed = (0x10000 | _isCrowdSaleClosed & ~0xff0000) & ~0xff;\n        v6 = v7 = v8.data;\n        if (31 < v8.length) {\n            _currentStatus.length = 37;\n            if (v8.length) {\n                while (v7 + v8.length > v6) {\n                    STORAGE[v9] = MEM[v6];\n                    v6 += 32;\n                    v9 += 1;\n                }\n            }\n        } else {\n            _currentStatus.length = 0x24 | ~0xff & 'Crowdsale is setup';\n        }\n        while (v10 + (31 + _currentStatus.length >> 5) > v9) {\n            STORAGE[v9] = 0;\n            v9 += 1;\n        }\n        v3 = v11 = 'Crowdsale is setup';\n        goto 0x5120xa8aB0x3b8;\n    }\n    return v3;\n}\n\nfunction fundingStartBlock() public nonPayable { \n    return _fundingStartBlock;\n}\n\nfunction CurrentStatus() public nonPayable { \n    v0 = new bytes[](_currentStatus.length);\n    v1 = v2 = v0.data;\n    if (_currentStatus.length) {\n        if (31 < _currentStatus.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _currentStatus.length <= v1);\n        } else {\n            MEM[v2] = _currentStatus.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction admin() public nonPayable { \n    return _admin;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    v1 = v0 < varg1;\n    v2 = v3 = v0 >= varg1;\n    if (v0 >= varg1) {\n        v2 = v4 = v0 >= varg0;\n    }\n    require(v2);\n    return v0;\n}\n\nfunction 0xd09(uint256 varg0) private { \n    require(varg0);\n    return ;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    0xd09(varg0 > 0);\n    assert(varg0);\n    v0 = varg1 / varg0;\n    assert(varg0);\n    require(varg1 == varg0 * v0 + varg1 % varg0);\n    return v0;\n}\n\nfunction fallback() public payable { \n    v0 = v1 = msg.value;\n    if (msg.value) {\n        v0 = v2 = !msg.data.length;\n    }\n    if (v0) {\n        v0 = v3 = block.number <= _fundingEndBlock;\n    }\n    if (v0) {\n        v0 = v4 = block.number >= _fundingStartBlock;\n    }\n    if (v0) {\n        v0 = v5 = _remainingEPXSupply > 0;\n    }\n    require(v0);\n    v6 = _SafeAdd(msg.value, _amountRaisedInWei);\n    _amountRaisedInWei = v6;\n    v7 = v8 = 0;\n    if (block.number < 0x2b57e + _fundingStartBlock) {\n        if (block.number < 0x1e572 + _fundingStartBlock) {\n            if (block.number >= _fundingStartBlock) {\n                v7 = v9 = 8800;\n            }\n        } else {\n            v7 = v10 = 8200;\n        }\n    } else {\n        v7 = v11 = 7600;\n    }\n    v12 = v13 = !msg.value;\n    if (msg.value) {\n        assert(msg.value);\n        v12 = v14 = v7 * msg.value / msg.value == v7;\n    }\n    require(v12);\n    assert(0x5af3107a4000);\n    0xd09(v7 * msg.value / 0x5af3107a4000 <= _remainingEPXSupply);\n    _remainingEPXSupply = _remainingEPXSupply - v7 * msg.value / 0x5af3107a4000;\n    MEM[32 + MEM[64]] = 0;\n    require(_tokenReward.code.size);\n    v15, v16 = _tokenReward.transfer(msg.sender, v7 * msg.value / 0x5af3107a4000).gas(msg.gas - 710);\n    require(v15);\n    v17 = _SafeAdd(msg.value, owner_d[msg.sender]);\n    owner_d[msg.sender] = v17;\n    emit Buy(msg.sender, msg.value, v7 * msg.value / 0x5af3107a4000);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x1cb3b20) {\n            checkGoalReached();\n        } else if (0x1de1441f == function_selector) {\n            remainingEPXSupply();\n        } else if (0x37205d76 == function_selector) {\n            isCrowdSaleSetup();\n        } else if (0x590e1ae3 == function_selector) {\n            refund();\n        } else if (0x670be445 == function_selector) {\n            initialEPXSupply();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x72729ff2 == function_selector) {\n            amountRaisedInWei();\n        } else if (0x79ca0792 == function_selector) {\n            beneficiaryMultiSigWithdraw(uint256);\n        } else if (0x7ee6b2d0 == function_selector) {\n            fundingMinCapInWei();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x91b43d13 == function_selector) {\n            fundingEndBlock();\n        } else if (0xa26d7b94 == function_selector) {\n            isCrowdSaleClosed();\n        } else if (0xac06e302 == function_selector) {\n            SetupCrowdsale(uint256,uint256);\n        } else if (0xd648a647 == function_selector) {\n            fundingStartBlock();\n        } else if (0xe3306a6f == function_selector) {\n            CurrentStatus();\n        } else if (0xf851a440 == function_selector) {\n            admin();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 12:11 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _initialEPXSupply; // STORAGE[0x3]\nuint256 _remainingEPXSupply; // STORAGE[0x4]\nuint256 _amountRaisedInWei; // STORAGE[0x6]\nuint256 _fundingMinCapInWei; // STORAGE[0x7]\nuint256[] _currentStatus; // STORAGE[0x8]\nuint256 _fundingStartBlock; // STORAGE[0x9]\nuint256 _fundingEndBlock; // STORAGE[0xa]\nuint256 _isCrowdSaleClosed; // STORAGE[0xb]\nmapping (uint256 => [uint256]) map_c; // STORAGE[0xc]\nmapping (uint256 => [uint256]) owner_d; // STORAGE[0xd]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _admin; // STORAGE[0x1] bytes 0 to 19\naddress _tokenReward; // STORAGE[0x2] bytes 0 to 19\naddress stor_5_0_19; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nBuy(address, uint256, uint256);\nBurn(address, uint256);\nRefund(address, uint256);\nTransfer(address, address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    require(_owner == msg.sender);\n    require(0xff & _isCrowdSaleClosed >> 16);\n    v0 = v1 = _amountRaisedInWei < _fundingMinCapInWei;\n    if (v1) {\n        v0 = v2 = block.number <= _fundingEndBlock;\n        if (v2) {\n            v0 = block.number >= _fundingStartBlock;\n        }\n    }\n    if (!v0) {\n        v3 = v4 = _amountRaisedInWei < _fundingMinCapInWei;\n        if (v4) {\n            v3 = block.number < _fundingStartBlock;\n        }\n        if (!v3) {\n            v5 = v6 = _amountRaisedInWei < _fundingMinCapInWei;\n            if (v6) {\n                v5 = block.number > _fundingEndBlock;\n            }\n            if (!v5) {\n                v7 = v8 = _amountRaisedInWei >= _fundingMinCapInWei;\n                if (v8) {\n                    v7 = !_remainingEPXSupply;\n                }\n                if (!v7) {\n                    v9 = v10 = _amountRaisedInWei >= _fundingMinCapInWei;\n                    if (v10) {\n                        v9 = v11 = block.number > _fundingEndBlock;\n                    }\n                    if (v9) {\n                        v9 = _remainingEPXSupply > 0;\n                    }\n                    if (!v9) {\n                        v12 = v13 = _amountRaisedInWei >= _fundingMinCapInWei;\n                        if (v13) {\n                            v12 = v14 = _remainingEPXSupply > 0;\n                        }\n                        if (v12) {\n                            v12 = block.number <= _fundingEndBlock;\n                        }\n                        if (v12) {\n                            _isCrowdSaleClosed = (0x100 | _isCrowdSaleClosed & ~0xff00) & ~0xff;\n                            v15 = v16 = v17.data;\n                            if (31 < v17.length) {\n                                _currentStatus.length = 59;\n                                if (v17.length) {\n                                    while (v16 + v17.length > v15) {\n                                        STORAGE[v18] = MEM[v15];\n                                        v15 += 32;\n                                        v18 += 1;\n                                    }\n                                }\n                            } else {\n                                _currentStatus.length = 0x3a | ~0xff & 'In progress (Eth >= Softcap)!';\n                            }\n                            while (v19 + (31 + _currentStatus.length >> 5) > v18) {\n                                STORAGE[v18] = 0;\n                                v18 += 1;\n                            }\n                        }\n                    } else {\n                        _isCrowdSaleClosed = 0x1 | (0x100 | _isCrowdSaleClosed & ~0xff00) & ~0xff;\n                        v20 = v21 = v22.data;\n                        if (31 < v22.length) {\n                            _currentStatus.length = 57;\n                            if (v22.length) {\n                                while (v21 + v22.length > v20) {\n                                    STORAGE[v23] = MEM[v20];\n                                    v20 += 32;\n                                    v23 += 1;\n                                }\n                            }\n                        } else {\n                            _currentStatus.length = 0x38 | ~0xff & 'Successful (Eth >= Softcap)!';\n                        }\n                        while (v24 + (31 + _currentStatus.length >> 5) > v23) {\n                            STORAGE[v23] = 0;\n                            v23 += 1;\n                        }\n                        goto 0x5c3B0x28d;\n                    }\n                } else {\n                    _isCrowdSaleClosed = 0x1 | (0x100 | _isCrowdSaleClosed & ~0xff00) & ~0xff;\n                    v25 = v26 = v27.data;\n                    if (31 < v27.length) {\n                        _currentStatus.length = 57;\n                        if (v27.length) {\n                            while (v26 + v27.length > v25) {\n                                STORAGE[v28] = MEM[v25];\n                                v25 += 32;\n                                v28 += 1;\n                            }\n                        }\n                    } else {\n                        _currentStatus.length = 0x38 | ~0xff & 'Successful (EPX >= Hardcap)!';\n                    }\n                    while (v29 + (31 + _currentStatus.length >> 5) > v28) {\n                        STORAGE[v28] = 0;\n                        v28 += 1;\n                    }\n                    goto 0x5c3B0x28d;\n                }\n            } else {\n                _isCrowdSaleClosed = 0x1 | ~0xffff & _isCrowdSaleClosed;\n                v30 = v31 = v32.data;\n                if (31 < v32.length) {\n                    _currentStatus.length = 57;\n                    if (v32.length) {\n                        while (v31 + v32.length > v30) {\n                            STORAGE[v33] = MEM[v30];\n                            v30 += 32;\n                            v33 += 1;\n                        }\n                    }\n                } else {\n                    _currentStatus.length = 0x38 | ~0xff & 'Unsuccessful (Eth < Softcap)';\n                }\n                while (v34 + (31 + _currentStatus.length >> 5) > v33) {\n                    STORAGE[v33] = 0;\n                    v33 += 1;\n                }\n                goto 0x5c3B0x28d;\n            }\n        } else {\n            _isCrowdSaleClosed = ~0xffff & _isCrowdSaleClosed;\n            v35 = v36 = v37.data;\n            if (31 < v37.length) {\n                _currentStatus.length = 37;\n                if (v37.length) {\n                    while (v36 + v37.length > v35) {\n                        STORAGE[v38] = MEM[v35];\n                        v35 += 32;\n                        v38 += 1;\n                    }\n                }\n            } else {\n                _currentStatus.length = 0x24 | ~0xff & 'Crowdsale is setup';\n            }\n            while (v39 + (31 + _currentStatus.length >> 5) > v38) {\n                STORAGE[v38] = 0;\n                v38 += 1;\n            }\n            goto 0x5c3B0x28d;\n        }\n    } else {\n        _isCrowdSaleClosed = ~0xffff & _isCrowdSaleClosed;\n        v40 = v41 = v42.data;\n        if (31 < v42.length) {\n            _currentStatus.length = 55;\n            if (v42.length) {\n                while (v41 + v42.length > v40) {\n                    STORAGE[v43] = MEM[v40];\n                    v40 += 32;\n                    v43 += 1;\n                }\n            }\n        } else {\n            _currentStatus.length = 0x36 | ~0xff & 'In progress (Eth < Softcap)';\n        }\n        while (v44 + (31 + _currentStatus.length >> 5) > v43) {\n            STORAGE[v43] = 0;\n            v43 += 1;\n        }\n    }\n}\n\nfunction remainingEPXSupply() public nonPayable { \n    v0 = _SafeDiv(10000, _remainingEPXSupply);\n    return v0;\n}\n\nfunction isCrowdSaleSetup() public nonPayable { \n    return 0xff & _isCrowdSaleClosed >> 16;\n}\n\nfunction refund() public nonPayable { \n    v0 = v1 = _amountRaisedInWei < _fundingMinCapInWei;\n    if (v1) {\n        v0 = v2 = 0xff & _isCrowdSaleClosed;\n    }\n    if (v0) {\n        v0 = v3 = block.number > _fundingEndBlock;\n    }\n    if (v0) {\n        v0 = v4 = owner_d[msg.sender] > 0;\n    }\n    require(v0);\n    map_c[msg.sender] = 0;\n    MEM[32] = 13;\n    owner_d[msg.sender] = 0;\n    emit Burn(msg.sender, 0);\n    v5 = msg.sender.call().value(owner_d[msg.sender]).gas(2300 * !owner_d[msg.sender]);\n    require(v5);\n    emit Refund(msg.sender, owner_d[msg.sender]);\n}\n\nfunction initialEPXSupply() public nonPayable { \n    v0 = _SafeDiv(10000, _initialEPXSupply);\n    return v0;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction amountRaisedInWei() public nonPayable { \n    return _amountRaisedInWei;\n}\n\nfunction beneficiaryMultiSigWithdraw(uint256 varg0) public nonPayable { \n    require(_owner == msg.sender);\n    v0 = v1 = 0xff & _isCrowdSaleClosed >> 8;\n    if (v1) {\n        v0 = v2 = _amountRaisedInWei >= _fundingMinCapInWei;\n    }\n    require(v0);\n    v3 = stor_5_0_19.call().value(varg0).gas(2300 * !varg0);\n    require(v3);\n    emit Transfer(address(this), stor_5_0_19, varg0);\n}\n\nfunction fundingMinCapInWei() public nonPayable { \n    return _fundingMinCapInWei;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction fundingEndBlock() public nonPayable { \n    return _fundingEndBlock;\n}\n\nfunction isCrowdSaleClosed() public nonPayable { \n    return 0xff & _isCrowdSaleClosed;\n}\n\nfunction SetupCrowdsale(uint256 varg0, uint256 varg1) public nonPayable { \n    require(_owner == msg.sender);\n    v0 = v1 = _admin == msg.sender;\n    if (v1) {\n        v0 = v2 = !(0xff & _isCrowdSaleClosed >> 16);\n    }\n    if (v0) {\n        v0 = stor_5_0_19 <= 0;\n    }\n    if (!v0) {\n        if (_admin == msg.sender) {\n            v3 = v4 = 'campaign cannot be changed';\n        } else {\n            v3 = v5 = 'not authorised';\n        }\n    } else {\n        stor_5_0_19 = 0x7a29e1343c6a107ce78199f1b3a1d2952efd77ba;\n        _tokenReward = 0x35baa72038f127f9f8c8f9b491049f64f377914d;\n        _fundingMinCapInWei = 0x1a055690d9db80000;\n        _amountRaisedInWei = 0;\n        _initialEPXSupply = 0x2e90edd000;\n        _remainingEPXSupply = 0x2e90edd000;\n        _fundingStartBlock = varg0;\n        _fundingEndBlock = varg1;\n        _isCrowdSaleClosed = (0x10000 | _isCrowdSaleClosed & ~0xff0000) & ~0xff;\n        v6 = v7 = v8.data;\n        if (31 < v8.length) {\n            _currentStatus.length = 37;\n            if (v8.length) {\n                while (v7 + v8.length > v6) {\n                    STORAGE[v9] = MEM[v6];\n                    v6 += 32;\n                    v9 += 1;\n                }\n            }\n        } else {\n            _currentStatus.length = 0x24 | ~0xff & 'Crowdsale is setup';\n        }\n        while (v10 + (31 + _currentStatus.length >> 5) > v9) {\n            STORAGE[v9] = 0;\n            v9 += 1;\n        }\n        v3 = v11 = 'Crowdsale is setup';\n        goto 0x5120xa8aB0x3b8;\n    }\n    return v3;\n}\n\nfunction fundingStartBlock() public nonPayable { \n    return _fundingStartBlock;\n}\n\nfunction CurrentStatus() public nonPayable { \n    v0 = new bytes[](_currentStatus.length);\n    v1 = v2 = v0.data;\n    if (_currentStatus.length) {\n        if (31 < _currentStatus.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _currentStatus.length <= v1);\n        } else {\n            MEM[v2] = _currentStatus.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction admin() public nonPayable { \n    return _admin;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    v1 = v0 < varg1;\n    v2 = v3 = v0 >= varg1;\n    if (v0 >= varg1) {\n        v2 = v4 = v0 >= varg0;\n    }\n    require(v2);\n    return v0;\n}\n\nfunction 0xd09(uint256 varg0) private { \n    require(varg0);\n    return ;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    0xd09(varg0 > 0);\n    assert(varg0);\n    v0 = varg1 / varg0;\n    assert(varg0);\n    require(varg1 == varg0 * v0 + varg1 % varg0);\n    return v0;\n}\n\nfunction fallback() public payable { \n    v0 = v1 = msg.value;\n    if (msg.value) {\n        v0 = v2 = !msg.data.length;\n    }\n    if (v0) {\n        v0 = v3 = block.number <= _fundingEndBlock;\n    }\n    if (v0) {\n        v0 = v4 = block.number >= _fundingStartBlock;\n    }\n    if (v0) {\n        v0 = v5 = _remainingEPXSupply > 0;\n    }\n    require(v0);\n    v6 = _SafeAdd(msg.value, _amountRaisedInWei);\n    _amountRaisedInWei = v6;\n    v7 = v8 = 0;\n    if (block.number < 0x2b57e + _fundingStartBlock) {\n        if (block.number < 0x1e572 + _fundingStartBlock) {\n            if (block.number >= _fundingStartBlock) {\n                v7 = v9 = 8800;\n            }\n        } else {\n            v7 = v10 = 8200;\n        }\n    } else {\n        v7 = v11 = 7600;\n    }\n    v12 = v13 = !msg.value;\n    if (msg.value) {\n        assert(msg.value);\n        v12 = v14 = v7 * msg.value / msg.value == v7;\n    }\n    require(v12);\n    assert(0x5af3107a4000);\n    0xd09(v7 * msg.value / 0x5af3107a4000 <= _remainingEPXSupply);\n    _remainingEPXSupply = _remainingEPXSupply - v7 * msg.value / 0x5af3107a4000;\n    MEM[32 + MEM[64]] = 0;\n    require(_tokenReward.code.size);\n    v15, v16 = _tokenReward.transfer(msg.sender, v7 * msg.value / 0x5af3107a4000).gas(msg.gas - 710);\n    require(v15);\n    v17 = _SafeAdd(msg.value, owner_d[msg.sender]);\n    owner_d[msg.sender] = v17;\n    emit Buy(msg.sender, msg.value, v7 * msg.value / 0x5af3107a4000);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x1cb3b20) {\n            checkGoalReached();\n        } else if (0x1de1441f == function_selector) {\n            remainingEPXSupply();\n        } else if (0x37205d76 == function_selector) {\n            isCrowdSaleSetup();\n        } else if (0x590e1ae3 == function_selector) {\n            refund();\n        } else if (0x670be445 == function_selector) {\n            initialEPXSupply();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x72729ff2 == function_selector) {\n            amountRaisedInWei();\n        } else if (0x79ca0792 == function_selector) {\n            beneficiaryMultiSigWithdraw(uint256);\n        } else if (0x7ee6b2d0 == function_selector) {\n            fundingMinCapInWei();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x91b43d13 == function_selector) {\n            fundingEndBlock();\n        } else if (0xa26d7b94 == function_selector) {\n            isCrowdSaleClosed();\n        } else if (0xac06e302 == function_selector) {\n            SetupCrowdsale(uint256,uint256);\n        } else if (0xd648a647 == function_selector) {\n            fundingStartBlock();\n        } else if (0xe3306a6f == function_selector) {\n            CurrentStatus();\n        } else if (0xf851a440 == function_selector) {\n            admin();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 36.058894634246826,
	"usage": {
		"completion_tokens": 902,
		"prompt_tokens": 4404,
		"total_tokens": 5306
	}
}