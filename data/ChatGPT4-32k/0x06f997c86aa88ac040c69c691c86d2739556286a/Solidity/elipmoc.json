{
	"address": "0x06f997c86aa88ac040c69c691c86d2739556286a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity code based on your decompiled instructions:\n\n```solidity\npragma solidity >=0.5.0 <0.9.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _dep_token;\n    mapping (address => uint256) private _depositETH;\n    address private _escrow;\n    address private _useraddr;\n\n    function dep_token(address varg0) public view returns (uint256) { \n        return _dep_token[varg0];\n    }\n\n    function admin_token_withdraw(address varg0, address varg1, uint256 varg2) public { \n        require(msg.sender == _escrow);\n        require(_dep_token[varg0] >= varg2);\n        _dep_token[varg0] -= varg2;\n       \n        // Assuming varg0 is an ERC20 token contract\n        ERC20 token = ERC20(varg0);\n        require(token.transfer(varg1, varg2));\n    }\n\n    function useraddr() public view returns (address) { \n        return _useraddr;\n    }\n\n    function safeSub(uint256 varg0, uint256 varg1) public pure returns (uint256) { \n        require(varg0 >= varg1);\n        return varg0 - varg1;\n    }\n\n    function transfer(address varg0, uint256 varg1) public payable { \n        // Assuming varg0 is an ERC20 token contract\n        ERC20 token = ERC20(varg0);\n        require(token.transferFrom(msg.sender, address(this), varg1));\n        _dep_token[varg0] += varg1;\n    }\n\n    function dep_ETH(address varg0) public view returns (uint256) { \n        return _depositETH[varg0];\n    }\n\n    function find_Cont_ETH() public view returns (uint256) { \n        return address(this).balance;\n    }\n\n    function admin_withdrawETH(address payable varg0, uint256 varg1) public { \n        require(msg.sender == _escrow);\n        require(_depositETH[varg0] >= varg1);\n        _depositETH[varg0] -= varg1;\n        varg0.transfer(varg1);\n    }\n\n    function escrow() public view returns (address) { \n        return _escrow;\n    }\n\n    function safeAdd(uint256 varg0, uint256 varg1) public pure returns (uint256) { \n        return varg0 + varg1;\n    }\n\n    function depositETH() public payable { \n        _depositETH[msg.sender] += msg.value;\n    }\n\n    function balanceOf(address varg0, address varg1) public view returns (uint256) { \n        ERC20 token = ERC20(varg0);\n        return token.balanceOf(varg1);\n    }\n\n    function tok_bal_contract(address varg0) public view returns (uint256) { \n        ERC20 token = ERC20(varg0);\n        return token.balanceOf(address(this));\n    }\n}\n\ninterface ERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n}\n```\n\nNote: I am assuming the `varg0` in transfer, admin_token_withdraw, balanceOf, and tok_bal_contract is an ERC20 token contract, so I've used an ERC20 interface to interact with it.\n\nAlso, Ethereum doesn't support goto statements, so I've removed it from the function `admin_withdrawETH`.",
				"role": "assistant"
			}
		}
	],
	"created": 1701462515,
	"id": "chatcmpl-8R4PjTwQbFdRDDcHAnm0mh3jACmcG",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 18:40 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _dep_token; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _depositETH; // STORAGE[0x3]\naddress _escrow; // STORAGE[0x0] bytes 0 to 19\nuint160 _useraddr; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction dep_token(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _dep_token[varg1];\n}\n\nfunction admin_token_withdraw(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    if (_escrow == msg.sender) {\n        if (_dep_token[varg0] >= varg2) {\n            _dep_token[varg0] = _dep_token[varg0] - varg2;\n            require(varg0.code.size);\n            v0, v1 = varg0.transfer(varg1, varg2).gas(msg.gas);\n            require(v0); // checks call status, propagates error data on error\n            require(RETURNDATASIZE() >= 32);\n        }\n    }\n}\n\nfunction useraddr() public nonPayable { \n    return _useraddr;\n}\n\nfunction safeSub(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return varg0 - varg1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0.code.size);\n    v0, v1 = varg0.transferFrom(msg.sender, address(this), varg1).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _dep_token[varg0] = _dep_token[varg0] + varg1;\n}\n\nfunction dep_ETH(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _depositETH[varg0];\n}\n\nfunction find_Cont_ETH() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction admin_withdrawETH(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    v0 = v1 = 0;\n    require(_escrow == msg.sender);\n    if (_escrow == msg.sender) {\n        if (_depositETH[varg0] >= varg1) {\n            _depositETH[varg0] = _depositETH[varg0] - varg1;\n            v2 = varg0.call().value(varg1).gas(!varg1 * 2300);\n            require(v2); // checks call status, propagates error data on error\n            v0 = v3 = 1;\n            goto 0xd9b;\n        }\n    }\n    return v0;\n}\n\nfunction escrow() public nonPayable { \n    return _escrow;\n}\n\nfunction safeAdd(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return varg0 + varg1;\n}\n\nfunction depositETH() public payable { \n    _depositETH[msg.sender] = _depositETH[msg.sender] + msg.value;\n}\n\nfunction balanceOf(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(varg1).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction tok_bal_contract(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0xb51502e3 > function_selector) {\n            if (0x146104e1 == function_selector) {\n                tok_bal_contract(address);\n            } else if (0x3baed1d6 == function_selector) {\n                dep_token(address,address);\n            } else if (0x5ed15d91 == function_selector) {\n                admin_token_withdraw(address,address,uint256);\n            } else if (0x7e0bb111 == function_selector) {\n                useraddr();\n            } else if (0xa293d1e8 == function_selector) {\n                safeSub(uint256,uint256);\n            } else if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            }\n        } else if (0xe2fdcc17 > function_selector) {\n            if (0xb51502e3 == function_selector) {\n                dep_ETH(address);\n            } else if (0xc9b2bdcd == function_selector) {\n                find_Cont_ETH();\n            } else if (0xcfc3f130 == function_selector) {\n                admin_withdrawETH(address,uint256);\n            }\n        } else if (0xe2fdcc17 == function_selector) {\n            escrow();\n        } else if (0xe6cb9013 == function_selector) {\n            safeAdd(uint256,uint256);\n        } else if (0xf6326fb3 == function_selector) {\n            depositETH();\n        } else if (0xf7888aec == function_selector) {\n            balanceOf(address,address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 18:40 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _dep_token; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _depositETH; // STORAGE[0x3]\naddress _escrow; // STORAGE[0x0] bytes 0 to 19\nuint160 _useraddr; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction dep_token(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _dep_token[varg1];\n}\n\nfunction admin_token_withdraw(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    if (_escrow == msg.sender) {\n        if (_dep_token[varg0] >= varg2) {\n            _dep_token[varg0] = _dep_token[varg0] - varg2;\n            require(varg0.code.size);\n            v0, v1 = varg0.transfer(varg1, varg2).gas(msg.gas);\n            require(v0); // checks call status, propagates error data on error\n            require(RETURNDATASIZE() >= 32);\n        }\n    }\n}\n\nfunction useraddr() public nonPayable { \n    return _useraddr;\n}\n\nfunction safeSub(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return varg0 - varg1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0.code.size);\n    v0, v1 = varg0.transferFrom(msg.sender, address(this), varg1).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _dep_token[varg0] = _dep_token[varg0] + varg1;\n}\n\nfunction dep_ETH(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _depositETH[varg0];\n}\n\nfunction find_Cont_ETH() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction admin_withdrawETH(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    v0 = v1 = 0;\n    require(_escrow == msg.sender);\n    if (_escrow == msg.sender) {\n        if (_depositETH[varg0] >= varg1) {\n            _depositETH[varg0] = _depositETH[varg0] - varg1;\n            v2 = varg0.call().value(varg1).gas(!varg1 * 2300);\n            require(v2); // checks call status, propagates error data on error\n            v0 = v3 = 1;\n            goto 0xd9b;\n        }\n    }\n    return v0;\n}\n\nfunction escrow() public nonPayable { \n    return _escrow;\n}\n\nfunction safeAdd(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return varg0 + varg1;\n}\n\nfunction depositETH() public payable { \n    _depositETH[msg.sender] = _depositETH[msg.sender] + msg.value;\n}\n\nfunction balanceOf(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(varg1).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction tok_bal_contract(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0xb51502e3 > function_selector) {\n            if (0x146104e1 == function_selector) {\n                tok_bal_contract(address);\n            } else if (0x3baed1d6 == function_selector) {\n                dep_token(address,address);\n            } else if (0x5ed15d91 == function_selector) {\n                admin_token_withdraw(address,address,uint256);\n            } else if (0x7e0bb111 == function_selector) {\n                useraddr();\n            } else if (0xa293d1e8 == function_selector) {\n                safeSub(uint256,uint256);\n            } else if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            }\n        } else if (0xe2fdcc17 > function_selector) {\n            if (0xb51502e3 == function_selector) {\n                dep_ETH(address);\n            } else if (0xc9b2bdcd == function_selector) {\n                find_Cont_ETH();\n            } else if (0xcfc3f130 == function_selector) {\n                admin_withdrawETH(address,uint256);\n            }\n        } else if (0xe2fdcc17 == function_selector) {\n            escrow();\n        } else if (0xe6cb9013 == function_selector) {\n            safeAdd(uint256,uint256);\n        } else if (0xf6326fb3 == function_selector) {\n            depositETH();\n        } else if (0xf7888aec == function_selector) {\n            balanceOf(address,address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 18:40 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _dep_token; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _depositETH; // STORAGE[0x3]\naddress _escrow; // STORAGE[0x0] bytes 0 to 19\nuint160 _useraddr; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction dep_token(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _dep_token[varg1];\n}\n\nfunction admin_token_withdraw(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    if (_escrow == msg.sender) {\n        if (_dep_token[varg0] >= varg2) {\n            _dep_token[varg0] = _dep_token[varg0] - varg2;\n            require(varg0.code.size);\n            v0, v1 = varg0.transfer(varg1, varg2).gas(msg.gas);\n            require(v0); // checks call status, propagates error data on error\n            require(RETURNDATASIZE() >= 32);\n        }\n    }\n}\n\nfunction useraddr() public nonPayable { \n    return _useraddr;\n}\n\nfunction safeSub(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return varg0 - varg1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0.code.size);\n    v0, v1 = varg0.transferFrom(msg.sender, address(this), varg1).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _dep_token[varg0] = _dep_token[varg0] + varg1;\n}\n\nfunction dep_ETH(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _depositETH[varg0];\n}\n\nfunction find_Cont_ETH() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction admin_withdrawETH(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    v0 = v1 = 0;\n    require(_escrow == msg.sender);\n    if (_escrow == msg.sender) {\n        if (_depositETH[varg0] >= varg1) {\n            _depositETH[varg0] = _depositETH[varg0] - varg1;\n            v2 = varg0.call().value(varg1).gas(!varg1 * 2300);\n            require(v2); // checks call status, propagates error data on error\n            v0 = v3 = 1;\n            goto 0xd9b;\n        }\n    }\n    return v0;\n}\n\nfunction escrow() public nonPayable { \n    return _escrow;\n}\n\nfunction safeAdd(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return varg0 + varg1;\n}\n\nfunction depositETH() public payable { \n    _depositETH[msg.sender] = _depositETH[msg.sender] + msg.value;\n}\n\nfunction balanceOf(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(varg1).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction tok_bal_contract(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0xb51502e3 > function_selector) {\n            if (0x146104e1 == function_selector) {\n                tok_bal_contract(address);\n            } else if (0x3baed1d6 == function_selector) {\n                dep_token(address,address);\n            } else if (0x5ed15d91 == function_selector) {\n                admin_token_withdraw(address,address,uint256);\n            } else if (0x7e0bb111 == function_selector) {\n                useraddr();\n            } else if (0xa293d1e8 == function_selector) {\n                safeSub(uint256,uint256);\n            } else if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            }\n        } else if (0xe2fdcc17 > function_selector) {\n            if (0xb51502e3 == function_selector) {\n                dep_ETH(address);\n            } else if (0xc9b2bdcd == function_selector) {\n                find_Cont_ETH();\n            } else if (0xcfc3f130 == function_selector) {\n                admin_withdrawETH(address,uint256);\n            }\n        } else if (0xe2fdcc17 == function_selector) {\n            escrow();\n        } else if (0xe6cb9013 == function_selector) {\n            safeAdd(uint256,uint256);\n        } else if (0xf6326fb3 == function_selector) {\n            depositETH();\n        } else if (0xf7888aec == function_selector) {\n            balanceOf(address,address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 47.87152147293091,
	"usage": {
		"completion_tokens": 757,
		"prompt_tokens": 1443,
		"total_tokens": 2200
	}
}