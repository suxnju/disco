{
	"address": "0x93d812bf90a575d628e246b0966505a9e466f534",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code based on the decompiled code provided:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _deposited;\n    address private _owner;\n    address payable private _wallet;\n    uint8 private _state;\n\n    event Closed();\n    event RefundsEnabled();\n    event Refunded(address indexed beneficiary, uint256 amount);\n\n    constructor(address payable wallet) {\n        _owner = msg.sender;\n        _wallet = wallet;\n    }\n\n    function state() public view returns (uint8) {\n        require(_state <= 2);\n        return _state;\n    }\n\n    function deposited(address user) public view returns (uint256) {\n        return _deposited[user];\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(_owner == msg.sender);\n        if (newOwner != address(0)) {\n            _owner = newOwner;\n        }\n    }\n\n    function deposit() public payable {\n        require(_owner == msg.sender);\n        require(_state <= 2);\n        require(_state == 0);\n        require(msg.value + _deposited[msg.sender] >= _deposited[msg.sender]);\n        _deposited[msg.sender] += msg.value;\n    }\n\n    function refund(address payable user) public {\n        require(_state <= 2);\n        require(_state == 1);\n        uint256 amount = _deposited[user];\n        _deposited[user] = 0;\n        (bool success, ) = user.call{value: amount, gas: 2300}(\"\");\n        require(success);\n        emit Refunded(user, amount);\n    }\n\n    function close() public {\n        require(_owner == msg.sender);\n        require(_state <= 2);\n        require(_state == 0);\n        _state = 2;\n        emit Closed();\n        (bool success, ) = _wallet.call{value: address(this).balance, gas: 2300}(\"\");\n        require(success);\n    }\n\n    function wallet() public view returns (address) {\n        return _wallet;\n    }\n\n    function enableRefunds() public {\n        require(_owner == msg.sender);\n        require(_state <= 2);\n        require(_state == 0);\n        _state = 1;\n        emit RefundsEnabled();\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n}\n```\nPlease note that the \"__function_selector__\" function was not included in this contract as it is not typically used in Solidity contracts.",
				"role": "assistant"
			}
		}
	],
	"created": 1701455754,
	"id": "chatcmpl-8R2egWWT1dBb2kPqbqKRTltkfKgQP",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 13:26 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _wallet; // STORAGE[0x2] bytes 0 to 19\nuint8 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nRefundsEnabled();\nRefunded(address, uint256);\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    if (varg0) {\n        _owner = varg0;\n    }\n}\n\nfunction deposit(address varg0) public payable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0);\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction close() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction enableRefunds() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x43d726d6) {\n            close();\n        } else if (0x521eb273 == function_selector) {\n            wallet();\n        } else if (0x8c52dc41 == function_selector) {\n            enableRefunds();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xc19d93fb == function_selector) {\n            state();\n        } else if (0xcb13cddb == function_selector) {\n            deposited(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        }\n    }\n    revert();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 13:26 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _wallet; // STORAGE[0x2] bytes 0 to 19\nuint8 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nRefundsEnabled();\nRefunded(address, uint256);\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    if (varg0) {\n        _owner = varg0;\n    }\n}\n\nfunction deposit(address varg0) public payable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0);\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction close() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction enableRefunds() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x43d726d6) {\n            close();\n        } else if (0x521eb273 == function_selector) {\n            wallet();\n        } else if (0x8c52dc41 == function_selector) {\n            enableRefunds();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xc19d93fb == function_selector) {\n            state();\n        } else if (0xcb13cddb == function_selector) {\n            deposited(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        }\n    }\n    revert();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 13:26 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _wallet; // STORAGE[0x2] bytes 0 to 19\nuint8 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nRefundsEnabled();\nRefunded(address, uint256);\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    if (varg0) {\n        _owner = varg0;\n    }\n}\n\nfunction deposit(address varg0) public payable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0);\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction close() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction enableRefunds() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x43d726d6) {\n            close();\n        } else if (0x521eb273 == function_selector) {\n            wallet();\n        } else if (0x8c52dc41 == function_selector) {\n            enableRefunds();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xc19d93fb == function_selector) {\n            state();\n        } else if (0xcb13cddb == function_selector) {\n            deposited(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        }\n    }\n    revert();\n}\n.",
	"status": "1",
	"time_cost": 19.31371808052063,
	"usage": {
		"completion_tokens": 533,
		"prompt_tokens": 834,
		"total_tokens": 1367
	}
}