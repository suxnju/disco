{
	"address": "0xabefec93451a2cd5d864ff7b0b1604dfc60e9688",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Given the decompiled code, here's the corresponding Solidity smart contract:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract TokenContract {\n    string public name;\n    string public symbol;\n    uint256 public stakingRequirement;\n    uint256 public totalSupply;\n    bool public onlyAmbassadors;\n    address[] public ambassadors;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => uint256) private dividends;\n    mapping(address => bool) private administrators;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event onTokenPurchase(address indexed customerAddress, uint256 incomingEthereum, uint256 tokensMinted, address indexed referredBy);\n    event onTokenSell(address indexed customerAddress, uint256 tokensBurned, uint256 ethereumEarned);\n    event onReinvestment(address indexed customerAddress, uint256 ethereumReinvested, uint256 tokensMinted);\n\n    constructor(string memory _name, string memory _symbol, uint256 _stakingRequirement, address[] memory _ambassadors) {\n        name = _name;\n        symbol = _symbol;\n        stakingRequirement = _stakingRequirement;\n        for (uint256 i = 0; i < _ambassadors.length; i++) {\n            ambassadors.push(_ambassadors[i]);\n            administrators[_ambassadors[i]] = true;\n        }\n    }\n\n    function setName(string memory _name) public {\n        require(administrators[msg.sender], \"Only administrators can set name\");\n        name = _name;\n    }\n\n    function setSymbol(string memory _symbol) public {\n        require(administrators[msg.sender], \"Only administrators can set symbol\");\n        symbol = _symbol;\n    }\n\n    function setStakingRequirement(uint256 _amountOfTokens) public {\n        require(administrators[msg.sender], \"Only administrators can set staking requirement\");\n        stakingRequirement = _amountOfTokens;\n    }\n\n    function setAdministrator(address _identifier, bool _status) public {\n        require(administrators[msg.sender], \"Only administrators can set administrator\");\n        administrators[_identifier] = _status;\n    }\n\n    function disableInitialStage() public {\n        require(administrators[msg.sender], \"Only administrators can disable initial stage\");\n        onlyAmbassadors = false;\n    }\n\n    // ... other functions as per the decompiled code\n}\n```\n\nThis is a skeleton of the smart contract based on the decompiled code, and the rest of the functions would follow a similar pattern. The contract appears to be a custom token with additional features such as staking and referral bonuses. The contract allows certain addresses (ambassadors) to perform administrative tasks such as setting the name, symbol, and staking requirement of the token. It also includes logic for buying and selling the token, transferring it, and withdrawing accumulated dividends.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472461,
	"id": "chatcmpl-8Mur7eC6JYEeKOFVAyWORb9PBYk89",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\nconst decimals = 18\nconst totalEthereumBalance = eth.balance(this.address)\n\ndef storage:\n  name is array of uint256 at storage 0\n  symbol is array of uint256 at storage 1\n  stakingRequirement is uint256 at storage 2\n  stor3 is mapping of uint8 at storage 3\n  balanceOf is mapping of uint256 at storage 4\n  stor5 is mapping of uint256 at storage 5\n  stor6 is mapping of uint256 at storage 6\n  stor7 is mapping of uint256 at storage 7\n  totalSupply is uint256 at storage 8\n  stor9 is uint256 at storage 9\n  stor10 is mapping of uint8 at storage 10\n  onlyAmbassadors is uint8 at storage 11\n  stor1455660694011640316922617296525376801425655685718 is mapping of uint8 at storage 0xfefa15424fd45bafe123163b2ad8d509c1256256\n\ndef name(): # not payable\n  return name[0 len name.length]\n\ndef totalSupply(): # not payable\n  return totalSupply\n\ndef onlyAmbassadors(): # not payable\n  return bool(onlyAmbassadors)\n\ndef administrators(bytes32 _param1): # not payable\n  return bool(stor10[_param1])\n\ndef stakingRequirement(): # not payable\n  return stakingRequirement\n\ndef balanceOf(address account): # not payable\n  return balanceOf[address(account)]\n\ndef myTokens(): # not payable\n  return balanceOf[caller]\n\ndef symbol(): # not payable\n  return symbol[0 len symbol.length]\n\n#\n#  Regular functions\n#\n\ndef disableInitialStage(): # not payable\n  require stor10[caller]\n  onlyAmbassadors = 0\n\ndef setStakingRequirement(uint256 _amountOfTokens): # not payable\n  require stor10[caller]\n  stakingRequirement = _amountOfTokens\n\ndef setName(string _name): # not payable\n  require stor10[caller]\n  name[] = Array(len=_name.length, data=_name[all])\n\ndef setAdministrator(bytes32 _identifier, bool _status): # not payable\n  require stor10[caller]\n  stor10[_identifier] = uint8(_status)\n\ndef setSymbol(string _symbol): # not payable\n  require stor10[caller]\n  symbol[] = Array(len=_symbol.length, data=_symbol[all])\n\ndef BlueChip(): # not payable\n  stor10[('name', 'storFEFA', 1455660694011640316922617296525376801425655685718)] = 1\n  stor3[0x895a6e21acc9f4e81b77cf28a6599ff3805dc81e] = 1\n  stor3[0xfefa15424fd45bafe123163b2ad8d509c1256256] = 1\n\ndef dividendsOf(address _customerAddress): # not payable\n  return (Mask(192, 64, (stor9 * balanceOf[address(_customerAddress)]) - stor6[address(_customerAddress)]) >> 64)\n\ndef myDividends(bool _includeReferralBonus): # not payable\n  if _includeReferralBonus:\n      return ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller])\n  return (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64)\n\ndef sellPrice(): # not payable\n  if not totalSupply:\n      return (25 * 10^6 * 3600)\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 5 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) - ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 5))\n\ndef buyPrice(): # not payable\n  if not totalSupply:\n      return 11 * 10^10\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 5) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 5))\n\ndef withdraw(): # not payable\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller])\n  stor5[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef calculateTokensReceived(uint256 _ethereumToSpend): # not payable\n  require _ethereumToSpend / 5 <= _ethereumToSpend\n  s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n  t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n  while s < t:\n      require s\n      s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n      t = s\n      continue \n  if 100000000000 * 10^18 <= t:\n      return ((t - 100000000000 * 10^18 / 10^10) - totalSupply)\n  revert\n\ndef calculateEthereumReceived(uint256 _tokensToSell): # not payable\n  require _tokensToSell <= totalSupply\n  require 10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell)\n  require (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 5 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18\n  return (((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 5))\n\ndef sell(uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require amount <= balanceOf[caller]\n  require 10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount)\n  require (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5 <= (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18\n  require amount <= totalSupply\n  totalSupply -= amount\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  stor6[caller] = stor6[caller] - (stor9 * amount) - (((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5) << 64)\n  if totalSupply > 0:\n      require totalSupply\n      require stor9 + ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5 << 64 / totalSupply) >= stor9\n      stor9 += (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5 << 64 / totalSupply\n  log onTokenSell(\n        address customerAddress=amount,\n        uint256 tokensBurned=((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5),\n        uint256 ethereumEarned=caller)\n\ndef transfer(address recipient, uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require not onlyAmbassadors\n  require amount <= balanceOf[caller]\n  if (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0:\n      require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0\n      stor6[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller])\n      stor5[caller] = 0\n      call caller with:\n         value (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      log onWithdraw(\n            address customerAddress=((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]),\n            uint256 ethereumWithdrawn=caller)\n  require amount / 5 <= amount\n  require 10^10 * ((amount / 5) + 10^18)^2 + -(amount / 5) - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * amount / 5) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 5)\n  require amount / 5 <= totalSupply\n  totalSupply -= amount / 5\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  require balanceOf[address(recipient)] + amount - (amount / 5) >= balanceOf[address(recipient)]\n  balanceOf[address(recipient)] = balanceOf[address(recipient)] + amount - (amount / 5)\n  stor6[caller] += -1 * stor9 * amount\n  stor6[address(recipient)] = stor6[address(recipient)] + (amount * stor9) - (amount / 5 * stor9)\n  require totalSupply\n  require stor9 + ((25 * 10^6 * 3600 * amount / 5) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 5) - (10^10 * ((amount / 5) + 10^18)^2 + -(amount / 5) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply) >= stor9\n  stor9 += (25 * 10^6 * 3600 * amount / 5) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 5) - (10^10 * ((amount / 5) + 10^18)^2 + -(amount / 5) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply\n  log Transfer(\n        address from=(amount - (amount / 5)),\n        address to=caller,\n        uint256 value=recipient)\n  return 1\n\ndef exit(): # not payable\n  if balanceOf[caller] > 0:\n      require balanceOf[caller] > 0\n      require balanceOf[caller] <= balanceOf[caller]\n      require 10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller])\n      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n      require balanceOf[caller] <= totalSupply\n      totalSupply -= balanceOf[caller]\n      require balanceOf[caller] <= balanceOf[caller]\n      balanceOf[caller] = 0\n      stor6[caller] = stor6[caller] - (stor9 * balanceOf[caller]) - (((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5) << 64)\n      if totalSupply > 0:\n          require totalSupply\n          require stor9 + ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5 << 64 / totalSupply) >= stor9\n          stor9 += (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5 << 64 / totalSupply\n      log onTokenSell(\n            address customerAddress=balanceOf[caller],\n            uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5),\n            uint256 ethereumEarned=caller)\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller])\n  stor5[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef _fallback(?) payable: # default function\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require call.value / 5 / 3 <= call.value / 5\n      require call.value / 5 <= call.value\n      s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - call.value > 2 * 10^18:\n          onlyAmbassadors = 0\n          require call.value / 5 / 3 <= call.value / 5\n          require call.value / 5 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require bool(stor3[caller]) == 1\n          require stor7[caller] + call.value <= 10^18\n          require stor7[caller] + call.value >= stor7[caller]\n          stor7[caller] += call.value\n          require call.value / 5 / 3 <= call.value / 5\n          require call.value / 5 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  require call.value / 5 >= (call.value / 5) - (call.value / 5 / 3)\n  if totalSupply <= 0:\n      totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n      balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 5 << 64)\n  else:\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      totalSupply = t - 100000000000 * 10^18 / 10^10\n      require totalSupply\n      stor9 += call.value / 5 << 64 / totalSupply\n      require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n      balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 5 << 64 / totalSupply) + (totalSupply * call.value / 5 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=call.value,\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n\ndef buy(address _referredBy) payable: \n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require call.value / 5 / 3 <= call.value / 5\n      require call.value / 5 <= call.value\n      s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - call.value > 2 * 10^18:\n          onlyAmbassadors = 0\n          require call.value / 5 / 3 <= call.value / 5\n          require call.value / 5 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require bool(stor3[caller]) == 1\n          require stor7[caller] + call.value <= 10^18\n          require stor7[caller] + call.value >= stor7[caller]\n          stor7[caller] += call.value\n          require call.value / 5 / 3 <= call.value / 5\n          require call.value / 5 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  if not _referredBy:\n      require call.value / 5 >= (call.value / 5) - (call.value / 5 / 3)\n      if totalSupply <= 0:\n          totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 5 << 64)\n      else:\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          totalSupply = t - 100000000000 * 10^18 / 10^10\n          require totalSupply\n          stor9 += call.value / 5 << 64 / totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 5 << 64 / totalSupply) + (totalSupply * call.value / 5 << 64 / totalSupply)\n  else:\n      if _referredBy == caller:\n          require call.value / 5 >= (call.value / 5) - (call.value / 5 / 3)\n          if totalSupply <= 0:\n              totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 5 << 64)\n          else:\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              stor9 += call.value / 5 << 64 / totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 5 << 64 / totalSupply) + (totalSupply * call.value / 5 << 64 / totalSupply)\n      else:\n          if balanceOf[address(_referredBy)] < stakingRequirement:\n              require call.value / 5 >= (call.value / 5) - (call.value / 5 / 3)\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 5 << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  stor9 += call.value / 5 << 64 / totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 5 << 64 / totalSupply) + (totalSupply * call.value / 5 << 64 / totalSupply)\n          else:\n              require stor5[address(_referredBy)] + (call.value / 5 / 3) >= stor5[address(_referredBy)]\n              stor5[address(_referredBy)] += call.value / 5 / 3\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((call.value / 5) - (call.value / 5 / 3) << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  stor9 += (call.value / 5) - (call.value / 5 / 3) << 64 / totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (call.value / 5) - (call.value / 5 / 3) << 64 / totalSupply) + (totalSupply * (call.value / 5) - (call.value / 5 / 3) << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=call.value,\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=_referredBy)\n  return 0\n\ndef reinvest(): # not payable\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller])\n  stor5[caller] = 0\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 / 3 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5\n      require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]\n      s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) - stor5[caller] > 2 * 10^18:\n          onlyAmbassadors = 0\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 / 3 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require bool(stor3[caller]) == 1\n          require stor7[caller] + (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] <= 10^18\n          require stor7[caller] + (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] >= stor7[caller]\n          stor7[caller] = stor7[caller] + (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 / 3 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 >= ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) - ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 / 3)\n  if totalSupply <= 0:\n      totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n      balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 << 64)\n  else:\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      totalSupply = t - 100000000000 * 10^18 / 10^10\n      require totalSupply\n      stor9 += (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 << 64 / totalSupply\n      require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n      balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 << 64 / totalSupply) + (totalSupply * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=(Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller],\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n  log onReinvestment(\n        address customerAddress=(Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller],\n        uint256 ethereumReinvested=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller)\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: # Palkeoramix decompiler. \n\nconst decimals = 18\nconst totalEthereumBalance = eth.balance(this.address)\n\ndef storage:\n  name is array of uint256 at storage 0\n  symbol is array of uint256 at storage 1\n  stakingRequirement is uint256 at storage 2\n  stor3 is mapping of uint8 at storage 3\n  balanceOf is mapping of uint256 at storage 4\n  stor5 is mapping of uint256 at storage 5\n  stor6 is mapping of uint256 at storage 6\n  stor7 is mapping of uint256 at storage 7\n  totalSupply is uint256 at storage 8\n  stor9 is uint256 at storage 9\n  stor10 is mapping of uint8 at storage 10\n  onlyAmbassadors is uint8 at storage 11\n  stor1455660694011640316922617296525376801425655685718 is mapping of uint8 at storage 0xfefa15424fd45bafe123163b2ad8d509c1256256\n\ndef name(): # not payable\n  return name[0 len name.length]\n\ndef totalSupply(): # not payable\n  return totalSupply\n\ndef onlyAmbassadors(): # not payable\n  return bool(onlyAmbassadors)\n\ndef administrators(bytes32 _param1): # not payable\n  return bool(stor10[_param1])\n\ndef stakingRequirement(): # not payable\n  return stakingRequirement\n\ndef balanceOf(address account): # not payable\n  return balanceOf[address(account)]\n\ndef myTokens(): # not payable\n  return balanceOf[caller]\n\ndef symbol(): # not payable\n  return symbol[0 len symbol.length]\n\n#\n#  Regular functions\n#\n\ndef disableInitialStage(): # not payable\n  require stor10[caller]\n  onlyAmbassadors = 0\n\ndef setStakingRequirement(uint256 _amountOfTokens): # not payable\n  require stor10[caller]\n  stakingRequirement = _amountOfTokens\n\ndef setName(string _name): # not payable\n  require stor10[caller]\n  name[] = Array(len=_name.length, data=_name[all])\n\ndef setAdministrator(bytes32 _identifier, bool _status): # not payable\n  require stor10[caller]\n  stor10[_identifier] = uint8(_status)\n\ndef setSymbol(string _symbol): # not payable\n  require stor10[caller]\n  symbol[] = Array(len=_symbol.length, data=_symbol[all])\n\ndef BlueChip(): # not payable\n  stor10[('name', 'storFEFA', 1455660694011640316922617296525376801425655685718)] = 1\n  stor3[0x895a6e21acc9f4e81b77cf28a6599ff3805dc81e] = 1\n  stor3[0xfefa15424fd45bafe123163b2ad8d509c1256256] = 1\n\ndef dividendsOf(address _customerAddress): # not payable\n  return (Mask(192, 64, (stor9 * balanceOf[address(_customerAddress)]) - stor6[address(_customerAddress)]) >> 64)\n\ndef myDividends(bool _includeReferralBonus): # not payable\n  if _includeReferralBonus:\n      return ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller])\n  return (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64)\n\ndef sellPrice(): # not payable\n  if not totalSupply:\n      return (25 * 10^6 * 3600)\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 5 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) - ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 5))\n\ndef buyPrice(): # not payable\n  if not totalSupply:\n      return 11 * 10^10\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 5) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 5))\n\ndef withdraw(): # not payable\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller])\n  stor5[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef calculateTokensReceived(uint256 _ethereumToSpend): # not payable\n  require _ethereumToSpend / 5 <= _ethereumToSpend\n  s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n  t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n  while s < t:\n      require s\n      s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n      t = s\n      continue \n  if 100000000000 * 10^18 <= t:\n      return ((t - 100000000000 * 10^18 / 10^10) - totalSupply)\n  revert\n\ndef calculateEthereumReceived(uint256 _tokensToSell): # not payable\n  require _tokensToSell <= totalSupply\n  require 10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell)\n  require (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 5 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18\n  return (((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 5))\n\ndef sell(uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require amount <= balanceOf[caller]\n  require 10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount)\n  require (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5 <= (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18\n  require amount <= totalSupply\n  totalSupply -= amount\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  stor6[caller] = stor6[caller] - (stor9 * amount) - (((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5) << 64)\n  if totalSupply > 0:\n      require totalSupply\n      require stor9 + ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5 << 64 / totalSupply) >= stor9\n      stor9 += (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5 << 64 / totalSupply\n  log onTokenSell(\n        address customerAddress=amount,\n        uint256 tokensBurned=((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5),\n        uint256 ethereumEarned=caller)\n\ndef transfer(address recipient, uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require not onlyAmbassadors\n  require amount <= balanceOf[caller]\n  if (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0:\n      require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0\n      stor6[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller])\n      stor5[caller] = 0\n      call caller with:\n         value (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      log onWithdraw(\n            address customerAddress=((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]),\n            uint256 ethereumWithdrawn=caller)\n  require amount / 5 <= amount\n  require 10^10 * ((amount / 5) + 10^18)^2 + -(amount / 5) - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * amount / 5) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 5)\n  require amount / 5 <= totalSupply\n  totalSupply -= amount / 5\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  require balanceOf[address(recipient)] + amount - (amount / 5) >= balanceOf[address(recipient)]\n  balanceOf[address(recipient)] = balanceOf[address(recipient)] + amount - (amount / 5)\n  stor6[caller] += -1 * stor9 * amount\n  stor6[address(recipient)] = stor6[address(recipient)] + (amount * stor9) - (amount / 5 * stor9)\n  require totalSupply\n  require stor9 + ((25 * 10^6 * 3600 * amount / 5) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 5) - (10^10 * ((amount / 5) + 10^18)^2 + -(amount / 5) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply) >= stor9\n  stor9 += (25 * 10^6 * 3600 * amount / 5) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 5) - (10^10 * ((amount / 5) + 10^18)^2 + -(amount / 5) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply\n  log Transfer(\n        address from=(amount - (amount / 5)),\n        address to=caller,\n        uint256 value=recipient)\n  return 1\n\ndef exit(): # not payable\n  if balanceOf[caller] > 0:\n      require balanceOf[caller] > 0\n      require balanceOf[caller] <= balanceOf[caller]\n      require 10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller])\n      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n      require balanceOf[caller] <= totalSupply\n      totalSupply -= balanceOf[caller]\n      require balanceOf[caller] <= balanceOf[caller]\n      balanceOf[caller] = 0\n      stor6[caller] = stor6[caller] - (stor9 * balanceOf[caller]) - (((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5) << 64)\n      if totalSupply > 0:\n          require totalSupply\n          require stor9 + ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5 << 64 / totalSupply) >= stor9\n          stor9 += (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5 << 64 / totalSupply\n      log onTokenSell(\n            address customerAddress=balanceOf[caller],\n            uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5),\n            uint256 ethereumEarned=caller)\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller])\n  stor5[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef _fallback(?) payable: # default function\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require call.value / 5 / 3 <= call.value / 5\n      require call.value / 5 <= call.value\n      s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - call.value > 2 * 10^18:\n          onlyAmbassadors = 0\n          require call.value / 5 / 3 <= call.value / 5\n          require call.value / 5 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require bool(stor3[caller]) == 1\n          require stor7[caller] + call.value <= 10^18\n          require stor7[caller] + call.value >= stor7[caller]\n          stor7[caller] += call.value\n          require call.value / 5 / 3 <= call.value / 5\n          require call.value / 5 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  require call.value / 5 >= (call.value / 5) - (call.value / 5 / 3)\n  if totalSupply <= 0:\n      totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n      balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 5 << 64)\n  else:\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      totalSupply = t - 100000000000 * 10^18 / 10^10\n      require totalSupply\n      stor9 += call.value / 5 << 64 / totalSupply\n      require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n      balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 5 << 64 / totalSupply) + (totalSupply * call.value / 5 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=call.value,\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n\ndef buy(address _referredBy) payable: \n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require call.value / 5 / 3 <= call.value / 5\n      require call.value / 5 <= call.value\n      s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - call.value > 2 * 10^18:\n          onlyAmbassadors = 0\n          require call.value / 5 / 3 <= call.value / 5\n          require call.value / 5 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require bool(stor3[caller]) == 1\n          require stor7[caller] + call.value <= 10^18\n          require stor7[caller] + call.value >= stor7[caller]\n          stor7[caller] += call.value\n          require call.value / 5 / 3 <= call.value / 5\n          require call.value / 5 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  if not _referredBy:\n      require call.value / 5 >= (call.value / 5) - (call.value / 5 / 3)\n      if totalSupply <= 0:\n          totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 5 << 64)\n      else:\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          totalSupply = t - 100000000000 * 10^18 / 10^10\n          require totalSupply\n          stor9 += call.value / 5 << 64 / totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 5 << 64 / totalSupply) + (totalSupply * call.value / 5 << 64 / totalSupply)\n  else:\n      if _referredBy == caller:\n          require call.value / 5 >= (call.value / 5) - (call.value / 5 / 3)\n          if totalSupply <= 0:\n              totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 5 << 64)\n          else:\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              stor9 += call.value / 5 << 64 / totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 5 << 64 / totalSupply) + (totalSupply * call.value / 5 << 64 / totalSupply)\n      else:\n          if balanceOf[address(_referredBy)] < stakingRequirement:\n              require call.value / 5 >= (call.value / 5) - (call.value / 5 / 3)\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 5 << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  stor9 += call.value / 5 << 64 / totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 5 << 64 / totalSupply) + (totalSupply * call.value / 5 << 64 / totalSupply)\n          else:\n              require stor5[address(_referredBy)] + (call.value / 5 / 3) >= stor5[address(_referredBy)]\n              stor5[address(_referredBy)] += call.value / 5 / 3\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((call.value / 5) - (call.value / 5 / 3) << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  stor9 += (call.value / 5) - (call.value / 5 / 3) << 64 / totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (call.value / 5) - (call.value / 5 / 3) << 64 / totalSupply) + (totalSupply * (call.value / 5) - (call.value / 5 / 3) << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=call.value,\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=_referredBy)\n  return 0\n\ndef reinvest(): # not payable\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller])\n  stor5[caller] = 0\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 / 3 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5\n      require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]\n      s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) - stor5[caller] > 2 * 10^18:\n          onlyAmbassadors = 0\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 / 3 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require bool(stor3[caller]) == 1\n          require stor7[caller] + (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] <= 10^18\n          require stor7[caller] + (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] >= stor7[caller]\n          stor7[caller] = stor7[caller] + (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 / 3 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 >= ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) - ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 / 3)\n  if totalSupply <= 0:\n      totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n      balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 << 64)\n  else:\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      totalSupply = t - 100000000000 * 10^18 / 10^10\n      require totalSupply\n      stor9 += (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 << 64 / totalSupply\n      require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n      balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 << 64 / totalSupply) + (totalSupply * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=(Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller],\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n  log onReinvestment(\n        address customerAddress=(Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller],\n        uint256 ethereumReinvested=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller)\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: # Palkeoramix decompiler. \n\nconst decimals = 18\nconst totalEthereumBalance = eth.balance(this.address)\n\ndef storage:\n  name is array of uint256 at storage 0\n  symbol is array of uint256 at storage 1\n  stakingRequirement is uint256 at storage 2\n  stor3 is mapping of uint8 at storage 3\n  balanceOf is mapping of uint256 at storage 4\n  stor5 is mapping of uint256 at storage 5\n  stor6 is mapping of uint256 at storage 6\n  stor7 is mapping of uint256 at storage 7\n  totalSupply is uint256 at storage 8\n  stor9 is uint256 at storage 9\n  stor10 is mapping of uint8 at storage 10\n  onlyAmbassadors is uint8 at storage 11\n  stor1455660694011640316922617296525376801425655685718 is mapping of uint8 at storage 0xfefa15424fd45bafe123163b2ad8d509c1256256\n\ndef name(): # not payable\n  return name[0 len name.length]\n\ndef totalSupply(): # not payable\n  return totalSupply\n\ndef onlyAmbassadors(): # not payable\n  return bool(onlyAmbassadors)\n\ndef administrators(bytes32 _param1): # not payable\n  return bool(stor10[_param1])\n\ndef stakingRequirement(): # not payable\n  return stakingRequirement\n\ndef balanceOf(address account): # not payable\n  return balanceOf[address(account)]\n\ndef myTokens(): # not payable\n  return balanceOf[caller]\n\ndef symbol(): # not payable\n  return symbol[0 len symbol.length]\n\n#\n#  Regular functions\n#\n\ndef disableInitialStage(): # not payable\n  require stor10[caller]\n  onlyAmbassadors = 0\n\ndef setStakingRequirement(uint256 _amountOfTokens): # not payable\n  require stor10[caller]\n  stakingRequirement = _amountOfTokens\n\ndef setName(string _name): # not payable\n  require stor10[caller]\n  name[] = Array(len=_name.length, data=_name[all])\n\ndef setAdministrator(bytes32 _identifier, bool _status): # not payable\n  require stor10[caller]\n  stor10[_identifier] = uint8(_status)\n\ndef setSymbol(string _symbol): # not payable\n  require stor10[caller]\n  symbol[] = Array(len=_symbol.length, data=_symbol[all])\n\ndef BlueChip(): # not payable\n  stor10[('name', 'storFEFA', 1455660694011640316922617296525376801425655685718)] = 1\n  stor3[0x895a6e21acc9f4e81b77cf28a6599ff3805dc81e] = 1\n  stor3[0xfefa15424fd45bafe123163b2ad8d509c1256256] = 1\n\ndef dividendsOf(address _customerAddress): # not payable\n  return (Mask(192, 64, (stor9 * balanceOf[address(_customerAddress)]) - stor6[address(_customerAddress)]) >> 64)\n\ndef myDividends(bool _includeReferralBonus): # not payable\n  if _includeReferralBonus:\n      return ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller])\n  return (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64)\n\ndef sellPrice(): # not payable\n  if not totalSupply:\n      return (25 * 10^6 * 3600)\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 5 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) - ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 5))\n\ndef buyPrice(): # not payable\n  if not totalSupply:\n      return 11 * 10^10\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 5) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 5))\n\ndef withdraw(): # not payable\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller])\n  stor5[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef calculateTokensReceived(uint256 _ethereumToSpend): # not payable\n  require _ethereumToSpend / 5 <= _ethereumToSpend\n  s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n  t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n  while s < t:\n      require s\n      s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n      t = s\n      continue \n  if 100000000000 * 10^18 <= t:\n      return ((t - 100000000000 * 10^18 / 10^10) - totalSupply)\n  revert\n\ndef calculateEthereumReceived(uint256 _tokensToSell): # not payable\n  require _tokensToSell <= totalSupply\n  require 10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell)\n  require (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 5 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18\n  return (((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 5))\n\ndef sell(uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require amount <= balanceOf[caller]\n  require 10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount)\n  require (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5 <= (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18\n  require amount <= totalSupply\n  totalSupply -= amount\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  stor6[caller] = stor6[caller] - (stor9 * amount) - (((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5) << 64)\n  if totalSupply > 0:\n      require totalSupply\n      require stor9 + ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5 << 64 / totalSupply) >= stor9\n      stor9 += (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5 << 64 / totalSupply\n  log onTokenSell(\n        address customerAddress=amount,\n        uint256 tokensBurned=((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 5),\n        uint256 ethereumEarned=caller)\n\ndef transfer(address recipient, uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require not onlyAmbassadors\n  require amount <= balanceOf[caller]\n  if (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0:\n      require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0\n      stor6[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller])\n      stor5[caller] = 0\n      call caller with:\n         value (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      log onWithdraw(\n            address customerAddress=((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]),\n            uint256 ethereumWithdrawn=caller)\n  require amount / 5 <= amount\n  require 10^10 * ((amount / 5) + 10^18)^2 + -(amount / 5) - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * amount / 5) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 5)\n  require amount / 5 <= totalSupply\n  totalSupply -= amount / 5\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  require balanceOf[address(recipient)] + amount - (amount / 5) >= balanceOf[address(recipient)]\n  balanceOf[address(recipient)] = balanceOf[address(recipient)] + amount - (amount / 5)\n  stor6[caller] += -1 * stor9 * amount\n  stor6[address(recipient)] = stor6[address(recipient)] + (amount * stor9) - (amount / 5 * stor9)\n  require totalSupply\n  require stor9 + ((25 * 10^6 * 3600 * amount / 5) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 5) - (10^10 * ((amount / 5) + 10^18)^2 + -(amount / 5) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply) >= stor9\n  stor9 += (25 * 10^6 * 3600 * amount / 5) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 5) - (10^10 * ((amount / 5) + 10^18)^2 + -(amount / 5) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply\n  log Transfer(\n        address from=(amount - (amount / 5)),\n        address to=caller,\n        uint256 value=recipient)\n  return 1\n\ndef exit(): # not payable\n  if balanceOf[caller] > 0:\n      require balanceOf[caller] > 0\n      require balanceOf[caller] <= balanceOf[caller]\n      require 10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller])\n      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n      require balanceOf[caller] <= totalSupply\n      totalSupply -= balanceOf[caller]\n      require balanceOf[caller] <= balanceOf[caller]\n      balanceOf[caller] = 0\n      stor6[caller] = stor6[caller] - (stor9 * balanceOf[caller]) - (((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5) << 64)\n      if totalSupply > 0:\n          require totalSupply\n          require stor9 + ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5 << 64 / totalSupply) >= stor9\n          stor9 += (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5 << 64 / totalSupply\n      log onTokenSell(\n            address customerAddress=balanceOf[caller],\n            uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 5),\n            uint256 ethereumEarned=caller)\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller])\n  stor5[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef _fallback(?) payable: # default function\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require call.value / 5 / 3 <= call.value / 5\n      require call.value / 5 <= call.value\n      s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - call.value > 2 * 10^18:\n          onlyAmbassadors = 0\n          require call.value / 5 / 3 <= call.value / 5\n          require call.value / 5 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require bool(stor3[caller]) == 1\n          require stor7[caller] + call.value <= 10^18\n          require stor7[caller] + call.value >= stor7[caller]\n          stor7[caller] += call.value\n          require call.value / 5 / 3 <= call.value / 5\n          require call.value / 5 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  require call.value / 5 >= (call.value / 5) - (call.value / 5 / 3)\n  if totalSupply <= 0:\n      totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n      balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 5 << 64)\n  else:\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      totalSupply = t - 100000000000 * 10^18 / 10^10\n      require totalSupply\n      stor9 += call.value / 5 << 64 / totalSupply\n      require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n      balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 5 << 64 / totalSupply) + (totalSupply * call.value / 5 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=call.value,\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n\ndef buy(address _referredBy) payable: \n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require call.value / 5 / 3 <= call.value / 5\n      require call.value / 5 <= call.value\n      s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - call.value > 2 * 10^18:\n          onlyAmbassadors = 0\n          require call.value / 5 / 3 <= call.value / 5\n          require call.value / 5 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require bool(stor3[caller]) == 1\n          require stor7[caller] + call.value <= 10^18\n          require stor7[caller] + call.value >= stor7[caller]\n          stor7[caller] += call.value\n          require call.value / 5 / 3 <= call.value / 5\n          require call.value / 5 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  if not _referredBy:\n      require call.value / 5 >= (call.value / 5) - (call.value / 5 / 3)\n      if totalSupply <= 0:\n          totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 5 << 64)\n      else:\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          totalSupply = t - 100000000000 * 10^18 / 10^10\n          require totalSupply\n          stor9 += call.value / 5 << 64 / totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 5 << 64 / totalSupply) + (totalSupply * call.value / 5 << 64 / totalSupply)\n  else:\n      if _referredBy == caller:\n          require call.value / 5 >= (call.value / 5) - (call.value / 5 / 3)\n          if totalSupply <= 0:\n              totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 5 << 64)\n          else:\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              stor9 += call.value / 5 << 64 / totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 5 << 64 / totalSupply) + (totalSupply * call.value / 5 << 64 / totalSupply)\n      else:\n          if balanceOf[address(_referredBy)] < stakingRequirement:\n              require call.value / 5 >= (call.value / 5) - (call.value / 5 / 3)\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 5 << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  stor9 += call.value / 5 << 64 / totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 5 << 64 / totalSupply) + (totalSupply * call.value / 5 << 64 / totalSupply)\n          else:\n              require stor5[address(_referredBy)] + (call.value / 5 / 3) >= stor5[address(_referredBy)]\n              stor5[address(_referredBy)] += call.value / 5 / 3\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((call.value / 5) - (call.value / 5 / 3) << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  stor9 += (call.value / 5) - (call.value / 5 / 3) << 64 / totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (call.value / 5) - (call.value / 5 / 3) << 64 / totalSupply) + (totalSupply * (call.value / 5) - (call.value / 5 / 3) << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=call.value,\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=_referredBy)\n  return 0\n\ndef reinvest(): # not payable\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller])\n  stor5[caller] = 0\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 / 3 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5\n      require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]\n      s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) - stor5[caller] > 2 * 10^18:\n          onlyAmbassadors = 0\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 / 3 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require bool(stor3[caller]) == 1\n          require stor7[caller] + (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] <= 10^18\n          require stor7[caller] + (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] >= stor7[caller]\n          stor7[caller] = stor7[caller] + (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 / 3 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller]\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 >= ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5) - ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 / 3)\n  if totalSupply <= 0:\n      totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n      balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 << 64)\n  else:\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      totalSupply = t - 100000000000 * 10^18 / 10^10\n      require totalSupply\n      stor9 += (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 << 64 / totalSupply\n      require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n      balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 << 64 / totalSupply) + (totalSupply * (Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller] / 5 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=(Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller],\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n  log onReinvestment(\n        address customerAddress=(Mask(192, 64, (stor9 * balanceOf[caller]) - stor6[caller]) >> 64) + stor5[caller],\n        uint256 ethereumReinvested=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller)\n\n.",
	"status": "1",
	"time_cost": 35.125985860824585,
	"usage": {
		"completion_tokens": 572,
		"prompt_tokens": 14044,
		"total_tokens": 14616
	}
}