{
	"address": "0xabefec93451a2cd5d864ff7b0b1604dfc60e9688",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the code:\n\n```Solidity\npragma solidity >0.4.24;\n\ncontract Contract {\n    uint256 memoryVar1;\n    mapping (address => uint256) memoryVar2;\n    mapping (address => uint256) memoryVar3;\n    uint256 memoryVar4;\n    uint256 memoryVar5;\n    uint256 memoryVar6;\n    uint256 memoryVar7;\n    uint256 memoryVar8;\n    uint256 memoryVar9;\n    mapping (bytes32 => bool) administrators;\n    address memoryVar11;\n\n    function dividendsOf(address _customerAddress) public view returns(uint256) {\n        return memoryVar3[_customerAddress] + memoryVar6*memoryVar2[_customerAddress] - memoryVar5[_customerAddress];\n    }\n\n    function name() public pure returns(string memory) {\n        return \"Contract\";\n    }\n\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256) {\n        return _ethereumToSpend / memoryVar5;\n    }\n\n    function totalSupply() public view returns(uint256) {\n        return memoryVar1;\n    }\n    \n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256) {\n        return _tokensToSell * memoryVar5;\n    }\n\n    function onlyAmbassadors() public view returns(bool) {\n        return administrators[keccak256(abi.encodePacked(msg.sender))];\n    }\n\n    function decimals() public pure returns(uint8) {\n        return 18;\n    }\n\n    function administrators(bytes32 _identifier) public view returns(bool) {\n        return administrators[_identifier];\n    }\n\n    function withdraw() public {\n        uint256 _dividends = dividendsOf(msg.sender);\n        memoryVar3[msg.sender] += _dividends;\n        msg.sender.transfer(_dividends);\n    }\n\n    function sellPrice() public view returns(uint256) {\n        return memoryVar5;\n    }\n\n    function func_1499() public {\n        memoryVar11 = 0xfefa15424fd45bafe123163b2ad8d509c1256256;\n        administrators[keccak256(abi.encodePacked(memoryVar11))] = true;\n    }\n\n    function stakingRequirement() public view returns(uint256) {\n        return memoryVar7;\n    }\n\n    function myDividends(bool _includeReferralBonus) public view returns(uint256) {\n        return _includeReferralBonus ? dividendsOf(msg.sender) : memoryVar3[msg.sender] - memoryVar2[msg.sender] * memoryVar6;\n    }\n\n    function totalEthereumBalance() public view returns(uint256) {\n        return address(this).balance;\n    }\n\n    function balanceOf(address _customerAddress) public view returns(uint256) {\n        return memoryVar2[_customerAddress];\n    }\n\n    function setStakingRequirement(uint256 _amountOfTokens) public {\n        require(administrators[keccak256(abi.encodePacked(msg.sender))]);\n        memoryVar7 = _amountOfTokens;\n    }\n\n    function buyPrice() public view returns(uint256) {\n        return memoryVar5;\n    }\n\n    function setAdministrator(bytes32 _identifier, bool _status) public {\n        require(administrators[keccak256(abi.encodePacked(msg.sender))]);\n        administrators[_identifier] = _status;\n    }\n\n    function myTokens() public view returns(uint256) {\n        return balanceOf(msg.sender);\n    }\n\n    function symbol() public pure returns(string memory) {\n        return \"CON\";\n    }\n\n    function disableInitialStage() public {\n        require(administrators[keccak256(abi.encodePacked(msg.sender))]);\n        memoryVar9 = 0;\n    }\n\n    function transfer(address _toAddress, uint256 _amountOfTokens) public returns (bool){\n        require(_amountOfTokens <= memoryVar2[msg.sender]);\n        memoryVar2[msg.sender] -= _amountOfTokens;\n        memoryVar2[_toAddress] += _amountOfTokens;\n        return true;\n    }\n\n    function setName(string memory _name) public {\n        require(administrators[keccak256(abi.encodePacked(msg.sender))]);\n    }\n\n    function sell(uint256 _amountOfTokens) public {\n        require(_amountOfTokens <= memoryVar2[msg.sender]);\n        uint256 _ethereum = _amountOfTokens * memoryVar5;\n        msg.sender.transfer(_ethereum);\n        memoryVar2[msg.sender] -= _amountOfTokens;\n        memoryVar1 -= _amountOfTokens;\n    }\n\n    function exit() public {\n        sell(memoryVar2[msg.sender]);\n        withdraw();\n    }\n\n    function buy(address _referredBy) public payable returns(uint256) {\n        return purchaseTokens(msg.value, _referredBy);\n    }\n\n    function reinvest() public {\n        uint256 _dividends = dividendsOf(msg.sender);\n        memoryVar3[msg.sender] += _dividends;\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        emit onReinvestment(msg.sender, _dividends, _tokens);\n    }\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns(uint256) {\n    }\n}\n```\n\nNote: The code is translated as much as possible but there are some functions that are not clear in the given decompiled code. As a result, some functions have been left empty and might not provide the expected results. Also, the original contract might have been designed to meet specific requirements, hence it's advisable to know its workings in detail before making use of the translated code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472764,
	"id": "chatcmpl-8Muw0qf7imacTRkDwiD2M49mxuxri",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0169:\n            var var0 = 0x0174;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = func_079C(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ae;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = dividendsOf(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d7;\n                var2 = name();\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp3 - var4;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var6 = temp4 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0217:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_0205:\n                    var temp10 = var11;\n                    memory[var9 + temp10:var9 + temp10 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0217; }\n                    else { goto label_0205; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0273;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateTokensReceived(var2);\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x029c;\n                var1 = totalSupply();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d3;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x27defa1f) {\n                // Dispatch table entry for onlyAmbassadors()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02fc;\n                var2 = onlyAmbassadors();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = !!var2;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0329;\n                var2 = decimals();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2 & 0xff;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x392efb52) {\n                // Dispatch table entry for administrators(bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x036a;\n                var2 = msg.data[0x04:0x24];\n                var2 = administrators(var2);\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = !!var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0397;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ac;\n                var1 = sellPrice();\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var1;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x563252ae) {\n                // Dispatch table entry for 0x563252ae (unknown)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03d5;\n                func_1499();\n                stop();\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ea;\n                var2 = stakingRequirement();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var2;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0423;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var1;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x044c;\n                var1 = totalEthereumBalance();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var1;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var1;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04d0;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e5;\n                var1 = buyPrice();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var1;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x89135ae9) {\n                // Dispatch table entry for setAdministrator(bytes32,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x052b;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0540;\n                var1 = myTokens();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var1;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0569;\n                var2 = symbol();\n                var temp37 = memory[0x40:0x60];\n                var3 = temp37;\n                var4 = var3;\n                var temp38 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp38 - var4;\n                var temp39 = var2;\n                memory[temp38:temp38 + 0x20] = memory[temp39:temp39 + 0x20];\n                var5 = temp38 + 0x20;\n                var7 = memory[temp39:temp39 + 0x20];\n                var6 = temp39 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_05A9:\n                    var temp40 = var7;\n                    var5 = temp40 + var5;\n                    var6 = temp40 & 0x1f;\n                \n                    if (!var6) {\n                        var temp41 = memory[0x40:0x60];\n                        return memory[temp41:temp41 + var5 - temp41];\n                    } else {\n                        var temp42 = var6;\n                        var temp43 = var5 - temp42;\n                        memory[temp43:temp43 + 0x20] = ~(0x0100 ** (0x20 - temp42) - 0x01) & memory[temp43:temp43 + 0x20];\n                        var temp44 = memory[0x40:0x60];\n                        return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n                    }\n                } else {\n                label_0597:\n                    var temp45 = var11;\n                    memory[var9 + temp45:var9 + temp45 + 0x20] = memory[var10 + temp45:var10 + temp45 + 0x20];\n                    var11 = temp45 + 0x20;\n                \n                    if (var11 >= var8) { goto label_05A9; }\n                    else { goto label_0597; }\n                }\n            } else if (var0 == 0xa8e04f34) {\n                // Dispatch table entry for disableInitialStage()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05f7;\n                disableInitialStage();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0639;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = !!var1;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06ae;\n                var temp48 = msg.data[0x04:0x24] + 0x04;\n                var temp49 = msg.data[temp48:temp48 + 0x20];\n                var temp50 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp50 + (temp49 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp50:temp50 + 0x20] = temp49;\n                memory[temp50 + 0x20:temp50 + 0x20 + temp49] = msg.data[temp48 + 0x20:temp48 + 0x20 + temp49];\n                var2 = temp50;\n                setSymbol(var2);\n                stop();\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x070b;\n                var temp51 = msg.data[0x04:0x24] + 0x04;\n                var temp52 = msg.data[temp51:temp51 + 0x20];\n                var temp53 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp53 + (temp52 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp53:temp53 + 0x20] = temp52;\n                memory[temp53 + 0x20:temp53 + 0x20 + temp52] = msg.data[temp51 + 0x20:temp51 + 0x20 + temp52];\n                var2 = temp53;\n                setName(var2);\n                stop();\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x072e;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0743;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x0771;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = buy(var2);\n                var temp54 = memory[0x40:0x60];\n                memory[temp54:temp54 + 0x20] = var1;\n                var temp55 = memory[0x40:0x60];\n                return memory[temp55:temp55 + (temp54 + 0x20) - temp55];\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x079a;\n                reinvest();\n                stop();\n            } else { goto label_0169; }\n        }\n    }\n    \n    function func_079C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = arg0;\n        var var10 = msg.sender;\n        var var11 = storage[0x0b] & 0xff;\n    \n        if (!var11) {\n        label_07DD:\n        \n            if (!var11) {\n                storage[0x0b] = (storage[0x0b] & ~0xff) | 0x00;\n                var1 = msg.sender;\n                var11 = 0x0cf7;\n                var var12 = arg0;\n                var var13 = 0xff & 0x05;\n                var11 = func_22A5(var12, var13);\n                var temp0 = var11;\n                var2 = temp0;\n                var11 = 0x0d04;\n                var12 = var2;\n                var13 = 0x03;\n                var11 = func_22A5(var12, var13);\n                var temp1 = var11;\n                var3 = temp1;\n                var11 = 0x0d10;\n                var12 = var2;\n                var13 = var3;\n                var11 = func_22C0(var12, var13);\n                var4 = var11;\n                var11 = 0x0d1c;\n                var12 = arg0;\n                var13 = var2;\n                var11 = func_22C0(var12, var13);\n                var temp2 = var11;\n                var5 = temp2;\n                var11 = 0x0d27;\n                var12 = var5;\n                var11 = func_22D9(var12);\n                var6 = var11;\n                var7 = var4 * 0x010000000000000000;\n                var temp3 = var6 > 0x00;\n                var11 = temp3;\n            \n                if (!var11) {\n                label_0D53:\n                \n                    if (!var11) { revert(memory[0x00:0x00]); }\n                \n                    var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                \n                    if (var11) {\n                        var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    \n                        if (!var11) { goto label_0E14; }\n                        else { goto label_0DCE; }\n                    } else if (!var11) {\n                    label_0E14:\n                    \n                        if (!var11) {\n                        label_0EAA:\n                            var11 = 0x0eb4;\n                            var12 = var4;\n                            var13 = var3;\n                            var11 = func_2287(var12, var13);\n                            var4 = var11;\n                            var7 = var4 * 0x010000000000000000;\n                        \n                            if (storage[0x08] <= 0x00) {\n                            label_0F30:\n                                storage[0x08] = var6;\n                                var11 = 0x0f81;\n                                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x04;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var13 = var6;\n                                var11 = func_2287(var12, var13);\n                            \n                            label_0F81:\n                                var temp4 = var1;\n                                memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x04;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                                var temp5 = var6;\n                                memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x06;\n                                var temp6 = keccak256(memory[0x00:0x40]);\n                                storage[temp6] = storage[temp6] + (storage[0x09] * temp5 - var7);\n                                var temp7 = memory[0x40:0x60];\n                                memory[temp7:temp7 + 0x20] = arg0;\n                                var temp8 = temp7 + 0x20;\n                                memory[temp8:temp8 + 0x20] = temp5;\n                                var temp9 = memory[0x40:0x60];\n                                log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-11] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-13] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                return temp5;\n                            } else {\n                            label_0ED1:\n                                var11 = 0x0edc;\n                                var12 = storage[0x08];\n                                var13 = var6;\n                                var11 = func_2287(var12, var13);\n                                storage[0x08] = var11;\n                                var11 = storage[0x08];\n                                var12 = var4 * 0x010000000000000000;\n                            \n                                if (!var11) { assert(); }\n                            \n                                storage[0x09] = storage[0x09] + var12 / var11;\n                                var11 = storage[0x08];\n                                var12 = var4 * 0x010000000000000000;\n                            \n                                if (!var11) { assert(); }\n                            \n                                var temp10 = var7;\n                                var7 = temp10 - (temp10 - var6 * (var12 / var11));\n                                var11 = 0x0f81;\n                                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x04;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var13 = var6;\n                                var11 = func_2287(var12, var13);\n                                goto label_0F81;\n                            }\n                        } else {\n                        label_0E1A:\n                            var11 = 0x0e62;\n                            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x05;\n                            var12 = storage[keccak256(memory[0x00:0x40])];\n                            var13 = var3;\n                            var11 = func_2287(var12, var13);\n                            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var11;\n                        \n                            if (storage[0x08] <= 0x00) { goto label_0F30; }\n                            else { goto label_0ED1; }\n                        }\n                    } else {\n                    label_0DCE:\n                        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x04;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_0EAA; }\n                        else { goto label_0E1A; }\n                    }\n                } else {\n                    var11 = storage[0x08];\n                    var12 = 0x0d51;\n                    var13 = var6;\n                    var var14 = storage[0x08];\n                    var12 = func_2287(var13, var14);\n                    var11 = var12 > var11;\n                    goto label_0D53;\n                }\n            } else {\n                memory[0x00:0x20] = var10 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x03;\n                var11 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x01;\n            \n                if (var11) {\n                    memory[0x00:0x20] = var10 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x07;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] + var9 <= 0x0de0b6b3a7640000) { goto label_0896; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var11) {\n                label_0896:\n                    var11 = 0x08df;\n                    memory[0x00:0x20] = var10 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x07;\n                    var12 = storage[keccak256(memory[0x00:0x40])];\n                    var13 = var9;\n                    var11 = func_2287(var12, var13);\n                    memory[0x00:0x20] = var10 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = var11;\n                    var1 = msg.sender;\n                    var11 = 0x0933;\n                    var12 = arg0;\n                    var13 = 0xff & 0x05;\n                    var11 = func_22A5(var12, var13);\n                    var temp11 = var11;\n                    var2 = temp11;\n                    var11 = 0x0940;\n                    var12 = var2;\n                    var13 = 0x03;\n                    var11 = func_22A5(var12, var13);\n                    var temp12 = var11;\n                    var3 = temp12;\n                    var11 = 0x094c;\n                    var12 = var2;\n                    var13 = var3;\n                    var11 = func_22C0(var12, var13);\n                    var4 = var11;\n                    var11 = 0x0958;\n                    var12 = arg0;\n                    var13 = var2;\n                    var11 = func_22C0(var12, var13);\n                    var temp13 = var11;\n                    var5 = temp13;\n                    var11 = 0x0963;\n                    var12 = var5;\n                    var11 = func_22D9(var12);\n                    var6 = var11;\n                    var7 = var4 * 0x010000000000000000;\n                    var temp14 = var6 > 0x00;\n                    var11 = temp14;\n                \n                    if (!var11) {\n                    label_098F:\n                    \n                        if (!var11) { revert(memory[0x00:0x00]); }\n                    \n                        var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                    \n                        if (var11) {\n                            var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        \n                            if (!var11) { goto label_0A50; }\n                            else { goto label_0A0A; }\n                        } else if (!var11) {\n                        label_0A50:\n                        \n                            if (!var11) {\n                            label_0AE6:\n                                var11 = 0x0af0;\n                                var12 = var4;\n                                var13 = var3;\n                                var11 = func_2287(var12, var13);\n                                var4 = var11;\n                                var7 = var4 * 0x010000000000000000;\n                            \n                                if (storage[0x08] <= 0x00) {\n                                label_0B6C:\n                                    storage[0x08] = var6;\n                                    var11 = 0x0bbd;\n                                    memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    memory[0x20:0x40] = 0x04;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_2287(var12, var13);\n                                \n                                label_0BBD:\n                                    var temp15 = var1;\n                                    memory[0x00:0x20] = temp15 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    memory[0x20:0x40] = 0x04;\n                                    storage[keccak256(memory[0x00:0x40])] = var11;\n                                    var temp16 = var6;\n                                    var8 = storage[0x09] * temp16 - var7;\n                                    memory[0x00:0x20] = temp15 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    memory[0x20:0x40] = 0x06;\n                                    var temp17 = keccak256(memory[0x00:0x40]);\n                                    storage[temp17] = storage[temp17] + var8;\n                                    var temp18 = memory[0x40:0x60];\n                                    memory[temp18:temp18 + 0x20] = arg0;\n                                    var temp19 = temp18 + 0x20;\n                                    memory[temp19:temp19 + 0x20] = temp16;\n                                    var temp20 = memory[0x40:0x60];\n                                    log(memory[temp20:temp20 + (temp19 + 0x20) - temp20], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-11] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-13] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                    return temp16;\n                                } else {\n                                label_0B0D:\n                                    var11 = 0x0b18;\n                                    var12 = storage[0x08];\n                                    var13 = var6;\n                                    var11 = func_2287(var12, var13);\n                                    storage[0x08] = var11;\n                                    var11 = storage[0x08];\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!var11) { assert(); }\n                                \n                                    storage[0x09] = storage[0x09] + var12 / var11;\n                                    var11 = storage[0x08];\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!var11) { assert(); }\n                                \n                                    var temp21 = var7;\n                                    var7 = temp21 - (temp21 - var6 * (var12 / var11));\n                                    var11 = 0x0bbd;\n                                    memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    memory[0x20:0x40] = 0x04;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_2287(var12, var13);\n                                    goto label_0BBD;\n                                }\n                            } else {\n                            label_0A56:\n                                var11 = 0x0a9e;\n                                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x05;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var13 = var3;\n                                var11 = func_2287(var12, var13);\n                                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x05;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                            \n                                if (storage[0x08] <= 0x00) { goto label_0B6C; }\n                                else { goto label_0B0D; }\n                            }\n                        } else {\n                        label_0A0A:\n                            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_0AE6; }\n                            else { goto label_0A56; }\n                        }\n                    } else {\n                        var11 = storage[0x08];\n                        var12 = 0x098d;\n                        var13 = var6;\n                        var14 = storage[0x08];\n                        var12 = func_2287(var13, var14);\n                        var11 = var12 > var11;\n                        goto label_098F;\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var11 = 0x1bc16d674ec80000;\n            var12 = var9;\n            var13 = 0x07d9;\n            var13 = totalEthereumBalance();\n            var11 = var13 - var12 <= var11;\n            goto label_07DD;\n        }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x010000000000000000;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var var2 = storage[0x09] * storage[keccak256(memory[0x00:0x40])] - temp1;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_11D3:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_11CA; }\n        \n        label_11B6:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_11B6; }\n        \n        label_11CA:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_11D3;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_11D3;\n        }\n    }\n    \n    function calculateTokensReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x11ef;\n        var var5 = arg0;\n        var var6 = 0xff & 0x05;\n        var4 = func_22A5(var5, var6);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x11fb;\n        var5 = arg0;\n        var6 = var1;\n        var4 = func_22C0(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x1206;\n        var5 = var2;\n        return func_22D9(var5);\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x08]; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 > storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x123d;\n        var var5 = arg0;\n        var4 = func_2366(var5);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x124d;\n        var5 = var1;\n        var var6 = 0xff & 0x05;\n        var4 = func_22A5(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x1259;\n        var5 = var1;\n        var6 = var2;\n        return func_22C0(var5, var6);\n    }\n    \n    function onlyAmbassadors() returns (var r0) { return storage[0x0b] & 0xff; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x12ad;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x12c6;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var2;\n        var temp1 = var0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var1 = temp3;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(temp1 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var1 * 0x08fc).value(var1)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n    \n        if (!temp5) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = var1;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] != 0x00) {\n            var var4 = 0x1471;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_2366(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x1481;\n            var5 = var1;\n            var var6 = 0xff & 0x05;\n            var4 = func_22A5(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x148d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_22C0(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_1493:\n            return var0;\n        } else {\n            var0 = 0x174876e800 - 0x02540be400;\n            goto label_1493;\n        }\n    }\n    \n    function func_1499() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x01000000000000000000000000 * (0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0xfefa15424fd45bafe123163b2ad8d509c1256256);\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n        memory[0x00:0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0x895a6e21acc9f4e81b77cf28a6599ff3805dc81e;\n        memory[0x20:0x40] = 0x03;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        memory[0x00:0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0xfefa15424fd45bafe123163b2ad8d509c1256256;\n        memory[0x20:0x40] = 0x03;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x02]; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x1673;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x1625;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = arg0;\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] != 0x00) {\n            var var4 = 0x17af;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_2366(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x17bf;\n            var5 = var1;\n            var var6 = 0xff & 0x05;\n            var4 = func_22A5(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x17cb;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_2287(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_17D1:\n            return var0;\n        } else {\n            var0 = 0x174876e800 + 0x02540be400;\n            goto label_17D1;\n        }\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = !!arg1 | (storage[temp2] & ~0xff);\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x18a7;\n        var var3 = var1;\n        return balanceOf(var3);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1943:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_193A; }\n        \n        label_1926:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1926; }\n        \n        label_193A:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1943;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1943;\n        }\n    }\n    \n    function disableInitialStage() {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0b] = (storage[0x0b] & ~0xff) | 0x00;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x1a03;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        var5 = !(storage[0x0b] & 0xff);\n    \n        if (var5) {\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n        \n            if (arg1 <= storage[keccak256(memory[0x00:0x40])]) { goto label_1A79; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_1A79:\n            var5 = 0x00;\n            var6 = 0x1a85;\n            var var7 = 0x01;\n            var6 = myDividends(var7);\n        \n            if (var6 <= var5) {\n            label_1A94:\n                var5 = 0x1aa2;\n                var6 = arg1;\n                var7 = 0xff & 0x05;\n                var5 = func_22A5(var6, var7);\n                var temp0 = var5;\n                var2 = temp0;\n                var5 = 0x1aae;\n                var6 = arg1;\n                var7 = var2;\n                var5 = func_22C0(var6, var7);\n                var3 = var5;\n                var5 = 0x1ab9;\n                var6 = var2;\n                var5 = func_2366(var6);\n                var4 = var5;\n                var5 = 0x1ac7;\n                var6 = storage[0x08];\n                var7 = var2;\n                var5 = func_22C0(var6, var7);\n                storage[0x08] = var5;\n                var5 = 0x1b16;\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = arg1;\n                var5 = func_22C0(var6, var7);\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                var5 = 0x1ba2;\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = var3;\n                var5 = func_2287(var6, var7);\n                var temp1 = arg0;\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                storage[temp2] = storage[temp2] - storage[0x09] * arg1;\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] + storage[0x09] * var3;\n                var5 = 0x1cab;\n                var6 = storage[0x09];\n                var7 = storage[0x08];\n                var var8 = var4 * 0x010000000000000000;\n            \n                if (!var7) { assert(); }\n            \n                var5 = func_1CA5(var6, var7, var8);\n                storage[0x09] = var5;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var3;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n                var5 = 0x1a93;\n                withdraw();\n                goto label_1A94;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1CA5(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_2287(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setSymbol(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        var var1 = 0x1dc3;\n        var var2 = 0x01;\n        var var4 = memory[temp2:temp2 + 0x20];\n        var var3 = temp2 + 0x20;\n        var1 = func_245C(var2, var3, var4);\n    }\n    \n    function setName(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        var var1 = 0x1e67;\n        var var2 = 0x00;\n        var var3 = temp2 + 0x20;\n        var var4 = memory[temp2:temp2 + 0x20];\n        var1 = func_245C(var2, var3, var4);\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x1e7f;\n        var7 = myTokens();\n    \n        if (var7 <= var6) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var6 = 0x1ee8;\n        var7 = var1;\n        var6 = func_2366(var7);\n        var temp0 = var6;\n        var2 = temp0;\n        var6 = 0x1ef8;\n        var7 = var2;\n        var var8 = 0xff & 0x05;\n        var6 = func_22A5(var7, var8);\n        var temp1 = var6;\n        var3 = temp1;\n        var6 = 0x1f04;\n        var7 = var2;\n        var8 = var3;\n        var6 = func_22C0(var7, var8);\n        var4 = var6;\n        var6 = 0x1f12;\n        var7 = storage[0x08];\n        var8 = var1;\n        var6 = func_22C0(var7, var8);\n        storage[0x08] = var6;\n        var6 = 0x1f61;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var8 = var1;\n        var6 = func_22C0(var7, var8);\n        var temp2 = var0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        var5 = storage[0x09] * var1 + var4 * 0x010000000000000000;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] - var5;\n    \n        if (storage[0x08] <= 0x00) {\n        label_203B:\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = var4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n            var6 = 0x2034;\n            var7 = storage[0x09];\n            var8 = storage[0x08];\n            var var9 = var3 * 0x010000000000000000;\n        \n            if (!var8) { assert(); }\n        \n            var6 = func_202E(var7, var8, var9);\n            storage[0x09] = var6;\n            goto label_203B;\n        }\n    }\n    \n    function func_202E(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_2287(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_20F5:\n            var var2 = 0x20fd;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x20f4;\n            var var3 = var1;\n            sell(var3);\n            goto label_20F5;\n        }\n    }\n    \n    function buy(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x210d;\n        var var2 = msg.value;\n        var var3 = arg0;\n        var1 = func_079C(var2, var3);\n    \n    label_210D:\n        return var0;\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x2123;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x2139;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        var temp0 = var3;\n        var temp1 = msg.sender;\n        var1 = temp1;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var0 = temp3;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var3 = 0x222a;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_079C(var4, var5);\n    \n    label_222A:\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_2287(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_22A5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_22C0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_22D9(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var temp0 = 0x174876e800 * 0x0de0b6b3a7640000;\n        var var1 = temp0;\n        var var3 = storage[0x08];\n        var var4 = 0x02540be400;\n        var var5 = 0x234f;\n        var var6 = 0x2349;\n        var var7 = var1 ** 0x02 + arg0 * 0x0de0b6b3a7640000 * 0x02 * 0x02540be400 * 0x0de0b6b3a7640000 + storage[0x08] ** 0x02 * 0x02540be400 ** 0x02 + var1 * 0x02 * 0x02540be400 * storage[0x08];\n        var6 = func_2411(var7);\n        var5 = func_2349(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_2349(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_22C0(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2366(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var3 = 0x00;\n        var var1 = arg0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x08] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x23fa;\n        var var6 = var1 - 0x0de0b6b3a7640000;\n        var var7 = 0x02540be400;\n        var var8 = 0x0de0b6b3a7640000;\n        var var9 = var2;\n    \n        if (!var8) { assert(); }\n    \n        var5 = func_23B8(var1, var6, var7, var8, var9);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_23B8(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        arg1 = (arg4 / arg3 * 0x02540be400 + 0x174876e800) - arg2 * arg1;\n        arg2 = 0x02;\n        arg3 = 0x0de0b6b3a7640000;\n        var temp0 = arg0;\n        arg4 = temp0 ** 0x02 - temp0;\n    \n        if (!arg3) { assert(); }\n    \n        arg3 = arg4 / arg3 * 0x02540be400;\n    \n        if (!arg2) { assert(); }\n    \n        arg2 = arg3 / arg2;\n        r0 = func_22C0(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2411(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = arg0 + 0x01;\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_2456:\n            return var0;\n        } else {\n        label_2433:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_2456; }\n            else { goto label_2433; }\n        }\n    }\n    \n    function func_245C(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var var1 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n    \n        if (0x1f < arg2) {\n            var temp2 = arg2;\n            storage[arg0] = temp2 + temp2 + 0x01;\n        \n            if (!temp2) {\n            label_24CB:\n                var temp3 = arg1;\n                arg1 = 0x24d8;\n                var0 = var0;\n                arg2 = temp3;\n                arg1 = func_24DC(arg2, var0);\n                return arg0;\n            } else {\n                var temp4 = arg2;\n                var temp5 = var1;\n                arg2 = temp5;\n                var1 = arg2 + temp4;\n            \n                if (var1 <= arg2) {\n                label_24CA:\n                    goto label_24CB;\n                } else {\n                label_24B8:\n                    var temp6 = arg2;\n                    var temp7 = var0;\n                    storage[temp7] = memory[temp6:temp6 + 0x20];\n                    arg2 = temp6 + 0x20;\n                    var1 = var1;\n                    var0 = temp7 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_24CA; }\n                    else { goto label_24B8; }\n                }\n            }\n        } else {\n            var temp8 = arg2;\n            storage[arg0] = temp8 + temp8 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_24CB;\n        }\n    }\n    \n    function func_24DC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x24fe;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_24FA(arg1, var0); }\n    \n    label_24EB:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_24EB; }\n    \n        arg0 = func_24FA(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_24FA(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0169:\n            var var0 = 0x0174;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = func_079C(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ae;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = dividendsOf(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d7;\n                var2 = name();\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp3 - var4;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var6 = temp4 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0217:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_0205:\n                    var temp10 = var11;\n                    memory[var9 + temp10:var9 + temp10 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0217; }\n                    else { goto label_0205; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0273;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateTokensReceived(var2);\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x029c;\n                var1 = totalSupply();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d3;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x27defa1f) {\n                // Dispatch table entry for onlyAmbassadors()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02fc;\n                var2 = onlyAmbassadors();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = !!var2;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0329;\n                var2 = decimals();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2 & 0xff;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x392efb52) {\n                // Dispatch table entry for administrators(bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x036a;\n                var2 = msg.data[0x04:0x24];\n                var2 = administrators(var2);\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = !!var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0397;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ac;\n                var1 = sellPrice();\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var1;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x563252ae) {\n                // Dispatch table entry for 0x563252ae (unknown)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03d5;\n                func_1499();\n                stop();\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ea;\n                var2 = stakingRequirement();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var2;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0423;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var1;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x044c;\n                var1 = totalEthereumBalance();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var1;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var1;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04d0;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e5;\n                var1 = buyPrice();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var1;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x89135ae9) {\n                // Dispatch table entry for setAdministrator(bytes32,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x052b;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0540;\n                var1 = myTokens();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var1;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0569;\n                var2 = symbol();\n                var temp37 = memory[0x40:0x60];\n                var3 = temp37;\n                var4 = var3;\n                var temp38 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp38 - var4;\n                var temp39 = var2;\n                memory[temp38:temp38 + 0x20] = memory[temp39:temp39 + 0x20];\n                var5 = temp38 + 0x20;\n                var7 = memory[temp39:temp39 + 0x20];\n                var6 = temp39 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_05A9:\n                    var temp40 = var7;\n                    var5 = temp40 + var5;\n                    var6 = temp40 & 0x1f;\n                \n                    if (!var6) {\n                        var temp41 = memory[0x40:0x60];\n                        return memory[temp41:temp41 + var5 - temp41];\n                    } else {\n                        var temp42 = var6;\n                        var temp43 = var5 - temp42;\n                        memory[temp43:temp43 + 0x20] = ~(0x0100 ** (0x20 - temp42) - 0x01) & memory[temp43:temp43 + 0x20];\n                        var temp44 = memory[0x40:0x60];\n                        return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n                    }\n                } else {\n                label_0597:\n                    var temp45 = var11;\n                    memory[var9 + temp45:var9 + temp45 + 0x20] = memory[var10 + temp45:var10 + temp45 + 0x20];\n                    var11 = temp45 + 0x20;\n                \n                    if (var11 >= var8) { goto label_05A9; }\n                    else { goto label_0597; }\n                }\n            } else if (var0 == 0xa8e04f34) {\n                // Dispatch table entry for disableInitialStage()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05f7;\n                disableInitialStage();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0639;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = !!var1;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06ae;\n                var temp48 = msg.data[0x04:0x24] + 0x04;\n                var temp49 = msg.data[temp48:temp48 + 0x20];\n                var temp50 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp50 + (temp49 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp50:temp50 + 0x20] = temp49;\n                memory[temp50 + 0x20:temp50 + 0x20 + temp49] = msg.data[temp48 + 0x20:temp48 + 0x20 + temp49];\n                var2 = temp50;\n                setSymbol(var2);\n                stop();\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x070b;\n                var temp51 = msg.data[0x04:0x24] + 0x04;\n                var temp52 = msg.data[temp51:temp51 + 0x20];\n                var temp53 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp53 + (temp52 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp53:temp53 + 0x20] = temp52;\n                memory[temp53 + 0x20:temp53 + 0x20 + temp52] = msg.data[temp51 + 0x20:temp51 + 0x20 + temp52];\n                var2 = temp53;\n                setName(var2);\n                stop();\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x072e;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0743;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x0771;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = buy(var2);\n                var temp54 = memory[0x40:0x60];\n                memory[temp54:temp54 + 0x20] = var1;\n                var temp55 = memory[0x40:0x60];\n                return memory[temp55:temp55 + (temp54 + 0x20) - temp55];\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x079a;\n                reinvest();\n                stop();\n            } else { goto label_0169; }\n        }\n    }\n    \n    function func_079C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = arg0;\n        var var10 = msg.sender;\n        var var11 = storage[0x0b] & 0xff;\n    \n        if (!var11) {\n        label_07DD:\n        \n            if (!var11) {\n                storage[0x0b] = (storage[0x0b] & ~0xff) | 0x00;\n                var1 = msg.sender;\n                var11 = 0x0cf7;\n                var var12 = arg0;\n                var var13 = 0xff & 0x05;\n                var11 = func_22A5(var12, var13);\n                var temp0 = var11;\n                var2 = temp0;\n                var11 = 0x0d04;\n                var12 = var2;\n                var13 = 0x03;\n                var11 = func_22A5(var12, var13);\n                var temp1 = var11;\n                var3 = temp1;\n                var11 = 0x0d10;\n                var12 = var2;\n                var13 = var3;\n                var11 = func_22C0(var12, var13);\n                var4 = var11;\n                var11 = 0x0d1c;\n                var12 = arg0;\n                var13 = var2;\n                var11 = func_22C0(var12, var13);\n                var temp2 = var11;\n                var5 = temp2;\n                var11 = 0x0d27;\n                var12 = var5;\n                var11 = func_22D9(var12);\n                var6 = var11;\n                var7 = var4 * 0x010000000000000000;\n                var temp3 = var6 > 0x00;\n                var11 = temp3;\n            \n                if (!var11) {\n                label_0D53:\n                \n                    if (!var11) { revert(memory[0x00:0x00]); }\n                \n                    var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                \n                    if (var11) {\n                        var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    \n                        if (!var11) { goto label_0E14; }\n                        else { goto label_0DCE; }\n                    } else if (!var11) {\n                    label_0E14:\n                    \n                        if (!var11) {\n                        label_0EAA:\n                            var11 = 0x0eb4;\n                            var12 = var4;\n                            var13 = var3;\n                            var11 = func_2287(var12, var13);\n                            var4 = var11;\n                            var7 = var4 * 0x010000000000000000;\n                        \n                            if (storage[0x08] <= 0x00) {\n                            label_0F30:\n                                storage[0x08] = var6;\n                                var11 = 0x0f81;\n                                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x04;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var13 = var6;\n                                var11 = func_2287(var12, var13);\n                            \n                            label_0F81:\n                                var temp4 = var1;\n                                memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x04;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                                var temp5 = var6;\n                                memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x06;\n                                var temp6 = keccak256(memory[0x00:0x40]);\n                                storage[temp6] = storage[temp6] + (storage[0x09] * temp5 - var7);\n                                var temp7 = memory[0x40:0x60];\n                                memory[temp7:temp7 + 0x20] = arg0;\n                                var temp8 = temp7 + 0x20;\n                                memory[temp8:temp8 + 0x20] = temp5;\n                                var temp9 = memory[0x40:0x60];\n                                log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-11] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-13] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                return temp5;\n                            } else {\n                            label_0ED1:\n                                var11 = 0x0edc;\n                                var12 = storage[0x08];\n                                var13 = var6;\n                                var11 = func_2287(var12, var13);\n                                storage[0x08] = var11;\n                                var11 = storage[0x08];\n                                var12 = var4 * 0x010000000000000000;\n                            \n                                if (!var11) { assert(); }\n                            \n                                storage[0x09] = storage[0x09] + var12 / var11;\n                                var11 = storage[0x08];\n                                var12 = var4 * 0x010000000000000000;\n                            \n                                if (!var11) { assert(); }\n                            \n                                var temp10 = var7;\n                                var7 = temp10 - (temp10 - var6 * (var12 / var11));\n                                var11 = 0x0f81;\n                                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x04;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var13 = var6;\n                                var11 = func_2287(var12, var13);\n                                goto label_0F81;\n                            }\n                        } else {\n                        label_0E1A:\n                            var11 = 0x0e62;\n                            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x05;\n                            var12 = storage[keccak256(memory[0x00:0x40])];\n                            var13 = var3;\n                            var11 = func_2287(var12, var13);\n                            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var11;\n                        \n                            if (storage[0x08] <= 0x00) { goto label_0F30; }\n                            else { goto label_0ED1; }\n                        }\n                    } else {\n                    label_0DCE:\n                        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x04;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_0EAA; }\n                        else { goto label_0E1A; }\n                    }\n                } else {\n                    var11 = storage[0x08];\n                    var12 = 0x0d51;\n                    var13 = var6;\n                    var var14 = storage[0x08];\n                    var12 = func_2287(var13, var14);\n                    var11 = var12 > var11;\n                    goto label_0D53;\n                }\n            } else {\n                memory[0x00:0x20] = var10 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x03;\n                var11 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x01;\n            \n                if (var11) {\n                    memory[0x00:0x20] = var10 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x07;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] + var9 <= 0x0de0b6b3a7640000) { goto label_0896; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var11) {\n                label_0896:\n                    var11 = 0x08df;\n                    memory[0x00:0x20] = var10 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x07;\n                    var12 = storage[keccak256(memory[0x00:0x40])];\n                    var13 = var9;\n                    var11 = func_2287(var12, var13);\n                    memory[0x00:0x20] = var10 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = var11;\n                    var1 = msg.sender;\n                    var11 = 0x0933;\n                    var12 = arg0;\n                    var13 = 0xff & 0x05;\n                    var11 = func_22A5(var12, var13);\n                    var temp11 = var11;\n                    var2 = temp11;\n                    var11 = 0x0940;\n                    var12 = var2;\n                    var13 = 0x03;\n                    var11 = func_22A5(var12, var13);\n                    var temp12 = var11;\n                    var3 = temp12;\n                    var11 = 0x094c;\n                    var12 = var2;\n                    var13 = var3;\n                    var11 = func_22C0(var12, var13);\n                    var4 = var11;\n                    var11 = 0x0958;\n                    var12 = arg0;\n                    var13 = var2;\n                    var11 = func_22C0(var12, var13);\n                    var temp13 = var11;\n                    var5 = temp13;\n                    var11 = 0x0963;\n                    var12 = var5;\n                    var11 = func_22D9(var12);\n                    var6 = var11;\n                    var7 = var4 * 0x010000000000000000;\n                    var temp14 = var6 > 0x00;\n                    var11 = temp14;\n                \n                    if (!var11) {\n                    label_098F:\n                    \n                        if (!var11) { revert(memory[0x00:0x00]); }\n                    \n                        var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                    \n                        if (var11) {\n                            var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        \n                            if (!var11) { goto label_0A50; }\n                            else { goto label_0A0A; }\n                        } else if (!var11) {\n                        label_0A50:\n                        \n                            if (!var11) {\n                            label_0AE6:\n                                var11 = 0x0af0;\n                                var12 = var4;\n                                var13 = var3;\n                                var11 = func_2287(var12, var13);\n                                var4 = var11;\n                                var7 = var4 * 0x010000000000000000;\n                            \n                                if (storage[0x08] <= 0x00) {\n                                label_0B6C:\n                                    storage[0x08] = var6;\n                                    var11 = 0x0bbd;\n                                    memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    memory[0x20:0x40] = 0x04;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_2287(var12, var13);\n                                \n                                label_0BBD:\n                                    var temp15 = var1;\n                                    memory[0x00:0x20] = temp15 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    memory[0x20:0x40] = 0x04;\n                                    storage[keccak256(memory[0x00:0x40])] = var11;\n                                    var temp16 = var6;\n                                    var8 = storage[0x09] * temp16 - var7;\n                                    memory[0x00:0x20] = temp15 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    memory[0x20:0x40] = 0x06;\n                                    var temp17 = keccak256(memory[0x00:0x40]);\n                                    storage[temp17] = storage[temp17] + var8;\n                                    var temp18 = memory[0x40:0x60];\n                                    memory[temp18:temp18 + 0x20] = arg0;\n                                    var temp19 = temp18 + 0x20;\n                                    memory[temp19:temp19 + 0x20] = temp16;\n                                    var temp20 = memory[0x40:0x60];\n                                    log(memory[temp20:temp20 + (temp19 + 0x20) - temp20], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-11] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-13] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                    return temp16;\n                                } else {\n                                label_0B0D:\n                                    var11 = 0x0b18;\n                                    var12 = storage[0x08];\n                                    var13 = var6;\n                                    var11 = func_2287(var12, var13);\n                                    storage[0x08] = var11;\n                                    var11 = storage[0x08];\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!var11) { assert(); }\n                                \n                                    storage[0x09] = storage[0x09] + var12 / var11;\n                                    var11 = storage[0x08];\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!var11) { assert(); }\n                                \n                                    var temp21 = var7;\n                                    var7 = temp21 - (temp21 - var6 * (var12 / var11));\n                                    var11 = 0x0bbd;\n                                    memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    memory[0x20:0x40] = 0x04;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_2287(var12, var13);\n                                    goto label_0BBD;\n                                }\n                            } else {\n                            label_0A56:\n                                var11 = 0x0a9e;\n                                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x05;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var13 = var3;\n                                var11 = func_2287(var12, var13);\n                                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x05;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                            \n                                if (storage[0x08] <= 0x00) { goto label_0B6C; }\n                                else { goto label_0B0D; }\n                            }\n                        } else {\n                        label_0A0A:\n                            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_0AE6; }\n                            else { goto label_0A56; }\n                        }\n                    } else {\n                        var11 = storage[0x08];\n                        var12 = 0x098d;\n                        var13 = var6;\n                        var14 = storage[0x08];\n                        var12 = func_2287(var13, var14);\n                        var11 = var12 > var11;\n                        goto label_098F;\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var11 = 0x1bc16d674ec80000;\n            var12 = var9;\n            var13 = 0x07d9;\n            var13 = totalEthereumBalance();\n            var11 = var13 - var12 <= var11;\n            goto label_07DD;\n        }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x010000000000000000;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var var2 = storage[0x09] * storage[keccak256(memory[0x00:0x40])] - temp1;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_11D3:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_11CA; }\n        \n        label_11B6:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_11B6; }\n        \n        label_11CA:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_11D3;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_11D3;\n        }\n    }\n    \n    function calculateTokensReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x11ef;\n        var var5 = arg0;\n        var var6 = 0xff & 0x05;\n        var4 = func_22A5(var5, var6);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x11fb;\n        var5 = arg0;\n        var6 = var1;\n        var4 = func_22C0(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x1206;\n        var5 = var2;\n        return func_22D9(var5);\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x08]; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 > storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x123d;\n        var var5 = arg0;\n        var4 = func_2366(var5);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x124d;\n        var5 = var1;\n        var var6 = 0xff & 0x05;\n        var4 = func_22A5(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x1259;\n        var5 = var1;\n        var6 = var2;\n        return func_22C0(var5, var6);\n    }\n    \n    function onlyAmbassadors() returns (var r0) { return storage[0x0b] & 0xff; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x12ad;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x12c6;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var2;\n        var temp1 = var0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var1 = temp3;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(temp1 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var1 * 0x08fc).value(var1)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n    \n        if (!temp5) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = var1;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] != 0x00) {\n            var var4 = 0x1471;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_2366(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x1481;\n            var5 = var1;\n            var var6 = 0xff & 0x05;\n            var4 = func_22A5(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x148d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_22C0(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_1493:\n            return var0;\n        } else {\n            var0 = 0x174876e800 - 0x02540be400;\n            goto label_1493;\n        }\n    }\n    \n    function func_1499() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x01000000000000000000000000 * (0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0xfefa15424fd45bafe123163b2ad8d509c1256256);\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n        memory[0x00:0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0x895a6e21acc9f4e81b77cf28a6599ff3805dc81e;\n        memory[0x20:0x40] = 0x03;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        memory[0x00:0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0xfefa15424fd45bafe123163b2ad8d509c1256256;\n        memory[0x20:0x40] = 0x03;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x02]; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x1673;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x1625;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = arg0;\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] != 0x00) {\n            var var4 = 0x17af;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_2366(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x17bf;\n            var5 = var1;\n            var var6 = 0xff & 0x05;\n            var4 = func_22A5(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x17cb;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_2287(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_17D1:\n            return var0;\n        } else {\n            var0 = 0x174876e800 + 0x02540be400;\n            goto label_17D1;\n        }\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = !!arg1 | (storage[temp2] & ~0xff);\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x18a7;\n        var var3 = var1;\n        return balanceOf(var3);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1943:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_193A; }\n        \n        label_1926:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1926; }\n        \n        label_193A:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1943;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1943;\n        }\n    }\n    \n    function disableInitialStage() {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0b] = (storage[0x0b] & ~0xff) | 0x00;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x1a03;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        var5 = !(storage[0x0b] & 0xff);\n    \n        if (var5) {\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n        \n            if (arg1 <= storage[keccak256(memory[0x00:0x40])]) { goto label_1A79; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_1A79:\n            var5 = 0x00;\n            var6 = 0x1a85;\n            var var7 = 0x01;\n            var6 = myDividends(var7);\n        \n            if (var6 <= var5) {\n            label_1A94:\n                var5 = 0x1aa2;\n                var6 = arg1;\n                var7 = 0xff & 0x05;\n                var5 = func_22A5(var6, var7);\n                var temp0 = var5;\n                var2 = temp0;\n                var5 = 0x1aae;\n                var6 = arg1;\n                var7 = var2;\n                var5 = func_22C0(var6, var7);\n                var3 = var5;\n                var5 = 0x1ab9;\n                var6 = var2;\n                var5 = func_2366(var6);\n                var4 = var5;\n                var5 = 0x1ac7;\n                var6 = storage[0x08];\n                var7 = var2;\n                var5 = func_22C0(var6, var7);\n                storage[0x08] = var5;\n                var5 = 0x1b16;\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = arg1;\n                var5 = func_22C0(var6, var7);\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                var5 = 0x1ba2;\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = var3;\n                var5 = func_2287(var6, var7);\n                var temp1 = arg0;\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                storage[temp2] = storage[temp2] - storage[0x09] * arg1;\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] + storage[0x09] * var3;\n                var5 = 0x1cab;\n                var6 = storage[0x09];\n                var7 = storage[0x08];\n                var var8 = var4 * 0x010000000000000000;\n            \n                if (!var7) { assert(); }\n            \n                var5 = func_1CA5(var6, var7, var8);\n                storage[0x09] = var5;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var3;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n                var5 = 0x1a93;\n                withdraw();\n                goto label_1A94;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1CA5(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_2287(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setSymbol(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        var var1 = 0x1dc3;\n        var var2 = 0x01;\n        var var4 = memory[temp2:temp2 + 0x20];\n        var var3 = temp2 + 0x20;\n        var1 = func_245C(var2, var3, var4);\n    }\n    \n    function setName(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        var var1 = 0x1e67;\n        var var2 = 0x00;\n        var var3 = temp2 + 0x20;\n        var var4 = memory[temp2:temp2 + 0x20];\n        var1 = func_245C(var2, var3, var4);\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x1e7f;\n        var7 = myTokens();\n    \n        if (var7 <= var6) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var6 = 0x1ee8;\n        var7 = var1;\n        var6 = func_2366(var7);\n        var temp0 = var6;\n        var2 = temp0;\n        var6 = 0x1ef8;\n        var7 = var2;\n        var var8 = 0xff & 0x05;\n        var6 = func_22A5(var7, var8);\n        var temp1 = var6;\n        var3 = temp1;\n        var6 = 0x1f04;\n        var7 = var2;\n        var8 = var3;\n        var6 = func_22C0(var7, var8);\n        var4 = var6;\n        var6 = 0x1f12;\n        var7 = storage[0x08];\n        var8 = var1;\n        var6 = func_22C0(var7, var8);\n        storage[0x08] = var6;\n        var6 = 0x1f61;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var8 = var1;\n        var6 = func_22C0(var7, var8);\n        var temp2 = var0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        var5 = storage[0x09] * var1 + var4 * 0x010000000000000000;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] - var5;\n    \n        if (storage[0x08] <= 0x00) {\n        label_203B:\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = var4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n            var6 = 0x2034;\n            var7 = storage[0x09];\n            var8 = storage[0x08];\n            var var9 = var3 * 0x010000000000000000;\n        \n            if (!var8) { assert(); }\n        \n            var6 = func_202E(var7, var8, var9);\n            storage[0x09] = var6;\n            goto label_203B;\n        }\n    }\n    \n    function func_202E(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_2287(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_20F5:\n            var var2 = 0x20fd;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x20f4;\n            var var3 = var1;\n            sell(var3);\n            goto label_20F5;\n        }\n    }\n    \n    function buy(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x210d;\n        var var2 = msg.value;\n        var var3 = arg0;\n        var1 = func_079C(var2, var3);\n    \n    label_210D:\n        return var0;\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x2123;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x2139;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        var temp0 = var3;\n        var temp1 = msg.sender;\n        var1 = temp1;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var0 = temp3;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var3 = 0x222a;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_079C(var4, var5);\n    \n    label_222A:\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_2287(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_22A5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_22C0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_22D9(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var temp0 = 0x174876e800 * 0x0de0b6b3a7640000;\n        var var1 = temp0;\n        var var3 = storage[0x08];\n        var var4 = 0x02540be400;\n        var var5 = 0x234f;\n        var var6 = 0x2349;\n        var var7 = var1 ** 0x02 + arg0 * 0x0de0b6b3a7640000 * 0x02 * 0x02540be400 * 0x0de0b6b3a7640000 + storage[0x08] ** 0x02 * 0x02540be400 ** 0x02 + var1 * 0x02 * 0x02540be400 * storage[0x08];\n        var6 = func_2411(var7);\n        var5 = func_2349(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_2349(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_22C0(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2366(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var3 = 0x00;\n        var var1 = arg0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x08] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x23fa;\n        var var6 = var1 - 0x0de0b6b3a7640000;\n        var var7 = 0x02540be400;\n        var var8 = 0x0de0b6b3a7640000;\n        var var9 = var2;\n    \n        if (!var8) { assert(); }\n    \n        var5 = func_23B8(var1, var6, var7, var8, var9);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_23B8(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        arg1 = (arg4 / arg3 * 0x02540be400 + 0x174876e800) - arg2 * arg1;\n        arg2 = 0x02;\n        arg3 = 0x0de0b6b3a7640000;\n        var temp0 = arg0;\n        arg4 = temp0 ** 0x02 - temp0;\n    \n        if (!arg3) { assert(); }\n    \n        arg3 = arg4 / arg3 * 0x02540be400;\n    \n        if (!arg2) { assert(); }\n    \n        arg2 = arg3 / arg2;\n        r0 = func_22C0(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2411(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = arg0 + 0x01;\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_2456:\n            return var0;\n        } else {\n        label_2433:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_2456; }\n            else { goto label_2433; }\n        }\n    }\n    \n    function func_245C(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var var1 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n    \n        if (0x1f < arg2) {\n            var temp2 = arg2;\n            storage[arg0] = temp2 + temp2 + 0x01;\n        \n            if (!temp2) {\n            label_24CB:\n                var temp3 = arg1;\n                arg1 = 0x24d8;\n                var0 = var0;\n                arg2 = temp3;\n                arg1 = func_24DC(arg2, var0);\n                return arg0;\n            } else {\n                var temp4 = arg2;\n                var temp5 = var1;\n                arg2 = temp5;\n                var1 = arg2 + temp4;\n            \n                if (var1 <= arg2) {\n                label_24CA:\n                    goto label_24CB;\n                } else {\n                label_24B8:\n                    var temp6 = arg2;\n                    var temp7 = var0;\n                    storage[temp7] = memory[temp6:temp6 + 0x20];\n                    arg2 = temp6 + 0x20;\n                    var1 = var1;\n                    var0 = temp7 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_24CA; }\n                    else { goto label_24B8; }\n                }\n            }\n        } else {\n            var temp8 = arg2;\n            storage[arg0] = temp8 + temp8 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_24CB;\n        }\n    }\n    \n    function func_24DC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x24fe;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_24FA(arg1, var0); }\n    \n    label_24EB:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_24EB; }\n    \n        arg0 = func_24FA(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_24FA(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0169:\n            var var0 = 0x0174;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = func_079C(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ae;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = dividendsOf(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d7;\n                var2 = name();\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp3 - var4;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var6 = temp4 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0217:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_0205:\n                    var temp10 = var11;\n                    memory[var9 + temp10:var9 + temp10 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0217; }\n                    else { goto label_0205; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0273;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateTokensReceived(var2);\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x029c;\n                var1 = totalSupply();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d3;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x27defa1f) {\n                // Dispatch table entry for onlyAmbassadors()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02fc;\n                var2 = onlyAmbassadors();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = !!var2;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0329;\n                var2 = decimals();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2 & 0xff;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x392efb52) {\n                // Dispatch table entry for administrators(bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x036a;\n                var2 = msg.data[0x04:0x24];\n                var2 = administrators(var2);\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = !!var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0397;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ac;\n                var1 = sellPrice();\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var1;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x563252ae) {\n                // Dispatch table entry for 0x563252ae (unknown)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03d5;\n                func_1499();\n                stop();\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ea;\n                var2 = stakingRequirement();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var2;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0423;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var1;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x044c;\n                var1 = totalEthereumBalance();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var1;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var1;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04d0;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e5;\n                var1 = buyPrice();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var1;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x89135ae9) {\n                // Dispatch table entry for setAdministrator(bytes32,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x052b;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0540;\n                var1 = myTokens();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var1;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0569;\n                var2 = symbol();\n                var temp37 = memory[0x40:0x60];\n                var3 = temp37;\n                var4 = var3;\n                var temp38 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp38 - var4;\n                var temp39 = var2;\n                memory[temp38:temp38 + 0x20] = memory[temp39:temp39 + 0x20];\n                var5 = temp38 + 0x20;\n                var7 = memory[temp39:temp39 + 0x20];\n                var6 = temp39 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_05A9:\n                    var temp40 = var7;\n                    var5 = temp40 + var5;\n                    var6 = temp40 & 0x1f;\n                \n                    if (!var6) {\n                        var temp41 = memory[0x40:0x60];\n                        return memory[temp41:temp41 + var5 - temp41];\n                    } else {\n                        var temp42 = var6;\n                        var temp43 = var5 - temp42;\n                        memory[temp43:temp43 + 0x20] = ~(0x0100 ** (0x20 - temp42) - 0x01) & memory[temp43:temp43 + 0x20];\n                        var temp44 = memory[0x40:0x60];\n                        return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n                    }\n                } else {\n                label_0597:\n                    var temp45 = var11;\n                    memory[var9 + temp45:var9 + temp45 + 0x20] = memory[var10 + temp45:var10 + temp45 + 0x20];\n                    var11 = temp45 + 0x20;\n                \n                    if (var11 >= var8) { goto label_05A9; }\n                    else { goto label_0597; }\n                }\n            } else if (var0 == 0xa8e04f34) {\n                // Dispatch table entry for disableInitialStage()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05f7;\n                disableInitialStage();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0639;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = !!var1;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06ae;\n                var temp48 = msg.data[0x04:0x24] + 0x04;\n                var temp49 = msg.data[temp48:temp48 + 0x20];\n                var temp50 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp50 + (temp49 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp50:temp50 + 0x20] = temp49;\n                memory[temp50 + 0x20:temp50 + 0x20 + temp49] = msg.data[temp48 + 0x20:temp48 + 0x20 + temp49];\n                var2 = temp50;\n                setSymbol(var2);\n                stop();\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x070b;\n                var temp51 = msg.data[0x04:0x24] + 0x04;\n                var temp52 = msg.data[temp51:temp51 + 0x20];\n                var temp53 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp53 + (temp52 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp53:temp53 + 0x20] = temp52;\n                memory[temp53 + 0x20:temp53 + 0x20 + temp52] = msg.data[temp51 + 0x20:temp51 + 0x20 + temp52];\n                var2 = temp53;\n                setName(var2);\n                stop();\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x072e;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0743;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x0771;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = buy(var2);\n                var temp54 = memory[0x40:0x60];\n                memory[temp54:temp54 + 0x20] = var1;\n                var temp55 = memory[0x40:0x60];\n                return memory[temp55:temp55 + (temp54 + 0x20) - temp55];\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x079a;\n                reinvest();\n                stop();\n            } else { goto label_0169; }\n        }\n    }\n    \n    function func_079C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = arg0;\n        var var10 = msg.sender;\n        var var11 = storage[0x0b] & 0xff;\n    \n        if (!var11) {\n        label_07DD:\n        \n            if (!var11) {\n                storage[0x0b] = (storage[0x0b] & ~0xff) | 0x00;\n                var1 = msg.sender;\n                var11 = 0x0cf7;\n                var var12 = arg0;\n                var var13 = 0xff & 0x05;\n                var11 = func_22A5(var12, var13);\n                var temp0 = var11;\n                var2 = temp0;\n                var11 = 0x0d04;\n                var12 = var2;\n                var13 = 0x03;\n                var11 = func_22A5(var12, var13);\n                var temp1 = var11;\n                var3 = temp1;\n                var11 = 0x0d10;\n                var12 = var2;\n                var13 = var3;\n                var11 = func_22C0(var12, var13);\n                var4 = var11;\n                var11 = 0x0d1c;\n                var12 = arg0;\n                var13 = var2;\n                var11 = func_22C0(var12, var13);\n                var temp2 = var11;\n                var5 = temp2;\n                var11 = 0x0d27;\n                var12 = var5;\n                var11 = func_22D9(var12);\n                var6 = var11;\n                var7 = var4 * 0x010000000000000000;\n                var temp3 = var6 > 0x00;\n                var11 = temp3;\n            \n                if (!var11) {\n                label_0D53:\n                \n                    if (!var11) { revert(memory[0x00:0x00]); }\n                \n                    var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                \n                    if (var11) {\n                        var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    \n                        if (!var11) { goto label_0E14; }\n                        else { goto label_0DCE; }\n                    } else if (!var11) {\n                    label_0E14:\n                    \n                        if (!var11) {\n                        label_0EAA:\n                            var11 = 0x0eb4;\n                            var12 = var4;\n                            var13 = var3;\n                            var11 = func_2287(var12, var13);\n                            var4 = var11;\n                            var7 = var4 * 0x010000000000000000;\n                        \n                            if (storage[0x08] <= 0x00) {\n                            label_0F30:\n                                storage[0x08] = var6;\n                                var11 = 0x0f81;\n                                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x04;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var13 = var6;\n                                var11 = func_2287(var12, var13);\n                            \n                            label_0F81:\n                                var temp4 = var1;\n                                memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x04;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                                var temp5 = var6;\n                                memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x06;\n                                var temp6 = keccak256(memory[0x00:0x40]);\n                                storage[temp6] = storage[temp6] + (storage[0x09] * temp5 - var7);\n                                var temp7 = memory[0x40:0x60];\n                                memory[temp7:temp7 + 0x20] = arg0;\n                                var temp8 = temp7 + 0x20;\n                                memory[temp8:temp8 + 0x20] = temp5;\n                                var temp9 = memory[0x40:0x60];\n                                log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-11] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-13] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                return temp5;\n                            } else {\n                            label_0ED1:\n                                var11 = 0x0edc;\n                                var12 = storage[0x08];\n                                var13 = var6;\n                                var11 = func_2287(var12, var13);\n                                storage[0x08] = var11;\n                                var11 = storage[0x08];\n                                var12 = var4 * 0x010000000000000000;\n                            \n                                if (!var11) { assert(); }\n                            \n                                storage[0x09] = storage[0x09] + var12 / var11;\n                                var11 = storage[0x08];\n                                var12 = var4 * 0x010000000000000000;\n                            \n                                if (!var11) { assert(); }\n                            \n                                var temp10 = var7;\n                                var7 = temp10 - (temp10 - var6 * (var12 / var11));\n                                var11 = 0x0f81;\n                                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x04;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var13 = var6;\n                                var11 = func_2287(var12, var13);\n                                goto label_0F81;\n                            }\n                        } else {\n                        label_0E1A:\n                            var11 = 0x0e62;\n                            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x05;\n                            var12 = storage[keccak256(memory[0x00:0x40])];\n                            var13 = var3;\n                            var11 = func_2287(var12, var13);\n                            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var11;\n                        \n                            if (storage[0x08] <= 0x00) { goto label_0F30; }\n                            else { goto label_0ED1; }\n                        }\n                    } else {\n                    label_0DCE:\n                        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x04;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_0EAA; }\n                        else { goto label_0E1A; }\n                    }\n                } else {\n                    var11 = storage[0x08];\n                    var12 = 0x0d51;\n                    var13 = var6;\n                    var var14 = storage[0x08];\n                    var12 = func_2287(var13, var14);\n                    var11 = var12 > var11;\n                    goto label_0D53;\n                }\n            } else {\n                memory[0x00:0x20] = var10 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x03;\n                var11 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x01;\n            \n                if (var11) {\n                    memory[0x00:0x20] = var10 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x07;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] + var9 <= 0x0de0b6b3a7640000) { goto label_0896; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var11) {\n                label_0896:\n                    var11 = 0x08df;\n                    memory[0x00:0x20] = var10 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x07;\n                    var12 = storage[keccak256(memory[0x00:0x40])];\n                    var13 = var9;\n                    var11 = func_2287(var12, var13);\n                    memory[0x00:0x20] = var10 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = var11;\n                    var1 = msg.sender;\n                    var11 = 0x0933;\n                    var12 = arg0;\n                    var13 = 0xff & 0x05;\n                    var11 = func_22A5(var12, var13);\n                    var temp11 = var11;\n                    var2 = temp11;\n                    var11 = 0x0940;\n                    var12 = var2;\n                    var13 = 0x03;\n                    var11 = func_22A5(var12, var13);\n                    var temp12 = var11;\n                    var3 = temp12;\n                    var11 = 0x094c;\n                    var12 = var2;\n                    var13 = var3;\n                    var11 = func_22C0(var12, var13);\n                    var4 = var11;\n                    var11 = 0x0958;\n                    var12 = arg0;\n                    var13 = var2;\n                    var11 = func_22C0(var12, var13);\n                    var temp13 = var11;\n                    var5 = temp13;\n                    var11 = 0x0963;\n                    var12 = var5;\n                    var11 = func_22D9(var12);\n                    var6 = var11;\n                    var7 = var4 * 0x010000000000000000;\n                    var temp14 = var6 > 0x00;\n                    var11 = temp14;\n                \n                    if (!var11) {\n                    label_098F:\n                    \n                        if (!var11) { revert(memory[0x00:0x00]); }\n                    \n                        var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                    \n                        if (var11) {\n                            var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        \n                            if (!var11) { goto label_0A50; }\n                            else { goto label_0A0A; }\n                        } else if (!var11) {\n                        label_0A50:\n                        \n                            if (!var11) {\n                            label_0AE6:\n                                var11 = 0x0af0;\n                                var12 = var4;\n                                var13 = var3;\n                                var11 = func_2287(var12, var13);\n                                var4 = var11;\n                                var7 = var4 * 0x010000000000000000;\n                            \n                                if (storage[0x08] <= 0x00) {\n                                label_0B6C:\n                                    storage[0x08] = var6;\n                                    var11 = 0x0bbd;\n                                    memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    memory[0x20:0x40] = 0x04;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_2287(var12, var13);\n                                \n                                label_0BBD:\n                                    var temp15 = var1;\n                                    memory[0x00:0x20] = temp15 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    memory[0x20:0x40] = 0x04;\n                                    storage[keccak256(memory[0x00:0x40])] = var11;\n                                    var temp16 = var6;\n                                    var8 = storage[0x09] * temp16 - var7;\n                                    memory[0x00:0x20] = temp15 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    memory[0x20:0x40] = 0x06;\n                                    var temp17 = keccak256(memory[0x00:0x40]);\n                                    storage[temp17] = storage[temp17] + var8;\n                                    var temp18 = memory[0x40:0x60];\n                                    memory[temp18:temp18 + 0x20] = arg0;\n                                    var temp19 = temp18 + 0x20;\n                                    memory[temp19:temp19 + 0x20] = temp16;\n                                    var temp20 = memory[0x40:0x60];\n                                    log(memory[temp20:temp20 + (temp19 + 0x20) - temp20], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-11] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-13] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                    return temp16;\n                                } else {\n                                label_0B0D:\n                                    var11 = 0x0b18;\n                                    var12 = storage[0x08];\n                                    var13 = var6;\n                                    var11 = func_2287(var12, var13);\n                                    storage[0x08] = var11;\n                                    var11 = storage[0x08];\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!var11) { assert(); }\n                                \n                                    storage[0x09] = storage[0x09] + var12 / var11;\n                                    var11 = storage[0x08];\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!var11) { assert(); }\n                                \n                                    var temp21 = var7;\n                                    var7 = temp21 - (temp21 - var6 * (var12 / var11));\n                                    var11 = 0x0bbd;\n                                    memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    memory[0x20:0x40] = 0x04;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_2287(var12, var13);\n                                    goto label_0BBD;\n                                }\n                            } else {\n                            label_0A56:\n                                var11 = 0x0a9e;\n                                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x05;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var13 = var3;\n                                var11 = func_2287(var12, var13);\n                                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                memory[0x20:0x40] = 0x05;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                            \n                                if (storage[0x08] <= 0x00) { goto label_0B6C; }\n                                else { goto label_0B0D; }\n                            }\n                        } else {\n                        label_0A0A:\n                            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_0AE6; }\n                            else { goto label_0A56; }\n                        }\n                    } else {\n                        var11 = storage[0x08];\n                        var12 = 0x098d;\n                        var13 = var6;\n                        var14 = storage[0x08];\n                        var12 = func_2287(var13, var14);\n                        var11 = var12 > var11;\n                        goto label_098F;\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var11 = 0x1bc16d674ec80000;\n            var12 = var9;\n            var13 = 0x07d9;\n            var13 = totalEthereumBalance();\n            var11 = var13 - var12 <= var11;\n            goto label_07DD;\n        }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x010000000000000000;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var var2 = storage[0x09] * storage[keccak256(memory[0x00:0x40])] - temp1;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_11D3:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_11CA; }\n        \n        label_11B6:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_11B6; }\n        \n        label_11CA:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_11D3;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_11D3;\n        }\n    }\n    \n    function calculateTokensReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x11ef;\n        var var5 = arg0;\n        var var6 = 0xff & 0x05;\n        var4 = func_22A5(var5, var6);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x11fb;\n        var5 = arg0;\n        var6 = var1;\n        var4 = func_22C0(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x1206;\n        var5 = var2;\n        return func_22D9(var5);\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x08]; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 > storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x123d;\n        var var5 = arg0;\n        var4 = func_2366(var5);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x124d;\n        var5 = var1;\n        var var6 = 0xff & 0x05;\n        var4 = func_22A5(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x1259;\n        var5 = var1;\n        var6 = var2;\n        return func_22C0(var5, var6);\n    }\n    \n    function onlyAmbassadors() returns (var r0) { return storage[0x0b] & 0xff; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x12ad;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x12c6;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var2;\n        var temp1 = var0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var1 = temp3;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(temp1 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var1 * 0x08fc).value(var1)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n    \n        if (!temp5) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = var1;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] != 0x00) {\n            var var4 = 0x1471;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_2366(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x1481;\n            var5 = var1;\n            var var6 = 0xff & 0x05;\n            var4 = func_22A5(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x148d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_22C0(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_1493:\n            return var0;\n        } else {\n            var0 = 0x174876e800 - 0x02540be400;\n            goto label_1493;\n        }\n    }\n    \n    function func_1499() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x01000000000000000000000000 * (0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0xfefa15424fd45bafe123163b2ad8d509c1256256);\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n        memory[0x00:0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0x895a6e21acc9f4e81b77cf28a6599ff3805dc81e;\n        memory[0x20:0x40] = 0x03;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        memory[0x00:0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0xfefa15424fd45bafe123163b2ad8d509c1256256;\n        memory[0x20:0x40] = 0x03;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x02]; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x1673;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x1625;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = arg0;\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] != 0x00) {\n            var var4 = 0x17af;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_2366(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x17bf;\n            var5 = var1;\n            var var6 = 0xff & 0x05;\n            var4 = func_22A5(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x17cb;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_2287(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_17D1:\n            return var0;\n        } else {\n            var0 = 0x174876e800 + 0x02540be400;\n            goto label_17D1;\n        }\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = !!arg1 | (storage[temp2] & ~0xff);\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x18a7;\n        var var3 = var1;\n        return balanceOf(var3);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1943:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_193A; }\n        \n        label_1926:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1926; }\n        \n        label_193A:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1943;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1943;\n        }\n    }\n    \n    function disableInitialStage() {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0b] = (storage[0x0b] & ~0xff) | 0x00;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x1a03;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        var5 = !(storage[0x0b] & 0xff);\n    \n        if (var5) {\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n        \n            if (arg1 <= storage[keccak256(memory[0x00:0x40])]) { goto label_1A79; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_1A79:\n            var5 = 0x00;\n            var6 = 0x1a85;\n            var var7 = 0x01;\n            var6 = myDividends(var7);\n        \n            if (var6 <= var5) {\n            label_1A94:\n                var5 = 0x1aa2;\n                var6 = arg1;\n                var7 = 0xff & 0x05;\n                var5 = func_22A5(var6, var7);\n                var temp0 = var5;\n                var2 = temp0;\n                var5 = 0x1aae;\n                var6 = arg1;\n                var7 = var2;\n                var5 = func_22C0(var6, var7);\n                var3 = var5;\n                var5 = 0x1ab9;\n                var6 = var2;\n                var5 = func_2366(var6);\n                var4 = var5;\n                var5 = 0x1ac7;\n                var6 = storage[0x08];\n                var7 = var2;\n                var5 = func_22C0(var6, var7);\n                storage[0x08] = var5;\n                var5 = 0x1b16;\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = arg1;\n                var5 = func_22C0(var6, var7);\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                var5 = 0x1ba2;\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = var3;\n                var5 = func_2287(var6, var7);\n                var temp1 = arg0;\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                storage[temp2] = storage[temp2] - storage[0x09] * arg1;\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x06;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] + storage[0x09] * var3;\n                var5 = 0x1cab;\n                var6 = storage[0x09];\n                var7 = storage[0x08];\n                var var8 = var4 * 0x010000000000000000;\n            \n                if (!var7) { assert(); }\n            \n                var5 = func_1CA5(var6, var7, var8);\n                storage[0x09] = var5;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var3;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n                var5 = 0x1a93;\n                withdraw();\n                goto label_1A94;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1CA5(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_2287(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setSymbol(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        var var1 = 0x1dc3;\n        var var2 = 0x01;\n        var var4 = memory[temp2:temp2 + 0x20];\n        var var3 = temp2 + 0x20;\n        var1 = func_245C(var2, var3, var4);\n    }\n    \n    function setName(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        var var1 = 0x1e67;\n        var var2 = 0x00;\n        var var3 = temp2 + 0x20;\n        var var4 = memory[temp2:temp2 + 0x20];\n        var1 = func_245C(var2, var3, var4);\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x1e7f;\n        var7 = myTokens();\n    \n        if (var7 <= var6) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var6 = 0x1ee8;\n        var7 = var1;\n        var6 = func_2366(var7);\n        var temp0 = var6;\n        var2 = temp0;\n        var6 = 0x1ef8;\n        var7 = var2;\n        var var8 = 0xff & 0x05;\n        var6 = func_22A5(var7, var8);\n        var temp1 = var6;\n        var3 = temp1;\n        var6 = 0x1f04;\n        var7 = var2;\n        var8 = var3;\n        var6 = func_22C0(var7, var8);\n        var4 = var6;\n        var6 = 0x1f12;\n        var7 = storage[0x08];\n        var8 = var1;\n        var6 = func_22C0(var7, var8);\n        storage[0x08] = var6;\n        var6 = 0x1f61;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var8 = var1;\n        var6 = func_22C0(var7, var8);\n        var temp2 = var0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        var5 = storage[0x09] * var1 + var4 * 0x010000000000000000;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] - var5;\n    \n        if (storage[0x08] <= 0x00) {\n        label_203B:\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = var4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n            var6 = 0x2034;\n            var7 = storage[0x09];\n            var8 = storage[0x08];\n            var var9 = var3 * 0x010000000000000000;\n        \n            if (!var8) { assert(); }\n        \n            var6 = func_202E(var7, var8, var9);\n            storage[0x09] = var6;\n            goto label_203B;\n        }\n    }\n    \n    function func_202E(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_2287(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_20F5:\n            var var2 = 0x20fd;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x20f4;\n            var var3 = var1;\n            sell(var3);\n            goto label_20F5;\n        }\n    }\n    \n    function buy(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x210d;\n        var var2 = msg.value;\n        var var3 = arg0;\n        var1 = func_079C(var2, var3);\n    \n    label_210D:\n        return var0;\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x2123;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x2139;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        var temp0 = var3;\n        var temp1 = msg.sender;\n        var1 = temp1;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var0 = temp3;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var3 = 0x222a;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_079C(var4, var5);\n    \n    label_222A:\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_2287(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_22A5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_22C0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_22D9(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var temp0 = 0x174876e800 * 0x0de0b6b3a7640000;\n        var var1 = temp0;\n        var var3 = storage[0x08];\n        var var4 = 0x02540be400;\n        var var5 = 0x234f;\n        var var6 = 0x2349;\n        var var7 = var1 ** 0x02 + arg0 * 0x0de0b6b3a7640000 * 0x02 * 0x02540be400 * 0x0de0b6b3a7640000 + storage[0x08] ** 0x02 * 0x02540be400 ** 0x02 + var1 * 0x02 * 0x02540be400 * storage[0x08];\n        var6 = func_2411(var7);\n        var5 = func_2349(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_2349(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_22C0(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2366(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var3 = 0x00;\n        var var1 = arg0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x08] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x23fa;\n        var var6 = var1 - 0x0de0b6b3a7640000;\n        var var7 = 0x02540be400;\n        var var8 = 0x0de0b6b3a7640000;\n        var var9 = var2;\n    \n        if (!var8) { assert(); }\n    \n        var5 = func_23B8(var1, var6, var7, var8, var9);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_23B8(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        arg1 = (arg4 / arg3 * 0x02540be400 + 0x174876e800) - arg2 * arg1;\n        arg2 = 0x02;\n        arg3 = 0x0de0b6b3a7640000;\n        var temp0 = arg0;\n        arg4 = temp0 ** 0x02 - temp0;\n    \n        if (!arg3) { assert(); }\n    \n        arg3 = arg4 / arg3 * 0x02540be400;\n    \n        if (!arg2) { assert(); }\n    \n        arg2 = arg3 / arg2;\n        r0 = func_22C0(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2411(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = arg0 + 0x01;\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_2456:\n            return var0;\n        } else {\n        label_2433:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_2456; }\n            else { goto label_2433; }\n        }\n    }\n    \n    function func_245C(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var var1 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n    \n        if (0x1f < arg2) {\n            var temp2 = arg2;\n            storage[arg0] = temp2 + temp2 + 0x01;\n        \n            if (!temp2) {\n            label_24CB:\n                var temp3 = arg1;\n                arg1 = 0x24d8;\n                var0 = var0;\n                arg2 = temp3;\n                arg1 = func_24DC(arg2, var0);\n                return arg0;\n            } else {\n                var temp4 = arg2;\n                var temp5 = var1;\n                arg2 = temp5;\n                var1 = arg2 + temp4;\n            \n                if (var1 <= arg2) {\n                label_24CA:\n                    goto label_24CB;\n                } else {\n                label_24B8:\n                    var temp6 = arg2;\n                    var temp7 = var0;\n                    storage[temp7] = memory[temp6:temp6 + 0x20];\n                    arg2 = temp6 + 0x20;\n                    var1 = var1;\n                    var0 = temp7 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_24CA; }\n                    else { goto label_24B8; }\n                }\n            }\n        } else {\n            var temp8 = arg2;\n            storage[arg0] = temp8 + temp8 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_24CB;\n        }\n    }\n    \n    function func_24DC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x24fe;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_24FA(arg1, var0); }\n    \n    label_24EB:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_24EB; }\n    \n        arg0 = func_24FA(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_24FA(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 100.74343347549438,
	"usage": {
		"completion_tokens": 1154,
		"prompt_tokens": 18674,
		"total_tokens": 19828
	}
}