{
	"address": "0xaec2e87e0a235266d9c5adc9deb4b2e29b54d009",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity implementation for the given decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyToken {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _totalSupply;\n    \n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    \n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_balanceOf[_from] >= _value);\n        require(_allowance[_from][msg.sender] >= _value);\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        _allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function decimals() public pure returns (uint256) { \n        return 0;\n    }\n\n    function issueTokens(address _to, uint256 _value) public {\n        _balanceOf[_to] += _value;\n        _totalSupply += _value;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return _balanceOf[_owner];\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"SNGLS\";\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success){\n        require(_balanceOf[msg.sender] >= _value);\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return _allowance[_owner][_spender];\n    }\n\n    function name() public pure returns (string memory){\n        return \"SingularDTV\";\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success){\n        _allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n}\n```\n\nPlease note that this is a basic ERC20 token contract implementation. The original decompiled code seems to have some additional logic which is not included in this Solidity implementation. Please provide more context if you want that additional logic to be implemented as well.",
				"role": "assistant"
			}
		}
	],
	"created": 1698039299,
	"id": "chatcmpl-8ChsZV9c6ImFdv2EIgyKkr24qbqgM",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 12:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    v0 = v1 = 695;\n    assert(msg.value <= 0);\n    v2, v3 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.workshop().gas(msg.gas - 25050);\n    assert(v2);\n    v4 = v5 = msg.sender == address(v3);\n    if (v5) {\n        v6, v7 = 0xbdf5c4f1c1a9d7335a6a68d9aa011d5f40cf5520.call(0x49cc954b).gas(msg.gas - 25050);\n        assert(v6);\n        v4 = v8 = !v7;\n    }\n    assert(!v4);\n    v9 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.call(0x5d0be9de, varg0).gas(msg.gas - 25050);\n    assert(v9);\n    v10 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.call(0x5d0be9de00000000000000000000000000000000000000000000000000000000, varg1).gas(msg.gas - 25050);\n    assert(v10);\n    v0 = v11 = 737;\n    v12 = v13 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v12 = v14 = _allowance[msg.sender] >= varg2;\n    }\n    if (v12) {\n        v12 = v15 = varg2 > 0;\n    }\n    if (!v12) {\n        v16 = v17 = 0;\n        goto 0x2e4;\n    } else {\n        _balanceOf[varg1] += varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v16 = v18 = 1;\n    }\n    while (1) {\n        goto {'0x2e1', '0x2b70x13c'};\n    }\n    return v16;\n}\n\nfunction decimals() public payable { \n    return 0;\n}\n\nfunction issueTokens(address varg0, uint256 varg1) public payable { \n    assert(msg.sender == 0xbdf5c4f1c1a9d7335a6a68d9aa011d5f40cf5520);\n    if (0 != varg1) {\n        _balanceOf[varg0] += varg1;\n        _totalSupply += varg1;\n        v0 = v1 = 1;\n        goto 0x12d0x160;\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction balanceOf(address varg0) public payable { \n    return _balanceOf[varg0];\n}\n\nfunction symbol() public payable { \n    v0 = new array[](v1.length);\n    v2 = v1.data;\n    v3, v4 = dataCopy('SNGLS');\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    v0 = v1 = 695;\n    assert(msg.value <= 0);\n    v2, v3 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.workshop().gas(msg.gas - 25050);\n    assert(v2);\n    v4 = v5 = address(v3) == msg.sender;\n    if (v5) {\n        v6, v7 = 0xbdf5c4f1c1a9d7335a6a68d9aa011d5f40cf5520.call(0x49cc954b).gas(msg.gas - 25050);\n        assert(v6);\n        v4 = v8 = !v7;\n    }\n    assert(!v4);\n    v9 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.call(0x5d0be9de, msg.sender).gas(msg.gas - 25050);\n    assert(v9);\n    v10 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.call(0x5d0be9de00000000000000000000000000000000000000000000000000000000, varg0).gas(msg.gas - 25050);\n    assert(v10);\n    v0 = v11 = 1931;\n    v12 = v13 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v12 = v14 = varg1 > 0;\n    }\n    if (!v12) {\n        v15 = v16 = 0;\n        goto 0x12d0x1fc;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v15 = v17 = 1;\n    }\n    while (1) {\n        goto {'0x78b', '0x2b70x1fc'};\n    }\n    return v15;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    return _allowance[varg1];\n}\n\nfunction name() public payable { \n    v0 = new array[](v1.length);\n    v2 = v1.data;\n    v3, v4 = dataCopy('SingularDTV');\n    if (11) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector >> 224 == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector >> 224) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector >> 224) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector >> 224) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector >> 224) {\n            decimals();\n        } else if (0x475a9fa9 == function_selector >> 224) {\n            issueTokens(address,uint256);\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        }\n    }\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 12:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    v0 = v1 = 695;\n    assert(msg.value <= 0);\n    v2, v3 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.workshop().gas(msg.gas - 25050);\n    assert(v2);\n    v4 = v5 = msg.sender == address(v3);\n    if (v5) {\n        v6, v7 = 0xbdf5c4f1c1a9d7335a6a68d9aa011d5f40cf5520.call(0x49cc954b).gas(msg.gas - 25050);\n        assert(v6);\n        v4 = v8 = !v7;\n    }\n    assert(!v4);\n    v9 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.call(0x5d0be9de, varg0).gas(msg.gas - 25050);\n    assert(v9);\n    v10 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.call(0x5d0be9de00000000000000000000000000000000000000000000000000000000, varg1).gas(msg.gas - 25050);\n    assert(v10);\n    v0 = v11 = 737;\n    v12 = v13 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v12 = v14 = _allowance[msg.sender] >= varg2;\n    }\n    if (v12) {\n        v12 = v15 = varg2 > 0;\n    }\n    if (!v12) {\n        v16 = v17 = 0;\n        goto 0x2e4;\n    } else {\n        _balanceOf[varg1] += varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v16 = v18 = 1;\n    }\n    while (1) {\n        goto {'0x2e1', '0x2b70x13c'};\n    }\n    return v16;\n}\n\nfunction decimals() public payable { \n    return 0;\n}\n\nfunction issueTokens(address varg0, uint256 varg1) public payable { \n    assert(msg.sender == 0xbdf5c4f1c1a9d7335a6a68d9aa011d5f40cf5520);\n    if (0 != varg1) {\n        _balanceOf[varg0] += varg1;\n        _totalSupply += varg1;\n        v0 = v1 = 1;\n        goto 0x12d0x160;\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction balanceOf(address varg0) public payable { \n    return _balanceOf[varg0];\n}\n\nfunction symbol() public payable { \n    v0 = new array[](v1.length);\n    v2 = v1.data;\n    v3, v4 = dataCopy('SNGLS');\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    v0 = v1 = 695;\n    assert(msg.value <= 0);\n    v2, v3 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.workshop().gas(msg.gas - 25050);\n    assert(v2);\n    v4 = v5 = address(v3) == msg.sender;\n    if (v5) {\n        v6, v7 = 0xbdf5c4f1c1a9d7335a6a68d9aa011d5f40cf5520.call(0x49cc954b).gas(msg.gas - 25050);\n        assert(v6);\n        v4 = v8 = !v7;\n    }\n    assert(!v4);\n    v9 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.call(0x5d0be9de, msg.sender).gas(msg.gas - 25050);\n    assert(v9);\n    v10 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.call(0x5d0be9de00000000000000000000000000000000000000000000000000000000, varg0).gas(msg.gas - 25050);\n    assert(v10);\n    v0 = v11 = 1931;\n    v12 = v13 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v12 = v14 = varg1 > 0;\n    }\n    if (!v12) {\n        v15 = v16 = 0;\n        goto 0x12d0x1fc;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v15 = v17 = 1;\n    }\n    while (1) {\n        goto {'0x78b', '0x2b70x1fc'};\n    }\n    return v15;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    return _allowance[varg1];\n}\n\nfunction name() public payable { \n    v0 = new array[](v1.length);\n    v2 = v1.data;\n    v3, v4 = dataCopy('SingularDTV');\n    if (11) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector >> 224 == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector >> 224) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector >> 224) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector >> 224) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector >> 224) {\n            decimals();\n        } else if (0x475a9fa9 == function_selector >> 224) {\n            issueTokens(address,uint256);\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        }\n    }\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 12:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    v0 = v1 = 695;\n    assert(msg.value <= 0);\n    v2, v3 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.workshop().gas(msg.gas - 25050);\n    assert(v2);\n    v4 = v5 = msg.sender == address(v3);\n    if (v5) {\n        v6, v7 = 0xbdf5c4f1c1a9d7335a6a68d9aa011d5f40cf5520.call(0x49cc954b).gas(msg.gas - 25050);\n        assert(v6);\n        v4 = v8 = !v7;\n    }\n    assert(!v4);\n    v9 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.call(0x5d0be9de, varg0).gas(msg.gas - 25050);\n    assert(v9);\n    v10 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.call(0x5d0be9de00000000000000000000000000000000000000000000000000000000, varg1).gas(msg.gas - 25050);\n    assert(v10);\n    v0 = v11 = 737;\n    v12 = v13 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v12 = v14 = _allowance[msg.sender] >= varg2;\n    }\n    if (v12) {\n        v12 = v15 = varg2 > 0;\n    }\n    if (!v12) {\n        v16 = v17 = 0;\n        goto 0x2e4;\n    } else {\n        _balanceOf[varg1] += varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v16 = v18 = 1;\n    }\n    while (1) {\n        goto {'0x2e1', '0x2b70x13c'};\n    }\n    return v16;\n}\n\nfunction decimals() public payable { \n    return 0;\n}\n\nfunction issueTokens(address varg0, uint256 varg1) public payable { \n    assert(msg.sender == 0xbdf5c4f1c1a9d7335a6a68d9aa011d5f40cf5520);\n    if (0 != varg1) {\n        _balanceOf[varg0] += varg1;\n        _totalSupply += varg1;\n        v0 = v1 = 1;\n        goto 0x12d0x160;\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction balanceOf(address varg0) public payable { \n    return _balanceOf[varg0];\n}\n\nfunction symbol() public payable { \n    v0 = new array[](v1.length);\n    v2 = v1.data;\n    v3, v4 = dataCopy('SNGLS');\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    v0 = v1 = 695;\n    assert(msg.value <= 0);\n    v2, v3 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.workshop().gas(msg.gas - 25050);\n    assert(v2);\n    v4 = v5 = address(v3) == msg.sender;\n    if (v5) {\n        v6, v7 = 0xbdf5c4f1c1a9d7335a6a68d9aa011d5f40cf5520.call(0x49cc954b).gas(msg.gas - 25050);\n        assert(v6);\n        v4 = v8 = !v7;\n    }\n    assert(!v4);\n    v9 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.call(0x5d0be9de, msg.sender).gas(msg.gas - 25050);\n    assert(v9);\n    v10 = 0xe736091fc36f1ad476f5e4e03e4425940822d3ba.call(0x5d0be9de00000000000000000000000000000000000000000000000000000000, varg0).gas(msg.gas - 25050);\n    assert(v10);\n    v0 = v11 = 1931;\n    v12 = v13 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v12 = v14 = varg1 > 0;\n    }\n    if (!v12) {\n        v15 = v16 = 0;\n        goto 0x12d0x1fc;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v15 = v17 = 1;\n    }\n    while (1) {\n        goto {'0x78b', '0x2b70x1fc'};\n    }\n    return v15;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    return _allowance[varg1];\n}\n\nfunction name() public payable { \n    v0 = new array[](v1.length);\n    v2 = v1.data;\n    v3, v4 = dataCopy('SingularDTV');\n    if (11) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector >> 224 == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector >> 224) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector >> 224) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector >> 224) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector >> 224) {\n            decimals();\n        } else if (0x475a9fa9 == function_selector >> 224) {\n            issueTokens(address,uint256);\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        }\n    }\n}\n.",
	"status": "1",
	"time_cost": 30.182400941848755,
	"usage": {
		"completion_tokens": 562,
		"prompt_tokens": 1929,
		"total_tokens": 2491
	}
}