{
	"address": "0x4f417f4c6579bfaf712026690317d90405ade95e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity contract code corresponding to the decompiled code above could be as follows:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping (uint256 => uint256) private _referrer;\n    mapping (uint256 => uint256) private _referralsHeld;\n    mapping (uint256 => uint256) private _refBuys;\n    mapping (address => uint256) private _tokenBalanceLedger_;\n    mapping (address => uint256) private _payoutsTo_;\n    uint256 private _tokenSupply_;\n    uint256 private _profitPerShare_;\n    address private _ceo;\n    address private _ceo2;\n\n    event onReinvestment(address indexed user, uint256 ethereumReinvested, uint256 tokensMinted);\n    event onTokenSell(address indexed user, uint256 tokensBurned, uint256 ethereumEarned);\n    event onWithdraw(address indexed user, uint256 ethereumWithdrawn);\n\n    function dividendsOf(address _customerAddress) public view returns(uint256) {\n        return _payoutsTo_[_customerAddress] * _profitPerShare_ - _payoutsTo_[_customerAddress] / 1e64;\n    }\n\n    function ethereumToTokens_(uint256 _ethereum) public pure returns(uint256) {\n        return _ethereum / 1e18;\n    }\n\n    function referrer(address _customerAddress) public view returns(address) {\n        return _referrer[uint256(_customerAddress)];\n    }\n\n    function myDividends(bool _includeReferralBonus) public view returns(uint256) {\n        return dividendsOf(msg.sender) + (_includeReferralBonus ? _referralsHeld[uint256(msg.sender)] : 0);\n    }\n\n    // ... other functions ...\n}\n```\n\nPlease note that the decompiled code lacks a significant amount of context, including specific implementation of private functions and event definitions. This Solidity code is a rough translation of the decompiled code, and it does not include all functionalities implied in the decompiled code such as SafeMath operations, and other private functions.\n\nAlso, note that the `fallback` function was deprecated in Solidity 0.6.0 and replaced by `receive` and `fallback` functions. The `receive` function is called when sending Ether to a contract without any data. The `fallback` function is called when no other function matches (not even the receive function). Both functions are optional, but if the receive function exists, it needs to be marked `external`. If fallback is defined, it needs to be `external` as well.",
				"role": "assistant"
			}
		}
	],
	"created": 1701459953,
	"id": "chatcmpl-8R3kPqoqf3wpyoGfRjG5bZSuxvXyU",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 06:49 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _referrer; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _referralsHeld; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _refBuys; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _tokenBalanceLedger_; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _payoutsTo_; // STORAGE[0x6]\nuint256 _tokenSupply_; // STORAGE[0x7]\nuint256 _profitPerShare_; // STORAGE[0x8]\nuint160 _ceo; // STORAGE[0x0] bytes 0 to 19\nuint160 _ceo2; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nonReinvestment(address, uint256, uint256);\nonTokenSell(address, uint256, uint256);\nonWithdraw(address, uint256);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return _payoutsTo_[varg0] * _profitPerShare_ - _payoutsTo_[varg0] >> 64;\n}\n\nfunction ethereumToTokens_(uint256 varg0) public nonPayable { \n    v0 = _SafeDiv(0x5f5e100, varg0);\n    return v0;\n}\n\nfunction referrer(address varg0) public nonPayable { \n    return address(_referrer[varg0]);\n}\n\nfunction myDividends() public nonPayable { \n    return _payoutsTo_[msg.sender] * _profitPerShare_ - _payoutsTo_[msg.sender] >> 64;\n}\n\nfunction myHalfDividends() public nonPayable { \n    assert(200);\n    return 98 * (_payoutsTo_[msg.sender] * _profitPerShare_ - _payoutsTo_[msg.sender] >> 64) / 200;\n}\n\nfunction mySavings() public nonPayable { \n    v0 = _SafeMul(_tokenBalanceLedger_[msg.sender], 0x5f5e100);\n    return v0;\n}\n\nfunction tokenBalanceLedger_(address varg0) public nonPayable { \n    return _tokenBalanceLedger_[varg0];\n}\n\nfunction tokenSupply_() public nonPayable { \n    return _tokenSupply_;\n}\n\nfunction profitPerShare_() public nonPayable { \n    return _profitPerShare_;\n}\n\nfunction ceo() public nonPayable { \n    return _ceo;\n}\n\nfunction depositNoRef() public payable { \n    0x4a3(0);\n}\n\nfunction balance() public nonPayable { \n    return this.balance;\n}\n\nfunction ceo2() public nonPayable { \n    return _ceo2;\n}\n\nfunction refBuys(address varg0) public nonPayable { \n    return _refBuys[varg0];\n}\n\nfunction tokensToEthereum_(uint256 varg0) public nonPayable { \n    v0 = _SafeMul(varg0, 0x5f5e100);\n    return v0;\n}\n\nfunction payoutsTo_(address varg0) public nonPayable { \n    return _payoutsTo_[varg0];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0x541();\n    v0 = _SafeDiv(0x5f5e100, varg0);\n    require(0 < _tokenBalanceLedger_[msg.sender]);\n    require(v0 <= _tokenBalanceLedger_[msg.sender]);\n    v1 = _SafeMul(v0, 0x5f5e100);\n    assert(v0 <= _tokenSupply_);\n    _tokenSupply_ = _tokenSupply_ - v0;\n    assert(v0 <= _tokenBalanceLedger_[msg.sender]);\n    _tokenBalanceLedger_[msg.sender] = _tokenBalanceLedger_[msg.sender] - v0;\n    _payoutsTo_[msg.sender] = _payoutsTo_[msg.sender] - ((v1 << 64) + v0 * _profitPerShare_);\n    emit onTokenSell(msg.sender, v0, v1);\n    v2 = _payoutsTo_[msg.sender] * _profitPerShare_ - _payoutsTo_[msg.sender] >> 64;\n    _payoutsTo_[msg.sender] += v2 << 64;\n    v3 = msg.sender.call().value(v2).gas(2300 * !v2);\n    require(v3); // checks call status, propagates error data on error\n    emit onWithdraw(msg.sender, v2);\n}\n\nfunction referralsHeld(address varg0) public nonPayable { \n    return _referralsHeld[varg0];\n}\n\nfunction deposit(address varg0) public payable { \n    0x4a3(varg0);\n}\n\nfunction reinvest() public nonPayable { \n    0x541();\n}\n\nfunction 0x4a3(uint256 varg0) private { \n    require(msg.sender != address(varg0));\n    v0 = v1 = !address(_referrer[msg.sender]);\n    if (v1) {\n        v0 = v2 = address(varg0);\n    }\n    if (v0) {\n        v3 = address(varg0);\n        _referrer[msg.sender] = v3 | ~0xffffffffffffffffffffffffffffffffffffffff & _referrer[msg.sender];\n        _refBuys[v3] += 1;\n    }\n    0x93c(msg.value);\n    return ;\n}\n\nfunction 0x541() private { \n    v0 = _payoutsTo_[msg.sender] * _profitPerShare_ - _payoutsTo_[msg.sender] >> 64;\n    _payoutsTo_[msg.sender] += v0 << 64;\n    v1 = _SafeDiv(2, v0);\n    assert(_referralsHeld[msg.sender] + v1 >= v1);\n    v2 = _SafeDiv(0x5f5e100, _referralsHeld[msg.sender] + v1);\n    if (v2 > 0) {\n        assert(_referralsHeld[msg.sender] + v1 >= v1);\n        0x93c(_referralsHeld[msg.sender] + v1);\n        _referralsHeld[msg.sender] = 0;\n    }\n    if (address(_referrer[address(msg.sender)])) {\n        assert(v1 + _referralsHeld[address(_referrer[address(msg.sender)])] >= _referralsHeld[address(_referrer[address(msg.sender)])]);\n        _referralsHeld[address(_referrer[address(msg.sender)])] += v1;\n    } else {\n        v3 = _SafeDiv(2, v1);\n        assert(v3 + _referralsHeld[_ceo] >= _referralsHeld[_ceo]);\n        _referralsHeld[_ceo] += v3;\n        assert(v3 + _referralsHeld[_ceo2] >= _referralsHeld[_ceo2]);\n        _referralsHeld[_ceo2] += v3;\n    }\n    emit onReinvestment(msg.sender, v0, v1);\n    return ;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    assert(varg0);\n    return varg1 / varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        assert(v0 / varg1 == varg0);\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\nfunction 0x93c(uint256 varg0) private { \n    v0 = _SafeDiv(50, varg0);\n    assert(v0 <= varg0);\n    v1 = _SafeDiv(0x5f5e100, varg0 - v0);\n    v2 = v3 = v0 << 64;\n    assert(_tokenSupply_ + v1 >= v1);\n    require(_tokenSupply_ + v1 > _tokenSupply_);\n    if (_tokenSupply_ <= 0) {\n        _tokenSupply_ = v1;\n    } else {\n        assert(v1 + _tokenSupply_ >= _tokenSupply_);\n        _tokenSupply_ += v1;\n        assert(v1 + _tokenSupply_);\n        _profitPerShare_ = _profitPerShare_ + (v0 << 64) / (v1 + _tokenSupply_);\n        assert(_tokenSupply_);\n        v2 = v4 = v3 - (v3 - v1 * ((v0 << 64) / _tokenSupply_));\n    }\n    assert(v1 + _tokenBalanceLedger_[msg.sender] >= _tokenBalanceLedger_[msg.sender]);\n    _tokenBalanceLedger_[msg.sender] += v1;\n    _payoutsTo_[msg.sender] += v1 * _profitPerShare_ - v2;\n    emit 0x22c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5(msg.sender, 0, varg0, v1);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x65318b) {\n            dividendsOf(address);\n        } else if (0x2a9121c7 == function_selector) {\n            ethereumToTokens_(uint256);\n        } else if (0x2cf003c2 == function_selector) {\n            referrer(address);\n        } else if (0x3151ecfc == function_selector) {\n            myDividends();\n        } else if (0x3619cd99 == function_selector) {\n            myHalfDividends();\n        } else if (0x46272a6d == function_selector) {\n            mySavings();\n        } else if (0x5c5a0a9d == function_selector) {\n            tokenBalanceLedger_(address);\n        } else if (0x651fe611 == function_selector) {\n            tokenSupply_();\n        } else if (0x710b318b == function_selector) {\n            profitPerShare_();\n        } else if (0x908921fc == function_selector) {\n            ceo();\n        } else if (0xa55d260d == function_selector) {\n            depositNoRef();\n        } else if (0xb69ef8a8 == function_selector) {\n            balance();\n        } else if (0xb9477b0e == function_selector) {\n            ceo2();\n        } else if (0xbf1b206b == function_selector) {\n            refBuys(address);\n        } else if (0xbf3b397b == function_selector) {\n            tokensToEthereum_(uint256);\n        } else if (0xe1456cb4 == function_selector) {\n            payoutsTo_(address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe777ff25 == function_selector) {\n            referralsHeld(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 06:49 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _referrer; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _referralsHeld; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _refBuys; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _tokenBalanceLedger_; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _payoutsTo_; // STORAGE[0x6]\nuint256 _tokenSupply_; // STORAGE[0x7]\nuint256 _profitPerShare_; // STORAGE[0x8]\nuint160 _ceo; // STORAGE[0x0] bytes 0 to 19\nuint160 _ceo2; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nonReinvestment(address, uint256, uint256);\nonTokenSell(address, uint256, uint256);\nonWithdraw(address, uint256);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return _payoutsTo_[varg0] * _profitPerShare_ - _payoutsTo_[varg0] >> 64;\n}\n\nfunction ethereumToTokens_(uint256 varg0) public nonPayable { \n    v0 = _SafeDiv(0x5f5e100, varg0);\n    return v0;\n}\n\nfunction referrer(address varg0) public nonPayable { \n    return address(_referrer[varg0]);\n}\n\nfunction myDividends() public nonPayable { \n    return _payoutsTo_[msg.sender] * _profitPerShare_ - _payoutsTo_[msg.sender] >> 64;\n}\n\nfunction myHalfDividends() public nonPayable { \n    assert(200);\n    return 98 * (_payoutsTo_[msg.sender] * _profitPerShare_ - _payoutsTo_[msg.sender] >> 64) / 200;\n}\n\nfunction mySavings() public nonPayable { \n    v0 = _SafeMul(_tokenBalanceLedger_[msg.sender], 0x5f5e100);\n    return v0;\n}\n\nfunction tokenBalanceLedger_(address varg0) public nonPayable { \n    return _tokenBalanceLedger_[varg0];\n}\n\nfunction tokenSupply_() public nonPayable { \n    return _tokenSupply_;\n}\n\nfunction profitPerShare_() public nonPayable { \n    return _profitPerShare_;\n}\n\nfunction ceo() public nonPayable { \n    return _ceo;\n}\n\nfunction depositNoRef() public payable { \n    0x4a3(0);\n}\n\nfunction balance() public nonPayable { \n    return this.balance;\n}\n\nfunction ceo2() public nonPayable { \n    return _ceo2;\n}\n\nfunction refBuys(address varg0) public nonPayable { \n    return _refBuys[varg0];\n}\n\nfunction tokensToEthereum_(uint256 varg0) public nonPayable { \n    v0 = _SafeMul(varg0, 0x5f5e100);\n    return v0;\n}\n\nfunction payoutsTo_(address varg0) public nonPayable { \n    return _payoutsTo_[varg0];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0x541();\n    v0 = _SafeDiv(0x5f5e100, varg0);\n    require(0 < _tokenBalanceLedger_[msg.sender]);\n    require(v0 <= _tokenBalanceLedger_[msg.sender]);\n    v1 = _SafeMul(v0, 0x5f5e100);\n    assert(v0 <= _tokenSupply_);\n    _tokenSupply_ = _tokenSupply_ - v0;\n    assert(v0 <= _tokenBalanceLedger_[msg.sender]);\n    _tokenBalanceLedger_[msg.sender] = _tokenBalanceLedger_[msg.sender] - v0;\n    _payoutsTo_[msg.sender] = _payoutsTo_[msg.sender] - ((v1 << 64) + v0 * _profitPerShare_);\n    emit onTokenSell(msg.sender, v0, v1);\n    v2 = _payoutsTo_[msg.sender] * _profitPerShare_ - _payoutsTo_[msg.sender] >> 64;\n    _payoutsTo_[msg.sender] += v2 << 64;\n    v3 = msg.sender.call().value(v2).gas(2300 * !v2);\n    require(v3); // checks call status, propagates error data on error\n    emit onWithdraw(msg.sender, v2);\n}\n\nfunction referralsHeld(address varg0) public nonPayable { \n    return _referralsHeld[varg0];\n}\n\nfunction deposit(address varg0) public payable { \n    0x4a3(varg0);\n}\n\nfunction reinvest() public nonPayable { \n    0x541();\n}\n\nfunction 0x4a3(uint256 varg0) private { \n    require(msg.sender != address(varg0));\n    v0 = v1 = !address(_referrer[msg.sender]);\n    if (v1) {\n        v0 = v2 = address(varg0);\n    }\n    if (v0) {\n        v3 = address(varg0);\n        _referrer[msg.sender] = v3 | ~0xffffffffffffffffffffffffffffffffffffffff & _referrer[msg.sender];\n        _refBuys[v3] += 1;\n    }\n    0x93c(msg.value);\n    return ;\n}\n\nfunction 0x541() private { \n    v0 = _payoutsTo_[msg.sender] * _profitPerShare_ - _payoutsTo_[msg.sender] >> 64;\n    _payoutsTo_[msg.sender] += v0 << 64;\n    v1 = _SafeDiv(2, v0);\n    assert(_referralsHeld[msg.sender] + v1 >= v1);\n    v2 = _SafeDiv(0x5f5e100, _referralsHeld[msg.sender] + v1);\n    if (v2 > 0) {\n        assert(_referralsHeld[msg.sender] + v1 >= v1);\n        0x93c(_referralsHeld[msg.sender] + v1);\n        _referralsHeld[msg.sender] = 0;\n    }\n    if (address(_referrer[address(msg.sender)])) {\n        assert(v1 + _referralsHeld[address(_referrer[address(msg.sender)])] >= _referralsHeld[address(_referrer[address(msg.sender)])]);\n        _referralsHeld[address(_referrer[address(msg.sender)])] += v1;\n    } else {\n        v3 = _SafeDiv(2, v1);\n        assert(v3 + _referralsHeld[_ceo] >= _referralsHeld[_ceo]);\n        _referralsHeld[_ceo] += v3;\n        assert(v3 + _referralsHeld[_ceo2] >= _referralsHeld[_ceo2]);\n        _referralsHeld[_ceo2] += v3;\n    }\n    emit onReinvestment(msg.sender, v0, v1);\n    return ;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    assert(varg0);\n    return varg1 / varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        assert(v0 / varg1 == varg0);\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\nfunction 0x93c(uint256 varg0) private { \n    v0 = _SafeDiv(50, varg0);\n    assert(v0 <= varg0);\n    v1 = _SafeDiv(0x5f5e100, varg0 - v0);\n    v2 = v3 = v0 << 64;\n    assert(_tokenSupply_ + v1 >= v1);\n    require(_tokenSupply_ + v1 > _tokenSupply_);\n    if (_tokenSupply_ <= 0) {\n        _tokenSupply_ = v1;\n    } else {\n        assert(v1 + _tokenSupply_ >= _tokenSupply_);\n        _tokenSupply_ += v1;\n        assert(v1 + _tokenSupply_);\n        _profitPerShare_ = _profitPerShare_ + (v0 << 64) / (v1 + _tokenSupply_);\n        assert(_tokenSupply_);\n        v2 = v4 = v3 - (v3 - v1 * ((v0 << 64) / _tokenSupply_));\n    }\n    assert(v1 + _tokenBalanceLedger_[msg.sender] >= _tokenBalanceLedger_[msg.sender]);\n    _tokenBalanceLedger_[msg.sender] += v1;\n    _payoutsTo_[msg.sender] += v1 * _profitPerShare_ - v2;\n    emit 0x22c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5(msg.sender, 0, varg0, v1);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x65318b) {\n            dividendsOf(address);\n        } else if (0x2a9121c7 == function_selector) {\n            ethereumToTokens_(uint256);\n        } else if (0x2cf003c2 == function_selector) {\n            referrer(address);\n        } else if (0x3151ecfc == function_selector) {\n            myDividends();\n        } else if (0x3619cd99 == function_selector) {\n            myHalfDividends();\n        } else if (0x46272a6d == function_selector) {\n            mySavings();\n        } else if (0x5c5a0a9d == function_selector) {\n            tokenBalanceLedger_(address);\n        } else if (0x651fe611 == function_selector) {\n            tokenSupply_();\n        } else if (0x710b318b == function_selector) {\n            profitPerShare_();\n        } else if (0x908921fc == function_selector) {\n            ceo();\n        } else if (0xa55d260d == function_selector) {\n            depositNoRef();\n        } else if (0xb69ef8a8 == function_selector) {\n            balance();\n        } else if (0xb9477b0e == function_selector) {\n            ceo2();\n        } else if (0xbf1b206b == function_selector) {\n            refBuys(address);\n        } else if (0xbf3b397b == function_selector) {\n            tokensToEthereum_(uint256);\n        } else if (0xe1456cb4 == function_selector) {\n            payoutsTo_(address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe777ff25 == function_selector) {\n            referralsHeld(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 06:49 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _referrer; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _referralsHeld; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _refBuys; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _tokenBalanceLedger_; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _payoutsTo_; // STORAGE[0x6]\nuint256 _tokenSupply_; // STORAGE[0x7]\nuint256 _profitPerShare_; // STORAGE[0x8]\nuint160 _ceo; // STORAGE[0x0] bytes 0 to 19\nuint160 _ceo2; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nonReinvestment(address, uint256, uint256);\nonTokenSell(address, uint256, uint256);\nonWithdraw(address, uint256);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return _payoutsTo_[varg0] * _profitPerShare_ - _payoutsTo_[varg0] >> 64;\n}\n\nfunction ethereumToTokens_(uint256 varg0) public nonPayable { \n    v0 = _SafeDiv(0x5f5e100, varg0);\n    return v0;\n}\n\nfunction referrer(address varg0) public nonPayable { \n    return address(_referrer[varg0]);\n}\n\nfunction myDividends() public nonPayable { \n    return _payoutsTo_[msg.sender] * _profitPerShare_ - _payoutsTo_[msg.sender] >> 64;\n}\n\nfunction myHalfDividends() public nonPayable { \n    assert(200);\n    return 98 * (_payoutsTo_[msg.sender] * _profitPerShare_ - _payoutsTo_[msg.sender] >> 64) / 200;\n}\n\nfunction mySavings() public nonPayable { \n    v0 = _SafeMul(_tokenBalanceLedger_[msg.sender], 0x5f5e100);\n    return v0;\n}\n\nfunction tokenBalanceLedger_(address varg0) public nonPayable { \n    return _tokenBalanceLedger_[varg0];\n}\n\nfunction tokenSupply_() public nonPayable { \n    return _tokenSupply_;\n}\n\nfunction profitPerShare_() public nonPayable { \n    return _profitPerShare_;\n}\n\nfunction ceo() public nonPayable { \n    return _ceo;\n}\n\nfunction depositNoRef() public payable { \n    0x4a3(0);\n}\n\nfunction balance() public nonPayable { \n    return this.balance;\n}\n\nfunction ceo2() public nonPayable { \n    return _ceo2;\n}\n\nfunction refBuys(address varg0) public nonPayable { \n    return _refBuys[varg0];\n}\n\nfunction tokensToEthereum_(uint256 varg0) public nonPayable { \n    v0 = _SafeMul(varg0, 0x5f5e100);\n    return v0;\n}\n\nfunction payoutsTo_(address varg0) public nonPayable { \n    return _payoutsTo_[varg0];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0x541();\n    v0 = _SafeDiv(0x5f5e100, varg0);\n    require(0 < _tokenBalanceLedger_[msg.sender]);\n    require(v0 <= _tokenBalanceLedger_[msg.sender]);\n    v1 = _SafeMul(v0, 0x5f5e100);\n    assert(v0 <= _tokenSupply_);\n    _tokenSupply_ = _tokenSupply_ - v0;\n    assert(v0 <= _tokenBalanceLedger_[msg.sender]);\n    _tokenBalanceLedger_[msg.sender] = _tokenBalanceLedger_[msg.sender] - v0;\n    _payoutsTo_[msg.sender] = _payoutsTo_[msg.sender] - ((v1 << 64) + v0 * _profitPerShare_);\n    emit onTokenSell(msg.sender, v0, v1);\n    v2 = _payoutsTo_[msg.sender] * _profitPerShare_ - _payoutsTo_[msg.sender] >> 64;\n    _payoutsTo_[msg.sender] += v2 << 64;\n    v3 = msg.sender.call().value(v2).gas(2300 * !v2);\n    require(v3); // checks call status, propagates error data on error\n    emit onWithdraw(msg.sender, v2);\n}\n\nfunction referralsHeld(address varg0) public nonPayable { \n    return _referralsHeld[varg0];\n}\n\nfunction deposit(address varg0) public payable { \n    0x4a3(varg0);\n}\n\nfunction reinvest() public nonPayable { \n    0x541();\n}\n\nfunction 0x4a3(uint256 varg0) private { \n    require(msg.sender != address(varg0));\n    v0 = v1 = !address(_referrer[msg.sender]);\n    if (v1) {\n        v0 = v2 = address(varg0);\n    }\n    if (v0) {\n        v3 = address(varg0);\n        _referrer[msg.sender] = v3 | ~0xffffffffffffffffffffffffffffffffffffffff & _referrer[msg.sender];\n        _refBuys[v3] += 1;\n    }\n    0x93c(msg.value);\n    return ;\n}\n\nfunction 0x541() private { \n    v0 = _payoutsTo_[msg.sender] * _profitPerShare_ - _payoutsTo_[msg.sender] >> 64;\n    _payoutsTo_[msg.sender] += v0 << 64;\n    v1 = _SafeDiv(2, v0);\n    assert(_referralsHeld[msg.sender] + v1 >= v1);\n    v2 = _SafeDiv(0x5f5e100, _referralsHeld[msg.sender] + v1);\n    if (v2 > 0) {\n        assert(_referralsHeld[msg.sender] + v1 >= v1);\n        0x93c(_referralsHeld[msg.sender] + v1);\n        _referralsHeld[msg.sender] = 0;\n    }\n    if (address(_referrer[address(msg.sender)])) {\n        assert(v1 + _referralsHeld[address(_referrer[address(msg.sender)])] >= _referralsHeld[address(_referrer[address(msg.sender)])]);\n        _referralsHeld[address(_referrer[address(msg.sender)])] += v1;\n    } else {\n        v3 = _SafeDiv(2, v1);\n        assert(v3 + _referralsHeld[_ceo] >= _referralsHeld[_ceo]);\n        _referralsHeld[_ceo] += v3;\n        assert(v3 + _referralsHeld[_ceo2] >= _referralsHeld[_ceo2]);\n        _referralsHeld[_ceo2] += v3;\n    }\n    emit onReinvestment(msg.sender, v0, v1);\n    return ;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    assert(varg0);\n    return varg1 / varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        assert(v0 / varg1 == varg0);\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\nfunction 0x93c(uint256 varg0) private { \n    v0 = _SafeDiv(50, varg0);\n    assert(v0 <= varg0);\n    v1 = _SafeDiv(0x5f5e100, varg0 - v0);\n    v2 = v3 = v0 << 64;\n    assert(_tokenSupply_ + v1 >= v1);\n    require(_tokenSupply_ + v1 > _tokenSupply_);\n    if (_tokenSupply_ <= 0) {\n        _tokenSupply_ = v1;\n    } else {\n        assert(v1 + _tokenSupply_ >= _tokenSupply_);\n        _tokenSupply_ += v1;\n        assert(v1 + _tokenSupply_);\n        _profitPerShare_ = _profitPerShare_ + (v0 << 64) / (v1 + _tokenSupply_);\n        assert(_tokenSupply_);\n        v2 = v4 = v3 - (v3 - v1 * ((v0 << 64) / _tokenSupply_));\n    }\n    assert(v1 + _tokenBalanceLedger_[msg.sender] >= _tokenBalanceLedger_[msg.sender]);\n    _tokenBalanceLedger_[msg.sender] += v1;\n    _payoutsTo_[msg.sender] += v1 * _profitPerShare_ - v2;\n    emit 0x22c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5(msg.sender, 0, varg0, v1);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x65318b) {\n            dividendsOf(address);\n        } else if (0x2a9121c7 == function_selector) {\n            ethereumToTokens_(uint256);\n        } else if (0x2cf003c2 == function_selector) {\n            referrer(address);\n        } else if (0x3151ecfc == function_selector) {\n            myDividends();\n        } else if (0x3619cd99 == function_selector) {\n            myHalfDividends();\n        } else if (0x46272a6d == function_selector) {\n            mySavings();\n        } else if (0x5c5a0a9d == function_selector) {\n            tokenBalanceLedger_(address);\n        } else if (0x651fe611 == function_selector) {\n            tokenSupply_();\n        } else if (0x710b318b == function_selector) {\n            profitPerShare_();\n        } else if (0x908921fc == function_selector) {\n            ceo();\n        } else if (0xa55d260d == function_selector) {\n            depositNoRef();\n        } else if (0xb69ef8a8 == function_selector) {\n            balance();\n        } else if (0xb9477b0e == function_selector) {\n            ceo2();\n        } else if (0xbf1b206b == function_selector) {\n            refBuys(address);\n        } else if (0xbf3b397b == function_selector) {\n            tokensToEthereum_(uint256);\n        } else if (0xe1456cb4 == function_selector) {\n            payoutsTo_(address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe777ff25 == function_selector) {\n            referralsHeld(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 26.72732925415039,
	"usage": {
		"completion_tokens": 534,
		"prompt_tokens": 2619,
		"total_tokens": 3153
	}
}