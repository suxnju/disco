{
	"address": "0x8a99ed8a1b204903ee46e733f2c1286f6d20b177",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The provided code is a decompiled EVM bytecode, not a valid Solidity contract. It seems to be a representation of a token contract with additional features such as freezing accounts and approving transactions. However, the decompiled code cannot be translated directly into a Solidity contract without making certain assumptions and interpretations about the original contract's functionality.\n\nBelow is a simplified version of what this contract might look like in Solidity. Note that this is an interpretation and it doesn't contain all the functionalities of the decompiled code:\n\n```Solidity\npragma solidity ^0.8.0;\n\ncontract MyToken {\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) frozenAccount;\n\n    uint256 totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    address public owner;\n    uint256 public buyRate;\n    bool public isSelling;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FrozenFunds(address target, bool frozen);\n\n    constructor() {\n        owner = msg.sender;\n        // Initialize other state variables...\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _amount) public {\n        require(balances[msg.sender] >= _amount);\n        require(balances[_to] + _amount >= balances[_to]);\n        require(!frozenAccount[msg.sender]);\n\n        balances[msg.sender] -= _amount;\n        balances[_to] += _amount;\n        emit Transfer(msg.sender, _to, _amount);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n        require(balances[_from] >= _amount);\n        require(allowed[_from][msg.sender] >= _amount);\n        require(balances[_to] + _amount >= balances[_to]);\n        require(!frozenAccount[_from]);\n\n        balances[_from] -= _amount;\n        balances[_to] += _amount;\n        allowed[_from][msg.sender] -= _amount;\n        emit Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function freezeAccount(address target, bool freeze) public {\n        require(msg.sender == owner);\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    function setBuyRate(uint256 newBuyRate) public {\n        require(msg.sender == owner);\n        buyRate = newBuyRate;\n    }\n\n    function setSelling(bool newIsSelling) public {\n        require(msg.sender == owner);\n        isSelling = newIsSelling;\n    }\n\n    // Rest of the contract...\n}\n```",
				"role": "assistant"
			}
		}
	],
	"created": 1701464770,
	"id": "chatcmpl-8R506hvbExMrD1jEpncayOKC4JU5v",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 10:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 _buyRate; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0x9]\naddress _setBuyRate; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 _isSelling; // STORAGE[0x8] bytes 0 to 0\n\n// Events\nFrozenFunds(address, bool);\nTransfer(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!(0xff & _frozenAccount[varg0]));\n    require(_balanceOf[varg0] >= varg2);\n    require(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    require(varg2 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    _balanceOf[varg1] += varg2;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdrawToOwner(uint256 varg0) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    v0 = _setBuyRate.call().value(varg0).gas(2300 * !varg0);\n    require(v0);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(0, _setBuyRate, varg1);\n    emit Transfer(_setBuyRate, varg0, varg1);\n}\n\nfunction setBuyRate(uint256 varg0) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _buyRate = varg0;\n}\n\nfunction owner() public nonPayable { \n    return _setBuyRate;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    require(_isSelling);\n    _balanceOf[msg.sender] += _buyRate * msg.value;\n    _balanceOf[_setBuyRate] = _balanceOf[_setBuyRate] - _buyRate * msg.value;\n    emit Transfer(_setBuyRate, msg.sender, _buyRate * msg.value);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg1);\n    require(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    require(!(0xff & _frozenAccount[msg.sender]));\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction isSelling() public nonPayable { \n    return _isSelling;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _setBuyRate = varg0;\n}\n\nfunction buyRate() public nonPayable { \n    return _buyRate;\n}\n\nfunction setSelling(bool varg0) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _isSelling = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x6a5bbc1d == function_selector) {\n            withdrawToOwner(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x85e436bf == function_selector) {\n            setBuyRate(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xcbf21837 == function_selector) {\n            isSelling();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfc37987b == function_selector) {\n            buyRate();\n        } else if (0xfce3bbb5 == function_selector) {\n            setSelling(bool);\n        }\n    }\n    require(!msg.value);\n    revert();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 10:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 _buyRate; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0x9]\naddress _setBuyRate; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 _isSelling; // STORAGE[0x8] bytes 0 to 0\n\n// Events\nFrozenFunds(address, bool);\nTransfer(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!(0xff & _frozenAccount[varg0]));\n    require(_balanceOf[varg0] >= varg2);\n    require(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    require(varg2 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    _balanceOf[varg1] += varg2;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdrawToOwner(uint256 varg0) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    v0 = _setBuyRate.call().value(varg0).gas(2300 * !varg0);\n    require(v0);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(0, _setBuyRate, varg1);\n    emit Transfer(_setBuyRate, varg0, varg1);\n}\n\nfunction setBuyRate(uint256 varg0) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _buyRate = varg0;\n}\n\nfunction owner() public nonPayable { \n    return _setBuyRate;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    require(_isSelling);\n    _balanceOf[msg.sender] += _buyRate * msg.value;\n    _balanceOf[_setBuyRate] = _balanceOf[_setBuyRate] - _buyRate * msg.value;\n    emit Transfer(_setBuyRate, msg.sender, _buyRate * msg.value);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg1);\n    require(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    require(!(0xff & _frozenAccount[msg.sender]));\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction isSelling() public nonPayable { \n    return _isSelling;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _setBuyRate = varg0;\n}\n\nfunction buyRate() public nonPayable { \n    return _buyRate;\n}\n\nfunction setSelling(bool varg0) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _isSelling = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x6a5bbc1d == function_selector) {\n            withdrawToOwner(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x85e436bf == function_selector) {\n            setBuyRate(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xcbf21837 == function_selector) {\n            isSelling();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfc37987b == function_selector) {\n            buyRate();\n        } else if (0xfce3bbb5 == function_selector) {\n            setSelling(bool);\n        }\n    }\n    require(!msg.value);\n    revert();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 10:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 _buyRate; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0x9]\naddress _setBuyRate; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 _isSelling; // STORAGE[0x8] bytes 0 to 0\n\n// Events\nFrozenFunds(address, bool);\nTransfer(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!(0xff & _frozenAccount[varg0]));\n    require(_balanceOf[varg0] >= varg2);\n    require(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    require(varg2 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    _balanceOf[varg1] += varg2;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdrawToOwner(uint256 varg0) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    v0 = _setBuyRate.call().value(varg0).gas(2300 * !varg0);\n    require(v0);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(0, _setBuyRate, varg1);\n    emit Transfer(_setBuyRate, varg0, varg1);\n}\n\nfunction setBuyRate(uint256 varg0) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _buyRate = varg0;\n}\n\nfunction owner() public nonPayable { \n    return _setBuyRate;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    require(_isSelling);\n    _balanceOf[msg.sender] += _buyRate * msg.value;\n    _balanceOf[_setBuyRate] = _balanceOf[_setBuyRate] - _buyRate * msg.value;\n    emit Transfer(_setBuyRate, msg.sender, _buyRate * msg.value);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg1);\n    require(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    require(!(0xff & _frozenAccount[msg.sender]));\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction isSelling() public nonPayable { \n    return _isSelling;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _setBuyRate = varg0;\n}\n\nfunction buyRate() public nonPayable { \n    return _buyRate;\n}\n\nfunction setSelling(bool varg0) public nonPayable { \n    require(_setBuyRate == msg.sender);\n    _isSelling = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x6a5bbc1d == function_selector) {\n            withdrawToOwner(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x85e436bf == function_selector) {\n            setBuyRate(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xcbf21837 == function_selector) {\n            isSelling();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfc37987b == function_selector) {\n            buyRate();\n        } else if (0xfce3bbb5 == function_selector) {\n            setSelling(bool);\n        }\n    }\n    require(!msg.value);\n    revert();\n}\n.",
	"status": "1",
	"time_cost": 38.38009786605835,
	"usage": {
		"completion_tokens": 646,
		"prompt_tokens": 2469,
		"total_tokens": 3115
	}
}