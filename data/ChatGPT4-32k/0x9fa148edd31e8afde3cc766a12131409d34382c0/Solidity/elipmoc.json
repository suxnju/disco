{
	"address": "0x9fa148edd31e8afde3cc766a12131409d34382c0",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is the Solidity contract code according to your decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    address private _owner;\n    uint256 private _totalSupply;\n    uint256 private _minted;\n    uint256 private _minReward;\n    uint256 private _fee;\n    uint256 private _reducer;\n    uint256 private stor_8;\n    uint256 private stor_a;\n    uint8 private _decimals;\n    string private _name;\n    string private _symbol;\n\n    mapping(address => uint256) private _balanceOf;\n    mapping(address => uint256) private _successesOf;\n    mapping(address => uint256) private _failsOf;\n    mapping(address => mapping(address => uint256)) private _allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[msg.sender][spender] = value;\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= _allowance[from][msg.sender]);\n        _allowance[from][msg.sender] -= value;\n        _internalTransfer(from, to, value);\n        return true;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function minted() public view returns (uint256) {\n        return _minted;\n    }\n\n    function reducer() public view returns (uint256) {\n        return _reducer;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function withdrawEther() public {\n        require(_owner == msg.sender);\n        msg.sender.transfer(stor_a);\n        stor_a = 0;\n    }\n\n    function failsOf(address owner) public view returns (uint256) {\n        return _failsOf[owner];\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _internalTransfer(msg.sender, to, value);\n        return true;\n    }\n\n    function minReward() public view returns (uint256) {\n        return _minReward;\n    }\n\n    function successesOf(address owner) public view returns (uint256) {\n        return _successesOf[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function fee() public view returns (uint256) {\n        return _fee;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(_owner == msg.sender);\n        _owner = newOwner;\n    }\n\n    function _internalTransfer(address from, address to, uint256 value) private {\n        require(_balanceOf[from] >= value);\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(from, to, value);\n    }\n}\n```\n\nThis contract code is simplified and doesn't include all the logic from the decompiled code. Some parts are not clear, like `stor_8` and `stor_a` variables, or the `0x566` function.",
				"role": "assistant"
			}
		}
	],
	"created": 1701466173,
	"id": "chatcmpl-8R5MjwixtaPOjeL7TRNlaOLmm7Z0m",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.26 08:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nuint256 _minted; // STORAGE[0x4]\nuint256 _minReward; // STORAGE[0x5]\nuint256 _fee; // STORAGE[0x6]\nuint256 _reducer; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_a; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _successesOf; // STORAGE[0xc]\nmapping (uint256 => [uint256]) _failsOf; // STORAGE[0xd]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0xe]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\naddress _owner; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x566(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction minted() public nonPayable { \n    return _minted;\n}\n\nfunction reducer() public nonPayable { \n    return _reducer;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction withdrawEther() public nonPayable { \n    require(_owner == msg.sender);\n    v0 = _owner.call().value(stor_a).gas(2300 * !stor_a);\n    require(v0);\n    stor_a = 0;\n}\n\nfunction failsOf(address varg0) public nonPayable { \n    return _failsOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x566(varg1, varg0, msg.sender);\n}\n\nfunction minReward() public nonPayable { \n    return _minReward;\n}\n\nfunction successesOf(address varg0) public nonPayable { \n    return _successesOf[varg0];\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction fee() public nonPayable { \n    return _fee;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _owner = varg0;\n}\n\nfunction 0x566(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    _balanceOf[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v5] + _balanceOf[v4]);\n    return ;\n}\n\nfunction fallback() public payable { \n    if (msg.value == _fee) {\n        stor_8 = stor_8 + (msg.sender + block.timestamp);\n        MEM[32 + MEM[64]] = 0;\n        v0, v1 = sha256hash(block.blockhash(~0 + block.number) + (stor_8 + (msg.sender + block.timestamp)) + msg.sender);\n        require(v0);\n        assert(0x989680);\n        assert(_minted);\n        v2 = v3 = 1000 * _balanceOf[msg.sender] / _minted;\n        if (v3 >= 1) {\n            if (v3 > 255) {\n                v2 = v4 = 255;\n            }\n            assert(2 ** v2);\n            if (v1 % 0x989680 >= 0x4c4b40 - 0x4c4b40 / 2 ** v2) {\n                emit Transfer(address(this), msg.sender, 0);\n                _failsOf[msg.sender] += 1;\n            } else {\n                assert(_reducer);\n                0x566(_minReward + 0x5af3107a4000 * (1000 * (v1 % 0x989680) / _reducer), msg.sender, this);\n                _minted += _minReward + 0x5af3107a4000 * (1000 * (v1 % 0x989680) / _reducer);\n                _successesOf[msg.sender] += 1;\n            }\n            stor_a += _fee;\n            _reducer += 1;\n            exit;\n        }\n    }\n    revert();\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x4f02c420 == function_selector) {\n            minted();\n        } else if (0x65fddc81 == function_selector) {\n            reducer();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7362377b == function_selector) {\n            withdrawEther();\n        } else if (0x753ded15 == function_selector) {\n            failsOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xba16d600 == function_selector) {\n            minReward();\n        } else if (0xcd9354e4 == function_selector) {\n            successesOf(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xddca3f43 == function_selector) {\n            fee();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 08:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nuint256 _minted; // STORAGE[0x4]\nuint256 _minReward; // STORAGE[0x5]\nuint256 _fee; // STORAGE[0x6]\nuint256 _reducer; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_a; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _successesOf; // STORAGE[0xc]\nmapping (uint256 => [uint256]) _failsOf; // STORAGE[0xd]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0xe]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\naddress _owner; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x566(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction minted() public nonPayable { \n    return _minted;\n}\n\nfunction reducer() public nonPayable { \n    return _reducer;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction withdrawEther() public nonPayable { \n    require(_owner == msg.sender);\n    v0 = _owner.call().value(stor_a).gas(2300 * !stor_a);\n    require(v0);\n    stor_a = 0;\n}\n\nfunction failsOf(address varg0) public nonPayable { \n    return _failsOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x566(varg1, varg0, msg.sender);\n}\n\nfunction minReward() public nonPayable { \n    return _minReward;\n}\n\nfunction successesOf(address varg0) public nonPayable { \n    return _successesOf[varg0];\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction fee() public nonPayable { \n    return _fee;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _owner = varg0;\n}\n\nfunction 0x566(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    _balanceOf[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v5] + _balanceOf[v4]);\n    return ;\n}\n\nfunction fallback() public payable { \n    if (msg.value == _fee) {\n        stor_8 = stor_8 + (msg.sender + block.timestamp);\n        MEM[32 + MEM[64]] = 0;\n        v0, v1 = sha256hash(block.blockhash(~0 + block.number) + (stor_8 + (msg.sender + block.timestamp)) + msg.sender);\n        require(v0);\n        assert(0x989680);\n        assert(_minted);\n        v2 = v3 = 1000 * _balanceOf[msg.sender] / _minted;\n        if (v3 >= 1) {\n            if (v3 > 255) {\n                v2 = v4 = 255;\n            }\n            assert(2 ** v2);\n            if (v1 % 0x989680 >= 0x4c4b40 - 0x4c4b40 / 2 ** v2) {\n                emit Transfer(address(this), msg.sender, 0);\n                _failsOf[msg.sender] += 1;\n            } else {\n                assert(_reducer);\n                0x566(_minReward + 0x5af3107a4000 * (1000 * (v1 % 0x989680) / _reducer), msg.sender, this);\n                _minted += _minReward + 0x5af3107a4000 * (1000 * (v1 % 0x989680) / _reducer);\n                _successesOf[msg.sender] += 1;\n            }\n            stor_a += _fee;\n            _reducer += 1;\n            exit;\n        }\n    }\n    revert();\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x4f02c420 == function_selector) {\n            minted();\n        } else if (0x65fddc81 == function_selector) {\n            reducer();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7362377b == function_selector) {\n            withdrawEther();\n        } else if (0x753ded15 == function_selector) {\n            failsOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xba16d600 == function_selector) {\n            minReward();\n        } else if (0xcd9354e4 == function_selector) {\n            successesOf(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xddca3f43 == function_selector) {\n            fee();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 08:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nuint256 _minted; // STORAGE[0x4]\nuint256 _minReward; // STORAGE[0x5]\nuint256 _fee; // STORAGE[0x6]\nuint256 _reducer; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_a; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _successesOf; // STORAGE[0xc]\nmapping (uint256 => [uint256]) _failsOf; // STORAGE[0xd]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0xe]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\naddress _owner; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x566(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction minted() public nonPayable { \n    return _minted;\n}\n\nfunction reducer() public nonPayable { \n    return _reducer;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction withdrawEther() public nonPayable { \n    require(_owner == msg.sender);\n    v0 = _owner.call().value(stor_a).gas(2300 * !stor_a);\n    require(v0);\n    stor_a = 0;\n}\n\nfunction failsOf(address varg0) public nonPayable { \n    return _failsOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x566(varg1, varg0, msg.sender);\n}\n\nfunction minReward() public nonPayable { \n    return _minReward;\n}\n\nfunction successesOf(address varg0) public nonPayable { \n    return _successesOf[varg0];\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction fee() public nonPayable { \n    return _fee;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _owner = varg0;\n}\n\nfunction 0x566(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    _balanceOf[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v5] + _balanceOf[v4]);\n    return ;\n}\n\nfunction fallback() public payable { \n    if (msg.value == _fee) {\n        stor_8 = stor_8 + (msg.sender + block.timestamp);\n        MEM[32 + MEM[64]] = 0;\n        v0, v1 = sha256hash(block.blockhash(~0 + block.number) + (stor_8 + (msg.sender + block.timestamp)) + msg.sender);\n        require(v0);\n        assert(0x989680);\n        assert(_minted);\n        v2 = v3 = 1000 * _balanceOf[msg.sender] / _minted;\n        if (v3 >= 1) {\n            if (v3 > 255) {\n                v2 = v4 = 255;\n            }\n            assert(2 ** v2);\n            if (v1 % 0x989680 >= 0x4c4b40 - 0x4c4b40 / 2 ** v2) {\n                emit Transfer(address(this), msg.sender, 0);\n                _failsOf[msg.sender] += 1;\n            } else {\n                assert(_reducer);\n                0x566(_minReward + 0x5af3107a4000 * (1000 * (v1 % 0x989680) / _reducer), msg.sender, this);\n                _minted += _minReward + 0x5af3107a4000 * (1000 * (v1 % 0x989680) / _reducer);\n                _successesOf[msg.sender] += 1;\n            }\n            stor_a += _fee;\n            _reducer += 1;\n            exit;\n        }\n    }\n    revert();\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x4f02c420 == function_selector) {\n            minted();\n        } else if (0x65fddc81 == function_selector) {\n            reducer();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7362377b == function_selector) {\n            withdrawEther();\n        } else if (0x753ded15 == function_selector) {\n            failsOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xba16d600 == function_selector) {\n            minReward();\n        } else if (0xcd9354e4 == function_selector) {\n            successesOf(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xddca3f43 == function_selector) {\n            fee();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 27.852493286132812,
	"usage": {
		"completion_tokens": 770,
		"prompt_tokens": 2288,
		"total_tokens": 3058
	}
}