{
	"address": "0xf97c238b2277b2e7d15e278b61b250e96b23a194",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the given decompiled EVM bytecode, here is a representation in Solidity:\n\n```solidity\npragma solidity ^0.5.2;\n\ncontract TokenContract{\n    uint256[] private _name;\n    uint256[] private _symbol;\n    uint256 private _tokePerEth;\n    uint256 private _weiAmount;\n    uint256 private _getIncomingValueAsEth;\n    uint256 private _getCalcToken;\n    uint256 private _getTokePerWei;\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balances;\n    uint8 private _decimals;\n    address private _owner;\n    address private _dev;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    function() external payable { \n        require(msg.value > 0);\n        _getTokePerWei = _tokePerEth;\n        uint256 v0 = SafeMul(_getTokePerWei, msg.value);\n        _getCalcToken = v0;\n        require(_totalSupply >= _getCalcToken);\n        require(_getCalcToken <= _totalSupply);\n        _totalSupply = _totalSupply - _getCalcToken;\n        require(_balances[msg.sender] + _getCalcToken >= _balances[msg.sender]);\n        _balances[msg.sender] = _balances[msg.sender] + _getCalcToken;\n        emit Transfer(address(this), msg.sender, _getCalcToken);\n    }\n\n    function name() public view returns (uint256[] memory) { \n        return _name;\n    }\n\n    function weiAmount() public view returns (uint256) { \n        return _weiAmount;\n    }\n\n    function getTokePerWei() public view returns (uint256) { \n        return _getTokePerWei;\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function balances(address _address) public view returns (uint256) { \n        return _balances[_address];\n    }\n\n    function decimals() public view returns (uint8) { \n        return _decimals;\n    }\n\n    function getIncomingValueAsEth() public view returns (uint256) { \n        return _getIncomingValueAsEth;\n    }\n\n    function getCalcToken() public view returns (uint256) { \n        return _getCalcToken;\n    }\n\n    function balanceOf(address _address) public view returns (uint256) { \n        return _balances[_address];\n    }\n\n    function updateTokenBalance(uint256 _value) public { \n        require(msg.sender == _owner);\n        require(_totalSupply + _value >= _totalSupply);\n        _totalSupply = _totalSupply + _value;\n    }\n\n    function dev() public view returns (address) { \n        return _dev;\n    }\n\n    function symbol() public view returns (uint256[] memory) { \n        return _symbol;\n    }\n\n    function changeOwner(address newOwner) public { \n        require(msg.sender == _owner);\n        _owner = newOwner;\n    }\n\n    function transfer(address _to, uint256 _value) public { \n        require(_balances[msg.sender] >= _value);\n        require(_value <= _balances[msg.sender]);\n        _balances[msg.sender] = _balances[msg.sender] - _value;\n        require(_balances[_to] + _value >= _balances[_to]);\n        _balances[_to] = _balances[_to] + _value;\n        emit Transfer(msg.sender, _to, _value);\n    }\n\n    function owner() public view returns (address) { \n        return _owner;\n    }\n\n    function safeWithdrawal(address payable _to, uint256 _value) public { \n        require(msg.sender == _owner);\n        uint256 v0 = SafeMul(1 ether, _value);\n        require(v0 < address(this).balance);\n        _to.transfer(v0);\n    }\n\n    function tokePerEth() public view returns (uint256) { \n        return _tokePerEth;\n    }\n\n    function changePayRate(uint256 _value) public { \n        require(msg.sender == _owner);\n        _tokePerEth = _value;\n    }\n\n    function getWeiAmount() public view returns (uint256) { \n        return _weiAmount;\n    }\n\n    function SafeMul(uint256 a, uint256 b) internal pure returns (uint256) { \n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        assert(c / a == b);\n\n        return c;\n    }\n}\n```\n\nPlease note that the given decompiled code contains some elements that are not clear or not typical in Solidity, such as the management of byte arrays for `_name` and `_symbol`. These are re-interpreted as arrays of `uint256` for simplicity, which may not reflect the original intent of the code. Also, `_dev` is interpreted as an `address` type, which seems to fit the context, but this might be different in the original code. The function `transfer(address,uint256,bytes)` is not included as it's not clear how to interpret it based on the given code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701459881,
	"id": "chatcmpl-8R3jF9udMPipRYRxCmhBKQBVCigAY",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.17 02:13 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 __tokePerEth; // STORAGE[0x5]\nuint256 _weiAmount; // STORAGE[0x6]\nuint256 _getIncomingValueAsEth; // STORAGE[0x7]\nuint256 _getCalcToken; // STORAGE[0x8]\nuint256 _getTokePerWei; // STORAGE[0x9]\nuint256 __totalSupply; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _balances; // STORAGE[0xb]\nuint8 _decimals; // STORAGE[0x1] bytes 0 to 0\naddress __owner; // STORAGE[0x3] bytes 0 to 19\nuint160 _dev; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    require(msg.value > 0);\n    _getTokePerWei = __tokePerEth;\n    v0 = _SafeMul(_getTokePerWei, msg.value);\n    _getCalcToken = v0;\n    require(__totalSupply >= _getCalcToken);\n    require(_getCalcToken <= __totalSupply);\n    __totalSupply = __totalSupply - _getCalcToken;\n    require(_balances[msg.sender] + _getCalcToken >= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] + _getCalcToken;\n    emit Transfer(address(this), msg.sender, _getCalcToken);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction weiAmount() public nonPayable { \n    return _weiAmount;\n}\n\nfunction getTokePerWei() public nonPayable { \n    return _getTokePerWei;\n}\n\nfunction totalSupply() public nonPayable { \n    return __totalSupply;\n}\n\nfunction balances(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction _totalSupply() public nonPayable { \n    return __totalSupply;\n}\n\nfunction getIncomingValueAsEth() public nonPayable { \n    return _getIncomingValueAsEth;\n}\n\nfunction getCalcToken() public nonPayable { \n    return _getCalcToken;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction updateTokenBalance(uint256 varg0) public nonPayable { \n    require(msg.sender == __owner);\n    require(__totalSupply + varg0 >= __totalSupply);\n    __totalSupply = __totalSupply + varg0;\n}\n\nfunction dev() public nonPayable { \n    return _dev;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction changeOwner(address varg0) public nonPayable { \n    require(msg.sender == __owner);\n    __owner = varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_balances[msg.sender] >= varg1);\n    v0 = varg0.code.size;\n    require(varg1 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg1;\n    require(_balances[varg0] + varg1 >= _balances[varg0]);\n    _balances[varg0] = _balances[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction _owner() public nonPayable { \n    return __owner;\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[](varg2.length);\n    CALLDATACOPY(v0.data, 36 + varg2, varg2.length);\n    require(_balances[msg.sender] >= varg1);\n    v1 = varg0.code.size;\n    require(varg1 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg1;\n    require(_balances[varg0] + varg1 >= _balances[varg0]);\n    _balances[varg0] = _balances[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction safeWithdrawal(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == __owner);\n    v0 = _SafeMul(0xde0b6b3a7640000, varg1);\n    require(v0 < (address(this)).balance);\n    v1 = varg0.call().value(v0).gas(!v0 * 2300);\n}\n\nfunction _tokePerEth() public nonPayable { \n    return __tokePerEth;\n}\n\nfunction changePayRate(uint256 varg0) public nonPayable { \n    v0 = v1 = msg.sender == __owner;\n    if (v1) {\n        v0 = v2 = varg0 >= 0;\n    }\n    require(v0);\n    __tokePerEth = varg0;\n}\n\nfunction getWeiAmount() public nonPayable { \n    return _weiAmount;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0xd10e842 == function_selector) {\n            weiAmount();\n        } else if (0x13ddd3ae == function_selector) {\n            getTokePerWei();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x27e235e3 == function_selector) {\n            balances(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3eaaf86b == function_selector) {\n            _totalSupply();\n        } else if (0x66154885 == function_selector) {\n            getIncomingValueAsEth();\n        } else if (0x6ef4e8db == function_selector) {\n            getCalcToken();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x882dd41e == function_selector) {\n            updateTokenBalance(uint256);\n        } else if (0x91cca3db == function_selector) {\n            dev();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f9dae1 == function_selector) {\n            changeOwner(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb2bdfa7b == function_selector) {\n            _owner();\n        } else if (0xbe45fd62 == function_selector) {\n            transfer(address,uint256,bytes);\n        } else if (0xd34dd1f0 == function_selector) {\n            safeWithdrawal(address,uint256);\n        } else if (0xd7be503f == function_selector) {\n            _tokePerEth();\n        } else if (0xda9c87fa == function_selector) {\n            changePayRate(uint256);\n        } else if (0xdc2d46f8 == function_selector) {\n            getWeiAmount();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.17 02:13 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 __tokePerEth; // STORAGE[0x5]\nuint256 _weiAmount; // STORAGE[0x6]\nuint256 _getIncomingValueAsEth; // STORAGE[0x7]\nuint256 _getCalcToken; // STORAGE[0x8]\nuint256 _getTokePerWei; // STORAGE[0x9]\nuint256 __totalSupply; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _balances; // STORAGE[0xb]\nuint8 _decimals; // STORAGE[0x1] bytes 0 to 0\naddress __owner; // STORAGE[0x3] bytes 0 to 19\nuint160 _dev; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    require(msg.value > 0);\n    _getTokePerWei = __tokePerEth;\n    v0 = _SafeMul(_getTokePerWei, msg.value);\n    _getCalcToken = v0;\n    require(__totalSupply >= _getCalcToken);\n    require(_getCalcToken <= __totalSupply);\n    __totalSupply = __totalSupply - _getCalcToken;\n    require(_balances[msg.sender] + _getCalcToken >= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] + _getCalcToken;\n    emit Transfer(address(this), msg.sender, _getCalcToken);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction weiAmount() public nonPayable { \n    return _weiAmount;\n}\n\nfunction getTokePerWei() public nonPayable { \n    return _getTokePerWei;\n}\n\nfunction totalSupply() public nonPayable { \n    return __totalSupply;\n}\n\nfunction balances(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction _totalSupply() public nonPayable { \n    return __totalSupply;\n}\n\nfunction getIncomingValueAsEth() public nonPayable { \n    return _getIncomingValueAsEth;\n}\n\nfunction getCalcToken() public nonPayable { \n    return _getCalcToken;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction updateTokenBalance(uint256 varg0) public nonPayable { \n    require(msg.sender == __owner);\n    require(__totalSupply + varg0 >= __totalSupply);\n    __totalSupply = __totalSupply + varg0;\n}\n\nfunction dev() public nonPayable { \n    return _dev;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction changeOwner(address varg0) public nonPayable { \n    require(msg.sender == __owner);\n    __owner = varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_balances[msg.sender] >= varg1);\n    v0 = varg0.code.size;\n    require(varg1 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg1;\n    require(_balances[varg0] + varg1 >= _balances[varg0]);\n    _balances[varg0] = _balances[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction _owner() public nonPayable { \n    return __owner;\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[](varg2.length);\n    CALLDATACOPY(v0.data, 36 + varg2, varg2.length);\n    require(_balances[msg.sender] >= varg1);\n    v1 = varg0.code.size;\n    require(varg1 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg1;\n    require(_balances[varg0] + varg1 >= _balances[varg0]);\n    _balances[varg0] = _balances[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction safeWithdrawal(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == __owner);\n    v0 = _SafeMul(0xde0b6b3a7640000, varg1);\n    require(v0 < (address(this)).balance);\n    v1 = varg0.call().value(v0).gas(!v0 * 2300);\n}\n\nfunction _tokePerEth() public nonPayable { \n    return __tokePerEth;\n}\n\nfunction changePayRate(uint256 varg0) public nonPayable { \n    v0 = v1 = msg.sender == __owner;\n    if (v1) {\n        v0 = v2 = varg0 >= 0;\n    }\n    require(v0);\n    __tokePerEth = varg0;\n}\n\nfunction getWeiAmount() public nonPayable { \n    return _weiAmount;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0xd10e842 == function_selector) {\n            weiAmount();\n        } else if (0x13ddd3ae == function_selector) {\n            getTokePerWei();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x27e235e3 == function_selector) {\n            balances(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3eaaf86b == function_selector) {\n            _totalSupply();\n        } else if (0x66154885 == function_selector) {\n            getIncomingValueAsEth();\n        } else if (0x6ef4e8db == function_selector) {\n            getCalcToken();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x882dd41e == function_selector) {\n            updateTokenBalance(uint256);\n        } else if (0x91cca3db == function_selector) {\n            dev();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f9dae1 == function_selector) {\n            changeOwner(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb2bdfa7b == function_selector) {\n            _owner();\n        } else if (0xbe45fd62 == function_selector) {\n            transfer(address,uint256,bytes);\n        } else if (0xd34dd1f0 == function_selector) {\n            safeWithdrawal(address,uint256);\n        } else if (0xd7be503f == function_selector) {\n            _tokePerEth();\n        } else if (0xda9c87fa == function_selector) {\n            changePayRate(uint256);\n        } else if (0xdc2d46f8 == function_selector) {\n            getWeiAmount();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.17 02:13 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 __tokePerEth; // STORAGE[0x5]\nuint256 _weiAmount; // STORAGE[0x6]\nuint256 _getIncomingValueAsEth; // STORAGE[0x7]\nuint256 _getCalcToken; // STORAGE[0x8]\nuint256 _getTokePerWei; // STORAGE[0x9]\nuint256 __totalSupply; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _balances; // STORAGE[0xb]\nuint8 _decimals; // STORAGE[0x1] bytes 0 to 0\naddress __owner; // STORAGE[0x3] bytes 0 to 19\nuint160 _dev; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    require(msg.value > 0);\n    _getTokePerWei = __tokePerEth;\n    v0 = _SafeMul(_getTokePerWei, msg.value);\n    _getCalcToken = v0;\n    require(__totalSupply >= _getCalcToken);\n    require(_getCalcToken <= __totalSupply);\n    __totalSupply = __totalSupply - _getCalcToken;\n    require(_balances[msg.sender] + _getCalcToken >= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] + _getCalcToken;\n    emit Transfer(address(this), msg.sender, _getCalcToken);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction weiAmount() public nonPayable { \n    return _weiAmount;\n}\n\nfunction getTokePerWei() public nonPayable { \n    return _getTokePerWei;\n}\n\nfunction totalSupply() public nonPayable { \n    return __totalSupply;\n}\n\nfunction balances(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction _totalSupply() public nonPayable { \n    return __totalSupply;\n}\n\nfunction getIncomingValueAsEth() public nonPayable { \n    return _getIncomingValueAsEth;\n}\n\nfunction getCalcToken() public nonPayable { \n    return _getCalcToken;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction updateTokenBalance(uint256 varg0) public nonPayable { \n    require(msg.sender == __owner);\n    require(__totalSupply + varg0 >= __totalSupply);\n    __totalSupply = __totalSupply + varg0;\n}\n\nfunction dev() public nonPayable { \n    return _dev;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction changeOwner(address varg0) public nonPayable { \n    require(msg.sender == __owner);\n    __owner = varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_balances[msg.sender] >= varg1);\n    v0 = varg0.code.size;\n    require(varg1 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg1;\n    require(_balances[varg0] + varg1 >= _balances[varg0]);\n    _balances[varg0] = _balances[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction _owner() public nonPayable { \n    return __owner;\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[](varg2.length);\n    CALLDATACOPY(v0.data, 36 + varg2, varg2.length);\n    require(_balances[msg.sender] >= varg1);\n    v1 = varg0.code.size;\n    require(varg1 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg1;\n    require(_balances[varg0] + varg1 >= _balances[varg0]);\n    _balances[varg0] = _balances[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction safeWithdrawal(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == __owner);\n    v0 = _SafeMul(0xde0b6b3a7640000, varg1);\n    require(v0 < (address(this)).balance);\n    v1 = varg0.call().value(v0).gas(!v0 * 2300);\n}\n\nfunction _tokePerEth() public nonPayable { \n    return __tokePerEth;\n}\n\nfunction changePayRate(uint256 varg0) public nonPayable { \n    v0 = v1 = msg.sender == __owner;\n    if (v1) {\n        v0 = v2 = varg0 >= 0;\n    }\n    require(v0);\n    __tokePerEth = varg0;\n}\n\nfunction getWeiAmount() public nonPayable { \n    return _weiAmount;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0xd10e842 == function_selector) {\n            weiAmount();\n        } else if (0x13ddd3ae == function_selector) {\n            getTokePerWei();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x27e235e3 == function_selector) {\n            balances(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3eaaf86b == function_selector) {\n            _totalSupply();\n        } else if (0x66154885 == function_selector) {\n            getIncomingValueAsEth();\n        } else if (0x6ef4e8db == function_selector) {\n            getCalcToken();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x882dd41e == function_selector) {\n            updateTokenBalance(uint256);\n        } else if (0x91cca3db == function_selector) {\n            dev();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f9dae1 == function_selector) {\n            changeOwner(address);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb2bdfa7b == function_selector) {\n            _owner();\n        } else if (0xbe45fd62 == function_selector) {\n            transfer(address,uint256,bytes);\n        } else if (0xd34dd1f0 == function_selector) {\n            safeWithdrawal(address,uint256);\n        } else if (0xd7be503f == function_selector) {\n            _tokePerEth();\n        } else if (0xda9c87fa == function_selector) {\n            changePayRate(uint256);\n        } else if (0xdc2d46f8 == function_selector) {\n            getWeiAmount();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 59.005505323410034,
	"usage": {
		"completion_tokens": 1096,
		"prompt_tokens": 2333,
		"total_tokens": 3429
	}
}