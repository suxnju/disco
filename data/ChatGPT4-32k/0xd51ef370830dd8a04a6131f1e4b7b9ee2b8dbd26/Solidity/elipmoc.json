{
	"address": "0xd51ef370830dd8a04a6131f1e4b7b9ee2b8dbd26",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is a Solidity contract code that reflects the logic from the decompiled code. Please note that due to the lack of some information in the decompiled code, some assumptions have been made.\n\n```solidity\npragma solidity ^0.6.0;\n\ncontract MyToken {\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    uint256 private _oneTokenInWei;\n    address private _multiSigWallet;\n    address private _owner;\n    bool private _active;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Burn(address indexed burner, uint256 value);\n    event MintFinished();\n\n    constructor() public {\n        _owner = msg.sender;\n        _active = true;\n    }\n\n    function mintTokens(address account, uint256 amount) public {\n        require(msg.sender == _owner, \"Only owner can mint tokens\");\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        require(recipient != address(0), \"Transfer to the zero address\");\n        _balances[msg.sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        require(recipient != address(0), \"Transfer to the zero address\");\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n        _allowances[sender][msg.sender] -= amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function increaseApproval(address spender, uint addedValue) public returns (bool) {\n        _allowances[msg.sender][spender] += addedValue;\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseApproval(address spender, uint subtractedValue) public returns (bool) {\n        uint oldValue = _allowances[msg.sender][spender];\n        if (oldValue >= subtractedValue) {\n            _allowances[msg.sender][spender] -= subtractedValue;\n        } else {\n            _allowances[msg.sender][spender] = 0;\n        }\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\n        return true;\n    }\n    \n    function burn(uint256 amount) public {\n        require(amount != 0);\n        require(amount <= _balances[msg.sender]);\n        _totalSupply -= amount;\n        _balances[msg.sender] -= amount;\n        emit Burn(msg.sender, amount);\n    }\n\n    function finalize() public {\n        require(msg.sender == _owner);\n        _active = false;\n        emit MintFinished();\n    }\n}\n```\nPlease note that the contract above omits the logic related to `_multiSigWallet`, `_oneTokenInWei`, and the `fallback` function as it's not clear how these are used in the decompiled code. Additionally, the `TokenPurchase` event is not emitted in the contract as it's unclear when this should occur.",
				"role": "assistant"
			}
		}
	],
	"created": 1701468058,
	"id": "chatcmpl-8R5r84N3DjVJDRJ74accF1gAJAK3j",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 18:22 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _oneTokenInWei; // STORAGE[0x5]\naddress _multiSigWallet; // STORAGE[0x3] bytes 0 to 19\naddress _owner; // STORAGE[0x4] bytes 0 to 19\nuint8 _active; // STORAGE[0x4] bytes 20 to 20\n\n// Events\nTransfer(address, address, uint256);\nTokenPurchase(address, address, uint256, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\nMintFinished();\n\nfunction fallback() public payable { \n    require(_active);\n    require(msg.value > 0);\n    v0 = _SafeMul(0xde0b6b3a7640000, msg.value);\n    assert(_oneTokenInWei);\n    assert(_totalSupply + v0 / _oneTokenInWei >= _totalSupply);\n    require(0x1743b34e18439b502000000 >= _totalSupply + v0 / _oneTokenInWei);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + v0 / _oneTokenInWei;\n    _totalSupply = _totalSupply + v0 / _oneTokenInWei;\n    emit 0xf6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885(msg.sender, v0 / _oneTokenInWei);\n    emit Transfer(0, msg.sender, v0 / _oneTokenInWei);\n    emit TokenPurchase(msg.sender, msg.sender, msg.value, v0 / _oneTokenInWei);\n}\n\nfunction active() public nonPayable { \n    return _active;\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'SOFIN';\n    }\n    return v0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    assert(varg2 <= _allowance[varg0]);\n    _balanceOf[varg0] = _allowance[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    require(_owner == msg.sender);\n    v0 = _multiSigWallet.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(varg0 > 0);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n}\n\nfunction multiSigWallet() public nonPayable { \n    return _multiSigWallet;\n}\n\nfunction finalize() public nonPayable { \n    require(_owner == msg.sender);\n    _active = 0;\n    emit MintFinished();\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction oneTokenInWei() public nonPayable { \n    return _oneTokenInWei;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction token_creation_cap() public nonPayable { \n    return 0x1743b34e18439b502000000;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'SOFIN';\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction setTokenPriceInWei(uint256 varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _oneTokenInWei = varg0;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction mintTokens(address varg0, uint256 varg1) public nonPayable { \n    require(_owner == msg.sender);\n    v0 = _SafeMul(0xde0b6b3a7640000, varg1);\n    assert(_totalSupply + v0 >= _totalSupply);\n    require(0x1743b34e18439b502000000 >= _totalSupply + v0);\n    _balanceOf[varg0] = _balanceOf[varg0] + v0;\n    _totalSupply = _totalSupply + v0;\n    emit 0xf6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885(varg0, v0);\n    emit Transfer(0, varg0, v0);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x2fb0c5e == function_selector) {\n            active();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b8feb4f == function_selector) {\n            multiSigWallet();\n        } else if (0x4bb278f3 == function_selector) {\n            finalize();\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x84e3ac94 == function_selector) {\n            oneTokenInWei();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8db1296d == function_selector) {\n            token_creation_cap();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb597e784 == function_selector) {\n            setTokenPriceInWei(uint256);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf0dda65c == function_selector) {\n            mintTokens(address,uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 18:22 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _oneTokenInWei; // STORAGE[0x5]\naddress _multiSigWallet; // STORAGE[0x3] bytes 0 to 19\naddress _owner; // STORAGE[0x4] bytes 0 to 19\nuint8 _active; // STORAGE[0x4] bytes 20 to 20\n\n// Events\nTransfer(address, address, uint256);\nTokenPurchase(address, address, uint256, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\nMintFinished();\n\nfunction fallback() public payable { \n    require(_active);\n    require(msg.value > 0);\n    v0 = _SafeMul(0xde0b6b3a7640000, msg.value);\n    assert(_oneTokenInWei);\n    assert(_totalSupply + v0 / _oneTokenInWei >= _totalSupply);\n    require(0x1743b34e18439b502000000 >= _totalSupply + v0 / _oneTokenInWei);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + v0 / _oneTokenInWei;\n    _totalSupply = _totalSupply + v0 / _oneTokenInWei;\n    emit 0xf6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885(msg.sender, v0 / _oneTokenInWei);\n    emit Transfer(0, msg.sender, v0 / _oneTokenInWei);\n    emit TokenPurchase(msg.sender, msg.sender, msg.value, v0 / _oneTokenInWei);\n}\n\nfunction active() public nonPayable { \n    return _active;\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'SOFIN';\n    }\n    return v0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    assert(varg2 <= _allowance[varg0]);\n    _balanceOf[varg0] = _allowance[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    require(_owner == msg.sender);\n    v0 = _multiSigWallet.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(varg0 > 0);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n}\n\nfunction multiSigWallet() public nonPayable { \n    return _multiSigWallet;\n}\n\nfunction finalize() public nonPayable { \n    require(_owner == msg.sender);\n    _active = 0;\n    emit MintFinished();\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction oneTokenInWei() public nonPayable { \n    return _oneTokenInWei;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction token_creation_cap() public nonPayable { \n    return 0x1743b34e18439b502000000;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'SOFIN';\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction setTokenPriceInWei(uint256 varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _oneTokenInWei = varg0;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction mintTokens(address varg0, uint256 varg1) public nonPayable { \n    require(_owner == msg.sender);\n    v0 = _SafeMul(0xde0b6b3a7640000, varg1);\n    assert(_totalSupply + v0 >= _totalSupply);\n    require(0x1743b34e18439b502000000 >= _totalSupply + v0);\n    _balanceOf[varg0] = _balanceOf[varg0] + v0;\n    _totalSupply = _totalSupply + v0;\n    emit 0xf6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885(varg0, v0);\n    emit Transfer(0, varg0, v0);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x2fb0c5e == function_selector) {\n            active();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b8feb4f == function_selector) {\n            multiSigWallet();\n        } else if (0x4bb278f3 == function_selector) {\n            finalize();\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x84e3ac94 == function_selector) {\n            oneTokenInWei();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8db1296d == function_selector) {\n            token_creation_cap();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb597e784 == function_selector) {\n            setTokenPriceInWei(uint256);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf0dda65c == function_selector) {\n            mintTokens(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 18:22 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _oneTokenInWei; // STORAGE[0x5]\naddress _multiSigWallet; // STORAGE[0x3] bytes 0 to 19\naddress _owner; // STORAGE[0x4] bytes 0 to 19\nuint8 _active; // STORAGE[0x4] bytes 20 to 20\n\n// Events\nTransfer(address, address, uint256);\nTokenPurchase(address, address, uint256, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\nMintFinished();\n\nfunction fallback() public payable { \n    require(_active);\n    require(msg.value > 0);\n    v0 = _SafeMul(0xde0b6b3a7640000, msg.value);\n    assert(_oneTokenInWei);\n    assert(_totalSupply + v0 / _oneTokenInWei >= _totalSupply);\n    require(0x1743b34e18439b502000000 >= _totalSupply + v0 / _oneTokenInWei);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + v0 / _oneTokenInWei;\n    _totalSupply = _totalSupply + v0 / _oneTokenInWei;\n    emit 0xf6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885(msg.sender, v0 / _oneTokenInWei);\n    emit Transfer(0, msg.sender, v0 / _oneTokenInWei);\n    emit TokenPurchase(msg.sender, msg.sender, msg.value, v0 / _oneTokenInWei);\n}\n\nfunction active() public nonPayable { \n    return _active;\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'SOFIN';\n    }\n    return v0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    assert(varg2 <= _allowance[varg0]);\n    _balanceOf[varg0] = _allowance[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    require(_owner == msg.sender);\n    v0 = _multiSigWallet.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(varg0 > 0);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n}\n\nfunction multiSigWallet() public nonPayable { \n    return _multiSigWallet;\n}\n\nfunction finalize() public nonPayable { \n    require(_owner == msg.sender);\n    _active = 0;\n    emit MintFinished();\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction oneTokenInWei() public nonPayable { \n    return _oneTokenInWei;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction token_creation_cap() public nonPayable { \n    return 0x1743b34e18439b502000000;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'SOFIN';\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction setTokenPriceInWei(uint256 varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _oneTokenInWei = varg0;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction mintTokens(address varg0, uint256 varg1) public nonPayable { \n    require(_owner == msg.sender);\n    v0 = _SafeMul(0xde0b6b3a7640000, varg1);\n    assert(_totalSupply + v0 >= _totalSupply);\n    require(0x1743b34e18439b502000000 >= _totalSupply + v0);\n    _balanceOf[varg0] = _balanceOf[varg0] + v0;\n    _totalSupply = _totalSupply + v0;\n    emit 0xf6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885(varg0, v0);\n    emit Transfer(0, varg0, v0);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x2fb0c5e == function_selector) {\n            active();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b8feb4f == function_selector) {\n            multiSigWallet();\n        } else if (0x4bb278f3 == function_selector) {\n            finalize();\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x84e3ac94 == function_selector) {\n            oneTokenInWei();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8db1296d == function_selector) {\n            token_creation_cap();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb597e784 == function_selector) {\n            setTokenPriceInWei(uint256);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf0dda65c == function_selector) {\n            mintTokens(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 38.419899463653564,
	"usage": {
		"completion_tokens": 830,
		"prompt_tokens": 2411,
		"total_tokens": 3241
	}
}