{
	"address": "0x30c92c69d38cfacbb28081490f8cd7558d441903",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\nconst name = 'Coin Market Cap Coeval'\nconst decimals = 18\nconst symbol = 'COE'\nconst ROLE_WHITELISTED = 'whitelist'\nconst ROLE_SUPER = 'super'\nconst BILLION = 10^9\nconst MNY = 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6\nconst ROLE_ADMIN = 'admin'\nconst FUTX = 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f\n\ndef storage:\n  balanceOf is mapping of uint256 at storage 0\n  totalSupply is uint256 at storage 1\n  allowance is mapping of uint256 at storage 2\n  stor3 is uint8 at storage 3 offset 160\n  stor3 is uint128 at storage 3 offset 160\n  owner is address at storage 3\n  stor4 is mapping of uint8 at storage 4\n  stor5 is uint256 at storage 5\n  swapLimit is uint256 at storage 6\n  stor7 is uint256 at storage 7\n  exchangeRateMNY is uint256 at storage 8\n  exchangeRateFUTX is uint256 at storage 9\n  cycleMintSupply is uint256 at storage 10\n  isMiningOpen is uint8 at storage 11\n  CMC is uint256 at storage 12\n  cycleEndTime is uint256 at storage 13\n  presaleFee is uint256 at storage 14\n  presaleLevel is uint8 at storage 15\n  coePerEthOffset is uint256 at storage 16\n  presaleOpen is uint8 at storage 17\n  stor18 is uint256 at storage 18\n  coeRemainingAtCurrentRate is uint256 at storage 19\n  stor20 is uint8 at storage 20\n  ethSwapRate is uint256 at storage 21\n  swapRates is mapping of uint256 at storage 22\n  stor99 is mapping of uint8 at storage 99\n\ndef mintingFinished(): # not payable\n  return bool(uint8(stor3.field_160))\n\ndef swapRates(address _param1): # not payable\n  return swapRates[_param1]\n\ndef totalSupply(): # not payable\n  return totalSupply\n\ndef presaleFee(): # not payable\n  return presaleFee\n\ndef cycleMintSupply(): # not payable\n  return cycleMintSupply\n\ndef presaleLevel(): # not payable\n  return presaleLevel\n\ndef exchangeRateFUTX(): # not payable\n  return exchangeRateFUTX\n\ndef ethSwapRate(): # not payable\n  return ethSwapRate\n\ndef swapLimit(): # not payable\n  return swapLimit\n\ndef balanceOf(address account): # not payable\n  return balanceOf[address(account)]\n\ndef isMiningOpen(): # not payable\n  return bool(isMiningOpen)\n\ndef cycleEndTime(): # not payable\n  return cycleEndTime\n\ndef owner(): # not payable\n  return owner\n\ndef coePerEthOffset(): # not payable\n  return coePerEthOffset\n\ndef exchangeRateMNY(): # not payable\n  return exchangeRateMNY\n\ndef CMC(): # not payable\n  return CMC\n\ndef swapOpen(): # not payable\n  return bool(stor20)\n\ndef presaleOpen(): # not payable\n  return bool(presaleOpen)\n\ndef coeRemainingAtCurrentRate(): # not payable\n  return coeRemainingAtCurrentRate\n\ndef allowance(address owner, address spender): # not payable\n  return allowance[address(owner)][address(spender)]\n\n#\n#  Regular functions\n#\n\ndef donateEth() payable: \n  stor5 += call.value\n\ndef renounceOwnership(): # not payable\n  require caller == owner\n  log OwnershipRenounced(address previousOwner=owner)\n  owner = 0\n\ndef whitelistMine(uint256 amount): # not payable\n  require isMiningOpen\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef finishMinting(): # not payable\n  require caller == owner\n  require not uint8(stor3.field_160)\n  Mask(96, 0, stor3.field_160) = 1\n  log MintFinished()\n  return 1\n\ndef whitelist(address _param1): # not payable\n  mem[160 len 0] = None\n  mem[160] = bool(stor4[mem[160 len 9]][address(_param1)])\n  return memory\n    from 160\n     len 32\n\ndef startPresale(): # not payable\n  mem[160 len 0] = None\n  require stor4[mem[160 len 5]][caller]\n  require not presaleOpen\n  require presaleLevel == 1\n  stor18 = block.timestamp + (24 * 3600)\n  presaleOpen = 1\n\ndef approve(address spender, uint256 amount): # not payable\n  allowance[caller][address(spender)] = amount\n  log Approval(\n        address owner=amount,\n        address spender=caller,\n        uint256 value=spender)\n  return 1\n\ndef addAdmin(address account): # not payable\n  mem[160 len 0] = None\n  require stor4[mem[160 len 5]][caller]\n  mem[224 len 0] = None\n  stor4[mem[224 len 5]][address(account)] = 1\n  log RoleAdded(\n        address operator='admin',\n        string role=account)\n\ndef removeAdmin(address account): # not payable\n  mem[160 len 0] = None\n  require stor4[mem[160 len 5]][caller]\n  mem[224 len 0] = None\n  stor4[mem[224 len 5]][address(account)] = 0\n  log RoleRemoved(\n        address operator='admin',\n        string role=account)\n\ndef addAddressToWhitelist(address _operator): # not payable\n  mem[160 len 0] = None\n  require stor4[mem[160 len 5]][caller]\n  mem[224 len 0] = None\n  stor4[mem[224 len 9]][address(_operator)] = 1\n  log RoleAdded(\n        address operator='whitelist',\n        string role=_operator)\n\ndef removeAddressFromWhitelist(address _operator): # not payable\n  mem[160 len 0] = None\n  require stor4[mem[160 len 5]][caller]\n  mem[224 len 0] = None\n  stor4[mem[224 len 9]][address(_operator)] = 0\n  log RoleRemoved(\n        address operator='whitelist',\n        string role=_operator)\n\ndef burn(uint256 _value): # not payable\n  require _value <= balanceOf[caller]\n  require _value <= balanceOf[caller]\n  balanceOf[caller] -= _value\n  require _value <= totalSupply\n  totalSupply -= _value\n  log Burn(\n        address from=_value,\n        uint256 value=caller)\n  log Transfer(\n        address from=_value,\n        address to=caller,\n        uint256 value=0)\n\ndef increaseApproval(address _spender, uint256 _addedValue): # not payable\n  require allowance[caller][address(_spender)] + _addedValue >= allowance[caller][address(_spender)]\n  allowance[caller][address(_spender)] += _addedValue\n  log Approval(\n        address owner=allowance[caller][address(_spender)],\n        address spender=caller,\n        uint256 value=_spender)\n  return 1\n\ndef changeSuper(address _addr): # not payable\n  mem[160 len 0] = None\n  require stor4[mem[160 len 5]][caller]\n  mem[224 len 0] = None\n  stor4[mem[224 len 5]][address(_addr)] = 1\n  log RoleAdded(\n        address operator='super',\n        string role=_addr)\n  stor4['super' % unknown10000000()][caller] = 0\n  log RoleRemoved(\n        address operator='super',\n        string role=caller)\n\ndef transfer(address recipient, uint256 amount): # not payable\n  require amount <= balanceOf[caller]\n  require recipient\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  require balanceOf[address(recipient)] + amount >= balanceOf[address(recipient)]\n  balanceOf[address(recipient)] += amount\n  log Transfer(\n        address from=amount,\n        address to=caller,\n        uint256 value=recipient)\n  return 1\n\ndef mint(address _to, uint256 _amount): # not payable\n  require caller == owner\n  require not uint8(stor3.field_160)\n  require totalSupply + _amount >= totalSupply\n  totalSupply += _amount\n  require balanceOf[address(_to)] + _amount >= balanceOf[address(_to)]\n  balanceOf[address(_to)] += _amount\n  log Mint(\n        address to=_amount,\n        uint256 amount=_to)\n  log Transfer(\n        address from=_amount,\n        address to=0,\n        uint256 value=_to)\n  return 1\n\ndef decreaseApproval(address _spender, uint256 _subtractedValue): # not payable\n  if _subtractedValue >= allowance[caller][address(_spender)]:\n      allowance[caller][address(_spender)] = 0\n  else:\n      require _subtractedValue <= allowance[caller][address(_spender)]\n      allowance[caller][address(_spender)] -= _subtractedValue\n  log Approval(\n        address owner=allowance[caller][address(_spender)],\n        address spender=caller,\n        uint256 value=_spender)\n  return 1\n\ndef checkRole(address _operator, string _role): # not payable\n  mem[128 len _role.length] = _role[all]\n  mem[ceil32(_role.length) + 128 len floor32(_role.length)] = call.data[_role + 36 len floor32(_role.length)]\n  mem[ceil32(_role.length) + floor32(_role.length) + -(_role.length % 32) + 160 len _role.length % 32] = mem[floor32(_role.length) + -(_role.length % 32) + 160 len _role.length % 32]\n  mem[_role.length + ceil32(_role.length) + 128] = 4\n  require stor[mem[ceil32(_role.length) + floor32(_role.length) + 128 len (_role.length % 32) + 32]][call.data[_role + 36 len floor32(_role.length)]][address(_operator)]\n\ndef payFees(): # not payable\n  require presaleFee > 0\n  if presaleFee / 13 > 0:\n      call 0x17f619855432168f2ab5a1b2133888d9ffcc3946 with:\n         value presaleFee / 13 wei\n           gas 2300 * is_zero(value) wei\n      if not ext_call.success:\n          revert with ext_call.return_data[0 len return_data.size]\n      call 0xaaf47a27bbd9b82ee0f1f77c7b437a36160c4242 with:\n         value 4 * presaleFee / 13 wei\n           gas 2300 * is_zero(value) wei\n      call 0x6c18dccdffd4874cb88b403637045f12f5a227e3 with:\n         value 3 * presaleFee / 13 wei\n           gas 2300 * is_zero(value) wei\n      call 0x5d2b9f5345e69e2390ce4c26ccc9c2910a097520 with:\n         value 2 * presaleFee / 13 wei\n           gas 2300 * is_zero(value) wei\n      call 0xcf5ee528278a57ba087684f685d99a6a5ec4c439 with:\n         value 3 * presaleFee / 13 wei\n           gas 2300 * is_zero(value) wei\n  presaleFee = 0\n\ndef hasRole(address _operator, string _role): # not payable\n  mem[128 len _role.length] = _role[all]\n  mem[ceil32(_role.length) + 128 len floor32(_role.length)] = call.data[_role + 36 len floor32(_role.length)]\n  mem[ceil32(_role.length) + floor32(_role.length) + -(_role.length % 32) + 160 len _role.length % 32] = mem[floor32(_role.length) + -(_role.length % 32) + 160 len _role.length % 32]\n  mem[_role.length + ceil32(_role.length) + 128] = 4\n  mem[ceil32(_role.length) + 128] = bool(stor[mem[ceil32(_role.length) + floor32(_role.length) + 128 len (_role.length % 32) + 32]][call.data[_role + 36 len floor32(_role.length)]][address(_operator)])\n  return memory\n    from ceil32(_role.length) + 128\n     len 32\n\ndef transferFrom(address sender, address recipient, uint256 amount): # not payable\n  require amount <= balanceOf[address(sender)]\n  require amount <= allowance[address(sender)][caller]\n  require recipient\n  require amount <= balanceOf[address(sender)]\n  balanceOf[address(sender)] -= amount\n  require balanceOf[address(recipient)] + amount >= balanceOf[address(recipient)]\n  balanceOf[address(recipient)] += amount\n  require amount <= allowance[address(sender)][caller]\n  allowance[address(sender)][caller] -= amount\n  log Transfer(\n        address from=amount,\n        address to=sender,\n        uint256 value=recipient)\n  return 1\n\ndef removeAddressesFromWhitelist(address[] _operators): # not payable\n  mem[96] = _operators.length\n  mem[128 len 32 * _operators.length] = call.data[_operators + 36 len 32 * _operators.length]\n  mem[64] = (32 * _operators.length) + 192\n  mem[(32 * _operators.length) + 128] = 5\n  mem[(32 * _operators.length) + 160] = 'super'\n  mem[(32 * _operators.length) + 192 len 0] = None\n  mem[(32 * _operators.length) + 197] = 4\n  mem[0] = caller\n  mem[32] = sha3(mem[(32 * _operators.length) + 192 len 5], 4)\n  require stor4[mem[(32 * _operators.length) + 192 len 5]][caller]\n  idx = 0\n  while idx < _operators.length:\n      require idx < mem[96]\n      _75 = mem[(32 * idx) + 128]\n      _76 = mem[64]\n      mem[64] = mem[64] + 64\n      mem[_76] = 5\n      mem[_76 + 32] = 'super'\n      _77 = mem[64]\n      t = _76 + 32\n      u = mem[64]\n      s = mem[_76]\n      while s >= 32:\n          mem[u] = mem[t]\n          t = t + 32\n          u = u + 32\n          s = s - 32\n          continue \n      mem[mem[64] + floor32(mem[_76])] = mem[_76 + floor32(mem[_76]) + -(mem[_76] % 32) + 64 len mem[_76] % 32] or Mask(8 * -(mem[_76] % 32) + 32, -(8 * -(mem[_76] % 32) + 32) + 256, mem[mem[64] + floor32(mem[_76])])\n      mem[_77 + 5] = 4\n      _104 = sha3(mem[mem[64] len _77 + -mem[64] + 37])\n      mem[0] = caller\n      mem[32] = _104\n      require stor[_104][caller]\n      _107 = mem[64]\n      mem[64] = mem[64] + 64\n      mem[_107] = 9\n      mem[_107 + 32] = 'whitelist'\n      t = _107 + 32\n      u = mem[64]\n      s = mem[_107]\n      while s >= 32:\n          mem[u] = mem[t]\n          t = t + 32\n          u = u + 32\n          s = s - 32\n          continue \n      mem[mem[64] + floor32(mem[_107])] = mem[_107 + floor32(mem[_107]) + -(mem[_107] % 32) + 64 len mem[_107] % 32] or Mask(8 * -(mem[_107] % 32) + 32, -(8 * -(mem[_107] % 32) + 32) + 256, mem[mem[64] + floor32(mem[_107])])\n      mem[mem[64] + 9] = 4\n      _126 = sha3(mem[mem[64] len 9], 4)\n      mem[0] = address(_75)\n      mem[32] = _126\n      stor[_126][address(_75)] = 0\n      _129 = mem[64]\n      mem[mem[64]] = 32\n      mem[mem[64] + 32] = mem[_107]\n      _131 = mem[_107]\n      s = 0\n      while s < _131:\n          mem[_129 + s + 64] = mem[_107 + s + 32]\n          s = s + 32\n          continue \n      if not _131 % 32:\n          log RoleRemoved(\n                address operator=mem[mem[64] len _131 + _129 + -mem[64] + 64],\n                string role=address(_75))\n      else:\n          mem[floor32(_131) + _129 + 64] = mem[floor32(_131) + _129 + -(_131 % 32) + 96 len _131 % 32]\n          log RoleRemoved(\n                address operator=mem[mem[64] len floor32(_131) + _129 + -mem[64] + 96],\n                string role=address(_75))\n      idx = idx + 1\n      continue \n\ndef updateCMC(uint256 _cmc, uint256 _btc, uint256 _eth): # not payable\n  mem[160 len 0] = None\n  require stor4[mem[160 len 5]][caller]\n  require _btc > 0\n  require _eth > 0\n  require _cmc > 0\n  CMC = _cmc\n  log CMCUpdate(\n        string updateType=Array(len=9, data='TOTAL_CMC'),\n        uint256 value=_cmc)\n  if not CMC:\n      require stor7\n      require stor7\n      revert\n  require CMC\n  require CMC * stor7 / CMC == stor7\n  if not stor7:\n      require CMC * stor7 / 10^9\n      if not 0 / CMC * stor7 / 10^9:\n          exchangeRateMNY = 0\n      else:\n          require 0 / CMC * stor7 / 10^9\n          require 65 * 0 / CMC * stor7 / 10^9 / 0 / CMC * stor7 / 10^9 == 65\n          exchangeRateMNY = 65 * 0 / CMC * stor7 / 10^9 / 100\n  else:\n      require stor7\n      require stor7 * stor7 / stor7 == stor7\n      require CMC * stor7 / 10^9\n      if not stor7 * stor7 / CMC * stor7 / 10^9:\n          exchangeRateMNY = 0\n      else:\n          require stor7 * stor7 / CMC * stor7 / 10^9\n          require 65 * stor7 * stor7 / CMC * stor7 / 10^9 / stor7 * stor7 / CMC * stor7 / 10^9 == 65\n          exchangeRateMNY = 65 * stor7 * stor7 / CMC * stor7 / 10^9 / 100\n  log CMCUpdate(\n        string updateType=Array(len=7, data='BTC_CMC'),\n        uint256 value=_btc)\n  log CMCUpdate(\n        string updateType=Array(len=7, data='ETH_CMC'),\n        uint256 value=_eth)\n  if not _eth:\n      require _btc\n      if not 0 / _btc:\n          require stor7\n          require stor7\n          revert\n      require 0 / _btc\n      require 0 / _btc * CMC / 0 / _btc == CMC\n      if not stor7:\n          require 0 / _btc * CMC / 10^9\n          if not 0 / 0 / _btc * CMC / 10^9:\n              exchangeRateFUTX = 0\n          else:\n              require 0 / 0 / _btc * CMC / 10^9\n              require 65 * 0 / 0 / _btc * CMC / 10^9 / 0 / 0 / _btc * CMC / 10^9 == 65\n              exchangeRateFUTX = 65 * 0 / 0 / _btc * CMC / 10^9 / 100\n      else:\n          require stor7\n          require stor7 * stor7 / stor7 == stor7\n          require 0 / _btc * CMC / 10^9\n          if not stor7 * stor7 / 0 / _btc * CMC / 10^9:\n              exchangeRateFUTX = 0\n          else:\n              require stor7 * stor7 / 0 / _btc * CMC / 10^9\n              require 65 * stor7 * stor7 / 0 / _btc * CMC / 10^9 / stor7 * stor7 / 0 / _btc * CMC / 10^9 == 65\n              exchangeRateFUTX = 65 * stor7 * stor7 / 0 / _btc * CMC / 10^9 / 100\n  else:\n      require _eth\n      require _eth * stor7 / _eth == stor7\n      require _btc\n      if not _eth * stor7 / _btc:\n          require stor7\n          require stor7\n          revert\n      require _eth * stor7 / _btc\n      require _eth * stor7 / _btc * CMC / _eth * stor7 / _btc == CMC\n      if not stor7:\n          require _eth * stor7 / _btc * CMC / 10^9\n          if not 0 / _eth * stor7 / _btc * CMC / 10^9:\n              exchangeRateFUTX = 0\n          else:\n              require 0 / _eth * stor7 / _btc * CMC / 10^9\n              require 65 * 0 / _eth * stor7 / _btc * CMC / 10^9 / 0 / _eth * stor7 / _btc * CMC / 10^9 == 65\n              exchangeRateFUTX = 65 * 0 / _eth * stor7 / _btc * CMC / 10^9 / 100\n      else:\n          require stor7\n          require stor7 * stor7 / stor7 == stor7\n          require _eth * stor7 / _btc * CMC / 10^9\n          if not stor7 * stor7 / _eth * stor7 / _btc * CMC / 10^9:\n              exchangeRateFUTX = 0\n          else:\n              require stor7 * stor7 / _eth * stor7 / _btc * CMC / 10^9\n              require 65 * stor7 * stor7 / _eth * stor7 / _btc * CMC / 10^9 / stor7 * stor7 / _eth * stor7 / _btc * CMC / 10^9 == 65\n              exchangeRateFUTX = 65 * stor7 * stor7 / _eth * stor7 / _btc * CMC / 10^9 / 100\n\ndef swap(uint256 amount): # not payable\n  require stor20\n  require swapLimit > 0\n  if amount <= swapLimit:\n      swapLimit -= amount\n      require amount <= balanceOf[caller]\n      require amount <= balanceOf[caller]\n      balanceOf[caller] -= amount\n      require amount <= totalSupply\n      totalSupply -= amount\n      log Burn(\n            address from=amount,\n            uint256 value=caller)\n      log Transfer(\n            address from=amount,\n            address to=caller,\n            uint256 value=0)\n      if amount:\n          require amount\n          require amount * ethSwapRate / amount == ethSwapRate\n          if amount * ethSwapRate > 0:\n              if not amount:\n                  require stor7\n                  call caller with:\n                     value 0 / stor7 wei\n                       gas 2300 * is_zero(value) wei\n              else:\n                  require amount\n                  require amount * ethSwapRate / amount == ethSwapRate\n                  require stor7\n                  call caller with:\n                     value amount * ethSwapRate / stor7 wei\n                       gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n      if amount:\n          require amount\n          require amount * swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] / amount == swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f]\n          if amount * swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] > 0:\n              if not amount:\n                  require stor7\n                  require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                  call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, 0 / stor7\n              else:\n                  require amount\n                  require amount * swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] / amount == swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f]\n                  require stor7\n                  require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                  call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, amount * swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] / stor7\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n      if amount:\n          require amount\n          require amount * swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6] / amount == swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6]\n          if amount * swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6] > 0:\n              if not amount:\n                  require stor7\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, 0 / stor7\n              else:\n                  require amount\n                  require amount * swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6] / amount == swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6]\n                  require stor7\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, amount * swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6] / stor7\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n  else:\n      swapLimit = 0\n      require swapLimit <= balanceOf[caller]\n      require swapLimit <= balanceOf[caller]\n      balanceOf[caller] -= swapLimit\n      require swapLimit <= totalSupply\n      totalSupply -= swapLimit\n      log Burn(\n            address from=swapLimit,\n            uint256 value=caller)\n      log Transfer(\n            address from=swapLimit,\n            address to=caller,\n            uint256 value=0)\n      if swapLimit:\n          require swapLimit\n          require swapLimit * ethSwapRate / swapLimit == ethSwapRate\n          if swapLimit * ethSwapRate > 0:\n              if not swapLimit:\n                  require stor7\n                  call caller with:\n                     value 0 / stor7 wei\n                       gas 2300 * is_zero(value) wei\n              else:\n                  require swapLimit\n                  require swapLimit * ethSwapRate / swapLimit == ethSwapRate\n                  require stor7\n                  call caller with:\n                     value swapLimit * ethSwapRate / stor7 wei\n                       gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n      if swapLimit:\n          require swapLimit\n          require swapLimit * swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] / swapLimit == swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f]\n          if swapLimit * swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] > 0:\n              if not swapLimit:\n                  require stor7\n                  require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                  call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, 0 / stor7\n              else:\n                  require swapLimit\n                  require swapLimit * swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] / swapLimit == swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f]\n                  require stor7\n                  require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                  call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, swapLimit * swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] / stor7\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n      if swapLimit:\n          require swapLimit\n          require swapLimit * swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6] / swapLimit == swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6]\n          if swapLimit * swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6] > 0:\n              if not swapLimit:\n                  require stor7\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, 0 / stor7\n              else:\n                  require swapLimit\n                  require swapLimit * swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6] / swapLimit == swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6]\n                  require stor7\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, swapLimit * swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6] / stor7\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n  if not swapLimit:\n      require stor20\n      require not swapLimit\n      cycleMintSupply = 0\n      stor20 = 0\n      isMiningOpen = 1\n      cycleEndTime = block.timestamp + (2400 * 24 * 3600)\n      log MiningRestart(uint256 endTime=cycleEndTime)\n\ndef _fallback(?) payable: # default function\n  if calldata.size < 4:\n      require presaleOpen\n      require call.value > 0\n      stor5 += call.value\n      if not call.value:\n          if block.timestamp <= stor18:\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          if presaleLevel == 100:\n              if call.value <= 0:\n                  presaleOpen = 0\n                  if presaleOpen:\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args caller, 0\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 0\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if cycleMintSupply:\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n                      require presaleFee <= eth.balance(this.address)\n                      if not eth.balance(this.address) - presaleFee:\n                          require swapLimit\n                          ethSwapRate = 0 / swapLimit\n                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                      else:\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                              require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                              require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                              require swapLimit\n                              ethSwapRate = (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / 100 / swapLimit\n                          else:\n                              require swapLimit\n                              ethSwapRate = 0 / swapLimit\n                              require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                              call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                   gas gas_remaining wei\n                                  args this.address\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                  else:\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      if not eth.balance(this.address) - presaleFee:\n                          require swapLimit\n                          ethSwapRate = 0 / swapLimit\n                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          if ext_call.return_data[0]:\n                              require ext_call.return_data[0]\n                      else:\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                              require swapLimit\n                              ethSwapRate = 0 / swapLimit\n                              require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                              call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                   gas gas_remaining wei\n                                  args this.address\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                          else:\n                              require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                              require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                              require swapLimit\n                              ethSwapRate = (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / 100 / swapLimit\n                              require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                              call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                   gas gas_remaining wei\n                                  args this.address\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n              else:\n                  if not call.value:\n                      stor5 -= call.value\n                      call caller with:\n                         value call.value wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      presaleOpen = 0\n                      if call.value > 0:\n                          if not coeRemainingAtCurrentRate:\n                              if coePerEthOffset:\n                                  if call.value >= 0 / coePerEthOffset:\n                                      if not coeRemainingAtCurrentRate:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      if coeRemainingAtCurrentRate:\n                                          if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  else:\n                                      if not call.value:\n                                          require stor7\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      if call.value:\n                                          if call.value * coePerEthOffset / call.value == coePerEthOffset:\n                                              if stor7:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if coeRemainingAtCurrentRate:\n                                  if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                      if not 65 * coeRemainingAtCurrentRate / 100:\n                                          if coePerEthOffset:\n                                              if call.value < 0 / coePerEthOffset:\n                                                  if not call.value:\n                                                      if stor7:\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  else:\n                                                      if call.value:\n                                                          if call.value * coePerEthOffset / call.value == coePerEthOffset:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                              else:\n                                                  if not coeRemainingAtCurrentRate:\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  if coeRemainingAtCurrentRate:\n                                                      if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      else:\n                                          if 65 * coeRemainingAtCurrentRate / 100:\n                                              if 65 * coeRemainingAtCurrentRate / 100 * stor7 / 65 * coeRemainingAtCurrentRate / 100 == stor7:\n                                                  if coePerEthOffset:\n                                                      if call.value < 65 * coeRemainingAtCurrentRate / 100 * stor7 / coePerEthOffset:\n                                                          if not call.value:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                          if call.value:\n                                                              if call.value * coePerEthOffset / call.value == coePerEthOffset:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      else:\n                                                          if not coeRemainingAtCurrentRate:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                          if coeRemainingAtCurrentRate:\n                                                              if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          revert\n                      if presaleOpen:\n                          require ext_code.size(this.address)\n                          call this.address.mint(address _to, uint256 _amount) with:\n                               gas gas_remaining wei\n                              args caller, 0\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          require ext_code.size(this.address)\n                          call this.address.mint(address _to, uint256 _amount) with:\n                               gas gas_remaining wei\n                              args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 0\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          stop\n                      stor20 = 1\n                      isMiningOpen = 0\n                      if not cycleMintSupply:\n                          swapLimit = 0\n                          require presaleFee <= eth.balance(this.address)\n                          if not eth.balance(this.address) - presaleFee:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                          require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                              require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                  else:\n                      require call.value\n                      require 65 * call.value / call.value == 65\n                      presaleFee -= 65 * call.value / 100\n                      stor5 -= call.value\n                      call caller with:\n                         value call.value wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      presaleOpen = 0\n                      if call.value > 0:\n                          if not coeRemainingAtCurrentRate:\n                              require coePerEthOffset\n                              if call.value < 0 / coePerEthOffset:\n                                  if not call.value:\n                                      if stor7:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  else:\n                                      if call.value:\n                                          if call.value * coePerEthOffset / call.value == coePerEthOffset:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              else:\n                                  if not coeRemainingAtCurrentRate:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if coeRemainingAtCurrentRate:\n                                      if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              revert\n                          require coeRemainingAtCurrentRate\n                          require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                          if not 65 * coeRemainingAtCurrentRate / 100:\n                              require coePerEthOffset\n                              if call.value < 0 / coePerEthOffset:\n                                  if not call.value:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if call.value:\n                                      if call.value * coePerEthOffset / call.value == coePerEthOffset:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              else:\n                                  if not coeRemainingAtCurrentRate:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if coeRemainingAtCurrentRate:\n                                      if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              revert\n                          require 65 * coeRemainingAtCurrentRate / 100\n                          require 65 * coeRemainingAtCurrentRate / 100 * stor7 / 65 * coeRemainingAtCurrentRate / 100 == stor7\n                          require coePerEthOffset\n                          if call.value < 65 * coeRemainingAtCurrentRate / 100 * stor7 / coePerEthOffset:\n                              if call.value:\n                          else:\n                              if coeRemainingAtCurrentRate:\n                      else:\n                          if presaleOpen:\n                              require ext_code.size(this.address)\n                              call this.address.mint(address _to, uint256 _amount) with:\n                                   gas gas_remaining wei\n                                  args caller, 0\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              require ext_code.size(this.address)\n                              call this.address.mint(address _to, uint256 _amount) with:\n                                   gas gas_remaining wei\n                                  args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 0\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              stop\n                          stor20 = 1\n                          isMiningOpen = 0\n                          if cycleMintSupply:\n                              require cycleMintSupply\n                              require 35 * cycleMintSupply / cycleMintSupply == 35\n                              swapLimit = 35 * cycleMintSupply / 100\n                              require presaleFee <= eth.balance(this.address)\n                              if eth.balance(this.address) - presaleFee:\n                                  require eth.balance(this.address) - presaleFee\n                                  require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          else:\n                              swapLimit = 0\n                              require presaleFee <= eth.balance(this.address)\n                              if eth.balance(this.address) - presaleFee:\n                                  require eth.balance(this.address) - presaleFee\n                                  require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                                  if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                      require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          presaleLevel = uint8(presaleLevel + 1)\n          coeRemainingAtCurrentRate += 1000 * 10^18\n          require presaleLevel\n          if not stor7 / presaleLevel:\n              coePerEthOffset = 0\n              stor18 = block.timestamp + (24 * 3600)\n              if call.value > 0:\n                  if not coeRemainingAtCurrentRate:\n                      require coePerEthOffset\n                      if call.value >= 0 / coePerEthOffset:\n                          if not coeRemainingAtCurrentRate:\n                              if not coeRemainingAtCurrentRate:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require coeRemainingAtCurrentRate\n                              require 35 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 35\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require coeRemainingAtCurrentRate\n                          require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                          if coeRemainingAtCurrentRate:\n                      else:\n                          if not call.value:\n                              require stor7\n                              if not call.value:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require call.value\n                              require call.value * coePerEthOffset / call.value == coePerEthOffset\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require call.value\n                          require call.value * coePerEthOffset / call.value == coePerEthOffset\n                          require stor7\n                          if call.value:\n                  else:\n                      require coeRemainingAtCurrentRate\n                      require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                      if not 65 * coeRemainingAtCurrentRate / 100:\n                          require coePerEthOffset\n                          if call.value >= 0 / coePerEthOffset:\n                              if coeRemainingAtCurrentRate:\n                                  require coeRemainingAtCurrentRate\n                                  require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if coeRemainingAtCurrentRate:\n                          else:\n                              if call.value:\n                                  require call.value\n                                  require call.value * coePerEthOffset / call.value == coePerEthOffset\n                                  require stor7\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require stor7\n                              if call.value:\n                      else:\n                          require 65 * coeRemainingAtCurrentRate / 100\n                          require 65 * coeRemainingAtCurrentRate / 100 * stor7 / 65 * coeRemainingAtCurrentRate / 100 == stor7\n                          require coePerEthOffset\n                          if call.value >= 65 * coeRemainingAtCurrentRate / 100 * stor7 / coePerEthOffset:\n                              if not coeRemainingAtCurrentRate:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require coeRemainingAtCurrentRate\n                              require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if not call.value:\n                              require stor7\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require call.value\n                          require call.value * coePerEthOffset / call.value == coePerEthOffset\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              if presaleOpen:\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args caller, 0\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 0\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  stop\n              stor20 = 1\n              isMiningOpen = 0\n              if not cycleMintSupply:\n                  swapLimit = 0\n                  if presaleFee <= eth.balance(this.address):\n                      if not eth.balance(this.address) - presaleFee:\n                          require swapLimit\n                          ethSwapRate = 0 / swapLimit\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      if eth.balance(this.address) - presaleFee:\n                          if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                              if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                  if (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              else:\n                  if cycleMintSupply:\n                      if 35 * cycleMintSupply / cycleMintSupply == 35:\n                          swapLimit = 35 * cycleMintSupply / 100\n                          if presaleFee <= eth.balance(this.address):\n                              if not eth.balance(this.address) - presaleFee:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if eth.balance(this.address) - presaleFee:\n                                  if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                                      if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                          if (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          else:\n              if stor7 / presaleLevel:\n                  if 650 * stor7 / presaleLevel / stor7 / presaleLevel == 650:\n                      coePerEthOffset = 650 * stor7 / presaleLevel\n                      stor18 = block.timestamp + (24 * 3600)\n                      if call.value > 0:\n                          if not coeRemainingAtCurrentRate:\n                              require coePerEthOffset\n                              if call.value >= 0 / coePerEthOffset:\n                                  if coeRemainingAtCurrentRate:\n                                      require coeRemainingAtCurrentRate\n                                      require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if coeRemainingAtCurrentRate:\n                              else:\n                                  if call.value:\n                                      require call.value\n                                      require call.value * coePerEthOffset / call.value == coePerEthOffset\n                                      require stor7\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  require stor7\n                                  if call.value:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if coeRemainingAtCurrentRate:\n                              if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                  if not 65 * coeRemainingAtCurrentRate / 100:\n                                      require coePerEthOffset\n                                      if call.value >= 0 / coePerEthOffset:\n                                          if not coeRemainingAtCurrentRate:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          require coeRemainingAtCurrentRate\n                                          require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      if not call.value:\n                                          require stor7\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      require call.value\n                                      require call.value * coePerEthOffset / call.value == coePerEthOffset\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if 65 * coeRemainingAtCurrentRate / 100:\n                                      if 65 * coeRemainingAtCurrentRate / 100 * stor7 / 65 * coeRemainingAtCurrentRate / 100 == stor7:\n                                          if coePerEthOffset:\n                                              if call.value < 65 * coeRemainingAtCurrentRate / 100 * stor7 / coePerEthOffset:\n                                                  if not call.value:\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  if call.value:\n                                                      if call.value * coePerEthOffset / call.value == coePerEthOffset:\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                              else:\n                                                  if not coeRemainingAtCurrentRate:\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  if coeRemainingAtCurrentRate:\n                                                      if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if presaleOpen:\n                              require ext_code.size(this.address)\n                              call this.address.mint(address _to, uint256 _amount) with:\n                                   gas gas_remaining wei\n                                  args caller, 0\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              require ext_code.size(this.address)\n                              call this.address.mint(address _to, uint256 _amount) with:\n                                   gas gas_remaining wei\n                                  args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 0\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              stop\n                          stor20 = 1\n                          isMiningOpen = 0\n                          if not cycleMintSupply:\n                              swapLimit = 0\n                              if presaleFee <= eth.balance(this.address):\n                                  if not eth.balance(this.address) - presaleFee:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if eth.balance(this.address) - presaleFee:\n                                      if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                                          if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                              if (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if cycleMintSupply:\n                                  if 35 * cycleMintSupply / cycleMintSupply == 35:\n                                      swapLimit = 35 * cycleMintSupply / 100\n                                      if presaleFee <= eth.balance(this.address):\n                                          if not eth.balance(this.address) - presaleFee:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          if eth.balance(this.address) - presaleFee:\n                                              if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                                                  if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                                      if (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35:\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          revert\n      require call.value\n      require 65 * call.value / call.value == 65\n      presaleFee += 65 * call.value / 100\n      if block.timestamp > stor18:\n          if presaleLevel == 100:\n              if call.value <= 0:\n                  presaleOpen = 0\n                  if presaleOpen:\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args caller, 0\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 0\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if cycleMintSupply:\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                              require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                              require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                          else:\n                              require swapLimit\n                              ethSwapRate = 0 / swapLimit\n                      else:\n                          require swapLimit\n                          ethSwapRate = 0 / swapLimit\n                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                  else:\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      if not eth.balance(this.address) - presaleFee:\n                          require swapLimit\n                          ethSwapRate = 0 / swapLimit\n                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                      else:\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                              require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                              require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                              require swapLimit\n                              ethSwapRate = (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / 100 / swapLimit\n                          else:\n                              require swapLimit\n                              ethSwapRate = 0 / swapLimit\n                              require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                              call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                   gas gas_remaining wei\n                                  args this.address\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              if not call.value:\n                  stor5 -= call.value\n                  call caller with:\n                     value call.value wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  presaleOpen = 0\n                  if call.value > 0:\n                      if not coeRemainingAtCurrentRate:\n                          require coePerEthOffset\n                          if call.value < 0 / coePerEthOffset:\n                              if not call.value:\n                                  if stor7:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              else:\n                                  if call.value:\n                                      if call.value * coePerEthOffset / call.value == coePerEthOffset:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if not coeRemainingAtCurrentRate:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if coeRemainingAtCurrentRate:\n                                  if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          revert\n                      require coeRemainingAtCurrentRate\n                      require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                      if not 65 * coeRemainingAtCurrentRate / 100:\n                          require coePerEthOffset\n                          if call.value < 0 / coePerEthOffset:\n                              if not call.value:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if call.value:\n                                  if call.value * coePerEthOffset / call.value == coePerEthOffset:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if not coeRemainingAtCurrentRate:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if coeRemainingAtCurrentRate:\n                                  if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          revert\n                      require 65 * coeRemainingAtCurrentRate / 100\n                      require 65 * coeRemainingAtCurrentRate / 100 * stor7 / 65 * coeRemainingAtCurrentRate / 100 == stor7\n                      require coePerEthOffset\n                      if call.value < 65 * coeRemainingAtCurrentRate / 100 * stor7 / coePerEthOffset:\n                          if call.value:\n                      else:\n                          if coeRemainingAtCurrentRate:\n                  else:\n                      if presaleOpen:\n                          require ext_code.size(this.address)\n                          call this.address.mint(address _to, uint256 _amount) with:\n                               gas gas_remaining wei\n                              args caller, 0\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          require ext_code.size(this.address)\n                          call this.address.mint(address _to, uint256 _amount) with:\n                               gas gas_remaining wei\n                              args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 0\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          stop\n                      stor20 = 1\n                      isMiningOpen = 0\n                      if cycleMintSupply:\n                          require cycleMintSupply\n                          require 35 * cycleMintSupply / cycleMintSupply == 35\n                          swapLimit = 35 * cycleMintSupply / 100\n                          require presaleFee <= eth.balance(this.address)\n                          if eth.balance(this.address) - presaleFee:\n                              require eth.balance(this.address) - presaleFee\n                              require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                      else:\n                          swapLimit = 0\n                          require presaleFee <= eth.balance(this.address)\n                          if eth.balance(this.address) - presaleFee:\n                              require eth.balance(this.address) - presaleFee\n                              require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                              if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                  require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require call.value\n              require 65 * call.value / call.value == 65\n              presaleFee -= 65 * call.value / 100\n              stor5 -= call.value\n              call caller with:\n                 value call.value wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              presaleOpen = 0\n              if call.value > 0:\n                  if not coeRemainingAtCurrentRate:\n                      require coePerEthOffset\n                      if call.value < 0 / coePerEthOffset:\n                          if not call.value:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if call.value:\n                              if call.value * coePerEthOffset / call.value == coePerEthOffset:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if not coeRemainingAtCurrentRate:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if coeRemainingAtCurrentRate:\n                              if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert\n                  require coeRemainingAtCurrentRate\n                  require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                  if 65 * coeRemainingAtCurrentRate / 100:\n                      require 65 * coeRemainingAtCurrentRate / 100\n                      require 65 * coeRemainingAtCurrentRate / 100 * stor7 / 65 * coeRemainingAtCurrentRate / 100 == stor7\n                      require coePerEthOffset\n                  else:\n                      require coePerEthOffset\n                      if call.value < 0 / coePerEthOffset:\n                          if call.value:\n                      else:\n                          if coeRemainingAtCurrentRate:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              if presaleOpen:\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args caller, 0\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 0\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  stop\n              stor20 = 1\n              isMiningOpen = 0\n              if not cycleMintSupply:\n                  swapLimit = 0\n                  require presaleFee <= eth.balance(this.address)\n                  if eth.balance(this.address) - presaleFee:\n                      require eth.balance(this.address) - presaleFee\n                      require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require cycleMintSupply\n              require 35 * cycleMintSupply / cycleMintSupply == 35\n              swapLimit = 35 * cycleMintSupply / 100\n              require presaleFee <= eth.balance(this.address)\n              if not eth.balance(this.address) - presaleFee:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require eth.balance(this.address) - presaleFee\n              require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          presaleLevel = uint8(presaleLevel + 1)\n          coeRemainingAtCurrentRate += 1000 * 10^18\n          require presaleLevel\n          if not stor7 / presaleLevel:\n              coePerEthOffset = 0\n              stor18 = block.timestamp + (24 * 3600)\n              if call.value > 0:\n                  if not coeRemainingAtCurrentRate:\n                      require coePerEthOffset\n                      if call.value >= 0 / coePerEthOffset:\n                          if coeRemainingAtCurrentRate:\n                              require coeRemainingAtCurrentRate\n                              require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if coeRemainingAtCurrentRate:\n                      else:\n                          if call.value:\n                              require call.value\n                              require call.value * coePerEthOffset / call.value == coePerEthOffset\n                              require stor7\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require stor7\n                          if call.value:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if coeRemainingAtCurrentRate:\n                      if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                          if not 65 * coeRemainingAtCurrentRate / 100:\n                              require coePerEthOffset\n                              if call.value >= 0 / coePerEthOffset:\n                                  if not coeRemainingAtCurrentRate:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  require coeRemainingAtCurrentRate\n                                  require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if not call.value:\n                                  require stor7\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require call.value\n                              require call.value * coePerEthOffset / call.value == coePerEthOffset\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if 65 * coeRemainingAtCurrentRate / 100:\n                              if 65 * coeRemainingAtCurrentRate / 100 * stor7 / 65 * coeRemainingAtCurrentRate / 100 == stor7:\n                                  if coePerEthOffset:\n                                      if call.value < 65 * coeRemainingAtCurrentRate / 100 * stor7 / coePerEthOffset:\n                                          if not call.value:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          if call.value:\n                                              if call.value * coePerEthOffset / call.value == coePerEthOffset:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      else:\n                                          if not coeRemainingAtCurrentRate:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          if coeRemainingAtCurrentRate:\n                                              if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              else:\n                  if presaleOpen:\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args caller, 0\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 0\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if not cycleMintSupply:\n                      swapLimit = 0\n                      if presaleFee <= eth.balance(this.address):\n                          if not eth.balance(this.address) - presaleFee:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if eth.balance(this.address) - presaleFee:\n                              if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                                  if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                      if (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  else:\n                      if cycleMintSupply:\n                          if 35 * cycleMintSupply / cycleMintSupply == 35:\n                              swapLimit = 35 * cycleMintSupply / 100\n                              if presaleFee <= eth.balance(this.address):\n                                  if not eth.balance(this.address) - presaleFee:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if eth.balance(this.address) - presaleFee:\n                                      if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                                          if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                              if (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              revert\n          require stor7 / presaleLevel\n          require 650 * stor7 / presaleLevel / stor7 / presaleLevel == 650\n          coePerEthOffset = 650 * stor7 / presaleLevel\n          stor18 = block.timestamp + (24 * 3600)\n          if call.value > 0:\n              if not coeRemainingAtCurrentRate:\n                  require coePerEthOffset\n                  if call.value >= 0 / coePerEthOffset:\n                      if not coeRemainingAtCurrentRate:\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require coeRemainingAtCurrentRate\n                      require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if not call.value:\n                      require stor7\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require call.value\n                  require call.value * coePerEthOffset / call.value == coePerEthOffset\n              else:\n                  require coeRemainingAtCurrentRate\n                  require 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65\n                  if not 65 * coeRemainingAtCurrentRate / 100:\n                      require coePerEthOffset\n                      if call.value < 0 / coePerEthOffset:\n                          if not call.value:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if call.value:\n                              if call.value * coePerEthOffset / call.value == coePerEthOffset:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if not coeRemainingAtCurrentRate:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if coeRemainingAtCurrentRate:\n                              if 65 * coeRemainingAtCurrentRate / coeRemainingAtCurrentRate == 65:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert\n                  require 65 * coeRemainingAtCurrentRate / 100\n                  require 65 * coeRemainingAtCurrentRate / 100 * stor7 / 65 * coeRemainingAtCurrentRate / 100 == stor7\n                  require coePerEthOffset\n                  if call.value < 65 * coeRemainingAtCurrentRate / 100 * stor7 / coePerEthOffset:\n                      if call.value:\n                          require call.value\n                  else:\n                      if coeRemainingAtCurrentRate:\n                          require coeRemainingAtCurrentRate\n          else:\n              if presaleOpen:\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args caller, 0\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 0\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  stop\n              stor20 = 1\n              isMiningOpen = 0\n              if not cycleMintSupply:\n                  swapLimit = 0\n                  require presaleFee <= eth.balance(this.address)\n                  if not eth.balance(this.address) - presaleFee:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require eth.balance(this.address) - presaleFee\n                  require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                  if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                  require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require cycleMintSupply\n              require 35 * cycleMintSupply / cycleMintSupply == 35\n              swapLimit = 35 * cycleMintSupply / 100\n              require presaleFee <= eth.balance(this.address)\n              if eth.balance(this.address) - presaleFee:\n                  require eth.balance(this.address) - presaleFee\n                  require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                  if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n  else:\n      if startPresale() == uint32(call.func_hash):\n          require not call.value\n      else:\n          if mintingFinished() == uint32(call.func_hash):\n              require not call.value\n              return bool(uint8(stor3.field_160))\n          if name() == uint32(call.func_hash):\n              require not call.value\n          else:\n              if swapRates(address ) == uint32(call.func_hash):\n                  require not call.value\n                  return swapRates[_param1]\n              if approve(address spender, uint256 amount) == uint32(call.func_hash):\n                  require not call.value\n                  allowance[caller][address(_param1)] = _param2\n                  log Approval(\n                        address owner=_param2,\n                        address spender=caller,\n                        uint256 value=_param1)\n                  return 1\n              if checkRole(address _operator, string _role) == uint32(call.func_hash):\n                  require not call.value\n              else:\n                  if removeAdmin(address account) == uint32(call.func_hash):\n                      require not call.value\n                  else:\n                      if totalSupply() == uint32(call.func_hash):\n                          require not call.value\n                          return totalSupply\n                      if ROLE_WHITELISTED() == uint32(call.func_hash):\n                          require not call.value\n                      else:\n                          if ROLE_SUPER() == uint32(call.func_hash):\n                              require not call.value\n                          else:\n                              if hasRole(address _operator, string _role) == uint32(call.func_hash):\n                                  require not call.value\n                              else:\n                                  if presaleFee() == uint32(call.func_hash):\n                                      require not call.value\n                                      return presaleFee\n                                  if transferFrom(address sender, address recipient, uint256 amount) == uint32(call.func_hash):\n                                      require not call.value\n                                      require _param3 <= balanceOf[address(_param1)]\n                                      require _param3 <= allowance[address(_param1)][caller]\n                                      require address(_param2)\n                                      require _param3 <= balanceOf[address(_param1)]\n                                      balanceOf[address(_param1)] -= _param3\n                                      require balanceOf[address(_param2)] + _param3 >= balanceOf[address(_param2)]\n                                      balanceOf[address(_param2)] += _param3\n                                      require _param3 <= allowance[address(_param1)][caller]\n                                      allowance[address(_param1)][caller] -= _param3\n                                      log Transfer(\n                                            address from=_param3,\n                                            address to=_param1,\n                                            uint256 value=address(_param2))\n                                      return 1\n                                  if removeAddressesFromWhitelist(address[] _operators) == uint32(call.func_hash):\n                                      require not call.value\n                                  else:\n                                      if cycleMintSupply() == uint32(call.func_hash):\n                                          require not call.value\n                                          return cycleMintSupply\n                                      if removeAddressFromWhitelist(address _operator) == uint32(call.func_hash):\n                                          require not call.value\n                                      else:\n                                          if presaleLevel() == uint32(call.func_hash):\n                                              require not call.value\n                                              return presaleLevel\n                                          if decimals() == uint32(call.func_hash):\n                                              require not call.value\n                                              return 18\n                                          if changeSuper(address _addr) == uint32(call.func_hash):\n                                              require not call.value\n                                          else:\n                                              if exchangeRateFUTX() == uint32(call.func_hash):\n                                                  require not call.value\n                                                  return exchangeRateFUTX\n                                              if ethSwapRate() == uint32(call.func_hash):\n                                                  require not call.value\n                                                  return ethSwapRate\n                                              if mint(address _to, uint256 _amount) == uint32(call.func_hash):\n                                                  require not call.value\n                                                  require caller == owner\n                                                  require not uint8(stor3.field_160)\n                                                  require totalSupply + _param2 >= totalSupply\n                                                  totalSupply += _param2\n                                                  require balanceOf[address(_param1)] + _param2 >= balanceOf[address(_param1)]\n                                                  balanceOf[address(_param1)] += _param2\n                                                  log Mint(\n                                                        address to=_param2,\n                                                        uint256 amount=_param1)\n                                                  log Transfer(\n                                                        address from=_param2,\n                                                        address to=0,\n                                                        uint256 value=_param1)\n                                                  return 1\n                                              if burn(uint256 _value) == uint32(call.func_hash):\n                                                  require not call.value\n                                                  require _param1 <= balanceOf[caller]\n                                                  require _param1 <= balanceOf[caller]\n                                                  balanceOf[caller] -= _param1\n                                                  require _param1 <= totalSupply\n                                                  totalSupply -= _param1\n                                                  log Burn(\n                                                        address from=_param1,\n                                                        uint256 value=caller)\n                                                  log Transfer(\n                                                        address from=_param1,\n                                                        address to=caller,\n                                                        uint256 value=0)\n                                                  stop\n                                              if BILLION() == uint32(call.func_hash):\n                                                  require not call.value\n                                                  return 10^9\n                                              if mine(uint256 amount) == uint32(call.func_hash):\n                                                  require not call.value\n                                                  require isMiningOpen\n                                                  require _param1 > 0\n                                                  require cycleMintSupply < 100000 * 10^18\n                                                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transferFrom(address sender, address recipient, uint256 amount) with:\n                                                       gas gas_remaining wei\n                                                      args caller, address(this.address), _param1\n                                                  if not ext_call.success:\n                                                      revert with ext_call.return_data[0 len return_data.size]\n                                                  require return_data.size >= 32\n                                                  require ext_call.return_data[0]\n                                                  require exchangeRateMNY > 0\n                                                  if block.timestamp <= cycleEndTime:\n                                                      if not exchangeRateMNY:\n                                                          if stor7:\n                                                              if not 0 / stor7:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                              if 0 / stor7:\n                                                                  if 35 * 0 / stor7 / 0 / stor7 == 35:\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      else:\n                                                          if exchangeRateMNY:\n                                                              if exchangeRateMNY * _param1 / exchangeRateMNY == _param1:\n                                                                  if stor7:\n                                                                      if not exchangeRateMNY * _param1 / stor7:\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      if exchangeRateMNY * _param1 / stor7:\n                                                                          if 35 * exchangeRateMNY * _param1 / stor7 / exchangeRateMNY * _param1 / stor7 == 35:\n                                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  else:\n                                                      if cycleMintSupply <= 0:\n                                                          if not exchangeRateMNY:\n                                                              require stor7\n                                                              if not 0 / stor7:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                              require 0 / stor7\n                                                              require 35 * 0 / stor7 / 0 / stor7 == 35\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                          require exchangeRateMNY\n                                                          require exchangeRateMNY * _param1 / exchangeRateMNY == _param1\n                                                          require stor7\n                                                          if exchangeRateMNY * _param1 / stor7:\n                                                              require exchangeRateMNY * _param1 / stor7\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      stor20 = 1\n                                                      isMiningOpen = 0\n                                                      if not cycleMintSupply:\n                                                          swapLimit = 0\n                                                          require presaleFee <= eth.balance(this.address)\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      if cycleMintSupply:\n                                                          if 35 * cycleMintSupply / cycleMintSupply == 35:\n                                                              swapLimit = 35 * cycleMintSupply / 100\n                                                              if presaleFee <= eth.balance(this.address):\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  revert\n                                              if payFees() == uint32(call.func_hash):\n                                                  require not call.value\n                                                  require presaleFee > 0\n                                                  if presaleFee / 13 > 0:\n                                                      call 0x17f619855432168f2ab5a1b2133888d9ffcc3946 with:\n                                                         value presaleFee / 13 wei\n                                                           gas 2300 * is_zero(value) wei\n                                                      if not ext_call.success:\n                                                          revert with ext_call.return_data[0 len return_data.size]\n                                                      call 0xaaf47a27bbd9b82ee0f1f77c7b437a36160c4242 with:\n                                                         value 4 * presaleFee / 13 wei\n                                                           gas 2300 * is_zero(value) wei\n                                                      call 0x6c18dccdffd4874cb88b403637045f12f5a227e3 with:\n                                                         value 3 * presaleFee / 13 wei\n                                                           gas 2300 * is_zero(value) wei\n                                                      call 0x5d2b9f5345e69e2390ce4c26ccc9c2910a097520 with:\n                                                         value 2 * presaleFee / 13 wei\n                                                           gas 2300 * is_zero(value) wei\n                                                      call 0xcf5ee528278a57ba087684f685d99a6a5ec4c439 with:\n                                                         value 3 * presaleFee / 13 wei\n                                                           gas 2300 * is_zero(value) wei\n                                                  presaleFee = 0\n                                                  stop\n                                              if decreaseApproval(address _spender, uint256 _subtractedValue) == uint32(call.func_hash):\n                                                  require not call.value\n                                                  if _param2 >= allowance[caller][address(_param1)]:\n                                                      allowance[caller][address(_param1)] = 0\n                                                  else:\n                                                      require _param2 <= allowance[caller][address(_param1)]\n                                                      allowance[caller][address(_param1)] -= _param2\n                                                  log Approval(\n                                                        address owner=allowance[caller][address(_param1)],\n                                                        address spender=caller,\n                                                        uint256 value=_param1)\n                                                  return 1\n                                              if swapLimit() == uint32(call.func_hash):\n                                                  require not call.value\n                                                  return swapLimit\n                                              if addAdmin(address account) == uint32(call.func_hash):\n                                                  require not call.value\n                                              else:\n                                                  if balanceOf(address account) == uint32(call.func_hash):\n                                                      require not call.value\n                                                      return balanceOf[address(_param1)]\n                                                  if renounceOwnership() == uint32(call.func_hash):\n                                                      require not call.value\n                                                      require caller == owner\n                                                      log OwnershipRenounced(address previousOwner=owner)\n                                                      owner = 0\n                                                      stop\n                                                  if MNY() == uint32(call.func_hash):\n                                                      require not call.value\n                                                      return 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6\n                                                  if whitelistMine(uint256 amount) == uint32(call.func_hash):\n                                                      require not call.value\n                                                      require isMiningOpen\n                                                  else:\n                                                      if addAddressToWhitelist(address _operator) == uint32(call.func_hash):\n                                                          require not call.value\n                                                      else:\n                                                          if finishMinting() == uint32(call.func_hash):\n                                                              require not call.value\n                                                              require caller == owner\n                                                              require not uint8(stor3.field_160)\n                                                              Mask(96, 0, stor3.field_160) = 1\n                                                              log MintFinished()\n                                                              return 1\n                                                          if isMiningOpen() == uint32(call.func_hash):\n                                                              require not call.value\n                                                              return bool(isMiningOpen)\n                                                          if cycleEndTime() == uint32(call.func_hash):\n                                                              require not call.value\n                                                              return cycleEndTime\n                                                          if owner() == uint32(call.func_hash):\n                                                              require not call.value\n                                                              return owner\n                                                          if coePerEthOffset() == uint32(call.func_hash):\n                                                              require not call.value\n                                                              return coePerEthOffset\n                                                          if exchangeRateMNY() == uint32(call.func_hash):\n                                                              require not call.value\n                                                              return exchangeRateMNY\n                                                          if swap(uint256 amount) == uint32(call.func_hash):\n                                                              require not call.value\n                                                              require stor20\n                                                              require swapLimit > 0\n                                                              if _param1 > swapLimit:\n                                                                  swapLimit = 0\n                                                                  require swapLimit <= balanceOf[caller]\n                                                              else:\n                                                                  swapLimit -= _param1\n                                                                  require _param1 <= balanceOf[caller]\n                                                          else:\n                                                              if symbol() == uint32(call.func_hash):\n                                                                  require not call.value\n                                                              else:\n                                                                  if whitelist(address _param1) == uint32(call.func_hash):\n                                                                      require not call.value\n                                                                  else:\n                                                                      if transfer(address recipient, uint256 amount) == uint32(call.func_hash):\n                                                                          require not call.value\n                                                                          require _param2 <= balanceOf[caller]\n                                                                          require _param1\n                                                                          require _param2 <= balanceOf[caller]\n                                                                          balanceOf[caller] -= _param2\n                                                                      else:\n                                                                          if donateEth() == uint32(call.func_hash):\n                                                                              stor5 += call.value\n                                                                              stop\n                                                                          if CMC() == uint32(call.func_hash):\n                                                                              require not call.value\n                                                                              return CMC\n                                                                          if swapOpen() == uint32(call.func_hash):\n                                                                              require not call.value\n                                                                              return bool(stor20)\n                                                                          if presaleOpen() == uint32(call.func_hash):\n                                                                              require not call.value\n                                                                              return bool(presaleOpen)\n                                                                          if coeRemainingAtCurrentRate() == uint32(call.func_hash):\n                                                                              require not call.value\n                                                                          else:\n                                                                              if ROLE_ADMIN() == uint32(call.func_hash):\n                                                                                  require not call.value\n                                                                              else:\n                                                                                  if uint32(call.func_hash) != increaseApproval(address _spender, uint256 _addedValue):\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef mine(uint256 amount): # not payable\n  require isMiningOpen\n  require amount > 0\n  require cycleMintSupply < 100000 * 10^18\n  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transferFrom(address sender, address recipient, uint256 amount) with:\n       gas gas_remaining wei\n      args caller, address(this.address), amount\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  require return_data.size >= 32\n  require ext_call.return_data[0]\n  require exchangeRateMNY > 0\n  if block.timestamp <= cycleEndTime:\n      if exchangeRateMNY:\n          require exchangeRateMNY\n          require exchangeRateMNY * amount / exchangeRateMNY == amount\n          require stor7\n          if not exchangeRateMNY * amount / stor7:\n              if (exchangeRateMNY * amount / stor7) + cycleMintSupply <= 100000 * 10^18:\n                  cycleMintSupply += exchangeRateMNY * amount / stor7\n                  revert with 0, 'Mining payment too small.'\n              if not (exchangeRateMNY * amount / stor7) + cycleMintSupply - 100000 * 10^18:\n                  require exchangeRateMNY\n                  cycleMintSupply = 100000 * 10^18\n                  if -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + 100000 * 10^18 <= 0:\n                      revert with 0, 'Mining payment too small.'\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args caller, exchangeRateMNY * amount / stor7\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + 100000 * 10^18\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if 0 / exchangeRateMNY <= 0:\n                      if cycleMintSupply != 100000 * 10^18:\n                          stop\n                      stor20 = 1\n                      isMiningOpen = 0\n                      if not cycleMintSupply:\n                          swapLimit = 0\n                          require presaleFee <= eth.balance(this.address)\n                          if eth.balance(this.address) - presaleFee:\n                              require eth.balance(this.address) - presaleFee\n                              require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n                      require presaleFee <= eth.balance(this.address)\n                      if not eth.balance(this.address) - presaleFee:\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require eth.balance(this.address) - presaleFee\n                      require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, 0 / exchangeRateMNY\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if cycleMintSupply != 100000 * 10^18:\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if cycleMintSupply:\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n                      require presaleFee <= eth.balance(this.address)\n                  else:\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                          require eth.balance(this.address) - presaleFee\n              else:\n                  require (exchangeRateMNY * amount / stor7) + cycleMintSupply - 100000 * 10^18\n                  require (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / (exchangeRateMNY * amount / stor7) + cycleMintSupply - 100000 * 10^18 == 65\n                  if not (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100:\n                      require exchangeRateMNY\n                      cycleMintSupply = 100000 * 10^18\n                      if -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                          revert with 0, 'Mining payment too small.'\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args caller, (exchangeRateMNY * amount / stor7) - ((65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if 0 / exchangeRateMNY <= 0:\n                          if cycleMintSupply != 100000 * 10^18:\n                              stop\n                          stor20 = 1\n                          isMiningOpen = 0\n                          if not cycleMintSupply:\n                              swapLimit = 0\n                              require presaleFee <= eth.balance(this.address)\n                              if not eth.balance(this.address) - presaleFee:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require eth.balance(this.address) - presaleFee\n                              require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require cycleMintSupply\n                          require 35 * cycleMintSupply / cycleMintSupply == 35\n                          swapLimit = 35 * cycleMintSupply / 100\n                          require presaleFee <= eth.balance(this.address)\n                          if eth.balance(this.address) - presaleFee:\n                              require eth.balance(this.address) - presaleFee\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                      call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                           gas gas_remaining wei\n                          args caller, 0 / exchangeRateMNY\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if cycleMintSupply != 100000 * 10^18:\n                          stop\n                      stor20 = 1\n                      isMiningOpen = 0\n                      if not cycleMintSupply:\n                          swapLimit = 0\n                          require presaleFee <= eth.balance(this.address)\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n                      require presaleFee <= eth.balance(this.address)\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100\n                  require (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 == stor7\n                  require exchangeRateMNY\n                  cycleMintSupply = 100000 * 10^18\n                  if -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                      revert with 0, 'Mining payment too small.'\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args caller, (exchangeRateMNY * amount / stor7) - ((65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY <= 0:\n                      if cycleMintSupply != 100000 * 10^18:\n                          stop\n                      stor20 = 1\n                      isMiningOpen = 0\n                      if cycleMintSupply:\n                          require cycleMintSupply\n                          require 35 * cycleMintSupply / cycleMintSupply == 35\n                          swapLimit = 35 * cycleMintSupply / 100\n                          require presaleFee <= eth.balance(this.address)\n                      else:\n                          swapLimit = 0\n                          require presaleFee <= eth.balance(this.address)\n                          if eth.balance(this.address) - presaleFee:\n                              require eth.balance(this.address) - presaleFee\n                  else:\n                      require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                      call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                           gas gas_remaining wei\n                          args caller, (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if cycleMintSupply != 100000 * 10^18:\n                          stop\n                      stor20 = 1\n                      isMiningOpen = 0\n                      if not cycleMintSupply:\n                          swapLimit = 0\n                          require presaleFee <= eth.balance(this.address)\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require exchangeRateMNY * amount / stor7\n          require 35 * exchangeRateMNY * amount / stor7 / exchangeRateMNY * amount / stor7 == 35\n          if (exchangeRateMNY * amount / stor7) + (35 * exchangeRateMNY * amount / stor7 / 65) + cycleMintSupply <= 100000 * 10^18:\n              cycleMintSupply = cycleMintSupply + (exchangeRateMNY * amount / stor7) + (35 * exchangeRateMNY * amount / stor7 / 65)\n              if 35 * exchangeRateMNY * amount / stor7 / 65 <= 0:\n                  revert with 0, 'Mining payment too small.'\n              require ext_code.size(this.address)\n              call this.address.mint(address _to, uint256 _amount) with:\n                   gas gas_remaining wei\n                  args caller, exchangeRateMNY * amount / stor7\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(this.address)\n              call this.address.mint(address _to, uint256 _amount) with:\n                   gas gas_remaining wei\n                  args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 35 * exchangeRateMNY * amount / stor7 / 65\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if cycleMintSupply != 100000 * 10^18:\n                  stop\n              stor20 = 1\n              isMiningOpen = 0\n              if cycleMintSupply:\n                  require cycleMintSupply\n                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                  swapLimit = 35 * cycleMintSupply / 100\n                  require presaleFee <= eth.balance(this.address)\n                  if not eth.balance(this.address) - presaleFee:\n                      require swapLimit\n                      ethSwapRate = 0 / swapLimit\n                      require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                      call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                           gas gas_remaining wei\n                          args this.address\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                  else:\n                      require eth.balance(this.address) - presaleFee\n                      require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                      if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                          require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                          require swapLimit\n                          ethSwapRate = (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / 100 / swapLimit\n                      else:\n                          require swapLimit\n                          ethSwapRate = 0 / swapLimit\n                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n              else:\n                  swapLimit = 0\n                  require presaleFee <= eth.balance(this.address)\n                  if not eth.balance(this.address) - presaleFee:\n                      require swapLimit\n                      ethSwapRate = 0 / swapLimit\n                      require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                      call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                           gas gas_remaining wei\n                          args this.address\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if ext_call.return_data[0]:\n                          require ext_call.return_data[0]\n                  else:\n                      require eth.balance(this.address) - presaleFee\n                      require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                      if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                          require swapLimit\n                          ethSwapRate = 0 / swapLimit\n                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                      else:\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                          require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                          require swapLimit\n                          ethSwapRate = (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / 100 / swapLimit\n                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          if not (exchangeRateMNY * amount / stor7) + (35 * exchangeRateMNY * amount / stor7 / 65) + cycleMintSupply - 100000 * 10^18:\n              if exchangeRateMNY:\n                  cycleMintSupply = 100000 * 10^18\n                  if -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + 100000 * 10^18 <= 0:\n                      revert with 0, 'Mining payment too small.'\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args caller, exchangeRateMNY * amount / stor7\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + 100000 * 10^18\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if 0 / exchangeRateMNY <= 0:\n                      if cycleMintSupply != 100000 * 10^18:\n                          stop\n                      stor20 = 1\n                      isMiningOpen = 0\n                      if not cycleMintSupply:\n                          swapLimit = 0\n                          require presaleFee <= eth.balance(this.address)\n                          if not eth.balance(this.address) - presaleFee:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                          require eth.balance(this.address) - presaleFee\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, 0 / exchangeRateMNY\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if cycleMintSupply != 100000 * 10^18:\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if not cycleMintSupply:\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if cycleMintSupply:\n                      if 35 * cycleMintSupply / cycleMintSupply == 35:\n                          swapLimit = 35 * cycleMintSupply / 100\n                          if presaleFee <= eth.balance(this.address):\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          else:\n              if (exchangeRateMNY * amount / stor7) + (35 * exchangeRateMNY * amount / stor7 / 65) + cycleMintSupply - 100000 * 10^18:\n                  if (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / (exchangeRateMNY * amount / stor7) + (35 * exchangeRateMNY * amount / stor7 / 65) + cycleMintSupply - 100000 * 10^18 == 65:\n                      if not (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100:\n                          require exchangeRateMNY\n                          cycleMintSupply = 100000 * 10^18\n                          if -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                              revert with 0, 'Mining payment too small.'\n                          require ext_code.size(this.address)\n                          call this.address.mint(address _to, uint256 _amount) with:\n                               gas gas_remaining wei\n                              args caller, (exchangeRateMNY * amount / stor7) - ((65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          require ext_code.size(this.address)\n                          call this.address.mint(address _to, uint256 _amount) with:\n                               gas gas_remaining wei\n                              args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          if 0 / exchangeRateMNY <= 0:\n                              if cycleMintSupply != 100000 * 10^18:\n                                  stop\n                              stor20 = 1\n                              isMiningOpen = 0\n                              if cycleMintSupply:\n                                  require cycleMintSupply\n                                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                                  swapLimit = 35 * cycleMintSupply / 100\n                                  require presaleFee <= eth.balance(this.address)\n                              else:\n                                  swapLimit = 0\n                                  require presaleFee <= eth.balance(this.address)\n                                  if eth.balance(this.address) - presaleFee:\n                                      require eth.balance(this.address) - presaleFee\n                          else:\n                              require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                              call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                                   gas gas_remaining wei\n                                  args caller, 0 / exchangeRateMNY\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              if cycleMintSupply != 100000 * 10^18:\n                                  stop\n                              stor20 = 1\n                              isMiningOpen = 0\n                              if not cycleMintSupply:\n                                  swapLimit = 0\n                                  require presaleFee <= eth.balance(this.address)\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require cycleMintSupply\n                              require 35 * cycleMintSupply / cycleMintSupply == 35\n                              swapLimit = 35 * cycleMintSupply / 100\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      if (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100:\n                          if (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 == stor7:\n                              if exchangeRateMNY:\n                                  cycleMintSupply = 100000 * 10^18\n                                  if -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                                      revert with 0, 'Mining payment too small.'\n                                  require ext_code.size(this.address)\n                                  call this.address.mint(address _to, uint256 _amount) with:\n                                       gas gas_remaining wei\n                                      args caller, (exchangeRateMNY * amount / stor7) - ((65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  require return_data.size >= 32\n                                  require ext_code.size(this.address)\n                                  call this.address.mint(address _to, uint256 _amount) with:\n                                       gas gas_remaining wei\n                                      args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  require return_data.size >= 32\n                                  if (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY <= 0:\n                                      if cycleMintSupply != 100000 * 10^18:\n                                          stop\n                                      stor20 = 1\n                                      isMiningOpen = 0\n                                      if not cycleMintSupply:\n                                          swapLimit = 0\n                                          require presaleFee <= eth.balance(this.address)\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      if cycleMintSupply:\n                                          if 35 * cycleMintSupply / cycleMintSupply == 35:\n                                              swapLimit = 35 * cycleMintSupply / 100\n                                              if presaleFee <= eth.balance(this.address):\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  else:\n                                      require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                      call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                                           gas gas_remaining wei\n                                          args caller, (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      require return_data.size >= 32\n                                      if cycleMintSupply != 100000 * 10^18:\n                                          stop\n                                      stor20 = 1\n                                      isMiningOpen = 0\n                                      if not cycleMintSupply:\n                                          swapLimit = 0\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      if cycleMintSupply:\n                                          if 35 * cycleMintSupply / cycleMintSupply == 35:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          revert\n      require stor7\n      if not 0 / stor7:\n          if (0 / stor7) + cycleMintSupply <= 100000 * 10^18:\n              cycleMintSupply += 0 / stor7\n              revert with 0, 'Mining payment too small.'\n          if not (0 / stor7) + cycleMintSupply - 100000 * 10^18:\n              require exchangeRateMNY\n              cycleMintSupply = 100000 * 10^18\n              if -(0 / stor7) + -cycleMintSupply + 100000 * 10^18 <= 0:\n                  revert with 0, 'Mining payment too small.'\n              require ext_code.size(this.address)\n              call this.address.mint(address _to, uint256 _amount) with:\n                   gas gas_remaining wei\n                  args caller, 0 / stor7\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(this.address)\n              call this.address.mint(address _to, uint256 _amount) with:\n                   gas gas_remaining wei\n                  args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(0 / stor7) + -cycleMintSupply + 100000 * 10^18\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if 0 / exchangeRateMNY <= 0:\n                  if cycleMintSupply != 100000 * 10^18:\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if cycleMintSupply:\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                  else:\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                              require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n              else:\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, 0 / exchangeRateMNY\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if cycleMintSupply != 100000 * 10^18:\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if not cycleMintSupply:\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      if not eth.balance(this.address) - presaleFee:\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require eth.balance(this.address) - presaleFee\n                      require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require cycleMintSupply\n                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                  swapLimit = 35 * cycleMintSupply / 100\n                  require presaleFee <= eth.balance(this.address)\n                  if eth.balance(this.address) - presaleFee:\n                      require eth.balance(this.address) - presaleFee\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require (0 / stor7) + cycleMintSupply - 100000 * 10^18\n          require (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / (0 / stor7) + cycleMintSupply - 100000 * 10^18 == 65\n          if not (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100:\n              require exchangeRateMNY\n              cycleMintSupply = 100000 * 10^18\n              if -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                  revert with 0, 'Mining payment too small.'\n              require ext_code.size(this.address)\n              call this.address.mint(address _to, uint256 _amount) with:\n                   gas gas_remaining wei\n                  args caller, (0 / stor7) - ((65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(this.address)\n              call this.address.mint(address _to, uint256 _amount) with:\n                   gas gas_remaining wei\n                  args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if 0 / exchangeRateMNY <= 0:\n                  if cycleMintSupply != 100000 * 10^18:\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if not cycleMintSupply:\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require cycleMintSupply\n                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                  swapLimit = 35 * cycleMintSupply / 100\n                  require presaleFee <= eth.balance(this.address)\n                  if not eth.balance(this.address) - presaleFee:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require eth.balance(this.address) - presaleFee\n                  require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n              call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                   gas gas_remaining wei\n                  args caller, 0 / exchangeRateMNY\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if cycleMintSupply != 100000 * 10^18:\n                  stop\n              stor20 = 1\n              isMiningOpen = 0\n              if cycleMintSupply:\n                  require cycleMintSupply\n                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                  swapLimit = 35 * cycleMintSupply / 100\n                  require presaleFee <= eth.balance(this.address)\n              else:\n                  swapLimit = 0\n                  require presaleFee <= eth.balance(this.address)\n                  if eth.balance(this.address) - presaleFee:\n                      require eth.balance(this.address) - presaleFee\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100\n          require (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 == stor7\n          require exchangeRateMNY\n          cycleMintSupply = 100000 * 10^18\n          if -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n              revert with 0, 'Mining payment too small.'\n          require ext_code.size(this.address)\n          call this.address.mint(address _to, uint256 _amount) with:\n               gas gas_remaining wei\n              args caller, (0 / stor7) - ((65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          require ext_code.size(this.address)\n          call this.address.mint(address _to, uint256 _amount) with:\n               gas gas_remaining wei\n              args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          if (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY <= 0:\n              if cycleMintSupply != 100000 * 10^18:\n                  stop\n              stor20 = 1\n              isMiningOpen = 0\n              if not cycleMintSupply:\n                  swapLimit = 0\n                  require presaleFee <= eth.balance(this.address)\n                  if not eth.balance(this.address) - presaleFee:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require eth.balance(this.address) - presaleFee\n                  require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require cycleMintSupply\n              require 35 * cycleMintSupply / cycleMintSupply == 35\n              swapLimit = 35 * cycleMintSupply / 100\n              require presaleFee <= eth.balance(this.address)\n              if eth.balance(this.address) - presaleFee:\n                  require eth.balance(this.address) - presaleFee\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n          call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n               gas gas_remaining wei\n              args caller, (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          if cycleMintSupply != 100000 * 10^18:\n              stop\n          stor20 = 1\n          isMiningOpen = 0\n          if not cycleMintSupply:\n              swapLimit = 0\n              require presaleFee <= eth.balance(this.address)\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require cycleMintSupply\n          require 35 * cycleMintSupply / cycleMintSupply == 35\n          swapLimit = 35 * cycleMintSupply / 100\n          require presaleFee <= eth.balance(this.address)\n          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n      require 0 / stor7\n      require 35 * 0 / stor7 / 0 / stor7 == 35\n      if (0 / stor7) + (35 * 0 / stor7 / 65) + cycleMintSupply > 100000 * 10^18:\n          if not (0 / stor7) + (35 * 0 / stor7 / 65) + cycleMintSupply - 100000 * 10^18:\n              require exchangeRateMNY\n              cycleMintSupply = 100000 * 10^18\n              if -(0 / stor7) + -cycleMintSupply + 100000 * 10^18 <= 0:\n                  revert with 0, 'Mining payment too small.'\n              require ext_code.size(this.address)\n              call this.address.mint(address _to, uint256 _amount) with:\n                   gas gas_remaining wei\n                  args caller, 0 / stor7\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(this.address)\n              call this.address.mint(address _to, uint256 _amount) with:\n                   gas gas_remaining wei\n                  args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(0 / stor7) + -cycleMintSupply + 100000 * 10^18\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if 0 / exchangeRateMNY <= 0:\n                  if cycleMintSupply != 100000 * 10^18:\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if not cycleMintSupply:\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require cycleMintSupply\n                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                  swapLimit = 35 * cycleMintSupply / 100\n                  require presaleFee <= eth.balance(this.address)\n                  if not eth.balance(this.address) - presaleFee:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require eth.balance(this.address) - presaleFee\n                  require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n              call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                   gas gas_remaining wei\n                  args caller, 0 / exchangeRateMNY\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if cycleMintSupply != 100000 * 10^18:\n                  stop\n              stor20 = 1\n              isMiningOpen = 0\n              if cycleMintSupply:\n                  require cycleMintSupply\n                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                  swapLimit = 35 * cycleMintSupply / 100\n                  require presaleFee <= eth.balance(this.address)\n              else:\n                  swapLimit = 0\n                  require presaleFee <= eth.balance(this.address)\n                  if eth.balance(this.address) - presaleFee:\n                      require eth.balance(this.address) - presaleFee\n          else:\n              require (0 / stor7) + (35 * 0 / stor7 / 65) + cycleMintSupply - 100000 * 10^18\n              require (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / (0 / stor7) + (35 * 0 / stor7 / 65) + cycleMintSupply - 100000 * 10^18 == 65\n              if not (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100:\n                  require exchangeRateMNY\n                  cycleMintSupply = 100000 * 10^18\n                  if -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                      revert with 0, 'Mining payment too small.'\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args caller, (0 / stor7) - ((65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if 0 / exchangeRateMNY <= 0:\n                      if cycleMintSupply != 100000 * 10^18:\n                          stop\n                      stor20 = 1\n                      isMiningOpen = 0\n                      if not cycleMintSupply:\n                          swapLimit = 0\n                          require presaleFee <= eth.balance(this.address)\n                          if not eth.balance(this.address) - presaleFee:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                          require eth.balance(this.address) - presaleFee\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, 0 / exchangeRateMNY\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if cycleMintSupply != 100000 * 10^18:\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if not cycleMintSupply:\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require cycleMintSupply\n                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                  swapLimit = 35 * cycleMintSupply / 100\n                  require presaleFee <= eth.balance(this.address)\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100\n              require (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 == stor7\n              require exchangeRateMNY\n              cycleMintSupply = 100000 * 10^18\n              if -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                  revert with 0, 'Mining payment too small.'\n              require ext_code.size(this.address)\n              call this.address.mint(address _to, uint256 _amount) with:\n                   gas gas_remaining wei\n                  args caller, (0 / stor7) - ((65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              require ext_code.size(this.address)\n              call this.address.mint(address _to, uint256 _amount) with:\n                   gas gas_remaining wei\n                  args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY <= 0:\n                  if cycleMintSupply != 100000 * 10^18:\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if cycleMintSupply:\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n                      require presaleFee <= eth.balance(this.address)\n                  else:\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                          require eth.balance(this.address) - presaleFee\n              else:\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                       gas gas_remaining wei\n                      args caller, (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if cycleMintSupply != 100000 * 10^18:\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if not cycleMintSupply:\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require cycleMintSupply\n                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                  swapLimit = 35 * cycleMintSupply / 100\n      else:\n          cycleMintSupply = cycleMintSupply + (0 / stor7) + (35 * 0 / stor7 / 65)\n          if 35 * 0 / stor7 / 65 <= 0:\n              revert with 0, 'Mining payment too small.'\n          require ext_code.size(this.address)\n          call this.address.mint(address _to, uint256 _amount) with:\n               gas gas_remaining wei\n              args caller, 0 / stor7\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          require ext_code.size(this.address)\n          call this.address.mint(address _to, uint256 _amount) with:\n               gas gas_remaining wei\n              args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 35 * 0 / stor7 / 65\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          if cycleMintSupply != 100000 * 10^18:\n              stop\n          stor20 = 1\n          isMiningOpen = 0\n          if not cycleMintSupply:\n              swapLimit = 0\n              require presaleFee <= eth.balance(this.address)\n              if not eth.balance(this.address) - presaleFee:\n                  require swapLimit\n                  ethSwapRate = 0 / swapLimit\n                  require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                  call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if not ext_call.return_data[0]:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require ext_call.return_data[0]\n                  require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require eth.balance(this.address) - presaleFee\n              require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n              if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                  require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                  require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                  require swapLimit\n                  ethSwapRate = (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / 100 / swapLimit\n                  require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                  call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n              else:\n                  require swapLimit\n                  ethSwapRate = 0 / swapLimit\n                  require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                  call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if ext_call.return_data[0]:\n                      require ext_call.return_data[0]\n          else:\n              require cycleMintSupply\n              require 35 * cycleMintSupply / cycleMintSupply == 35\n              swapLimit = 35 * cycleMintSupply / 100\n              require presaleFee <= eth.balance(this.address)\n              if not eth.balance(this.address) - presaleFee:\n                  require swapLimit\n                  ethSwapRate = 0 / swapLimit\n                  require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                  call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if ext_call.return_data[0]:\n                      require ext_call.return_data[0]\n              else:\n                  require eth.balance(this.address) - presaleFee\n                  require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                  if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                      require swapLimit\n                      ethSwapRate = 0 / swapLimit\n                      require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                      call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                           gas gas_remaining wei\n                          args this.address\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                  else:\n                      require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                      require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                      require swapLimit\n                      ethSwapRate = (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / 100 / swapLimit\n                      require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                      call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                           gas gas_remaining wei\n                          args this.address\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  if cycleMintSupply > 0:\n      stor20 = 1\n      isMiningOpen = 0\n      if not cycleMintSupply:\n          swapLimit = 0\n          require presaleFee <= eth.balance(this.address)\n          if not eth.balance(this.address) - presaleFee:\n              require swapLimit\n              ethSwapRate = 0 / swapLimit\n              require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n              call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                   gas gas_remaining wei\n                  args this.address\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if not ext_call.return_data[0]:\n                  if swapLimit:\n                      swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 0 / swapLimit\n                      require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                      call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                           gas gas_remaining wei\n                          args this.address\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if not ext_call.return_data[0]:\n                          require swapLimit\n                          swapRates[0xd2354acf1a2f06d69d8bc2e2048aabd404445df6] = 0 / swapLimit\n                          log SwapStarted(uint256 endTime=block.timestamp)\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      if ext_call.return_data[0]:\n                          if ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7:\n                              if not ext_call.return_data[0] * stor7:\n                                  if swapLimit:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              else:\n                                  if ext_call.return_data[0] * stor7:\n                                      if 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              else:\n                  if ext_call.return_data[0]:\n                      if ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7:\n                          if not ext_call.return_data[0] * stor7:\n                              if swapLimit:\n                                  swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 0 / swapLimit\n                                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                                       gas gas_remaining wei\n                                      args this.address\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  require return_data.size >= 32\n                                  if not ext_call.return_data[0]:\n                                      if swapLimit:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  else:\n                                      if ext_call.return_data[0]:\n                                          if ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7:\n                                              if not ext_call.return_data[0] * stor7:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                              if ext_call.return_data[0] * stor7:\n                                                  if 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35:\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if ext_call.return_data[0] * stor7:\n                                  if 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35:\n                                      if swapLimit:\n                                          swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 35 * ext_call.return_data[0] * stor7 / 100 / swapLimit\n                                          require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                          call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                                               gas gas_remaining wei\n                                              args this.address\n                                          if not ext_call.success:\n                                              revert with ext_call.return_data[0 len return_data.size]\n                                          require return_data.size >= 32\n                                          if not ext_call.return_data[0]:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          if ext_call.return_data[0]:\n                                              if ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7:\n                                                  if not ext_call.return_data[0] * stor7:\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  if ext_call.return_data[0] * stor7:\n                                                      if 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35:\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              revert\n          require eth.balance(this.address) - presaleFee\n          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n          if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n              require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n              require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n              require swapLimit\n              ethSwapRate = (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / 100 / swapLimit\n              require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n              call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                   gas gas_remaining wei\n                  args this.address\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if not ext_call.return_data[0]:\n                  require swapLimit\n                  swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 0 / swapLimit\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if not ext_call.return_data[0]:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require ext_call.return_data[0]\n                  require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                  if not ext_call.return_data[0] * stor7:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require ext_call.return_data[0] * stor7\n                  require 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_call.return_data[0]\n              require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n              if ext_call.return_data[0] * stor7:\n                  require ext_call.return_data[0] * stor7\n                  require 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35\n                  require swapLimit\n                  swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 35 * ext_call.return_data[0] * stor7 / 100 / swapLimit\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if ext_call.return_data[0]:\n                      require ext_call.return_data[0]\n                      require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n              else:\n                  require swapLimit\n                  swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 0 / swapLimit\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if ext_call.return_data[0]:\n                      require ext_call.return_data[0]\n                      require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                      if ext_call.return_data[0] * stor7:\n                          require ext_call.return_data[0] * stor7\n          else:\n              require swapLimit\n              ethSwapRate = 0 / swapLimit\n              require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n              call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                   gas gas_remaining wei\n                  args this.address\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if not ext_call.return_data[0]:\n                  require swapLimit\n                  swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 0 / swapLimit\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if not ext_call.return_data[0]:\n                      if swapLimit:\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  else:\n                      if ext_call.return_data[0]:\n                          if ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7:\n                              if not ext_call.return_data[0] * stor7:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if ext_call.return_data[0] * stor7:\n                                  if 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  revert\n              require ext_call.return_data[0]\n              require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n              if not ext_call.return_data[0] * stor7:\n                  require swapLimit\n                  swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 0 / swapLimit\n                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                       gas gas_remaining wei\n                      args this.address\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if not ext_call.return_data[0]:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require ext_call.return_data[0]\n                  require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                  if not ext_call.return_data[0] * stor7:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require ext_call.return_data[0] * stor7\n                  require 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_call.return_data[0] * stor7\n              require 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35\n              require swapLimit\n              swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 35 * ext_call.return_data[0] * stor7 / 100 / swapLimit\n              require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n              call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                   gas gas_remaining wei\n                  args this.address\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              require return_data.size >= 32\n              if ext_call.return_data[0]:\n                  require ext_call.return_data[0]\n                  require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                  if ext_call.return_data[0] * stor7:\n                      require ext_call.return_data[0] * stor7\n          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n      if cycleMintSupply:\n          if 35 * cycleMintSupply / cycleMintSupply == 35:\n              swapLimit = 35 * cycleMintSupply / 100\n              if presaleFee <= eth.balance(this.address):\n                  if not eth.balance(this.address) - presaleFee:\n                      require swapLimit\n                      ethSwapRate = 0 / swapLimit\n                      require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                      call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                           gas gas_remaining wei\n                          args this.address\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if not ext_call.return_data[0]:\n                          require swapLimit\n                          swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 0 / swapLimit\n                          require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                          call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          if not ext_call.return_data[0]:\n                              if swapLimit:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if ext_call.return_data[0]:\n                                  if ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7:\n                                      if not ext_call.return_data[0] * stor7:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      if ext_call.return_data[0] * stor7:\n                                          if 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          revert\n                      require ext_call.return_data[0]\n                      require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                      if not ext_call.return_data[0] * stor7:\n                          require swapLimit\n                          swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 0 / swapLimit\n                          require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                          call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          if not ext_call.return_data[0]:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require ext_call.return_data[0]\n                          require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                          if not ext_call.return_data[0] * stor7:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require ext_call.return_data[0] * stor7\n                          require 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require ext_call.return_data[0] * stor7\n                      require 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35\n                      require swapLimit\n                      swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 35 * ext_call.return_data[0] * stor7 / 100 / swapLimit\n                      require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                      call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                           gas gas_remaining wei\n                          args this.address\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if ext_call.return_data[0]:\n                          require ext_call.return_data[0]\n                          require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                          if ext_call.return_data[0] * stor7:\n                              require ext_call.return_data[0] * stor7\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if eth.balance(this.address) - presaleFee:\n                      if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                          if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                              require swapLimit\n                              ethSwapRate = 0 / swapLimit\n                              require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                              call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                   gas gas_remaining wei\n                                  args this.address\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              if not ext_call.return_data[0]:\n                                  require swapLimit\n                                  swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 0 / swapLimit\n                                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                                       gas gas_remaining wei\n                                      args this.address\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  require return_data.size >= 32\n                                  if not ext_call.return_data[0]:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  require ext_call.return_data[0]\n                                  require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                                  if not ext_call.return_data[0] * stor7:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  require ext_call.return_data[0] * stor7\n                                  require 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require ext_call.return_data[0]\n                              require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                              if ext_call.return_data[0] * stor7:\n                                  require ext_call.return_data[0] * stor7\n                                  require 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35\n                                  require swapLimit\n                                  swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 35 * ext_call.return_data[0] * stor7 / 100 / swapLimit\n                                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                                       gas gas_remaining wei\n                                      args this.address\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  require return_data.size >= 32\n                                  if ext_call.return_data[0]:\n                                      require ext_call.return_data[0]\n                                      require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                              else:\n                                  require swapLimit\n                                  swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 0 / swapLimit\n                                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                                       gas gas_remaining wei\n                                      args this.address\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  require return_data.size >= 32\n                                  if ext_call.return_data[0]:\n                                      require ext_call.return_data[0]\n                                      require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                                      if ext_call.return_data[0] * stor7:\n                                          require ext_call.return_data[0] * stor7\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                              if (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35:\n                                  if swapLimit:\n                                      ethSwapRate = (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / 100 / swapLimit\n                                      require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                                      call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                           gas gas_remaining wei\n                                          args this.address\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      require return_data.size >= 32\n                                      if not ext_call.return_data[0]:\n                                          require swapLimit\n                                          swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 0 / swapLimit\n                                          require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                          call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                                               gas gas_remaining wei\n                                              args this.address\n                                          if not ext_call.success:\n                                              revert with ext_call.return_data[0 len return_data.size]\n                                          require return_data.size >= 32\n                                          if ext_call.return_data[0]:\n                                              require ext_call.return_data[0]\n                                              require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                                              if ext_call.return_data[0] * stor7:\n                                                  require ext_call.return_data[0] * stor7\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      if ext_call.return_data[0]:\n                                          if ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7:\n                                              if not ext_call.return_data[0] * stor7:\n                                                  require swapLimit\n                                                  swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 0 / swapLimit\n                                                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                                                       gas gas_remaining wei\n                                                      args this.address\n                                                  if not ext_call.success:\n                                                      revert with ext_call.return_data[0 len return_data.size]\n                                                  require return_data.size >= 32\n                                                  if ext_call.return_data[0]:\n                                                      require ext_call.return_data[0]\n                                                      require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                              if ext_call.return_data[0] * stor7:\n                                                  if 35 * ext_call.return_data[0] * stor7 / ext_call.return_data[0] * stor7 == 35:\n                                                      if swapLimit:\n                                                          swapRates[0x8b7d07b6ffb9364e97b89cea8b84f94249be459f] = 35 * ext_call.return_data[0] * stor7 / 100 / swapLimit\n                                                          require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                                          call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.balanceOf(address account) with:\n                                                               gas gas_remaining wei\n                                                              args this.address\n                                                          if not ext_call.success:\n                                                              revert with ext_call.return_data[0 len return_data.size]\n                                                          require return_data.size >= 32\n                                                          if not ext_call.return_data[0]:\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                          if ext_call.return_data[0]:\n                                                              if ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  else:\n      if not exchangeRateMNY:\n          require stor7\n          if not 0 / stor7:\n              if (0 / stor7) + cycleMintSupply <= 100000 * 10^18:\n                  cycleMintSupply += 0 / stor7\n                  revert with 0, 'Mining payment too small.'\n              if not (0 / stor7) + cycleMintSupply - 100000 * 10^18:\n                  require exchangeRateMNY\n                  cycleMintSupply = 100000 * 10^18\n                  if -(0 / stor7) + -cycleMintSupply + 100000 * 10^18 <= 0:\n                      revert with 0, 'Mining payment too small.'\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args caller, 0 / stor7\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(0 / stor7) + -cycleMintSupply + 100000 * 10^18\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if 0 / exchangeRateMNY <= 0:\n                      if cycleMintSupply != 100000 * 10^18:\n                          stop\n                      stor20 = 1\n                      isMiningOpen = 0\n                      if cycleMintSupply:\n                          require cycleMintSupply\n                          require 35 * cycleMintSupply / cycleMintSupply == 35\n                          swapLimit = 35 * cycleMintSupply / 100\n                          require presaleFee <= eth.balance(this.address)\n                          if not eth.balance(this.address) - presaleFee:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                  else:\n                      require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                      call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                           gas gas_remaining wei\n                          args caller, 0 / exchangeRateMNY\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if cycleMintSupply != 100000 * 10^18:\n                          stop\n                      stor20 = 1\n                      isMiningOpen = 0\n                      if not cycleMintSupply:\n                          swapLimit = 0\n                          require presaleFee <= eth.balance(this.address)\n                          if not eth.balance(this.address) - presaleFee:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n              else:\n                  require (0 / stor7) + cycleMintSupply - 100000 * 10^18\n                  require (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / (0 / stor7) + cycleMintSupply - 100000 * 10^18 == 65\n                  if not (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100:\n                      require exchangeRateMNY\n                      cycleMintSupply = 100000 * 10^18\n                      if -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                          revert with 0, 'Mining payment too small.'\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args caller, (0 / stor7) - ((65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if 0 / exchangeRateMNY <= 0:\n                          if cycleMintSupply != 100000 * 10^18:\n                              stop\n                          stor20 = 1\n                          isMiningOpen = 0\n                          if not cycleMintSupply:\n                              swapLimit = 0\n                              if presaleFee <= eth.balance(this.address):\n                                  if not eth.balance(this.address) - presaleFee:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if eth.balance(this.address) - presaleFee:\n                                      if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if cycleMintSupply:\n                                  if 35 * cycleMintSupply / cycleMintSupply == 35:\n                                      swapLimit = 35 * cycleMintSupply / 100\n                                      if presaleFee <= eth.balance(this.address):\n                                          if not eth.balance(this.address) - presaleFee:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          if eth.balance(this.address) - presaleFee:\n                                              if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          revert\n                      require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                      call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                           gas gas_remaining wei\n                          args caller, 0 / exchangeRateMNY\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if cycleMintSupply != 100000 * 10^18:\n                          stop\n                      stor20 = 1\n                      isMiningOpen = 0\n                      if cycleMintSupply:\n                          require cycleMintSupply\n                          require 35 * cycleMintSupply / cycleMintSupply == 35\n                          swapLimit = 35 * cycleMintSupply / 100\n                          require presaleFee <= eth.balance(this.address)\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                  else:\n                      require (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100\n                      require (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 == stor7\n                      require exchangeRateMNY\n                      cycleMintSupply = 100000 * 10^18\n                      if -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                          revert with 0, 'Mining payment too small.'\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args caller, (0 / stor7) - ((65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY <= 0:\n                          if cycleMintSupply != 100000 * 10^18:\n                              stop\n                          stor20 = 1\n                          isMiningOpen = 0\n                          if not cycleMintSupply:\n                              swapLimit = 0\n                              require presaleFee <= eth.balance(this.address)\n                              if not eth.balance(this.address) - presaleFee:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require eth.balance(this.address) - presaleFee\n                              require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require cycleMintSupply\n                          require 35 * cycleMintSupply / cycleMintSupply == 35\n                          swapLimit = 35 * cycleMintSupply / 100\n                          require presaleFee <= eth.balance(this.address)\n                          if eth.balance(this.address) - presaleFee:\n                      else:\n                          require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                          call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                               gas gas_remaining wei\n                              args caller, (65 * 0 / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          if cycleMintSupply != 100000 * 10^18:\n                              stop\n                          stor20 = 1\n                          isMiningOpen = 0\n                          if not cycleMintSupply:\n                              swapLimit = 0\n                              require presaleFee <= eth.balance(this.address)\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require cycleMintSupply\n                          require 35 * cycleMintSupply / cycleMintSupply == 35\n                          swapLimit = 35 * cycleMintSupply / 100\n          else:\n              require 0 / stor7\n              require 35 * 0 / stor7 / 0 / stor7 == 35\n              if (0 / stor7) + (35 * 0 / stor7 / 65) + cycleMintSupply > 100000 * 10^18:\n                  if not (0 / stor7) + (35 * 0 / stor7 / 65) + cycleMintSupply - 100000 * 10^18:\n                      require exchangeRateMNY\n                      cycleMintSupply = 100000 * 10^18\n                      if -(0 / stor7) + -cycleMintSupply + 100000 * 10^18 <= 0:\n                          revert with 0, 'Mining payment too small.'\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args caller, 0 / stor7\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      require ext_code.size(this.address)\n                      call this.address.mint(address _to, uint256 _amount) with:\n                           gas gas_remaining wei\n                          args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(0 / stor7) + -cycleMintSupply + 100000 * 10^18\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if 0 / exchangeRateMNY <= 0:\n                          if cycleMintSupply != 100000 * 10^18:\n                              stop\n                          stor20 = 1\n                          isMiningOpen = 0\n                          if not cycleMintSupply:\n                              swapLimit = 0\n                              if presaleFee <= eth.balance(this.address):\n                                  if not eth.balance(this.address) - presaleFee:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if eth.balance(this.address) - presaleFee:\n                                      if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if cycleMintSupply:\n                                  if 35 * cycleMintSupply / cycleMintSupply == 35:\n                                      swapLimit = 35 * cycleMintSupply / 100\n                                      if presaleFee <= eth.balance(this.address):\n                                          if not eth.balance(this.address) - presaleFee:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          if eth.balance(this.address) - presaleFee:\n                                              if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          revert\n                      require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                      call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                           gas gas_remaining wei\n                          args caller, 0 / exchangeRateMNY\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      require return_data.size >= 32\n                      if cycleMintSupply != 100000 * 10^18:\n                          stop\n                      stor20 = 1\n                      isMiningOpen = 0\n                      if cycleMintSupply:\n                          require cycleMintSupply\n                          require 35 * cycleMintSupply / cycleMintSupply == 35\n                          swapLimit = 35 * cycleMintSupply / 100\n                          require presaleFee <= eth.balance(this.address)\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      if eth.balance(this.address) - presaleFee:\n                  else:\n                      require (0 / stor7) + (35 * 0 / stor7 / 65) + cycleMintSupply - 100000 * 10^18\n                      require (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / (0 / stor7) + (35 * 0 / stor7 / 65) + cycleMintSupply - 100000 * 10^18 == 65\n                      if (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100:\n                          require (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100\n                          require (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 == stor7\n                          require exchangeRateMNY\n                          cycleMintSupply = 100000 * 10^18\n                          if -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                              revert with 0, 'Mining payment too small.'\n                          require ext_code.size(this.address)\n                          call this.address.mint(address _to, uint256 _amount) with:\n                               gas gas_remaining wei\n                              args caller, (0 / stor7) - ((65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          require ext_code.size(this.address)\n                          call this.address.mint(address _to, uint256 _amount) with:\n                               gas gas_remaining wei\n                              args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          if (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY <= 0:\n                              if cycleMintSupply != 100000 * 10^18:\n                                  stop\n                              stor20 = 1\n                              isMiningOpen = 0\n                              if cycleMintSupply:\n                                  require cycleMintSupply\n                                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                                  swapLimit = 35 * cycleMintSupply / 100\n                                  require presaleFee <= eth.balance(this.address)\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              swapLimit = 0\n                              require presaleFee <= eth.balance(this.address)\n                              if eth.balance(this.address) - presaleFee:\n                          else:\n                              require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                              call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                                   gas gas_remaining wei\n                                  args caller, (65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              if cycleMintSupply != 100000 * 10^18:\n                                  stop\n                              stor20 = 1\n                              isMiningOpen = 0\n                              if cycleMintSupply:\n                                  require cycleMintSupply\n                                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              swapLimit = 0\n                      else:\n                          require exchangeRateMNY\n                          cycleMintSupply = 100000 * 10^18\n                          if -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                              revert with 0, 'Mining payment too small.'\n                          require ext_code.size(this.address)\n                          call this.address.mint(address _to, uint256 _amount) with:\n                               gas gas_remaining wei\n                              args caller, (0 / stor7) - ((65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          require ext_code.size(this.address)\n                          call this.address.mint(address _to, uint256 _amount) with:\n                               gas gas_remaining wei\n                              args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(0 / stor7) + -cycleMintSupply + ((65 * 0 / stor7) + (65 * 35 * 0 / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          if 0 / exchangeRateMNY <= 0:\n                              if cycleMintSupply != 100000 * 10^18:\n                                  stop\n                              stor20 = 1\n                              isMiningOpen = 0\n                              if not cycleMintSupply:\n                                  swapLimit = 0\n                                  require presaleFee <= eth.balance(this.address)\n                                  if not eth.balance(this.address) - presaleFee:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  require eth.balance(this.address) - presaleFee\n                                  require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require cycleMintSupply\n                              require 35 * cycleMintSupply / cycleMintSupply == 35\n                              swapLimit = 35 * cycleMintSupply / 100\n                              require presaleFee <= eth.balance(this.address)\n                              if eth.balance(this.address) - presaleFee:\n                          else:\n                              require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                              call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                                   gas gas_remaining wei\n                                  args caller, 0 / exchangeRateMNY\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              if cycleMintSupply != 100000 * 10^18:\n                                  stop\n                              stor20 = 1\n                              isMiningOpen = 0\n                              if not cycleMintSupply:\n                                  swapLimit = 0\n                                  require presaleFee <= eth.balance(this.address)\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require cycleMintSupply\n                              require 35 * cycleMintSupply / cycleMintSupply == 35\n                              swapLimit = 35 * cycleMintSupply / 100\n              else:\n                  cycleMintSupply = cycleMintSupply + (0 / stor7) + (35 * 0 / stor7 / 65)\n                  if 35 * 0 / stor7 / 65 <= 0:\n                      revert with 0, 'Mining payment too small.'\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args caller, 0 / stor7\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  require ext_code.size(this.address)\n                  call this.address.mint(address _to, uint256 _amount) with:\n                       gas gas_remaining wei\n                      args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 35 * 0 / stor7 / 65\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  require return_data.size >= 32\n                  if cycleMintSupply != 100000 * 10^18:\n                      stop\n                  stor20 = 1\n                  isMiningOpen = 0\n                  if not cycleMintSupply:\n                      swapLimit = 0\n                      require presaleFee <= eth.balance(this.address)\n                      if not eth.balance(this.address) - presaleFee:\n                          require swapLimit\n                          ethSwapRate = 0 / swapLimit\n                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          if not ext_call.return_data[0]:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require ext_call.return_data[0]\n                          require ext_call.return_data[0] * stor7 / ext_call.return_data[0] == stor7\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require eth.balance(this.address) - presaleFee\n                      require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                      if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                          require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                          require swapLimit\n                          ethSwapRate = (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / 100 / swapLimit\n                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                      else:\n                          require swapLimit\n                          ethSwapRate = 0 / swapLimit\n                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          if ext_call.return_data[0]:\n                  else:\n                      require cycleMintSupply\n                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                      swapLimit = 35 * cycleMintSupply / 100\n                      require presaleFee <= eth.balance(this.address)\n                      if not eth.balance(this.address) - presaleFee:\n                          require swapLimit\n                          ethSwapRate = 0 / swapLimit\n                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                               gas gas_remaining wei\n                              args this.address\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          if ext_call.return_data[0]:\n                      else:\n                          require eth.balance(this.address) - presaleFee\n                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                          if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                              require swapLimit\n                              ethSwapRate = 0 / swapLimit\n                              require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                              call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                   gas gas_remaining wei\n                                  args this.address\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                          else:\n                              require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                              require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                              require swapLimit\n                              ethSwapRate = (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / 100 / swapLimit\n                              require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                              call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                   gas gas_remaining wei\n                                  args this.address\n          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n      if exchangeRateMNY:\n          if exchangeRateMNY * amount / exchangeRateMNY == amount:\n              if stor7:\n                  if not exchangeRateMNY * amount / stor7:\n                      if (exchangeRateMNY * amount / stor7) + cycleMintSupply <= 100000 * 10^18:\n                          cycleMintSupply += exchangeRateMNY * amount / stor7\n                          revert with 0, 'Mining payment too small.'\n                      if not (exchangeRateMNY * amount / stor7) + cycleMintSupply - 100000 * 10^18:\n                          require exchangeRateMNY\n                          cycleMintSupply = 100000 * 10^18\n                          if -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + 100000 * 10^18 <= 0:\n                              revert with 0, 'Mining payment too small.'\n                          require ext_code.size(this.address)\n                          call this.address.mint(address _to, uint256 _amount) with:\n                               gas gas_remaining wei\n                              args caller, exchangeRateMNY * amount / stor7\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          require ext_code.size(this.address)\n                          call this.address.mint(address _to, uint256 _amount) with:\n                               gas gas_remaining wei\n                              args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + 100000 * 10^18\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          if 0 / exchangeRateMNY <= 0:\n                              if cycleMintSupply != 100000 * 10^18:\n                                  stop\n                              stor20 = 1\n                              isMiningOpen = 0\n                              if not cycleMintSupply:\n                                  swapLimit = 0\n                                  if presaleFee <= eth.balance(this.address):\n                                      if not eth.balance(this.address) - presaleFee:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      if eth.balance(this.address) - presaleFee:\n                                          if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              else:\n                                  if cycleMintSupply:\n                                      if 35 * cycleMintSupply / cycleMintSupply == 35:\n                                          swapLimit = 35 * cycleMintSupply / 100\n                                          if presaleFee <= eth.balance(this.address):\n                                              if not eth.balance(this.address) - presaleFee:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                              if eth.balance(this.address) - presaleFee:\n                                                  if (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7:\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              revert\n                          require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                          call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                               gas gas_remaining wei\n                              args caller, 0 / exchangeRateMNY\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          require return_data.size >= 32\n                          if cycleMintSupply != 100000 * 10^18:\n                              stop\n                          stor20 = 1\n                          isMiningOpen = 0\n                          if cycleMintSupply:\n                              require cycleMintSupply\n                              require 35 * cycleMintSupply / cycleMintSupply == 35\n                              swapLimit = 35 * cycleMintSupply / 100\n                              require presaleFee <= eth.balance(this.address)\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          swapLimit = 0\n                          require presaleFee <= eth.balance(this.address)\n                          if eth.balance(this.address) - presaleFee:\n                      else:\n                          require (exchangeRateMNY * amount / stor7) + cycleMintSupply - 100000 * 10^18\n                          require (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / (exchangeRateMNY * amount / stor7) + cycleMintSupply - 100000 * 10^18 == 65\n                          if (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100:\n                              require (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100\n                              require (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 == stor7\n                              require exchangeRateMNY\n                              cycleMintSupply = 100000 * 10^18\n                              if -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                                  revert with 0, 'Mining payment too small.'\n                              require ext_code.size(this.address)\n                              call this.address.mint(address _to, uint256 _amount) with:\n                                   gas gas_remaining wei\n                                  args caller, (exchangeRateMNY * amount / stor7) - ((65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              require ext_code.size(this.address)\n                              call this.address.mint(address _to, uint256 _amount) with:\n                                   gas gas_remaining wei\n                                  args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              if (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY <= 0:\n                                  if cycleMintSupply != 100000 * 10^18:\n                                      stop\n                                  stor20 = 1\n                                  isMiningOpen = 0\n                                  if cycleMintSupply:\n                                      require cycleMintSupply\n                                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                                      swapLimit = 35 * cycleMintSupply / 100\n                                      require presaleFee <= eth.balance(this.address)\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  swapLimit = 0\n                                  require presaleFee <= eth.balance(this.address)\n                                  if eth.balance(this.address) - presaleFee:\n                              else:\n                                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                                       gas gas_remaining wei\n                                      args caller, (65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  require return_data.size >= 32\n                                  if cycleMintSupply != 100000 * 10^18:\n                                      stop\n                                  stor20 = 1\n                                  isMiningOpen = 0\n                                  if cycleMintSupply:\n                                      require cycleMintSupply\n                                      require 35 * cycleMintSupply / cycleMintSupply == 35\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  swapLimit = 0\n                          else:\n                              require exchangeRateMNY\n                              cycleMintSupply = 100000 * 10^18\n                              if -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                                  revert with 0, 'Mining payment too small.'\n                              require ext_code.size(this.address)\n                              call this.address.mint(address _to, uint256 _amount) with:\n                                   gas gas_remaining wei\n                                  args caller, (exchangeRateMNY * amount / stor7) - ((65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              require ext_code.size(this.address)\n                              call this.address.mint(address _to, uint256 _amount) with:\n                                   gas gas_remaining wei\n                                  args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              if 0 / exchangeRateMNY <= 0:\n                                  if cycleMintSupply != 100000 * 10^18:\n                                      stop\n                                  stor20 = 1\n                                  isMiningOpen = 0\n                                  if not cycleMintSupply:\n                                      swapLimit = 0\n                                      require presaleFee <= eth.balance(this.address)\n                                      if not eth.balance(this.address) - presaleFee:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      require eth.balance(this.address) - presaleFee\n                                      require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  require cycleMintSupply\n                                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                                  swapLimit = 35 * cycleMintSupply / 100\n                                  require presaleFee <= eth.balance(this.address)\n                                  if eth.balance(this.address) - presaleFee:\n                              else:\n                                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                                       gas gas_remaining wei\n                                      args caller, 0 / exchangeRateMNY\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  require return_data.size >= 32\n                                  if cycleMintSupply != 100000 * 10^18:\n                                      stop\n                                  stor20 = 1\n                                  isMiningOpen = 0\n                                  if not cycleMintSupply:\n                                      swapLimit = 0\n                                      require presaleFee <= eth.balance(this.address)\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  require cycleMintSupply\n                                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                                  swapLimit = 35 * cycleMintSupply / 100\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if exchangeRateMNY * amount / stor7:\n                      if 35 * exchangeRateMNY * amount / stor7 / exchangeRateMNY * amount / stor7 == 35:\n                          if (exchangeRateMNY * amount / stor7) + (35 * exchangeRateMNY * amount / stor7 / 65) + cycleMintSupply <= 100000 * 10^18:\n                              cycleMintSupply = cycleMintSupply + (exchangeRateMNY * amount / stor7) + (35 * exchangeRateMNY * amount / stor7 / 65)\n                              if 35 * exchangeRateMNY * amount / stor7 / 65 <= 0:\n                                  revert with 0, 'Mining payment too small.'\n                              require ext_code.size(this.address)\n                              call this.address.mint(address _to, uint256 _amount) with:\n                                   gas gas_remaining wei\n                                  args caller, exchangeRateMNY * amount / stor7\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              require ext_code.size(this.address)\n                              call this.address.mint(address _to, uint256 _amount) with:\n                                   gas gas_remaining wei\n                                  args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, 35 * exchangeRateMNY * amount / stor7 / 65\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              if cycleMintSupply != 100000 * 10^18:\n                                  stop\n                              stor20 = 1\n                              isMiningOpen = 0\n                              if cycleMintSupply:\n                                  require cycleMintSupply\n                                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                                  swapLimit = 35 * cycleMintSupply / 100\n                                  require presaleFee <= eth.balance(this.address)\n                                  if not eth.balance(this.address) - presaleFee:\n                                      require swapLimit\n                                      ethSwapRate = 0 / swapLimit\n                                      require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                                      call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                           gas gas_remaining wei\n                                          args this.address\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      require return_data.size >= 32\n                                  else:\n                                      require eth.balance(this.address) - presaleFee\n                                      require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                                      if (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                                          require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                                          require swapLimit\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      require swapLimit\n                                      ethSwapRate = 0 / swapLimit\n                                      require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                                      call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                           gas gas_remaining wei\n                                          args this.address\n                              else:\n                                  swapLimit = 0\n                                  require presaleFee <= eth.balance(this.address)\n                                  if not eth.balance(this.address) - presaleFee:\n                                      require swapLimit\n                                      ethSwapRate = 0 / swapLimit\n                                      require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                                      call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                           gas gas_remaining wei\n                                          args this.address\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      require return_data.size >= 32\n                                      if ext_call.return_data[0]:\n                                  else:\n                                      require eth.balance(this.address) - presaleFee\n                                      require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                                      if not (eth.balance(this.address) * stor7) - (presaleFee * stor7):\n                                          require swapLimit\n                                          ethSwapRate = 0 / swapLimit\n                                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                               gas gas_remaining wei\n                                              args this.address\n                                          if not ext_call.success:\n                                              revert with ext_call.return_data[0 len return_data.size]\n                                          require return_data.size >= 32\n                                      else:\n                                          require (eth.balance(this.address) * stor7) - (presaleFee * stor7)\n                                          require (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / (eth.balance(this.address) * stor7) - (presaleFee * stor7) == 35\n                                          require swapLimit\n                                          ethSwapRate = (35 * eth.balance(this.address) * stor7) - (35 * presaleFee * stor7) / 100 / swapLimit\n                                          require ext_code.size(0x8b7d07b6ffb9364e97b89cea8b84f94249be459f)\n                                          call 0x8b7d07b6ffb9364e97b89cea8b84f94249be459f.balanceOf(address account) with:\n                                               gas gas_remaining wei\n                                              args this.address\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if not (exchangeRateMNY * amount / stor7) + (35 * exchangeRateMNY * amount / stor7 / 65) + cycleMintSupply - 100000 * 10^18:\n                              require exchangeRateMNY\n                              cycleMintSupply = 100000 * 10^18\n                              if -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + 100000 * 10^18 <= 0:\n                                  revert with 0, 'Mining payment too small.'\n                              require ext_code.size(this.address)\n                              call this.address.mint(address _to, uint256 _amount) with:\n                                   gas gas_remaining wei\n                                  args caller, exchangeRateMNY * amount / stor7\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              require ext_code.size(this.address)\n                              call this.address.mint(address _to, uint256 _amount) with:\n                                   gas gas_remaining wei\n                                  args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + 100000 * 10^18\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              require return_data.size >= 32\n                              if 0 / exchangeRateMNY <= 0:\n                                  if cycleMintSupply != 100000 * 10^18:\n                                      stop\n                                  stor20 = 1\n                                  isMiningOpen = 0\n                                  if not cycleMintSupply:\n                                      swapLimit = 0\n                                      require presaleFee <= eth.balance(this.address)\n                                      if not eth.balance(this.address) - presaleFee:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      require eth.balance(this.address) - presaleFee\n                                      require (eth.balance(this.address) * stor7) - (presaleFee * stor7) / eth.balance(this.address) - presaleFee == stor7\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  require cycleMintSupply\n                                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                                  swapLimit = 35 * cycleMintSupply / 100\n                                  require presaleFee <= eth.balance(this.address)\n                                  if eth.balance(this.address) - presaleFee:\n                              else:\n                                  require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                  call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                                       gas gas_remaining wei\n                                      args caller, 0 / exchangeRateMNY\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  require return_data.size >= 32\n                                  if cycleMintSupply != 100000 * 10^18:\n                                      stop\n                                  stor20 = 1\n                                  isMiningOpen = 0\n                                  if not cycleMintSupply:\n                                      swapLimit = 0\n                                      require presaleFee <= eth.balance(this.address)\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  require cycleMintSupply\n                                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                                  swapLimit = 35 * cycleMintSupply / 100\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if (exchangeRateMNY * amount / stor7) + (35 * exchangeRateMNY * amount / stor7 / 65) + cycleMintSupply - 100000 * 10^18:\n                              if (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / (exchangeRateMNY * amount / stor7) + (35 * exchangeRateMNY * amount / stor7 / 65) + cycleMintSupply - 100000 * 10^18 == 65:\n                                  if not (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100:\n                                      require exchangeRateMNY\n                                      cycleMintSupply = 100000 * 10^18\n                                      if -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                                          revert with 0, 'Mining payment too small.'\n                                      require ext_code.size(this.address)\n                                      call this.address.mint(address _to, uint256 _amount) with:\n                                           gas gas_remaining wei\n                                          args caller, (exchangeRateMNY * amount / stor7) - ((65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      require return_data.size >= 32\n                                      require ext_code.size(this.address)\n                                      call this.address.mint(address _to, uint256 _amount) with:\n                                           gas gas_remaining wei\n                                          args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      require return_data.size >= 32\n                                      if 0 / exchangeRateMNY <= 0:\n                                          if cycleMintSupply != 100000 * 10^18:\n                                              stop\n                                          stor20 = 1\n                                          isMiningOpen = 0\n                                          if cycleMintSupply:\n                                              require cycleMintSupply\n                                              require 35 * cycleMintSupply / cycleMintSupply == 35\n                                              swapLimit = 35 * cycleMintSupply / 100\n                                              require presaleFee <= eth.balance(this.address)\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          swapLimit = 0\n                                          require presaleFee <= eth.balance(this.address)\n                                          if eth.balance(this.address) - presaleFee:\n                                      else:\n                                          require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                          call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                                               gas gas_remaining wei\n                                              args caller, 0 / exchangeRateMNY\n                                          if not ext_call.success:\n                                              revert with ext_call.return_data[0 len return_data.size]\n                                          require return_data.size >= 32\n                                          if cycleMintSupply != 100000 * 10^18:\n                                              stop\n                                          stor20 = 1\n                                          isMiningOpen = 0\n                                          if cycleMintSupply:\n                                              require cycleMintSupply\n                                              require 35 * cycleMintSupply / cycleMintSupply == 35\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          swapLimit = 0\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100:\n                                      if (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 == stor7:\n                                          if exchangeRateMNY:\n                                              cycleMintSupply = 100000 * 10^18\n                                              if -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18 <= 0:\n                                                  revert with 0, 'Mining payment too small.'\n                                              require ext_code.size(this.address)\n                                              call this.address.mint(address _to, uint256 _amount) with:\n                                                   gas gas_remaining wei\n                                                  args caller, (exchangeRateMNY * amount / stor7) - ((65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100)\n                                              if not ext_call.success:\n                                                  revert with ext_call.return_data[0 len return_data.size]\n                                              require return_data.size >= 32\n                                              require ext_code.size(this.address)\n                                              call this.address.mint(address _to, uint256 _amount) with:\n                                                   gas gas_remaining wei\n                                                  args 0x8218a33eb15901ce71b3b8123e58b7e312ce638a, -(exchangeRateMNY * amount / stor7) + -cycleMintSupply + ((65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100) + 100000 * 10^18\n                                              if not ext_call.success:\n                                                  revert with ext_call.return_data[0 len return_data.size]\n                                              require return_data.size >= 32\n                                              if (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY <= 0:\n                                                  if cycleMintSupply != 100000 * 10^18:\n                                                      stop\n                                                  stor20 = 1\n                                                  isMiningOpen = 0\n                                                  if not cycleMintSupply:\n                                                      swapLimit = 0\n                                                      require presaleFee <= eth.balance(this.address)\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  require cycleMintSupply\n                                                  require 35 * cycleMintSupply / cycleMintSupply == 35\n                                                  swapLimit = 35 * cycleMintSupply / 100\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                              require ext_code.size(0xd2354acf1a2f06d69d8bc2e2048aabd404445df6)\n                                              call 0xd2354acf1a2f06d69d8bc2e2048aabd404445df6.transfer(address recipient, uint256 amount) with:\n                                                   gas gas_remaining wei\n                                                  args caller, (65 * exchangeRateMNY * amount / stor7) + (65 * 35 * exchangeRateMNY * amount / stor7 / 65) + (65 * cycleMintSupply) - 6500000 * 10^18 / 100 * stor7 / exchangeRateMNY\n                                              if not ext_call.success:\n                                                  revert with ext_call.return_data[0 len return_data.size]\n                                              require return_data.size >= 32\n                                              if cycleMintSupply != 100000 * 10^18:\n                                                  stop\n                                              stor20 = 1\n                                              isMiningOpen = 0\n                                              if not cycleMintSupply:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                              if cycleMintSupply:\n                                                  if 35 * cycleMintSupply / cycleMintSupply == 35:\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  revert\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 59818 tokens. Please reduce the length of the messages."
}