{
	"address": "0xf48d72e5a2419c0c6f5822854b7bb7bf135d1623",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract based on the decompiled code provided:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _deposited;\n    address private _owner;\n    address payable private _wallet;\n    uint8 private _state;\n\n    event Closed();\n    event RefundsEnabled();\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Refunded(address indexed user, uint256 amount);\n\n    constructor(address payable wallet) {\n        _owner = msg.sender;\n        _wallet = wallet;\n        _state = 0;\n    }\n\n    function enableRefunds() public {\n        require(_owner == msg.sender, \"Not contract owner\");\n        require(_state == 0, \"Invalid state\");\n        _state = 1;\n        emit RefundsEnabled();\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function state() public view returns (uint8) {\n        return _state;\n    }\n\n    function deposited(address user) public view returns (uint256) {\n        return _deposited[user];\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(_owner == msg.sender, \"Not contract owner\");\n        require(newOwner != address(0), \"New owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function deposit() public payable {\n        require(_owner == msg.sender, \"Not contract owner\");\n        require(_state == 0, \"Invalid state\");\n        _deposited[msg.sender] += msg.value;\n    }\n\n    function refund(address payable user) public {\n        require(_state == 1, \"Refunds not enabled\");\n        uint256 amount = _deposited[user];\n        _deposited[user] = 0;\n        (bool success, ) = user.call{value: amount}(\"\");\n        require(success, \"Refund failed\");\n        emit Refunded(user, amount);\n    }\n\n    function walletWithdraw(uint256 amount) public {\n        require(_owner == msg.sender, \"Not contract owner\");\n        require(amount <= address(this).balance, \"Withdrawal amount exceeds balance\");\n        (bool success, ) = _wallet.call{value: amount}(\"\");\n        require(success, \"Withdrawal failed\");\n    }\n\n    function close() public {\n        require(_owner == msg.sender, \"Not contract owner\");\n        require(_state == 0, \"Invalid state\");\n        _state = 2;\n        emit Closed();\n        uint256 balance = address(this).balance;\n        (bool success, ) = _wallet.call{value: balance}(\"\");\n        require(success, \"Closure failed\");\n    }\n\n    function wallet() public view returns (address) {\n        return _wallet;\n    }\n\n    fallback() external {\n        revert();\n    }\n}\n```\n\nPlease note that the decompiled code doesn't provide the function selector logic, so it's not included in the Solidity contract. The functionality should be the same, but the end result may differ depending on how the original contract was implemented.",
				"role": "assistant"
			}
		}
	],
	"created": 1701459704,
	"id": "chatcmpl-8R3gOLv5hL7iQgkSupKPV2uIaYrYU",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 08:25 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _wallet; // STORAGE[0x2] bytes 0 to 19\nuint8 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nRefundsEnabled();\nOwnershipTransferred(address, address);\nRefunded(address, uint256);\n\nfunction enableRefunds() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0);\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction walletWithdraw(uint256 varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0 < (address(this)).balance);\n    v0 = _wallet.call().value(varg0).gas(2300 * !varg0);\n    require(v0);\n}\n\nfunction close() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x350d9b96) {\n            walletWithdraw(uint256);\n        } else if (0x43d726d6 == function_selector) {\n            close();\n        } else if (0x521eb273 == function_selector) {\n            wallet();\n        } else if (0x8c52dc41 == function_selector) {\n            enableRefunds();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xc19d93fb == function_selector) {\n            state();\n        } else if (0xcb13cddb == function_selector) {\n            deposited(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 08:25 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _wallet; // STORAGE[0x2] bytes 0 to 19\nuint8 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nRefundsEnabled();\nOwnershipTransferred(address, address);\nRefunded(address, uint256);\n\nfunction enableRefunds() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0);\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction walletWithdraw(uint256 varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0 < (address(this)).balance);\n    v0 = _wallet.call().value(varg0).gas(2300 * !varg0);\n    require(v0);\n}\n\nfunction close() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x350d9b96) {\n            walletWithdraw(uint256);\n        } else if (0x43d726d6 == function_selector) {\n            close();\n        } else if (0x521eb273 == function_selector) {\n            wallet();\n        } else if (0x8c52dc41 == function_selector) {\n            enableRefunds();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xc19d93fb == function_selector) {\n            state();\n        } else if (0xcb13cddb == function_selector) {\n            deposited(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 08:25 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _wallet; // STORAGE[0x2] bytes 0 to 19\nuint8 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nRefundsEnabled();\nOwnershipTransferred(address, address);\nRefunded(address, uint256);\n\nfunction enableRefunds() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0);\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction walletWithdraw(uint256 varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0 < (address(this)).balance);\n    v0 = _wallet.call().value(varg0).gas(2300 * !varg0);\n    require(v0);\n}\n\nfunction close() public nonPayable { \n    require(_owner == msg.sender);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x350d9b96) {\n            walletWithdraw(uint256);\n        } else if (0x43d726d6 == function_selector) {\n            close();\n        } else if (0x521eb273 == function_selector) {\n            wallet();\n        } else if (0x8c52dc41 == function_selector) {\n            enableRefunds();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xc19d93fb == function_selector) {\n            state();\n        } else if (0xcb13cddb == function_selector) {\n            deposited(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 53.66231894493103,
	"usage": {
		"completion_tokens": 648,
		"prompt_tokens": 950,
		"total_tokens": 1598
	}
}