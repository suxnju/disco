{
	"address": "0x1a94656a6245379bc0d9c64c402197528edb2bd1",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code that corresponds to the given decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) public allowed;\n    address public owner;\n    uint public totalSupply;\n    bool public mintingFinished = false;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    address public newOwner;\n    address public controller;\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint _totalSupply, address _owner) public {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply;\n        owner = _owner;\n        controller = msg.sender;\n        balances[_owner] = _totalSupply;\n    }\n\n    function transfer(address _to, uint _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        require(balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        return true;\n    }\n\n    function approve(address _spender, uint _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function mint(address _to, uint _value) public {\n        require(msg.sender == controller);\n        require(!mintingFinished);\n        totalSupply += _value;\n        balances[_to] += _value;\n    }\n\n    function finishMinting() public {\n        require(msg.sender == controller);\n        mintingFinished = true;\n    }\n\n    function transferOwnership(address _newOwner) public {\n        require(msg.sender == owner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n```\n\nNOTE: This is a simplified version of the contract. The original contract may contain additional logic or function calls that are not present in the provided bytecode.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472992,
	"id": "chatcmpl-8Muzg2EP7gfUbtSCR2QzgngctTFOU",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x048e62ca) {\n            // Dispatch table entry for moveToken(address,uint256,address)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = msg.data[0x24:0x44];\n            var var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = moveToken(var2, var3, var4);\n        \n        label_018D:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = !!var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x05d2035b) {\n            // Dispatch table entry for mintingFinished()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = mintingFinished();\n            goto label_018D;\n        } else if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01cb;\n            var2 = name();\n        \n        label_01CB:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x20;\n            var temp3 = var2;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n            var3 = temp2;\n            var4 = var3;\n            var var5 = var4 + 0x40;\n            var var7 = memory[temp3:temp3 + 0x20];\n            var var6 = temp3 + 0x20;\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0205:\n                var temp4 = var7;\n                var5 = temp4 + var5;\n                var6 = temp4 & 0x1f;\n            \n                if (!var6) {\n                    var temp5 = memory[0x40:0x60];\n                    return memory[temp5:temp5 + var5 - temp5];\n                } else {\n                    var temp6 = var6;\n                    var temp7 = var5 - temp6;\n                    memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                    var temp8 = memory[0x40:0x60];\n                    return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                }\n            } else {\n            label_01F6:\n                var temp9 = var11;\n                memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                var11 = temp9 + 0x20;\n            \n                if (var11 >= var8) { goto label_0205; }\n                else { goto label_01F6; }\n            }\n        } else if (var0 == 0x095ea7b3) {\n            // Dispatch table entry for approve(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = approve(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0x12414198) {\n            // Dispatch table entry for 0x12414198 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0286;\n            var2 = func_0933();\n        \n        label_0286:\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c4;\n            var1 = totalSupply();\n        \n        label_02C4:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var1;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x1cc1472d) {\n            // Dispatch table entry for moveEth(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            moveEth(var2, var3);\n            stop();\n        } else if (var0 == 0x23b872dd) {\n            // Dispatch table entry for transferFrom(address,address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = msg.data[0x44:0x64];\n            var1 = transferFrom(var2, var3, var4);\n            goto label_018D;\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0353;\n            var2 = decimals();\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = var2 & 0xff;\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n        } else if (var0 == 0x40c10f19) {\n            // Dispatch table entry for mint(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = mint(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0x42966c68) {\n            // Dispatch table entry for burn(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24];\n            revert(memory[0x00:0x00]);\n        } else if (var0 == 0x66188463) {\n            // Dispatch table entry for decreaseApproval(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = decreaseApproval(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c4;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = balanceOf(var2);\n            goto label_02C4;\n        } else if (var0 == 0x715018a6) {\n            // Dispatch table entry for renounceOwnership()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            renounceOwnership();\n            stop();\n        } else if (var0 == 0x7d64bcb4) {\n            // Dispatch table entry for finishMinting()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var1 = finishMinting();\n            goto label_018D;\n        } else if (var0 == 0x8a56a226) {\n            // Dispatch table entry for updateCloversControllerAddress(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            updateCloversControllerAddress(var2);\n            stop();\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0286;\n            var2 = owner();\n            goto label_0286;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01cb;\n            var2 = symbol();\n            goto label_01CB;\n        } else if (var0 == 0x9dc29fac) {\n            // Dispatch table entry for burn(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            burn(var2, var3);\n            stop();\n        } else if (var0 == 0xa89b55da) {\n            // Dispatch table entry for 0xa89b55da (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0286;\n            var2 = func_1247();\n            goto label_0286;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0xa91cf1c5) {\n            // Dispatch table entry for 0xa91cf1c5 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            func_136B(var2);\n            stop();\n        } else if (var0 == 0xc863bac1) {\n            // Dispatch table entry for approveToken(address,uint256,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = approveToken(var2, var3, var4);\n            goto label_018D;\n        } else if (var0 == 0xd73dd623) {\n            // Dispatch table entry for increaseApproval(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = increaseApproval(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c4;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = allowance(var2, var3);\n            goto label_02C4;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            transferOwnership(var2);\n            stop();\n        } else { stop(); }\n    }\n    \n    function moveToken(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var1) {\n            var1 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var1) { goto label_066A; }\n            else { goto label_0649; }\n        } else if (var1) {\n        label_066A:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0675:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            var1 = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x70a08231;\n            var var3 = temp0 + 0x24;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = temp0 - var5 + 0x24;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp1;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (arg1 > memory[var1:var1 + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var1 = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = 0xa9059cbb;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp3 = temp2 + 0x04;\n                memory[temp3:temp3 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp4 = temp3 + 0x20;\n                memory[temp4:temp4 + 0x20] = arg1;\n                var3 = temp4 + 0x20;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n                var temp5;\n                temp5, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp5;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 >= 0x20) { return memory[var1:var1 + 0x20]; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp6 = returndata.length;\n                    memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp7 = returndata.length;\n                memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n        label_0649:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_0675; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function mintingFinished() returns (var r0) { return storage[0x05] / 0x01000000000000000000000000000000000000000000 & 0xff; }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_08B8:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_08AF; }\n        \n        label_089B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_089B; }\n        \n        label_08AF:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_08B8;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_08B8;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = temp1;\n        var temp3 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function func_0933() returns (var r0) { return storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function moveEth(var arg0, var arg1) {\n        var var0 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var0) {\n            var0 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var0) { goto label_09B9; }\n            else { goto label_0998; }\n        } else if (var0) {\n        label_09B9:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_09C4:\n        \n            if (arg1 > address(this).balance) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg1;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var0 = !temp2;\n        \n            if (!var0) { return; }\n        \n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n        label_0998:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_09C4; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(arg1 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.sender != storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff) {\n            if (!var1) {\n            label_0B65:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var var2 = storage[keccak256(memory[0x00:0x40])];\n                var1 = 0x0b9b;\n                var var3 = arg2;\n                var1 = func_1632(var2, var3);\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = 0x0bdd;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var3 = arg2;\n                var1 = func_1644(var2, var3);\n                var temp0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x00:0x20] = temp0;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = arg2;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n            label_0AB6:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp3;\n            \n                if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp4;\n                var1 = 0x0b33;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var3 = arg2;\n                var1 = func_1632(var2, var3);\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp5 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp5;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                goto label_0B65;\n            }\n        } else if (msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_0B65; }\n        else { goto label_0AB6; }\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function mint(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var1) {\n            var1 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var1) { goto label_0CB9; }\n            else { goto label_0C98; }\n        } else if (var1) {\n        label_0CB9:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0CC4:\n        \n            if (storage[0x05] / 0x01000000000000000000000000000000000000000000 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0d00;\n            var var2 = storage[0x01];\n            var var3 = arg1;\n            var1 = func_1644(var2, var3);\n            storage[0x01] = var1;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var1 = 0x0d39;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var3 = arg1;\n            var1 = func_1644(var2, var3);\n            var temp0 = arg0;\n            var temp1 = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var temp2 = memory[0x40:0x60];\n            var temp3 = arg1;\n            memory[temp2:temp2 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + temp2 - temp4 + 0x20], [0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp3;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n        label_0C98:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_0CC4; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function decreaseApproval(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n    \n        if (arg1 <= var1) {\n            var var2 = 0x0e71;\n            var var3 = var1;\n            var var4 = arg1;\n            var2 = func_1632(var3, var4);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n        \n        label_0EA3:\n            var temp2 = msg.sender;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = temp3;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp7;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            goto label_0EA3;\n        }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820, storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x05] = storage[0x05] & 0xffffffffffffffffffffff0000000000000000000000000000000000000000ff;\n    }\n    \n    function finishMinting() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] / 0x01000000000000000000000000000000000000000000 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x05] = (storage[0x05] & 0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff) | 0x01000000000000000000000000000000000000000000;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa08]);\n        return 0x01;\n    }\n    \n    function updateCloversControllerAddress(var arg0) {\n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x06] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x06] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000);\n    }\n    \n    function owner() returns (var r0) { return storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x04;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_08B8:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_08AF; }\n        \n        label_089B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_089B; }\n        \n        label_08AF:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_08B8;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_08B8;\n        }\n    }\n    \n    function burn(var arg0, var arg1) {\n        var var0 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var0) {\n            var0 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var0) { goto label_122E; }\n            else { goto label_120D; }\n        } else if (var0) {\n        label_122E:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_1239:\n            var0 = 0x1243;\n            var var1 = arg0;\n            var var2 = arg1;\n            func_1657(var1, var2);\n            return;\n        } else {\n        label_120D:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1239; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_1247() returns (var r0) { return storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x12c3;\n        var var3 = arg1;\n        var1 = func_1632(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var1 = 0x1302;\n        var3 = arg1;\n        var1 = func_1644(var2, var3);\n        var temp0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function func_136B(var arg0) {\n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x07] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000);\n    }\n    \n    function approveToken(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var1) {\n            var1 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var1) { goto label_1464; }\n            else { goto label_1443; }\n        } else if (var1) {\n        label_1464:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_146F:\n            var1 = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x095ea7b3;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = arg1;\n            var var3 = temp2 + 0x20;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp3;\n            temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp3;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 >= 0x20) { return memory[var1:var1 + 0x20]; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var temp4 = returndata.length;\n                memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n        label_1443:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_146F; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function increaseApproval(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var1 = 0x1553;\n        var var3 = arg1;\n        var1 = func_1644(var2, var3);\n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x02;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = var1;\n        storage[keccak256(memory[0x00:0x40])] = temp4;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x162f;\n        var var1 = arg0;\n        func_1799(var1);\n    }\n    \n    function func_1632(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1644(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_1657(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x16bf;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg1;\n        var0 = func_1632(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x16f8;\n        var1 = storage[0x01];\n        var2 = arg1;\n        var0 = func_1632(var1, var2);\n        storage[0x01] = var0;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg1;\n        memory[temp0:temp0 + 0x20] = temp1;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = arg0;\n        log(memory[temp2:temp2 + temp0 - temp2 + 0x20], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, 0x00]);\n    }\n    \n    function func_1799(var arg0) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x05] = (storage[0x05] & 0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) | (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x048e62ca) {\n            // Dispatch table entry for moveToken(address,uint256,address)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = msg.data[0x24:0x44];\n            var var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = moveToken(var2, var3, var4);\n        \n        label_018D:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = !!var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x05d2035b) {\n            // Dispatch table entry for mintingFinished()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = mintingFinished();\n            goto label_018D;\n        } else if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01cb;\n            var2 = name();\n        \n        label_01CB:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x20;\n            var temp3 = var2;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n            var3 = temp2;\n            var4 = var3;\n            var var5 = var4 + 0x40;\n            var var7 = memory[temp3:temp3 + 0x20];\n            var var6 = temp3 + 0x20;\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0205:\n                var temp4 = var7;\n                var5 = temp4 + var5;\n                var6 = temp4 & 0x1f;\n            \n                if (!var6) {\n                    var temp5 = memory[0x40:0x60];\n                    return memory[temp5:temp5 + var5 - temp5];\n                } else {\n                    var temp6 = var6;\n                    var temp7 = var5 - temp6;\n                    memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                    var temp8 = memory[0x40:0x60];\n                    return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                }\n            } else {\n            label_01F6:\n                var temp9 = var11;\n                memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                var11 = temp9 + 0x20;\n            \n                if (var11 >= var8) { goto label_0205; }\n                else { goto label_01F6; }\n            }\n        } else if (var0 == 0x095ea7b3) {\n            // Dispatch table entry for approve(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = approve(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0x12414198) {\n            // Dispatch table entry for 0x12414198 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0286;\n            var2 = func_0933();\n        \n        label_0286:\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c4;\n            var1 = totalSupply();\n        \n        label_02C4:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var1;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x1cc1472d) {\n            // Dispatch table entry for moveEth(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            moveEth(var2, var3);\n            stop();\n        } else if (var0 == 0x23b872dd) {\n            // Dispatch table entry for transferFrom(address,address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = msg.data[0x44:0x64];\n            var1 = transferFrom(var2, var3, var4);\n            goto label_018D;\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0353;\n            var2 = decimals();\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = var2 & 0xff;\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n        } else if (var0 == 0x40c10f19) {\n            // Dispatch table entry for mint(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = mint(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0x42966c68) {\n            // Dispatch table entry for burn(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24];\n            revert(memory[0x00:0x00]);\n        } else if (var0 == 0x66188463) {\n            // Dispatch table entry for decreaseApproval(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = decreaseApproval(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c4;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = balanceOf(var2);\n            goto label_02C4;\n        } else if (var0 == 0x715018a6) {\n            // Dispatch table entry for renounceOwnership()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            renounceOwnership();\n            stop();\n        } else if (var0 == 0x7d64bcb4) {\n            // Dispatch table entry for finishMinting()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var1 = finishMinting();\n            goto label_018D;\n        } else if (var0 == 0x8a56a226) {\n            // Dispatch table entry for updateCloversControllerAddress(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            updateCloversControllerAddress(var2);\n            stop();\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0286;\n            var2 = owner();\n            goto label_0286;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01cb;\n            var2 = symbol();\n            goto label_01CB;\n        } else if (var0 == 0x9dc29fac) {\n            // Dispatch table entry for burn(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            burn(var2, var3);\n            stop();\n        } else if (var0 == 0xa89b55da) {\n            // Dispatch table entry for 0xa89b55da (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0286;\n            var2 = func_1247();\n            goto label_0286;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0xa91cf1c5) {\n            // Dispatch table entry for 0xa91cf1c5 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            func_136B(var2);\n            stop();\n        } else if (var0 == 0xc863bac1) {\n            // Dispatch table entry for approveToken(address,uint256,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = approveToken(var2, var3, var4);\n            goto label_018D;\n        } else if (var0 == 0xd73dd623) {\n            // Dispatch table entry for increaseApproval(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = increaseApproval(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c4;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = allowance(var2, var3);\n            goto label_02C4;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            transferOwnership(var2);\n            stop();\n        } else { stop(); }\n    }\n    \n    function moveToken(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var1) {\n            var1 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var1) { goto label_066A; }\n            else { goto label_0649; }\n        } else if (var1) {\n        label_066A:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0675:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            var1 = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x70a08231;\n            var var3 = temp0 + 0x24;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = temp0 - var5 + 0x24;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp1;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (arg1 > memory[var1:var1 + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var1 = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = 0xa9059cbb;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp3 = temp2 + 0x04;\n                memory[temp3:temp3 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp4 = temp3 + 0x20;\n                memory[temp4:temp4 + 0x20] = arg1;\n                var3 = temp4 + 0x20;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n                var temp5;\n                temp5, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp5;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 >= 0x20) { return memory[var1:var1 + 0x20]; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp6 = returndata.length;\n                    memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp7 = returndata.length;\n                memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n        label_0649:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_0675; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function mintingFinished() returns (var r0) { return storage[0x05] / 0x01000000000000000000000000000000000000000000 & 0xff; }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_08B8:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_08AF; }\n        \n        label_089B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_089B; }\n        \n        label_08AF:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_08B8;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_08B8;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = temp1;\n        var temp3 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function func_0933() returns (var r0) { return storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function moveEth(var arg0, var arg1) {\n        var var0 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var0) {\n            var0 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var0) { goto label_09B9; }\n            else { goto label_0998; }\n        } else if (var0) {\n        label_09B9:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_09C4:\n        \n            if (arg1 > address(this).balance) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg1;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var0 = !temp2;\n        \n            if (!var0) { return; }\n        \n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n        label_0998:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_09C4; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(arg1 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.sender != storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff) {\n            if (!var1) {\n            label_0B65:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var var2 = storage[keccak256(memory[0x00:0x40])];\n                var1 = 0x0b9b;\n                var var3 = arg2;\n                var1 = func_1632(var2, var3);\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = 0x0bdd;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var3 = arg2;\n                var1 = func_1644(var2, var3);\n                var temp0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x00:0x20] = temp0;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = arg2;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n            label_0AB6:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp3;\n            \n                if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp4;\n                var1 = 0x0b33;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var3 = arg2;\n                var1 = func_1632(var2, var3);\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp5 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp5;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                goto label_0B65;\n            }\n        } else if (msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_0B65; }\n        else { goto label_0AB6; }\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function mint(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var1) {\n            var1 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var1) { goto label_0CB9; }\n            else { goto label_0C98; }\n        } else if (var1) {\n        label_0CB9:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0CC4:\n        \n            if (storage[0x05] / 0x01000000000000000000000000000000000000000000 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0d00;\n            var var2 = storage[0x01];\n            var var3 = arg1;\n            var1 = func_1644(var2, var3);\n            storage[0x01] = var1;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var1 = 0x0d39;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var3 = arg1;\n            var1 = func_1644(var2, var3);\n            var temp0 = arg0;\n            var temp1 = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var temp2 = memory[0x40:0x60];\n            var temp3 = arg1;\n            memory[temp2:temp2 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + temp2 - temp4 + 0x20], [0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp3;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n        label_0C98:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_0CC4; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function decreaseApproval(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n    \n        if (arg1 <= var1) {\n            var var2 = 0x0e71;\n            var var3 = var1;\n            var var4 = arg1;\n            var2 = func_1632(var3, var4);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n        \n        label_0EA3:\n            var temp2 = msg.sender;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = temp3;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp7;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            goto label_0EA3;\n        }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820, storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x05] = storage[0x05] & 0xffffffffffffffffffffff0000000000000000000000000000000000000000ff;\n    }\n    \n    function finishMinting() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] / 0x01000000000000000000000000000000000000000000 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x05] = (storage[0x05] & 0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff) | 0x01000000000000000000000000000000000000000000;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa08]);\n        return 0x01;\n    }\n    \n    function updateCloversControllerAddress(var arg0) {\n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x06] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x06] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000);\n    }\n    \n    function owner() returns (var r0) { return storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x04;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_08B8:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_08AF; }\n        \n        label_089B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_089B; }\n        \n        label_08AF:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_08B8;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_08B8;\n        }\n    }\n    \n    function burn(var arg0, var arg1) {\n        var var0 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var0) {\n            var0 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var0) { goto label_122E; }\n            else { goto label_120D; }\n        } else if (var0) {\n        label_122E:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_1239:\n            var0 = 0x1243;\n            var var1 = arg0;\n            var var2 = arg1;\n            func_1657(var1, var2);\n            return;\n        } else {\n        label_120D:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1239; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_1247() returns (var r0) { return storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x12c3;\n        var var3 = arg1;\n        var1 = func_1632(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var1 = 0x1302;\n        var3 = arg1;\n        var1 = func_1644(var2, var3);\n        var temp0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function func_136B(var arg0) {\n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x07] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000);\n    }\n    \n    function approveToken(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var1) {\n            var1 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var1) { goto label_1464; }\n            else { goto label_1443; }\n        } else if (var1) {\n        label_1464:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_146F:\n            var1 = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x095ea7b3;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = arg1;\n            var var3 = temp2 + 0x20;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp3;\n            temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp3;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 >= 0x20) { return memory[var1:var1 + 0x20]; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var temp4 = returndata.length;\n                memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n        label_1443:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_146F; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function increaseApproval(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var1 = 0x1553;\n        var var3 = arg1;\n        var1 = func_1644(var2, var3);\n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x02;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = var1;\n        storage[keccak256(memory[0x00:0x40])] = temp4;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x162f;\n        var var1 = arg0;\n        func_1799(var1);\n    }\n    \n    function func_1632(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1644(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_1657(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x16bf;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg1;\n        var0 = func_1632(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x16f8;\n        var1 = storage[0x01];\n        var2 = arg1;\n        var0 = func_1632(var1, var2);\n        storage[0x01] = var0;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg1;\n        memory[temp0:temp0 + 0x20] = temp1;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = arg0;\n        log(memory[temp2:temp2 + temp0 - temp2 + 0x20], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, 0x00]);\n    }\n    \n    function func_1799(var arg0) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x05] = (storage[0x05] & 0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) | (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x048e62ca) {\n            // Dispatch table entry for moveToken(address,uint256,address)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = msg.data[0x24:0x44];\n            var var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = moveToken(var2, var3, var4);\n        \n        label_018D:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = !!var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x05d2035b) {\n            // Dispatch table entry for mintingFinished()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = mintingFinished();\n            goto label_018D;\n        } else if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01cb;\n            var2 = name();\n        \n        label_01CB:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x20;\n            var temp3 = var2;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n            var3 = temp2;\n            var4 = var3;\n            var var5 = var4 + 0x40;\n            var var7 = memory[temp3:temp3 + 0x20];\n            var var6 = temp3 + 0x20;\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0205:\n                var temp4 = var7;\n                var5 = temp4 + var5;\n                var6 = temp4 & 0x1f;\n            \n                if (!var6) {\n                    var temp5 = memory[0x40:0x60];\n                    return memory[temp5:temp5 + var5 - temp5];\n                } else {\n                    var temp6 = var6;\n                    var temp7 = var5 - temp6;\n                    memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                    var temp8 = memory[0x40:0x60];\n                    return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                }\n            } else {\n            label_01F6:\n                var temp9 = var11;\n                memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                var11 = temp9 + 0x20;\n            \n                if (var11 >= var8) { goto label_0205; }\n                else { goto label_01F6; }\n            }\n        } else if (var0 == 0x095ea7b3) {\n            // Dispatch table entry for approve(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = approve(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0x12414198) {\n            // Dispatch table entry for 0x12414198 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0286;\n            var2 = func_0933();\n        \n        label_0286:\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c4;\n            var1 = totalSupply();\n        \n        label_02C4:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var1;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x1cc1472d) {\n            // Dispatch table entry for moveEth(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            moveEth(var2, var3);\n            stop();\n        } else if (var0 == 0x23b872dd) {\n            // Dispatch table entry for transferFrom(address,address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = msg.data[0x44:0x64];\n            var1 = transferFrom(var2, var3, var4);\n            goto label_018D;\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0353;\n            var2 = decimals();\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = var2 & 0xff;\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n        } else if (var0 == 0x40c10f19) {\n            // Dispatch table entry for mint(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = mint(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0x42966c68) {\n            // Dispatch table entry for burn(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24];\n            revert(memory[0x00:0x00]);\n        } else if (var0 == 0x66188463) {\n            // Dispatch table entry for decreaseApproval(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = decreaseApproval(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c4;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = balanceOf(var2);\n            goto label_02C4;\n        } else if (var0 == 0x715018a6) {\n            // Dispatch table entry for renounceOwnership()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            renounceOwnership();\n            stop();\n        } else if (var0 == 0x7d64bcb4) {\n            // Dispatch table entry for finishMinting()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var1 = finishMinting();\n            goto label_018D;\n        } else if (var0 == 0x8a56a226) {\n            // Dispatch table entry for updateCloversControllerAddress(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            updateCloversControllerAddress(var2);\n            stop();\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0286;\n            var2 = owner();\n            goto label_0286;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01cb;\n            var2 = symbol();\n            goto label_01CB;\n        } else if (var0 == 0x9dc29fac) {\n            // Dispatch table entry for burn(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            burn(var2, var3);\n            stop();\n        } else if (var0 == 0xa89b55da) {\n            // Dispatch table entry for 0xa89b55da (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0286;\n            var2 = func_1247();\n            goto label_0286;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0xa91cf1c5) {\n            // Dispatch table entry for 0xa91cf1c5 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            func_136B(var2);\n            stop();\n        } else if (var0 == 0xc863bac1) {\n            // Dispatch table entry for approveToken(address,uint256,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = approveToken(var2, var3, var4);\n            goto label_018D;\n        } else if (var0 == 0xd73dd623) {\n            // Dispatch table entry for increaseApproval(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = increaseApproval(var2, var3);\n            goto label_018D;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c4;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = allowance(var2, var3);\n            goto label_02C4;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0153;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            transferOwnership(var2);\n            stop();\n        } else { stop(); }\n    }\n    \n    function moveToken(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var1) {\n            var1 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var1) { goto label_066A; }\n            else { goto label_0649; }\n        } else if (var1) {\n        label_066A:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0675:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            var1 = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x70a08231;\n            var var3 = temp0 + 0x24;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = temp0 - var5 + 0x24;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp1;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (arg1 > memory[var1:var1 + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var1 = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = 0xa9059cbb;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp3 = temp2 + 0x04;\n                memory[temp3:temp3 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp4 = temp3 + 0x20;\n                memory[temp4:temp4 + 0x20] = arg1;\n                var3 = temp4 + 0x20;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n                var temp5;\n                temp5, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp5;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 >= 0x20) { return memory[var1:var1 + 0x20]; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp6 = returndata.length;\n                    memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp7 = returndata.length;\n                memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n        label_0649:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_0675; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function mintingFinished() returns (var r0) { return storage[0x05] / 0x01000000000000000000000000000000000000000000 & 0xff; }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_08B8:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_08AF; }\n        \n        label_089B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_089B; }\n        \n        label_08AF:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_08B8;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_08B8;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = temp1;\n        var temp3 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function func_0933() returns (var r0) { return storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function moveEth(var arg0, var arg1) {\n        var var0 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var0) {\n            var0 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var0) { goto label_09B9; }\n            else { goto label_0998; }\n        } else if (var0) {\n        label_09B9:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_09C4:\n        \n            if (arg1 > address(this).balance) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg1;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var0 = !temp2;\n        \n            if (!var0) { return; }\n        \n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n        label_0998:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_09C4; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(arg1 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.sender != storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender != storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff) {\n            if (!var1) {\n            label_0B65:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var var2 = storage[keccak256(memory[0x00:0x40])];\n                var1 = 0x0b9b;\n                var var3 = arg2;\n                var1 = func_1632(var2, var3);\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = 0x0bdd;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var3 = arg2;\n                var1 = func_1644(var2, var3);\n                var temp0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x00:0x20] = temp0;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = arg2;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n            label_0AB6:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp3;\n            \n                if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp4;\n                var1 = 0x0b33;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var3 = arg2;\n                var1 = func_1632(var2, var3);\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp5 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp5;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                goto label_0B65;\n            }\n        } else if (msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_0B65; }\n        else { goto label_0AB6; }\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function mint(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var1) {\n            var1 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var1) { goto label_0CB9; }\n            else { goto label_0C98; }\n        } else if (var1) {\n        label_0CB9:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0CC4:\n        \n            if (storage[0x05] / 0x01000000000000000000000000000000000000000000 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0d00;\n            var var2 = storage[0x01];\n            var var3 = arg1;\n            var1 = func_1644(var2, var3);\n            storage[0x01] = var1;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var1 = 0x0d39;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var3 = arg1;\n            var1 = func_1644(var2, var3);\n            var temp0 = arg0;\n            var temp1 = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var temp2 = memory[0x40:0x60];\n            var temp3 = arg1;\n            memory[temp2:temp2 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + temp2 - temp4 + 0x20], [0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp3;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n        label_0C98:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_0CC4; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function decreaseApproval(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n    \n        if (arg1 <= var1) {\n            var var2 = 0x0e71;\n            var var3 = var1;\n            var var4 = arg1;\n            var2 = func_1632(var3, var4);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n        \n        label_0EA3:\n            var temp2 = msg.sender;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp4;\n            memory[0x20:0x40] = temp3;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp7;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            goto label_0EA3;\n        }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xf8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c64820, storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x05] = storage[0x05] & 0xffffffffffffffffffffff0000000000000000000000000000000000000000ff;\n    }\n    \n    function finishMinting() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] / 0x01000000000000000000000000000000000000000000 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x05] = (storage[0x05] & 0xffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff) | 0x01000000000000000000000000000000000000000000;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa08]);\n        return 0x01;\n    }\n    \n    function updateCloversControllerAddress(var arg0) {\n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x06] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x06] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000);\n    }\n    \n    function owner() returns (var r0) { return storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x04;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_08B8:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_08AF; }\n        \n        label_089B:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_089B; }\n        \n        label_08AF:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_08B8;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_08B8;\n        }\n    }\n    \n    function burn(var arg0, var arg1) {\n        var var0 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var0) {\n            var0 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var0) { goto label_122E; }\n            else { goto label_120D; }\n        } else if (var0) {\n        label_122E:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_1239:\n            var0 = 0x1243;\n            var var1 = arg0;\n            var var2 = arg1;\n            func_1657(var1, var2);\n            return;\n        } else {\n        label_120D:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1239; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_1247() returns (var r0) { return storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x12c3;\n        var var3 = arg1;\n        var1 = func_1632(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var1 = 0x1302;\n        var3 = arg1;\n        var1 = func_1644(var2, var3);\n        var temp0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function func_136B(var arg0) {\n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x07] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000);\n    }\n    \n    function approveToken(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var1) {\n            var1 = msg.sender == storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var1) { goto label_1464; }\n            else { goto label_1443; }\n        } else if (var1) {\n        label_1464:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_146F:\n            var1 = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x095ea7b3;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = arg1;\n            var var3 = temp2 + 0x20;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp3;\n            temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp3;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 >= 0x20) { return memory[var1:var1 + 0x20]; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var temp4 = returndata.length;\n                memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n        label_1443:\n        \n            if (msg.sender == storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_146F; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function increaseApproval(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var1 = 0x1553;\n        var var3 = arg1;\n        var1 = func_1644(var2, var3);\n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x02;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = var1;\n        storage[keccak256(memory[0x00:0x40])] = temp4;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x162f;\n        var var1 = arg0;\n        func_1799(var1);\n    }\n    \n    function func_1632(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1644(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_1657(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x16bf;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg1;\n        var0 = func_1632(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x16f8;\n        var1 = storage[0x01];\n        var2 = arg1;\n        var0 = func_1632(var1, var2);\n        storage[0x01] = var0;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg1;\n        memory[temp0:temp0 + 0x20] = temp1;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = arg0;\n        log(memory[temp2:temp2 + temp0 - temp2 + 0x20], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, 0x00]);\n    }\n    \n    function func_1799(var arg0) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x05] / 0x0100 & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x05] = (storage[0x05] & 0xffffffffffffffffffffff0000000000000000000000000000000000000000ff) | (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 61.12429881095886,
	"usage": {
		"completion_tokens": 571,
		"prompt_tokens": 13044,
		"total_tokens": 13615
	}
}