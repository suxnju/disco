{
	"address": "0x03cc979c46b030c4abd7d4063cd075cb38cd0919",
	"input_format": "TemplateDescription",
	"ir": "For the setOwner function, it has one argument and its type is address.\n- For the address of this contract:\n  - the state variable owner will be updated to the first argument.\n- For users, except for the address of this contract:\n  - For owner:\n    - the state variable owner will be updated to the first argument.\n  - For users, except for owner, and authority is not 0:\n    - it calls an external function canCall of the external contract authority with the following argument list: caller, the address of this contract, and 0xffffffff00000000000000000000000000000000000000000000000000000000 and the first argument and 0xffffffff00000000000000000000000000000000000000000000000000000000, and gets the returned value as v0.\n    - When v0 is not 0, and the call or transfer succeeds:\n      - the state variable owner will be updated to the first argument.\n\nFor the callStoWithBtc function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(1,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument.\n\nFor the withdraw function, it has 2 arguments and the type of each argument is as follows: uint256, address.\n- When the second argument is not 0, and the first argument is not greater than the eth of caller:\n  - the eth of caller will be updated to (the eth of caller-the first argument).\n  - When the first argument is not greater than the totaleth of caller:\n    - the totaleth of caller will be updated to (the totaleth of caller-the first argument).\n    - it transfers ether valued the first argument to the second argument.\n\nFor the putStoWithBtc function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(5,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument.\n\nFor the putBtoWithStc function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(7,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument, and gets the returned value as v0.\n- When the filled from v0 to SHA3(7,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)) is not greater than the fifth argument, and (the first argument+the filled from v0 to SHA3(7,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract))) is not smaller than the filled from v0 to SHA3(7,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)), and the second argument MOD 0x15180 is 0, and the first argument is not greater than (the fifth argument-the filled from v0 to SHA3(7,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract))), and the sixth argument MOD 0xde0b6b3a7640000 is 0, and the first argument MOD 0x38d7ea4c68000 is 0, and the call or transfer succeeds, and the cancelled from v0 to SHA3(7,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)) is 0, and the fourth argument MOD 0x38d7ea4c68000 is 0, and the 7-th argument is greater than current time, and the second argument is greater than current time:\n  - the filled from v0 to SHA3(7,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)) will be updated to (the first argument+the filled from v0 to SHA3(7,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract))).\n  - When the first argument is 0:\n    - When 0 is not greater than the dai of caller:\n      - the dai of caller will be updated to the dai of caller.\n      - When 0 is not greater than the totaldai of caller:\n        - the totaldai of caller will be updated to the totaldai of caller.\n        - the putsowned from SHA3(the second argument,the sixth argument) to caller will be updated to (the first argument+the putsowned from SHA3(the second argument,the sixth argument) to caller).\n    - the dai of v0 will be updated to the dai of v0.\n    - When the totaldai of v0 is not smaller than the totaldai of v0:\n      - the totaldai of v0 will be updated to the totaldai of v0.\n      - When the first argument is not greater than the putsowned from SHA3(the second argument,the sixth argument) to v0:\n        - the putsowned from SHA3(the second argument,the sixth argument) to v0 will be updated to (the putsowned from SHA3(the second argument,the sixth argument) to v0-the first argument).\n        - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n          - the feerebates of caller will be updated to (the feerebates of caller-1).\n\nFor the withdrawFees function, it has one argument and its type is address.\n- When the first argument is not 0, and feeswithdrawn is not greater than feescollected:\n  - For the address of this contract:\n    - it calls an external function transfer of the external contract daitoken with the following argument list: the first argument, and (feescollected-feeswithdrawn). Afterthat, \n      - the state variable feeswithdrawn will be updated to feescollected.\n  - For users, except for the address of this contract:\n    - For owner:\n      - it calls an external function transfer of the external contract daitoken with the following argument list: the first argument, and (feescollected-feeswithdrawn). Afterthat, \n        - the state variable feeswithdrawn will be updated to feescollected.\n    - For users, except for owner, and v0 is not 0, and the call or transfer succeeds, and the external contract authority is not 0:\n      - it calls an external function transfer of the external contract daitoken with the following argument list: the first argument, and (feescollected-feeswithdrawn). Afterthat, \n        - the state variable feeswithdrawn will be updated to feescollected.\n- For users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n  - it calls an external function canCall of the external contract authority with the following argument list: caller, the address of this contract, and 0xffffffff00000000000000000000000000000000000000000000000000000000 and the first argument and 0xffffffff00000000000000000000000000000000000000000000000000000000, and gets the returned value as v0.\n\nFor the claimFeeRebate function, it has 5 arguments and the type of each argument is as follows: uint256, bytes32, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(the first argument,the second argument,(caller*0x1000000000000000000000000))), the fifth argument, the third argument, and the fourth argument, and gets the returned value as v0.\n- When the first argument is not greater than 1000, and the call or transfer succeeds:\n  - When the claimedfeerebate of the second argument is 0, and (the first argument+the feerebates of caller) is not smaller than the feerebates of caller:\n    - When v0 equals to the address of this contract:\n      - the feerebates of caller will be updated to (the first argument+the feerebates of caller).\n      - the claimedfeerebate of the second argument will be updated to 1.\n    - When v0 does not equal to the address of this contract:\n      - When owner equals to v0:\n        - the feerebates of caller will be updated to (the first argument+the feerebates of caller).\n        - the claimedfeerebate of the second argument will be updated to 1.\n      - When v1 is not 0, and owner does not equal to v0, and the call or transfer succeeds, and the external contract authority is not 0:\n        - the feerebates of caller will be updated to (the first argument+the feerebates of caller).\n        - the claimedfeerebate of the second argument will be updated to 1.\n  - When v0 does not equal to the address of this contract, and owner does not equal to v0, and the external contract authority is not 0:\n    - it calls an external function canCall of the external contract authority with the following argument list: v0, the address of this contract, and 0xffffffff00000000000000000000000000000000000000000000000000000000 and the first argument and 0xffffffff00000000000000000000000000000000000000000000000000000000, and gets the returned value as v1.\n\nFor the putStoWithBto function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(4,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument.\n\nFor the putBtcWithSto function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(6,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument.\n\nFor the callBtoWithStc function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(3,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument, and gets the returned value as v0.\n- When the call or transfer succeeds, and (the first argument+the filled from v0 to SHA3(3,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract))) is not smaller than the filled from v0 to SHA3(3,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)), and the second argument MOD 0x15180 is 0, and the filled from v0 to SHA3(3,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)) is not greater than the fifth argument, and the sixth argument MOD 0xde0b6b3a7640000 is 0, and the first argument MOD 0x38d7ea4c68000 is 0, and the cancelled from v0 to SHA3(3,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)) is 0, and the first argument is not greater than (the fifth argument-the filled from v0 to SHA3(3,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract))), and the fourth argument MOD 0x38d7ea4c68000 is 0, and the 7-th argument is greater than current time, and the second argument is greater than current time:\n  - the filled from v0 to SHA3(3,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)) will be updated to (the first argument+the filled from v0 to SHA3(3,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract))).\n  - When the first argument is 0:\n    - When 0 is not greater than the dai of caller:\n      - the dai of caller will be updated to the dai of caller.\n      - When 0 is not greater than the totaldai of caller:\n        - the totaldai of caller will be updated to the totaldai of caller.\n        - the callsowned from SHA3(the second argument,the sixth argument) to caller will be updated to (the first argument+the callsowned from SHA3(the second argument,the sixth argument) to caller).\n    - the dai of v0 will be updated to the dai of v0.\n    - When the totaldai of v0 is not smaller than the totaldai of v0:\n      - the totaldai of v0 will be updated to the totaldai of v0.\n      - When the first argument is not greater than the callsowned from SHA3(the second argument,the sixth argument) to v0:\n        - the callsowned from SHA3(the second argument,the sixth argument) to v0 will be updated to (the callsowned from SHA3(the second argument,the sixth argument) to v0-the first argument).\n        - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n          - the feerebates of caller will be updated to (the feerebates of caller-1).\n\nFor the depositDai function, it has one argument and its type is uint256.\n- it calls an external function transferFrom of the external contract daitoken with the following argument list: caller, the address of this contract, and the first argument, and gets the returned value as v0.\n- When (the first argument+the dai of caller) is not smaller than the dai of caller, and the call or transfer succeeds, and v0 is not 0:\n  - the dai of caller will be updated to (the first argument+the dai of caller).\n  - When (the first argument+the totaldai of caller) is not smaller than the totaldai of caller:\n    - the totaldai of caller will be updated to (the first argument+the totaldai of caller).\n\nFor the cancelOrder function, it has one argument and its type is bytes32.\n- the cancelled from caller to the first argument will be updated to 1.\n\nFor the putStcWithBtc function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(5,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument.\n\nFor the settlePut function, it has 3 arguments and the type of each argument is as follows: uint256, uint256, address.\n- When 0 is smaller than the putssold from SHA3(the first argument,the second argument) to the third argument, and the first argument is smaller than current time:\n  - For the third argument:\n    - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n      - When the putsassigned of SHA3(the first argument,the second argument) is not smaller than the putsexercised of SHA3(the first argument,the second argument):\n        - When the putssold from SHA3(the first argument,the second argument) to the third argument is 0:\n          - the feerebates of caller will be updated to (the feerebates of caller-1).\n          - the dai of the third argument will be updated to the dai of the third argument.\n        - When (((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)+the dai of the third argument) is not smaller than the dai of the third argument, and the putssold from SHA3(the first argument,the second argument) to the third argument is not 0:\n          - the dai of the third argument will be updated to (((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)+the dai of the third argument). Afterthat, \n            - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n      - the feerebates of caller will be updated to (the feerebates of caller-1).\n      - When the putsassigned of SHA3(the first argument,the second argument) is smaller than the putsexercised of SHA3(the first argument,the second argument), and the putssold from SHA3(the first argument,the second argument) to the third argument is 0:\n        - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument, and (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n          - the feerebates of caller will be updated to (the feerebates of caller-1).\n          - the dai of the third argument will be updated to the dai of the third argument.\n          - When the putssold from SHA3(the first argument,the second argument) to the third argument is not 0, and the putssold from SHA3(the first argument,the second argument) to the third argument is smaller than (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)), and the putssold from SHA3(the first argument,the second argument) to the third argument is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument, and ((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000) is not greater than the totaldai of the third argument, and the putsassigned of SHA3(the first argument,the second argument) is not greater than the putsexercised of SHA3(the first argument,the second argument), and (the putssold from SHA3(the first argument,the second argument) to the third argument+the putsassigned of SHA3(the first argument,the second argument)) is not smaller than the putsassigned of SHA3(the first argument,the second argument):\n            - the feerebates of caller will be updated to (the feerebates of caller-1).\n            - the dai of the third argument will be updated to the dai of the third argument.\n        - When ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the putsassigned of SHA3(the first argument,the second argument)) is not smaller than the putsassigned of SHA3(the first argument,the second argument), and ((the second argument*(the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)))/0xde0b6b3a7640000) is not greater than the totaldai of the third argument, and the putssold from SHA3(the first argument,the second argument) to the third argument is not smaller than (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)), and ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the totaleth of the third argument) is not smaller than the totaleth of the third argument, and ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the eth of the third argument) is not smaller than the eth of the third argument, and (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)) is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument, and (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)) is not 0, and the putsassigned of SHA3(the first argument,the second argument) is not greater than the putsexercised of SHA3(the first argument,the second argument):\n          - the feerebates of caller will be updated to (the feerebates of caller-1).\n          - the dai of the third argument will be updated to the dai of the third argument.\n    - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n    - When the putsassigned of SHA3(the first argument,the second argument) is not smaller than the putsexercised of SHA3(the first argument,the second argument):\n      - When the putssold from SHA3(the first argument,the second argument) to the third argument is 0:\n        - When settlementfee is not greater than the dai of the third argument, and the feerebates of caller is not greater than 0:\n          - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n          - When settlementfee is not greater than the totaldai of the third argument:\n            - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n            - the state variable feescollected will be updated to (settlementfee+feescollected).\n        - When the dai of the third argument is not smaller than the dai of the third argument:\n          - the dai of the third argument will be updated to the dai of the third argument.\n          - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n      - When the putssold from SHA3(the first argument,the second argument) to the third argument is not 0, and the feerebates of caller is not greater than 0, and settlementfee is not greater than the totaldai of the third argument, and (settlementfee+feescollected) is not smaller than feescollected, and (((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)+the dai of the third argument) is not smaller than the dai of the third argument, and settlementfee is not greater than the dai of the third argument:\n        - the dai of the third argument will be updated to (((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)+the dai of the third argument). Afterthat, \n          - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n    - When settlementfee is not greater than the dai of the third argument, and the feerebates of caller is not greater than 0:\n      - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n      - When settlementfee is not greater than the totaldai of the third argument:\n        - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n        - When (settlementfee+feescollected) is not smaller than feescollected:\n          - the state variable feescollected will be updated to (settlementfee+feescollected).\n      - When the putsassigned of SHA3(the first argument,the second argument) is smaller than the putsexercised of SHA3(the first argument,the second argument), and the putssold from SHA3(the first argument,the second argument) to the third argument is 0, and (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument, and (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n        - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n        - When settlementfee is not greater than the totaldai of the third argument:\n          - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n          - the state variable feescollected will be updated to (settlementfee+feescollected).\n    - When the putsassigned of SHA3(the first argument,the second argument) is smaller than the putsexercised of SHA3(the first argument,the second argument):\n      - When the putsassigned of SHA3(the first argument,the second argument) is not greater than the putsexercised of SHA3(the first argument,the second argument):\n        - When the putssold from SHA3(the first argument,the second argument) to the third argument is smaller than (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)):\n          - When 0 is not greater than the totaldai of the third argument, and the putssold from SHA3(the first argument,the second argument) to the third argument is 0:\n            - the totaldai of the third argument will be updated to the totaldai of the third argument.\n            - When the putssold from SHA3(the first argument,the second argument) to the third argument is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument:\n              - the putsassigned of SHA3(the first argument,the second argument) will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the putsassigned of SHA3(the first argument,the second argument)). Afterthat, \n                - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument-the putssold from SHA3(the first argument,the second argument) to the third argument).\n          - When ((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000) is not greater than the totaldai of the third argument, and the putssold from SHA3(the first argument,the second argument) to the third argument is not 0:\n            - the totaldai of the third argument will be updated to (the totaldai of the third argument-((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)).\n            - When the putssold from SHA3(the first argument,the second argument) to the third argument is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument:\n              - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument-the putssold from SHA3(the first argument,the second argument) to the third argument).\n              - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the putsassigned of SHA3(the first argument,the second argument)) is not smaller than the putsassigned of SHA3(the first argument,the second argument):\n                - the putsassigned of SHA3(the first argument,the second argument) will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the putsassigned of SHA3(the first argument,the second argument)).\n                - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                  - the eth of the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument).\n                  - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n                    - the totaleth of the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument). Afterthat, \n                      - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n        - When ((the second argument*(the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)))/0xde0b6b3a7640000) is not greater than the totaldai of the third argument, and (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)) is not 0, and the putssold from SHA3(the first argument,the second argument) to the third argument is not smaller than (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)):\n          - the totaldai of the third argument will be updated to (the totaldai of the third argument-((the second argument*(the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)))/0xde0b6b3a7640000)).\n          - When (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)) is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument:\n            - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument-(the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))).\n            - When ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the putsassigned of SHA3(the first argument,the second argument)) is not smaller than the putsassigned of SHA3(the first argument,the second argument):\n              - the putsassigned of SHA3(the first argument,the second argument) will be updated to ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the putsassigned of SHA3(the first argument,the second argument)).\n              - When ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the eth of the third argument) is not smaller than the eth of the third argument:\n                - the eth of the third argument will be updated to ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the eth of the third argument).\n                - When ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n                  - the totaleth of the third argument will be updated to ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the totaleth of the third argument).\n                  - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n      - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n        - the eth of the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument).\n        - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n          - the totaleth of the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument). Afterthat, \n            - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n          - When the putssold from SHA3(the first argument,the second argument) to the third argument is 0, and the dai of the third argument is not smaller than the dai of the third argument:\n            - the dai of the third argument will be updated to the dai of the third argument.\n            - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n  - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n    - When the putsassigned of SHA3(the first argument,the second argument) is not smaller than the putsexercised of SHA3(the first argument,the second argument):\n      - When the putssold from SHA3(the first argument,the second argument) to the third argument is 0:\n        - the feerebates of caller will be updated to (the feerebates of caller-1).\n        - the dai of the third argument will be updated to the dai of the third argument.\n        - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n          - the feerebates of caller will be updated to (the feerebates of caller-1).\n          - the dai of the third argument will be updated to the dai of the third argument.\n      - When (((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)+the dai of the third argument) is not smaller than the dai of the third argument, and the putssold from SHA3(the first argument,the second argument) to the third argument is not 0:\n        - the dai of the third argument will be updated to (((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)+the dai of the third argument). Afterthat, \n          - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n        - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n          - the dai of the third argument will be updated to (((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)+the dai of the third argument). Afterthat, \n            - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n    - the feerebates of caller will be updated to (the feerebates of caller-1).\n    - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n      - the feerebates of caller will be updated to (the feerebates of caller-1).\n      - When the putsassigned of SHA3(the first argument,the second argument) is smaller than the putsexercised of SHA3(the first argument,the second argument), and the putssold from SHA3(the first argument,the second argument) to the third argument is 0:\n        - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument, and (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n          - the feerebates of caller will be updated to (the feerebates of caller-1).\n          - the dai of the third argument will be updated to the dai of the third argument.\n          - When the putssold from SHA3(the first argument,the second argument) to the third argument is not 0, and the putssold from SHA3(the first argument,the second argument) to the third argument is smaller than (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)), and the putssold from SHA3(the first argument,the second argument) to the third argument is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument, and ((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000) is not greater than the totaldai of the third argument, and the putsassigned of SHA3(the first argument,the second argument) is not greater than the putsexercised of SHA3(the first argument,the second argument), and (the putssold from SHA3(the first argument,the second argument) to the third argument+the putsassigned of SHA3(the first argument,the second argument)) is not smaller than the putsassigned of SHA3(the first argument,the second argument):\n            - the feerebates of caller will be updated to (the feerebates of caller-1).\n            - the dai of the third argument will be updated to the dai of the third argument.\n        - When ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the putsassigned of SHA3(the first argument,the second argument)) is not smaller than the putsassigned of SHA3(the first argument,the second argument), and ((the second argument*(the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)))/0xde0b6b3a7640000) is not greater than the totaldai of the third argument, and the putssold from SHA3(the first argument,the second argument) to the third argument is not smaller than (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)), and ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the totaleth of the third argument) is not smaller than the totaleth of the third argument, and ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the eth of the third argument) is not smaller than the eth of the third argument, and (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)) is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument, and (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)) is not 0, and the putsassigned of SHA3(the first argument,the second argument) is not greater than the putsexercised of SHA3(the first argument,the second argument):\n          - the feerebates of caller will be updated to (the feerebates of caller-1).\n          - the dai of the third argument will be updated to the dai of the third argument.\n    - When the putsassigned of SHA3(the first argument,the second argument) is smaller than the putsexercised of SHA3(the first argument,the second argument), and the putssold from SHA3(the first argument,the second argument) to the third argument is 0:\n      - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument, and (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n        - the feerebates of caller will be updated to (the feerebates of caller-1).\n        - the dai of the third argument will be updated to the dai of the third argument.\n        - When the putssold from SHA3(the first argument,the second argument) to the third argument is not 0, and the putssold from SHA3(the first argument,the second argument) to the third argument is smaller than (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)), and the putssold from SHA3(the first argument,the second argument) to the third argument is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument, and ((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000) is not greater than the totaldai of the third argument, and the putsassigned of SHA3(the first argument,the second argument) is not greater than the putsexercised of SHA3(the first argument,the second argument), and (the putssold from SHA3(the first argument,the second argument) to the third argument+the putsassigned of SHA3(the first argument,the second argument)) is not smaller than the putsassigned of SHA3(the first argument,the second argument):\n          - the feerebates of caller will be updated to (the feerebates of caller-1).\n          - the dai of the third argument will be updated to the dai of the third argument.\n      - When ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the putsassigned of SHA3(the first argument,the second argument)) is not smaller than the putsassigned of SHA3(the first argument,the second argument), and ((the second argument*(the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)))/0xde0b6b3a7640000) is not greater than the totaldai of the third argument, and the putssold from SHA3(the first argument,the second argument) to the third argument is not smaller than (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)), and ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the totaleth of the third argument) is not smaller than the totaleth of the third argument, and ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the eth of the third argument) is not smaller than the eth of the third argument, and (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)) is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument, and (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)) is not 0, and the putsassigned of SHA3(the first argument,the second argument) is not greater than the putsexercised of SHA3(the first argument,the second argument):\n        - the feerebates of caller will be updated to (the feerebates of caller-1).\n        - the dai of the third argument will be updated to the dai of the third argument.\n  - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n  - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n    - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n    - When the putsassigned of SHA3(the first argument,the second argument) is not smaller than the putsexercised of SHA3(the first argument,the second argument):\n      - When the putssold from SHA3(the first argument,the second argument) to the third argument is 0:\n        - When settlementfee is not greater than the dai of the third argument, and the feerebates of caller is not greater than 0:\n          - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n          - When settlementfee is not greater than the totaldai of the third argument:\n            - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n            - the state variable feescollected will be updated to (settlementfee+feescollected).\n        - When the dai of the third argument is not smaller than the dai of the third argument:\n          - the dai of the third argument will be updated to the dai of the third argument.\n          - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n      - When the putssold from SHA3(the first argument,the second argument) to the third argument is not 0, and the feerebates of caller is not greater than 0, and settlementfee is not greater than the totaldai of the third argument, and (settlementfee+feescollected) is not smaller than feescollected, and (((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)+the dai of the third argument) is not smaller than the dai of the third argument, and settlementfee is not greater than the dai of the third argument:\n        - the dai of the third argument will be updated to (((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)+the dai of the third argument). Afterthat, \n          - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n    - When settlementfee is not greater than the dai of the third argument, and the feerebates of caller is not greater than 0:\n      - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n      - When settlementfee is not greater than the totaldai of the third argument:\n        - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n        - When (settlementfee+feescollected) is not smaller than feescollected:\n          - the state variable feescollected will be updated to (settlementfee+feescollected).\n      - When the putsassigned of SHA3(the first argument,the second argument) is smaller than the putsexercised of SHA3(the first argument,the second argument), and the putssold from SHA3(the first argument,the second argument) to the third argument is 0, and (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument, and (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n        - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n        - When settlementfee is not greater than the totaldai of the third argument:\n          - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n          - the state variable feescollected will be updated to (settlementfee+feescollected).\n    - When the putsassigned of SHA3(the first argument,the second argument) is smaller than the putsexercised of SHA3(the first argument,the second argument):\n      - When the putsassigned of SHA3(the first argument,the second argument) is not greater than the putsexercised of SHA3(the first argument,the second argument):\n        - When the putssold from SHA3(the first argument,the second argument) to the third argument is smaller than (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)):\n          - When 0 is not greater than the totaldai of the third argument, and the putssold from SHA3(the first argument,the second argument) to the third argument is 0:\n            - the totaldai of the third argument will be updated to the totaldai of the third argument.\n            - When the putssold from SHA3(the first argument,the second argument) to the third argument is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument:\n              - the putsassigned of SHA3(the first argument,the second argument) will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the putsassigned of SHA3(the first argument,the second argument)). Afterthat, \n                - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument-the putssold from SHA3(the first argument,the second argument) to the third argument).\n          - When ((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000) is not greater than the totaldai of the third argument, and the putssold from SHA3(the first argument,the second argument) to the third argument is not 0:\n            - the totaldai of the third argument will be updated to (the totaldai of the third argument-((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)).\n            - When the putssold from SHA3(the first argument,the second argument) to the third argument is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument:\n              - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument-the putssold from SHA3(the first argument,the second argument) to the third argument).\n              - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the putsassigned of SHA3(the first argument,the second argument)) is not smaller than the putsassigned of SHA3(the first argument,the second argument):\n                - the putsassigned of SHA3(the first argument,the second argument) will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the putsassigned of SHA3(the first argument,the second argument)).\n                - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                  - the eth of the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument).\n                  - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n                    - the totaleth of the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument). Afterthat, \n                      - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n        - When ((the second argument*(the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)))/0xde0b6b3a7640000) is not greater than the totaldai of the third argument, and (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)) is not 0, and the putssold from SHA3(the first argument,the second argument) to the third argument is not smaller than (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)):\n          - the totaldai of the third argument will be updated to (the totaldai of the third argument-((the second argument*(the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)))/0xde0b6b3a7640000)).\n          - When (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)) is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument:\n            - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument-(the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))).\n            - When ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the putsassigned of SHA3(the first argument,the second argument)) is not smaller than the putsassigned of SHA3(the first argument,the second argument):\n              - the putsassigned of SHA3(the first argument,the second argument) will be updated to ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the putsassigned of SHA3(the first argument,the second argument)).\n              - When ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the eth of the third argument) is not smaller than the eth of the third argument:\n                - the eth of the third argument will be updated to ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the eth of the third argument).\n                - When ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n                  - the totaleth of the third argument will be updated to ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the totaleth of the third argument).\n                  - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n      - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n        - the eth of the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument).\n        - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n          - the totaleth of the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument). Afterthat, \n            - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n          - When the putssold from SHA3(the first argument,the second argument) to the third argument is 0, and the dai of the third argument is not smaller than the dai of the third argument:\n            - the dai of the third argument will be updated to the dai of the third argument.\n            - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n  - When the putsassigned of SHA3(the first argument,the second argument) is not smaller than the putsexercised of SHA3(the first argument,the second argument):\n    - When the putssold from SHA3(the first argument,the second argument) to the third argument is 0:\n      - When settlementfee is not greater than the dai of the third argument, and the feerebates of caller is not greater than 0:\n        - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n        - When settlementfee is not greater than the totaldai of the third argument:\n          - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n          - the state variable feescollected will be updated to (settlementfee+feescollected).\n      - When the dai of the third argument is not smaller than the dai of the third argument:\n        - the dai of the third argument will be updated to the dai of the third argument.\n        - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n    - When the putssold from SHA3(the first argument,the second argument) to the third argument is not 0, and the feerebates of caller is not greater than 0, and settlementfee is not greater than the totaldai of the third argument, and (settlementfee+feescollected) is not smaller than feescollected, and (((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)+the dai of the third argument) is not smaller than the dai of the third argument, and settlementfee is not greater than the dai of the third argument:\n      - the dai of the third argument will be updated to (((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)+the dai of the third argument). Afterthat, \n        - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n  - When settlementfee is not greater than the dai of the third argument, and the feerebates of caller is not greater than 0:\n    - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n    - When settlementfee is not greater than the totaldai of the third argument:\n      - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n      - When (settlementfee+feescollected) is not smaller than feescollected:\n        - the state variable feescollected will be updated to (settlementfee+feescollected).\n    - When the putsassigned of SHA3(the first argument,the second argument) is smaller than the putsexercised of SHA3(the first argument,the second argument), and the putssold from SHA3(the first argument,the second argument) to the third argument is 0, and (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument, and (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n      - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n      - When settlementfee is not greater than the totaldai of the third argument:\n        - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n        - the state variable feescollected will be updated to (settlementfee+feescollected).\n  - When the putsassigned of SHA3(the first argument,the second argument) is smaller than the putsexercised of SHA3(the first argument,the second argument):\n    - When the putsassigned of SHA3(the first argument,the second argument) is not greater than the putsexercised of SHA3(the first argument,the second argument):\n      - When the putssold from SHA3(the first argument,the second argument) to the third argument is smaller than (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)):\n        - When 0 is not greater than the totaldai of the third argument, and the putssold from SHA3(the first argument,the second argument) to the third argument is 0:\n          - the totaldai of the third argument will be updated to the totaldai of the third argument.\n          - When the putssold from SHA3(the first argument,the second argument) to the third argument is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument:\n            - the putsassigned of SHA3(the first argument,the second argument) will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the putsassigned of SHA3(the first argument,the second argument)). Afterthat, \n              - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument-the putssold from SHA3(the first argument,the second argument) to the third argument).\n        - When ((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000) is not greater than the totaldai of the third argument, and the putssold from SHA3(the first argument,the second argument) to the third argument is not 0:\n          - the totaldai of the third argument will be updated to (the totaldai of the third argument-((the second argument*the putssold from SHA3(the first argument,the second argument) to the third argument)/0xde0b6b3a7640000)).\n          - When the putssold from SHA3(the first argument,the second argument) to the third argument is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument:\n            - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument-the putssold from SHA3(the first argument,the second argument) to the third argument).\n            - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the putsassigned of SHA3(the first argument,the second argument)) is not smaller than the putsassigned of SHA3(the first argument,the second argument):\n              - the putsassigned of SHA3(the first argument,the second argument) will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the putsassigned of SHA3(the first argument,the second argument)).\n              - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                - the eth of the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument).\n                - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n                  - the totaleth of the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument). Afterthat, \n                    - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n      - When ((the second argument*(the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)))/0xde0b6b3a7640000) is not greater than the totaldai of the third argument, and (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)) is not 0, and the putssold from SHA3(the first argument,the second argument) to the third argument is not smaller than (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)):\n        - the totaldai of the third argument will be updated to (the totaldai of the third argument-((the second argument*(the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)))/0xde0b6b3a7640000)).\n        - When (the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument)) is not greater than the putssold from SHA3(the first argument,the second argument) to the third argument:\n          - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument-(the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))).\n          - When ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the putsassigned of SHA3(the first argument,the second argument)) is not smaller than the putsassigned of SHA3(the first argument,the second argument):\n            - the putsassigned of SHA3(the first argument,the second argument) will be updated to ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the putsassigned of SHA3(the first argument,the second argument)).\n            - When ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the eth of the third argument) is not smaller than the eth of the third argument:\n              - the eth of the third argument will be updated to ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the eth of the third argument).\n              - When ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n                - the totaleth of the third argument will be updated to ((the putsexercised of SHA3(the first argument,the second argument)-the putsassigned of SHA3(the first argument,the second argument))+the totaleth of the third argument).\n                - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n    - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n      - the eth of the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument).\n      - When (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument) is not smaller than the totaleth of the third argument:\n        - the totaleth of the third argument will be updated to (the putssold from SHA3(the first argument,the second argument) to the third argument+the totaleth of the third argument). Afterthat, \n          - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n        - When the putssold from SHA3(the first argument,the second argument) to the third argument is 0, and the dai of the third argument is not smaller than the dai of the third argument:\n          - the dai of the third argument will be updated to the dai of the third argument.\n          - the putssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n- For users, except for owner, and the external contract authority is not 0, and for users, except for the third argument, and for users, except for the address of this contract:\n  - it calls an external function canCall of the external contract authority with the following argument list: caller, the address of this contract, and 0xffffffff00000000000000000000000000000000000000000000000000000000 and the first argument and 0xffffffff00000000000000000000000000000000000000000000000000000000, and gets the returned value as v0.\n\nFor the callBtoWithSto function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(2,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument.\n\nFor the setAuthority function, it has one argument and its type is address.\n- For the address of this contract:\n  - the external contract authority will be updated to the first argument.\n- For users, except for the address of this contract:\n  - For owner:\n    - the external contract authority will be updated to the first argument.\n  - For users, except for owner, and the external contract authority is not 0:\n    - it calls an external function canCall of the external contract authority with the following argument list: caller, the address of this contract, and 0xffffffff00000000000000000000000000000000000000000000000000000000 and the first argument and 0xffffffff00000000000000000000000000000000000000000000000000000000, and gets the returned value as v0.\n    - When v0 is not 0, and the call or transfer succeeds:\n      - the external contract authority will be updated to the first argument.\n\nFor the callBtcWithSto function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(2,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument.\n\nFor the depositDaiFor function, it has 2 arguments and the type of each argument is as follows: uint256, address.\n- When the second argument is not 0:\n  - it calls an external function transferFrom of the external contract daitoken with the following argument list: caller, the address of this contract, and the first argument, and gets the returned value as v0.\n  - When (the first argument+the dai of the second argument) is not smaller than the dai of the second argument, and the call or transfer succeeds, and v0 is not 0:\n    - the dai of the second argument will be updated to (the first argument+the dai of the second argument).\n    - When (the first argument+the totaldai of the second argument) is not smaller than the totaldai of the second argument:\n      - the totaldai of the second argument will be updated to (the first argument+the totaldai of the second argument).\n\nFor the callStcWithBto function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(0,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument, and gets the returned value as v0.\n- When the first argument is not greater than (the fifth argument-the filled from v0 to SHA3(0,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract))), and the cancelled from v0 to SHA3(0,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)) is 0, and (the first argument+the filled from v0 to SHA3(0,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract))) is not smaller than the filled from v0 to SHA3(0,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)), and the second argument MOD 0x15180 is 0, and the call or transfer succeeds, and the first argument MOD 0x38d7ea4c68000 is 0, and the sixth argument MOD 0xde0b6b3a7640000 is 0, and the filled from v0 to SHA3(0,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)) is not greater than the fifth argument, and the fourth argument MOD 0x38d7ea4c68000 is 0, and the 7-th argument is greater than current time, and the second argument is greater than current time:\n  - the filled from v0 to SHA3(0,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)) will be updated to (the first argument+the filled from v0 to SHA3(0,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract))).\n  - When the first argument is 0:\n    - the dai of caller will be updated to the dai of caller.\n    - When the totaldai of caller is not smaller than the totaldai of caller:\n      - the totaldai of caller will be updated to the totaldai of caller.\n      - When the first argument is not greater than the callsowned from SHA3(the second argument,the sixth argument) to caller:\n        - the callsowned from SHA3(the second argument,the sixth argument) to caller will be updated to (the callsowned from SHA3(the second argument,the sixth argument) to caller-the first argument).\n        - When 0 is not greater than the dai of v0:\n          - the dai of v0 will be updated to the dai of v0.\n          - When 0 is not greater than the totaldai of v0:\n            - the totaldai of v0 will be updated to the totaldai of v0.\n            - the callsowned from SHA3(the second argument,the sixth argument) to v0 will be updated to (the first argument+the callsowned from SHA3(the second argument,the sixth argument) to v0).\n        - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n          - the feerebates of caller will be updated to (the feerebates of caller-1).\n\nFor the callStoWithBto function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(0,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument.\n\nFor the putBtcWithStc function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(7,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument.\n\nFor the callStcWithBtc function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(1,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument.\n\nFor the putBtoWithSto function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(6,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument.\n\nFor the payable deposit function.\n- When (the ether just received (i.e., msg.value)+the eth of caller) is not smaller than the eth of caller:\n  - the eth of caller will be updated to (the ether just received (i.e., msg.value)+the eth of caller).\n  - When (the ether just received (i.e., msg.value)+the totaleth of caller) is not smaller than the totaleth of caller:\n    - the totaleth of caller will be updated to (the ether just received (i.e., msg.value)+the totaleth of caller).\n\nFor the _getMaker function, it has 4 arguments and the type of each argument is as follows: bytes32, uint8, bytes32, bytes32.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,the first argument), the second argument, the third argument, and the fourth argument.\n\nFor the settleCall function, it has 3 arguments and the type of each argument is as follows: uint256, uint256, address.\n- When 0 is smaller than the callssold from SHA3(the first argument,the second argument) to the third argument, and the first argument is smaller than current time:\n  - When the callsassigned of SHA3(the first argument,the second argument) is not smaller than the callsexercised of SHA3(the first argument,the second argument):\n    - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n      - For the third argument:\n        - the feerebates of caller will be updated to (the feerebates of caller-1).\n        - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n          - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n            - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n      - the feerebates of caller will be updated to (the feerebates of caller-1).\n      - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n        - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n          - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n        - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n          - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n            - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n      - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n        - the feerebates of caller will be updated to (the feerebates of caller-1).\n    - When settlementfee is not greater than the dai of the third argument, and the feerebates of caller is not greater than 0:\n      - For the third argument:\n        - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n        - When settlementfee is not greater than the totaldai of the third argument:\n          - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n          - When (settlementfee+feescollected) is not smaller than feescollected:\n            - the state variable feescollected will be updated to (settlementfee+feescollected).\n            - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n              - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n      - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n      - When settlementfee is not greater than the totaldai of the third argument:\n        - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n        - When (settlementfee+feescollected) is not smaller than feescollected:\n          - the state variable feescollected will be updated to (settlementfee+feescollected).\n          - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n            - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n              - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n            - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n              - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n          - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n            - the state variable feescollected will be updated to (settlementfee+feescollected).\n        - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n          - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n      - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n        - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n  - When the callsassigned of SHA3(the first argument,the second argument) is not greater than the callsexercised of SHA3(the first argument,the second argument), and the callsassigned of SHA3(the first argument,the second argument) is smaller than the callsexercised of SHA3(the first argument,the second argument):\n    - For the third argument:\n      - When (the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument)) is smaller than the callssold from SHA3(the first argument,the second argument) to the third argument, and (the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument)) is not greater than the totaleth of the third argument:\n        - the totaleth of the third argument will be updated to (the totaleth of the third argument-(the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))).\n        - When ((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))+the callsassigned of SHA3(the first argument,the second argument)) is not smaller than the callsassigned of SHA3(the first argument,the second argument):\n          - the callsassigned of SHA3(the first argument,the second argument) will be updated to ((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))+the callsassigned of SHA3(the first argument,the second argument)).\n          - When (the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument)) is not greater than the callssold from SHA3(the first argument,the second argument) to the third argument:\n            - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument-(the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))).\n            - When the second argument is 0:\n              - the dai of the third argument will be updated to the dai of the third argument.\n              - When the totaldai of the third argument is not smaller than the totaldai of the third argument:\n                - the totaldai of the third argument will be updated to the totaldai of the third argument.\n                - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n                  - the feerebates of caller will be updated to (the feerebates of caller-1).\n                  - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                    - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                      - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n                - When the feerebates of caller is not greater than 0, and settlementfee is not greater than the dai of the third argument:\n                  - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n                  - When settlementfee is not greater than the totaldai of the third argument:\n                    - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n                    - When (settlementfee+feescollected) is not smaller than feescollected:\n                      - the state variable feescollected will be updated to (settlementfee+feescollected).\n                      - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                        - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                          - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n            - When the second argument is not 0, and ((((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))*the second argument)/0xde0b6b3a7640000)+the dai of the third argument) is not smaller than the dai of the third argument:\n              - the dai of the third argument will be updated to ((((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))*the second argument)/0xde0b6b3a7640000)+the dai of the third argument).\n              - When ((((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))*the second argument)/0xde0b6b3a7640000)+the totaldai of the third argument) is not smaller than the totaldai of the third argument:\n                - the totaldai of the third argument will be updated to ((((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))*the second argument)/0xde0b6b3a7640000)+the totaldai of the third argument).\n                - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n                  - the feerebates of caller will be updated to (the feerebates of caller-1).\n                  - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                    - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                      - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n      - When the callssold from SHA3(the first argument,the second argument) to the third argument is not greater than the totaleth of the third argument, and (the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument)) is not smaller than the callssold from SHA3(the first argument,the second argument) to the third argument:\n        - the totaleth of the third argument will be updated to (the totaleth of the third argument-the callssold from SHA3(the first argument,the second argument) to the third argument).\n        - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the callsassigned of SHA3(the first argument,the second argument)) is not smaller than the callsassigned of SHA3(the first argument,the second argument):\n          - the callsassigned of SHA3(the first argument,the second argument) will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the callsassigned of SHA3(the first argument,the second argument)).\n          - When the callssold from SHA3(the first argument,the second argument) to the third argument is not greater than the callssold from SHA3(the first argument,the second argument) to the third argument:\n            - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument-the callssold from SHA3(the first argument,the second argument) to the third argument).\n            - When the second argument is 0:\n              - the dai of the third argument will be updated to the dai of the third argument.\n              - When the totaldai of the third argument is not smaller than the totaldai of the third argument:\n                - the totaldai of the third argument will be updated to the totaldai of the third argument.\n                - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n                  - the feerebates of caller will be updated to (the feerebates of caller-1).\n                  - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                    - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                      - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n                - When the feerebates of caller is not greater than 0, and settlementfee is not greater than the dai of the third argument:\n                  - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n                  - When settlementfee is not greater than the totaldai of the third argument:\n                    - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n                    - When (settlementfee+feescollected) is not smaller than feescollected:\n                      - the state variable feescollected will be updated to (settlementfee+feescollected).\n                      - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                        - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                          - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n            - When the second argument is not 0, and (((the callssold from SHA3(the first argument,the second argument) to the third argument*the second argument)/0xde0b6b3a7640000)+the dai of the third argument) is not smaller than the dai of the third argument:\n              - the dai of the third argument will be updated to (((the callssold from SHA3(the first argument,the second argument) to the third argument*the second argument)/0xde0b6b3a7640000)+the dai of the third argument).\n              - When (((the callssold from SHA3(the first argument,the second argument) to the third argument*the second argument)/0xde0b6b3a7640000)+the totaldai of the third argument) is not smaller than the totaldai of the third argument:\n                - the totaldai of the third argument will be updated to (((the callssold from SHA3(the first argument,the second argument) to the third argument*the second argument)/0xde0b6b3a7640000)+the totaldai of the third argument).\n                - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n                  - the feerebates of caller will be updated to (the feerebates of caller-1).\n                  - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                    - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                      - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n    - When (the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument)) is smaller than the callssold from SHA3(the first argument,the second argument) to the third argument, and (the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument)) is not greater than the totaleth of the third argument:\n      - the totaleth of the third argument will be updated to (the totaleth of the third argument-(the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))).\n      - When ((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))+the callsassigned of SHA3(the first argument,the second argument)) is not smaller than the callsassigned of SHA3(the first argument,the second argument):\n        - the callsassigned of SHA3(the first argument,the second argument) will be updated to ((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))+the callsassigned of SHA3(the first argument,the second argument)).\n        - When (the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument)) is not greater than the callssold from SHA3(the first argument,the second argument) to the third argument:\n          - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument-(the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))).\n          - When the second argument is 0:\n            - the dai of the third argument will be updated to the dai of the third argument.\n            - When the totaldai of the third argument is not smaller than the totaldai of the third argument:\n              - the totaldai of the third argument will be updated to the totaldai of the third argument.\n              - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n                - the feerebates of caller will be updated to (the feerebates of caller-1).\n                - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                  - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                    - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n                  - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n                    - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                      - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n                - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n                  - the feerebates of caller will be updated to (the feerebates of caller-1).\n              - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n                - the totaldai of the third argument will be updated to the totaldai of the third argument.\n                - When the feerebates of caller is not greater than 0, and settlementfee is not greater than the dai of the third argument:\n                  - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n                  - When settlementfee is not greater than the totaldai of the third argument:\n                    - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n                    - When (settlementfee+feescollected) is not smaller than feescollected:\n                      - the state variable feescollected will be updated to (settlementfee+feescollected).\n                      - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                        - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                          - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n              - When the feerebates of caller is not greater than 0, and settlementfee is not greater than the dai of the third argument:\n                - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n                - When settlementfee is not greater than the totaldai of the third argument:\n                  - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n                  - When (settlementfee+feescollected) is not smaller than feescollected:\n                    - the state variable feescollected will be updated to (settlementfee+feescollected).\n                    - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                      - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                        - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n            - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n              - the dai of the third argument will be updated to the dai of the third argument.\n          - When the second argument is not 0, and ((((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))*the second argument)/0xde0b6b3a7640000)+the dai of the third argument) is not smaller than the dai of the third argument:\n            - the dai of the third argument will be updated to ((((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))*the second argument)/0xde0b6b3a7640000)+the dai of the third argument).\n            - When ((((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))*the second argument)/0xde0b6b3a7640000)+the totaldai of the third argument) is not smaller than the totaldai of the third argument:\n              - the totaldai of the third argument will be updated to ((((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))*the second argument)/0xde0b6b3a7640000)+the totaldai of the third argument).\n              - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n                - the feerebates of caller will be updated to (the feerebates of caller-1).\n                - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                  - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                    - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n                  - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n                    - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                      - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n                - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n                  - the feerebates of caller will be updated to (the feerebates of caller-1).\n              - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n                - the totaldai of the third argument will be updated to ((((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))*the second argument)/0xde0b6b3a7640000)+the totaldai of the third argument).\n            - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n              - the dai of the third argument will be updated to ((((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))*the second argument)/0xde0b6b3a7640000)+the dai of the third argument).\n          - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n            - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument-(the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))).\n        - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n          - the callsassigned of SHA3(the first argument,the second argument) will be updated to ((the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))+the callsassigned of SHA3(the first argument,the second argument)).\n      - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n        - the totaleth of the third argument will be updated to (the totaleth of the third argument-(the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument))).\n    - When the callssold from SHA3(the first argument,the second argument) to the third argument is not greater than the totaleth of the third argument, and (the callsexercised of SHA3(the first argument,the second argument)-the callsassigned of SHA3(the first argument,the second argument)) is not smaller than the callssold from SHA3(the first argument,the second argument) to the third argument:\n      - the totaleth of the third argument will be updated to (the totaleth of the third argument-the callssold from SHA3(the first argument,the second argument) to the third argument).\n      - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the callsassigned of SHA3(the first argument,the second argument)) is not smaller than the callsassigned of SHA3(the first argument,the second argument):\n        - the callsassigned of SHA3(the first argument,the second argument) will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the callsassigned of SHA3(the first argument,the second argument)).\n        - When the callssold from SHA3(the first argument,the second argument) to the third argument is not greater than the callssold from SHA3(the first argument,the second argument) to the third argument:\n          - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument-the callssold from SHA3(the first argument,the second argument) to the third argument).\n          - When the second argument is 0:\n            - the dai of the third argument will be updated to the dai of the third argument.\n            - When the totaldai of the third argument is not smaller than the totaldai of the third argument:\n              - the totaldai of the third argument will be updated to the totaldai of the third argument.\n              - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n                - the feerebates of caller will be updated to (the feerebates of caller-1).\n                - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                  - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                    - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n                  - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n                    - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                      - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n                - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n                  - the feerebates of caller will be updated to (the feerebates of caller-1).\n              - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n                - the totaldai of the third argument will be updated to the totaldai of the third argument.\n                - When the feerebates of caller is not greater than 0, and settlementfee is not greater than the dai of the third argument:\n                  - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n                  - When settlementfee is not greater than the totaldai of the third argument:\n                    - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n                    - When (settlementfee+feescollected) is not smaller than feescollected:\n                      - the state variable feescollected will be updated to (settlementfee+feescollected).\n                      - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                        - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                          - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n              - When the feerebates of caller is not greater than 0, and settlementfee is not greater than the dai of the third argument:\n                - the dai of the third argument will be updated to (the dai of the third argument-settlementfee).\n                - When settlementfee is not greater than the totaldai of the third argument:\n                  - the totaldai of the third argument will be updated to (the totaldai of the third argument-settlementfee).\n                  - When (settlementfee+feescollected) is not smaller than feescollected:\n                    - the state variable feescollected will be updated to (settlementfee+feescollected).\n                    - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                      - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                        - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n            - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n              - the dai of the third argument will be updated to the dai of the third argument.\n          - When the second argument is not 0, and (((the callssold from SHA3(the first argument,the second argument) to the third argument*the second argument)/0xde0b6b3a7640000)+the dai of the third argument) is not smaller than the dai of the third argument:\n            - the dai of the third argument will be updated to (((the callssold from SHA3(the first argument,the second argument) to the third argument*the second argument)/0xde0b6b3a7640000)+the dai of the third argument).\n            - When (((the callssold from SHA3(the first argument,the second argument) to the third argument*the second argument)/0xde0b6b3a7640000)+the totaldai of the third argument) is not smaller than the totaldai of the third argument:\n              - the totaldai of the third argument will be updated to (((the callssold from SHA3(the first argument,the second argument) to the third argument*the second argument)/0xde0b6b3a7640000)+the totaldai of the third argument).\n              - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n                - the feerebates of caller will be updated to (the feerebates of caller-1).\n                - When (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument) is not smaller than the eth of the third argument:\n                  - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                    - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n                  - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n                    - the eth of the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the eth of the third argument). Afterthat, \n                      - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to 0.\n                - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n                  - the feerebates of caller will be updated to (the feerebates of caller-1).\n              - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n                - the totaldai of the third argument will be updated to (((the callssold from SHA3(the first argument,the second argument) to the third argument*the second argument)/0xde0b6b3a7640000)+the totaldai of the third argument).\n            - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n              - the dai of the third argument will be updated to (((the callssold from SHA3(the first argument,the second argument) to the third argument*the second argument)/0xde0b6b3a7640000)+the dai of the third argument).\n          - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n            - the callssold from SHA3(the first argument,the second argument) to the third argument will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument-the callssold from SHA3(the first argument,the second argument) to the third argument).\n        - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n          - the callsassigned of SHA3(the first argument,the second argument) will be updated to (the callssold from SHA3(the first argument,the second argument) to the third argument+the callsassigned of SHA3(the first argument,the second argument)).\n      - When v0 is not 0, and for users, except for the third argument, and the call or transfer succeeds, and for users, except for owner, and the external contract authority is not 0, and for users, except for the address of this contract:\n        - the totaleth of the third argument will be updated to (the totaleth of the third argument-the callssold from SHA3(the first argument,the second argument) to the third argument).\n- For users, except for owner, and the external contract authority is not 0, and for users, except for the third argument, and for users, except for the address of this contract:\n  - it calls an external function canCall of the external contract authority with the following argument list: caller, the address of this contract, and 0xffffffff00000000000000000000000000000000000000000000000000000000 and the first argument and 0xffffffff00000000000000000000000000000000000000000000000000000000, and gets the returned value as v0.\n\nFor the exerciseCall function, it has 3 arguments and the type of each argument is as follows: uint256, uint256, uint256.\n- When the first argument MOD 0x38d7ea4c68000 is 0, and the second argument is greater than current time:\n  - When the first argument is 0:\n    - When 0 is smaller than the callsowned from SHA3(the second argument,the third argument) to caller, and the first argument is not greater than the callsowned from SHA3(the second argument,the third argument) to caller:\n      - the callsowned from SHA3(the second argument,the third argument) to caller will be updated to (the callsowned from SHA3(the second argument,the third argument) to caller-the first argument).\n      - the callsexercised of SHA3(the second argument,the third argument) will be updated to (the first argument+the callsexercised of SHA3(the second argument,the third argument)).\n    - When 1 is not greater than the feerebates of caller, and 0 is not greater than the dai of caller, and the feerebates of caller is greater than 0:\n      - the dai of caller will be updated to the dai of caller.\n      - When 0 is not greater than the totaldai of caller:\n        - the totaldai of caller will be updated to the totaldai of caller.\n        - When (the first argument+the eth of caller) is not smaller than the eth of caller:\n          - the eth of caller will be updated to (the first argument+the eth of caller).\n          - When (the first argument+the totaleth of caller) is not smaller than the totaleth of caller:\n            - the totaleth of caller will be updated to (the first argument+the totaleth of caller).\n    - When (exercisefee+feescollected) is not smaller than feescollected, and exercisefee is not greater than the totaldai of caller, and the feerebates of caller is not greater than 0, and 0 is not greater than the dai of caller, and exercisefee is not greater than the dai of caller:\n      - the dai of caller will be updated to the dai of caller.\n      - When 0 is not greater than the totaldai of caller:\n        - the totaldai of caller will be updated to the totaldai of caller.\n        - When (the first argument+the eth of caller) is not smaller than the eth of caller:\n          - the eth of caller will be updated to (the first argument+the eth of caller).\n          - When (the first argument+the totaleth of caller) is not smaller than the totaleth of caller:\n            - the totaleth of caller will be updated to (the first argument+the totaleth of caller).\n  - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n    - the feerebates of caller will be updated to (the feerebates of caller-1).\n    - When 0 is smaller than the callsowned from SHA3(the second argument,the third argument) to caller, and (the first argument+the callsexercised of SHA3(the second argument,the third argument)) is not smaller than the callsexercised of SHA3(the second argument,the third argument), and the first argument is not greater than the callsowned from SHA3(the second argument,the third argument) to caller:\n      - the feerebates of caller will be updated to (the feerebates of caller-1).\n      - When the first argument is not 0, and ((the third argument*the first argument)/0xde0b6b3a7640000) is not greater than the dai of caller:\n        - the dai of caller will be updated to (the dai of caller-((the third argument*the first argument)/0xde0b6b3a7640000)).\n        - When ((the third argument*the first argument)/0xde0b6b3a7640000) is not greater than the totaldai of caller:\n          - the totaldai of caller will be updated to (the totaldai of caller-((the third argument*the first argument)/0xde0b6b3a7640000)).\n          - When (the first argument+the eth of caller) is not smaller than the eth of caller:\n            - the eth of caller will be updated to (the first argument+the eth of caller).\n            - When (the first argument+the totaleth of caller) is not smaller than the totaleth of caller:\n              - the totaleth of caller will be updated to (the first argument+the totaleth of caller).\n  - When 0 is smaller than the callsowned from SHA3(the second argument,the third argument) to caller, and the first argument is not greater than the callsowned from SHA3(the second argument,the third argument) to caller:\n    - the callsowned from SHA3(the second argument,the third argument) to caller will be updated to (the callsowned from SHA3(the second argument,the third argument) to caller-the first argument).\n    - When (the first argument+the callsexercised of SHA3(the second argument,the third argument)) is not smaller than the callsexercised of SHA3(the second argument,the third argument):\n      - the callsexercised of SHA3(the second argument,the third argument) will be updated to (the first argument+the callsexercised of SHA3(the second argument,the third argument)).\n      - When the feerebates of caller is not greater than 0, and exercisefee is not greater than the dai of caller:\n        - the dai of caller will be updated to (the dai of caller-exercisefee).\n        - When exercisefee is not greater than the totaldai of caller:\n          - the totaldai of caller will be updated to (the totaldai of caller-exercisefee).\n          - When (exercisefee+feescollected) is not smaller than feescollected:\n            - the state variable feescollected will be updated to (exercisefee+feescollected).\n            - When the first argument is not 0, and ((the third argument*the first argument)/0xde0b6b3a7640000) is not greater than the dai of caller:\n              - the dai of caller will be updated to (the dai of caller-((the third argument*the first argument)/0xde0b6b3a7640000)).\n              - When ((the third argument*the first argument)/0xde0b6b3a7640000) is not greater than the totaldai of caller:\n                - the totaldai of caller will be updated to (the totaldai of caller-((the third argument*the first argument)/0xde0b6b3a7640000)).\n                - When (the first argument+the eth of caller) is not smaller than the eth of caller:\n                  - the eth of caller will be updated to (the first argument+the eth of caller).\n                  - When (the first argument+the totaleth of caller) is not smaller than the totaleth of caller:\n                    - the totaleth of caller will be updated to (the first argument+the totaleth of caller).\n  - When the feerebates of caller is not greater than 0, and exercisefee is not greater than the dai of caller:\n    - the dai of caller will be updated to (the dai of caller-exercisefee).\n    - When exercisefee is not greater than the totaldai of caller:\n      - the totaldai of caller will be updated to (the totaldai of caller-exercisefee).\n      - When (exercisefee+feescollected) is not smaller than feescollected:\n        - the state variable feescollected will be updated to (exercisefee+feescollected).\n\nFor the setFeeSchedule function, it has 4 arguments and the type of each argument is as follows: uint256, uint256, uint256, uint256.\n- For the address of this contract:\n  - the state variable s_19 will be updated to the first argument.\n  - the state variable s_20 will be updated to the second argument.\n  - the state variable exercisefee will be updated to the third argument.\n  - the state variable settlementfee will be updated to the fourth argument.\n- For users, except for the address of this contract:\n  - For owner:\n    - the state variable s_19 will be updated to the first argument.\n    - the state variable s_20 will be updated to the second argument.\n    - the state variable exercisefee will be updated to the third argument.\n    - the state variable settlementfee will be updated to the fourth argument.\n  - For users, except for owner, and the external contract authority is not 0:\n    - it calls an external function canCall of the external contract authority with the following argument list: caller, the address of this contract, and 0xffffffff00000000000000000000000000000000000000000000000000000000 and the first argument and 0xffffffff00000000000000000000000000000000000000000000000000000000, and gets the returned value as v0.\n    - When v0 is not 0, and the call or transfer succeeds:\n      - the state variable s_19 will be updated to the first argument.\n      - the state variable s_20 will be updated to the second argument.\n      - the state variable exercisefee will be updated to the third argument.\n      - the state variable settlementfee will be updated to the fourth argument.\n\nFor the callBtcWithStc function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(3,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument.\n\nFor the withdrawDai function, it has 2 arguments and the type of each argument is as follows: uint256, address.\n- When the second argument is not 0, and the first argument is not greater than the dai of caller:\n  - the dai of caller will be updated to (the dai of caller-the first argument).\n  - When the first argument is not greater than the totaldai of caller:\n    - the totaldai of caller will be updated to (the totaldai of caller-the first argument).\n    - it calls an external function transfer of the external contract daitoken with the following argument list: the second argument, and the first argument.\n\nFor the putStcWithBto function, it has 10 arguments and the type of each argument is as follows: uint256, uint256, bytes32, uint256, uint256, uint256, uint256, bytes32, bytes32, uint8.\n- it calls a built-in function ecrecover with the following argument list: SHA3(0x19457468657265756d205369676e6564204d6573736167653a0a3332,SHA3(4,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(the address of this contract, the 10-th argument, the 8-th argument, and the 9-th argument, and gets the returned value as v0.\n- When the cancelled from v0 to SHA3(4,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)) is 0, and the first argument is not greater than (the fifth argument-the filled from v0 to SHA3(4,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract))), and the call or transfer succeeds, and the second argument MOD 0x15180 is 0, and the sixth argument MOD 0xde0b6b3a7640000 is 0, and the first argument MOD 0x38d7ea4c68000 is 0, and the fourth argument MOD 0x38d7ea4c68000 is 0, and the 7-th argument is greater than current time, and the filled from v0 to SHA3(4,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)) is not greater than the fifth argument, and (the first argument+the filled from v0 to SHA3(4,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract))) is not smaller than the filled from v0 to SHA3(4,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)), and the second argument is greater than current time:\n  - the filled from v0 to SHA3(4,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract)) will be updated to (the first argument+the filled from v0 to SHA3(4,the second argument,the third argument,the fourth argument,the fifth argument,the sixth argument,the 7-th argument,(0x1000000000000000000000000*the address of this contract))).\n  - When the first argument is 0:\n    - the dai of caller will be updated to the dai of caller.\n    - When the totaldai of caller is not smaller than the totaldai of caller:\n      - the totaldai of caller will be updated to the totaldai of caller.\n      - When the first argument is not greater than the putsowned from SHA3(the second argument,the sixth argument) to caller:\n        - the putsowned from SHA3(the second argument,the sixth argument) to caller will be updated to (the putsowned from SHA3(the second argument,the sixth argument) to caller-the first argument).\n        - When 0 is not greater than the dai of v0:\n          - the dai of v0 will be updated to the dai of v0.\n          - When 0 is not greater than the totaldai of v0:\n            - the totaldai of v0 will be updated to the totaldai of v0.\n            - the putsowned from SHA3(the second argument,the sixth argument) to v0 will be updated to (the first argument+the putsowned from SHA3(the second argument,the sixth argument) to v0).\n        - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n          - the feerebates of caller will be updated to (the feerebates of caller-1).\n\nFor the exercisePut function, it has 3 arguments and the type of each argument is as follows: uint256, uint256, uint256.\n- When the first argument MOD 0x38d7ea4c68000 is 0, and the second argument is greater than current time:\n  - When the first argument is 0:\n    - When the first argument is not greater than the putsowned from SHA3(the second argument,the third argument) to caller, and 0 is smaller than the putsowned from SHA3(the second argument,the third argument) to caller:\n      - the putsowned from SHA3(the second argument,the third argument) to caller will be updated to (the putsowned from SHA3(the second argument,the third argument) to caller-the first argument).\n      - the putsexercised of SHA3(the second argument,the third argument) will be updated to (the first argument+the putsexercised of SHA3(the second argument,the third argument)).\n    - When the first argument is not greater than the totaleth of caller, and the dai of caller is not smaller than the dai of caller, and the first argument is not greater than the eth of caller:\n      - the dai of caller will be updated to the dai of caller.\n      - When the totaldai of caller is not smaller than the totaldai of caller:\n        - the totaldai of caller will be updated to the totaldai of caller.\n        - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n          - the feerebates of caller will be updated to (the feerebates of caller-1).\n        - When the feerebates of caller is not greater than 0, and exercisefee is not greater than the dai of caller:\n          - the dai of caller will be updated to (the dai of caller-exercisefee).\n          - When exercisefee is not greater than the totaldai of caller:\n            - the totaldai of caller will be updated to (the totaldai of caller-exercisefee).\n            - When (exercisefee+feescollected) is not smaller than feescollected:\n              - the state variable feescollected will be updated to (exercisefee+feescollected).\n  - When the first argument is not greater than the eth of caller:\n    - the eth of caller will be updated to (the eth of caller-the first argument).\n    - When the first argument is not greater than the totaleth of caller:\n      - the totaleth of caller will be updated to (the totaleth of caller-the first argument).\n      - When (the first argument+the putsexercised of SHA3(the second argument,the third argument)) is not smaller than the putsexercised of SHA3(the second argument,the third argument), and 0 is smaller than the putsowned from SHA3(the second argument,the third argument) to caller, and the first argument is not greater than the putsowned from SHA3(the second argument,the third argument) to caller:\n        - the totaleth of caller will be updated to (the totaleth of caller-the first argument).\n        - When (((the third argument*the first argument)/0xde0b6b3a7640000)+the dai of caller) is not smaller than the dai of caller, and the first argument is not 0:\n          - the dai of caller will be updated to (((the third argument*the first argument)/0xde0b6b3a7640000)+the dai of caller).\n          - When (((the third argument*the first argument)/0xde0b6b3a7640000)+the totaldai of caller) is not smaller than the totaldai of caller:\n            - the totaldai of caller will be updated to (((the third argument*the first argument)/0xde0b6b3a7640000)+the totaldai of caller).\n            - When 1 is not greater than the feerebates of caller, and the feerebates of caller is greater than 0:\n              - the feerebates of caller will be updated to (the feerebates of caller-1).\n            - When the feerebates of caller is not greater than 0, and exercisefee is not greater than the dai of caller:\n              - the dai of caller will be updated to (the dai of caller-exercisefee).\n              - When exercisefee is not greater than the totaldai of caller:\n                - the totaldai of caller will be updated to (the totaldai of caller-exercisefee).\n                - When (exercisefee+feescollected) is not smaller than feescollected:\n                  - the state variable feescollected will be updated to (exercisefee+feescollected).\n    - When the first argument is not greater than the putsowned from SHA3(the second argument,the third argument) to caller, and 0 is smaller than the putsowned from SHA3(the second argument,the third argument) to caller, and (the first argument+the putsexercised of SHA3(the second argument,the third argument)) is not smaller than the putsexercised of SHA3(the second argument,the third argument):\n      - the eth of caller will be updated to (the eth of caller-the first argument).\n  - When the first argument is not greater than the putsowned from SHA3(the second argument,the third argument) to caller, and 0 is smaller than the putsowned from SHA3(the second argument,the third argument) to caller:\n    - the putsowned from SHA3(the second argument,the third argument) to caller will be updated to (the putsowned from SHA3(the second argument,the third argument) to caller-the first argument).\n    - When (the first argument+the putsexercised of SHA3(the second argument,the third argument)) is not smaller than the putsexercised of SHA3(the second argument,the third argument):\n      - the putsexercised of SHA3(the second argument,the third argument) will be updated to (the first argument+the putsexercised of SHA3(the second argument,the third argument)).\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 33971 tokens. Please reduce the length of the messages."
}