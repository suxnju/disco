{
	"address": "0x1ce865c81e76aafd2003e69acd2d196d19aac144",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's the Solidity contract implementation based on the provided EVM Bytecode:\n\n```solidity\npragma solidity ^0.6.0;\n\nabstract contract Contract {\n\n    function reclaimToken(address _address) public virtual;\n    function accumulatedGasFees() public view virtual returns (uint);\n    function deposit(string memory _string, uint256 _uint, bytes memory _bytes, uint8 _uint8, bytes32 _bytes32, bytes32 _bytes322) public virtual;\n    function arbitrator() public view virtual returns (address);\n    function owner() public view virtual returns (address);\n    function setArbitrator(address _address) public virtual;\n    function withdrawAccumulatedFees(address _address) public virtual;\n    function getEscrowDeposit(string memory _string) public view virtual returns (address, address, uint256);\n    function transferOwnership(address _address) public virtual;\n    function release(string memory _string) public virtual;\n    function RELEASE_GAS_FEES() public view virtual returns (uint256);\n}\n\ncontract MyContract is Contract {\n    address private _owner;\n    address private _arbitrator;\n    uint256 private _accumulatedGasFees;\n    uint256 private _releaseGasFees = 0xb3a5;\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == _owner, \"Only owner can call this function.\");\n        _;\n    }\n\n    modifier onlyArbitrator {\n        require(msg.sender == _arbitrator, \"Only arbitrator can call this function.\");\n        _;\n    }\n\n    function reclaimToken(address _address) public override onlyOwner {\n        // Implement reclaimToken\n    }\n\n    function accumulatedGasFees() public view override returns (uint) {\n        return _accumulatedGasFees;\n    }\n\n    function deposit(string memory _string, uint256 _uint, bytes memory _bytes, uint8 _uint8, bytes32 _bytes32, bytes32 _bytes322) public override {\n        // Implement deposit\n    }\n\n    function arbitrator() public view override returns (address) {\n        return _arbitrator;\n    }\n\n    function owner() public view override returns (address) {\n        return _owner;\n    }\n\n    function setArbitrator(address _address) public override onlyOwner {\n        _arbitrator = _address;\n    }\n\n    function withdrawAccumulatedFees(address _address) public override onlyOwner {\n        // Implement withdrawAccumulatedFees\n    }\n\n    function getEscrowDeposit(string memory _string) public view override returns (address, address, uint256) {\n        // Implement getEscrowDeposit\n    }\n\n    function transferOwnership(address _address) public override onlyOwner {\n        _owner = _address;\n    }\n\n    function release(string memory _string) public override onlyArbitrator {\n        // Implement release\n    }\n\n    function RELEASE_GAS_FEES() public view override returns (uint256) {\n        return _releaseGasFees;\n    }\n}\n```\n\nNote: The actual implementations of functions like `reclaimToken`, `deposit`, `withdrawAccumulatedFees`, `getEscrowDeposit`, and `release` are omitted as the provided decompiled code doesn't provide enough detail to infer the implementations.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474571,
	"id": "chatcmpl-8MvP9b2zkMjZLudXoQ8VY7kEZMRPN",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x17ffc320) {\n            // Dispatch table entry for reclaimToken(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x00eb;\n            var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            reclaimToken(var2);\n            stop();\n        } else if (var0 == 0x180eebba) {\n            // Dispatch table entry for accumulatedGasFees()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0100;\n            var2 = accumulatedGasFees();\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var2;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n        } else if (var0 == 0x40b00033) {\n            // Dispatch table entry for deposit(string,uint256,bytes,uint8,bytes32,bytes32)\n            var1 = 0x017a;\n            var temp2 = msg.data[0x04:0x24] + 0x04;\n            var var3 = msg.data[temp2:temp2 + 0x20];\n            var2 = temp2 + 0x20;\n            var var4 = msg.data[0x24:0x44];\n            var temp3 = msg.data[0x44:0x64] + 0x04;\n            var var6 = msg.data[temp3:temp3 + 0x20];\n            var var5 = temp3 + 0x20;\n            var var7 = msg.data[0x64:0x84] & 0xff;\n            var var8 = msg.data[0x84:0xa4];\n            var var9 = msg.data[0xa4:0xc4];\n            deposit(var2, var3, var4, var5, var6, var7, var8, var9);\n            stop();\n        } else if (var0 == 0x6cc6cde1) {\n            // Dispatch table entry for arbitrator()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018f;\n            var2 = arbitrator();\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01e4;\n            var2 = owner();\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n        } else if (var0 == 0xb0eefabe) {\n            // Dispatch table entry for setArbitrator(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            setArbitrator(var2);\n            stop();\n        } else if (var0 == 0xc1f10663) {\n            // Dispatch table entry for withdrawAccumulatedFees(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0296;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            withdrawAccumulatedFees(var2);\n            stop();\n        } else if (var0 == 0xc5ecfc61) {\n            // Dispatch table entry for getEscrowDeposit(string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c4;\n            var temp8 = msg.data[0x04:0x24] + 0x04;\n            var3 = msg.data[temp8:temp8 + 0x20];\n            var2 = temp8 + 0x20;\n            var1, var2, var3 = getEscrowDeposit(var2, var3);\n            var temp9 = memory[0x40:0x60];\n            var4 = temp9;\n            memory[var4:var4 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp10 = var4 + 0x20;\n            var5 = temp10;\n            var temp11 = var5 + 0x20;\n            memory[temp11:temp11 + 0x20] = var3;\n            var temp12 = temp11 + 0x20;\n            memory[var5:var5 + 0x20] = temp12 - var4;\n            var temp13 = var2;\n            memory[temp12:temp12 + 0x20] = memory[temp13:temp13 + 0x20];\n            var6 = temp12 + 0x20;\n            var8 = memory[temp13:temp13 + 0x20];\n            var7 = temp13 + 0x20;\n            var9 = var8;\n            var var10 = var6;\n            var var11 = var7;\n            var var12 = 0x00;\n        \n            if (var12 >= var9) {\n            label_033C:\n                var temp14 = var8;\n                var6 = temp14 + var6;\n                var7 = temp14 & 0x1f;\n            \n                if (!var7) {\n                    var temp15 = memory[0x40:0x60];\n                    return memory[temp15:temp15 + var6 - temp15];\n                } else {\n                    var temp16 = var7;\n                    var temp17 = var6 - temp16;\n                    memory[temp17:temp17 + 0x20] = ~(0x0100 ** (0x20 - temp16) - 0x01) & memory[temp17:temp17 + 0x20];\n                    var temp18 = memory[0x40:0x60];\n                    return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n                }\n            } else {\n            label_032A:\n                var temp19 = var12;\n                memory[var10 + temp19:var10 + temp19 + 0x20] = memory[var11 + temp19:var11 + temp19 + 0x20];\n                var12 = temp19 + 0x20;\n            \n                if (var12 >= var9) { goto label_033C; }\n                else { goto label_032A; }\n            }\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03b0;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            transferOwnership(var2);\n            stop();\n        } else if (var0 == 0xf34e3723) {\n            // Dispatch table entry for release(string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03de;\n            var temp20 = msg.data[0x04:0x24] + 0x04;\n            var3 = msg.data[temp20:temp20 + 0x20];\n            var2 = temp20 + 0x20;\n            release(var2, var3);\n            stop();\n        } else if (var0 == 0xf96f143e) {\n            // Dispatch table entry for RELEASE_GAS_FEES()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03f3;\n            var2 = RELEASE_GAS_FEES();\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = var2;\n            var temp22 = memory[0x40:0x60];\n            return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function reclaimToken(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x70a08231;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = address(this);\n        var var3 = temp1 + 0x20;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = 0x00;\n        var var9 = var1;\n    \n        if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        var1 = 0x0565;\n        var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var3 = storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var4 = var0;\n        func_1000(var2, var3, var4);\n    }\n    \n    function accumulatedGasFees() returns (var r0) { return storage[0x03]; }\n    \n    function deposit(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7) {\n        var var0 = 0x00;\n        var var1 = 0x0579;\n        var1 = func_1138();\n        var var2 = 0x00;\n    \n        if (msg.value != arg2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[arg0:arg0 + temp0];\n        var temp2 = temp1 + temp0;\n        memory[temp2:temp2 + 0x20] = 0x01;\n        var temp3 = memory[0x40:0x60];\n    \n        if (storage[keccak256(memory[temp3:temp3 + (temp2 + 0x20) - temp3])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = arg1;\n        var temp5 = arg4;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + temp4] = msg.data[arg0:arg0 + temp4];\n        var temp7 = temp6 + temp4;\n        memory[temp7:temp7 + 0x20] = arg2;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp5] = msg.data[arg3:arg3 + temp5];\n        var temp9 = memory[0x40:0x60];\n        var temp10 = keccak256(memory[temp9:temp9 + (temp8 + temp5) - temp9]);\n        var0 = temp10;\n        var temp11 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp11 + 0x40;\n        memory[temp11:temp11 + 0x20] = 0x1c;\n        memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        var1 = temp11;\n        var var3 = 0x01;\n        var var4 = var1;\n        var var5 = var0;\n        var var6 = memory[0x40:0x60];\n        var var7 = var6;\n        var var8 = var4 + 0x20;\n        var var9 = memory[var4:var4 + 0x20];\n        var var10 = var9;\n        var var11 = var7;\n        var var12 = var8;\n    \n        if (var10 < 0x20) {\n        label_0672:\n            var temp12 = 0x0100 ** (0x20 - var10) - 0x01;\n            var temp13 = var11;\n            memory[temp13:temp13 + 0x20] = (memory[var12:var12 + 0x20] & ~temp12) | (memory[temp13:temp13 + 0x20] & temp12);\n            var temp14 = var9 + var7;\n            memory[temp14:temp14 + 0x20] = var5;\n            var temp15 = memory[0x40:0x60];\n            var temp16 = keccak256(memory[temp15:temp15 + (temp14 + 0x20) - temp15]);\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp17 + 0x20;\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = temp16;\n            var temp19 = temp18 + 0x20;\n            memory[temp19:temp19 + 0x20] = arg5 & 0xff;\n            var temp20 = temp19 + 0x20;\n            memory[temp20:temp20 + 0x20] = arg6;\n            var temp21 = temp20 + 0x20;\n            memory[temp21:temp21 + 0x20] = arg7;\n            var4 = temp21 + 0x20;\n            var temp22 = memory[0x40:0x60];\n            var temp23;\n            temp23, memory[temp22 - 0x20:temp22 - 0x20 + 0x20] = address(var3).call.gas(msg.gas)(memory[temp22:temp22 + var4 - temp22]);\n        \n            if (!temp23) { revert(memory[0x00:0x00]); }\n        \n            var2 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20];\n        \n            if (var2 & 0xffffffffffffffffffffffffffffffffffffffff != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            var temp24 = memory[0x40:0x60];\n            var3 = temp24;\n            memory[0x40:0x60] = var3 + 0x80;\n            memory[var3:var3 + 0x20] = !!0x01;\n            var temp25 = var3 + 0x20;\n            memory[temp25:temp25 + 0x20] = msg.sender;\n            var temp26 = temp25 + 0x20;\n            var temp27 = arg4;\n            var temp28 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp28 + (temp27 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp28:temp28 + 0x20] = temp27;\n            memory[temp28 + 0x20:temp28 + 0x20 + temp27] = msg.data[arg3:arg3 + temp27];\n            memory[temp26:temp26 + 0x20] = temp28;\n            memory[temp26 + 0x20:temp26 + 0x20 + 0x20] = msg.value;\n            var temp29 = arg1;\n            var temp30 = memory[0x40:0x60];\n            memory[temp30:temp30 + temp29] = msg.data[arg0:arg0 + temp29];\n            var temp31 = temp30 + temp29;\n            memory[temp31:temp31 + 0x20] = 0x01;\n            var temp32 = memory[0x40:0x60];\n            var temp33 = keccak256(memory[temp32:temp32 + (temp31 + 0x20) - temp32]);\n            var4 = temp33;\n            var temp34 = var4;\n            storage[temp34] = !!memory[var3:var3 + 0x20] | (storage[temp34] & ~0xff);\n            var temp35 = var4;\n            storage[temp35] = (memory[var3 + 0x20:var3 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x01 | (storage[temp35] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n            var temp36 = memory[var3 + 0x40:var3 + 0x40 + 0x20];\n            var5 = 0x0898;\n            var6 = var4 + 0x01;\n            var7 = temp36 + 0x20;\n            var8 = memory[temp36:temp36 + 0x20];\n            var5 = func_114C(var6, var7, var8);\n            storage[var4 + 0x02] = memory[var3 + 0x60:var3 + 0x60 + 0x20];\n            var temp37 = arg1;\n            var temp38 = arg4;\n            var temp39 = memory[0x40:0x60];\n            var temp40 = temp39 + 0x20;\n            var temp41 = temp40 + 0x20;\n            memory[temp39:temp39 + 0x20] = temp41 - temp39;\n            memory[temp41:temp41 + 0x20] = temp37;\n            var temp42 = temp41 + 0x20;\n            memory[temp42:temp42 + temp37] = msg.data[arg0:arg0 + temp37];\n            var temp43 = temp42 + temp37;\n            memory[temp40:temp40 + 0x20] = temp43 - temp39;\n            memory[temp43:temp43 + 0x20] = temp38;\n            var temp44 = temp43 + 0x20;\n            memory[temp44:temp44 + temp38] = msg.data[arg3:arg3 + temp38];\n            var temp45 = memory[0x40:0x60];\n            log(memory[temp45:temp45 + (temp44 + temp38) - temp45], [0x932c935c3c9913ab1e795c885cfe0b18652738083fd94d8fdea1844950a5227c, msg.sender]);\n            return;\n        } else {\n        label_0658:\n            var temp46 = var12;\n            var temp47 = var11;\n            memory[temp47:temp47 + 0x20] = memory[temp46:temp46 + 0x20];\n            var11 = temp47 + 0x20;\n            var12 = temp46 + 0x20;\n            var10 = var10 - 0x20;\n        \n            if (var10 < 0x20) { goto label_0672; }\n            else { goto label_0658; }\n        }\n    }\n    \n    function arbitrator() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function setArbitrator(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function withdrawAccumulatedFees(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x03];\n        var0 = temp0;\n        storage[0x03] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getEscrowDeposit(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x0adf;\n        var1 = func_1138();\n        var var2 = 0x00;\n        var var3 = var2;\n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[arg0:arg0 + temp0];\n        var temp2 = temp1 + temp0;\n        memory[temp2:temp2 + 0x20] = 0x01;\n        var temp3 = memory[0x40:0x60];\n    \n        if (!(storage[keccak256(memory[temp3:temp3 + (temp2 + 0x20) - temp3])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = arg1;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + temp4] = msg.data[arg0:arg0 + temp4];\n        var temp6 = temp5 + temp4;\n        memory[temp6:temp6 + 0x20] = 0x01;\n        var temp7 = memory[0x40:0x60];\n        var temp8 = keccak256(memory[temp7:temp7 + (temp6 + 0x20) - temp7]);\n        var3 = temp8;\n        var0 = storage[var3] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp9 = var3 + 0x01;\n        var temp10 = storage[temp9];\n        var temp11 = (!(temp10 & 0x01) * 0x0100 - 0x01 & temp10) / 0x02;\n        var temp12 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp12 + (temp11 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var4 = temp12;\n        var var5 = temp9;\n        var var6 = temp11;\n        memory[var4:var4 + 0x20] = var6;\n        var var7 = var4 + 0x20;\n        var var8 = var5;\n        var temp13 = storage[var8];\n        var var9 = (!(temp13 & 0x01) * 0x0100 - 0x01 & temp13) / 0x02;\n    \n        if (!var9) {\n        label_0C09:\n            arg1 = storage[var3 + 0x02];\n            arg0 = var4;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else if (0x1f < var9) {\n            var temp14 = var7;\n            var temp15 = temp14 + var9;\n            var7 = temp15;\n            memory[0x00:0x20] = var8;\n            var temp16 = keccak256(memory[0x00:0x20]);\n            memory[temp14:temp14 + 0x20] = storage[temp16];\n            var8 = temp16 + 0x01;\n            var9 = temp14 + 0x20;\n        \n            if (var7 <= var9) { goto label_0C00; }\n        \n        label_0BEC:\n            var temp17 = var8;\n            var temp18 = var9;\n            memory[temp18:temp18 + 0x20] = storage[temp17];\n            var8 = temp17 + 0x01;\n            var9 = temp18 + 0x20;\n        \n            if (var7 > var9) { goto label_0BEC; }\n        \n        label_0C00:\n            var temp19 = var7;\n            var temp20 = temp19 + (var9 - temp19 & 0x1f);\n            var9 = temp19;\n            var7 = temp20;\n            goto label_0C09;\n        } else {\n            var temp21 = var7;\n            memory[temp21:temp21 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n            var7 = temp21 + 0x20;\n            var9 = var9;\n            goto label_0C09;\n        }\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function release(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[arg0:arg0 + temp0];\n        var temp2 = temp1 + temp0;\n        memory[temp2:temp2 + 0x20] = 0x01;\n        var temp3 = memory[0x40:0x60];\n    \n        if (!(storage[keccak256(memory[temp3:temp3 + (temp2 + 0x20) - temp3])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = arg1;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + temp4] = msg.data[arg0:arg0 + temp4];\n        var temp6 = temp5 + temp4;\n        memory[temp6:temp6 + 0x20] = 0x01;\n        var temp7 = memory[0x40:0x60];\n        var0 = keccak256(memory[temp7:temp7 + (temp6 + 0x20) - temp7]);\n        var var4 = 0x0e53;\n        var var5 = 0xb3a5;\n        var var6 = tx.gasprice;\n        var4 = func_10C6(var5, var6);\n        var temp8 = var4;\n        var1 = temp8;\n        var4 = 0x0e6c;\n        var5 = storage[var0 + 0x02];\n        var6 = var1;\n        var4 = func_1101(var5, var6);\n        var2 = var4;\n        var3 = storage[var0] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp9 = arg1;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + temp9] = msg.data[arg0:arg0 + temp9];\n        var temp11 = temp10 + temp9;\n        memory[temp11:temp11 + 0x20] = 0x01;\n        var temp12 = memory[0x40:0x60];\n        var temp13 = keccak256(memory[temp12:temp12 + (temp11 + 0x20) - temp12]);\n        var4 = temp13;\n        var5 = 0x00;\n        var temp14 = var4 + var5;\n        storage[temp14] = storage[temp14] & ~0xff;\n        var temp15 = var4;\n        storage[temp15] = storage[temp15] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01);\n        var6 = 0x0f06;\n        var var7 = var4 + 0x01;\n        var var8 = 0x00;\n        func_11CC(var7, var8);\n        storage[var4 + 0x02] = 0x00;\n        var4 = 0x0f25;\n        var5 = storage[0x03];\n        var6 = var1;\n        var4 = func_111A(var5, var6);\n        storage[0x03] = var4;\n        var temp16 = var2;\n        var temp17 = memory[0x40:0x60];\n        var temp18;\n        temp18, memory[temp17:temp17 + 0x00] = address(var3 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp16 * 0x08fc).value(temp16)(memory[temp17:temp17 + memory[0x40:0x60] - temp17]);\n    \n        if (!temp18) { revert(memory[0x00:0x00]); }\n    \n        var temp19 = arg1;\n        var temp20 = memory[0x40:0x60];\n        memory[temp20:temp20 + 0x20] = var2;\n        var temp21 = temp20 + 0x20;\n        var temp22 = temp21 + 0x20;\n        memory[temp21:temp21 + 0x20] = temp22 - temp20;\n        memory[temp22:temp22 + 0x20] = temp19;\n        var temp23 = temp22 + 0x20;\n        memory[temp23:temp23 + temp19] = msg.data[arg0:arg0 + temp19];\n        var temp24 = memory[0x40:0x60];\n        log(memory[temp24:temp24 + (temp23 + temp19) - temp24], [0xaded40980191268694a17a28cd3524dd9cedf6b82232ceb1af14363776500a56, msg.sender, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function RELEASE_GAS_FEES() returns (var r0) { return 0xb3a5; }\n    \n    function func_1000(var arg0, var arg1, var arg2) {\n        var var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = 0xa9059cbb;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2;\n        var var2 = temp2 + 0x20;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp3;\n        temp3, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { return; }\n        else { assert(); }\n    }\n    \n    function func_10C6(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 != 0x00) {\n            var temp0 = arg0;\n            var1 = temp0 * arg1;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_10FA:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_10FA;\n        }\n    }\n    \n    function func_1101(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_111A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1138() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_114C(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_11BB:\n                var temp4 = arg1;\n                arg1 = 0x11c8;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1214(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_11BA:\n                    goto label_11BB;\n                } else {\n                label_11A8:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_11BA; }\n                    else { goto label_11A8; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_11BB;\n        }\n    }\n    \n    function func_11CC(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        arg1 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        storage[temp0] = 0x00;\n    \n        if (0x1f >= arg1) { goto label_1211; }\n    \n        memory[0x00:0x20] = arg0;\n        arg0 = 0x1210;\n        arg1 = keccak256(memory[0x00:0x20]) + (arg1 + 0x1f) / 0x20;\n        var var0 = keccak256(memory[0x00:0x20]);\n        arg0 = func_1214(arg1, var0);\n    \n    label_1211:\n    }\n    \n    function func_1214(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1236;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_1232(arg1, var0); }\n    \n    label_1223:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_1223; }\n    \n        arg0 = func_1232(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1232(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x17ffc320) {\n            // Dispatch table entry for reclaimToken(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x00eb;\n            var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            reclaimToken(var2);\n            stop();\n        } else if (var0 == 0x180eebba) {\n            // Dispatch table entry for accumulatedGasFees()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0100;\n            var2 = accumulatedGasFees();\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var2;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n        } else if (var0 == 0x40b00033) {\n            // Dispatch table entry for deposit(string,uint256,bytes,uint8,bytes32,bytes32)\n            var1 = 0x017a;\n            var temp2 = msg.data[0x04:0x24] + 0x04;\n            var var3 = msg.data[temp2:temp2 + 0x20];\n            var2 = temp2 + 0x20;\n            var var4 = msg.data[0x24:0x44];\n            var temp3 = msg.data[0x44:0x64] + 0x04;\n            var var6 = msg.data[temp3:temp3 + 0x20];\n            var var5 = temp3 + 0x20;\n            var var7 = msg.data[0x64:0x84] & 0xff;\n            var var8 = msg.data[0x84:0xa4];\n            var var9 = msg.data[0xa4:0xc4];\n            deposit(var2, var3, var4, var5, var6, var7, var8, var9);\n            stop();\n        } else if (var0 == 0x6cc6cde1) {\n            // Dispatch table entry for arbitrator()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018f;\n            var2 = arbitrator();\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01e4;\n            var2 = owner();\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n        } else if (var0 == 0xb0eefabe) {\n            // Dispatch table entry for setArbitrator(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            setArbitrator(var2);\n            stop();\n        } else if (var0 == 0xc1f10663) {\n            // Dispatch table entry for withdrawAccumulatedFees(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0296;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            withdrawAccumulatedFees(var2);\n            stop();\n        } else if (var0 == 0xc5ecfc61) {\n            // Dispatch table entry for getEscrowDeposit(string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c4;\n            var temp8 = msg.data[0x04:0x24] + 0x04;\n            var3 = msg.data[temp8:temp8 + 0x20];\n            var2 = temp8 + 0x20;\n            var1, var2, var3 = getEscrowDeposit(var2, var3);\n            var temp9 = memory[0x40:0x60];\n            var4 = temp9;\n            memory[var4:var4 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp10 = var4 + 0x20;\n            var5 = temp10;\n            var temp11 = var5 + 0x20;\n            memory[temp11:temp11 + 0x20] = var3;\n            var temp12 = temp11 + 0x20;\n            memory[var5:var5 + 0x20] = temp12 - var4;\n            var temp13 = var2;\n            memory[temp12:temp12 + 0x20] = memory[temp13:temp13 + 0x20];\n            var6 = temp12 + 0x20;\n            var8 = memory[temp13:temp13 + 0x20];\n            var7 = temp13 + 0x20;\n            var9 = var8;\n            var var10 = var6;\n            var var11 = var7;\n            var var12 = 0x00;\n        \n            if (var12 >= var9) {\n            label_033C:\n                var temp14 = var8;\n                var6 = temp14 + var6;\n                var7 = temp14 & 0x1f;\n            \n                if (!var7) {\n                    var temp15 = memory[0x40:0x60];\n                    return memory[temp15:temp15 + var6 - temp15];\n                } else {\n                    var temp16 = var7;\n                    var temp17 = var6 - temp16;\n                    memory[temp17:temp17 + 0x20] = ~(0x0100 ** (0x20 - temp16) - 0x01) & memory[temp17:temp17 + 0x20];\n                    var temp18 = memory[0x40:0x60];\n                    return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n                }\n            } else {\n            label_032A:\n                var temp19 = var12;\n                memory[var10 + temp19:var10 + temp19 + 0x20] = memory[var11 + temp19:var11 + temp19 + 0x20];\n                var12 = temp19 + 0x20;\n            \n                if (var12 >= var9) { goto label_033C; }\n                else { goto label_032A; }\n            }\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03b0;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            transferOwnership(var2);\n            stop();\n        } else if (var0 == 0xf34e3723) {\n            // Dispatch table entry for release(string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03de;\n            var temp20 = msg.data[0x04:0x24] + 0x04;\n            var3 = msg.data[temp20:temp20 + 0x20];\n            var2 = temp20 + 0x20;\n            release(var2, var3);\n            stop();\n        } else if (var0 == 0xf96f143e) {\n            // Dispatch table entry for RELEASE_GAS_FEES()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03f3;\n            var2 = RELEASE_GAS_FEES();\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = var2;\n            var temp22 = memory[0x40:0x60];\n            return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function reclaimToken(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x70a08231;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = address(this);\n        var var3 = temp1 + 0x20;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = 0x00;\n        var var9 = var1;\n    \n        if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        var1 = 0x0565;\n        var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var3 = storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var4 = var0;\n        func_1000(var2, var3, var4);\n    }\n    \n    function accumulatedGasFees() returns (var r0) { return storage[0x03]; }\n    \n    function deposit(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7) {\n        var var0 = 0x00;\n        var var1 = 0x0579;\n        var1 = func_1138();\n        var var2 = 0x00;\n    \n        if (msg.value != arg2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[arg0:arg0 + temp0];\n        var temp2 = temp1 + temp0;\n        memory[temp2:temp2 + 0x20] = 0x01;\n        var temp3 = memory[0x40:0x60];\n    \n        if (storage[keccak256(memory[temp3:temp3 + (temp2 + 0x20) - temp3])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = arg1;\n        var temp5 = arg4;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + temp4] = msg.data[arg0:arg0 + temp4];\n        var temp7 = temp6 + temp4;\n        memory[temp7:temp7 + 0x20] = arg2;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp5] = msg.data[arg3:arg3 + temp5];\n        var temp9 = memory[0x40:0x60];\n        var temp10 = keccak256(memory[temp9:temp9 + (temp8 + temp5) - temp9]);\n        var0 = temp10;\n        var temp11 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp11 + 0x40;\n        memory[temp11:temp11 + 0x20] = 0x1c;\n        memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        var1 = temp11;\n        var var3 = 0x01;\n        var var4 = var1;\n        var var5 = var0;\n        var var6 = memory[0x40:0x60];\n        var var7 = var6;\n        var var8 = var4 + 0x20;\n        var var9 = memory[var4:var4 + 0x20];\n        var var10 = var9;\n        var var11 = var7;\n        var var12 = var8;\n    \n        if (var10 < 0x20) {\n        label_0672:\n            var temp12 = 0x0100 ** (0x20 - var10) - 0x01;\n            var temp13 = var11;\n            memory[temp13:temp13 + 0x20] = (memory[var12:var12 + 0x20] & ~temp12) | (memory[temp13:temp13 + 0x20] & temp12);\n            var temp14 = var9 + var7;\n            memory[temp14:temp14 + 0x20] = var5;\n            var temp15 = memory[0x40:0x60];\n            var temp16 = keccak256(memory[temp15:temp15 + (temp14 + 0x20) - temp15]);\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp17 + 0x20;\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = temp16;\n            var temp19 = temp18 + 0x20;\n            memory[temp19:temp19 + 0x20] = arg5 & 0xff;\n            var temp20 = temp19 + 0x20;\n            memory[temp20:temp20 + 0x20] = arg6;\n            var temp21 = temp20 + 0x20;\n            memory[temp21:temp21 + 0x20] = arg7;\n            var4 = temp21 + 0x20;\n            var temp22 = memory[0x40:0x60];\n            var temp23;\n            temp23, memory[temp22 - 0x20:temp22 - 0x20 + 0x20] = address(var3).call.gas(msg.gas)(memory[temp22:temp22 + var4 - temp22]);\n        \n            if (!temp23) { revert(memory[0x00:0x00]); }\n        \n            var2 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20];\n        \n            if (var2 & 0xffffffffffffffffffffffffffffffffffffffff != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            var temp24 = memory[0x40:0x60];\n            var3 = temp24;\n            memory[0x40:0x60] = var3 + 0x80;\n            memory[var3:var3 + 0x20] = !!0x01;\n            var temp25 = var3 + 0x20;\n            memory[temp25:temp25 + 0x20] = msg.sender;\n            var temp26 = temp25 + 0x20;\n            var temp27 = arg4;\n            var temp28 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp28 + (temp27 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp28:temp28 + 0x20] = temp27;\n            memory[temp28 + 0x20:temp28 + 0x20 + temp27] = msg.data[arg3:arg3 + temp27];\n            memory[temp26:temp26 + 0x20] = temp28;\n            memory[temp26 + 0x20:temp26 + 0x20 + 0x20] = msg.value;\n            var temp29 = arg1;\n            var temp30 = memory[0x40:0x60];\n            memory[temp30:temp30 + temp29] = msg.data[arg0:arg0 + temp29];\n            var temp31 = temp30 + temp29;\n            memory[temp31:temp31 + 0x20] = 0x01;\n            var temp32 = memory[0x40:0x60];\n            var temp33 = keccak256(memory[temp32:temp32 + (temp31 + 0x20) - temp32]);\n            var4 = temp33;\n            var temp34 = var4;\n            storage[temp34] = !!memory[var3:var3 + 0x20] | (storage[temp34] & ~0xff);\n            var temp35 = var4;\n            storage[temp35] = (memory[var3 + 0x20:var3 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x01 | (storage[temp35] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n            var temp36 = memory[var3 + 0x40:var3 + 0x40 + 0x20];\n            var5 = 0x0898;\n            var6 = var4 + 0x01;\n            var7 = temp36 + 0x20;\n            var8 = memory[temp36:temp36 + 0x20];\n            var5 = func_114C(var6, var7, var8);\n            storage[var4 + 0x02] = memory[var3 + 0x60:var3 + 0x60 + 0x20];\n            var temp37 = arg1;\n            var temp38 = arg4;\n            var temp39 = memory[0x40:0x60];\n            var temp40 = temp39 + 0x20;\n            var temp41 = temp40 + 0x20;\n            memory[temp39:temp39 + 0x20] = temp41 - temp39;\n            memory[temp41:temp41 + 0x20] = temp37;\n            var temp42 = temp41 + 0x20;\n            memory[temp42:temp42 + temp37] = msg.data[arg0:arg0 + temp37];\n            var temp43 = temp42 + temp37;\n            memory[temp40:temp40 + 0x20] = temp43 - temp39;\n            memory[temp43:temp43 + 0x20] = temp38;\n            var temp44 = temp43 + 0x20;\n            memory[temp44:temp44 + temp38] = msg.data[arg3:arg3 + temp38];\n            var temp45 = memory[0x40:0x60];\n            log(memory[temp45:temp45 + (temp44 + temp38) - temp45], [0x932c935c3c9913ab1e795c885cfe0b18652738083fd94d8fdea1844950a5227c, msg.sender]);\n            return;\n        } else {\n        label_0658:\n            var temp46 = var12;\n            var temp47 = var11;\n            memory[temp47:temp47 + 0x20] = memory[temp46:temp46 + 0x20];\n            var11 = temp47 + 0x20;\n            var12 = temp46 + 0x20;\n            var10 = var10 - 0x20;\n        \n            if (var10 < 0x20) { goto label_0672; }\n            else { goto label_0658; }\n        }\n    }\n    \n    function arbitrator() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function setArbitrator(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function withdrawAccumulatedFees(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x03];\n        var0 = temp0;\n        storage[0x03] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getEscrowDeposit(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x0adf;\n        var1 = func_1138();\n        var var2 = 0x00;\n        var var3 = var2;\n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[arg0:arg0 + temp0];\n        var temp2 = temp1 + temp0;\n        memory[temp2:temp2 + 0x20] = 0x01;\n        var temp3 = memory[0x40:0x60];\n    \n        if (!(storage[keccak256(memory[temp3:temp3 + (temp2 + 0x20) - temp3])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = arg1;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + temp4] = msg.data[arg0:arg0 + temp4];\n        var temp6 = temp5 + temp4;\n        memory[temp6:temp6 + 0x20] = 0x01;\n        var temp7 = memory[0x40:0x60];\n        var temp8 = keccak256(memory[temp7:temp7 + (temp6 + 0x20) - temp7]);\n        var3 = temp8;\n        var0 = storage[var3] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp9 = var3 + 0x01;\n        var temp10 = storage[temp9];\n        var temp11 = (!(temp10 & 0x01) * 0x0100 - 0x01 & temp10) / 0x02;\n        var temp12 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp12 + (temp11 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var4 = temp12;\n        var var5 = temp9;\n        var var6 = temp11;\n        memory[var4:var4 + 0x20] = var6;\n        var var7 = var4 + 0x20;\n        var var8 = var5;\n        var temp13 = storage[var8];\n        var var9 = (!(temp13 & 0x01) * 0x0100 - 0x01 & temp13) / 0x02;\n    \n        if (!var9) {\n        label_0C09:\n            arg1 = storage[var3 + 0x02];\n            arg0 = var4;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else if (0x1f < var9) {\n            var temp14 = var7;\n            var temp15 = temp14 + var9;\n            var7 = temp15;\n            memory[0x00:0x20] = var8;\n            var temp16 = keccak256(memory[0x00:0x20]);\n            memory[temp14:temp14 + 0x20] = storage[temp16];\n            var8 = temp16 + 0x01;\n            var9 = temp14 + 0x20;\n        \n            if (var7 <= var9) { goto label_0C00; }\n        \n        label_0BEC:\n            var temp17 = var8;\n            var temp18 = var9;\n            memory[temp18:temp18 + 0x20] = storage[temp17];\n            var8 = temp17 + 0x01;\n            var9 = temp18 + 0x20;\n        \n            if (var7 > var9) { goto label_0BEC; }\n        \n        label_0C00:\n            var temp19 = var7;\n            var temp20 = temp19 + (var9 - temp19 & 0x1f);\n            var9 = temp19;\n            var7 = temp20;\n            goto label_0C09;\n        } else {\n            var temp21 = var7;\n            memory[temp21:temp21 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n            var7 = temp21 + 0x20;\n            var9 = var9;\n            goto label_0C09;\n        }\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function release(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[arg0:arg0 + temp0];\n        var temp2 = temp1 + temp0;\n        memory[temp2:temp2 + 0x20] = 0x01;\n        var temp3 = memory[0x40:0x60];\n    \n        if (!(storage[keccak256(memory[temp3:temp3 + (temp2 + 0x20) - temp3])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = arg1;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + temp4] = msg.data[arg0:arg0 + temp4];\n        var temp6 = temp5 + temp4;\n        memory[temp6:temp6 + 0x20] = 0x01;\n        var temp7 = memory[0x40:0x60];\n        var0 = keccak256(memory[temp7:temp7 + (temp6 + 0x20) - temp7]);\n        var var4 = 0x0e53;\n        var var5 = 0xb3a5;\n        var var6 = tx.gasprice;\n        var4 = func_10C6(var5, var6);\n        var temp8 = var4;\n        var1 = temp8;\n        var4 = 0x0e6c;\n        var5 = storage[var0 + 0x02];\n        var6 = var1;\n        var4 = func_1101(var5, var6);\n        var2 = var4;\n        var3 = storage[var0] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp9 = arg1;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + temp9] = msg.data[arg0:arg0 + temp9];\n        var temp11 = temp10 + temp9;\n        memory[temp11:temp11 + 0x20] = 0x01;\n        var temp12 = memory[0x40:0x60];\n        var temp13 = keccak256(memory[temp12:temp12 + (temp11 + 0x20) - temp12]);\n        var4 = temp13;\n        var5 = 0x00;\n        var temp14 = var4 + var5;\n        storage[temp14] = storage[temp14] & ~0xff;\n        var temp15 = var4;\n        storage[temp15] = storage[temp15] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01);\n        var6 = 0x0f06;\n        var var7 = var4 + 0x01;\n        var var8 = 0x00;\n        func_11CC(var7, var8);\n        storage[var4 + 0x02] = 0x00;\n        var4 = 0x0f25;\n        var5 = storage[0x03];\n        var6 = var1;\n        var4 = func_111A(var5, var6);\n        storage[0x03] = var4;\n        var temp16 = var2;\n        var temp17 = memory[0x40:0x60];\n        var temp18;\n        temp18, memory[temp17:temp17 + 0x00] = address(var3 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp16 * 0x08fc).value(temp16)(memory[temp17:temp17 + memory[0x40:0x60] - temp17]);\n    \n        if (!temp18) { revert(memory[0x00:0x00]); }\n    \n        var temp19 = arg1;\n        var temp20 = memory[0x40:0x60];\n        memory[temp20:temp20 + 0x20] = var2;\n        var temp21 = temp20 + 0x20;\n        var temp22 = temp21 + 0x20;\n        memory[temp21:temp21 + 0x20] = temp22 - temp20;\n        memory[temp22:temp22 + 0x20] = temp19;\n        var temp23 = temp22 + 0x20;\n        memory[temp23:temp23 + temp19] = msg.data[arg0:arg0 + temp19];\n        var temp24 = memory[0x40:0x60];\n        log(memory[temp24:temp24 + (temp23 + temp19) - temp24], [0xaded40980191268694a17a28cd3524dd9cedf6b82232ceb1af14363776500a56, msg.sender, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function RELEASE_GAS_FEES() returns (var r0) { return 0xb3a5; }\n    \n    function func_1000(var arg0, var arg1, var arg2) {\n        var var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = 0xa9059cbb;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2;\n        var var2 = temp2 + 0x20;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp3;\n        temp3, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { return; }\n        else { assert(); }\n    }\n    \n    function func_10C6(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 != 0x00) {\n            var temp0 = arg0;\n            var1 = temp0 * arg1;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_10FA:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_10FA;\n        }\n    }\n    \n    function func_1101(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_111A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1138() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_114C(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_11BB:\n                var temp4 = arg1;\n                arg1 = 0x11c8;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1214(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_11BA:\n                    goto label_11BB;\n                } else {\n                label_11A8:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_11BA; }\n                    else { goto label_11A8; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_11BB;\n        }\n    }\n    \n    function func_11CC(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        arg1 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        storage[temp0] = 0x00;\n    \n        if (0x1f >= arg1) { goto label_1211; }\n    \n        memory[0x00:0x20] = arg0;\n        arg0 = 0x1210;\n        arg1 = keccak256(memory[0x00:0x20]) + (arg1 + 0x1f) / 0x20;\n        var var0 = keccak256(memory[0x00:0x20]);\n        arg0 = func_1214(arg1, var0);\n    \n    label_1211:\n    }\n    \n    function func_1214(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1236;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_1232(arg1, var0); }\n    \n    label_1223:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_1223; }\n    \n        arg0 = func_1232(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1232(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x17ffc320) {\n            // Dispatch table entry for reclaimToken(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x00eb;\n            var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            reclaimToken(var2);\n            stop();\n        } else if (var0 == 0x180eebba) {\n            // Dispatch table entry for accumulatedGasFees()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0100;\n            var2 = accumulatedGasFees();\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var2;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n        } else if (var0 == 0x40b00033) {\n            // Dispatch table entry for deposit(string,uint256,bytes,uint8,bytes32,bytes32)\n            var1 = 0x017a;\n            var temp2 = msg.data[0x04:0x24] + 0x04;\n            var var3 = msg.data[temp2:temp2 + 0x20];\n            var2 = temp2 + 0x20;\n            var var4 = msg.data[0x24:0x44];\n            var temp3 = msg.data[0x44:0x64] + 0x04;\n            var var6 = msg.data[temp3:temp3 + 0x20];\n            var var5 = temp3 + 0x20;\n            var var7 = msg.data[0x64:0x84] & 0xff;\n            var var8 = msg.data[0x84:0xa4];\n            var var9 = msg.data[0xa4:0xc4];\n            deposit(var2, var3, var4, var5, var6, var7, var8, var9);\n            stop();\n        } else if (var0 == 0x6cc6cde1) {\n            // Dispatch table entry for arbitrator()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x018f;\n            var2 = arbitrator();\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01e4;\n            var2 = owner();\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n        } else if (var0 == 0xb0eefabe) {\n            // Dispatch table entry for setArbitrator(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            setArbitrator(var2);\n            stop();\n        } else if (var0 == 0xc1f10663) {\n            // Dispatch table entry for withdrawAccumulatedFees(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0296;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            withdrawAccumulatedFees(var2);\n            stop();\n        } else if (var0 == 0xc5ecfc61) {\n            // Dispatch table entry for getEscrowDeposit(string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c4;\n            var temp8 = msg.data[0x04:0x24] + 0x04;\n            var3 = msg.data[temp8:temp8 + 0x20];\n            var2 = temp8 + 0x20;\n            var1, var2, var3 = getEscrowDeposit(var2, var3);\n            var temp9 = memory[0x40:0x60];\n            var4 = temp9;\n            memory[var4:var4 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp10 = var4 + 0x20;\n            var5 = temp10;\n            var temp11 = var5 + 0x20;\n            memory[temp11:temp11 + 0x20] = var3;\n            var temp12 = temp11 + 0x20;\n            memory[var5:var5 + 0x20] = temp12 - var4;\n            var temp13 = var2;\n            memory[temp12:temp12 + 0x20] = memory[temp13:temp13 + 0x20];\n            var6 = temp12 + 0x20;\n            var8 = memory[temp13:temp13 + 0x20];\n            var7 = temp13 + 0x20;\n            var9 = var8;\n            var var10 = var6;\n            var var11 = var7;\n            var var12 = 0x00;\n        \n            if (var12 >= var9) {\n            label_033C:\n                var temp14 = var8;\n                var6 = temp14 + var6;\n                var7 = temp14 & 0x1f;\n            \n                if (!var7) {\n                    var temp15 = memory[0x40:0x60];\n                    return memory[temp15:temp15 + var6 - temp15];\n                } else {\n                    var temp16 = var7;\n                    var temp17 = var6 - temp16;\n                    memory[temp17:temp17 + 0x20] = ~(0x0100 ** (0x20 - temp16) - 0x01) & memory[temp17:temp17 + 0x20];\n                    var temp18 = memory[0x40:0x60];\n                    return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n                }\n            } else {\n            label_032A:\n                var temp19 = var12;\n                memory[var10 + temp19:var10 + temp19 + 0x20] = memory[var11 + temp19:var11 + temp19 + 0x20];\n                var12 = temp19 + 0x20;\n            \n                if (var12 >= var9) { goto label_033C; }\n                else { goto label_032A; }\n            }\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03b0;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            transferOwnership(var2);\n            stop();\n        } else if (var0 == 0xf34e3723) {\n            // Dispatch table entry for release(string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03de;\n            var temp20 = msg.data[0x04:0x24] + 0x04;\n            var3 = msg.data[temp20:temp20 + 0x20];\n            var2 = temp20 + 0x20;\n            release(var2, var3);\n            stop();\n        } else if (var0 == 0xf96f143e) {\n            // Dispatch table entry for RELEASE_GAS_FEES()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03f3;\n            var2 = RELEASE_GAS_FEES();\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = var2;\n            var temp22 = memory[0x40:0x60];\n            return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function reclaimToken(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x70a08231;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = address(this);\n        var var3 = temp1 + 0x20;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = 0x00;\n        var var9 = var1;\n    \n        if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        var1 = 0x0565;\n        var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var3 = storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var4 = var0;\n        func_1000(var2, var3, var4);\n    }\n    \n    function accumulatedGasFees() returns (var r0) { return storage[0x03]; }\n    \n    function deposit(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7) {\n        var var0 = 0x00;\n        var var1 = 0x0579;\n        var1 = func_1138();\n        var var2 = 0x00;\n    \n        if (msg.value != arg2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[arg0:arg0 + temp0];\n        var temp2 = temp1 + temp0;\n        memory[temp2:temp2 + 0x20] = 0x01;\n        var temp3 = memory[0x40:0x60];\n    \n        if (storage[keccak256(memory[temp3:temp3 + (temp2 + 0x20) - temp3])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = arg1;\n        var temp5 = arg4;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + temp4] = msg.data[arg0:arg0 + temp4];\n        var temp7 = temp6 + temp4;\n        memory[temp7:temp7 + 0x20] = arg2;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + temp5] = msg.data[arg3:arg3 + temp5];\n        var temp9 = memory[0x40:0x60];\n        var temp10 = keccak256(memory[temp9:temp9 + (temp8 + temp5) - temp9]);\n        var0 = temp10;\n        var temp11 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp11 + 0x40;\n        memory[temp11:temp11 + 0x20] = 0x1c;\n        memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        var1 = temp11;\n        var var3 = 0x01;\n        var var4 = var1;\n        var var5 = var0;\n        var var6 = memory[0x40:0x60];\n        var var7 = var6;\n        var var8 = var4 + 0x20;\n        var var9 = memory[var4:var4 + 0x20];\n        var var10 = var9;\n        var var11 = var7;\n        var var12 = var8;\n    \n        if (var10 < 0x20) {\n        label_0672:\n            var temp12 = 0x0100 ** (0x20 - var10) - 0x01;\n            var temp13 = var11;\n            memory[temp13:temp13 + 0x20] = (memory[var12:var12 + 0x20] & ~temp12) | (memory[temp13:temp13 + 0x20] & temp12);\n            var temp14 = var9 + var7;\n            memory[temp14:temp14 + 0x20] = var5;\n            var temp15 = memory[0x40:0x60];\n            var temp16 = keccak256(memory[temp15:temp15 + (temp14 + 0x20) - temp15]);\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp17 + 0x20;\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = temp16;\n            var temp19 = temp18 + 0x20;\n            memory[temp19:temp19 + 0x20] = arg5 & 0xff;\n            var temp20 = temp19 + 0x20;\n            memory[temp20:temp20 + 0x20] = arg6;\n            var temp21 = temp20 + 0x20;\n            memory[temp21:temp21 + 0x20] = arg7;\n            var4 = temp21 + 0x20;\n            var temp22 = memory[0x40:0x60];\n            var temp23;\n            temp23, memory[temp22 - 0x20:temp22 - 0x20 + 0x20] = address(var3).call.gas(msg.gas)(memory[temp22:temp22 + var4 - temp22]);\n        \n            if (!temp23) { revert(memory[0x00:0x00]); }\n        \n            var2 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20];\n        \n            if (var2 & 0xffffffffffffffffffffffffffffffffffffffff != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n        \n            var temp24 = memory[0x40:0x60];\n            var3 = temp24;\n            memory[0x40:0x60] = var3 + 0x80;\n            memory[var3:var3 + 0x20] = !!0x01;\n            var temp25 = var3 + 0x20;\n            memory[temp25:temp25 + 0x20] = msg.sender;\n            var temp26 = temp25 + 0x20;\n            var temp27 = arg4;\n            var temp28 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp28 + (temp27 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp28:temp28 + 0x20] = temp27;\n            memory[temp28 + 0x20:temp28 + 0x20 + temp27] = msg.data[arg3:arg3 + temp27];\n            memory[temp26:temp26 + 0x20] = temp28;\n            memory[temp26 + 0x20:temp26 + 0x20 + 0x20] = msg.value;\n            var temp29 = arg1;\n            var temp30 = memory[0x40:0x60];\n            memory[temp30:temp30 + temp29] = msg.data[arg0:arg0 + temp29];\n            var temp31 = temp30 + temp29;\n            memory[temp31:temp31 + 0x20] = 0x01;\n            var temp32 = memory[0x40:0x60];\n            var temp33 = keccak256(memory[temp32:temp32 + (temp31 + 0x20) - temp32]);\n            var4 = temp33;\n            var temp34 = var4;\n            storage[temp34] = !!memory[var3:var3 + 0x20] | (storage[temp34] & ~0xff);\n            var temp35 = var4;\n            storage[temp35] = (memory[var3 + 0x20:var3 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x01 | (storage[temp35] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n            var temp36 = memory[var3 + 0x40:var3 + 0x40 + 0x20];\n            var5 = 0x0898;\n            var6 = var4 + 0x01;\n            var7 = temp36 + 0x20;\n            var8 = memory[temp36:temp36 + 0x20];\n            var5 = func_114C(var6, var7, var8);\n            storage[var4 + 0x02] = memory[var3 + 0x60:var3 + 0x60 + 0x20];\n            var temp37 = arg1;\n            var temp38 = arg4;\n            var temp39 = memory[0x40:0x60];\n            var temp40 = temp39 + 0x20;\n            var temp41 = temp40 + 0x20;\n            memory[temp39:temp39 + 0x20] = temp41 - temp39;\n            memory[temp41:temp41 + 0x20] = temp37;\n            var temp42 = temp41 + 0x20;\n            memory[temp42:temp42 + temp37] = msg.data[arg0:arg0 + temp37];\n            var temp43 = temp42 + temp37;\n            memory[temp40:temp40 + 0x20] = temp43 - temp39;\n            memory[temp43:temp43 + 0x20] = temp38;\n            var temp44 = temp43 + 0x20;\n            memory[temp44:temp44 + temp38] = msg.data[arg3:arg3 + temp38];\n            var temp45 = memory[0x40:0x60];\n            log(memory[temp45:temp45 + (temp44 + temp38) - temp45], [0x932c935c3c9913ab1e795c885cfe0b18652738083fd94d8fdea1844950a5227c, msg.sender]);\n            return;\n        } else {\n        label_0658:\n            var temp46 = var12;\n            var temp47 = var11;\n            memory[temp47:temp47 + 0x20] = memory[temp46:temp46 + 0x20];\n            var11 = temp47 + 0x20;\n            var12 = temp46 + 0x20;\n            var10 = var10 - 0x20;\n        \n            if (var10 < 0x20) { goto label_0672; }\n            else { goto label_0658; }\n        }\n    }\n    \n    function arbitrator() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function setArbitrator(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function withdrawAccumulatedFees(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x03];\n        var0 = temp0;\n        storage[0x03] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getEscrowDeposit(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x0adf;\n        var1 = func_1138();\n        var var2 = 0x00;\n        var var3 = var2;\n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[arg0:arg0 + temp0];\n        var temp2 = temp1 + temp0;\n        memory[temp2:temp2 + 0x20] = 0x01;\n        var temp3 = memory[0x40:0x60];\n    \n        if (!(storage[keccak256(memory[temp3:temp3 + (temp2 + 0x20) - temp3])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = arg1;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + temp4] = msg.data[arg0:arg0 + temp4];\n        var temp6 = temp5 + temp4;\n        memory[temp6:temp6 + 0x20] = 0x01;\n        var temp7 = memory[0x40:0x60];\n        var temp8 = keccak256(memory[temp7:temp7 + (temp6 + 0x20) - temp7]);\n        var3 = temp8;\n        var0 = storage[var3] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp9 = var3 + 0x01;\n        var temp10 = storage[temp9];\n        var temp11 = (!(temp10 & 0x01) * 0x0100 - 0x01 & temp10) / 0x02;\n        var temp12 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp12 + (temp11 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var4 = temp12;\n        var var5 = temp9;\n        var var6 = temp11;\n        memory[var4:var4 + 0x20] = var6;\n        var var7 = var4 + 0x20;\n        var var8 = var5;\n        var temp13 = storage[var8];\n        var var9 = (!(temp13 & 0x01) * 0x0100 - 0x01 & temp13) / 0x02;\n    \n        if (!var9) {\n        label_0C09:\n            arg1 = storage[var3 + 0x02];\n            arg0 = var4;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else if (0x1f < var9) {\n            var temp14 = var7;\n            var temp15 = temp14 + var9;\n            var7 = temp15;\n            memory[0x00:0x20] = var8;\n            var temp16 = keccak256(memory[0x00:0x20]);\n            memory[temp14:temp14 + 0x20] = storage[temp16];\n            var8 = temp16 + 0x01;\n            var9 = temp14 + 0x20;\n        \n            if (var7 <= var9) { goto label_0C00; }\n        \n        label_0BEC:\n            var temp17 = var8;\n            var temp18 = var9;\n            memory[temp18:temp18 + 0x20] = storage[temp17];\n            var8 = temp17 + 0x01;\n            var9 = temp18 + 0x20;\n        \n            if (var7 > var9) { goto label_0BEC; }\n        \n        label_0C00:\n            var temp19 = var7;\n            var temp20 = temp19 + (var9 - temp19 & 0x1f);\n            var9 = temp19;\n            var7 = temp20;\n            goto label_0C09;\n        } else {\n            var temp21 = var7;\n            memory[temp21:temp21 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n            var7 = temp21 + 0x20;\n            var9 = var9;\n            goto label_0C09;\n        }\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function release(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (msg.sender != storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[arg0:arg0 + temp0];\n        var temp2 = temp1 + temp0;\n        memory[temp2:temp2 + 0x20] = 0x01;\n        var temp3 = memory[0x40:0x60];\n    \n        if (!(storage[keccak256(memory[temp3:temp3 + (temp2 + 0x20) - temp3])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = arg1;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + temp4] = msg.data[arg0:arg0 + temp4];\n        var temp6 = temp5 + temp4;\n        memory[temp6:temp6 + 0x20] = 0x01;\n        var temp7 = memory[0x40:0x60];\n        var0 = keccak256(memory[temp7:temp7 + (temp6 + 0x20) - temp7]);\n        var var4 = 0x0e53;\n        var var5 = 0xb3a5;\n        var var6 = tx.gasprice;\n        var4 = func_10C6(var5, var6);\n        var temp8 = var4;\n        var1 = temp8;\n        var4 = 0x0e6c;\n        var5 = storage[var0 + 0x02];\n        var6 = var1;\n        var4 = func_1101(var5, var6);\n        var2 = var4;\n        var3 = storage[var0] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp9 = arg1;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + temp9] = msg.data[arg0:arg0 + temp9];\n        var temp11 = temp10 + temp9;\n        memory[temp11:temp11 + 0x20] = 0x01;\n        var temp12 = memory[0x40:0x60];\n        var temp13 = keccak256(memory[temp12:temp12 + (temp11 + 0x20) - temp12]);\n        var4 = temp13;\n        var5 = 0x00;\n        var temp14 = var4 + var5;\n        storage[temp14] = storage[temp14] & ~0xff;\n        var temp15 = var4;\n        storage[temp15] = storage[temp15] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01);\n        var6 = 0x0f06;\n        var var7 = var4 + 0x01;\n        var var8 = 0x00;\n        func_11CC(var7, var8);\n        storage[var4 + 0x02] = 0x00;\n        var4 = 0x0f25;\n        var5 = storage[0x03];\n        var6 = var1;\n        var4 = func_111A(var5, var6);\n        storage[0x03] = var4;\n        var temp16 = var2;\n        var temp17 = memory[0x40:0x60];\n        var temp18;\n        temp18, memory[temp17:temp17 + 0x00] = address(var3 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp16 * 0x08fc).value(temp16)(memory[temp17:temp17 + memory[0x40:0x60] - temp17]);\n    \n        if (!temp18) { revert(memory[0x00:0x00]); }\n    \n        var temp19 = arg1;\n        var temp20 = memory[0x40:0x60];\n        memory[temp20:temp20 + 0x20] = var2;\n        var temp21 = temp20 + 0x20;\n        var temp22 = temp21 + 0x20;\n        memory[temp21:temp21 + 0x20] = temp22 - temp20;\n        memory[temp22:temp22 + 0x20] = temp19;\n        var temp23 = temp22 + 0x20;\n        memory[temp23:temp23 + temp19] = msg.data[arg0:arg0 + temp19];\n        var temp24 = memory[0x40:0x60];\n        log(memory[temp24:temp24 + (temp23 + temp19) - temp24], [0xaded40980191268694a17a28cd3524dd9cedf6b82232ceb1af14363776500a56, msg.sender, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function RELEASE_GAS_FEES() returns (var r0) { return 0xb3a5; }\n    \n    function func_1000(var arg0, var arg1, var arg2) {\n        var var0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = 0xa9059cbb;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2;\n        var var2 = temp2 + 0x20;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp3;\n        temp3, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { return; }\n        else { assert(); }\n    }\n    \n    function func_10C6(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 != 0x00) {\n            var temp0 = arg0;\n            var1 = temp0 * arg1;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_10FA:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_10FA;\n        }\n    }\n    \n    function func_1101(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_111A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1138() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_114C(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_11BB:\n                var temp4 = arg1;\n                arg1 = 0x11c8;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1214(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_11BA:\n                    goto label_11BB;\n                } else {\n                label_11A8:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_11BA; }\n                    else { goto label_11A8; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_11BB;\n        }\n    }\n    \n    function func_11CC(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        arg1 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        storage[temp0] = 0x00;\n    \n        if (0x1f >= arg1) { goto label_1211; }\n    \n        memory[0x00:0x20] = arg0;\n        arg0 = 0x1210;\n        arg1 = keccak256(memory[0x00:0x20]) + (arg1 + 0x1f) / 0x20;\n        var var0 = keccak256(memory[0x00:0x20]);\n        arg0 = func_1214(arg1, var0);\n    \n    label_1211:\n    }\n    \n    function func_1214(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1236;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_1232(arg1, var0); }\n    \n    label_1223:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_1223; }\n    \n        arg0 = func_1232(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1232(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 47.389976024627686,
	"usage": {
		"completion_tokens": 686,
		"prompt_tokens": 9203,
		"total_tokens": 9889
	}
}