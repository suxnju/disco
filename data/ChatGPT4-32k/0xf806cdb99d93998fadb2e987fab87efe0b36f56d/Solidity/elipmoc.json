{
	"address": "0xf806cdb99d93998fadb2e987fab87efe0b36f56d",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2022.11.19 16:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _price; // STORAGE[0x2]\nuint256 _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _azimuth; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nOwnershipRenounced(address);\nPlanetSold(uint32, uint32);\nOwnershipTransferred(address, address);\n\nfunction setPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 > 0);\n    _price = varg0;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction close(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    selfdestruct(varg0);\n}\n\nfunction purchase(uint32 varg0) public payable { \n    v0 = v1 = msg.value == _price;\n    if (v1) {\n        v0 = v2 = 0x5dc(varg0);\n    }\n    require(v0);\n    require(_azimuth.code.size);\n    v3, v4 = _azimuth.owner().gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require((address(v4)).code.size);\n    v5 = address(v4).spawn(varg0, this).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    require((address(v4)).code.size);\n    v6 = address(v4).transferPoint(varg0, msg.sender, 0).gas(msg.gas);\n    require(v6); // checks call status, propagates error data on error\n    require(_azimuth.code.size);\n    v7, v8 = _azimuth.getPrefix(varg0).gas(msg.gas);\n    require(v7); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    emit PlanetSold(uint16(v8), varg0);\n}\n\nfunction azimuth() public nonPayable { \n    return _azimuth;\n}\n\nfunction available(uint32 varg0) public nonPayable { \n    v0 = 0x5dc(varg0);\n    return v0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction 0x5dc(uint256 varg0) private { \n    v0 = uint32(varg0);\n    require(_azimuth.code.size);\n    v1, v2 = _azimuth.getPrefix(v0).gas(msg.gas);\n    require(v1); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    v3 = uint32(varg0);\n    require(_azimuth.code.size);\n    v4, v5 = _azimuth.isOwner(v3, 0).gas(msg.gas);\n    require(v4); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v5) {\n        require(_azimuth.code.size);\n        v6, v5 = _azimuth.isSpawnProxy(uint16(v2), this).gas(msg.gas);\n        require(v6); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n    }\n    if (v5) {\n        require(_azimuth.code.size);\n        v7, v5 = _azimuth.hasBeenLinked(uint16(v2)).gas(msg.gas);\n        require(v7); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n    }\n    return v5;\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction withdraw(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    v0 = varg0.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _owner);\n    emit OwnershipRenounced(_owner);\n    _owner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x51cff8d9) {\n            withdraw(address);\n        } else if (0x715018a6 == uint32(function_selector >> 224)) {\n            renounceOwnership();\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0x91b7f5ed == uint32(function_selector >> 224)) {\n            setPrice(uint256);\n        } else if (0xa035b1fe == uint32(function_selector >> 224)) {\n            price();\n        } else if (0xc74073a1 == uint32(function_selector >> 224)) {\n            close(address);\n        } else if (0xc7f04e65 == uint32(function_selector >> 224)) {\n            purchase(uint32);\n        } else if (0xd40ffacb == uint32(function_selector >> 224)) {\n            azimuth();\n        } else if (0xd57b4fca == uint32(function_selector >> 224)) {\n            available(uint32);\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            transferOwnership(address);\n        }\n    }\n    ();\n}\n",
	"language": "Solidity",
	"status": "Connection error."
}