{
	"address": "0x029606e5ec44cad1346d6a1273a53b971fa93ad6",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity version of the decompiled contract code. Note that the exact variable names used in the original contract may not be recoverable from the EVM Bytecode, but I used the names given in the decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n\n    uint256 private _totalSupply;\n    mapping (address => uint256) _balanceOf;\n    mapping (address => mapping (address => uint256)) _allowance;\n    mapping (address => uint256) _transfer;\n    address private _terminate;\n    bool private _isTradeable;\n\n    event ReceivedEth(address sender, uint256 value);\n    event TransferredEth(address recipient, uint256 value);\n    event Approval(address owner, address spender, uint256 value);\n    event Transfer(address from, address to, uint256 value);\n\n    constructor() public {\n        _terminate = msg.sender;\n    }\n\n    function() external payable {\n        emit ReceivedEth(msg.sender, msg.value);\n    }\n\n    function mintToken(uint256 amount) public {\n        require(_terminate == msg.sender, \"caller is not the owner\");\n        _totalSupply += amount;\n        _balanceOf[address(this)] += amount;\n        emit Transfer(address(0), address(this), amount);\n    }\n\n    // assuming v0 array stores a list of names\n    function name() public pure returns (string memory) {\n        return \"empowr orange\";\n    }\n\n    function foundationTransfer(address recipient, uint256 ethAmount, uint256 tokenAmount) public {\n        require(_terminate == msg.sender, \"caller is not the owner\");\n        require(address(this).balance >= ethAmount, \"insufficient eth balance\");\n        require(_balanceOf[address(this)] >= tokenAmount, \"insufficient token balance\");\n\n        if (ethAmount > 0) {\n            (bool success,) = recipient.call.value(ethAmount)(\"\");\n            require(success, \"eth transfer failed\");\n            emit TransferredEth(recipient, ethAmount);\n        }\n\n        if (tokenAmount > 0) {\n            _balanceOf[address(this)] -= tokenAmount;\n            _balanceOf[recipient] += tokenAmount;\n            emit Transfer(address(this), recipient, tokenAmount);\n        }\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    // assuming transferFrom implementation follows ERC20 standard\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= _balanceOf[from], \"insufficient balance\");\n        require(value <= _allowance[from][msg.sender], \"insufficient allowance\");\n        require(to != address(0), \"transfer to the zero address\");\n\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        _allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function lockAccount(address account) public {\n        require(_terminate == msg.sender, \"caller is not the owner\");\n        _transfer[account] = 1;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    // assuming BuyToken is a function to buy tokens from the contract\n    function buyToken(address buyer, uint256 amount, string memory data) public {\n        require(_terminate == msg.sender, \"caller is not the owner\");\n        require(_balanceOf[address(this)] >= amount, \"insufficient token balance\");\n\n        _balanceOf[address(this)] -= amount;\n        _balanceOf[buyer] += amount;\n        emit Transfer(address(this), buyer, amount);\n    }\n\n    function destroyToken(uint256 amount) public {\n        require(_terminate == msg.sender, \"caller is not the owner\");\n        require(_balanceOf[address(this)] >= amount, \"insufficient token balance\");\n\n        _totalSupply -= amount;\n        _balanceOf[address(this)] -= amount;\n        emit Transfer(address(this), address(0), amount);\n    }\n\n    function decreaseApproval(address spender, uint256 value) public returns (bool) {\n        require(_allowance[msg.sender][spender] >= value, \"insufficient allowance\");\n        _allowance[msg.sender][spender] -= value;\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n        return true;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function transferOwner(address newOwner) public {\n        require(_terminate == msg.sender, \"caller is not the owner\");\n        _terminate = newOwner;\n    }\n\n    function isTradeable() public view returns (bool) {\n        return _isTradeable;\n    }\n\n    function setTradeable(bool tradeable) public {\n        require(_terminate == msg.sender, \"caller is not the owner\");\n        _isTradeable = tradeable;\n    }\n\n    function terminate() public {\n        require(_terminate == msg.sender, \"caller is not the owner\");\n        selfdestruct(msg.sender);\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"EMPRO\";\n    }\n\n    // assuming transfer implementation follows ERC20 standard\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(value <= _balanceOf[msg.sender], \"insufficient balance\");\n        require(to != address(0), \"transfer to the zero address\");\n\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function unlockAccount(address account) public {\n        require(_terminate == msg.sender, \"caller is not the owner\");\n        _transfer[account] = 0;\n    }\n\n    function increaseApproval(address spender, uint256 value) public returns (bool) {\n        require(value + _allowance[msg.sender][spender] >= _allowance[msg.sender][spender], \"increaseApproval overflows\");\n        _allowance[msg.sender][spender] += value;\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n        return true;\n    }\n\n    function isOwner(address account) public view returns (bool) {\n        return _terminate == account;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n}\n```\nThis version of the contract is simplified and has several assumptions based on standard ERC20 contracts. It does not include the `__function_selector__` function or the decompiled code for the `name`, `BuyToken`, and `symbol` functions as these involve low-level memory operations that are not directly translatable to Solidity.",
				"role": "assistant"
			}
		}
	],
	"created": 1701466829,
	"id": "chatcmpl-8R5XJjcTe6BA9hZPbKUvIrQtmASGU",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 05:19 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _transfer; // STORAGE[0x4]\naddress _terminate; // STORAGE[0x0] bytes 0 to 19\nuint8 _isTradeable; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nReceivedEth(address, uint256);\nTransferredEth(address, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    emit ReceivedEth(msg.sender, msg.value);\n}\n\nfunction MintToken(uint256 varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    require(_balanceOf[address(this)] + varg0 >= _balanceOf[address(this)]);\n    _totalSupply += varg0;\n    _balanceOf[address(this)] += varg0;\n    emit Transfer(0, address(this), varg0);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (13) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffff & 'empowr orange';\n    }\n    return v0;\n}\n\nfunction FoundationTransfer(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    require(_terminate == msg.sender);\n    v0 = v1 = (address(this)).balance >= varg1;\n    if (v1) {\n        v0 = _balanceOf[address(this)] >= varg2;\n    }\n    require(v0);\n    if (varg1 > 0) {\n        v2 = varg0.call().value(varg1).gas(2300 * !varg1);\n        require(v2);\n        emit TransferredEth(varg0, varg1);\n    }\n    if (varg2 > 0) {\n        require(_balanceOf[varg0] + varg2 > _balanceOf[varg0]);\n        _balanceOf[address(this)] = _balanceOf[address(this)] - varg2;\n        _balanceOf[varg0] += varg2;\n        emit Transfer(address(this), varg0, varg2);\n    }\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!(0xff & _transfer[msg.sender]));\n    v0 = v1 = !(0xff & _transfer[varg0]);\n    if (v1) {\n        v0 = !(0xff & _transfer[varg1]);\n    }\n    require(v0);\n    require(_isTradeable);\n    v2 = v3 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v2 = v4 = _allowance[msg.sender] >= varg2;\n    }\n    if (v2) {\n        v2 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v2) {\n        v5 = v6 = 0;\n    } else {\n        emit Transfer(varg0, varg1, varg2);\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        _allowance[varg1] += varg2;\n        v5 = v7 = 1;\n    }\n    return v5;\n}\n\nfunction LockAccount(address varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    _transfer[varg0] = 0x1 | ~0xff & _transfer[varg0];\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction BuyToken(address varg0, uint256 varg1, string varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    require(_terminate == msg.sender);\n    v1 = v2 = _balanceOf[address(this)] >= varg1;\n    if (_balanceOf[address(this)] >= varg1) {\n        v1 = v3 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    require(v1);\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    emit 0x307f82a1d7930932f894f6f841bd41285da9d1374694c831ad1efa591139316(varg0, varg1, v4);\n    _balanceOf[address(this)] = _balanceOf[address(this)] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction DestroyToken(uint256 varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    require(_balanceOf[address(this)] >= varg0);\n    _totalSupply = _totalSupply - varg0;\n    _balanceOf[address(this)] = _balanceOf[address(this)] - varg0;\n    emit Transfer(address(this), 0, varg0);\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction TransferOwner(address varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    _terminate = varg0;\n}\n\nfunction IsTradeable() public nonPayable { \n    return _isTradeable;\n}\n\nfunction SetTradeable(bool varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    _isTradeable = varg0;\n}\n\nfunction Terminate() public nonPayable { \n    require(_terminate == msg.sender);\n    selfdestruct(_terminate);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'EMPRO';\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!(0xff & _transfer[msg.sender]));\n    require(_isTradeable);\n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0x7390xd6dB0x419;\n    } else {\n        emit Transfer(msg.sender, varg0, varg1);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction UnlockAccount(address varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    _transfer[varg0] = ~0xff & _transfer[varg0];\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    _allowance[varg0] += varg1;\n    emit Approval(msg.sender, varg0, varg1 + _allowance[varg0]);\n    return 1;\n}\n\nfunction IsOwner(address varg0) public nonPayable { \n    return _terminate == varg0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x5297781) {\n            MintToken(uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x730a322 == function_selector) {\n            FoundationTransfer(address,uint256,uint256);\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e42b012 == function_selector) {\n            LockAccount(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x321de1d4 == function_selector) {\n            BuyToken(address,uint256,string);\n        } else if (0x5daf8a71 == function_selector) {\n            DestroyToken(uint256);\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x858ac4d8 == function_selector) {\n            TransferOwner(address);\n        } else if (0x8aa99826 == function_selector) {\n            IsTradeable();\n        } else if (0x8e3bd6fa == function_selector) {\n            SetTradeable(bool);\n        } else if (0x9445eb3a == function_selector) {\n            Terminate();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb9c97a44 == function_selector) {\n            UnlockAccount(address);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd0860a8 == function_selector) {\n            IsOwner(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 05:19 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _transfer; // STORAGE[0x4]\naddress _terminate; // STORAGE[0x0] bytes 0 to 19\nuint8 _isTradeable; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nReceivedEth(address, uint256);\nTransferredEth(address, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    emit ReceivedEth(msg.sender, msg.value);\n}\n\nfunction MintToken(uint256 varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    require(_balanceOf[address(this)] + varg0 >= _balanceOf[address(this)]);\n    _totalSupply += varg0;\n    _balanceOf[address(this)] += varg0;\n    emit Transfer(0, address(this), varg0);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (13) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffff & 'empowr orange';\n    }\n    return v0;\n}\n\nfunction FoundationTransfer(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    require(_terminate == msg.sender);\n    v0 = v1 = (address(this)).balance >= varg1;\n    if (v1) {\n        v0 = _balanceOf[address(this)] >= varg2;\n    }\n    require(v0);\n    if (varg1 > 0) {\n        v2 = varg0.call().value(varg1).gas(2300 * !varg1);\n        require(v2);\n        emit TransferredEth(varg0, varg1);\n    }\n    if (varg2 > 0) {\n        require(_balanceOf[varg0] + varg2 > _balanceOf[varg0]);\n        _balanceOf[address(this)] = _balanceOf[address(this)] - varg2;\n        _balanceOf[varg0] += varg2;\n        emit Transfer(address(this), varg0, varg2);\n    }\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!(0xff & _transfer[msg.sender]));\n    v0 = v1 = !(0xff & _transfer[varg0]);\n    if (v1) {\n        v0 = !(0xff & _transfer[varg1]);\n    }\n    require(v0);\n    require(_isTradeable);\n    v2 = v3 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v2 = v4 = _allowance[msg.sender] >= varg2;\n    }\n    if (v2) {\n        v2 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v2) {\n        v5 = v6 = 0;\n    } else {\n        emit Transfer(varg0, varg1, varg2);\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        _allowance[varg1] += varg2;\n        v5 = v7 = 1;\n    }\n    return v5;\n}\n\nfunction LockAccount(address varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    _transfer[varg0] = 0x1 | ~0xff & _transfer[varg0];\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction BuyToken(address varg0, uint256 varg1, string varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    require(_terminate == msg.sender);\n    v1 = v2 = _balanceOf[address(this)] >= varg1;\n    if (_balanceOf[address(this)] >= varg1) {\n        v1 = v3 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    require(v1);\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    emit 0x307f82a1d7930932f894f6f841bd41285da9d1374694c831ad1efa591139316(varg0, varg1, v4);\n    _balanceOf[address(this)] = _balanceOf[address(this)] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction DestroyToken(uint256 varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    require(_balanceOf[address(this)] >= varg0);\n    _totalSupply = _totalSupply - varg0;\n    _balanceOf[address(this)] = _balanceOf[address(this)] - varg0;\n    emit Transfer(address(this), 0, varg0);\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction TransferOwner(address varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    _terminate = varg0;\n}\n\nfunction IsTradeable() public nonPayable { \n    return _isTradeable;\n}\n\nfunction SetTradeable(bool varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    _isTradeable = varg0;\n}\n\nfunction Terminate() public nonPayable { \n    require(_terminate == msg.sender);\n    selfdestruct(_terminate);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'EMPRO';\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!(0xff & _transfer[msg.sender]));\n    require(_isTradeable);\n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0x7390xd6dB0x419;\n    } else {\n        emit Transfer(msg.sender, varg0, varg1);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction UnlockAccount(address varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    _transfer[varg0] = ~0xff & _transfer[varg0];\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    _allowance[varg0] += varg1;\n    emit Approval(msg.sender, varg0, varg1 + _allowance[varg0]);\n    return 1;\n}\n\nfunction IsOwner(address varg0) public nonPayable { \n    return _terminate == varg0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x5297781) {\n            MintToken(uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x730a322 == function_selector) {\n            FoundationTransfer(address,uint256,uint256);\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e42b012 == function_selector) {\n            LockAccount(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x321de1d4 == function_selector) {\n            BuyToken(address,uint256,string);\n        } else if (0x5daf8a71 == function_selector) {\n            DestroyToken(uint256);\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x858ac4d8 == function_selector) {\n            TransferOwner(address);\n        } else if (0x8aa99826 == function_selector) {\n            IsTradeable();\n        } else if (0x8e3bd6fa == function_selector) {\n            SetTradeable(bool);\n        } else if (0x9445eb3a == function_selector) {\n            Terminate();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb9c97a44 == function_selector) {\n            UnlockAccount(address);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd0860a8 == function_selector) {\n            IsOwner(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 05:19 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _transfer; // STORAGE[0x4]\naddress _terminate; // STORAGE[0x0] bytes 0 to 19\nuint8 _isTradeable; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nReceivedEth(address, uint256);\nTransferredEth(address, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    emit ReceivedEth(msg.sender, msg.value);\n}\n\nfunction MintToken(uint256 varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    require(_balanceOf[address(this)] + varg0 >= _balanceOf[address(this)]);\n    _totalSupply += varg0;\n    _balanceOf[address(this)] += varg0;\n    emit Transfer(0, address(this), varg0);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (13) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffff & 'empowr orange';\n    }\n    return v0;\n}\n\nfunction FoundationTransfer(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    require(_terminate == msg.sender);\n    v0 = v1 = (address(this)).balance >= varg1;\n    if (v1) {\n        v0 = _balanceOf[address(this)] >= varg2;\n    }\n    require(v0);\n    if (varg1 > 0) {\n        v2 = varg0.call().value(varg1).gas(2300 * !varg1);\n        require(v2);\n        emit TransferredEth(varg0, varg1);\n    }\n    if (varg2 > 0) {\n        require(_balanceOf[varg0] + varg2 > _balanceOf[varg0]);\n        _balanceOf[address(this)] = _balanceOf[address(this)] - varg2;\n        _balanceOf[varg0] += varg2;\n        emit Transfer(address(this), varg0, varg2);\n    }\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!(0xff & _transfer[msg.sender]));\n    v0 = v1 = !(0xff & _transfer[varg0]);\n    if (v1) {\n        v0 = !(0xff & _transfer[varg1]);\n    }\n    require(v0);\n    require(_isTradeable);\n    v2 = v3 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v2 = v4 = _allowance[msg.sender] >= varg2;\n    }\n    if (v2) {\n        v2 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v2) {\n        v5 = v6 = 0;\n    } else {\n        emit Transfer(varg0, varg1, varg2);\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        _allowance[varg1] += varg2;\n        v5 = v7 = 1;\n    }\n    return v5;\n}\n\nfunction LockAccount(address varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    _transfer[varg0] = 0x1 | ~0xff & _transfer[varg0];\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction BuyToken(address varg0, uint256 varg1, string varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    require(_terminate == msg.sender);\n    v1 = v2 = _balanceOf[address(this)] >= varg1;\n    if (_balanceOf[address(this)] >= varg1) {\n        v1 = v3 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    require(v1);\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    emit 0x307f82a1d7930932f894f6f841bd41285da9d1374694c831ad1efa591139316(varg0, varg1, v4);\n    _balanceOf[address(this)] = _balanceOf[address(this)] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction DestroyToken(uint256 varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    require(_balanceOf[address(this)] >= varg0);\n    _totalSupply = _totalSupply - varg0;\n    _balanceOf[address(this)] = _balanceOf[address(this)] - varg0;\n    emit Transfer(address(this), 0, varg0);\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction TransferOwner(address varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    _terminate = varg0;\n}\n\nfunction IsTradeable() public nonPayable { \n    return _isTradeable;\n}\n\nfunction SetTradeable(bool varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    _isTradeable = varg0;\n}\n\nfunction Terminate() public nonPayable { \n    require(_terminate == msg.sender);\n    selfdestruct(_terminate);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'EMPRO';\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!(0xff & _transfer[msg.sender]));\n    require(_isTradeable);\n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0x7390xd6dB0x419;\n    } else {\n        emit Transfer(msg.sender, varg0, varg1);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction UnlockAccount(address varg0) public nonPayable { \n    require(_terminate == msg.sender);\n    _transfer[varg0] = ~0xff & _transfer[varg0];\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    _allowance[varg0] += varg1;\n    emit Approval(msg.sender, varg0, varg1 + _allowance[varg0]);\n    return 1;\n}\n\nfunction IsOwner(address varg0) public nonPayable { \n    return _terminate == varg0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x5297781) {\n            MintToken(uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x730a322 == function_selector) {\n            FoundationTransfer(address,uint256,uint256);\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e42b012 == function_selector) {\n            LockAccount(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x321de1d4 == function_selector) {\n            BuyToken(address,uint256,string);\n        } else if (0x5daf8a71 == function_selector) {\n            DestroyToken(uint256);\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x858ac4d8 == function_selector) {\n            TransferOwner(address);\n        } else if (0x8aa99826 == function_selector) {\n            IsTradeable();\n        } else if (0x8e3bd6fa == function_selector) {\n            SetTradeable(bool);\n        } else if (0x9445eb3a == function_selector) {\n            Terminate();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb9c97a44 == function_selector) {\n            UnlockAccount(address);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd0860a8 == function_selector) {\n            IsOwner(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 63.72396397590637,
	"usage": {
		"completion_tokens": 1439,
		"prompt_tokens": 2776,
		"total_tokens": 4215
	}
}