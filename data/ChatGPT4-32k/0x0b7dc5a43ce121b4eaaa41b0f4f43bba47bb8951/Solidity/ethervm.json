{
	"address": "0x0b7dc5a43ce121b4eaaa41b0f4f43bba47bb8951",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The above code is a decompiled code from EVM Bytecode. Here's a Solidity contract which represents a similar structure to the original code. Please note that the exact code might differ as it is not possible to convert bytecode to the original source code due to loss of variable names, comments, and spaces.\n\n```solidity\npragma solidity >=0.6.0 <0.8.0;\n\ncontract MyContract {\n\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowance;\n    \n    uint256 public totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    address public accessPolicy;\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balances[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    function setAccessPolicy(address _accessPolicy) public {\n        accessPolicy = _accessPolicy;\n    }\n    \n    function withdraw(uint256 amount) public {\n        require(balances[msg.sender] >= amount);\n        balances[msg.sender] -= amount;\n        msg.sender.transfer(amount);\n    }\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function reclaim(address _from) public {\n        require(_from != address(0));\n        balances[_from] = 0;\n    }\n}\n```\n\nThis contract contains methods for a token, including transfer, approve, transferFrom, balanceOf, setAccessPolicy, withdraw, deposit, and reclaim. However, due to the loss of original contract structure, it is not possible to provide an exact match to the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471466,
	"id": "chatcmpl-8Mub4eywER3tAKEHCezIsg5utJkNn",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012b;\n            var1 = name();\n        \n        label_012B:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x20;\n            var temp1 = var1;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n            var var2 = temp0;\n            var var3 = var2;\n            var var4 = var3 + 0x40;\n            var var6 = memory[temp1:temp1 + 0x20];\n            var var5 = temp1 + 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_0165:\n                var temp2 = var6;\n                var4 = temp2 + var4;\n                var5 = temp2 & 0x1f;\n            \n                if (!var5) {\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + var4 - temp3];\n                } else {\n                    var temp4 = var5;\n                    var temp5 = var4 - temp4;\n                    memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                    var temp6 = memory[0x40:0x60];\n                    return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                }\n            } else {\n            label_0156:\n                var temp7 = var10;\n                memory[temp7 + var8:temp7 + var8 + 0x20] = memory[temp7 + var9:temp7 + var9 + 0x20];\n                var10 = temp7 + 0x20;\n            \n                if (var10 >= var7) { goto label_0165; }\n                else { goto label_0156; }\n            }\n        } else if (var0 == 0x095ea7b3) {\n            // Dispatch table entry for approve(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01c4;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = approve(var2, var3);\n        \n        label_01C4:\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = !!var1;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ed;\n            var1 = totalSupply();\n        \n        label_01ED:\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var1;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n        } else if (var0 == 0x23b872dd) {\n            // Dispatch table entry for transferFrom(address,address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01c4;\n            var temp12 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp12 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp12;\n            var4 = msg.data[0x44:0x64];\n            var1 = transferFrom(var2, var3, var4);\n            goto label_01C4;\n        } else if (var0 == 0x2e1a7d4d) {\n            // Dispatch table entry for withdraw(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0241;\n            var2 = msg.data[0x04:0x24];\n            withdraw(var2);\n            stop();\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0258;\n            var1 = decimals();\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = var1 & 0xff;\n            var temp14 = memory[0x40:0x60];\n            return memory[temp14:temp14 + temp13 - temp14 + 0x20];\n        } else if (var0 == 0x54fd4d50) {\n            // Dispatch table entry for version()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012b;\n            var1 = version();\n            goto label_012B;\n        } else if (var0 == 0x57875631) {\n            // Dispatch table entry for setAccessPolicy(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0241;\n            var temp15 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp15 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp15;\n            setAccessPolicy(var2, var3);\n            stop();\n        } else if (var0 == 0x64663ea6) {\n            // Dispatch table entry for withdrawAndSend(address,uint256)\n            var1 = 0x0241;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            withdrawAndSend(var2, var3);\n            stop();\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ed;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = balanceOf(var2);\n            goto label_01ED;\n        } else if (var0 == 0x8291286c) {\n            // Dispatch table entry for contractId()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02f7;\n            var1, var2 = contractId();\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = var1;\n            memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = var2;\n            var temp17 = memory[0x40:0x60];\n            return memory[temp17:temp17 + temp16 - temp17 + 0x40];\n        } else if (var0 == 0x926c196a) {\n            // Dispatch table entry for depositAndTransfer(address,uint256,bytes)\n            var temp18 = memory[0x40:0x60];\n            var temp19 = msg.data[0x44:0x64];\n            var temp20 = msg.data[temp19 + 0x04:temp19 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp18 + (temp20 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp18:temp18 + 0x20] = temp20;\n            var1 = 0x0241;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            memory[temp18 + 0x20:temp18 + 0x20 + temp20] = msg.data[temp19 + 0x24:temp19 + 0x24 + temp20];\n            var4 = temp18;\n            var5 = 0x0b16;\n            func_1060();\n            var5 = 0x0ac6;\n            var6 = var2;\n            var7 = var3;\n            var8 = var4;\n            var5 = transfer(var6, var7, var8);\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012b;\n            var1 = symbol();\n            goto label_012B;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01c4;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            goto label_01C4;\n        } else if (var0 == 0xbe45fd62) {\n            // Dispatch table entry for transfer(address,uint256,bytes)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp21 = memory[0x40:0x60];\n            var temp22 = msg.data[0x44:0x64];\n            var temp23 = msg.data[temp22 + 0x04:temp22 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp21 + (temp23 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp21:temp21 + 0x20] = temp23;\n            var1 = 0x01c4;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            memory[temp21 + 0x20:temp21 + 0x20 + temp23] = msg.data[temp22 + 0x24:temp22 + 0x24 + temp23];\n            var4 = temp21;\n            var1 = transfer(var2, var3, var4);\n            goto label_01C4;\n        } else if (var0 == 0xcae9ca51) {\n            // Dispatch table entry for approveAndCall(address,uint256,bytes)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp24 = memory[0x40:0x60];\n            var temp25 = msg.data[0x44:0x64];\n            var temp26 = msg.data[temp25 + 0x04:temp25 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp24 + (temp26 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp24:temp24 + 0x20] = temp26;\n            var1 = 0x01c4;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            memory[temp24 + 0x20:temp24 + 0x20 + temp26] = msg.data[temp25 + 0x24:temp25 + 0x24 + temp26];\n            var4 = temp24;\n            var1 = approveAndCall(var2, var3, var4);\n            goto label_01C4;\n        } else if (var0 == 0xd0e30db0) {\n            // Dispatch table entry for deposit()\n            var1 = 0x0241;\n            deposit();\n            stop();\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ed;\n            var temp27 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp27 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp27;\n            var1 = allowance(var2, var3);\n            goto label_01ED;\n        } else if (var0 == 0xf5d60a51) {\n            // Dispatch table entry for accessPolicy()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var1 = accessPolicy();\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            var temp29 = memory[0x40:0x60];\n            return memory[temp29:temp29 + temp28 - temp29 + 0x20];\n        } else if (var0 == 0xfc772c8b) {\n            // Dispatch table entry for reclaim(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0241;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            reclaim(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x04;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0584:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_057B; }\n        \n        label_0567:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0567; }\n        \n        label_057B:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0584;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0584;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x059b;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        var1 = func_0EB1(var2, var3, var4);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = !arg1;\n    \n        if (!var1) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp6;\n            var1 = !storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var1) { goto label_05E7; }\n            else { goto label_05DB; }\n        } else if (!var1) {\n        label_05E7:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = temp1;\n            var temp3 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp3;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp3;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n        label_05DB:\n            var1 = 0x05e5;\n            var2 = msg.sender;\n            var3 = arg0;\n            var1 = func_0EBA(var2, var3);\n            var1 = !var1;\n            goto label_05E7;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x066c;\n        var var3 = arg0;\n        var var4 = msg.sender;\n        var2 = func_0EBA(var3, var4);\n        var1 = var2;\n    \n        if (!var1) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp0;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = storage[temp1];\n            var temp3 = arg2;\n            var1 = temp2;\n            storage[temp1] = var1 - temp3;\n        \n            if (var1 >= temp3) { goto label_06AF; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1 >= arg2) {\n        label_06AF:\n            var2 = 0x06ba;\n            var3 = arg0;\n            var4 = arg1;\n            var var5 = arg2;\n            func_0EC2(var3, var4, var5);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function withdraw(var arg0) {\n        var var0 = 0x06ce;\n        var var1 = arg0;\n        func_0F99(var1);\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg0;\n        var temp2;\n        temp2, memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n        var0 = !temp2;\n    \n        if (!var0) { return; }\n    \n        var temp3 = returndata.length;\n        memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x06] & 0xff; }\n    \n    function version() returns (var r0) {\n        var temp0 = storage[0x07];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x07;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0584:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_057B; }\n        \n        label_0567:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0567; }\n        \n        label_057B:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0584;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0584;\n        }\n    }\n    \n    function setAccessPolicy(var arg0, var arg1) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x9085b77f00000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = msg.data[0x00:0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var var0 = 0x00;\n        var var1 = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n        var var2 = storage[0x03] & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x9085b77f;\n        var var4 = temp0 + 0x84;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = temp0 - var6 + 0x84;\n        var var8 = var6;\n        var var9 = var0;\n        var var10 = var2;\n        var var11 = !address(var10).code.length;\n    \n        if (var11) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n        var5 = !temp1;\n    \n        if (!var5) {\n            var2 = memory[0x40:0x60];\n            var3 = returndata.length;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[var2:var2 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x9085b77f00000000000000000000000000000000000000000000000000000000;\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = temp3 & arg1;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = address(this);\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = msg.data[0x00:0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n            var2 = arg0 & temp3;\n            var3 = 0x9085b77f;\n            var4 = temp2 + 0x84;\n            var5 = 0x20;\n            var6 = memory[0x40:0x60];\n            var7 = temp2 - var6 + 0x84;\n            var9 = 0x00;\n            var8 = var6;\n            var10 = var2;\n            var11 = !address(var10).code.length;\n        \n            if (var11) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n            var5 = !temp4;\n        \n            if (!var5) {\n                var2 = memory[0x40:0x60];\n                var3 = returndata.length;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (!memory[var2:var2 + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = storage[0x03];\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                var temp7 = temp6 & arg0;\n                storage[0x03] = temp7 | (temp5 & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = msg.sender;\n                memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp5 & temp6;\n                memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = temp7;\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + temp8 - temp9 + 0x60], [0x7d475c32583df95fccc34a6e12df24c1fc9943092cc129b6512013aecba0f136]);\n                return;\n            } else {\n                var temp10 = returndata.length;\n                memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp11 = returndata.length;\n            memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function withdrawAndSend(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (arg1 < msg.value) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x10;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x4e465f45545f4e4f5f4445504f53495400000000000000000000000000000000;\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n        } else if (arg1 <= msg.value) {\n        label_0A50:\n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg1;\n            memory[temp0:temp0 + 0x20] = temp1;\n            var temp2 = memory[0x40:0x60];\n            var temp3 = arg0;\n            log(memory[temp2:temp2 + temp0 - temp2 + 0x20], [0x091fc40d7b9ba377824e29fcbd06fb23a78e65c0b32f9a52590aacfdef076616, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(temp3 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp4:temp4 + 0x00]);\n            var var1 = !temp5;\n        \n            if (!var1) { return; }\n        \n            var temp6 = returndata.length;\n            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var0 = arg1 - msg.value;\n            var1 = 0x0a50;\n            var var2 = var0;\n            func_0F99(var2);\n            goto label_0A50;\n        }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function contractId() returns (var r0, var r1) {\n        r1 = 0x00;\n        r0 = 0x75b86bc24f77738576716a36431588ae768d80d077231d1661c2bea674c6373a;\n        return r0, r1;\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x05];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x05;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0584:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_057B; }\n        \n        label_0567:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0567; }\n        \n        label_057B:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0584;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0584;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b8f;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0EC2(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0ba5;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0EC2(var2, var3, var4);\n        var1 = 0x0bae;\n        var2 = arg0;\n        var1 = func_10D2(var2);\n    \n        if (!var1) {\n        label_0CB2:\n            return 0x01;\n        } else {\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0xc0ee0b8a;\n            var3 = msg.sender;\n            var4 = arg1;\n            var temp0 = arg2;\n            var var5 = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp2 = temp1 + 0x04;\n            var var6 = temp2;\n            memory[var6:var6 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var temp3 = var6 + 0x20;\n            memory[temp3:temp3 + 0x20] = var4;\n            var temp4 = temp3 + 0x20;\n            var var7 = temp4;\n            var temp5 = var7 + 0x20;\n            memory[var7:var7 + 0x20] = temp5 - var6;\n            memory[temp5:temp5 + 0x20] = memory[var5:var5 + 0x20];\n            var var8 = temp5 + 0x20;\n            var var9 = var5 + 0x20;\n            var var10 = memory[var5:var5 + 0x20];\n            var var11 = var10;\n            var var12 = var8;\n            var var13 = var9;\n            var var14 = 0x00;\n        \n            if (var14 >= var11) {\n            label_0C4B:\n                var temp6 = var10;\n                var8 = temp6 + var8;\n                var9 = temp6 & 0x1f;\n            \n                if (!var9) {\n                    var3 = var8;\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                    var10 = !address(var9).code.length;\n                \n                    if (var10) { revert(memory[0x00:0x00]); }\n                \n                label_0C99:\n                    var temp7;\n                    temp7, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                    var4 = !temp7;\n                \n                    if (!var4) { goto label_0CB2; }\n                \n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                } else {\n                    var temp9 = var9;\n                    var temp10 = var8 - temp9;\n                    memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                    var3 = temp10 + 0x20;\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                    var10 = !address(var9).code.length;\n                \n                    if (!var10) { goto label_0C99; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_0C3C:\n                var temp11 = var14;\n                memory[temp11 + var12:temp11 + var12 + 0x20] = memory[temp11 + var13:temp11 + var13 + 0x20];\n                var14 = temp11 + 0x20;\n            \n                if (var14 >= var11) { goto label_0C4B; }\n                else { goto label_0C3C; }\n            }\n        }\n    }\n    \n    function approveAndCall(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0cc8;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = approve(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x8f4ffcb100000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = arg1;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x80;\n        var temp1 = arg2;\n        memory[temp0 + 0x84:temp0 + 0x84 + 0x20] = memory[temp1:temp1 + 0x20];\n        var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var2 = 0x8f4ffcb1;\n        var3 = msg.sender;\n        var var4 = arg1;\n        var var5 = address(this);\n        var var6 = temp1;\n        var var7 = temp0 + 0x04;\n        var var8 = temp0 + 0x64;\n        var var9 = temp0 + 0xa4;\n        var var10 = var6 + 0x20;\n        var var11 = memory[var6:var6 + 0x20];\n        var var12 = var11;\n        var var13 = var9;\n        var var14 = var10;\n        var var15 = 0x00;\n    \n        if (var15 >= var12) {\n        label_0D66:\n            var temp2 = var11;\n            var9 = temp2 + var9;\n            var10 = temp2 & 0x1f;\n        \n            if (!var10) {\n                var3 = var9;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n            label_0DB5:\n                var temp3;\n                temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp3;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[var1:var1 + 0x20];\n                \n                    if (var0) { return 0x01; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp4 = returndata.length;\n                    memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp5 = var10;\n                var temp6 = var9 - temp5;\n                memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                var3 = temp6 + 0x20;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (!var10) { goto label_0DB5; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0D57:\n            var temp7 = var15;\n            memory[temp7 + var13:temp7 + var13 + 0x20] = memory[temp7 + var14:temp7 + var14 + 0x20];\n            var15 = temp7 + 0x20;\n        \n            if (var15 >= var12) { goto label_0D66; }\n            else { goto label_0D57; }\n        }\n    }\n    \n    function deposit() {\n        var var0 = 0x0df7;\n        func_1060();\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, msg.sender]);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0e3e;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_0EBA(var3, var4);\n        var1 = var2;\n    \n        if (var1 > 0x00) { return var1; }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function accessPolicy() returns (var r0) { return storage[0x03] & 0x02 ** 0xa0 - 0x01; }\n    \n    function reclaim(var arg0) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x0eae;\n        var var1 = arg0;\n        func_10DA(var1);\n    }\n    \n    function func_0EB1(var arg0, var arg1, var arg2) returns (var r0) { return 0x01; }\n    \n    function func_0EBA(var arg0, var arg1) returns (var r0) { return 0x00; }\n    \n    function func_0EC2(var arg0, var arg1, var arg2) {\n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x0ee2;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = arg2;\n        var0 = func_0EB1(var1, var2, var3);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var0 = 0x0f10;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_1354(var1, var2);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        memory[0x00:0x20] = arg1 & temp0;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x0f3f;\n        var2 = arg2;\n        var0 = func_1366(var1, var2);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg1 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_0F99(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x0fcf;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_1354(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x01];\n        var0 = 0x0fec;\n        var2 = arg0;\n        var0 = func_1354(var1, var2);\n        storage[0x01] = var0;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg0;\n        memory[temp0:temp0 + 0x20] = temp1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp0 - temp2 + 0x20], [0xb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e91, msg.sender]);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0x00]);\n    }\n    \n    function func_1060() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x107a;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_1366(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x01];\n        var0 = 0x1097;\n        var2 = msg.value;\n        var0 = func_1366(var1, var2);\n        storage[0x01] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x1b851e1031ef35a238e6c67d0c7991162390df915f70eaf9098dbf0b175a6198, msg.sender]);\n    }\n    \n    function func_10D2(var arg0) returns (var r0) { return address(arg0).code.length > 0x00; }\n    \n    function func_10DA(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x9085b77f00000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = msg.data[0x00:0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\n        var var3 = storage[0x03] & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x9085b77f;\n        var var5 = temp0 + 0x84;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = temp0 - var7 + 0x84;\n        var var9 = var7;\n        var var10 = var1;\n        var var11 = var3;\n        var var12 = !address(var11).code.length;\n    \n        if (var12) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n        var6 = !temp1;\n    \n        if (!var6) {\n            var3 = memory[0x40:0x60];\n            var4 = returndata.length;\n        \n            if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[var3:var3 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.sender;\n        \n            if (arg0 & 0x02 ** 0xa0 - 0x01) {\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = address(this);\n                var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n                var4 = 0x70a08231;\n                var5 = temp2 + 0x24;\n                var6 = 0x20;\n                var7 = memory[0x40:0x60];\n                var8 = temp2 - var7 + 0x24;\n                var9 = var7;\n                var10 = 0x00;\n                var11 = var3;\n                var12 = !address(var11).code.length;\n            \n                if (var12) { revert(memory[0x00:0x00]); }\n            \n                var temp3;\n                temp3, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n                var6 = !temp3;\n            \n                if (!var6) {\n                    var3 = memory[0x40:0x60];\n                    var4 = returndata.length;\n                \n                    if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp4 = memory[var3:var3 + 0x20];\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n                    var temp6 = 0x02 ** 0xa0 - 0x01;\n                    memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = temp6 & var0;\n                    memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = temp4;\n                    var1 = temp4;\n                    var3 = arg0 & temp6;\n                    var4 = 0xa9059cbb;\n                    var5 = temp5 + 0x44;\n                    var6 = 0x20;\n                    var7 = memory[0x40:0x60];\n                    var8 = temp5 - var7 + 0x44;\n                    var9 = var7;\n                    var10 = 0x00;\n                    var11 = var3;\n                    var12 = !address(var11).code.length;\n                \n                    if (var12) { revert(memory[0x00:0x00]); }\n                \n                    var temp7;\n                    temp7, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n                    var6 = !temp7;\n                \n                    if (!var6) {\n                        var3 = memory[0x40:0x60];\n                        var4 = returndata.length;\n                    \n                        if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        if (!memory[var3:var3 + 0x20]) { revert(memory[0x00:0x00]); }\n                    \n                    label_0AC6:\n                        return;\n                    } else {\n                        var temp8 = returndata.length;\n                        memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp9 = returndata.length;\n                    memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp10 = memory[0x40:0x60];\n                var temp11 = address(this).balance;\n                var temp12;\n                temp12, memory[temp10:temp10 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp10:temp10 + 0x00]);\n                var3 = !temp12;\n            \n                if (!var3) { goto label_0AC6; }\n            \n                var temp13 = returndata.length;\n                memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp14 = returndata.length;\n            memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_1354(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1366(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012b;\n            var1 = name();\n        \n        label_012B:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x20;\n            var temp1 = var1;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n            var var2 = temp0;\n            var var3 = var2;\n            var var4 = var3 + 0x40;\n            var var6 = memory[temp1:temp1 + 0x20];\n            var var5 = temp1 + 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_0165:\n                var temp2 = var6;\n                var4 = temp2 + var4;\n                var5 = temp2 & 0x1f;\n            \n                if (!var5) {\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + var4 - temp3];\n                } else {\n                    var temp4 = var5;\n                    var temp5 = var4 - temp4;\n                    memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                    var temp6 = memory[0x40:0x60];\n                    return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                }\n            } else {\n            label_0156:\n                var temp7 = var10;\n                memory[temp7 + var8:temp7 + var8 + 0x20] = memory[temp7 + var9:temp7 + var9 + 0x20];\n                var10 = temp7 + 0x20;\n            \n                if (var10 >= var7) { goto label_0165; }\n                else { goto label_0156; }\n            }\n        } else if (var0 == 0x095ea7b3) {\n            // Dispatch table entry for approve(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01c4;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = approve(var2, var3);\n        \n        label_01C4:\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = !!var1;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ed;\n            var1 = totalSupply();\n        \n        label_01ED:\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var1;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n        } else if (var0 == 0x23b872dd) {\n            // Dispatch table entry for transferFrom(address,address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01c4;\n            var temp12 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp12 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp12;\n            var4 = msg.data[0x44:0x64];\n            var1 = transferFrom(var2, var3, var4);\n            goto label_01C4;\n        } else if (var0 == 0x2e1a7d4d) {\n            // Dispatch table entry for withdraw(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0241;\n            var2 = msg.data[0x04:0x24];\n            withdraw(var2);\n            stop();\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0258;\n            var1 = decimals();\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = var1 & 0xff;\n            var temp14 = memory[0x40:0x60];\n            return memory[temp14:temp14 + temp13 - temp14 + 0x20];\n        } else if (var0 == 0x54fd4d50) {\n            // Dispatch table entry for version()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012b;\n            var1 = version();\n            goto label_012B;\n        } else if (var0 == 0x57875631) {\n            // Dispatch table entry for setAccessPolicy(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0241;\n            var temp15 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp15 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp15;\n            setAccessPolicy(var2, var3);\n            stop();\n        } else if (var0 == 0x64663ea6) {\n            // Dispatch table entry for withdrawAndSend(address,uint256)\n            var1 = 0x0241;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            withdrawAndSend(var2, var3);\n            stop();\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ed;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = balanceOf(var2);\n            goto label_01ED;\n        } else if (var0 == 0x8291286c) {\n            // Dispatch table entry for contractId()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02f7;\n            var1, var2 = contractId();\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = var1;\n            memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = var2;\n            var temp17 = memory[0x40:0x60];\n            return memory[temp17:temp17 + temp16 - temp17 + 0x40];\n        } else if (var0 == 0x926c196a) {\n            // Dispatch table entry for depositAndTransfer(address,uint256,bytes)\n            var temp18 = memory[0x40:0x60];\n            var temp19 = msg.data[0x44:0x64];\n            var temp20 = msg.data[temp19 + 0x04:temp19 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp18 + (temp20 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp18:temp18 + 0x20] = temp20;\n            var1 = 0x0241;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            memory[temp18 + 0x20:temp18 + 0x20 + temp20] = msg.data[temp19 + 0x24:temp19 + 0x24 + temp20];\n            var4 = temp18;\n            var5 = 0x0b16;\n            func_1060();\n            var5 = 0x0ac6;\n            var6 = var2;\n            var7 = var3;\n            var8 = var4;\n            var5 = transfer(var6, var7, var8);\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012b;\n            var1 = symbol();\n            goto label_012B;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01c4;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            goto label_01C4;\n        } else if (var0 == 0xbe45fd62) {\n            // Dispatch table entry for transfer(address,uint256,bytes)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp21 = memory[0x40:0x60];\n            var temp22 = msg.data[0x44:0x64];\n            var temp23 = msg.data[temp22 + 0x04:temp22 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp21 + (temp23 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp21:temp21 + 0x20] = temp23;\n            var1 = 0x01c4;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            memory[temp21 + 0x20:temp21 + 0x20 + temp23] = msg.data[temp22 + 0x24:temp22 + 0x24 + temp23];\n            var4 = temp21;\n            var1 = transfer(var2, var3, var4);\n            goto label_01C4;\n        } else if (var0 == 0xcae9ca51) {\n            // Dispatch table entry for approveAndCall(address,uint256,bytes)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp24 = memory[0x40:0x60];\n            var temp25 = msg.data[0x44:0x64];\n            var temp26 = msg.data[temp25 + 0x04:temp25 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp24 + (temp26 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp24:temp24 + 0x20] = temp26;\n            var1 = 0x01c4;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            memory[temp24 + 0x20:temp24 + 0x20 + temp26] = msg.data[temp25 + 0x24:temp25 + 0x24 + temp26];\n            var4 = temp24;\n            var1 = approveAndCall(var2, var3, var4);\n            goto label_01C4;\n        } else if (var0 == 0xd0e30db0) {\n            // Dispatch table entry for deposit()\n            var1 = 0x0241;\n            deposit();\n            stop();\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ed;\n            var temp27 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp27 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp27;\n            var1 = allowance(var2, var3);\n            goto label_01ED;\n        } else if (var0 == 0xf5d60a51) {\n            // Dispatch table entry for accessPolicy()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var1 = accessPolicy();\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            var temp29 = memory[0x40:0x60];\n            return memory[temp29:temp29 + temp28 - temp29 + 0x20];\n        } else if (var0 == 0xfc772c8b) {\n            // Dispatch table entry for reclaim(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0241;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            reclaim(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x04;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0584:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_057B; }\n        \n        label_0567:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0567; }\n        \n        label_057B:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0584;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0584;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x059b;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        var1 = func_0EB1(var2, var3, var4);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = !arg1;\n    \n        if (!var1) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp6;\n            var1 = !storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var1) { goto label_05E7; }\n            else { goto label_05DB; }\n        } else if (!var1) {\n        label_05E7:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = temp1;\n            var temp3 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp3;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp3;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n        label_05DB:\n            var1 = 0x05e5;\n            var2 = msg.sender;\n            var3 = arg0;\n            var1 = func_0EBA(var2, var3);\n            var1 = !var1;\n            goto label_05E7;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x066c;\n        var var3 = arg0;\n        var var4 = msg.sender;\n        var2 = func_0EBA(var3, var4);\n        var1 = var2;\n    \n        if (!var1) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp0;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = storage[temp1];\n            var temp3 = arg2;\n            var1 = temp2;\n            storage[temp1] = var1 - temp3;\n        \n            if (var1 >= temp3) { goto label_06AF; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1 >= arg2) {\n        label_06AF:\n            var2 = 0x06ba;\n            var3 = arg0;\n            var4 = arg1;\n            var var5 = arg2;\n            func_0EC2(var3, var4, var5);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function withdraw(var arg0) {\n        var var0 = 0x06ce;\n        var var1 = arg0;\n        func_0F99(var1);\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg0;\n        var temp2;\n        temp2, memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n        var0 = !temp2;\n    \n        if (!var0) { return; }\n    \n        var temp3 = returndata.length;\n        memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x06] & 0xff; }\n    \n    function version() returns (var r0) {\n        var temp0 = storage[0x07];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x07;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0584:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_057B; }\n        \n        label_0567:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0567; }\n        \n        label_057B:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0584;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0584;\n        }\n    }\n    \n    function setAccessPolicy(var arg0, var arg1) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x9085b77f00000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = msg.data[0x00:0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var var0 = 0x00;\n        var var1 = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n        var var2 = storage[0x03] & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x9085b77f;\n        var var4 = temp0 + 0x84;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = temp0 - var6 + 0x84;\n        var var8 = var6;\n        var var9 = var0;\n        var var10 = var2;\n        var var11 = !address(var10).code.length;\n    \n        if (var11) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n        var5 = !temp1;\n    \n        if (!var5) {\n            var2 = memory[0x40:0x60];\n            var3 = returndata.length;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[var2:var2 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x9085b77f00000000000000000000000000000000000000000000000000000000;\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = temp3 & arg1;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = address(this);\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = msg.data[0x00:0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n            var2 = arg0 & temp3;\n            var3 = 0x9085b77f;\n            var4 = temp2 + 0x84;\n            var5 = 0x20;\n            var6 = memory[0x40:0x60];\n            var7 = temp2 - var6 + 0x84;\n            var9 = 0x00;\n            var8 = var6;\n            var10 = var2;\n            var11 = !address(var10).code.length;\n        \n            if (var11) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n            var5 = !temp4;\n        \n            if (!var5) {\n                var2 = memory[0x40:0x60];\n                var3 = returndata.length;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (!memory[var2:var2 + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = storage[0x03];\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                var temp7 = temp6 & arg0;\n                storage[0x03] = temp7 | (temp5 & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = msg.sender;\n                memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp5 & temp6;\n                memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = temp7;\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + temp8 - temp9 + 0x60], [0x7d475c32583df95fccc34a6e12df24c1fc9943092cc129b6512013aecba0f136]);\n                return;\n            } else {\n                var temp10 = returndata.length;\n                memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp11 = returndata.length;\n            memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function withdrawAndSend(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (arg1 < msg.value) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x10;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x4e465f45545f4e4f5f4445504f53495400000000000000000000000000000000;\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n        } else if (arg1 <= msg.value) {\n        label_0A50:\n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg1;\n            memory[temp0:temp0 + 0x20] = temp1;\n            var temp2 = memory[0x40:0x60];\n            var temp3 = arg0;\n            log(memory[temp2:temp2 + temp0 - temp2 + 0x20], [0x091fc40d7b9ba377824e29fcbd06fb23a78e65c0b32f9a52590aacfdef076616, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(temp3 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp4:temp4 + 0x00]);\n            var var1 = !temp5;\n        \n            if (!var1) { return; }\n        \n            var temp6 = returndata.length;\n            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var0 = arg1 - msg.value;\n            var1 = 0x0a50;\n            var var2 = var0;\n            func_0F99(var2);\n            goto label_0A50;\n        }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function contractId() returns (var r0, var r1) {\n        r1 = 0x00;\n        r0 = 0x75b86bc24f77738576716a36431588ae768d80d077231d1661c2bea674c6373a;\n        return r0, r1;\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x05];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x05;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0584:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_057B; }\n        \n        label_0567:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0567; }\n        \n        label_057B:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0584;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0584;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b8f;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0EC2(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0ba5;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0EC2(var2, var3, var4);\n        var1 = 0x0bae;\n        var2 = arg0;\n        var1 = func_10D2(var2);\n    \n        if (!var1) {\n        label_0CB2:\n            return 0x01;\n        } else {\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0xc0ee0b8a;\n            var3 = msg.sender;\n            var4 = arg1;\n            var temp0 = arg2;\n            var var5 = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp2 = temp1 + 0x04;\n            var var6 = temp2;\n            memory[var6:var6 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var temp3 = var6 + 0x20;\n            memory[temp3:temp3 + 0x20] = var4;\n            var temp4 = temp3 + 0x20;\n            var var7 = temp4;\n            var temp5 = var7 + 0x20;\n            memory[var7:var7 + 0x20] = temp5 - var6;\n            memory[temp5:temp5 + 0x20] = memory[var5:var5 + 0x20];\n            var var8 = temp5 + 0x20;\n            var var9 = var5 + 0x20;\n            var var10 = memory[var5:var5 + 0x20];\n            var var11 = var10;\n            var var12 = var8;\n            var var13 = var9;\n            var var14 = 0x00;\n        \n            if (var14 >= var11) {\n            label_0C4B:\n                var temp6 = var10;\n                var8 = temp6 + var8;\n                var9 = temp6 & 0x1f;\n            \n                if (!var9) {\n                    var3 = var8;\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                    var10 = !address(var9).code.length;\n                \n                    if (var10) { revert(memory[0x00:0x00]); }\n                \n                label_0C99:\n                    var temp7;\n                    temp7, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                    var4 = !temp7;\n                \n                    if (!var4) { goto label_0CB2; }\n                \n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                } else {\n                    var temp9 = var9;\n                    var temp10 = var8 - temp9;\n                    memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                    var3 = temp10 + 0x20;\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                    var10 = !address(var9).code.length;\n                \n                    if (!var10) { goto label_0C99; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_0C3C:\n                var temp11 = var14;\n                memory[temp11 + var12:temp11 + var12 + 0x20] = memory[temp11 + var13:temp11 + var13 + 0x20];\n                var14 = temp11 + 0x20;\n            \n                if (var14 >= var11) { goto label_0C4B; }\n                else { goto label_0C3C; }\n            }\n        }\n    }\n    \n    function approveAndCall(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0cc8;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = approve(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x8f4ffcb100000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = arg1;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x80;\n        var temp1 = arg2;\n        memory[temp0 + 0x84:temp0 + 0x84 + 0x20] = memory[temp1:temp1 + 0x20];\n        var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var2 = 0x8f4ffcb1;\n        var3 = msg.sender;\n        var var4 = arg1;\n        var var5 = address(this);\n        var var6 = temp1;\n        var var7 = temp0 + 0x04;\n        var var8 = temp0 + 0x64;\n        var var9 = temp0 + 0xa4;\n        var var10 = var6 + 0x20;\n        var var11 = memory[var6:var6 + 0x20];\n        var var12 = var11;\n        var var13 = var9;\n        var var14 = var10;\n        var var15 = 0x00;\n    \n        if (var15 >= var12) {\n        label_0D66:\n            var temp2 = var11;\n            var9 = temp2 + var9;\n            var10 = temp2 & 0x1f;\n        \n            if (!var10) {\n                var3 = var9;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n            label_0DB5:\n                var temp3;\n                temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp3;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[var1:var1 + 0x20];\n                \n                    if (var0) { return 0x01; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp4 = returndata.length;\n                    memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp5 = var10;\n                var temp6 = var9 - temp5;\n                memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                var3 = temp6 + 0x20;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (!var10) { goto label_0DB5; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0D57:\n            var temp7 = var15;\n            memory[temp7 + var13:temp7 + var13 + 0x20] = memory[temp7 + var14:temp7 + var14 + 0x20];\n            var15 = temp7 + 0x20;\n        \n            if (var15 >= var12) { goto label_0D66; }\n            else { goto label_0D57; }\n        }\n    }\n    \n    function deposit() {\n        var var0 = 0x0df7;\n        func_1060();\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, msg.sender]);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0e3e;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_0EBA(var3, var4);\n        var1 = var2;\n    \n        if (var1 > 0x00) { return var1; }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function accessPolicy() returns (var r0) { return storage[0x03] & 0x02 ** 0xa0 - 0x01; }\n    \n    function reclaim(var arg0) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x0eae;\n        var var1 = arg0;\n        func_10DA(var1);\n    }\n    \n    function func_0EB1(var arg0, var arg1, var arg2) returns (var r0) { return 0x01; }\n    \n    function func_0EBA(var arg0, var arg1) returns (var r0) { return 0x00; }\n    \n    function func_0EC2(var arg0, var arg1, var arg2) {\n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x0ee2;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = arg2;\n        var0 = func_0EB1(var1, var2, var3);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var0 = 0x0f10;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_1354(var1, var2);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        memory[0x00:0x20] = arg1 & temp0;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x0f3f;\n        var2 = arg2;\n        var0 = func_1366(var1, var2);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg1 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_0F99(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x0fcf;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_1354(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x01];\n        var0 = 0x0fec;\n        var2 = arg0;\n        var0 = func_1354(var1, var2);\n        storage[0x01] = var0;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg0;\n        memory[temp0:temp0 + 0x20] = temp1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp0 - temp2 + 0x20], [0xb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e91, msg.sender]);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0x00]);\n    }\n    \n    function func_1060() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x107a;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_1366(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x01];\n        var0 = 0x1097;\n        var2 = msg.value;\n        var0 = func_1366(var1, var2);\n        storage[0x01] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x1b851e1031ef35a238e6c67d0c7991162390df915f70eaf9098dbf0b175a6198, msg.sender]);\n    }\n    \n    function func_10D2(var arg0) returns (var r0) { return address(arg0).code.length > 0x00; }\n    \n    function func_10DA(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x9085b77f00000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = msg.data[0x00:0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\n        var var3 = storage[0x03] & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x9085b77f;\n        var var5 = temp0 + 0x84;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = temp0 - var7 + 0x84;\n        var var9 = var7;\n        var var10 = var1;\n        var var11 = var3;\n        var var12 = !address(var11).code.length;\n    \n        if (var12) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n        var6 = !temp1;\n    \n        if (!var6) {\n            var3 = memory[0x40:0x60];\n            var4 = returndata.length;\n        \n            if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[var3:var3 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.sender;\n        \n            if (arg0 & 0x02 ** 0xa0 - 0x01) {\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = address(this);\n                var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n                var4 = 0x70a08231;\n                var5 = temp2 + 0x24;\n                var6 = 0x20;\n                var7 = memory[0x40:0x60];\n                var8 = temp2 - var7 + 0x24;\n                var9 = var7;\n                var10 = 0x00;\n                var11 = var3;\n                var12 = !address(var11).code.length;\n            \n                if (var12) { revert(memory[0x00:0x00]); }\n            \n                var temp3;\n                temp3, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n                var6 = !temp3;\n            \n                if (!var6) {\n                    var3 = memory[0x40:0x60];\n                    var4 = returndata.length;\n                \n                    if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp4 = memory[var3:var3 + 0x20];\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n                    var temp6 = 0x02 ** 0xa0 - 0x01;\n                    memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = temp6 & var0;\n                    memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = temp4;\n                    var1 = temp4;\n                    var3 = arg0 & temp6;\n                    var4 = 0xa9059cbb;\n                    var5 = temp5 + 0x44;\n                    var6 = 0x20;\n                    var7 = memory[0x40:0x60];\n                    var8 = temp5 - var7 + 0x44;\n                    var9 = var7;\n                    var10 = 0x00;\n                    var11 = var3;\n                    var12 = !address(var11).code.length;\n                \n                    if (var12) { revert(memory[0x00:0x00]); }\n                \n                    var temp7;\n                    temp7, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n                    var6 = !temp7;\n                \n                    if (!var6) {\n                        var3 = memory[0x40:0x60];\n                        var4 = returndata.length;\n                    \n                        if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        if (!memory[var3:var3 + 0x20]) { revert(memory[0x00:0x00]); }\n                    \n                    label_0AC6:\n                        return;\n                    } else {\n                        var temp8 = returndata.length;\n                        memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp9 = returndata.length;\n                    memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp10 = memory[0x40:0x60];\n                var temp11 = address(this).balance;\n                var temp12;\n                temp12, memory[temp10:temp10 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp10:temp10 + 0x00]);\n                var3 = !temp12;\n            \n                if (!var3) { goto label_0AC6; }\n            \n                var temp13 = returndata.length;\n                memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp14 = returndata.length;\n            memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_1354(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1366(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012b;\n            var1 = name();\n        \n        label_012B:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x20;\n            var temp1 = var1;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n            var var2 = temp0;\n            var var3 = var2;\n            var var4 = var3 + 0x40;\n            var var6 = memory[temp1:temp1 + 0x20];\n            var var5 = temp1 + 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_0165:\n                var temp2 = var6;\n                var4 = temp2 + var4;\n                var5 = temp2 & 0x1f;\n            \n                if (!var5) {\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + var4 - temp3];\n                } else {\n                    var temp4 = var5;\n                    var temp5 = var4 - temp4;\n                    memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                    var temp6 = memory[0x40:0x60];\n                    return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                }\n            } else {\n            label_0156:\n                var temp7 = var10;\n                memory[temp7 + var8:temp7 + var8 + 0x20] = memory[temp7 + var9:temp7 + var9 + 0x20];\n                var10 = temp7 + 0x20;\n            \n                if (var10 >= var7) { goto label_0165; }\n                else { goto label_0156; }\n            }\n        } else if (var0 == 0x095ea7b3) {\n            // Dispatch table entry for approve(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01c4;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = approve(var2, var3);\n        \n        label_01C4:\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = !!var1;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ed;\n            var1 = totalSupply();\n        \n        label_01ED:\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = var1;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n        } else if (var0 == 0x23b872dd) {\n            // Dispatch table entry for transferFrom(address,address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01c4;\n            var temp12 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp12 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp12;\n            var4 = msg.data[0x44:0x64];\n            var1 = transferFrom(var2, var3, var4);\n            goto label_01C4;\n        } else if (var0 == 0x2e1a7d4d) {\n            // Dispatch table entry for withdraw(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0241;\n            var2 = msg.data[0x04:0x24];\n            withdraw(var2);\n            stop();\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0258;\n            var1 = decimals();\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = var1 & 0xff;\n            var temp14 = memory[0x40:0x60];\n            return memory[temp14:temp14 + temp13 - temp14 + 0x20];\n        } else if (var0 == 0x54fd4d50) {\n            // Dispatch table entry for version()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012b;\n            var1 = version();\n            goto label_012B;\n        } else if (var0 == 0x57875631) {\n            // Dispatch table entry for setAccessPolicy(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0241;\n            var temp15 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp15 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp15;\n            setAccessPolicy(var2, var3);\n            stop();\n        } else if (var0 == 0x64663ea6) {\n            // Dispatch table entry for withdrawAndSend(address,uint256)\n            var1 = 0x0241;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            withdrawAndSend(var2, var3);\n            stop();\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ed;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = balanceOf(var2);\n            goto label_01ED;\n        } else if (var0 == 0x8291286c) {\n            // Dispatch table entry for contractId()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02f7;\n            var1, var2 = contractId();\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = var1;\n            memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = var2;\n            var temp17 = memory[0x40:0x60];\n            return memory[temp17:temp17 + temp16 - temp17 + 0x40];\n        } else if (var0 == 0x926c196a) {\n            // Dispatch table entry for depositAndTransfer(address,uint256,bytes)\n            var temp18 = memory[0x40:0x60];\n            var temp19 = msg.data[0x44:0x64];\n            var temp20 = msg.data[temp19 + 0x04:temp19 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp18 + (temp20 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp18:temp18 + 0x20] = temp20;\n            var1 = 0x0241;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            memory[temp18 + 0x20:temp18 + 0x20 + temp20] = msg.data[temp19 + 0x24:temp19 + 0x24 + temp20];\n            var4 = temp18;\n            var5 = 0x0b16;\n            func_1060();\n            var5 = 0x0ac6;\n            var6 = var2;\n            var7 = var3;\n            var8 = var4;\n            var5 = transfer(var6, var7, var8);\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x012b;\n            var1 = symbol();\n            goto label_012B;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01c4;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            goto label_01C4;\n        } else if (var0 == 0xbe45fd62) {\n            // Dispatch table entry for transfer(address,uint256,bytes)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp21 = memory[0x40:0x60];\n            var temp22 = msg.data[0x44:0x64];\n            var temp23 = msg.data[temp22 + 0x04:temp22 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp21 + (temp23 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp21:temp21 + 0x20] = temp23;\n            var1 = 0x01c4;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            memory[temp21 + 0x20:temp21 + 0x20 + temp23] = msg.data[temp22 + 0x24:temp22 + 0x24 + temp23];\n            var4 = temp21;\n            var1 = transfer(var2, var3, var4);\n            goto label_01C4;\n        } else if (var0 == 0xcae9ca51) {\n            // Dispatch table entry for approveAndCall(address,uint256,bytes)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp24 = memory[0x40:0x60];\n            var temp25 = msg.data[0x44:0x64];\n            var temp26 = msg.data[temp25 + 0x04:temp25 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp24 + (temp26 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp24:temp24 + 0x20] = temp26;\n            var1 = 0x01c4;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            memory[temp24 + 0x20:temp24 + 0x20 + temp26] = msg.data[temp25 + 0x24:temp25 + 0x24 + temp26];\n            var4 = temp24;\n            var1 = approveAndCall(var2, var3, var4);\n            goto label_01C4;\n        } else if (var0 == 0xd0e30db0) {\n            // Dispatch table entry for deposit()\n            var1 = 0x0241;\n            deposit();\n            stop();\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ed;\n            var temp27 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp27 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp27;\n            var1 = allowance(var2, var3);\n            goto label_01ED;\n        } else if (var0 == 0xf5d60a51) {\n            // Dispatch table entry for accessPolicy()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var1 = accessPolicy();\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            var temp29 = memory[0x40:0x60];\n            return memory[temp29:temp29 + temp28 - temp29 + 0x20];\n        } else if (var0 == 0xfc772c8b) {\n            // Dispatch table entry for reclaim(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0241;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            reclaim(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x04;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0584:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_057B; }\n        \n        label_0567:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0567; }\n        \n        label_057B:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0584;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0584;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x059b;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        var1 = func_0EB1(var2, var3, var4);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = !arg1;\n    \n        if (!var1) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp6;\n            var1 = !storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var1) { goto label_05E7; }\n            else { goto label_05DB; }\n        } else if (!var1) {\n        label_05E7:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = temp1;\n            var temp3 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp3;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp3;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n        label_05DB:\n            var1 = 0x05e5;\n            var2 = msg.sender;\n            var3 = arg0;\n            var1 = func_0EBA(var2, var3);\n            var1 = !var1;\n            goto label_05E7;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x066c;\n        var var3 = arg0;\n        var var4 = msg.sender;\n        var2 = func_0EBA(var3, var4);\n        var1 = var2;\n    \n        if (!var1) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp0;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = storage[temp1];\n            var temp3 = arg2;\n            var1 = temp2;\n            storage[temp1] = var1 - temp3;\n        \n            if (var1 >= temp3) { goto label_06AF; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1 >= arg2) {\n        label_06AF:\n            var2 = 0x06ba;\n            var3 = arg0;\n            var4 = arg1;\n            var var5 = arg2;\n            func_0EC2(var3, var4, var5);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function withdraw(var arg0) {\n        var var0 = 0x06ce;\n        var var1 = arg0;\n        func_0F99(var1);\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg0;\n        var temp2;\n        temp2, memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n        var0 = !temp2;\n    \n        if (!var0) { return; }\n    \n        var temp3 = returndata.length;\n        memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x06] & 0xff; }\n    \n    function version() returns (var r0) {\n        var temp0 = storage[0x07];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x07;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0584:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_057B; }\n        \n        label_0567:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0567; }\n        \n        label_057B:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0584;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0584;\n        }\n    }\n    \n    function setAccessPolicy(var arg0, var arg1) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x9085b77f00000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = msg.data[0x00:0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var var0 = 0x00;\n        var var1 = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n        var var2 = storage[0x03] & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x9085b77f;\n        var var4 = temp0 + 0x84;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = temp0 - var6 + 0x84;\n        var var8 = var6;\n        var var9 = var0;\n        var var10 = var2;\n        var var11 = !address(var10).code.length;\n    \n        if (var11) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n        var5 = !temp1;\n    \n        if (!var5) {\n            var2 = memory[0x40:0x60];\n            var3 = returndata.length;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[var2:var2 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x9085b77f00000000000000000000000000000000000000000000000000000000;\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = temp3 & arg1;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = address(this);\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = msg.data[0x00:0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n            var2 = arg0 & temp3;\n            var3 = 0x9085b77f;\n            var4 = temp2 + 0x84;\n            var5 = 0x20;\n            var6 = memory[0x40:0x60];\n            var7 = temp2 - var6 + 0x84;\n            var9 = 0x00;\n            var8 = var6;\n            var10 = var2;\n            var11 = !address(var10).code.length;\n        \n            if (var11) { revert(memory[0x00:0x00]); }\n        \n            var temp4;\n            temp4, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n            var5 = !temp4;\n        \n            if (!var5) {\n                var2 = memory[0x40:0x60];\n                var3 = returndata.length;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (!memory[var2:var2 + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var temp5 = storage[0x03];\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                var temp7 = temp6 & arg0;\n                storage[0x03] = temp7 | (temp5 & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = msg.sender;\n                memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp5 & temp6;\n                memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = temp7;\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + temp8 - temp9 + 0x60], [0x7d475c32583df95fccc34a6e12df24c1fc9943092cc129b6512013aecba0f136]);\n                return;\n            } else {\n                var temp10 = returndata.length;\n                memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp11 = returndata.length;\n            memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function withdrawAndSend(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (arg1 < msg.value) {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x10;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x4e465f45545f4e4f5f4445504f53495400000000000000000000000000000000;\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n        } else if (arg1 <= msg.value) {\n        label_0A50:\n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg1;\n            memory[temp0:temp0 + 0x20] = temp1;\n            var temp2 = memory[0x40:0x60];\n            var temp3 = arg0;\n            log(memory[temp2:temp2 + temp0 - temp2 + 0x20], [0x091fc40d7b9ba377824e29fcbd06fb23a78e65c0b32f9a52590aacfdef076616, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(temp3 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp4:temp4 + 0x00]);\n            var var1 = !temp5;\n        \n            if (!var1) { return; }\n        \n            var temp6 = returndata.length;\n            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var0 = arg1 - msg.value;\n            var1 = 0x0a50;\n            var var2 = var0;\n            func_0F99(var2);\n            goto label_0A50;\n        }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function contractId() returns (var r0, var r1) {\n        r1 = 0x00;\n        r0 = 0x75b86bc24f77738576716a36431588ae768d80d077231d1661c2bea674c6373a;\n        return r0, r1;\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x05];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        memory[0x40:0x60] = temp1 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2;\n        var var0 = 0x60;\n        var var1 = temp1;\n        var var3 = temp2;\n        var var2 = 0x05;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = var3;\n    \n        if (!var6) {\n        label_0584:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_057B; }\n        \n        label_0567:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0567; }\n        \n        label_057B:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0584;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0584;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b8f;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0EC2(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0ba5;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0EC2(var2, var3, var4);\n        var1 = 0x0bae;\n        var2 = arg0;\n        var1 = func_10D2(var2);\n    \n        if (!var1) {\n        label_0CB2:\n            return 0x01;\n        } else {\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0xc0ee0b8a;\n            var3 = msg.sender;\n            var4 = arg1;\n            var temp0 = arg2;\n            var var5 = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp2 = temp1 + 0x04;\n            var var6 = temp2;\n            memory[var6:var6 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var temp3 = var6 + 0x20;\n            memory[temp3:temp3 + 0x20] = var4;\n            var temp4 = temp3 + 0x20;\n            var var7 = temp4;\n            var temp5 = var7 + 0x20;\n            memory[var7:var7 + 0x20] = temp5 - var6;\n            memory[temp5:temp5 + 0x20] = memory[var5:var5 + 0x20];\n            var var8 = temp5 + 0x20;\n            var var9 = var5 + 0x20;\n            var var10 = memory[var5:var5 + 0x20];\n            var var11 = var10;\n            var var12 = var8;\n            var var13 = var9;\n            var var14 = 0x00;\n        \n            if (var14 >= var11) {\n            label_0C4B:\n                var temp6 = var10;\n                var8 = temp6 + var8;\n                var9 = temp6 & 0x1f;\n            \n                if (!var9) {\n                    var3 = var8;\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                    var10 = !address(var9).code.length;\n                \n                    if (var10) { revert(memory[0x00:0x00]); }\n                \n                label_0C99:\n                    var temp7;\n                    temp7, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                    var4 = !temp7;\n                \n                    if (!var4) { goto label_0CB2; }\n                \n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                } else {\n                    var temp9 = var9;\n                    var temp10 = var8 - temp9;\n                    memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                    var3 = temp10 + 0x20;\n                    var4 = 0x00;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                    var10 = !address(var9).code.length;\n                \n                    if (!var10) { goto label_0C99; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_0C3C:\n                var temp11 = var14;\n                memory[temp11 + var12:temp11 + var12 + 0x20] = memory[temp11 + var13:temp11 + var13 + 0x20];\n                var14 = temp11 + 0x20;\n            \n                if (var14 >= var11) { goto label_0C4B; }\n                else { goto label_0C3C; }\n            }\n        }\n    }\n    \n    function approveAndCall(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0cc8;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = approve(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x8f4ffcb100000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = arg1;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x80;\n        var temp1 = arg2;\n        memory[temp0 + 0x84:temp0 + 0x84 + 0x20] = memory[temp1:temp1 + 0x20];\n        var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var2 = 0x8f4ffcb1;\n        var3 = msg.sender;\n        var var4 = arg1;\n        var var5 = address(this);\n        var var6 = temp1;\n        var var7 = temp0 + 0x04;\n        var var8 = temp0 + 0x64;\n        var var9 = temp0 + 0xa4;\n        var var10 = var6 + 0x20;\n        var var11 = memory[var6:var6 + 0x20];\n        var var12 = var11;\n        var var13 = var9;\n        var var14 = var10;\n        var var15 = 0x00;\n    \n        if (var15 >= var12) {\n        label_0D66:\n            var temp2 = var11;\n            var9 = temp2 + var9;\n            var10 = temp2 & 0x1f;\n        \n            if (!var10) {\n                var3 = var9;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n            label_0DB5:\n                var temp3;\n                temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp3;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[var1:var1 + 0x20];\n                \n                    if (var0) { return 0x01; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp4 = returndata.length;\n                    memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp5 = var10;\n                var temp6 = var9 - temp5;\n                memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                var3 = temp6 + 0x20;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (!var10) { goto label_0DB5; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0D57:\n            var temp7 = var15;\n            memory[temp7 + var13:temp7 + var13 + 0x20] = memory[temp7 + var14:temp7 + var14 + 0x20];\n            var15 = temp7 + 0x20;\n        \n            if (var15 >= var12) { goto label_0D66; }\n            else { goto label_0D57; }\n        }\n    }\n    \n    function deposit() {\n        var var0 = 0x0df7;\n        func_1060();\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, msg.sender]);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0e3e;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_0EBA(var3, var4);\n        var1 = var2;\n    \n        if (var1 > 0x00) { return var1; }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function accessPolicy() returns (var r0) { return storage[0x03] & 0x02 ** 0xa0 - 0x01; }\n    \n    function reclaim(var arg0) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x0eae;\n        var var1 = arg0;\n        func_10DA(var1);\n    }\n    \n    function func_0EB1(var arg0, var arg1, var arg2) returns (var r0) { return 0x01; }\n    \n    function func_0EBA(var arg0, var arg1) returns (var r0) { return 0x00; }\n    \n    function func_0EC2(var arg0, var arg1, var arg2) {\n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x0ee2;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = arg2;\n        var0 = func_0EB1(var1, var2, var3);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var0 = 0x0f10;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_1354(var1, var2);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        memory[0x00:0x20] = arg1 & temp0;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x0f3f;\n        var2 = arg2;\n        var0 = func_1366(var1, var2);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg1 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_0F99(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x0fcf;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_1354(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x01];\n        var0 = 0x0fec;\n        var2 = arg0;\n        var0 = func_1354(var1, var2);\n        storage[0x01] = var0;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg0;\n        memory[temp0:temp0 + 0x20] = temp1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp0 - temp2 + 0x20], [0xb4214c8c54fc7442f36d3682f59aebaf09358a4431835b30efb29d52cf9e1e91, msg.sender]);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0x00]);\n    }\n    \n    function func_1060() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x107a;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_1366(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x01];\n        var0 = 0x1097;\n        var2 = msg.value;\n        var0 = func_1366(var1, var2);\n        storage[0x01] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x1b851e1031ef35a238e6c67d0c7991162390df915f70eaf9098dbf0b175a6198, msg.sender]);\n    }\n    \n    function func_10D2(var arg0) returns (var r0) { return address(arg0).code.length > 0x00; }\n    \n    function func_10DA(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x9085b77f00000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = address(this);\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = msg.data[0x00:0x20] & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5;\n        var var3 = storage[0x03] & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x9085b77f;\n        var var5 = temp0 + 0x84;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = temp0 - var7 + 0x84;\n        var var9 = var7;\n        var var10 = var1;\n        var var11 = var3;\n        var var12 = !address(var11).code.length;\n    \n        if (var12) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n        var6 = !temp1;\n    \n        if (!var6) {\n            var3 = memory[0x40:0x60];\n            var4 = returndata.length;\n        \n            if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[var3:var3 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.sender;\n        \n            if (arg0 & 0x02 ** 0xa0 - 0x01) {\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = address(this);\n                var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n                var4 = 0x70a08231;\n                var5 = temp2 + 0x24;\n                var6 = 0x20;\n                var7 = memory[0x40:0x60];\n                var8 = temp2 - var7 + 0x24;\n                var9 = var7;\n                var10 = 0x00;\n                var11 = var3;\n                var12 = !address(var11).code.length;\n            \n                if (var12) { revert(memory[0x00:0x00]); }\n            \n                var temp3;\n                temp3, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n                var6 = !temp3;\n            \n                if (!var6) {\n                    var3 = memory[0x40:0x60];\n                    var4 = returndata.length;\n                \n                    if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp4 = memory[var3:var3 + 0x20];\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n                    var temp6 = 0x02 ** 0xa0 - 0x01;\n                    memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = temp6 & var0;\n                    memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = temp4;\n                    var1 = temp4;\n                    var3 = arg0 & temp6;\n                    var4 = 0xa9059cbb;\n                    var5 = temp5 + 0x44;\n                    var6 = 0x20;\n                    var7 = memory[0x40:0x60];\n                    var8 = temp5 - var7 + 0x44;\n                    var9 = var7;\n                    var10 = 0x00;\n                    var11 = var3;\n                    var12 = !address(var11).code.length;\n                \n                    if (var12) { revert(memory[0x00:0x00]); }\n                \n                    var temp7;\n                    temp7, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n                    var6 = !temp7;\n                \n                    if (!var6) {\n                        var3 = memory[0x40:0x60];\n                        var4 = returndata.length;\n                    \n                        if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        if (!memory[var3:var3 + 0x20]) { revert(memory[0x00:0x00]); }\n                    \n                    label_0AC6:\n                        return;\n                    } else {\n                        var temp8 = returndata.length;\n                        memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp9 = returndata.length;\n                    memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp10 = memory[0x40:0x60];\n                var temp11 = address(this).balance;\n                var temp12;\n                temp12, memory[temp10:temp10 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp11 * 0x08fc).value(temp11)(memory[temp10:temp10 + 0x00]);\n                var3 = !temp12;\n            \n                if (!var3) { goto label_0AC6; }\n            \n                var temp13 = returndata.length;\n                memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp14 = returndata.length;\n            memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_1354(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1366(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 40.01484942436218,
	"usage": {
		"completion_tokens": 501,
		"prompt_tokens": 15043,
		"total_tokens": 15544
	}
}