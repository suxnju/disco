{
	"address": "0x0b7dc5a43ce121b4eaaa41b0f4f43bba47bb8951",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is a Solidity contract code based on the decompiled code. Note that the decompiled code provided lacks some specific details, so the resulting contract may not fully represent the original contract's functionality.\n\n```solidity\npragma solidity ^0.7.5;\n\ncontract DecompiledContract {\n    mapping (address => uint256) private _balanceOf;\n    uint256 private _totalSupply;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    string private _name;\n    string private _symbol;\n    string private _version;\n    uint8 private _decimals;\n    address private _accessPolicy;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event LogAccessPolicyChanged(address indexed previousPolicy, address indexed newPolicy);\n\n    function deposit() public payable {\n        require(msg.value + _balanceOf[msg.sender] >= _balanceOf[msg.sender], \"Deposit failed\");\n        _balanceOf[msg.sender] += msg.value;\n        require(msg.value + _totalSupply >= _totalSupply, \"Total supply overflow\");\n        _totalSupply += msg.value;\n        emit Transfer(address(0), msg.sender, msg.value);\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_balanceOf[msg.sender] >= _value, \"Insufficient balance\");\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= _allowance[_from][msg.sender], \"Not allowed to transfer this much\");\n        require(_value <= _balanceOf[_from], \"Insufficient balance\");\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        _allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        _allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return _allowance[_owner][_spender];\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return _balanceOf[_owner];\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    // Other functions like name(), symbol(), decimals() etc. are not implemented due to lack of necessary information in the decompiled code.\n}\n```\n\nThis contract represents a basic ERC20 token contract. It includes standard methods like `transfer()`, `approve()`, `transferFrom()`, `allowance()`, and `balanceOf()`. It also includes a `deposit()` function for adding ether to the contract. \n\nPlease note that the actual implementation may vary based on the specifics of the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701455367,
	"id": "chatcmpl-8R2YRGnERKXUQUHAh3tNZyxAZnoC5",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 18:19 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x4]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x7]\nuint8 _decimals; // STORAGE[0x6] bytes 0 to 0\naddress _accessPolicy; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nLogAccessPolicyChanged(address, address, address);\nTransfer(address, address, uint256);\nLogWithdrawal(address, uint256);\nLogDeposit(address, uint256);\n\nfunction 0x1060() private { \n    assert(msg.value + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += msg.value;\n    assert(msg.value + _totalSupply >= _totalSupply);\n    _totalSupply += msg.value;\n    emit LogDeposit(msg.sender, msg.value);\n    return ;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0x58e(varg1, varg0);\n    return v0;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = msg.sender;\n    v1 = 0;\n    if (!v1) {\n        v1 = v2 = _allowance[msg.sender];\n        _allowance[msg.sender] = v2 - varg2;\n    }\n    require(v1 >= varg2);\n    0xec2(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    0xf99(varg0);\n    v0 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[]((_version.length & (!(_version.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_version.length & (!(_version.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_version.length & (!(_version.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_version.length & (!(_version.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction setAccessPolicy(uint256 function_selector, address varg1, address varg2) public nonPayable { \n    require(_accessPolicy.code.size);\n    v0, v1 = _accessPolicy.allowed(msg.sender, 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da, this, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & function_selector).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v1);\n    require(varg1.code.size);\n    v2, v3 = varg1.allowed(varg2, 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da, this, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & function_selector).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v3);\n    _accessPolicy = varg1;\n    emit LogAccessPolicyChanged(msg.sender, _accessPolicy, varg1);\n}\n\nfunction withdrawAndSend(address varg0, uint256 varg1) public payable { \n    require(varg1 >= msg.value, 'NF_ET_NO_DEPOSIT');\n    if (varg1 > msg.value) {\n        0xf99(varg1 - msg.value);\n    }\n    emit 0x91fc40d7b9ba377824e29fcbd06fb23a78e65c0b32f9a52590aacfdef076616(msg.sender, varg0, varg1);\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction contractId() public nonPayable { \n    return 0x75b86bc24f77738576716a36431588ae768d80d077231d1661c2bea674c6373a, 0;\n}\n\nfunction depositAndTransfer(address varg0, uint256 varg1, bytes varg2) public payable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    0x1060();\n    v2 = 0xb98(v0, varg1, varg0);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xec2(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    v2 = 0xb98(v0, varg1, varg0);\n    return v2;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    v2 = 0x58e(varg1, varg0);\n    require(v2);\n    v3 = new array[](v0.length);\n    v4 = v5 = 0;\n    while (v4 < v0.length) {\n        MEM[v4 + v3.data] = MEM[v4 + v0.data];\n        v4 += 32;\n    }\n    v6 = v7 = v0.length + v3.data;\n    if (0x1f & v0.length) {\n        MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n    }\n    require(varg0.code.size);\n    v8, v9 = varg0.receiveApproval(msg.sender, varg1, this, v3).gas(msg.gas);\n    require(v8); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v9);\n    return 1;\n}\n\nfunction deposit() public payable { \n    0x1060();\n    emit Transfer(0, msg.sender, msg.value);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    v0 = 0;\n    if (v0 <= 0) {\n        v0 = v1 = _allowance[varg1];\n    }\n    return v0;\n}\n\nfunction accessPolicy() public nonPayable { \n    return _accessPolicy;\n}\n\nfunction reclaim(uint256 function_selector, address varg1) public nonPayable { \n    require(varg1);\n    require(_accessPolicy.code.size);\n    v0, v1 = _accessPolicy.allowed(msg.sender, 0x542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5, this, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & function_selector).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v1);\n    if (varg1) {\n        require(varg1.code.size);\n        v2, v3 = varg1.balanceOf(this).gas(msg.gas);\n        require(v2); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        require(varg1.code.size);\n        v4, v5 = varg1.transfer(msg.sender, v3).gas(msg.gas);\n        require(v4); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        require(v5);\n    } else {\n        v6 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n        require(v6); // checks call status, propagates error data on error\n    }\n}\n\nfunction 0x58e(uint256 varg0, uint256 varg1) private { \n    v0 = msg.sender;\n    require(1);\n    v1 = v2 = !varg0;\n    if (varg0) {\n        v3 = address(varg1);\n        v1 = v4 = !_allowance[v3];\n    }\n    if (v1) {\n        v5 = msg.sender;\n        v1 = v6 = !0;\n    }\n    require(v1);\n    v7 = address(varg1);\n    _allowance[v7] = varg0;\n    emit Approval(msg.sender, v7, varg0);\n    return 1;\n}\n\nfunction 0xb98(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    0xec2(varg1, varg2, msg.sender);\n    if (varg2.code.size > 0) {\n        v0 = address(varg2);\n        v1 = new array[](varg0.length);\n        v2 = v3 = 0;\n        while (v2 < varg0.length) {\n            MEM[v2 + v1.data] = MEM[v2 + varg0.data];\n            v2 += 32;\n        }\n        v4 = v5 = varg0.length + v1.data;\n        if (0x1f & varg0.length) {\n            MEM[v5 - (0x1f & varg0.length)] = ~(256 ** (32 - (0x1f & varg0.length)) - 1) & MEM[v5 - (0x1f & varg0.length)];\n        }\n        require(v0.code.size);\n        v6 = v0.tokenFallback(msg.sender, varg1, v1).gas(msg.gas);\n        require(v6); // checks call status, propagates error data on error\n    }\n    return 1;\n}\n\nfunction 0xec2(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    require(1);\n    v0 = address(varg2);\n    assert(varg0 <= _balanceOf[v0]);\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    v2 = address(varg1);\n    v3 = varg0 + _balanceOf[v2];\n    assert(v3 >= _balanceOf[v2]);\n    v4 = address(varg1);\n    _balanceOf[v4] = v3;\n    emit Transfer(address(varg2), v4, varg0);\n    return ;\n}\n\nfunction 0xf99(uint256 varg0) private { \n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit LogWithdrawal(msg.sender, varg0);\n    emit Transfer(msg.sender, 0, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x54fd4d50 == function_selector) {\n            version();\n        } else if (0x57875631 == function_selector) {\n            setAccessPolicy(address,address);\n        } else if (0x64663ea6 == function_selector) {\n            withdrawAndSend(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8291286c == function_selector) {\n            contractId();\n        } else if (0x926c196a == function_selector) {\n            depositAndTransfer(address,uint256,bytes);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xbe45fd62 == function_selector) {\n            transfer(address,uint256,bytes);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf5d60a51 == function_selector) {\n            accessPolicy();\n        } else if (0xfc772c8b == function_selector) {\n            reclaim(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 18:19 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x4]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x7]\nuint8 _decimals; // STORAGE[0x6] bytes 0 to 0\naddress _accessPolicy; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nLogAccessPolicyChanged(address, address, address);\nTransfer(address, address, uint256);\nLogWithdrawal(address, uint256);\nLogDeposit(address, uint256);\n\nfunction 0x1060() private { \n    assert(msg.value + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += msg.value;\n    assert(msg.value + _totalSupply >= _totalSupply);\n    _totalSupply += msg.value;\n    emit LogDeposit(msg.sender, msg.value);\n    return ;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0x58e(varg1, varg0);\n    return v0;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = msg.sender;\n    v1 = 0;\n    if (!v1) {\n        v1 = v2 = _allowance[msg.sender];\n        _allowance[msg.sender] = v2 - varg2;\n    }\n    require(v1 >= varg2);\n    0xec2(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    0xf99(varg0);\n    v0 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[]((_version.length & (!(_version.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_version.length & (!(_version.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_version.length & (!(_version.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_version.length & (!(_version.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction setAccessPolicy(uint256 function_selector, address varg1, address varg2) public nonPayable { \n    require(_accessPolicy.code.size);\n    v0, v1 = _accessPolicy.allowed(msg.sender, 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da, this, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & function_selector).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v1);\n    require(varg1.code.size);\n    v2, v3 = varg1.allowed(varg2, 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da, this, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & function_selector).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v3);\n    _accessPolicy = varg1;\n    emit LogAccessPolicyChanged(msg.sender, _accessPolicy, varg1);\n}\n\nfunction withdrawAndSend(address varg0, uint256 varg1) public payable { \n    require(varg1 >= msg.value, 'NF_ET_NO_DEPOSIT');\n    if (varg1 > msg.value) {\n        0xf99(varg1 - msg.value);\n    }\n    emit 0x91fc40d7b9ba377824e29fcbd06fb23a78e65c0b32f9a52590aacfdef076616(msg.sender, varg0, varg1);\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction contractId() public nonPayable { \n    return 0x75b86bc24f77738576716a36431588ae768d80d077231d1661c2bea674c6373a, 0;\n}\n\nfunction depositAndTransfer(address varg0, uint256 varg1, bytes varg2) public payable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    0x1060();\n    v2 = 0xb98(v0, varg1, varg0);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xec2(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    v2 = 0xb98(v0, varg1, varg0);\n    return v2;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    v2 = 0x58e(varg1, varg0);\n    require(v2);\n    v3 = new array[](v0.length);\n    v4 = v5 = 0;\n    while (v4 < v0.length) {\n        MEM[v4 + v3.data] = MEM[v4 + v0.data];\n        v4 += 32;\n    }\n    v6 = v7 = v0.length + v3.data;\n    if (0x1f & v0.length) {\n        MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n    }\n    require(varg0.code.size);\n    v8, v9 = varg0.receiveApproval(msg.sender, varg1, this, v3).gas(msg.gas);\n    require(v8); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v9);\n    return 1;\n}\n\nfunction deposit() public payable { \n    0x1060();\n    emit Transfer(0, msg.sender, msg.value);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    v0 = 0;\n    if (v0 <= 0) {\n        v0 = v1 = _allowance[varg1];\n    }\n    return v0;\n}\n\nfunction accessPolicy() public nonPayable { \n    return _accessPolicy;\n}\n\nfunction reclaim(uint256 function_selector, address varg1) public nonPayable { \n    require(varg1);\n    require(_accessPolicy.code.size);\n    v0, v1 = _accessPolicy.allowed(msg.sender, 0x542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5, this, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & function_selector).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v1);\n    if (varg1) {\n        require(varg1.code.size);\n        v2, v3 = varg1.balanceOf(this).gas(msg.gas);\n        require(v2); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        require(varg1.code.size);\n        v4, v5 = varg1.transfer(msg.sender, v3).gas(msg.gas);\n        require(v4); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        require(v5);\n    } else {\n        v6 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n        require(v6); // checks call status, propagates error data on error\n    }\n}\n\nfunction 0x58e(uint256 varg0, uint256 varg1) private { \n    v0 = msg.sender;\n    require(1);\n    v1 = v2 = !varg0;\n    if (varg0) {\n        v3 = address(varg1);\n        v1 = v4 = !_allowance[v3];\n    }\n    if (v1) {\n        v5 = msg.sender;\n        v1 = v6 = !0;\n    }\n    require(v1);\n    v7 = address(varg1);\n    _allowance[v7] = varg0;\n    emit Approval(msg.sender, v7, varg0);\n    return 1;\n}\n\nfunction 0xb98(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    0xec2(varg1, varg2, msg.sender);\n    if (varg2.code.size > 0) {\n        v0 = address(varg2);\n        v1 = new array[](varg0.length);\n        v2 = v3 = 0;\n        while (v2 < varg0.length) {\n            MEM[v2 + v1.data] = MEM[v2 + varg0.data];\n            v2 += 32;\n        }\n        v4 = v5 = varg0.length + v1.data;\n        if (0x1f & varg0.length) {\n            MEM[v5 - (0x1f & varg0.length)] = ~(256 ** (32 - (0x1f & varg0.length)) - 1) & MEM[v5 - (0x1f & varg0.length)];\n        }\n        require(v0.code.size);\n        v6 = v0.tokenFallback(msg.sender, varg1, v1).gas(msg.gas);\n        require(v6); // checks call status, propagates error data on error\n    }\n    return 1;\n}\n\nfunction 0xec2(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    require(1);\n    v0 = address(varg2);\n    assert(varg0 <= _balanceOf[v0]);\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    v2 = address(varg1);\n    v3 = varg0 + _balanceOf[v2];\n    assert(v3 >= _balanceOf[v2]);\n    v4 = address(varg1);\n    _balanceOf[v4] = v3;\n    emit Transfer(address(varg2), v4, varg0);\n    return ;\n}\n\nfunction 0xf99(uint256 varg0) private { \n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit LogWithdrawal(msg.sender, varg0);\n    emit Transfer(msg.sender, 0, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x54fd4d50 == function_selector) {\n            version();\n        } else if (0x57875631 == function_selector) {\n            setAccessPolicy(address,address);\n        } else if (0x64663ea6 == function_selector) {\n            withdrawAndSend(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8291286c == function_selector) {\n            contractId();\n        } else if (0x926c196a == function_selector) {\n            depositAndTransfer(address,uint256,bytes);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xbe45fd62 == function_selector) {\n            transfer(address,uint256,bytes);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf5d60a51 == function_selector) {\n            accessPolicy();\n        } else if (0xfc772c8b == function_selector) {\n            reclaim(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 18:19 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x4]\nuint256[] _symbol; // STORAGE[0x5]\nuint256[] _version; // STORAGE[0x7]\nuint8 _decimals; // STORAGE[0x6] bytes 0 to 0\naddress _accessPolicy; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nLogAccessPolicyChanged(address, address, address);\nTransfer(address, address, uint256);\nLogWithdrawal(address, uint256);\nLogDeposit(address, uint256);\n\nfunction 0x1060() private { \n    assert(msg.value + _balanceOf[msg.sender] >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] += msg.value;\n    assert(msg.value + _totalSupply >= _totalSupply);\n    _totalSupply += msg.value;\n    emit LogDeposit(msg.sender, msg.value);\n    return ;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = 0x58e(varg1, varg0);\n    return v0;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = msg.sender;\n    v1 = 0;\n    if (!v1) {\n        v1 = v2 = _allowance[msg.sender];\n        _allowance[msg.sender] = v2 - varg2;\n    }\n    require(v1 >= varg2);\n    0xec2(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    0xf99(varg0);\n    v0 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[]((_version.length & (!(_version.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_version.length & (!(_version.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_version.length & (!(_version.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_version.length & (!(_version.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction setAccessPolicy(uint256 function_selector, address varg1, address varg2) public nonPayable { \n    require(_accessPolicy.code.size);\n    v0, v1 = _accessPolicy.allowed(msg.sender, 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da, this, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & function_selector).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v1);\n    require(varg1.code.size);\n    v2, v3 = varg1.allowed(varg2, 0xac42f8beb17975ed062dcb80c63e6d203ef1c2c335ced149dc5664cc671cb7da, this, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & function_selector).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v3);\n    _accessPolicy = varg1;\n    emit LogAccessPolicyChanged(msg.sender, _accessPolicy, varg1);\n}\n\nfunction withdrawAndSend(address varg0, uint256 varg1) public payable { \n    require(varg1 >= msg.value, 'NF_ET_NO_DEPOSIT');\n    if (varg1 > msg.value) {\n        0xf99(varg1 - msg.value);\n    }\n    emit 0x91fc40d7b9ba377824e29fcbd06fb23a78e65c0b32f9a52590aacfdef076616(msg.sender, varg0, varg1);\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction contractId() public nonPayable { \n    return 0x75b86bc24f77738576716a36431588ae768d80d077231d1661c2bea674c6373a, 0;\n}\n\nfunction depositAndTransfer(address varg0, uint256 varg1, bytes varg2) public payable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    0x1060();\n    v2 = 0xb98(v0, varg1, varg0);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xec2(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    v2 = 0xb98(v0, varg1, varg0);\n    return v2;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    v2 = 0x58e(varg1, varg0);\n    require(v2);\n    v3 = new array[](v0.length);\n    v4 = v5 = 0;\n    while (v4 < v0.length) {\n        MEM[v4 + v3.data] = MEM[v4 + v0.data];\n        v4 += 32;\n    }\n    v6 = v7 = v0.length + v3.data;\n    if (0x1f & v0.length) {\n        MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n    }\n    require(varg0.code.size);\n    v8, v9 = varg0.receiveApproval(msg.sender, varg1, this, v3).gas(msg.gas);\n    require(v8); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v9);\n    return 1;\n}\n\nfunction deposit() public payable { \n    0x1060();\n    emit Transfer(0, msg.sender, msg.value);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    v0 = 0;\n    if (v0 <= 0) {\n        v0 = v1 = _allowance[varg1];\n    }\n    return v0;\n}\n\nfunction accessPolicy() public nonPayable { \n    return _accessPolicy;\n}\n\nfunction reclaim(uint256 function_selector, address varg1) public nonPayable { \n    require(varg1);\n    require(_accessPolicy.code.size);\n    v0, v1 = _accessPolicy.allowed(msg.sender, 0x542bbd0c672578966dcc525b30aa16723bb042675554ac5b0362f86b6e97dc5, this, ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff & function_selector).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(v1);\n    if (varg1) {\n        require(varg1.code.size);\n        v2, v3 = varg1.balanceOf(this).gas(msg.gas);\n        require(v2); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        require(varg1.code.size);\n        v4, v5 = varg1.transfer(msg.sender, v3).gas(msg.gas);\n        require(v4); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        require(v5);\n    } else {\n        v6 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n        require(v6); // checks call status, propagates error data on error\n    }\n}\n\nfunction 0x58e(uint256 varg0, uint256 varg1) private { \n    v0 = msg.sender;\n    require(1);\n    v1 = v2 = !varg0;\n    if (varg0) {\n        v3 = address(varg1);\n        v1 = v4 = !_allowance[v3];\n    }\n    if (v1) {\n        v5 = msg.sender;\n        v1 = v6 = !0;\n    }\n    require(v1);\n    v7 = address(varg1);\n    _allowance[v7] = varg0;\n    emit Approval(msg.sender, v7, varg0);\n    return 1;\n}\n\nfunction 0xb98(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    0xec2(varg1, varg2, msg.sender);\n    if (varg2.code.size > 0) {\n        v0 = address(varg2);\n        v1 = new array[](varg0.length);\n        v2 = v3 = 0;\n        while (v2 < varg0.length) {\n            MEM[v2 + v1.data] = MEM[v2 + varg0.data];\n            v2 += 32;\n        }\n        v4 = v5 = varg0.length + v1.data;\n        if (0x1f & varg0.length) {\n            MEM[v5 - (0x1f & varg0.length)] = ~(256 ** (32 - (0x1f & varg0.length)) - 1) & MEM[v5 - (0x1f & varg0.length)];\n        }\n        require(v0.code.size);\n        v6 = v0.tokenFallback(msg.sender, varg1, v1).gas(msg.gas);\n        require(v6); // checks call status, propagates error data on error\n    }\n    return 1;\n}\n\nfunction 0xec2(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    require(1);\n    v0 = address(varg2);\n    assert(varg0 <= _balanceOf[v0]);\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    v2 = address(varg1);\n    v3 = varg0 + _balanceOf[v2];\n    assert(v3 >= _balanceOf[v2]);\n    v4 = address(varg1);\n    _balanceOf[v4] = v3;\n    emit Transfer(address(varg2), v4, varg0);\n    return ;\n}\n\nfunction 0xf99(uint256 varg0) private { \n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit LogWithdrawal(msg.sender, varg0);\n    emit Transfer(msg.sender, 0, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x54fd4d50 == function_selector) {\n            version();\n        } else if (0x57875631 == function_selector) {\n            setAccessPolicy(address,address);\n        } else if (0x64663ea6 == function_selector) {\n            withdrawAndSend(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8291286c == function_selector) {\n            contractId();\n        } else if (0x926c196a == function_selector) {\n            depositAndTransfer(address,uint256,bytes);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xbe45fd62 == function_selector) {\n            transfer(address,uint256,bytes);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf5d60a51 == function_selector) {\n            accessPolicy();\n        } else if (0xfc772c8b == function_selector) {\n            reclaim(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 34.88622689247131,
	"usage": {
		"completion_tokens": 680,
		"prompt_tokens": 4280,
		"total_tokens": 4960
	}
}