{
	"address": "0x09ac823b069e9403faeacc927d6f472964466e12",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's a Solidity contract that reflects the behavior of the decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract {\n    mapping (address => uint256) private _deposited;\n    address private _owner;\n    address private _wallet;\n    uint8 private _state;\n\n    event Closed();\n    event RefundsEnabled();\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Refunded(address indexed user, uint256 amount);\n\n    constructor(address owner, address wallet) {\n        _owner = owner;\n        _wallet = wallet;\n    }\n\n    function state() public view returns (uint8) {\n        require(_state <= 2, \"Invalid state\");\n        return _state;\n    }\n\n    function deposited(address user) public view returns (uint256) {\n        return _deposited[user];\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner, \"Only owner can transfer ownership\");\n        require(newOwner != address(0), \"New owner cannot be zero address\");\n\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function deposit(address user) public payable {\n        require(msg.sender == _owner, \"Only owner can deposit\");\n        require(_state <= 2, \"Invalid state\");\n        require(_state == 0, \"Deposit is not currently enabled\");\n        require(msg.value + _deposited[user] >= _deposited[user], \"Overflow error\");\n\n        _deposited[user] += msg.value;\n    }\n\n    function refund(address user) public {\n        require(_state <= 2, \"Invalid state\");\n        require(_state == 1, \"Refunds are not currently enabled\");\n\n        uint256 refundAmount = _deposited[user];\n        _deposited[user] = 0;\n\n        (bool success,) = user.call{value: refundAmount, gas: 2300 * (refundAmount == 0 ? 1 : 0)}(\"\");\n        require(success, \"Refund failed\");\n\n        emit Refunded(user, refundAmount);\n    }\n\n    function close() public {\n        require(msg.sender == _owner, \"Only owner can close\");\n        require(_state <= 2, \"Invalid state\");\n        require(_state == 0, \"Contract is not in a closable state\");\n\n        _state = 2;\n\n        emit Closed();\n\n        (bool success,) = _wallet.call{value: address(this).balance, gas: 2300 * (address(this).balance == 0 ? 1 : 0)}(\"\");\n        require(success, \"Close failed\");\n    }\n\n    function wallet() public view returns (address) {\n        return _wallet;\n    }\n\n    function enableRefunds() public {\n        require(msg.sender == _owner, \"Only owner can enable refunds\");\n        require(_state <= 2, \"Invalid state\");\n        require(_state == 0, \"Refunds are not currently enabled\");\n\n        _state = 1;\n\n        emit RefundsEnabled();\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    fallback() external payable {\n        revert(\"Fallback function called\");\n    }\n}\n```\n\nPlease note that the function selector part is not needed in Solidity since the Ethereum Virtual Machine handles that at a lower level.",
				"role": "assistant"
			}
		}
	],
	"created": 1701464851,
	"id": "chatcmpl-8R51PsBWxh4W7Pw3LWPh6PRBPjxAD",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 09:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _wallet; // STORAGE[0x2] bytes 0 to 19\nuint8 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nRefundsEnabled();\nOwnershipTransferred(address, address);\nRefunded(address, uint256);\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0); // checks call status, propagates error data on error\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction close() public nonPayable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction enableRefunds() public nonPayable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x43d726d6) {\n            close();\n        } else if (0x521eb273 == function_selector) {\n            wallet();\n        } else if (0x8c52dc41 == function_selector) {\n            enableRefunds();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xc19d93fb == function_selector) {\n            state();\n        } else if (0xcb13cddb == function_selector) {\n            deposited(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 09:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _wallet; // STORAGE[0x2] bytes 0 to 19\nuint8 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nRefundsEnabled();\nOwnershipTransferred(address, address);\nRefunded(address, uint256);\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0); // checks call status, propagates error data on error\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction close() public nonPayable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction enableRefunds() public nonPayable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x43d726d6) {\n            close();\n        } else if (0x521eb273 == function_selector) {\n            wallet();\n        } else if (0x8c52dc41 == function_selector) {\n            enableRefunds();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xc19d93fb == function_selector) {\n            state();\n        } else if (0xcb13cddb == function_selector) {\n            deposited(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 09:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _wallet; // STORAGE[0x2] bytes 0 to 19\nuint8 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nRefundsEnabled();\nOwnershipTransferred(address, address);\nRefunded(address, uint256);\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0); // checks call status, propagates error data on error\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction close() public nonPayable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction enableRefunds() public nonPayable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x43d726d6) {\n            close();\n        } else if (0x521eb273 == function_selector) {\n            wallet();\n        } else if (0x8c52dc41 == function_selector) {\n            enableRefunds();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xc19d93fb == function_selector) {\n            state();\n        } else if (0xcb13cddb == function_selector) {\n            deposited(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == function_selector) {\n            deposit(address);\n        } else if (0xfa89401a == function_selector) {\n            refund(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 32.54713463783264,
	"usage": {
		"completion_tokens": 697,
		"prompt_tokens": 882,
		"total_tokens": 1579
	}
}