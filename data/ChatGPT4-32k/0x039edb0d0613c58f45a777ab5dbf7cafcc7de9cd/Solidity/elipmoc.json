{
	"address": "0x039edb0d0613c58f45a777ab5dbf7cafcc7de9cd",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract that incorporates the logic presented in the decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    uint256 stor_3;\n    uint256 stor_4;\n    uint256 _fallback;\n    uint256 stor_6;\n    uint256 stor_7;\n    uint256 stor_8;\n    uint256 stor_9;\n    uint256 stor_a;\n    uint256 stor_b;\n    uint256 _soldTokens;\n    address _owner;\n    address stor_1_0_19;\n    address stor_2_0_19;\n    address _token;\n\n    modifier onlyOwner {\n        require(msg.sender == _owner, \"Not contract owner\");\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"New owner is the zero address\");\n        _owner = newOwner;\n    }\n\n    function token() public view returns (address) {\n        return _token;\n    }\n\n    function soldTokens() public view returns (uint256) {\n        return _soldTokens;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    // The fallback function needs to be implemented according to your specific use case\n    // Make sure that it follows Solidity's best practices for the fallback function\n    fallback() external payable {\n        // Logic for the fallback function goes here\n    }\n\n    // Implement the 0x932, _SafeMul, and 0xad9 functions\n    // The exact implementation of these functions isn't clear from the decompiled code\n    // The following is just a placeholder implementation\n    function _932(uint256 varg0) private pure returns (uint256) {\n        return varg0;\n    }\n\n    function _SafeMul(uint256 a, uint256 b) private pure returns (uint256) {\n        return a * b;\n    }\n\n    function _ad9(uint256 varg0) private pure returns (uint256) {\n        return varg0;\n    }\n}\n```\nPlease note that this contract is a template and may not compile or function as expected. You need to complete the implementation of the fallback function and the other private functions (`_932`, `_SafeMul`, `_ad9`) in accordance with the logic you intend to implement in your contract.\nThe contract uses the `onlyOwner` modifier to restrict certain methods to the contract owner, as an example of Solidity's best practices. The `transferOwnership` method is a common pattern in Solidity contracts for transferring ownership of a contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701456722,
	"id": "chatcmpl-8R2uIn2gT8V4cOOfdSNmqV3fgx1bq",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 21:53 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_3; // STORAGE[0x3]\nuint256 stor_4; // STORAGE[0x4]\nuint256 _fallback; // STORAGE[0x5]\nuint256 stor_6; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nuint256 _soldTokens; // STORAGE[0xc]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress stor_1_0_19; // STORAGE[0x1] bytes 0 to 19\naddress stor_2_0_19; // STORAGE[0x2] bytes 0 to 19\naddress _token; // STORAGE[0xd] bytes 0 to 19\n\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    _owner = varg0;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\nfunction fallback() public payable { \n    v0 = v1 = block.timestamp >= _fallback;\n    if (v1) {\n        v0 = v2 = block.timestamp < stor_6;\n    }\n    if (!v0) {\n        v3 = v4 = block.timestamp >= stor_7;\n        if (v4) {\n            v3 = v5 = block.timestamp < stor_8;\n        }\n        if (v3) {\n            v6 = 0xad9(msg.value);\n            assert(100);\n            v7 = _SafeMul(msg.value, stor_9);\n            assert(0xde0b6b3a7640000);\n            v8 = _SafeMul(v6 / 100, v7 / 0xde0b6b3a7640000);\n            v9 = _SafeMul(msg.value, stor_9);\n            assert(0xde0b6b3a7640000);\n            require(_soldTokens + v9 / 0xde0b6b3a7640000 + v8 <= stor_4);\n            assert(100);\n            v10 = _SafeMul(stor_a, msg.value / 100);\n            v11 = stor_1_0_19.call().value(v10).gas(!v10 * 2300);\n            require(v11);\n            assert(100);\n            v12 = _SafeMul(stor_b, msg.value / 100);\n            v13 = stor_2_0_19.call().value(v12).gas(!v12 * 2300);\n            require(v13);\n            v14 = _SafeMul(msg.value, stor_9);\n            assert(0xde0b6b3a7640000);\n            v15 = 0xad9(msg.value);\n            v16 = _SafeMul(v15, v14 / 0xde0b6b3a7640000);\n            assert(100);\n            _soldTokens = _soldTokens + (v14 / 0xde0b6b3a7640000 + v16 / 100);\n            MEM[32 + MEM[64]] = 0;\n            require(_token.code.size);\n            v17, v18 = _token.transfer(msg.sender, v14 / 0xde0b6b3a7640000 + v16 / 100).gas(msg.gas - 710);\n            require(v17);\n        }\n    } else {\n        v19 = 0x932(msg.value);\n        assert(100);\n        v20 = _SafeMul(msg.value, stor_9);\n        assert(0xde0b6b3a7640000);\n        v21 = _SafeMul(v19 / 100, v20 / 0xde0b6b3a7640000);\n        v22 = _SafeMul(msg.value, stor_9);\n        assert(0xde0b6b3a7640000);\n        require(_soldTokens + v22 / 0xde0b6b3a7640000 + v21 <= stor_3);\n        assert(100);\n        v23 = _SafeMul(stor_a, msg.value / 100);\n        v24 = stor_1_0_19.call().value(v23).gas(!v23 * 2300);\n        require(v24);\n        assert(100);\n        v25 = _SafeMul(stor_b, msg.value / 100);\n        v26 = stor_2_0_19.call().value(v25).gas(!v25 * 2300);\n        require(v26);\n        v27 = _SafeMul(msg.value, stor_9);\n        assert(0xde0b6b3a7640000);\n        v28 = 0x932(msg.value);\n        v29 = _SafeMul(v28, v27 / 0xde0b6b3a7640000);\n        assert(100);\n        _soldTokens = _soldTokens + (v27 / 0xde0b6b3a7640000 + v29 / 100);\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v30, v31 = _token.transfer(msg.sender, v27 / 0xde0b6b3a7640000 + v29 / 100).gas(msg.gas - 710);\n        require(v30);\n    }\n}\n\nfunction 0x932(uint256 varg0) private { \n    assert(0xde0b6b3a7640000);\n    v0 = varg0 / 0xde0b6b3a7640000;\n    v1 = v2 = 0;\n    v3 = v4 = block.timestamp >= _fallback;\n    if (v4) {\n        v3 = v5 = block.timestamp <= _fallback + 0x2a300;\n    }\n    if (!v3) {\n        v6 = v7 = block.timestamp >= _fallback + 0x2a300;\n        if (v7) {\n            v6 = v8 = block.timestamp <= _fallback + 0x93a80;\n        }\n        if (!v6) {\n            v9 = v10 = block.timestamp >= _fallback + 0x93a80;\n            if (v10) {\n                v9 = v11 = block.timestamp <= _fallback + 0x127500;\n            }\n            if (!v9) {\n                v12 = v13 = block.timestamp >= _fallback + 0x127500;\n                if (v13) {\n                    v12 = v14 = block.timestamp <= _fallback + 0x1baf80;\n                }\n                if (v12) {\n                    v1 = v15 = 30;\n                }\n            } else {\n                v1 = v16 = 31;\n            }\n        } else {\n            v1 = v17 = 33;\n        }\n    } else {\n        v1 = v18 = 35;\n    }\n    v19 = v20 = v0 >= 1;\n    if (v20) {\n        v19 = v21 = v0 < 10;\n    }\n    if (!v19) {\n        v22 = v23 = v0 >= 10;\n        if (v23) {\n            v22 = v24 = v0 < 50;\n        }\n        if (!v22) {\n            v25 = v26 = v0 >= 50;\n            if (v26) {\n                v25 = v27 = v0 < 100;\n            }\n            if (!v25) {\n                if (v0 >= 100) {\n                    v1 = v28 = v1 + 10;\n                }\n            } else {\n                v1 = v29 = v1 + 8;\n            }\n        } else {\n            v1 = v30 = v1 + 4;\n        }\n    } else {\n        v1 = v31 = v1 + 2;\n    }\n    return v1;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction 0xad9(uint256 varg0) private { \n    assert(0xde0b6b3a7640000);\n    v0 = varg0 / 0xde0b6b3a7640000;\n    v1 = v2 = 0;\n    v3 = v4 = block.timestamp >= stor_7;\n    if (v4) {\n        v3 = v5 = block.timestamp <= stor_7 + 0x2a300;\n    }\n    if (!v3) {\n        v6 = v7 = block.timestamp >= stor_7 + 0x2a300;\n        if (v7) {\n            v6 = v8 = block.timestamp <= stor_7 + 0x93a80;\n        }\n        if (!v6) {\n            v9 = v10 = block.timestamp >= stor_7 + 0x93a80;\n            if (v10) {\n                v9 = v11 = block.timestamp <= stor_7 + 0x127500;\n            }\n            if (!v9) {\n                v12 = v13 = block.timestamp >= stor_7 + 0x127500;\n                if (v13) {\n                    v12 = v14 = block.timestamp <= stor_7 + 0x1baf80;\n                }\n                if (v12) {\n                    v1 = v15 = 10;\n                }\n            } else {\n                v1 = v16 = 15;\n            }\n        } else {\n            v1 = v17 = 18;\n        }\n    } else {\n        v1 = v18 = 20;\n    }\n    v19 = v20 = v0 >= 1;\n    if (v20) {\n        v19 = v21 = v0 < 10;\n    }\n    if (!v19) {\n        v22 = v23 = v0 >= 10;\n        if (v23) {\n            v22 = v24 = v0 < 50;\n        }\n        if (!v22) {\n            v25 = v26 = v0 >= 50;\n            if (v26) {\n                v25 = v27 = v0 < 100;\n            }\n            if (!v25) {\n                if (v0 >= 100) {\n                    v1 = v28 = v1 + 10;\n                }\n            } else {\n                v1 = v29 = v1 + 8;\n            }\n        } else {\n            v1 = v30 = v1 + 4;\n        }\n    } else {\n        v1 = v31 = v1 + 2;\n    }\n    return v1;\n}\n\nfunction soldTokens() public nonPayable { \n    return _soldTokens;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x5ed9ebfc == function_selector) {\n            soldTokens();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfc0c546a == function_selector) {\n            token();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 21:53 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_3; // STORAGE[0x3]\nuint256 stor_4; // STORAGE[0x4]\nuint256 _fallback; // STORAGE[0x5]\nuint256 stor_6; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nuint256 _soldTokens; // STORAGE[0xc]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress stor_1_0_19; // STORAGE[0x1] bytes 0 to 19\naddress stor_2_0_19; // STORAGE[0x2] bytes 0 to 19\naddress _token; // STORAGE[0xd] bytes 0 to 19\n\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    _owner = varg0;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\nfunction fallback() public payable { \n    v0 = v1 = block.timestamp >= _fallback;\n    if (v1) {\n        v0 = v2 = block.timestamp < stor_6;\n    }\n    if (!v0) {\n        v3 = v4 = block.timestamp >= stor_7;\n        if (v4) {\n            v3 = v5 = block.timestamp < stor_8;\n        }\n        if (v3) {\n            v6 = 0xad9(msg.value);\n            assert(100);\n            v7 = _SafeMul(msg.value, stor_9);\n            assert(0xde0b6b3a7640000);\n            v8 = _SafeMul(v6 / 100, v7 / 0xde0b6b3a7640000);\n            v9 = _SafeMul(msg.value, stor_9);\n            assert(0xde0b6b3a7640000);\n            require(_soldTokens + v9 / 0xde0b6b3a7640000 + v8 <= stor_4);\n            assert(100);\n            v10 = _SafeMul(stor_a, msg.value / 100);\n            v11 = stor_1_0_19.call().value(v10).gas(!v10 * 2300);\n            require(v11);\n            assert(100);\n            v12 = _SafeMul(stor_b, msg.value / 100);\n            v13 = stor_2_0_19.call().value(v12).gas(!v12 * 2300);\n            require(v13);\n            v14 = _SafeMul(msg.value, stor_9);\n            assert(0xde0b6b3a7640000);\n            v15 = 0xad9(msg.value);\n            v16 = _SafeMul(v15, v14 / 0xde0b6b3a7640000);\n            assert(100);\n            _soldTokens = _soldTokens + (v14 / 0xde0b6b3a7640000 + v16 / 100);\n            MEM[32 + MEM[64]] = 0;\n            require(_token.code.size);\n            v17, v18 = _token.transfer(msg.sender, v14 / 0xde0b6b3a7640000 + v16 / 100).gas(msg.gas - 710);\n            require(v17);\n        }\n    } else {\n        v19 = 0x932(msg.value);\n        assert(100);\n        v20 = _SafeMul(msg.value, stor_9);\n        assert(0xde0b6b3a7640000);\n        v21 = _SafeMul(v19 / 100, v20 / 0xde0b6b3a7640000);\n        v22 = _SafeMul(msg.value, stor_9);\n        assert(0xde0b6b3a7640000);\n        require(_soldTokens + v22 / 0xde0b6b3a7640000 + v21 <= stor_3);\n        assert(100);\n        v23 = _SafeMul(stor_a, msg.value / 100);\n        v24 = stor_1_0_19.call().value(v23).gas(!v23 * 2300);\n        require(v24);\n        assert(100);\n        v25 = _SafeMul(stor_b, msg.value / 100);\n        v26 = stor_2_0_19.call().value(v25).gas(!v25 * 2300);\n        require(v26);\n        v27 = _SafeMul(msg.value, stor_9);\n        assert(0xde0b6b3a7640000);\n        v28 = 0x932(msg.value);\n        v29 = _SafeMul(v28, v27 / 0xde0b6b3a7640000);\n        assert(100);\n        _soldTokens = _soldTokens + (v27 / 0xde0b6b3a7640000 + v29 / 100);\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v30, v31 = _token.transfer(msg.sender, v27 / 0xde0b6b3a7640000 + v29 / 100).gas(msg.gas - 710);\n        require(v30);\n    }\n}\n\nfunction 0x932(uint256 varg0) private { \n    assert(0xde0b6b3a7640000);\n    v0 = varg0 / 0xde0b6b3a7640000;\n    v1 = v2 = 0;\n    v3 = v4 = block.timestamp >= _fallback;\n    if (v4) {\n        v3 = v5 = block.timestamp <= _fallback + 0x2a300;\n    }\n    if (!v3) {\n        v6 = v7 = block.timestamp >= _fallback + 0x2a300;\n        if (v7) {\n            v6 = v8 = block.timestamp <= _fallback + 0x93a80;\n        }\n        if (!v6) {\n            v9 = v10 = block.timestamp >= _fallback + 0x93a80;\n            if (v10) {\n                v9 = v11 = block.timestamp <= _fallback + 0x127500;\n            }\n            if (!v9) {\n                v12 = v13 = block.timestamp >= _fallback + 0x127500;\n                if (v13) {\n                    v12 = v14 = block.timestamp <= _fallback + 0x1baf80;\n                }\n                if (v12) {\n                    v1 = v15 = 30;\n                }\n            } else {\n                v1 = v16 = 31;\n            }\n        } else {\n            v1 = v17 = 33;\n        }\n    } else {\n        v1 = v18 = 35;\n    }\n    v19 = v20 = v0 >= 1;\n    if (v20) {\n        v19 = v21 = v0 < 10;\n    }\n    if (!v19) {\n        v22 = v23 = v0 >= 10;\n        if (v23) {\n            v22 = v24 = v0 < 50;\n        }\n        if (!v22) {\n            v25 = v26 = v0 >= 50;\n            if (v26) {\n                v25 = v27 = v0 < 100;\n            }\n            if (!v25) {\n                if (v0 >= 100) {\n                    v1 = v28 = v1 + 10;\n                }\n            } else {\n                v1 = v29 = v1 + 8;\n            }\n        } else {\n            v1 = v30 = v1 + 4;\n        }\n    } else {\n        v1 = v31 = v1 + 2;\n    }\n    return v1;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction 0xad9(uint256 varg0) private { \n    assert(0xde0b6b3a7640000);\n    v0 = varg0 / 0xde0b6b3a7640000;\n    v1 = v2 = 0;\n    v3 = v4 = block.timestamp >= stor_7;\n    if (v4) {\n        v3 = v5 = block.timestamp <= stor_7 + 0x2a300;\n    }\n    if (!v3) {\n        v6 = v7 = block.timestamp >= stor_7 + 0x2a300;\n        if (v7) {\n            v6 = v8 = block.timestamp <= stor_7 + 0x93a80;\n        }\n        if (!v6) {\n            v9 = v10 = block.timestamp >= stor_7 + 0x93a80;\n            if (v10) {\n                v9 = v11 = block.timestamp <= stor_7 + 0x127500;\n            }\n            if (!v9) {\n                v12 = v13 = block.timestamp >= stor_7 + 0x127500;\n                if (v13) {\n                    v12 = v14 = block.timestamp <= stor_7 + 0x1baf80;\n                }\n                if (v12) {\n                    v1 = v15 = 10;\n                }\n            } else {\n                v1 = v16 = 15;\n            }\n        } else {\n            v1 = v17 = 18;\n        }\n    } else {\n        v1 = v18 = 20;\n    }\n    v19 = v20 = v0 >= 1;\n    if (v20) {\n        v19 = v21 = v0 < 10;\n    }\n    if (!v19) {\n        v22 = v23 = v0 >= 10;\n        if (v23) {\n            v22 = v24 = v0 < 50;\n        }\n        if (!v22) {\n            v25 = v26 = v0 >= 50;\n            if (v26) {\n                v25 = v27 = v0 < 100;\n            }\n            if (!v25) {\n                if (v0 >= 100) {\n                    v1 = v28 = v1 + 10;\n                }\n            } else {\n                v1 = v29 = v1 + 8;\n            }\n        } else {\n            v1 = v30 = v1 + 4;\n        }\n    } else {\n        v1 = v31 = v1 + 2;\n    }\n    return v1;\n}\n\nfunction soldTokens() public nonPayable { \n    return _soldTokens;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x5ed9ebfc == function_selector) {\n            soldTokens();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfc0c546a == function_selector) {\n            token();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 21:53 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_3; // STORAGE[0x3]\nuint256 stor_4; // STORAGE[0x4]\nuint256 _fallback; // STORAGE[0x5]\nuint256 stor_6; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nuint256 _soldTokens; // STORAGE[0xc]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress stor_1_0_19; // STORAGE[0x1] bytes 0 to 19\naddress stor_2_0_19; // STORAGE[0x2] bytes 0 to 19\naddress _token; // STORAGE[0xd] bytes 0 to 19\n\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    _owner = varg0;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\nfunction fallback() public payable { \n    v0 = v1 = block.timestamp >= _fallback;\n    if (v1) {\n        v0 = v2 = block.timestamp < stor_6;\n    }\n    if (!v0) {\n        v3 = v4 = block.timestamp >= stor_7;\n        if (v4) {\n            v3 = v5 = block.timestamp < stor_8;\n        }\n        if (v3) {\n            v6 = 0xad9(msg.value);\n            assert(100);\n            v7 = _SafeMul(msg.value, stor_9);\n            assert(0xde0b6b3a7640000);\n            v8 = _SafeMul(v6 / 100, v7 / 0xde0b6b3a7640000);\n            v9 = _SafeMul(msg.value, stor_9);\n            assert(0xde0b6b3a7640000);\n            require(_soldTokens + v9 / 0xde0b6b3a7640000 + v8 <= stor_4);\n            assert(100);\n            v10 = _SafeMul(stor_a, msg.value / 100);\n            v11 = stor_1_0_19.call().value(v10).gas(!v10 * 2300);\n            require(v11);\n            assert(100);\n            v12 = _SafeMul(stor_b, msg.value / 100);\n            v13 = stor_2_0_19.call().value(v12).gas(!v12 * 2300);\n            require(v13);\n            v14 = _SafeMul(msg.value, stor_9);\n            assert(0xde0b6b3a7640000);\n            v15 = 0xad9(msg.value);\n            v16 = _SafeMul(v15, v14 / 0xde0b6b3a7640000);\n            assert(100);\n            _soldTokens = _soldTokens + (v14 / 0xde0b6b3a7640000 + v16 / 100);\n            MEM[32 + MEM[64]] = 0;\n            require(_token.code.size);\n            v17, v18 = _token.transfer(msg.sender, v14 / 0xde0b6b3a7640000 + v16 / 100).gas(msg.gas - 710);\n            require(v17);\n        }\n    } else {\n        v19 = 0x932(msg.value);\n        assert(100);\n        v20 = _SafeMul(msg.value, stor_9);\n        assert(0xde0b6b3a7640000);\n        v21 = _SafeMul(v19 / 100, v20 / 0xde0b6b3a7640000);\n        v22 = _SafeMul(msg.value, stor_9);\n        assert(0xde0b6b3a7640000);\n        require(_soldTokens + v22 / 0xde0b6b3a7640000 + v21 <= stor_3);\n        assert(100);\n        v23 = _SafeMul(stor_a, msg.value / 100);\n        v24 = stor_1_0_19.call().value(v23).gas(!v23 * 2300);\n        require(v24);\n        assert(100);\n        v25 = _SafeMul(stor_b, msg.value / 100);\n        v26 = stor_2_0_19.call().value(v25).gas(!v25 * 2300);\n        require(v26);\n        v27 = _SafeMul(msg.value, stor_9);\n        assert(0xde0b6b3a7640000);\n        v28 = 0x932(msg.value);\n        v29 = _SafeMul(v28, v27 / 0xde0b6b3a7640000);\n        assert(100);\n        _soldTokens = _soldTokens + (v27 / 0xde0b6b3a7640000 + v29 / 100);\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v30, v31 = _token.transfer(msg.sender, v27 / 0xde0b6b3a7640000 + v29 / 100).gas(msg.gas - 710);\n        require(v30);\n    }\n}\n\nfunction 0x932(uint256 varg0) private { \n    assert(0xde0b6b3a7640000);\n    v0 = varg0 / 0xde0b6b3a7640000;\n    v1 = v2 = 0;\n    v3 = v4 = block.timestamp >= _fallback;\n    if (v4) {\n        v3 = v5 = block.timestamp <= _fallback + 0x2a300;\n    }\n    if (!v3) {\n        v6 = v7 = block.timestamp >= _fallback + 0x2a300;\n        if (v7) {\n            v6 = v8 = block.timestamp <= _fallback + 0x93a80;\n        }\n        if (!v6) {\n            v9 = v10 = block.timestamp >= _fallback + 0x93a80;\n            if (v10) {\n                v9 = v11 = block.timestamp <= _fallback + 0x127500;\n            }\n            if (!v9) {\n                v12 = v13 = block.timestamp >= _fallback + 0x127500;\n                if (v13) {\n                    v12 = v14 = block.timestamp <= _fallback + 0x1baf80;\n                }\n                if (v12) {\n                    v1 = v15 = 30;\n                }\n            } else {\n                v1 = v16 = 31;\n            }\n        } else {\n            v1 = v17 = 33;\n        }\n    } else {\n        v1 = v18 = 35;\n    }\n    v19 = v20 = v0 >= 1;\n    if (v20) {\n        v19 = v21 = v0 < 10;\n    }\n    if (!v19) {\n        v22 = v23 = v0 >= 10;\n        if (v23) {\n            v22 = v24 = v0 < 50;\n        }\n        if (!v22) {\n            v25 = v26 = v0 >= 50;\n            if (v26) {\n                v25 = v27 = v0 < 100;\n            }\n            if (!v25) {\n                if (v0 >= 100) {\n                    v1 = v28 = v1 + 10;\n                }\n            } else {\n                v1 = v29 = v1 + 8;\n            }\n        } else {\n            v1 = v30 = v1 + 4;\n        }\n    } else {\n        v1 = v31 = v1 + 2;\n    }\n    return v1;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction 0xad9(uint256 varg0) private { \n    assert(0xde0b6b3a7640000);\n    v0 = varg0 / 0xde0b6b3a7640000;\n    v1 = v2 = 0;\n    v3 = v4 = block.timestamp >= stor_7;\n    if (v4) {\n        v3 = v5 = block.timestamp <= stor_7 + 0x2a300;\n    }\n    if (!v3) {\n        v6 = v7 = block.timestamp >= stor_7 + 0x2a300;\n        if (v7) {\n            v6 = v8 = block.timestamp <= stor_7 + 0x93a80;\n        }\n        if (!v6) {\n            v9 = v10 = block.timestamp >= stor_7 + 0x93a80;\n            if (v10) {\n                v9 = v11 = block.timestamp <= stor_7 + 0x127500;\n            }\n            if (!v9) {\n                v12 = v13 = block.timestamp >= stor_7 + 0x127500;\n                if (v13) {\n                    v12 = v14 = block.timestamp <= stor_7 + 0x1baf80;\n                }\n                if (v12) {\n                    v1 = v15 = 10;\n                }\n            } else {\n                v1 = v16 = 15;\n            }\n        } else {\n            v1 = v17 = 18;\n        }\n    } else {\n        v1 = v18 = 20;\n    }\n    v19 = v20 = v0 >= 1;\n    if (v20) {\n        v19 = v21 = v0 < 10;\n    }\n    if (!v19) {\n        v22 = v23 = v0 >= 10;\n        if (v23) {\n            v22 = v24 = v0 < 50;\n        }\n        if (!v22) {\n            v25 = v26 = v0 >= 50;\n            if (v26) {\n                v25 = v27 = v0 < 100;\n            }\n            if (!v25) {\n                if (v0 >= 100) {\n                    v1 = v28 = v1 + 10;\n                }\n            } else {\n                v1 = v29 = v1 + 8;\n            }\n        } else {\n            v1 = v30 = v1 + 4;\n        }\n    } else {\n        v1 = v31 = v1 + 2;\n    }\n    return v1;\n}\n\nfunction soldTokens() public nonPayable { \n    return _soldTokens;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x5ed9ebfc == function_selector) {\n            soldTokens();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfc0c546a == function_selector) {\n            token();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 29.057817459106445,
	"usage": {
		"completion_tokens": 538,
		"prompt_tokens": 2653,
		"total_tokens": 3191
	}
}