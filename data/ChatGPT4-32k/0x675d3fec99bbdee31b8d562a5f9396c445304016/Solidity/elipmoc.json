{
	"address": "0x675d3fec99bbdee31b8d562a5f9396c445304016",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity version of the decompiled code. Please note that the functions in Solidity are clearer and easier to read than their EVM Bytecode counterparts.\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    // define data struct and variables\n    string private _name;\n    string private _symbol;\n    uint256 private _decimals;\n    uint256 private _minTokensRequiredForMessage;\n    bool private _isAllowedToPurchase;\n    address private _owner;\n    mapping(address => uint256) private _balances;\n\n    // define events\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event MessageAdded(address indexed from, string message, uint256 balance);\n\n    constructor() {\n        _owner = msg.sender;\n        _isAllowedToPurchase = true;\n    }\n\n    function isAllowedToPurchase() public view returns (bool) {\n        return _isAllowedToPurchase;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function sendFundsTo(address recipient, uint256 amount) public {\n        require(msg.sender == _owner, \"Only the owner can send funds\");\n        payable(recipient).transfer(amount);\n    }\n\n    function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n\n    function setMinTokensRequiredForMessage(uint256 minTokens) public {\n        require(msg.sender == _owner, \"Only the owner can set the minimum tokens required for a message\");\n        _minTokensRequiredForMessage = minTokens;\n    }\n\n    function setMessage(string memory message) public {\n        require(_balances[msg.sender] >= _minTokensRequiredForMessage, \"Not enough tokens to set a message\");\n        emit MessageAdded(msg.sender, message, _balances[msg.sender]);\n    }\n\n    function disablePurchasing() public {\n        require(msg.sender == _owner, \"Only the owner can disable purchasing\");\n        _isAllowedToPurchase = false;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function enablePurchasing() public {\n        require(msg.sender == _owner, \"Only the owner can enable purchasing\");\n        _isAllowedToPurchase = true;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        require(_balances[msg.sender] >= amount, \"Insufficient balance\");\n        _balances[msg.sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function setSymbol(string memory symbol) public {\n        require(msg.sender == _owner, \"Only the owner can set the symbol\");\n        _symbol = symbol;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner, \"Only the owner can transfer ownership\");\n        _owner = newOwner;\n    }\n\n    function getBalance(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n}\n```",
				"role": "assistant"
			}
		}
	],
	"created": 1701467511,
	"id": "chatcmpl-8R5iJuRrs0mzgF34SZHQAQjnSeQED",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 18:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 stor_6; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x7]\naddress _setMinTokensRequiredForMessage; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\nuint8 _isAllowedToPurchase; // STORAGE[0x5] bytes 0 to 0\n\n// Events\nTransfer(address, address, uint256);\nMessageAdded(address, string, uint256);\n\nfunction isAllowedToPurchase() public nonPayable { \n    return _isAllowedToPurchase;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction sendFundsTo(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    v0 = varg0.call().value(varg1).gas(!varg1 * 2300);\n    require(v0);\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction setMinTokensRequiredForMessage(uint256 varg0) public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    stor_6 = varg0;\n}\n\nfunction setMessage(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(_balanceOf[msg.sender] >= stor_6);\n    v1 = new array[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        MEM[v1.data + v2] = MEM[v0.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v0.length + v1.data;\n    if (0x1f & v0.length) {\n        MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n    }\n    emit MessageAdded(msg.sender, v1, _balanceOf[msg.sender]);\n}\n\nfunction disablePurchasing() public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    _isAllowedToPurchase = 0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction enablePurchasing() public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    _isAllowedToPurchase = 1;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 != 0) {\n        if (_balanceOf[msg.sender] >= varg1) {\n            if (_balanceOf[varg0] + varg1 >= _balanceOf[varg0]) {\n                _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n                _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n                emit Transfer(msg.sender, varg0, varg1);\n                v0 = 1;\n            } else {\n                v0 = v1 = 0;\n            }\n        } else {\n            v0 = v2 = 0;\n        }\n    } else {\n        v0 = v3 = 0;\n    }\n    return v0;\n}\n\nfunction setSymbol(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(msg.sender == _setMinTokensRequiredForMessage);\n    v1 = v2 = v0.data;\n    if (31 < v0.length) {\n        _symbol.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v2 + v0.length > v1) {\n                STORAGE[v3] = MEM[v1];\n                v1 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _symbol.length = v0.length + v0.length | ~0xff & MEM[v2];\n    }\n    while (v4 + (31 + _symbol.length >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    _setMinTokensRequiredForMessage = varg0;\n}\n\nfunction getBalance(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x35a45c == function_selector) {\n            isAllowedToPurchase();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0xcd1812f == function_selector) {\n            sendFundsTo(address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x33287446 == function_selector) {\n            setMinTokensRequiredForMessage(uint256);\n        } else if (0x368b8772 == function_selector) {\n            setMessage(string);\n        } else if (0x64acdb77 == function_selector) {\n            disablePurchasing();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8f580996 == function_selector) {\n            enablePurchasing();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb84c8246 == function_selector) {\n            setSymbol(string);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf8b2cb4f == function_selector) {\n            getBalance(address);\n        }\n    }\n    require(_isAllowedToPurchase);\n    assert(stor_4_0_0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value / STORAGE[4];\n    emit Transfer(address(this), msg.sender, 10);\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 18:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 stor_6; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x7]\naddress _setMinTokensRequiredForMessage; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\nuint8 _isAllowedToPurchase; // STORAGE[0x5] bytes 0 to 0\n\n// Events\nTransfer(address, address, uint256);\nMessageAdded(address, string, uint256);\n\nfunction isAllowedToPurchase() public nonPayable { \n    return _isAllowedToPurchase;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction sendFundsTo(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    v0 = varg0.call().value(varg1).gas(!varg1 * 2300);\n    require(v0);\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction setMinTokensRequiredForMessage(uint256 varg0) public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    stor_6 = varg0;\n}\n\nfunction setMessage(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(_balanceOf[msg.sender] >= stor_6);\n    v1 = new array[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        MEM[v1.data + v2] = MEM[v0.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v0.length + v1.data;\n    if (0x1f & v0.length) {\n        MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n    }\n    emit MessageAdded(msg.sender, v1, _balanceOf[msg.sender]);\n}\n\nfunction disablePurchasing() public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    _isAllowedToPurchase = 0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction enablePurchasing() public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    _isAllowedToPurchase = 1;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 != 0) {\n        if (_balanceOf[msg.sender] >= varg1) {\n            if (_balanceOf[varg0] + varg1 >= _balanceOf[varg0]) {\n                _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n                _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n                emit Transfer(msg.sender, varg0, varg1);\n                v0 = 1;\n            } else {\n                v0 = v1 = 0;\n            }\n        } else {\n            v0 = v2 = 0;\n        }\n    } else {\n        v0 = v3 = 0;\n    }\n    return v0;\n}\n\nfunction setSymbol(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(msg.sender == _setMinTokensRequiredForMessage);\n    v1 = v2 = v0.data;\n    if (31 < v0.length) {\n        _symbol.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v2 + v0.length > v1) {\n                STORAGE[v3] = MEM[v1];\n                v1 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _symbol.length = v0.length + v0.length | ~0xff & MEM[v2];\n    }\n    while (v4 + (31 + _symbol.length >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    _setMinTokensRequiredForMessage = varg0;\n}\n\nfunction getBalance(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x35a45c == function_selector) {\n            isAllowedToPurchase();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0xcd1812f == function_selector) {\n            sendFundsTo(address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x33287446 == function_selector) {\n            setMinTokensRequiredForMessage(uint256);\n        } else if (0x368b8772 == function_selector) {\n            setMessage(string);\n        } else if (0x64acdb77 == function_selector) {\n            disablePurchasing();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8f580996 == function_selector) {\n            enablePurchasing();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb84c8246 == function_selector) {\n            setSymbol(string);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf8b2cb4f == function_selector) {\n            getBalance(address);\n        }\n    }\n    require(_isAllowedToPurchase);\n    assert(stor_4_0_0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value / STORAGE[4];\n    emit Transfer(address(this), msg.sender, 10);\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 18:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 stor_6; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x7]\naddress _setMinTokensRequiredForMessage; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\nuint8 _isAllowedToPurchase; // STORAGE[0x5] bytes 0 to 0\n\n// Events\nTransfer(address, address, uint256);\nMessageAdded(address, string, uint256);\n\nfunction isAllowedToPurchase() public nonPayable { \n    return _isAllowedToPurchase;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction sendFundsTo(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    v0 = varg0.call().value(varg1).gas(!varg1 * 2300);\n    require(v0);\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction setMinTokensRequiredForMessage(uint256 varg0) public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    stor_6 = varg0;\n}\n\nfunction setMessage(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(_balanceOf[msg.sender] >= stor_6);\n    v1 = new array[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        MEM[v1.data + v2] = MEM[v0.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v0.length + v1.data;\n    if (0x1f & v0.length) {\n        MEM[v5 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v5 - (0x1f & v0.length)];\n    }\n    emit MessageAdded(msg.sender, v1, _balanceOf[msg.sender]);\n}\n\nfunction disablePurchasing() public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    _isAllowedToPurchase = 0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction enablePurchasing() public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    _isAllowedToPurchase = 1;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 != 0) {\n        if (_balanceOf[msg.sender] >= varg1) {\n            if (_balanceOf[varg0] + varg1 >= _balanceOf[varg0]) {\n                _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n                _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n                emit Transfer(msg.sender, varg0, varg1);\n                v0 = 1;\n            } else {\n                v0 = v1 = 0;\n            }\n        } else {\n            v0 = v2 = 0;\n        }\n    } else {\n        v0 = v3 = 0;\n    }\n    return v0;\n}\n\nfunction setSymbol(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    require(msg.sender == _setMinTokensRequiredForMessage);\n    v1 = v2 = v0.data;\n    if (31 < v0.length) {\n        _symbol.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v2 + v0.length > v1) {\n                STORAGE[v3] = MEM[v1];\n                v1 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _symbol.length = v0.length + v0.length | ~0xff & MEM[v2];\n    }\n    while (v4 + (31 + _symbol.length >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _setMinTokensRequiredForMessage);\n    _setMinTokensRequiredForMessage = varg0;\n}\n\nfunction getBalance(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x35a45c == function_selector) {\n            isAllowedToPurchase();\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0xcd1812f == function_selector) {\n            sendFundsTo(address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x33287446 == function_selector) {\n            setMinTokensRequiredForMessage(uint256);\n        } else if (0x368b8772 == function_selector) {\n            setMessage(string);\n        } else if (0x64acdb77 == function_selector) {\n            disablePurchasing();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8f580996 == function_selector) {\n            enablePurchasing();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb84c8246 == function_selector) {\n            setSymbol(string);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf8b2cb4f == function_selector) {\n            getBalance(address);\n        }\n    }\n    require(_isAllowedToPurchase);\n    assert(stor_4_0_0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value / STORAGE[4];\n    emit Transfer(address(this), msg.sender, 10);\n}\n.",
	"status": "1",
	"time_cost": 32.13516545295715,
	"usage": {
		"completion_tokens": 659,
		"prompt_tokens": 2112,
		"total_tokens": 2771
	}
}