{
	"address": "0x3d807baa0342b748ec59aa0b01e93f774672f7ac",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a similar Solidity-based smart contract. Due to the complexity and the highly customized nature of the given EVM Bytecode, some functionalities might not be perfectly translated. \n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    uint256 private _stakingRequirement;\n    mapping (address => uint256) private _dividendsOf;\n    uint256 private _totalSupply;\n    uint256 private stor_b;\n    address private _owner;\n    uint8 private _decimals;\n    uint8 private _onlyAmbassadors;\n\n    event onWithdraw(address indexed user, uint256 ethereumWithdrawn);\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event onTokenSell(address indexed user, uint256 tokensBurned, uint256 ethereumEarned);\n    event onReinvestment(address indexed user, uint256 ethereumReinvested, uint256 newTokensMinted);\n\n    constructor() {\n        _owner = msg.sender;\n        _onlyAmbassadors = 1;\n    }\n\n    function dividendsOf(address user) public view returns (uint256) {\n        return _dividendsOf[user];\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function onlyAmbassadors() public view returns (uint8) {\n        return _onlyAmbassadors;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function stakingRequirement() public view returns (uint256) {\n        return _stakingRequirement;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function setStakingRequirement(uint256 requirement) public {\n        require(msg.sender == _owner, \"Only the owner can set the staking requirement\");\n        _stakingRequirement = requirement;\n    }\n\n    function disableInitialStage() public {\n        require(msg.sender == _owner, \"Only the owner can disable the initial stage\");\n        _onlyAmbassadors = 0;\n    }\n\n    function transfer(address receiver, uint256 amount) public {\n        require(amount <= _dividendsOf[msg.sender], \"Insufficient balance\");\n        _dividendsOf[msg.sender] -= amount;\n        _dividendsOf[receiver] += amount;\n        emit Transfer(msg.sender, receiver, amount);\n    }\n\n    function setAdministrator(address newAdmin) public {\n        require(msg.sender == _owner, \"Only the owner can set the administrator\");\n        _owner = newAdmin;\n    }\n\n    function sell(uint256 amount) public {\n        require(amount <= _dividendsOf[msg.sender], \"Insufficient balance\");\n        _dividendsOf[msg.sender] -= amount;\n        _totalSupply -= amount;\n        // Add additional sell logic here\n    }\n\n    function withdraw() public {\n        uint256 amount = _dividendsOf[msg.sender];\n        require(amount > 0, \"No dividends to withdraw\");\n        _dividendsOf[msg.sender] = 0;\n        payable(msg.sender).transfer(amount);\n        emit onWithdraw(msg.sender, amount);\n    }\n\n    function reinvest() public {\n        uint256 amount = _dividendsOf[msg.sender];\n        require(amount > 0, \"No dividends to reinvest\");\n        _dividendsOf[msg.sender] = 0;\n        _totalSupply += amount; // This is just an example logic\n        emit onReinvestment(msg.sender, amount, amount); // This is just an example logic\n    }\n\n    fallback() external payable {\n        // Add logic here for what should happen if Ether is sent to this contract\n    }\n\n    receive() external payable {\n        // Add logic here for what should happen if Ether is sent to this contract\n    }\n}\n```\nPlease note that this is a basic translation of the provided EVM Bytecode and might not cover all functionalities. It is highly recommended to thoroughly revise and test this code before using it in a production environment.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457910,
	"id": "chatcmpl-8R3DSEzoS5quJ9rhHh2BZ0IbhX46o",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 03:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _stakingRequirement; // STORAGE[0x4]\nmapping (uint256 => [uint256]) owner_5; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0x6]\nmapping (uint256 => [uint256]) owner_7; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _dividendsOf; // STORAGE[0x8]\nmapping (uint256 => [uint256]) owner_9; // STORAGE[0x9]\nuint256 _totalSupply; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _administrators; // STORAGE[0xc]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 _onlyAmbassadors; // STORAGE[0xd] bytes 0 to 0\n\n// Events\nonWithdraw(address, uint256);\nTransfer(address, address, uint256);\nonTokenSell(address, uint256, uint256);\nonReinvestment(address, uint256, uint256);\n\nfunction 0x13be() private { \n    v0 = 0x15a4(1);\n    require(v0 > 0);\n    v1 = 0x15a4(0);\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] + (v1 << 64);\n    _dividendsOf[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + _dividendsOf[msg.sender]).gas(!(v1 + _dividendsOf[msg.sender]) * 2300);\n    require(v2);\n    emit onWithdraw(msg.sender, v1 + _dividendsOf[msg.sender]);\n    return ;\n}\n\nfunction 0x15a4(uint256 varg0) private { \n    if (varg0) {\n        v0 = v1 = (stor_b * _exit[msg.sender] - _dividendsOf[msg.sender] >> 64) + owner_7[msg.sender];\n    } else {\n        v0 = stor_b * _exit[msg.sender] - _dividendsOf[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    v0 = 0x8ad(0, msg.value);\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return stor_b * _exit[varg0] - _dividendsOf[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction 0x1d48(uint256 varg0) private { \n    require(_exit[msg.sender] > 0);\n    require(varg0 <= _exit[msg.sender]);\n    v0 = varg0 / 1000;\n    assert(5);\n    assert(v0 / 5 <= v0);\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg0;\n    _exit[msg.sender] = _exit[msg.sender] - (stor_b * varg0 + (v0 - v0 / 5 << 64));\n    if (_totalSupply > 0) {\n        assert(_totalSupply);\n        assert(stor_b + (v0 / 5 << 64) / _totalSupply >= stor_b);\n        stor_b = stor_b + (v0 / 5 << 64) / _totalSupply;\n    }\n    emit onTokenSell(msg.sender, varg0, v0 - v0 / 5);\n    return ;\n}\n\nfunction calculateTokensReceived(uint256 varg0) public nonPayable { \n    assert(5);\n    assert(varg0 / 5 <= varg0);\n    return (varg0 - varg0 / 5) * 1000;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction calculateEthereumReceived(uint256 varg0) public nonPayable { \n    require(varg0 <= _totalSupply);\n    assert(5);\n    assert(varg0 / 5 <= varg0);\n    return varg0 - varg0 / 5;\n}\n\nfunction onlyAmbassadors() public nonPayable { \n    return _onlyAmbassadors;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction administrators(bytes32 varg0) public nonPayable { \n    return 0xff & _administrators[~0x0 & varg0];\n}\n\nfunction withdraw() public nonPayable { \n    0x13be();\n}\n\nfunction sellPrice() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & '0.001';\n    }\n    return v0;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    v0 = 0x15a4(varg0);\n    return v0;\n}\n\nfunction totalEthereumBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _exit[varg0];\n}\n\nfunction setStakingRequirement(uint256 varg0) public nonPayable { \n    v0 = msg.sender;\n    require(msg.sender == _owner);\n    _stakingRequirement = varg0;\n}\n\nfunction buyPrice() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & '0.001';\n    }\n    return v0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction myTokens() public nonPayable { \n    return _exit[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction disableInitialStage() public nonPayable { \n    v0 = msg.sender;\n    require(msg.sender == _owner);\n    _onlyAmbassadors = 0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_exit[msg.sender] > 0);\n    v0 = v1 = !_onlyAmbassadors;\n    if (!_onlyAmbassadors) {\n        v0 = v2 = varg1 <= _exit[msg.sender];\n    }\n    require(v0);\n    v3 = 0x15a4(1);\n    if (v3 > 0) {\n        0x13be();\n    }\n    assert(5);\n    assert(varg1 / 5 <= varg1);\n    assert(varg1 / 5 <= _totalSupply);\n    _totalSupply = _totalSupply - varg1 / 5;\n    assert(varg1 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg1;\n    assert(_exit[varg0] + (varg1 - varg1 / 5) >= _exit[varg0]);\n    _exit[varg0] = _exit[varg0] + (varg1 - varg1 / 5);\n    _exit[msg.sender] = _exit[msg.sender] - stor_b * varg1;\n    _exit[varg0] = _exit[varg0] + stor_b * (varg1 - varg1 / 5);\n    assert(_totalSupply);\n    assert(stor_b + (varg1 / 5 / 1000 << 64) / _totalSupply >= stor_b);\n    stor_b = stor_b + (varg1 / 5 / 1000 << 64) / _totalSupply;\n    emit Transfer(msg.sender, varg0, varg1 - varg1 / 5);\n    return 1;\n}\n\nfunction setSymbol(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v1 = msg.sender;\n    require(msg.sender == _owner);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _symbol.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _symbol.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _symbol.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n}\n\nfunction setName(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v1 = msg.sender;\n    require(msg.sender == _owner);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _name.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _name.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _name.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n}\n\nfunction setAdministrator(address varg0) public nonPayable { \n    v0 = msg.sender;\n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0x1d48(varg0);\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0x1d48(_exit[msg.sender]);\n    }\n    0x13be();\n}\n\nfunction buy(address varg0) public payable { \n    v0 = 0x8ad(varg0, msg.value);\n    return 0;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0x15a4(1);\n    require(v0 > 0);\n    v1 = 0x15a4(0);\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] + (v1 << 64);\n    _dividendsOf[msg.sender] = 0;\n    v2 = 0x8ad(0, v1 + _dividendsOf[msg.sender]);\n    emit onReinvestment(msg.sender, v1 + _dividendsOf[msg.sender], v2);\n}\n\nfunction 0x8ad(uint256 varg0, uint256 varg1) private { \n    v0 = v1 = _onlyAmbassadors;\n    if (v1) {\n        v0 = v2 = (address(this)).balance - varg1 <= 0x1158e460913d00000;\n    }\n    if (!v0) {\n        _onlyAmbassadors = 0;\n        assert(5);\n        v3 = varg1 / 5;\n        assert(3);\n        assert(v3 / 3 <= v3);\n        v4 = v5 = v3 - v3 / 3;\n        assert(v3 <= varg1);\n        v6 = (varg1 - v3) * 1000;\n        v7 = v8 = v5 << 64;\n        v9 = v10 = v6 > 0;\n        if (v10) {\n            assert(v6 + _totalSupply >= v6);\n            v9 = v11 = v6 + _totalSupply > _totalSupply;\n        }\n        require(v9);\n        v12 = v13 = address(varg0) != 0;\n        if (v13) {\n            v12 = v14 = address(varg0) != msg.sender;\n        }\n        if (v12) {\n            v15 = address(varg0);\n            v12 = v16 = _exit[v15] >= _stakingRequirement;\n        }\n        if (!v12) {\n            v4 = v5 + v3 / 3;\n            assert(v4 >= v5);\n            v7 = v17 = v4 << 64;\n        } else {\n            v18 = address(varg0);\n            assert(owner_7[v18] + v3 / 3 >= owner_7[v18]);\n            v19 = address(varg0);\n            owner_7[v19] = owner_7[v18] + v3 / 3;\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v6;\n        } else {\n            assert(_totalSupply + v6 >= _totalSupply);\n            _totalSupply = _totalSupply + v6;\n            assert(_totalSupply);\n            stor_b = stor_b + (v4 << 64) / _totalSupply;\n            assert(_totalSupply);\n            v7 = v20 = v7 - (v7 - v6 * ((v4 << 64) / _totalSupply));\n        }\n        assert(_exit[msg.sender] + v6 >= _exit[msg.sender]);\n        _exit[msg.sender] = _exit[msg.sender] + v6;\n        _exit[msg.sender] = _exit[msg.sender] + (stor_b * v6 - v7);\n        emit 0x22c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5(msg.sender, address(varg0), varg1, v6);\n    } else {\n        v21 = v22 = 0xff & owner_5[msg.sender] == 1;\n        if (v22) {\n            v21 = v23 = owner_9[msg.sender] + varg1 <= 0xde0b6b3a7640000;\n        }\n        require(v21);\n        v24 = owner_9[msg.sender] + varg1;\n        assert(v24 >= owner_9[msg.sender]);\n        owner_9[msg.sender] = v24;\n        assert(5);\n        v25 = varg1 / 5;\n        assert(3);\n        assert(v25 / 3 <= v25);\n        v26 = v27 = v25 - v25 / 3;\n        assert(v25 <= varg1);\n        v6 = v28 = (varg1 - v25) * 1000;\n        v29 = v30 = v27 << 64;\n        v31 = v32 = v28 > 0;\n        if (v32) {\n            assert(v28 + _totalSupply >= v28);\n            v31 = v33 = v28 + _totalSupply > _totalSupply;\n        }\n        require(v31);\n        v34 = v35 = address(varg0) != 0;\n        if (v35) {\n            v34 = v36 = address(varg0) != msg.sender;\n        }\n        if (v34) {\n            v37 = address(varg0);\n            v34 = v38 = _exit[v37] >= _stakingRequirement;\n        }\n        if (!v34) {\n            v26 = v27 + v25 / 3;\n            assert(v26 >= v27);\n            v29 = v39 = v26 << 64;\n        } else {\n            v40 = address(varg0);\n            assert(owner_7[v40] + v25 / 3 >= owner_7[v40]);\n            v41 = address(varg0);\n            owner_7[v41] = owner_7[v40] + v25 / 3;\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v28;\n        } else {\n            assert(_totalSupply + v28 >= _totalSupply);\n            _totalSupply = _totalSupply + v28;\n            assert(_totalSupply);\n            stor_b = stor_b + (v26 << 64) / _totalSupply;\n            assert(_totalSupply);\n            v29 = v42 = v29 - (v29 - v28 * ((v26 << 64) / _totalSupply));\n        }\n        assert(_exit[msg.sender] + v28 >= _exit[msg.sender]);\n        _exit[msg.sender] = _exit[msg.sender] + v28;\n        _exit[msg.sender] = _exit[msg.sender] + (stor_b * v28 - v29);\n        emit 0x22c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5(msg.sender, address(varg0), varg1, v28);\n    }\n    return v6;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x65318b == function_selector) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x10d0ffdd == function_selector) {\n            calculateTokensReceived(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x22609373 == function_selector) {\n            calculateEthereumReceived(uint256);\n        } else if (0x27defa1f == function_selector) {\n            onlyAmbassadors();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x392efb52 == function_selector) {\n            administrators(bytes32);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x6b2f4632 == function_selector) {\n            totalEthereumBalance();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8328b610 == function_selector) {\n            setStakingRequirement(uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa8e04f34 == function_selector) {\n            disableInitialStage();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb84c8246 == function_selector) {\n            setSymbol(string);\n        } else if (0xc47f0027 == function_selector) {\n            setName(string);\n        } else if (0xdf8089ef == function_selector) {\n            setAdministrator(address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 03:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _stakingRequirement; // STORAGE[0x4]\nmapping (uint256 => [uint256]) owner_5; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0x6]\nmapping (uint256 => [uint256]) owner_7; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _dividendsOf; // STORAGE[0x8]\nmapping (uint256 => [uint256]) owner_9; // STORAGE[0x9]\nuint256 _totalSupply; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _administrators; // STORAGE[0xc]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 _onlyAmbassadors; // STORAGE[0xd] bytes 0 to 0\n\n// Events\nonWithdraw(address, uint256);\nTransfer(address, address, uint256);\nonTokenSell(address, uint256, uint256);\nonReinvestment(address, uint256, uint256);\n\nfunction 0x13be() private { \n    v0 = 0x15a4(1);\n    require(v0 > 0);\n    v1 = 0x15a4(0);\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] + (v1 << 64);\n    _dividendsOf[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + _dividendsOf[msg.sender]).gas(!(v1 + _dividendsOf[msg.sender]) * 2300);\n    require(v2);\n    emit onWithdraw(msg.sender, v1 + _dividendsOf[msg.sender]);\n    return ;\n}\n\nfunction 0x15a4(uint256 varg0) private { \n    if (varg0) {\n        v0 = v1 = (stor_b * _exit[msg.sender] - _dividendsOf[msg.sender] >> 64) + owner_7[msg.sender];\n    } else {\n        v0 = stor_b * _exit[msg.sender] - _dividendsOf[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    v0 = 0x8ad(0, msg.value);\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return stor_b * _exit[varg0] - _dividendsOf[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction 0x1d48(uint256 varg0) private { \n    require(_exit[msg.sender] > 0);\n    require(varg0 <= _exit[msg.sender]);\n    v0 = varg0 / 1000;\n    assert(5);\n    assert(v0 / 5 <= v0);\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg0;\n    _exit[msg.sender] = _exit[msg.sender] - (stor_b * varg0 + (v0 - v0 / 5 << 64));\n    if (_totalSupply > 0) {\n        assert(_totalSupply);\n        assert(stor_b + (v0 / 5 << 64) / _totalSupply >= stor_b);\n        stor_b = stor_b + (v0 / 5 << 64) / _totalSupply;\n    }\n    emit onTokenSell(msg.sender, varg0, v0 - v0 / 5);\n    return ;\n}\n\nfunction calculateTokensReceived(uint256 varg0) public nonPayable { \n    assert(5);\n    assert(varg0 / 5 <= varg0);\n    return (varg0 - varg0 / 5) * 1000;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction calculateEthereumReceived(uint256 varg0) public nonPayable { \n    require(varg0 <= _totalSupply);\n    assert(5);\n    assert(varg0 / 5 <= varg0);\n    return varg0 - varg0 / 5;\n}\n\nfunction onlyAmbassadors() public nonPayable { \n    return _onlyAmbassadors;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction administrators(bytes32 varg0) public nonPayable { \n    return 0xff & _administrators[~0x0 & varg0];\n}\n\nfunction withdraw() public nonPayable { \n    0x13be();\n}\n\nfunction sellPrice() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & '0.001';\n    }\n    return v0;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    v0 = 0x15a4(varg0);\n    return v0;\n}\n\nfunction totalEthereumBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _exit[varg0];\n}\n\nfunction setStakingRequirement(uint256 varg0) public nonPayable { \n    v0 = msg.sender;\n    require(msg.sender == _owner);\n    _stakingRequirement = varg0;\n}\n\nfunction buyPrice() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & '0.001';\n    }\n    return v0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction myTokens() public nonPayable { \n    return _exit[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction disableInitialStage() public nonPayable { \n    v0 = msg.sender;\n    require(msg.sender == _owner);\n    _onlyAmbassadors = 0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_exit[msg.sender] > 0);\n    v0 = v1 = !_onlyAmbassadors;\n    if (!_onlyAmbassadors) {\n        v0 = v2 = varg1 <= _exit[msg.sender];\n    }\n    require(v0);\n    v3 = 0x15a4(1);\n    if (v3 > 0) {\n        0x13be();\n    }\n    assert(5);\n    assert(varg1 / 5 <= varg1);\n    assert(varg1 / 5 <= _totalSupply);\n    _totalSupply = _totalSupply - varg1 / 5;\n    assert(varg1 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg1;\n    assert(_exit[varg0] + (varg1 - varg1 / 5) >= _exit[varg0]);\n    _exit[varg0] = _exit[varg0] + (varg1 - varg1 / 5);\n    _exit[msg.sender] = _exit[msg.sender] - stor_b * varg1;\n    _exit[varg0] = _exit[varg0] + stor_b * (varg1 - varg1 / 5);\n    assert(_totalSupply);\n    assert(stor_b + (varg1 / 5 / 1000 << 64) / _totalSupply >= stor_b);\n    stor_b = stor_b + (varg1 / 5 / 1000 << 64) / _totalSupply;\n    emit Transfer(msg.sender, varg0, varg1 - varg1 / 5);\n    return 1;\n}\n\nfunction setSymbol(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v1 = msg.sender;\n    require(msg.sender == _owner);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _symbol.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _symbol.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _symbol.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n}\n\nfunction setName(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v1 = msg.sender;\n    require(msg.sender == _owner);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _name.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _name.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _name.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n}\n\nfunction setAdministrator(address varg0) public nonPayable { \n    v0 = msg.sender;\n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0x1d48(varg0);\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0x1d48(_exit[msg.sender]);\n    }\n    0x13be();\n}\n\nfunction buy(address varg0) public payable { \n    v0 = 0x8ad(varg0, msg.value);\n    return 0;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0x15a4(1);\n    require(v0 > 0);\n    v1 = 0x15a4(0);\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] + (v1 << 64);\n    _dividendsOf[msg.sender] = 0;\n    v2 = 0x8ad(0, v1 + _dividendsOf[msg.sender]);\n    emit onReinvestment(msg.sender, v1 + _dividendsOf[msg.sender], v2);\n}\n\nfunction 0x8ad(uint256 varg0, uint256 varg1) private { \n    v0 = v1 = _onlyAmbassadors;\n    if (v1) {\n        v0 = v2 = (address(this)).balance - varg1 <= 0x1158e460913d00000;\n    }\n    if (!v0) {\n        _onlyAmbassadors = 0;\n        assert(5);\n        v3 = varg1 / 5;\n        assert(3);\n        assert(v3 / 3 <= v3);\n        v4 = v5 = v3 - v3 / 3;\n        assert(v3 <= varg1);\n        v6 = (varg1 - v3) * 1000;\n        v7 = v8 = v5 << 64;\n        v9 = v10 = v6 > 0;\n        if (v10) {\n            assert(v6 + _totalSupply >= v6);\n            v9 = v11 = v6 + _totalSupply > _totalSupply;\n        }\n        require(v9);\n        v12 = v13 = address(varg0) != 0;\n        if (v13) {\n            v12 = v14 = address(varg0) != msg.sender;\n        }\n        if (v12) {\n            v15 = address(varg0);\n            v12 = v16 = _exit[v15] >= _stakingRequirement;\n        }\n        if (!v12) {\n            v4 = v5 + v3 / 3;\n            assert(v4 >= v5);\n            v7 = v17 = v4 << 64;\n        } else {\n            v18 = address(varg0);\n            assert(owner_7[v18] + v3 / 3 >= owner_7[v18]);\n            v19 = address(varg0);\n            owner_7[v19] = owner_7[v18] + v3 / 3;\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v6;\n        } else {\n            assert(_totalSupply + v6 >= _totalSupply);\n            _totalSupply = _totalSupply + v6;\n            assert(_totalSupply);\n            stor_b = stor_b + (v4 << 64) / _totalSupply;\n            assert(_totalSupply);\n            v7 = v20 = v7 - (v7 - v6 * ((v4 << 64) / _totalSupply));\n        }\n        assert(_exit[msg.sender] + v6 >= _exit[msg.sender]);\n        _exit[msg.sender] = _exit[msg.sender] + v6;\n        _exit[msg.sender] = _exit[msg.sender] + (stor_b * v6 - v7);\n        emit 0x22c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5(msg.sender, address(varg0), varg1, v6);\n    } else {\n        v21 = v22 = 0xff & owner_5[msg.sender] == 1;\n        if (v22) {\n            v21 = v23 = owner_9[msg.sender] + varg1 <= 0xde0b6b3a7640000;\n        }\n        require(v21);\n        v24 = owner_9[msg.sender] + varg1;\n        assert(v24 >= owner_9[msg.sender]);\n        owner_9[msg.sender] = v24;\n        assert(5);\n        v25 = varg1 / 5;\n        assert(3);\n        assert(v25 / 3 <= v25);\n        v26 = v27 = v25 - v25 / 3;\n        assert(v25 <= varg1);\n        v6 = v28 = (varg1 - v25) * 1000;\n        v29 = v30 = v27 << 64;\n        v31 = v32 = v28 > 0;\n        if (v32) {\n            assert(v28 + _totalSupply >= v28);\n            v31 = v33 = v28 + _totalSupply > _totalSupply;\n        }\n        require(v31);\n        v34 = v35 = address(varg0) != 0;\n        if (v35) {\n            v34 = v36 = address(varg0) != msg.sender;\n        }\n        if (v34) {\n            v37 = address(varg0);\n            v34 = v38 = _exit[v37] >= _stakingRequirement;\n        }\n        if (!v34) {\n            v26 = v27 + v25 / 3;\n            assert(v26 >= v27);\n            v29 = v39 = v26 << 64;\n        } else {\n            v40 = address(varg0);\n            assert(owner_7[v40] + v25 / 3 >= owner_7[v40]);\n            v41 = address(varg0);\n            owner_7[v41] = owner_7[v40] + v25 / 3;\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v28;\n        } else {\n            assert(_totalSupply + v28 >= _totalSupply);\n            _totalSupply = _totalSupply + v28;\n            assert(_totalSupply);\n            stor_b = stor_b + (v26 << 64) / _totalSupply;\n            assert(_totalSupply);\n            v29 = v42 = v29 - (v29 - v28 * ((v26 << 64) / _totalSupply));\n        }\n        assert(_exit[msg.sender] + v28 >= _exit[msg.sender]);\n        _exit[msg.sender] = _exit[msg.sender] + v28;\n        _exit[msg.sender] = _exit[msg.sender] + (stor_b * v28 - v29);\n        emit 0x22c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5(msg.sender, address(varg0), varg1, v28);\n    }\n    return v6;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x65318b == function_selector) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x10d0ffdd == function_selector) {\n            calculateTokensReceived(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x22609373 == function_selector) {\n            calculateEthereumReceived(uint256);\n        } else if (0x27defa1f == function_selector) {\n            onlyAmbassadors();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x392efb52 == function_selector) {\n            administrators(bytes32);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x6b2f4632 == function_selector) {\n            totalEthereumBalance();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8328b610 == function_selector) {\n            setStakingRequirement(uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa8e04f34 == function_selector) {\n            disableInitialStage();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb84c8246 == function_selector) {\n            setSymbol(string);\n        } else if (0xc47f0027 == function_selector) {\n            setName(string);\n        } else if (0xdf8089ef == function_selector) {\n            setAdministrator(address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 03:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _stakingRequirement; // STORAGE[0x4]\nmapping (uint256 => [uint256]) owner_5; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0x6]\nmapping (uint256 => [uint256]) owner_7; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _dividendsOf; // STORAGE[0x8]\nmapping (uint256 => [uint256]) owner_9; // STORAGE[0x9]\nuint256 _totalSupply; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _administrators; // STORAGE[0xc]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 _onlyAmbassadors; // STORAGE[0xd] bytes 0 to 0\n\n// Events\nonWithdraw(address, uint256);\nTransfer(address, address, uint256);\nonTokenSell(address, uint256, uint256);\nonReinvestment(address, uint256, uint256);\n\nfunction 0x13be() private { \n    v0 = 0x15a4(1);\n    require(v0 > 0);\n    v1 = 0x15a4(0);\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] + (v1 << 64);\n    _dividendsOf[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + _dividendsOf[msg.sender]).gas(!(v1 + _dividendsOf[msg.sender]) * 2300);\n    require(v2);\n    emit onWithdraw(msg.sender, v1 + _dividendsOf[msg.sender]);\n    return ;\n}\n\nfunction 0x15a4(uint256 varg0) private { \n    if (varg0) {\n        v0 = v1 = (stor_b * _exit[msg.sender] - _dividendsOf[msg.sender] >> 64) + owner_7[msg.sender];\n    } else {\n        v0 = stor_b * _exit[msg.sender] - _dividendsOf[msg.sender] >> 64;\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    v0 = 0x8ad(0, msg.value);\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return stor_b * _exit[varg0] - _dividendsOf[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction 0x1d48(uint256 varg0) private { \n    require(_exit[msg.sender] > 0);\n    require(varg0 <= _exit[msg.sender]);\n    v0 = varg0 / 1000;\n    assert(5);\n    assert(v0 / 5 <= v0);\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg0;\n    _exit[msg.sender] = _exit[msg.sender] - (stor_b * varg0 + (v0 - v0 / 5 << 64));\n    if (_totalSupply > 0) {\n        assert(_totalSupply);\n        assert(stor_b + (v0 / 5 << 64) / _totalSupply >= stor_b);\n        stor_b = stor_b + (v0 / 5 << 64) / _totalSupply;\n    }\n    emit onTokenSell(msg.sender, varg0, v0 - v0 / 5);\n    return ;\n}\n\nfunction calculateTokensReceived(uint256 varg0) public nonPayable { \n    assert(5);\n    assert(varg0 / 5 <= varg0);\n    return (varg0 - varg0 / 5) * 1000;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction calculateEthereumReceived(uint256 varg0) public nonPayable { \n    require(varg0 <= _totalSupply);\n    assert(5);\n    assert(varg0 / 5 <= varg0);\n    return varg0 - varg0 / 5;\n}\n\nfunction onlyAmbassadors() public nonPayable { \n    return _onlyAmbassadors;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction administrators(bytes32 varg0) public nonPayable { \n    return 0xff & _administrators[~0x0 & varg0];\n}\n\nfunction withdraw() public nonPayable { \n    0x13be();\n}\n\nfunction sellPrice() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & '0.001';\n    }\n    return v0;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    v0 = 0x15a4(varg0);\n    return v0;\n}\n\nfunction totalEthereumBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _exit[varg0];\n}\n\nfunction setStakingRequirement(uint256 varg0) public nonPayable { \n    v0 = msg.sender;\n    require(msg.sender == _owner);\n    _stakingRequirement = varg0;\n}\n\nfunction buyPrice() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & '0.001';\n    }\n    return v0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction myTokens() public nonPayable { \n    return _exit[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction disableInitialStage() public nonPayable { \n    v0 = msg.sender;\n    require(msg.sender == _owner);\n    _onlyAmbassadors = 0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_exit[msg.sender] > 0);\n    v0 = v1 = !_onlyAmbassadors;\n    if (!_onlyAmbassadors) {\n        v0 = v2 = varg1 <= _exit[msg.sender];\n    }\n    require(v0);\n    v3 = 0x15a4(1);\n    if (v3 > 0) {\n        0x13be();\n    }\n    assert(5);\n    assert(varg1 / 5 <= varg1);\n    assert(varg1 / 5 <= _totalSupply);\n    _totalSupply = _totalSupply - varg1 / 5;\n    assert(varg1 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg1;\n    assert(_exit[varg0] + (varg1 - varg1 / 5) >= _exit[varg0]);\n    _exit[varg0] = _exit[varg0] + (varg1 - varg1 / 5);\n    _exit[msg.sender] = _exit[msg.sender] - stor_b * varg1;\n    _exit[varg0] = _exit[varg0] + stor_b * (varg1 - varg1 / 5);\n    assert(_totalSupply);\n    assert(stor_b + (varg1 / 5 / 1000 << 64) / _totalSupply >= stor_b);\n    stor_b = stor_b + (varg1 / 5 / 1000 << 64) / _totalSupply;\n    emit Transfer(msg.sender, varg0, varg1 - varg1 / 5);\n    return 1;\n}\n\nfunction setSymbol(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v1 = msg.sender;\n    require(msg.sender == _owner);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _symbol.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _symbol.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _symbol.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n}\n\nfunction setName(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v1 = msg.sender;\n    require(msg.sender == _owner);\n    v2 = v3 = v0.data;\n    if (31 < v0.length) {\n        _name.length = 1 + (v0.length + v0.length);\n        if (v0.length) {\n            while (v3 + v0.length > v2) {\n                STORAGE[v4] = MEM[v2];\n                v2 += 32;\n                v4 += 1;\n            }\n        }\n    } else {\n        _name.length = v0.length + v0.length | ~0xff & MEM[v3];\n    }\n    while (v5 + (31 + _name.length >> 5) > v4) {\n        STORAGE[v4] = 0;\n        v4 += 1;\n    }\n}\n\nfunction setAdministrator(address varg0) public nonPayable { \n    v0 = msg.sender;\n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0x1d48(varg0);\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0x1d48(_exit[msg.sender]);\n    }\n    0x13be();\n}\n\nfunction buy(address varg0) public payable { \n    v0 = 0x8ad(varg0, msg.value);\n    return 0;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0x15a4(1);\n    require(v0 > 0);\n    v1 = 0x15a4(0);\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] + (v1 << 64);\n    _dividendsOf[msg.sender] = 0;\n    v2 = 0x8ad(0, v1 + _dividendsOf[msg.sender]);\n    emit onReinvestment(msg.sender, v1 + _dividendsOf[msg.sender], v2);\n}\n\nfunction 0x8ad(uint256 varg0, uint256 varg1) private { \n    v0 = v1 = _onlyAmbassadors;\n    if (v1) {\n        v0 = v2 = (address(this)).balance - varg1 <= 0x1158e460913d00000;\n    }\n    if (!v0) {\n        _onlyAmbassadors = 0;\n        assert(5);\n        v3 = varg1 / 5;\n        assert(3);\n        assert(v3 / 3 <= v3);\n        v4 = v5 = v3 - v3 / 3;\n        assert(v3 <= varg1);\n        v6 = (varg1 - v3) * 1000;\n        v7 = v8 = v5 << 64;\n        v9 = v10 = v6 > 0;\n        if (v10) {\n            assert(v6 + _totalSupply >= v6);\n            v9 = v11 = v6 + _totalSupply > _totalSupply;\n        }\n        require(v9);\n        v12 = v13 = address(varg0) != 0;\n        if (v13) {\n            v12 = v14 = address(varg0) != msg.sender;\n        }\n        if (v12) {\n            v15 = address(varg0);\n            v12 = v16 = _exit[v15] >= _stakingRequirement;\n        }\n        if (!v12) {\n            v4 = v5 + v3 / 3;\n            assert(v4 >= v5);\n            v7 = v17 = v4 << 64;\n        } else {\n            v18 = address(varg0);\n            assert(owner_7[v18] + v3 / 3 >= owner_7[v18]);\n            v19 = address(varg0);\n            owner_7[v19] = owner_7[v18] + v3 / 3;\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v6;\n        } else {\n            assert(_totalSupply + v6 >= _totalSupply);\n            _totalSupply = _totalSupply + v6;\n            assert(_totalSupply);\n            stor_b = stor_b + (v4 << 64) / _totalSupply;\n            assert(_totalSupply);\n            v7 = v20 = v7 - (v7 - v6 * ((v4 << 64) / _totalSupply));\n        }\n        assert(_exit[msg.sender] + v6 >= _exit[msg.sender]);\n        _exit[msg.sender] = _exit[msg.sender] + v6;\n        _exit[msg.sender] = _exit[msg.sender] + (stor_b * v6 - v7);\n        emit 0x22c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5(msg.sender, address(varg0), varg1, v6);\n    } else {\n        v21 = v22 = 0xff & owner_5[msg.sender] == 1;\n        if (v22) {\n            v21 = v23 = owner_9[msg.sender] + varg1 <= 0xde0b6b3a7640000;\n        }\n        require(v21);\n        v24 = owner_9[msg.sender] + varg1;\n        assert(v24 >= owner_9[msg.sender]);\n        owner_9[msg.sender] = v24;\n        assert(5);\n        v25 = varg1 / 5;\n        assert(3);\n        assert(v25 / 3 <= v25);\n        v26 = v27 = v25 - v25 / 3;\n        assert(v25 <= varg1);\n        v6 = v28 = (varg1 - v25) * 1000;\n        v29 = v30 = v27 << 64;\n        v31 = v32 = v28 > 0;\n        if (v32) {\n            assert(v28 + _totalSupply >= v28);\n            v31 = v33 = v28 + _totalSupply > _totalSupply;\n        }\n        require(v31);\n        v34 = v35 = address(varg0) != 0;\n        if (v35) {\n            v34 = v36 = address(varg0) != msg.sender;\n        }\n        if (v34) {\n            v37 = address(varg0);\n            v34 = v38 = _exit[v37] >= _stakingRequirement;\n        }\n        if (!v34) {\n            v26 = v27 + v25 / 3;\n            assert(v26 >= v27);\n            v29 = v39 = v26 << 64;\n        } else {\n            v40 = address(varg0);\n            assert(owner_7[v40] + v25 / 3 >= owner_7[v40]);\n            v41 = address(varg0);\n            owner_7[v41] = owner_7[v40] + v25 / 3;\n        }\n        if (_totalSupply <= 0) {\n            _totalSupply = v28;\n        } else {\n            assert(_totalSupply + v28 >= _totalSupply);\n            _totalSupply = _totalSupply + v28;\n            assert(_totalSupply);\n            stor_b = stor_b + (v26 << 64) / _totalSupply;\n            assert(_totalSupply);\n            v29 = v42 = v29 - (v29 - v28 * ((v26 << 64) / _totalSupply));\n        }\n        assert(_exit[msg.sender] + v28 >= _exit[msg.sender]);\n        _exit[msg.sender] = _exit[msg.sender] + v28;\n        _exit[msg.sender] = _exit[msg.sender] + (stor_b * v28 - v29);\n        emit 0x22c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5(msg.sender, address(varg0), varg1, v28);\n    }\n    return v6;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x65318b == function_selector) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x10d0ffdd == function_selector) {\n            calculateTokensReceived(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x22609373 == function_selector) {\n            calculateEthereumReceived(uint256);\n        } else if (0x27defa1f == function_selector) {\n            onlyAmbassadors();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x392efb52 == function_selector) {\n            administrators(bytes32);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x6b2f4632 == function_selector) {\n            totalEthereumBalance();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8328b610 == function_selector) {\n            setStakingRequirement(uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa8e04f34 == function_selector) {\n            disableInitialStage();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb84c8246 == function_selector) {\n            setSymbol(string);\n        } else if (0xc47f0027 == function_selector) {\n            setName(string);\n        } else if (0xdf8089ef == function_selector) {\n            setAdministrator(address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 44.33255076408386,
	"usage": {
		"completion_tokens": 815,
		"prompt_tokens": 5142,
		"total_tokens": 5957
	}
}