{
	"address": "0xb104df39250112eda59b27f5db7013c7ee132d50",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is an attempt to re-construct the decompiled contract in Solidity. Please note that due to the complexity of the decompiled EVM bytecode, certain details may not be perfectly translated.\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    uint256 private totalSupply;\n    string private name;\n    string private symbol;\n    uint8 private decimals;\n    address private owner;\n    address private executor;\n    \n    mapping (address => uint256) private balances;\n    mapping (address => mapping (address => uint256)) private allowed;\n    \n    // Events\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    // Additional functions mentioned in decompiled code\n    function setOwner(address newOwner) public {\n        require(msg.sender == owner);\n        owner = newOwner;\n    }\n    \n    function setExecutor(address newExecutor) public {\n        require(msg.sender == owner);\n        executor = newExecutor;\n    }\n    \n    function mint(uint256 amount) public {\n        require(msg.sender == owner);\n        totalSupply += amount;\n        balances[msg.sender] += amount;\n        emit Transfer(address(0), msg.sender, amount);\n    }\n}\n```\n\nPlease note that the reconstructed Solidity code is based on the common patterns observed in the decompiled code and may not be an exact representation of the original Solidity code. The reconstructed code may also lack some details like modifier checks and events that were not obvious in the decompiled EVM bytecode.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474638,
	"id": "chatcmpl-8MvQE99XVe8u78QC3QO0mQNn9FarT",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0173:\n        \n            if (msg.value < storage[0x0c]) { revert(memory[0x00:0x00]); }\n        \n            var var0 = 0x00;\n        \n            if (var0 > 0x02) { assert(); }\n        \n            var var1 = storage[0x08] & 0xff;\n        \n            if (var1 > 0x02) { assert(); }\n        \n            if (var1 != var0) {\n                var0 = 0x01;\n            \n                if (var0 > 0x02) { assert(); }\n            \n                var1 = storage[0x08] & 0xff;\n            \n                if (var1 > 0x02) { assert(); }\n            \n                if (var1 != var0) {\n                    var0 = 0x02;\n                \n                    if (var0 > var0) { assert(); }\n                \n                    var1 = storage[0x08] & 0xff;\n                \n                    if (var1 > 0x02) { assert(); }\n                \n                    if (var1 != var0) { stop(); }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = msg.sender;\n                    var temp1 = temp0 + 0x20;\n                    memory[temp1:temp1 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                    var temp2 = temp1 + 0x20;\n                    memory[temp2:temp2 + 0x20] = msg.value;\n                    var temp3 = temp2 + 0x20;\n                    memory[temp3:temp3 + 0x20] = 0xff & 0x01;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n                    var0 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var1 = 0x7562b0cf;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                    var temp6 = temp5 + 0x04;\n                    memory[temp6:temp6 + 0x20] = msg.sender;\n                    var temp7 = temp6 + 0x20;\n                    memory[temp7:temp7 + 0x20] = msg.value;\n                    var var2 = temp7 + 0x20;\n                    var var3 = 0x00;\n                    var var4 = memory[0x40:0x60];\n                    var var5 = var2 - var4;\n                    var var6 = var4;\n                    var var7 = 0x00;\n                    var var8 = var0;\n                \n                    if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp8;\n                    temp8, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n                \n                    if (temp8) { stop(); }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = msg.sender;\n                var temp10 = temp9 + 0x20;\n                memory[temp10:temp10 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                var temp11 = temp10 + 0x20;\n                memory[temp11:temp11 + 0x20] = msg.value;\n                var temp12 = temp11 + 0x20;\n                memory[temp12:temp12 + 0x20] = 0xff & 0x01;\n                var temp13 = memory[0x40:0x60];\n                log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n                var0 = 0x0339;\n                var1 = storage[0x08] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = 0x7562b0cf;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp15 = temp14 + 0x04;\n                memory[temp15:temp15 + 0x20] = msg.sender;\n                var temp16 = temp15 + 0x20;\n                memory[temp16:temp16 + 0x20] = msg.value;\n                var3 = temp16 + 0x20;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var var9 = var1;\n            \n                if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n            \n                func_0317(var1, var2, var3, var4, var5, var6, var7, var8, var9);\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x0335d533) {\n                // Dispatch table entry for USER_GET_CROWDSALE_TOKEN()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0529;\n                USER_GET_CROWDSALE_TOKEN();\n                stop();\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x053e;\n                var2 = name();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x059c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = !!var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x13af4035) {\n                // Dispatch table entry for setOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ed;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setOwner(var2);\n                stop();\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0602;\n                var2 = totalSupply();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x1c3c0ea8) {\n                // Dispatch table entry for setExecutor(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x064f;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setExecutor(var2);\n                stop();\n            } else if (var0 == 0x200d2ed2) {\n                // Dispatch table entry for status()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0664;\n                var2 = status();\n                var3 = memory[0x40:0x60];\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 > 0x02) { assert(); }\n            \n                var temp23 = var4;\n                memory[temp23:temp23 + 0x20] = var5 & 0xff;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06e7;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = !!var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0714;\n                var2 = decimals();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x42966c68) {\n                // Dispatch table entry for burn(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x074b;\n                var2 = msg.data[0x04:0x24];\n                burn(var2);\n                stop();\n            } else if (var0 == 0x4369a2c2) {\n                // Dispatch table entry for charityAmtToCharity(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0784;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                charityAmtToCharity(var2);\n                stop();\n            } else if (var0 == 0x4c524be4) {\n                // Dispatch table entry for selectWinner(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07a7;\n                var2 = msg.data[0x04:0x24];\n                selectWinner(var2);\n                stop();\n            } else if (var0 == 0x55aff5ba) {\n                // Dispatch table entry for minTokParticipate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07bc;\n                var2 = minTokParticipate();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var2;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x607a124f) {\n                // Dispatch table entry for setAttrs(address,address,address,uint8,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0865;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var5 = msg.data[0x64:0x84] & 0xff;\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                setAttrs(var2, var3, var4, var5, var6, var7);\n                stop();\n            } else if (var0 == 0x6997d166) {\n                // Dispatch table entry for USER_VOTE(uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0891;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                USER_VOTE(var2, var3);\n                stop();\n            } else if (var0 == 0x6fceecf8) {\n                // Dispatch table entry for withdrawRestriction(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08ca;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = withdrawRestriction(var2);\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var2;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0917;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var1;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x72159335) {\n                // Dispatch table entry for voteInitiate(uint256,uint256,uint256,uint256,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x097b;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                voteInitiate(var2, var3, var4, var5, var6, var7);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0990;\n                var2 = owner();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x945c7c59) {\n                // Dispatch table entry for distributeTokenSale(uint256,uint256,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a0e;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                distributeTokenSale(var2, var3, var4, var5);\n                stop();\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a23;\n                var2 = symbol();\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = var2;\n                var temp38 = memory[0x40:0x60];\n                return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n            } else if (var0 == 0xa0712d68) {\n                // Dispatch table entry for mint(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a62;\n                var2 = msg.data[0x04:0x24];\n                mint(var2);\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0aa4;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = !!var1;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0xb5a9de6e) {\n                // Dispatch table entry for minEtherParticipate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ad1;\n                var2 = minEtherParticipate();\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = var2;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0xc34c08e5) {\n                // Dispatch table entry for executor()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0afa;\n                var2 = executor();\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b92;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var1;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0xe223facb) {\n                // Dispatch table entry for USER_GAME_WITH_TOKEN(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0bc9;\n                var2 = msg.data[0x04:0x24];\n                USER_GAME_WITH_TOKEN(var2);\n                stop();\n            } else if (var0 == 0xed02dded) {\n                // Dispatch table entry for lossToCharity(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c0b;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                lossToCharity(var2, var3);\n                stop();\n            } else if (var0 == 0xfe213712) {\n                // Dispatch table entry for USER_GET_PRIZE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c20;\n                USER_GET_PRIZE();\n                stop();\n            } else { goto label_0173; }\n        }\n    }\n    \n    function func_0317(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        var temp0;\n        temp0, memory[arg4:arg4 + arg3] = address(arg8).call.gas(msg.gas - 0x02c6).value(arg7)(memory[arg6:arg6 + arg5]);\n    \n        if (!temp0) { revert(memory[0x00:0x00]); }\n    \n        arg0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        arg1 = 0x01;\n        func_0C22(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0C22(var arg0, var arg1) {\n        if (arg0 <= 0x00) {\n        label_1198:\n            return;\n        } else if (!arg1) {\n            var var0 = 0x0f51;\n            memory[0x00:0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var var1 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = arg0;\n            var0 = func_2BA1(var1, var2);\n            memory[0x00:0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var0 = 0x0fff;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var2 = arg0;\n            var0 = func_2B87(var1, var2);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = msg.sender;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = temp0;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = 0xff & 0x02;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n            goto label_1198;\n        } else {\n            var0 = 0x0c9c;\n            memory[0x00:0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var2 = arg0;\n            var0 = func_2B87(var1, var2);\n            memory[0x00:0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var0 = 0x0d4a;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var2 = arg0;\n            var0 = func_2BA1(var1, var2);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var temp8 = arg0;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = temp8;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff, msg.sender]);\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp12 = temp11 + 0x20;\n            memory[temp12:temp12 + 0x20] = msg.sender;\n            var temp13 = temp12 + 0x20;\n            memory[temp13:temp13 + 0x20] = temp8;\n            var temp14 = temp13 + 0x20;\n            memory[temp14:temp14 + 0x20] = 0xff & 0x02;\n            var temp15 = memory[0x40:0x60];\n            log(memory[temp15:temp15 + (temp14 + 0x20) - temp15], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n            goto label_1198;\n        }\n    }\n    \n    function USER_GET_CROWDSALE_TOKEN() {\n        var var0 = 0x1287;\n        var var1 = storage[0x08] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x59770438;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = msg.sender;\n        var var3 = temp1 + 0x20;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = 0x00;\n        var var9 = var1;\n    \n        if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n    \n        func_1265(var1, var2, var3, var4, var5, var6, var7, var8, var9);\n    }\n    \n    function func_1265(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        var temp0;\n        temp0, memory[arg4:arg4 + arg3] = address(arg8).call.gas(msg.gas - 0x02c6).value(arg7)(memory[arg6:arg6 + arg5]);\n    \n        if (!temp0) { revert(memory[0x00:0x00]); }\n    \n        arg0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        arg1 = 0x01;\n        func_0C22(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) { return storage[0x07]; }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 != var0;\n    \n        if (var1) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp5;\n        \n            if (storage[keccak256(memory[0x00:0x40])] == 0x00) { goto label_1329; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (!var1) {\n        label_1329:\n            var temp0 = arg1;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = temp0;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = temp0;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setOwner(var arg0) {\n        var var0 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_14B9:\n            storage[0x03] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else if (storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender) { goto label_14B9; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function setExecutor(var arg0) {\n        var var0 = storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00;\n    \n        if (!var0) {\n            var0 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender;\n        \n            if (var0) { goto label_15F0; }\n            else { goto label_159E; }\n        } else if (var0) {\n        label_15F0:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_15FB:\n            storage[0x04] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x04] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n        label_159E:\n        \n            if (storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender) { goto label_15FB; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function status() returns (var r0) { return storage[0x08] & 0xff; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = 0x176b;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = arg2;\n        var2 = func_2BA1(var3, var4);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x17f7;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var4 = arg2;\n        var2 = func_2B87(var3, var4);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x1844;\n        var3 = var1;\n        var4 = arg2;\n        var2 = func_2B87(var3, var4);\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function decimals() returns (var r0) { return storage[0x06]; }\n    \n    function burn(var arg0) {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x19e2;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_2B87(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x1a31;\n        var1 = storage[0x00];\n        var2 = arg0;\n        var0 = func_2B87(var1, var2);\n        storage[0x00] = var0;\n    }\n    \n    function charityAmtToCharity(var arg0) {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1b4a;\n        var var1 = arg0;\n        var var2 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0xd45294f5;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var var4 = temp0 + 0x04;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        func_1B2A(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);\n    }\n    \n    function func_1B2A(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) {\n        var temp0;\n        temp0, memory[arg5:arg5 + arg4] = address(arg9).call.gas(msg.gas - 0x02c6).value(arg8)(memory[arg7:arg7 + arg6]);\n    \n        if (!temp0) { revert(memory[0x00:0x00]); }\n    \n        arg1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        func_2BBB(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function selectWinner(var arg0) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_1C03:\n            var0 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x4c524be4;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0;\n            var var2 = temp1 + 0x20;\n            var var3 = 0x00;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (temp2) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1C03; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function minTokParticipate() returns (var r0) { return storage[0x0d]; }\n    \n    function setAttrs(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_1D66:\n            storage[0x08] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x01 | (storage[0x08] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n            storage[0x09] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x09] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            storage[0x0a] = (arg2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x0a] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var0 = arg3;\n            var var1 = 0x08;\n            var var2 = storage[var1] & ~0xff;\n            var var3 = 0x01;\n            var var4 = var0;\n        \n            if (var4 > 0x02) { assert(); }\n        \n            storage[var1] = var4 * var3 | var2;\n            storage[0x0c] = arg4;\n            storage[0x0d] = arg5;\n            return;\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1D66; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function USER_VOTE(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0xfedfe46c;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[memory[0x40:0x60] + 0x40:memory[0x40:0x60] + 0x40 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        memory[temp2:temp2 + 0x20] = msg.sender;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = arg0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg1;\n        var var4 = temp5 + 0x20;\n        var var5 = 0x40;\n        var var6 = memory[var5:var5 + 0x20];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp6;\n        temp6, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp6) { revert(memory[0x00:0x00]); }\n    \n        var temp7 = memory[0x40:0x60];\n        var1 = memory[temp7 + 0x20:temp7 + 0x20 + 0x20];\n        var0 = memory[temp7:temp7 + 0x20];\n        var2 = 0x1fb6;\n        var3 = var0;\n        var4 = 0x01;\n        func_0C22(var3, var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= var1) { return; }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n    }\n    \n    function withdrawRestriction(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function voteInitiate(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_215F:\n            var0 = storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x72159335;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = arg1;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = arg2;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg3;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = arg4;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = arg5;\n            var var2 = temp6 + 0x20;\n            var var3 = 0x00;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp7;\n            temp7, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (temp7) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_215F; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function owner() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function distributeTokenSale(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_230F:\n            var0 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x945c7c59;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = arg1;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = arg2;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg3;\n            var var2 = temp4 + 0x20;\n            var var3 = 0x00;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp5;\n            temp5, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (temp5) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_230F; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function symbol() returns (var r0) { return storage[0x05]; }\n    \n    function mint(var arg0) {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x247e;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_2BA1(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x24cd;\n        var1 = storage[0x00];\n        var2 = arg0;\n        var0 = func_2BA1(var1, var2);\n        storage[0x00] = var0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x2570;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_2B87(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x25fc;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_2BA1(var2, var3);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function minEtherParticipate() returns (var r0) { return storage[0x0c]; }\n    \n    function executor() returns (var r0) { return storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function USER_GAME_WITH_TOKEN(var arg0) {\n        var var0 = 0x01;\n    \n        if (var0 > 0x02) { assert(); }\n    \n        var var1 = storage[0x08] & 0xff;\n    \n        if (var1 > 0x02) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg0 * 0x0de0b6b3a7640000) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 * 0x0de0b6b3a7640000 < storage[0x0d]) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x2820;\n        var1 = arg0 * 0x0de0b6b3a7640000;\n        var var2 = 0x00;\n        func_0C22(var1, var2);\n        var0 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = 0xfc0ea853;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = msg.sender;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg0 * 0x0de0b6b3a7640000;\n        var2 = temp2 + 0x20;\n        var var3 = 0x00;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp3;\n        temp3, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (temp3) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function lossToCharity(var arg0, var arg1) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_29BA:\n            var0 = 0x2a77;\n            var var1 = arg1;\n            var var2 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = 0xf2141ab9;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0;\n            var var4 = temp1 + 0x20;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = 0x00;\n            var var10 = var2;\n        \n            if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n        \n            func_2A57(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);\n            return;\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_29BA; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2A57(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) {\n        var temp0;\n        temp0, memory[arg5:arg5 + arg4] = address(arg9).call.gas(msg.gas - 0x02c6).value(arg8)(memory[arg7:arg7 + arg6]);\n    \n        if (!temp0) { revert(memory[0x00:0x00]); }\n    \n        arg1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        func_2BBB(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function USER_GET_PRIZE() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0x2d5cd1d6;\n        memory[memory[0x40:0x60] + 0x40:memory[0x40:0x60] + 0x40 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = msg.sender;\n        var var4 = temp1 + 0x20;\n        var var5 = 0x40;\n        var var6 = memory[var5:var5 + 0x20];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x40:0x60];\n        var1 = memory[temp3 + 0x20:temp3 + 0x20 + 0x20];\n        var0 = memory[temp3:temp3 + 0x20];\n        var2 = 0x2b78;\n        var3 = var1;\n        var4 = 0x01;\n        func_0C22(var3, var4);\n        var2 = 0x2b82;\n        var3 = msg.sender;\n        var4 = var0;\n        func_2BBB(var3, var4);\n    }\n    \n    function func_2B87(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 - arg1;\n    \n        if (var0 <= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_2BA1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_2BBB(var arg0, var arg1) {\n        if (arg1 <= 0x00) {\n        label_2C9B:\n            return;\n        } else {\n            var temp0 = arg1;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = arg1;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = 0xff & 0x01;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n            goto label_2C9B;\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0173:\n        \n            if (msg.value < storage[0x0c]) { revert(memory[0x00:0x00]); }\n        \n            var var0 = 0x00;\n        \n            if (var0 > 0x02) { assert(); }\n        \n            var var1 = storage[0x08] & 0xff;\n        \n            if (var1 > 0x02) { assert(); }\n        \n            if (var1 != var0) {\n                var0 = 0x01;\n            \n                if (var0 > 0x02) { assert(); }\n            \n                var1 = storage[0x08] & 0xff;\n            \n                if (var1 > 0x02) { assert(); }\n            \n                if (var1 != var0) {\n                    var0 = 0x02;\n                \n                    if (var0 > var0) { assert(); }\n                \n                    var1 = storage[0x08] & 0xff;\n                \n                    if (var1 > 0x02) { assert(); }\n                \n                    if (var1 != var0) { stop(); }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = msg.sender;\n                    var temp1 = temp0 + 0x20;\n                    memory[temp1:temp1 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                    var temp2 = temp1 + 0x20;\n                    memory[temp2:temp2 + 0x20] = msg.value;\n                    var temp3 = temp2 + 0x20;\n                    memory[temp3:temp3 + 0x20] = 0xff & 0x01;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n                    var0 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var1 = 0x7562b0cf;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                    var temp6 = temp5 + 0x04;\n                    memory[temp6:temp6 + 0x20] = msg.sender;\n                    var temp7 = temp6 + 0x20;\n                    memory[temp7:temp7 + 0x20] = msg.value;\n                    var var2 = temp7 + 0x20;\n                    var var3 = 0x00;\n                    var var4 = memory[0x40:0x60];\n                    var var5 = var2 - var4;\n                    var var6 = var4;\n                    var var7 = 0x00;\n                    var var8 = var0;\n                \n                    if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp8;\n                    temp8, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n                \n                    if (temp8) { stop(); }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = msg.sender;\n                var temp10 = temp9 + 0x20;\n                memory[temp10:temp10 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                var temp11 = temp10 + 0x20;\n                memory[temp11:temp11 + 0x20] = msg.value;\n                var temp12 = temp11 + 0x20;\n                memory[temp12:temp12 + 0x20] = 0xff & 0x01;\n                var temp13 = memory[0x40:0x60];\n                log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n                var0 = 0x0339;\n                var1 = storage[0x08] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = 0x7562b0cf;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp15 = temp14 + 0x04;\n                memory[temp15:temp15 + 0x20] = msg.sender;\n                var temp16 = temp15 + 0x20;\n                memory[temp16:temp16 + 0x20] = msg.value;\n                var3 = temp16 + 0x20;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var var9 = var1;\n            \n                if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n            \n                func_0317(var1, var2, var3, var4, var5, var6, var7, var8, var9);\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x0335d533) {\n                // Dispatch table entry for USER_GET_CROWDSALE_TOKEN()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0529;\n                USER_GET_CROWDSALE_TOKEN();\n                stop();\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x053e;\n                var2 = name();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x059c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = !!var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x13af4035) {\n                // Dispatch table entry for setOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ed;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setOwner(var2);\n                stop();\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0602;\n                var2 = totalSupply();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x1c3c0ea8) {\n                // Dispatch table entry for setExecutor(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x064f;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setExecutor(var2);\n                stop();\n            } else if (var0 == 0x200d2ed2) {\n                // Dispatch table entry for status()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0664;\n                var2 = status();\n                var3 = memory[0x40:0x60];\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 > 0x02) { assert(); }\n            \n                var temp23 = var4;\n                memory[temp23:temp23 + 0x20] = var5 & 0xff;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06e7;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = !!var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0714;\n                var2 = decimals();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x42966c68) {\n                // Dispatch table entry for burn(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x074b;\n                var2 = msg.data[0x04:0x24];\n                burn(var2);\n                stop();\n            } else if (var0 == 0x4369a2c2) {\n                // Dispatch table entry for charityAmtToCharity(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0784;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                charityAmtToCharity(var2);\n                stop();\n            } else if (var0 == 0x4c524be4) {\n                // Dispatch table entry for selectWinner(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07a7;\n                var2 = msg.data[0x04:0x24];\n                selectWinner(var2);\n                stop();\n            } else if (var0 == 0x55aff5ba) {\n                // Dispatch table entry for minTokParticipate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07bc;\n                var2 = minTokParticipate();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var2;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x607a124f) {\n                // Dispatch table entry for setAttrs(address,address,address,uint8,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0865;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var5 = msg.data[0x64:0x84] & 0xff;\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                setAttrs(var2, var3, var4, var5, var6, var7);\n                stop();\n            } else if (var0 == 0x6997d166) {\n                // Dispatch table entry for USER_VOTE(uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0891;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                USER_VOTE(var2, var3);\n                stop();\n            } else if (var0 == 0x6fceecf8) {\n                // Dispatch table entry for withdrawRestriction(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08ca;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = withdrawRestriction(var2);\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var2;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0917;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var1;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x72159335) {\n                // Dispatch table entry for voteInitiate(uint256,uint256,uint256,uint256,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x097b;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                voteInitiate(var2, var3, var4, var5, var6, var7);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0990;\n                var2 = owner();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x945c7c59) {\n                // Dispatch table entry for distributeTokenSale(uint256,uint256,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a0e;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                distributeTokenSale(var2, var3, var4, var5);\n                stop();\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a23;\n                var2 = symbol();\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = var2;\n                var temp38 = memory[0x40:0x60];\n                return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n            } else if (var0 == 0xa0712d68) {\n                // Dispatch table entry for mint(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a62;\n                var2 = msg.data[0x04:0x24];\n                mint(var2);\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0aa4;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = !!var1;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0xb5a9de6e) {\n                // Dispatch table entry for minEtherParticipate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ad1;\n                var2 = minEtherParticipate();\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = var2;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0xc34c08e5) {\n                // Dispatch table entry for executor()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0afa;\n                var2 = executor();\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b92;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var1;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0xe223facb) {\n                // Dispatch table entry for USER_GAME_WITH_TOKEN(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0bc9;\n                var2 = msg.data[0x04:0x24];\n                USER_GAME_WITH_TOKEN(var2);\n                stop();\n            } else if (var0 == 0xed02dded) {\n                // Dispatch table entry for lossToCharity(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c0b;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                lossToCharity(var2, var3);\n                stop();\n            } else if (var0 == 0xfe213712) {\n                // Dispatch table entry for USER_GET_PRIZE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c20;\n                USER_GET_PRIZE();\n                stop();\n            } else { goto label_0173; }\n        }\n    }\n    \n    function func_0317(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        var temp0;\n        temp0, memory[arg4:arg4 + arg3] = address(arg8).call.gas(msg.gas - 0x02c6).value(arg7)(memory[arg6:arg6 + arg5]);\n    \n        if (!temp0) { revert(memory[0x00:0x00]); }\n    \n        arg0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        arg1 = 0x01;\n        func_0C22(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0C22(var arg0, var arg1) {\n        if (arg0 <= 0x00) {\n        label_1198:\n            return;\n        } else if (!arg1) {\n            var var0 = 0x0f51;\n            memory[0x00:0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var var1 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = arg0;\n            var0 = func_2BA1(var1, var2);\n            memory[0x00:0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var0 = 0x0fff;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var2 = arg0;\n            var0 = func_2B87(var1, var2);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = msg.sender;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = temp0;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = 0xff & 0x02;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n            goto label_1198;\n        } else {\n            var0 = 0x0c9c;\n            memory[0x00:0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var2 = arg0;\n            var0 = func_2B87(var1, var2);\n            memory[0x00:0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var0 = 0x0d4a;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var2 = arg0;\n            var0 = func_2BA1(var1, var2);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var temp8 = arg0;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = temp8;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff, msg.sender]);\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp12 = temp11 + 0x20;\n            memory[temp12:temp12 + 0x20] = msg.sender;\n            var temp13 = temp12 + 0x20;\n            memory[temp13:temp13 + 0x20] = temp8;\n            var temp14 = temp13 + 0x20;\n            memory[temp14:temp14 + 0x20] = 0xff & 0x02;\n            var temp15 = memory[0x40:0x60];\n            log(memory[temp15:temp15 + (temp14 + 0x20) - temp15], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n            goto label_1198;\n        }\n    }\n    \n    function USER_GET_CROWDSALE_TOKEN() {\n        var var0 = 0x1287;\n        var var1 = storage[0x08] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x59770438;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = msg.sender;\n        var var3 = temp1 + 0x20;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = 0x00;\n        var var9 = var1;\n    \n        if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n    \n        func_1265(var1, var2, var3, var4, var5, var6, var7, var8, var9);\n    }\n    \n    function func_1265(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        var temp0;\n        temp0, memory[arg4:arg4 + arg3] = address(arg8).call.gas(msg.gas - 0x02c6).value(arg7)(memory[arg6:arg6 + arg5]);\n    \n        if (!temp0) { revert(memory[0x00:0x00]); }\n    \n        arg0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        arg1 = 0x01;\n        func_0C22(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) { return storage[0x07]; }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 != var0;\n    \n        if (var1) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp5;\n        \n            if (storage[keccak256(memory[0x00:0x40])] == 0x00) { goto label_1329; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (!var1) {\n        label_1329:\n            var temp0 = arg1;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = temp0;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = temp0;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setOwner(var arg0) {\n        var var0 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_14B9:\n            storage[0x03] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else if (storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender) { goto label_14B9; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function setExecutor(var arg0) {\n        var var0 = storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00;\n    \n        if (!var0) {\n            var0 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender;\n        \n            if (var0) { goto label_15F0; }\n            else { goto label_159E; }\n        } else if (var0) {\n        label_15F0:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_15FB:\n            storage[0x04] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x04] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n        label_159E:\n        \n            if (storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender) { goto label_15FB; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function status() returns (var r0) { return storage[0x08] & 0xff; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = 0x176b;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = arg2;\n        var2 = func_2BA1(var3, var4);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x17f7;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var4 = arg2;\n        var2 = func_2B87(var3, var4);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x1844;\n        var3 = var1;\n        var4 = arg2;\n        var2 = func_2B87(var3, var4);\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function decimals() returns (var r0) { return storage[0x06]; }\n    \n    function burn(var arg0) {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x19e2;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_2B87(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x1a31;\n        var1 = storage[0x00];\n        var2 = arg0;\n        var0 = func_2B87(var1, var2);\n        storage[0x00] = var0;\n    }\n    \n    function charityAmtToCharity(var arg0) {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1b4a;\n        var var1 = arg0;\n        var var2 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0xd45294f5;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var var4 = temp0 + 0x04;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        func_1B2A(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);\n    }\n    \n    function func_1B2A(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) {\n        var temp0;\n        temp0, memory[arg5:arg5 + arg4] = address(arg9).call.gas(msg.gas - 0x02c6).value(arg8)(memory[arg7:arg7 + arg6]);\n    \n        if (!temp0) { revert(memory[0x00:0x00]); }\n    \n        arg1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        func_2BBB(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function selectWinner(var arg0) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_1C03:\n            var0 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x4c524be4;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0;\n            var var2 = temp1 + 0x20;\n            var var3 = 0x00;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (temp2) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1C03; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function minTokParticipate() returns (var r0) { return storage[0x0d]; }\n    \n    function setAttrs(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_1D66:\n            storage[0x08] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x01 | (storage[0x08] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n            storage[0x09] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x09] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            storage[0x0a] = (arg2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x0a] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var0 = arg3;\n            var var1 = 0x08;\n            var var2 = storage[var1] & ~0xff;\n            var var3 = 0x01;\n            var var4 = var0;\n        \n            if (var4 > 0x02) { assert(); }\n        \n            storage[var1] = var4 * var3 | var2;\n            storage[0x0c] = arg4;\n            storage[0x0d] = arg5;\n            return;\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1D66; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function USER_VOTE(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0xfedfe46c;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[memory[0x40:0x60] + 0x40:memory[0x40:0x60] + 0x40 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        memory[temp2:temp2 + 0x20] = msg.sender;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = arg0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg1;\n        var var4 = temp5 + 0x20;\n        var var5 = 0x40;\n        var var6 = memory[var5:var5 + 0x20];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp6;\n        temp6, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp6) { revert(memory[0x00:0x00]); }\n    \n        var temp7 = memory[0x40:0x60];\n        var1 = memory[temp7 + 0x20:temp7 + 0x20 + 0x20];\n        var0 = memory[temp7:temp7 + 0x20];\n        var2 = 0x1fb6;\n        var3 = var0;\n        var4 = 0x01;\n        func_0C22(var3, var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= var1) { return; }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n    }\n    \n    function withdrawRestriction(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function voteInitiate(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_215F:\n            var0 = storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x72159335;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = arg1;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = arg2;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg3;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = arg4;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = arg5;\n            var var2 = temp6 + 0x20;\n            var var3 = 0x00;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp7;\n            temp7, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (temp7) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_215F; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function owner() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function distributeTokenSale(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_230F:\n            var0 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x945c7c59;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = arg1;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = arg2;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg3;\n            var var2 = temp4 + 0x20;\n            var var3 = 0x00;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp5;\n            temp5, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (temp5) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_230F; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function symbol() returns (var r0) { return storage[0x05]; }\n    \n    function mint(var arg0) {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x247e;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_2BA1(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x24cd;\n        var1 = storage[0x00];\n        var2 = arg0;\n        var0 = func_2BA1(var1, var2);\n        storage[0x00] = var0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x2570;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_2B87(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x25fc;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_2BA1(var2, var3);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function minEtherParticipate() returns (var r0) { return storage[0x0c]; }\n    \n    function executor() returns (var r0) { return storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function USER_GAME_WITH_TOKEN(var arg0) {\n        var var0 = 0x01;\n    \n        if (var0 > 0x02) { assert(); }\n    \n        var var1 = storage[0x08] & 0xff;\n    \n        if (var1 > 0x02) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg0 * 0x0de0b6b3a7640000) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 * 0x0de0b6b3a7640000 < storage[0x0d]) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x2820;\n        var1 = arg0 * 0x0de0b6b3a7640000;\n        var var2 = 0x00;\n        func_0C22(var1, var2);\n        var0 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = 0xfc0ea853;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = msg.sender;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg0 * 0x0de0b6b3a7640000;\n        var2 = temp2 + 0x20;\n        var var3 = 0x00;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp3;\n        temp3, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (temp3) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function lossToCharity(var arg0, var arg1) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_29BA:\n            var0 = 0x2a77;\n            var var1 = arg1;\n            var var2 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = 0xf2141ab9;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0;\n            var var4 = temp1 + 0x20;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = 0x00;\n            var var10 = var2;\n        \n            if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n        \n            func_2A57(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);\n            return;\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_29BA; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2A57(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) {\n        var temp0;\n        temp0, memory[arg5:arg5 + arg4] = address(arg9).call.gas(msg.gas - 0x02c6).value(arg8)(memory[arg7:arg7 + arg6]);\n    \n        if (!temp0) { revert(memory[0x00:0x00]); }\n    \n        arg1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        func_2BBB(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function USER_GET_PRIZE() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0x2d5cd1d6;\n        memory[memory[0x40:0x60] + 0x40:memory[0x40:0x60] + 0x40 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = msg.sender;\n        var var4 = temp1 + 0x20;\n        var var5 = 0x40;\n        var var6 = memory[var5:var5 + 0x20];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x40:0x60];\n        var1 = memory[temp3 + 0x20:temp3 + 0x20 + 0x20];\n        var0 = memory[temp3:temp3 + 0x20];\n        var2 = 0x2b78;\n        var3 = var1;\n        var4 = 0x01;\n        func_0C22(var3, var4);\n        var2 = 0x2b82;\n        var3 = msg.sender;\n        var4 = var0;\n        func_2BBB(var3, var4);\n    }\n    \n    function func_2B87(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 - arg1;\n    \n        if (var0 <= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_2BA1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_2BBB(var arg0, var arg1) {\n        if (arg1 <= 0x00) {\n        label_2C9B:\n            return;\n        } else {\n            var temp0 = arg1;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = arg1;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = 0xff & 0x01;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n            goto label_2C9B;\n        }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0173:\n        \n            if (msg.value < storage[0x0c]) { revert(memory[0x00:0x00]); }\n        \n            var var0 = 0x00;\n        \n            if (var0 > 0x02) { assert(); }\n        \n            var var1 = storage[0x08] & 0xff;\n        \n            if (var1 > 0x02) { assert(); }\n        \n            if (var1 != var0) {\n                var0 = 0x01;\n            \n                if (var0 > 0x02) { assert(); }\n            \n                var1 = storage[0x08] & 0xff;\n            \n                if (var1 > 0x02) { assert(); }\n            \n                if (var1 != var0) {\n                    var0 = 0x02;\n                \n                    if (var0 > var0) { assert(); }\n                \n                    var1 = storage[0x08] & 0xff;\n                \n                    if (var1 > 0x02) { assert(); }\n                \n                    if (var1 != var0) { stop(); }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = msg.sender;\n                    var temp1 = temp0 + 0x20;\n                    memory[temp1:temp1 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                    var temp2 = temp1 + 0x20;\n                    memory[temp2:temp2 + 0x20] = msg.value;\n                    var temp3 = temp2 + 0x20;\n                    memory[temp3:temp3 + 0x20] = 0xff & 0x01;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n                    var0 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var1 = 0x7562b0cf;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                    var temp6 = temp5 + 0x04;\n                    memory[temp6:temp6 + 0x20] = msg.sender;\n                    var temp7 = temp6 + 0x20;\n                    memory[temp7:temp7 + 0x20] = msg.value;\n                    var var2 = temp7 + 0x20;\n                    var var3 = 0x00;\n                    var var4 = memory[0x40:0x60];\n                    var var5 = var2 - var4;\n                    var var6 = var4;\n                    var var7 = 0x00;\n                    var var8 = var0;\n                \n                    if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp8;\n                    temp8, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n                \n                    if (temp8) { stop(); }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = msg.sender;\n                var temp10 = temp9 + 0x20;\n                memory[temp10:temp10 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                var temp11 = temp10 + 0x20;\n                memory[temp11:temp11 + 0x20] = msg.value;\n                var temp12 = temp11 + 0x20;\n                memory[temp12:temp12 + 0x20] = 0xff & 0x01;\n                var temp13 = memory[0x40:0x60];\n                log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n                var0 = 0x0339;\n                var1 = storage[0x08] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = 0x7562b0cf;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp15 = temp14 + 0x04;\n                memory[temp15:temp15 + 0x20] = msg.sender;\n                var temp16 = temp15 + 0x20;\n                memory[temp16:temp16 + 0x20] = msg.value;\n                var3 = temp16 + 0x20;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var var9 = var1;\n            \n                if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n            \n                func_0317(var1, var2, var3, var4, var5, var6, var7, var8, var9);\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x0335d533) {\n                // Dispatch table entry for USER_GET_CROWDSALE_TOKEN()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0529;\n                USER_GET_CROWDSALE_TOKEN();\n                stop();\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x053e;\n                var2 = name();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x059c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = !!var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x13af4035) {\n                // Dispatch table entry for setOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ed;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setOwner(var2);\n                stop();\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0602;\n                var2 = totalSupply();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x1c3c0ea8) {\n                // Dispatch table entry for setExecutor(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x064f;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setExecutor(var2);\n                stop();\n            } else if (var0 == 0x200d2ed2) {\n                // Dispatch table entry for status()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0664;\n                var2 = status();\n                var3 = memory[0x40:0x60];\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 > 0x02) { assert(); }\n            \n                var temp23 = var4;\n                memory[temp23:temp23 + 0x20] = var5 & 0xff;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06e7;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = !!var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0714;\n                var2 = decimals();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x42966c68) {\n                // Dispatch table entry for burn(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x074b;\n                var2 = msg.data[0x04:0x24];\n                burn(var2);\n                stop();\n            } else if (var0 == 0x4369a2c2) {\n                // Dispatch table entry for charityAmtToCharity(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0784;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                charityAmtToCharity(var2);\n                stop();\n            } else if (var0 == 0x4c524be4) {\n                // Dispatch table entry for selectWinner(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07a7;\n                var2 = msg.data[0x04:0x24];\n                selectWinner(var2);\n                stop();\n            } else if (var0 == 0x55aff5ba) {\n                // Dispatch table entry for minTokParticipate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07bc;\n                var2 = minTokParticipate();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var2;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x607a124f) {\n                // Dispatch table entry for setAttrs(address,address,address,uint8,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0865;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var5 = msg.data[0x64:0x84] & 0xff;\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                setAttrs(var2, var3, var4, var5, var6, var7);\n                stop();\n            } else if (var0 == 0x6997d166) {\n                // Dispatch table entry for USER_VOTE(uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0891;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                USER_VOTE(var2, var3);\n                stop();\n            } else if (var0 == 0x6fceecf8) {\n                // Dispatch table entry for withdrawRestriction(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08ca;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = withdrawRestriction(var2);\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var2;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0917;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var1;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x72159335) {\n                // Dispatch table entry for voteInitiate(uint256,uint256,uint256,uint256,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x097b;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                voteInitiate(var2, var3, var4, var5, var6, var7);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0990;\n                var2 = owner();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x945c7c59) {\n                // Dispatch table entry for distributeTokenSale(uint256,uint256,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a0e;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                distributeTokenSale(var2, var3, var4, var5);\n                stop();\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a23;\n                var2 = symbol();\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = var2;\n                var temp38 = memory[0x40:0x60];\n                return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n            } else if (var0 == 0xa0712d68) {\n                // Dispatch table entry for mint(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a62;\n                var2 = msg.data[0x04:0x24];\n                mint(var2);\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0aa4;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = !!var1;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0xb5a9de6e) {\n                // Dispatch table entry for minEtherParticipate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ad1;\n                var2 = minEtherParticipate();\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = var2;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0xc34c08e5) {\n                // Dispatch table entry for executor()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0afa;\n                var2 = executor();\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b92;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var1;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0xe223facb) {\n                // Dispatch table entry for USER_GAME_WITH_TOKEN(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0bc9;\n                var2 = msg.data[0x04:0x24];\n                USER_GAME_WITH_TOKEN(var2);\n                stop();\n            } else if (var0 == 0xed02dded) {\n                // Dispatch table entry for lossToCharity(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c0b;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                lossToCharity(var2, var3);\n                stop();\n            } else if (var0 == 0xfe213712) {\n                // Dispatch table entry for USER_GET_PRIZE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c20;\n                USER_GET_PRIZE();\n                stop();\n            } else { goto label_0173; }\n        }\n    }\n    \n    function func_0317(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        var temp0;\n        temp0, memory[arg4:arg4 + arg3] = address(arg8).call.gas(msg.gas - 0x02c6).value(arg7)(memory[arg6:arg6 + arg5]);\n    \n        if (!temp0) { revert(memory[0x00:0x00]); }\n    \n        arg0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        arg1 = 0x01;\n        func_0C22(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0C22(var arg0, var arg1) {\n        if (arg0 <= 0x00) {\n        label_1198:\n            return;\n        } else if (!arg1) {\n            var var0 = 0x0f51;\n            memory[0x00:0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var var1 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = arg0;\n            var0 = func_2BA1(var1, var2);\n            memory[0x00:0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var0 = 0x0fff;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var2 = arg0;\n            var0 = func_2B87(var1, var2);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = msg.sender;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = temp0;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = 0xff & 0x02;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n            goto label_1198;\n        } else {\n            var0 = 0x0c9c;\n            memory[0x00:0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var2 = arg0;\n            var0 = func_2B87(var1, var2);\n            memory[0x00:0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var0 = 0x0d4a;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var2 = arg0;\n            var0 = func_2BA1(var1, var2);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            var temp8 = arg0;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = temp8;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff, msg.sender]);\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp12 = temp11 + 0x20;\n            memory[temp12:temp12 + 0x20] = msg.sender;\n            var temp13 = temp12 + 0x20;\n            memory[temp13:temp13 + 0x20] = temp8;\n            var temp14 = temp13 + 0x20;\n            memory[temp14:temp14 + 0x20] = 0xff & 0x02;\n            var temp15 = memory[0x40:0x60];\n            log(memory[temp15:temp15 + (temp14 + 0x20) - temp15], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n            goto label_1198;\n        }\n    }\n    \n    function USER_GET_CROWDSALE_TOKEN() {\n        var var0 = 0x1287;\n        var var1 = storage[0x08] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x59770438;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = msg.sender;\n        var var3 = temp1 + 0x20;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = 0x00;\n        var var9 = var1;\n    \n        if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n    \n        func_1265(var1, var2, var3, var4, var5, var6, var7, var8, var9);\n    }\n    \n    function func_1265(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        var temp0;\n        temp0, memory[arg4:arg4 + arg3] = address(arg8).call.gas(msg.gas - 0x02c6).value(arg7)(memory[arg6:arg6 + arg5]);\n    \n        if (!temp0) { revert(memory[0x00:0x00]); }\n    \n        arg0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        arg1 = 0x01;\n        func_0C22(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) { return storage[0x07]; }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 != var0;\n    \n        if (var1) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp5;\n        \n            if (storage[keccak256(memory[0x00:0x40])] == 0x00) { goto label_1329; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (!var1) {\n        label_1329:\n            var temp0 = arg1;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = temp0;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = temp0;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setOwner(var arg0) {\n        var var0 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_14B9:\n            storage[0x03] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else if (storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender) { goto label_14B9; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function setExecutor(var arg0) {\n        var var0 = storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00;\n    \n        if (!var0) {\n            var0 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender;\n        \n            if (var0) { goto label_15F0; }\n            else { goto label_159E; }\n        } else if (var0) {\n        label_15F0:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_15FB:\n            storage[0x04] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x04] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n        label_159E:\n        \n            if (storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff == msg.sender) { goto label_15FB; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function status() returns (var r0) { return storage[0x08] & 0xff; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = 0x176b;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = arg2;\n        var2 = func_2BA1(var3, var4);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x17f7;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var4 = arg2;\n        var2 = func_2B87(var3, var4);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x1844;\n        var3 = var1;\n        var4 = arg2;\n        var2 = func_2B87(var3, var4);\n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function decimals() returns (var r0) { return storage[0x06]; }\n    \n    function burn(var arg0) {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x19e2;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_2B87(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x1a31;\n        var1 = storage[0x00];\n        var2 = arg0;\n        var0 = func_2B87(var1, var2);\n        storage[0x00] = var0;\n    }\n    \n    function charityAmtToCharity(var arg0) {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x1b4a;\n        var var1 = arg0;\n        var var2 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0xd45294f5;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var var4 = temp0 + 0x04;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        func_1B2A(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);\n    }\n    \n    function func_1B2A(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) {\n        var temp0;\n        temp0, memory[arg5:arg5 + arg4] = address(arg9).call.gas(msg.gas - 0x02c6).value(arg8)(memory[arg7:arg7 + arg6]);\n    \n        if (!temp0) { revert(memory[0x00:0x00]); }\n    \n        arg1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        func_2BBB(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function selectWinner(var arg0) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_1C03:\n            var0 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x4c524be4;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0;\n            var var2 = temp1 + 0x20;\n            var var3 = 0x00;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (temp2) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1C03; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function minTokParticipate() returns (var r0) { return storage[0x0d]; }\n    \n    function setAttrs(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_1D66:\n            storage[0x08] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x01 | (storage[0x08] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n            storage[0x09] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x09] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            storage[0x0a] = (arg2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x0a] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var0 = arg3;\n            var var1 = 0x08;\n            var var2 = storage[var1] & ~0xff;\n            var var3 = 0x01;\n            var var4 = var0;\n        \n            if (var4 > 0x02) { assert(); }\n        \n            storage[var1] = var4 * var3 | var2;\n            storage[0x0c] = arg4;\n            storage[0x0d] = arg5;\n            return;\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1D66; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function USER_VOTE(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0xfedfe46c;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[memory[0x40:0x60] + 0x40:memory[0x40:0x60] + 0x40 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        memory[temp2:temp2 + 0x20] = msg.sender;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = arg0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg1;\n        var var4 = temp5 + 0x20;\n        var var5 = 0x40;\n        var var6 = memory[var5:var5 + 0x20];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp6;\n        temp6, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp6) { revert(memory[0x00:0x00]); }\n    \n        var temp7 = memory[0x40:0x60];\n        var1 = memory[temp7 + 0x20:temp7 + 0x20 + 0x20];\n        var0 = memory[temp7:temp7 + 0x20];\n        var2 = 0x1fb6;\n        var3 = var0;\n        var4 = 0x01;\n        func_0C22(var3, var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= var1) { return; }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n    }\n    \n    function withdrawRestriction(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function voteInitiate(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_215F:\n            var0 = storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x72159335;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = arg1;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = arg2;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg3;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = arg4;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = arg5;\n            var var2 = temp6 + 0x20;\n            var var3 = 0x00;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp7;\n            temp7, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (temp7) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_215F; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function owner() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function distributeTokenSale(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_230F:\n            var0 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x945c7c59;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = arg1;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = arg2;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg3;\n            var var2 = temp4 + 0x20;\n            var var3 = 0x00;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp5;\n            temp5, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (temp5) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_230F; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function symbol() returns (var r0) { return storage[0x05]; }\n    \n    function mint(var arg0) {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x247e;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_2BA1(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x24cd;\n        var1 = storage[0x00];\n        var2 = arg0;\n        var0 = func_2BA1(var1, var2);\n        storage[0x00] = var0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x2570;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_2B87(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x25fc;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_2BA1(var2, var3);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function minEtherParticipate() returns (var r0) { return storage[0x0c]; }\n    \n    function executor() returns (var r0) { return storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function USER_GAME_WITH_TOKEN(var arg0) {\n        var var0 = 0x01;\n    \n        if (var0 > 0x02) { assert(); }\n    \n        var var1 = storage[0x08] & 0xff;\n    \n        if (var1 > 0x02) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg0 * 0x0de0b6b3a7640000) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 * 0x0de0b6b3a7640000 < storage[0x0d]) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x2820;\n        var1 = arg0 * 0x0de0b6b3a7640000;\n        var var2 = 0x00;\n        func_0C22(var1, var2);\n        var0 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var1 = 0xfc0ea853;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = msg.sender;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg0 * 0x0de0b6b3a7640000;\n        var2 = temp2 + 0x20;\n        var var3 = 0x00;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp3;\n        temp3, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (temp3) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function lossToCharity(var arg0, var arg1) {\n        var var0 = msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_29BA:\n            var0 = 0x2a77;\n            var var1 = arg1;\n            var var2 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = 0xf2141ab9;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = arg0;\n            var var4 = temp1 + 0x20;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = 0x00;\n            var var10 = var2;\n        \n            if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n        \n            func_2A57(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);\n            return;\n        } else if (msg.sender == storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_29BA; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2A57(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) {\n        var temp0;\n        temp0, memory[arg5:arg5 + arg4] = address(arg9).call.gas(msg.gas - 0x02c6).value(arg8)(memory[arg7:arg7 + arg6]);\n    \n        if (!temp0) { revert(memory[0x00:0x00]); }\n    \n        arg1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        func_2BBB(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function USER_GET_PRIZE() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x09] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0x2d5cd1d6;\n        memory[memory[0x40:0x60] + 0x40:memory[0x40:0x60] + 0x40 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = msg.sender;\n        var var4 = temp1 + 0x20;\n        var var5 = 0x40;\n        var var6 = memory[var5:var5 + 0x20];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x40:0x60];\n        var1 = memory[temp3 + 0x20:temp3 + 0x20 + 0x20];\n        var0 = memory[temp3:temp3 + 0x20];\n        var2 = 0x2b78;\n        var3 = var1;\n        var4 = 0x01;\n        func_0C22(var3, var4);\n        var2 = 0x2b82;\n        var3 = msg.sender;\n        var4 = var0;\n        func_2BBB(var3, var4);\n    }\n    \n    function func_2B87(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 - arg1;\n    \n        if (var0 <= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_2BA1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_2BBB(var arg0, var arg1) {\n        if (arg1 <= 0x00) {\n        label_2C9B:\n            return;\n        } else {\n            var temp0 = arg1;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = arg1;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = 0xff & 0x01;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0x24f696fd277ab54419be222658001f611d7b7a864c98ac7f5c6048b5fbdfea72]);\n            goto label_2C9B;\n        }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 47.29352355003357,
	"usage": {
		"completion_tokens": 592,
		"prompt_tokens": 16117,
		"total_tokens": 16709
	}
}