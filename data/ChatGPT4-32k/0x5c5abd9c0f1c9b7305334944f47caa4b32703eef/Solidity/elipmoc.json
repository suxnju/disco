{
	"address": "0x5c5abd9c0f1c9b7305334944f47caa4b32703eef",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity version of the provided code:\n\n```solidity\npragma solidity ^0.7.0;\n\ncontract Token {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public icoRatio;\n    uint256 public icoEndtime;\n    address public icoHolder;\n    address public icoSender;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event ICO(address indexed buyer, uint256 value, uint256 tokens);\n    event Withdraw(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function withdraw() public {\n        require(msg.sender == icoHolder);\n        payable(icoHolder).transfer(address(this).balance);\n        emit Withdraw(msg.sender, icoHolder, address(this).balance);\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        totalSupply -= _value;\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        balanceOf[msg.sender] -= _value;\n        totalSupply -= _value;\n        emit Burn(_from, _value);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal {\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n    }\n\n    receive() external payable {\n        require(block.timestamp <= icoEndtime);\n        uint256 amount = msg.value * icoRatio;\n        require(balanceOf[icoSender] >= amount);\n        _transfer(icoSender, msg.sender, amount);\n        emit ICO(msg.sender, msg.value, amount);\n    }\n}\n```\nI've recreated the contract in Solidity based on the decompiled code provided. It seems to be a simple ERC20 token contract with additional ICO functionality. Please note that the original code may have been obfuscated or optimized and this version may not be 100% accurate.",
				"role": "assistant"
			}
		}
	],
	"created": 1701467112,
	"id": "chatcmpl-8R5bsGVToMZeTudjzCORdIAKCedii",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 13:01 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x5]\nuint256 _icoRatio; // STORAGE[0x6]\nuint256 _icoEndtime; // STORAGE[0x7]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint160 _icoSender; // STORAGE[0x8] bytes 0 to 19\naddress _icoHolder; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nICO(address, uint256, uint256);\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nWithdraw(address, address, uint256);\nBurn(address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x766(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdraw() public nonPayable { \n    v0 = _icoHolder.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit Withdraw(msg.sender, _icoHolder, (address(this)).balance);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction icoHolder() public nonPayable { \n    return _icoHolder;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x766(varg1, varg0, msg.sender);\n}\n\nfunction icoRatio() public nonPayable { \n    return _icoRatio;\n}\n\nfunction icoEndtime() public nonPayable { \n    return _icoEndtime;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction icoSender() public nonPayable { \n    return _icoSender;\n}\n\nfunction 0x766(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0);\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    v2 = address(varg1);\n    require(_balanceOf[v2] + varg0 > _balanceOf[v1]);\n    v3 = address(varg1);\n    v4 = address(varg2);\n    v5 = address(varg2);\n    _balanceOf[v5] = _balanceOf[v5] - varg0;\n    v6 = address(varg1);\n    _balanceOf[v6] = _balanceOf[v6] + varg0;\n    v7 = address(varg1);\n    v8 = address(varg2);\n    assert(_balanceOf[v8] + _balanceOf[v7] == _balanceOf[v4] + _balanceOf[v3]);\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction fallback() public payable { \n    require(block.timestamp <= _icoEndtime);\n    v0 = v1 = msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000 == 0;\n    if (msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000 != 0) {\n        v0 = v2 = _balanceOf[_icoSender] < msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000;\n    }\n    require(!v0);\n    0x766(msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000, msg.sender, _icoSender);\n    emit ICO(msg.sender, msg.value, msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa2ebb20b == function_selector) {\n            icoHolder();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb3b8c620 == function_selector) {\n            icoRatio();\n        } else if (0xd211fe86 == function_selector) {\n            icoEndtime();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xde28fc1d == function_selector) {\n            icoSender();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 13:01 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x5]\nuint256 _icoRatio; // STORAGE[0x6]\nuint256 _icoEndtime; // STORAGE[0x7]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint160 _icoSender; // STORAGE[0x8] bytes 0 to 19\naddress _icoHolder; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nICO(address, uint256, uint256);\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nWithdraw(address, address, uint256);\nBurn(address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x766(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdraw() public nonPayable { \n    v0 = _icoHolder.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit Withdraw(msg.sender, _icoHolder, (address(this)).balance);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction icoHolder() public nonPayable { \n    return _icoHolder;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x766(varg1, varg0, msg.sender);\n}\n\nfunction icoRatio() public nonPayable { \n    return _icoRatio;\n}\n\nfunction icoEndtime() public nonPayable { \n    return _icoEndtime;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction icoSender() public nonPayable { \n    return _icoSender;\n}\n\nfunction 0x766(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0);\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    v2 = address(varg1);\n    require(_balanceOf[v2] + varg0 > _balanceOf[v1]);\n    v3 = address(varg1);\n    v4 = address(varg2);\n    v5 = address(varg2);\n    _balanceOf[v5] = _balanceOf[v5] - varg0;\n    v6 = address(varg1);\n    _balanceOf[v6] = _balanceOf[v6] + varg0;\n    v7 = address(varg1);\n    v8 = address(varg2);\n    assert(_balanceOf[v8] + _balanceOf[v7] == _balanceOf[v4] + _balanceOf[v3]);\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction fallback() public payable { \n    require(block.timestamp <= _icoEndtime);\n    v0 = v1 = msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000 == 0;\n    if (msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000 != 0) {\n        v0 = v2 = _balanceOf[_icoSender] < msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000;\n    }\n    require(!v0);\n    0x766(msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000, msg.sender, _icoSender);\n    emit ICO(msg.sender, msg.value, msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa2ebb20b == function_selector) {\n            icoHolder();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb3b8c620 == function_selector) {\n            icoRatio();\n        } else if (0xd211fe86 == function_selector) {\n            icoEndtime();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xde28fc1d == function_selector) {\n            icoSender();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 13:01 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x5]\nuint256 _icoRatio; // STORAGE[0x6]\nuint256 _icoEndtime; // STORAGE[0x7]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint160 _icoSender; // STORAGE[0x8] bytes 0 to 19\naddress _icoHolder; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nICO(address, uint256, uint256);\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nWithdraw(address, address, uint256);\nBurn(address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x766(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdraw() public nonPayable { \n    v0 = _icoHolder.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit Withdraw(msg.sender, _icoHolder, (address(this)).balance);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction icoHolder() public nonPayable { \n    return _icoHolder;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x766(varg1, varg0, msg.sender);\n}\n\nfunction icoRatio() public nonPayable { \n    return _icoRatio;\n}\n\nfunction icoEndtime() public nonPayable { \n    return _icoEndtime;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction icoSender() public nonPayable { \n    return _icoSender;\n}\n\nfunction 0x766(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0);\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    v2 = address(varg1);\n    require(_balanceOf[v2] + varg0 > _balanceOf[v1]);\n    v3 = address(varg1);\n    v4 = address(varg2);\n    v5 = address(varg2);\n    _balanceOf[v5] = _balanceOf[v5] - varg0;\n    v6 = address(varg1);\n    _balanceOf[v6] = _balanceOf[v6] + varg0;\n    v7 = address(varg1);\n    v8 = address(varg2);\n    assert(_balanceOf[v8] + _balanceOf[v7] == _balanceOf[v4] + _balanceOf[v3]);\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction fallback() public payable { \n    require(block.timestamp <= _icoEndtime);\n    v0 = v1 = msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000 == 0;\n    if (msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000 != 0) {\n        v0 = v2 = _balanceOf[_icoSender] < msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000;\n    }\n    require(!v0);\n    0x766(msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000, msg.sender, _icoSender);\n    emit ICO(msg.sender, msg.value, msg.value * _icoRatio * 10 ** _decimals / 0xde0b6b3a7640000);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa2ebb20b == function_selector) {\n            icoHolder();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb3b8c620 == function_selector) {\n            icoRatio();\n        } else if (0xd211fe86 == function_selector) {\n            icoEndtime();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xde28fc1d == function_selector) {\n            icoSender();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 30.659069776535034,
	"usage": {
		"completion_tokens": 728,
		"prompt_tokens": 2262,
		"total_tokens": 2990
	}
}