{
	"address": "0x5c679a0a79d495affe049c02483519d51e37f32b",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2022.12.02 16:29 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _decimals; // STORAGE[0x2]\nuint256 _fundingStartBlock; // STORAGE[0x5]\nuint256 _fundingEndBlock; // STORAGE[0x6]\nuint256 _tokenFund; // STORAGE[0x7]\nuint256 _tokenExchangeRate; // STORAGE[0x8]\nuint256 _tokenCreationCap; // STORAGE[0x9]\nuint256 _tokenCreationMin; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0xc]\nuint256 _totalSupply; // STORAGE[0xd]\nuint256 stor_8_0_0; // STORAGE[0x8] bytes 0 to 0\nuint256 _ethFundDeposit; // STORAGE[0x3] bytes 0 to 19\nuint256 _tokenFundDeposit; // STORAGE[0x4] bytes 0 to 19\nuint256 _isFinalized; // STORAGE[0x4] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nLogRefund(address, uint256);\nCreateToken(address, uint256);\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        v4[v5] = v0[v5];\n        v5 += 32;\n    }\n    v7 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction tokenFund() public nonPayable { \n    return _tokenFund;\n}\n\nfunction tokenExchangeRate() public nonPayable { \n    return _tokenExchangeRate;\n}\n\nfunction finalize() public nonPayable { \n    require(!_isFinalized);\n    require(msg.sender == _ethFundDeposit);\n    require(_totalSupply > _tokenCreationMin);\n    v0 = v1 = block.number > _fundingEndBlock;\n    if (block.number <= _fundingEndBlock) {\n        v0 = _totalSupply == _tokenCreationCap;\n    }\n    require(v0);\n    _isFinalized = 1;\n    v2 = _ethFundDeposit.call().value(this.balance).gas(2300 * !this.balance);\n    assert(v2);\n}\n\nfunction refund() public nonPayable { \n    require(!_isFinalized);\n    require(block.number > _fundingEndBlock);\n    require(_totalSupply < _tokenCreationMin);\n    require(msg.sender != _tokenFundDeposit);\n    require(_balanceOf[msg.sender] > 0);\n    _balanceOf[msg.sender] = 0;\n    assert(_balanceOf[msg.sender] <= _totalSupply);\n    _totalSupply = _totalSupply - _balanceOf[msg.sender];\n    assert(stor_8_0_0);\n    emit LogRefund(msg.sender, _balanceOf[msg.sender] / _tokenExchangeRate);\n    v0 = msg.sender.call().value(_balanceOf[msg.sender] / _tokenExchangeRate).gas(2300 * !(_balanceOf[msg.sender] / _tokenExchangeRate));\n    assert(v0);\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction tokenCreationCap() public nonPayable { \n    return _tokenCreationCap;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction isFinalized() public nonPayable { \n    return _isFinalized;\n}\n\nfunction fundingEndBlock() public nonPayable { \n    return _fundingEndBlock;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        v4[v5] = v0[v5];\n        v5 += 32;\n    }\n    v7 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction tokenFundDeposit() public nonPayable { \n    return _tokenFundDeposit;\n}\n\nfunction ethFundDeposit() public nonPayable { \n    return _ethFundDeposit;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction createTokens() public payable { \n    require(!_isFinalized);\n    require(block.number > _fundingStartBlock);\n    require(block.number < _fundingEndBlock);\n    require(msg.value > 0);\n    if (msg.value) {\n        v0 = v1 = _tokenExchangeRate * msg.value;\n        assert(msg.value);\n        assert(v1 / msg.value == _tokenExchangeRate);\n    } else {\n        v0 = v2 = 0;\n    }\n    assert(v0 + _totalSupply >= _totalSupply);\n    require(_tokenCreationCap >= v0 + _totalSupply);\n    _totalSupply += v0;\n    _balanceOf[msg.sender] += v0;\n    emit CreateToken(msg.sender, v0);\n}\n\nfunction tokenCreationMin() public nonPayable { \n    return _tokenCreationMin;\n}\n\nfunction fundingStartBlock() public nonPayable { \n    return _fundingStartBlock;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    _allowance[varg0] += varg1;\n    emit Approval(msg.sender, varg0, varg1 + _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == v0) {\n            approve(address,uint256);\n        } else if (0x18160ddd == v0) {\n            totalSupply();\n        } else if (0x23b872dd == v0) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == v0) {\n            decimals();\n        } else if (0x3d2d8263 == v0) {\n            tokenFund();\n        } else if (0x4172d080 == v0) {\n            tokenExchangeRate();\n        } else if (0x4bb278f3 == v0) {\n            finalize();\n        } else if (0x590e1ae3 == v0) {\n            refund();\n        } else if (0x66188463 == v0) {\n            decreaseApproval(address,uint256);\n        } else if (0x6f7920fd == v0) {\n            tokenCreationCap();\n        } else if (0x70a08231 == v0) {\n            balanceOf(address);\n        } else if (0x8d4e4083 == v0) {\n            isFinalized();\n        } else if (0x91b43d13 == v0) {\n            fundingEndBlock();\n        } else if (0x95d89b41 == v0) {\n            symbol();\n        } else if (0x9a0750d5 == v0) {\n            tokenFundDeposit();\n        } else if (0xa81c3bdf == v0) {\n            ethFundDeposit();\n        } else if (0xa9059cbb == v0) {\n            transfer(address,uint256);\n        } else if (0xb4427263 == v0) {\n            createTokens();\n        } else if (0xc039daf6 == v0) {\n            tokenCreationMin();\n        } else if (0xd648a647 == v0) {\n            fundingStartBlock();\n        } else if (0xd73dd623 == v0) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == v0) {\n            allowance(address,address);\n        }\n    }\n    ();\n}\n",
	"language": "Solidity",
	"status": "Connection error."
}