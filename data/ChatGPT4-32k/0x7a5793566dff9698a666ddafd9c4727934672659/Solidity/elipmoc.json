{
	"address": "0x7a5793566dff9698a666ddafd9c4727934672659",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract based on the decompiled code provided:\n\n```solidity\npragma solidity ^0.6.0;\n\ncontract MyContract {\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    mapping (address => uint256) private _allowance;\n    mapping (address => uint256) private _balances;\n    uint256 private _sellPrice;\n    uint256 private _buyPrice;\n    address private _owner;\n    uint8 private _decimals;\n    bool private _tokenIsFrozen;\n    bool private _tokenMintingEnabled;\n    bool private _contractLaunched;\n    bool private _stakingStatus;\n\n    event LaunchContract(address indexed owner, bool launched);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    fallback() external payable { \n        revert();\n    }\n\n    function setPrices(uint256 sellPrice, uint256 buyPrice) public { \n        require(msg.sender == _owner);\n        _sellPrice = sellPrice;\n        _buyPrice = buyPrice;\n    }\n\n    function name() public view returns (string memory) { \n        return _name;\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function launchContract() public { \n        require(msg.sender == _owner);\n        require(!_contractLaunched);\n        _tokenIsFrozen = false;\n        _tokenMintingEnabled = true;\n        _contractLaunched = true;\n        emit LaunchContract(msg.sender, true);\n    }\n\n    function balances(address account) public view returns (uint256) { \n        return _balances[account];\n    }\n\n    function decimals() public view returns (uint8) { \n        return _decimals;\n    }\n\n    function stakingStatus() public view returns (bool) { \n        return _stakingStatus;\n    }\n\n    function sellPrice() public view returns (uint256) { \n        return _sellPrice;\n    }\n\n    function tokenFactory(uint256 amount) public returns (bool) { \n        require(msg.sender == _owner);\n        require(_tokenMintingEnabled);\n        require(amount > 0);\n        _totalSupply += amount;\n        _balances[msg.sender] += amount;\n        emit Transfer(address(0), msg.sender, amount);\n        return true;\n    }\n\n    function balanceOf(address account) public view returns (uint256) { \n        return _balances[account];\n    }\n\n    function withdrawAll() public { \n        require(msg.sender == _owner);\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function buyPrice() public view returns (uint256) { \n        return _buyPrice;\n    }\n\n    function tokenBurner(uint256 amount) public returns (bool) { \n        require(msg.sender == _owner);\n        require(amount > 0);\n        _totalSupply -= amount;\n        _balances[msg.sender] -= amount;\n        emit Transfer(msg.sender, address(0), amount);\n        return true;\n    }\n\n    function owner() public view returns (address) { \n        return _owner;\n    }\n\n    function symbol() public view returns (string memory) { \n        return _symbol;\n    }\n\n    function buy() public payable returns (uint256) { \n        require(msg.value >= _buyPrice);\n        uint256 amount = msg.value / _buyPrice;\n        _balances[msg.sender] += amount;\n        _balances[_owner] -= amount;\n        emit Transfer(_owner, msg.sender, amount);\n        return amount;\n    }\n\n    function transfer(address to, uint256 amount) public returns (bool) { \n        require(!_tokenIsFrozen);\n        require(amount > 0);\n        require(to != address(0));\n        _balances[msg.sender] -= amount;\n        _balances[to] += amount;\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    function contractLaunched() public view returns (bool) { \n        return _contractLaunched;\n    }\n\n    function tokenIsFrozen() public view returns (bool) { \n        return _tokenIsFrozen;\n    }\n\n    function tokenMintingEnabled() public view returns (bool) { \n        return _tokenMintingEnabled;\n    }\n\n    function allowance(address spender) public view returns (uint256) { \n        return _allowance[spender];\n    }\n\n    function sell(uint256 amount) public returns (uint256) { \n        require(_balances[msg.sender] >= amount);\n        _balances[_owner] += amount;\n        _balances[msg.sender] -= amount;\n        uint256 revenue = amount * _sellPrice;\n        msg.sender.transfer(revenue);\n        emit Transfer(msg.sender, _owner, amount);\n        return revenue;\n    }\n\n    function transferOwnership(address newOwner) public { \n        require(msg.sender == _owner);\n        _owner = newOwner;\n    }\n}\n```\nPlease note that the Solidity code is a basic implementation based on the provided decompiled code. It may lack some safety checks, events, and other functionalities. You may need to refine and test it before using it in a live environment.",
				"role": "assistant"
			}
		}
	],
	"created": 1701469431,
	"id": "chatcmpl-8R6DH6KcIFHrSrpUHQIdy7EmJMpcD",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 04:20 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x1]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _balances; // STORAGE[0x7]\nuint256 _sellPrice; // STORAGE[0x8]\nuint256 _buyPrice; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint8 _tokenIsFrozen; // STORAGE[0x5] bytes 0 to 0\nuint8 _tokenMintingEnabled; // STORAGE[0x5] bytes 1 to 1\nuint8 _contractLaunched; // STORAGE[0x5] bytes 2 to 2\nuint8 _stakingStatus; // STORAGE[0x5] bytes 3 to 3\n\n// Events\nLaunchContract(address, bool);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _sellPrice = varg0;\n    _buyPrice = varg1;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction launchContract() public nonPayable { \n    require(msg.sender == _owner);\n    require(!_contractLaunched);\n    _tokenIsFrozen = 0;\n    _tokenMintingEnabled = 1;\n    _contractLaunched = 1;\n    emit LaunchContract(msg.sender, 1);\n}\n\nfunction balances(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction stakingStatus() public nonPayable { \n    return _stakingStatus;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction tokenFactory(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(_tokenMintingEnabled);\n    require(varg0 > 0);\n    assert(_totalSupply + varg0 >= _totalSupply);\n    require(_totalSupply + varg0 > 0);\n    assert(_totalSupply + varg0 >= _totalSupply);\n    require(_totalSupply + varg0 > _totalSupply);\n    require(1);\n    assert(_totalSupply + varg0 >= _totalSupply);\n    _totalSupply = _totalSupply + varg0;\n    assert(_balances[msg.sender] + varg0 >= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] + varg0;\n    emit Transfer(0, msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction withdrawAll() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction tokenBurner(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 > 0);\n    assert(varg0 <= _totalSupply);\n    require(_totalSupply - varg0 > 0);\n    require(_balances[msg.sender] > varg0);\n    assert(varg0 <= _balances[msg.sender]);\n    require(_balances[msg.sender] - varg0 > 0);\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg0;\n    emit Transfer(msg.sender, 0, varg0);\n    return 1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    assert(_buyPrice);\n    assert(_balances[msg.sender] + msg.value / _buyPrice >= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] + msg.value / _buyPrice;\n    assert(msg.value / _buyPrice <= _balances[_owner]);\n    _balances[_owner] = _balances[_owner] - msg.value / _buyPrice;\n    emit Transfer(_owner, msg.sender, msg.value / _buyPrice);\n    return msg.value / _buyPrice;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!_tokenIsFrozen);\n    require(varg1 > 0);\n    require(varg0 != 0);\n    assert(varg1 <= _balances[msg.sender]);\n    require(_balances[msg.sender] - varg1 >= 0);\n    assert(_balances[varg0] + varg1 >= _balances[varg0]);\n    require(_balances[varg0] + varg1 > 0);\n    assert(_balances[varg0] + varg1 >= _balances[varg0]);\n    require(_balances[varg0] + varg1 > _balances[varg0]);\n    require(1);\n    assert(varg1 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg1;\n    assert(_balances[varg0] + varg1 >= _balances[varg0]);\n    _balances[varg0] = _balances[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction contractLaunched() public nonPayable { \n    return _contractLaunched;\n}\n\nfunction tokenIsFrozen() public nonPayable { \n    return _tokenIsFrozen;\n}\n\nfunction tokenMintingEnabled() public nonPayable { \n    return _tokenMintingEnabled;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(_balances[msg.sender] >= varg0);\n    assert(_balances[_owner] + varg0 >= _balances[_owner]);\n    _balances[_owner] = _balances[_owner] + varg0;\n    assert(varg0 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg0;\n    if (varg0 != 0) {\n        v0 = v1 = varg0 * _sellPrice;\n        assert(varg0);\n        assert(v1 / varg0 == _sellPrice);\n    } else {\n        v0 = v2 = 0;\n    }\n    v3 = msg.sender.call().value(v0).gas(!v0 * 2300);\n    require(v3); // checks call status, propagates error data on error\n    emit Transfer(msg.sender, _owner, varg0);\n    return v0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(msg.sender == _owner);\n    _owner = varg0;\n    return 1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x5fefda7 == function_selector) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x19d45a08 == function_selector) {\n            launchContract();\n        } else if (0x27e235e3 == function_selector) {\n            balances(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x455ab53c == function_selector) {\n            stakingStatus();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x5f2ef12d == function_selector) {\n            tokenFactory(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x853828b6 == function_selector) {\n            withdrawAll();\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8b1cc4f4 == function_selector) {\n            tokenBurner(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xaec205a5 == function_selector) {\n            contractLaunched();\n        } else if (0xb8b3b2f4 == function_selector) {\n            tokenIsFrozen();\n        } else if (0xb966f350 == function_selector) {\n            tokenMintingEnabled();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 04:20 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x1]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _balances; // STORAGE[0x7]\nuint256 _sellPrice; // STORAGE[0x8]\nuint256 _buyPrice; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint8 _tokenIsFrozen; // STORAGE[0x5] bytes 0 to 0\nuint8 _tokenMintingEnabled; // STORAGE[0x5] bytes 1 to 1\nuint8 _contractLaunched; // STORAGE[0x5] bytes 2 to 2\nuint8 _stakingStatus; // STORAGE[0x5] bytes 3 to 3\n\n// Events\nLaunchContract(address, bool);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _sellPrice = varg0;\n    _buyPrice = varg1;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction launchContract() public nonPayable { \n    require(msg.sender == _owner);\n    require(!_contractLaunched);\n    _tokenIsFrozen = 0;\n    _tokenMintingEnabled = 1;\n    _contractLaunched = 1;\n    emit LaunchContract(msg.sender, 1);\n}\n\nfunction balances(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction stakingStatus() public nonPayable { \n    return _stakingStatus;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction tokenFactory(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(_tokenMintingEnabled);\n    require(varg0 > 0);\n    assert(_totalSupply + varg0 >= _totalSupply);\n    require(_totalSupply + varg0 > 0);\n    assert(_totalSupply + varg0 >= _totalSupply);\n    require(_totalSupply + varg0 > _totalSupply);\n    require(1);\n    assert(_totalSupply + varg0 >= _totalSupply);\n    _totalSupply = _totalSupply + varg0;\n    assert(_balances[msg.sender] + varg0 >= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] + varg0;\n    emit Transfer(0, msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction withdrawAll() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction tokenBurner(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 > 0);\n    assert(varg0 <= _totalSupply);\n    require(_totalSupply - varg0 > 0);\n    require(_balances[msg.sender] > varg0);\n    assert(varg0 <= _balances[msg.sender]);\n    require(_balances[msg.sender] - varg0 > 0);\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg0;\n    emit Transfer(msg.sender, 0, varg0);\n    return 1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    assert(_buyPrice);\n    assert(_balances[msg.sender] + msg.value / _buyPrice >= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] + msg.value / _buyPrice;\n    assert(msg.value / _buyPrice <= _balances[_owner]);\n    _balances[_owner] = _balances[_owner] - msg.value / _buyPrice;\n    emit Transfer(_owner, msg.sender, msg.value / _buyPrice);\n    return msg.value / _buyPrice;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!_tokenIsFrozen);\n    require(varg1 > 0);\n    require(varg0 != 0);\n    assert(varg1 <= _balances[msg.sender]);\n    require(_balances[msg.sender] - varg1 >= 0);\n    assert(_balances[varg0] + varg1 >= _balances[varg0]);\n    require(_balances[varg0] + varg1 > 0);\n    assert(_balances[varg0] + varg1 >= _balances[varg0]);\n    require(_balances[varg0] + varg1 > _balances[varg0]);\n    require(1);\n    assert(varg1 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg1;\n    assert(_balances[varg0] + varg1 >= _balances[varg0]);\n    _balances[varg0] = _balances[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction contractLaunched() public nonPayable { \n    return _contractLaunched;\n}\n\nfunction tokenIsFrozen() public nonPayable { \n    return _tokenIsFrozen;\n}\n\nfunction tokenMintingEnabled() public nonPayable { \n    return _tokenMintingEnabled;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(_balances[msg.sender] >= varg0);\n    assert(_balances[_owner] + varg0 >= _balances[_owner]);\n    _balances[_owner] = _balances[_owner] + varg0;\n    assert(varg0 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg0;\n    if (varg0 != 0) {\n        v0 = v1 = varg0 * _sellPrice;\n        assert(varg0);\n        assert(v1 / varg0 == _sellPrice);\n    } else {\n        v0 = v2 = 0;\n    }\n    v3 = msg.sender.call().value(v0).gas(!v0 * 2300);\n    require(v3); // checks call status, propagates error data on error\n    emit Transfer(msg.sender, _owner, varg0);\n    return v0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(msg.sender == _owner);\n    _owner = varg0;\n    return 1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x5fefda7 == function_selector) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x19d45a08 == function_selector) {\n            launchContract();\n        } else if (0x27e235e3 == function_selector) {\n            balances(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x455ab53c == function_selector) {\n            stakingStatus();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x5f2ef12d == function_selector) {\n            tokenFactory(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x853828b6 == function_selector) {\n            withdrawAll();\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8b1cc4f4 == function_selector) {\n            tokenBurner(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xaec205a5 == function_selector) {\n            contractLaunched();\n        } else if (0xb8b3b2f4 == function_selector) {\n            tokenIsFrozen();\n        } else if (0xb966f350 == function_selector) {\n            tokenMintingEnabled();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 04:20 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x1]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _balances; // STORAGE[0x7]\nuint256 _sellPrice; // STORAGE[0x8]\nuint256 _buyPrice; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\nuint8 _tokenIsFrozen; // STORAGE[0x5] bytes 0 to 0\nuint8 _tokenMintingEnabled; // STORAGE[0x5] bytes 1 to 1\nuint8 _contractLaunched; // STORAGE[0x5] bytes 2 to 2\nuint8 _stakingStatus; // STORAGE[0x5] bytes 3 to 3\n\n// Events\nLaunchContract(address, bool);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _sellPrice = varg0;\n    _buyPrice = varg1;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction launchContract() public nonPayable { \n    require(msg.sender == _owner);\n    require(!_contractLaunched);\n    _tokenIsFrozen = 0;\n    _tokenMintingEnabled = 1;\n    _contractLaunched = 1;\n    emit LaunchContract(msg.sender, 1);\n}\n\nfunction balances(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction stakingStatus() public nonPayable { \n    return _stakingStatus;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction tokenFactory(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(_tokenMintingEnabled);\n    require(varg0 > 0);\n    assert(_totalSupply + varg0 >= _totalSupply);\n    require(_totalSupply + varg0 > 0);\n    assert(_totalSupply + varg0 >= _totalSupply);\n    require(_totalSupply + varg0 > _totalSupply);\n    require(1);\n    assert(_totalSupply + varg0 >= _totalSupply);\n    _totalSupply = _totalSupply + varg0;\n    assert(_balances[msg.sender] + varg0 >= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] + varg0;\n    emit Transfer(0, msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction withdrawAll() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction tokenBurner(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 > 0);\n    assert(varg0 <= _totalSupply);\n    require(_totalSupply - varg0 > 0);\n    require(_balances[msg.sender] > varg0);\n    assert(varg0 <= _balances[msg.sender]);\n    require(_balances[msg.sender] - varg0 > 0);\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg0;\n    emit Transfer(msg.sender, 0, varg0);\n    return 1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    assert(_buyPrice);\n    assert(_balances[msg.sender] + msg.value / _buyPrice >= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] + msg.value / _buyPrice;\n    assert(msg.value / _buyPrice <= _balances[_owner]);\n    _balances[_owner] = _balances[_owner] - msg.value / _buyPrice;\n    emit Transfer(_owner, msg.sender, msg.value / _buyPrice);\n    return msg.value / _buyPrice;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!_tokenIsFrozen);\n    require(varg1 > 0);\n    require(varg0 != 0);\n    assert(varg1 <= _balances[msg.sender]);\n    require(_balances[msg.sender] - varg1 >= 0);\n    assert(_balances[varg0] + varg1 >= _balances[varg0]);\n    require(_balances[varg0] + varg1 > 0);\n    assert(_balances[varg0] + varg1 >= _balances[varg0]);\n    require(_balances[varg0] + varg1 > _balances[varg0]);\n    require(1);\n    assert(varg1 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg1;\n    assert(_balances[varg0] + varg1 >= _balances[varg0]);\n    _balances[varg0] = _balances[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction contractLaunched() public nonPayable { \n    return _contractLaunched;\n}\n\nfunction tokenIsFrozen() public nonPayable { \n    return _tokenIsFrozen;\n}\n\nfunction tokenMintingEnabled() public nonPayable { \n    return _tokenMintingEnabled;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(_balances[msg.sender] >= varg0);\n    assert(_balances[_owner] + varg0 >= _balances[_owner]);\n    _balances[_owner] = _balances[_owner] + varg0;\n    assert(varg0 <= _balances[msg.sender]);\n    _balances[msg.sender] = _balances[msg.sender] - varg0;\n    if (varg0 != 0) {\n        v0 = v1 = varg0 * _sellPrice;\n        assert(varg0);\n        assert(v1 / varg0 == _sellPrice);\n    } else {\n        v0 = v2 = 0;\n    }\n    v3 = msg.sender.call().value(v0).gas(!v0 * 2300);\n    require(v3); // checks call status, propagates error data on error\n    emit Transfer(msg.sender, _owner, varg0);\n    return v0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(msg.sender == _owner);\n    _owner = varg0;\n    return 1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x5fefda7 == function_selector) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x19d45a08 == function_selector) {\n            launchContract();\n        } else if (0x27e235e3 == function_selector) {\n            balances(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x455ab53c == function_selector) {\n            stakingStatus();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x5f2ef12d == function_selector) {\n            tokenFactory(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x853828b6 == function_selector) {\n            withdrawAll();\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8b1cc4f4 == function_selector) {\n            tokenBurner(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xaec205a5 == function_selector) {\n            contractLaunched();\n        } else if (0xb8b3b2f4 == function_selector) {\n            tokenIsFrozen();\n        } else if (0xb966f350 == function_selector) {\n            tokenMintingEnabled();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 65.63696050643921,
	"usage": {
		"completion_tokens": 1072,
		"prompt_tokens": 2775,
		"total_tokens": 3847
	}
}