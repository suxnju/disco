{
	"address": "0x3cb7a642b1966c94c425c0a903f4c0e033e9b7e9",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity contract code inferred from the given decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract TokenSale {\n    uint256 public _startTime;\n    uint256 public _endTime;\n    uint256 public _price;\n    uint256 public _hardCap;\n    uint256 public _tokensSold;\n    mapping (address => bool) public _sellers;\n    address public _owner;\n    bool public _paused;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n\n    function setPaused(bool _value) public onlyOwner {\n        _paused = _value;\n    }\n\n    function isActive() public view returns(bool) {\n        return ((block.timestamp >= _startTime) && (block.timestamp <= _endTime) && (_tokensSold < _hardCap) && (!_paused));\n    }\n\n    function externalPurchase(address _beneficiary, uint256 _tokenAmount) public {\n        require(_sellers[msg.sender]);\n        require(_beneficiary != address(0));\n        require(isActive());\n        require(_tokensSold + _tokenAmount <= _hardCap);\n        _tokensSold += _tokenAmount;\n        // Mint tokens to beneficiary here\n    }\n\n    function withdrawEther(uint256 _amount) public onlyOwner {\n        msg.sender.transfer(_amount);\n    }\n\n    function setStartTime(uint256 _value) public onlyOwner {\n        _startTime = _value;\n    }\n\n    function setEndTime(uint256 _value) public onlyOwner {\n        _endTime = _value;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function setAsSeller(address _seller, bool _value) public onlyOwner {\n        _sellers[_seller] = _value;\n    }\n\n    function () public payable {\n        // Logic for buying tokens here\n    }\n}\n```\n\nPlease note that it's an approximation of the original contract, as some details (like the nature of the `externalPurchase` method and the fallback function) are not clear from the decompiled code. Also, the contract is written in Solidity version 0.4.24, and might need some adjustments if you're using a different version.",
				"role": "assistant"
			}
		}
	],
	"created": 1701460371,
	"id": "chatcmpl-8R3r9Ja8xZNBYbMzbqg1r1VZPjB8Z",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.07.03 23:36 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _startTime; // STORAGE[0x1]\nuint256 _endTime; // STORAGE[0x2]\nuint256 _price; // STORAGE[0x3]\nuint256 _hardCap; // STORAGE[0x4]\nuint256 _tokensSold; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _sellers; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_3_0_0; // STORAGE[0x3] bytes 0 to 0\nuint8 _paused; // STORAGE[0x6] bytes 0 to 0\naddress stor_6_1_20; // STORAGE[0x6] bytes 1 to 20\naddress stor_7_0_19; // STORAGE[0x7] bytes 0 to 19\naddress stor_8_0_19; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction setPaused(bool varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _paused = varg0;\n}\n\nfunction isActive() public nonPayable { \n    v0 = 0x5ae();\n    return v0;\n}\n\nfunction externalPurchase(address varg0, uint256 varg1) public nonPayable { \n    require(0xff & _sellers[msg.sender]);\n    0xa4c(varg1, varg0);\n}\n\nfunction endTime() public nonPayable { \n    return _endTime;\n}\n\nfunction withdrawEther(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = stor_6_1_20.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n    v1 = stor_7_0_19.call().value(varg0).gas(!varg0 * 2300);\n    require(v1);\n}\n\nfunction setStartTime(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _startTime = varg0;\n}\n\nfunction tokensSold() public nonPayable { \n    return _tokensSold;\n}\n\nfunction paused() public nonPayable { \n    return _paused;\n}\n\nfunction sellers(address varg0) public nonPayable { \n    return 0xff & _sellers[varg0];\n}\n\nfunction buyFor(address varg0) public payable { \n    0x444(varg0);\n}\n\nfunction startTime() public nonPayable { \n    return _startTime;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction setEndTime(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _endTime = varg0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction hardCap() public nonPayable { \n    return _hardCap;\n}\n\nfunction 0x444(uint256 varg0) private { \n    require(msg.value != 0);\n    assert(stor_3_0_0);\n    0xa4c(msg.value / _price, varg0);\n    return ;\n}\n\nfunction 0x5ae() private { \n    v0 = v1 = block.timestamp >= _startTime;\n    if (v1) {\n        v0 = v2 = block.timestamp <= _endTime;\n    }\n    v0 = v3 = _tokensSold < _hardCap;\n    if (v0) {\n        v0 = v4 = !_paused;\n    }\n    return v0;\n}\n\nfunction 0xa4c(uint256 varg0, uint256 varg1) private { \n    require(address(varg1) != 0);\n    v0 = 0x5ae();\n    require(v0);\n    assert(20000 <= _hardCap);\n    if (_tokensSold < _hardCap - 20000) {\n        require(varg0 >= 20000);\n    }\n    v1 = varg0 + _tokensSold;\n    assert(v1 >= varg0);\n    require(v1 <= _hardCap);\n    v2 = _tokensSold + varg0;\n    assert(v2 >= _tokensSold);\n    _tokensSold = v2;\n    MEM[32 + MEM[64]] = 0;\n    v3 = address(varg1);\n    require(stor_8_0_19.code.size);\n    v4, v5 = stor_8_0_19.mint(v3, varg0).gas(msg.gas - 710);\n    require(v4);\n    return ;\n}\n\nfunction fallback() public payable { \n    0x444(msg.sender);\n}\n\nfunction setAsSeller(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _sellers[varg0] = varg1 | ~0xff & _sellers[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x3440022 == function_selector) {\n            setAsSeller(address,bool);\n        } else if (0x16c38b3c == function_selector) {\n            setPaused(bool);\n        } else if (0x22f3e2d4 == function_selector) {\n            isActive();\n        } else if (0x313f944f == function_selector) {\n            externalPurchase(address,uint256);\n        } else if (0x3197cbb6 == function_selector) {\n            endTime();\n        } else if (0x3bed33ce == function_selector) {\n            withdrawEther(uint256);\n        } else if (0x3e0a322d == function_selector) {\n            setStartTime(uint256);\n        } else if (0x518ab2a8 == function_selector) {\n            tokensSold();\n        } else if (0x5c975abb == function_selector) {\n            paused();\n        } else if (0x6d47ab72 == function_selector) {\n            sellers(address);\n        } else if (0x6f0b5180 == function_selector) {\n            buyFor(address);\n        } else if (0x78e97925 == function_selector) {\n            startTime();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xccb98ffc == function_selector) {\n            setEndTime(uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfb86a404 == function_selector) {\n            hardCap();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.07.03 23:36 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _startTime; // STORAGE[0x1]\nuint256 _endTime; // STORAGE[0x2]\nuint256 _price; // STORAGE[0x3]\nuint256 _hardCap; // STORAGE[0x4]\nuint256 _tokensSold; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _sellers; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_3_0_0; // STORAGE[0x3] bytes 0 to 0\nuint8 _paused; // STORAGE[0x6] bytes 0 to 0\naddress stor_6_1_20; // STORAGE[0x6] bytes 1 to 20\naddress stor_7_0_19; // STORAGE[0x7] bytes 0 to 19\naddress stor_8_0_19; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction setPaused(bool varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _paused = varg0;\n}\n\nfunction isActive() public nonPayable { \n    v0 = 0x5ae();\n    return v0;\n}\n\nfunction externalPurchase(address varg0, uint256 varg1) public nonPayable { \n    require(0xff & _sellers[msg.sender]);\n    0xa4c(varg1, varg0);\n}\n\nfunction endTime() public nonPayable { \n    return _endTime;\n}\n\nfunction withdrawEther(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = stor_6_1_20.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n    v1 = stor_7_0_19.call().value(varg0).gas(!varg0 * 2300);\n    require(v1);\n}\n\nfunction setStartTime(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _startTime = varg0;\n}\n\nfunction tokensSold() public nonPayable { \n    return _tokensSold;\n}\n\nfunction paused() public nonPayable { \n    return _paused;\n}\n\nfunction sellers(address varg0) public nonPayable { \n    return 0xff & _sellers[varg0];\n}\n\nfunction buyFor(address varg0) public payable { \n    0x444(varg0);\n}\n\nfunction startTime() public nonPayable { \n    return _startTime;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction setEndTime(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _endTime = varg0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction hardCap() public nonPayable { \n    return _hardCap;\n}\n\nfunction 0x444(uint256 varg0) private { \n    require(msg.value != 0);\n    assert(stor_3_0_0);\n    0xa4c(msg.value / _price, varg0);\n    return ;\n}\n\nfunction 0x5ae() private { \n    v0 = v1 = block.timestamp >= _startTime;\n    if (v1) {\n        v0 = v2 = block.timestamp <= _endTime;\n    }\n    v0 = v3 = _tokensSold < _hardCap;\n    if (v0) {\n        v0 = v4 = !_paused;\n    }\n    return v0;\n}\n\nfunction 0xa4c(uint256 varg0, uint256 varg1) private { \n    require(address(varg1) != 0);\n    v0 = 0x5ae();\n    require(v0);\n    assert(20000 <= _hardCap);\n    if (_tokensSold < _hardCap - 20000) {\n        require(varg0 >= 20000);\n    }\n    v1 = varg0 + _tokensSold;\n    assert(v1 >= varg0);\n    require(v1 <= _hardCap);\n    v2 = _tokensSold + varg0;\n    assert(v2 >= _tokensSold);\n    _tokensSold = v2;\n    MEM[32 + MEM[64]] = 0;\n    v3 = address(varg1);\n    require(stor_8_0_19.code.size);\n    v4, v5 = stor_8_0_19.mint(v3, varg0).gas(msg.gas - 710);\n    require(v4);\n    return ;\n}\n\nfunction fallback() public payable { \n    0x444(msg.sender);\n}\n\nfunction setAsSeller(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _sellers[varg0] = varg1 | ~0xff & _sellers[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x3440022 == function_selector) {\n            setAsSeller(address,bool);\n        } else if (0x16c38b3c == function_selector) {\n            setPaused(bool);\n        } else if (0x22f3e2d4 == function_selector) {\n            isActive();\n        } else if (0x313f944f == function_selector) {\n            externalPurchase(address,uint256);\n        } else if (0x3197cbb6 == function_selector) {\n            endTime();\n        } else if (0x3bed33ce == function_selector) {\n            withdrawEther(uint256);\n        } else if (0x3e0a322d == function_selector) {\n            setStartTime(uint256);\n        } else if (0x518ab2a8 == function_selector) {\n            tokensSold();\n        } else if (0x5c975abb == function_selector) {\n            paused();\n        } else if (0x6d47ab72 == function_selector) {\n            sellers(address);\n        } else if (0x6f0b5180 == function_selector) {\n            buyFor(address);\n        } else if (0x78e97925 == function_selector) {\n            startTime();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xccb98ffc == function_selector) {\n            setEndTime(uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfb86a404 == function_selector) {\n            hardCap();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.07.03 23:36 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _startTime; // STORAGE[0x1]\nuint256 _endTime; // STORAGE[0x2]\nuint256 _price; // STORAGE[0x3]\nuint256 _hardCap; // STORAGE[0x4]\nuint256 _tokensSold; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _sellers; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_3_0_0; // STORAGE[0x3] bytes 0 to 0\nuint8 _paused; // STORAGE[0x6] bytes 0 to 0\naddress stor_6_1_20; // STORAGE[0x6] bytes 1 to 20\naddress stor_7_0_19; // STORAGE[0x7] bytes 0 to 19\naddress stor_8_0_19; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction setPaused(bool varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _paused = varg0;\n}\n\nfunction isActive() public nonPayable { \n    v0 = 0x5ae();\n    return v0;\n}\n\nfunction externalPurchase(address varg0, uint256 varg1) public nonPayable { \n    require(0xff & _sellers[msg.sender]);\n    0xa4c(varg1, varg0);\n}\n\nfunction endTime() public nonPayable { \n    return _endTime;\n}\n\nfunction withdrawEther(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = stor_6_1_20.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n    v1 = stor_7_0_19.call().value(varg0).gas(!varg0 * 2300);\n    require(v1);\n}\n\nfunction setStartTime(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _startTime = varg0;\n}\n\nfunction tokensSold() public nonPayable { \n    return _tokensSold;\n}\n\nfunction paused() public nonPayable { \n    return _paused;\n}\n\nfunction sellers(address varg0) public nonPayable { \n    return 0xff & _sellers[varg0];\n}\n\nfunction buyFor(address varg0) public payable { \n    0x444(varg0);\n}\n\nfunction startTime() public nonPayable { \n    return _startTime;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction setEndTime(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _endTime = varg0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction hardCap() public nonPayable { \n    return _hardCap;\n}\n\nfunction 0x444(uint256 varg0) private { \n    require(msg.value != 0);\n    assert(stor_3_0_0);\n    0xa4c(msg.value / _price, varg0);\n    return ;\n}\n\nfunction 0x5ae() private { \n    v0 = v1 = block.timestamp >= _startTime;\n    if (v1) {\n        v0 = v2 = block.timestamp <= _endTime;\n    }\n    v0 = v3 = _tokensSold < _hardCap;\n    if (v0) {\n        v0 = v4 = !_paused;\n    }\n    return v0;\n}\n\nfunction 0xa4c(uint256 varg0, uint256 varg1) private { \n    require(address(varg1) != 0);\n    v0 = 0x5ae();\n    require(v0);\n    assert(20000 <= _hardCap);\n    if (_tokensSold < _hardCap - 20000) {\n        require(varg0 >= 20000);\n    }\n    v1 = varg0 + _tokensSold;\n    assert(v1 >= varg0);\n    require(v1 <= _hardCap);\n    v2 = _tokensSold + varg0;\n    assert(v2 >= _tokensSold);\n    _tokensSold = v2;\n    MEM[32 + MEM[64]] = 0;\n    v3 = address(varg1);\n    require(stor_8_0_19.code.size);\n    v4, v5 = stor_8_0_19.mint(v3, varg0).gas(msg.gas - 710);\n    require(v4);\n    return ;\n}\n\nfunction fallback() public payable { \n    0x444(msg.sender);\n}\n\nfunction setAsSeller(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _sellers[varg0] = varg1 | ~0xff & _sellers[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x3440022 == function_selector) {\n            setAsSeller(address,bool);\n        } else if (0x16c38b3c == function_selector) {\n            setPaused(bool);\n        } else if (0x22f3e2d4 == function_selector) {\n            isActive();\n        } else if (0x313f944f == function_selector) {\n            externalPurchase(address,uint256);\n        } else if (0x3197cbb6 == function_selector) {\n            endTime();\n        } else if (0x3bed33ce == function_selector) {\n            withdrawEther(uint256);\n        } else if (0x3e0a322d == function_selector) {\n            setStartTime(uint256);\n        } else if (0x518ab2a8 == function_selector) {\n            tokensSold();\n        } else if (0x5c975abb == function_selector) {\n            paused();\n        } else if (0x6d47ab72 == function_selector) {\n            sellers(address);\n        } else if (0x6f0b5180 == function_selector) {\n            buyFor(address);\n        } else if (0x78e97925 == function_selector) {\n            startTime();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xccb98ffc == function_selector) {\n            setEndTime(uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfb86a404 == function_selector) {\n            hardCap();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 24.119337558746338,
	"usage": {
		"completion_tokens": 505,
		"prompt_tokens": 1631,
		"total_tokens": 2136
	}
}