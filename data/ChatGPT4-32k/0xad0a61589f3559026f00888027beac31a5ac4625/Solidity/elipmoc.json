{
	"address": "0xad0a61589f3559026f00888027beac31a5ac4625",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Due to the nature of EVM bytecode decompilation, it is challenging to recreate the exact Solidity source code that resulted in the bytecode. However, based on the decompiled code provided, I can provide a rough estimation of how the Solidity smart contract might look. Please note that this version will not be exact, and some data types and function modifiers might be different.\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    uint256[] private _name;\n    uint256[] private _symbol;\n    uint256 private _stakingRequirement;\n    mapping (address => uint256) private _exit;\n    mapping (address => uint256) private _referralBalance_;\n    mapping (address => uint256) private _dividendsOf;\n    mapping (address => uint256) private _since;\n    uint256 private _totalSupply;\n    uint256 private stor_9;\n    uint256 private stor_a;\n    uint32 private stor_2_0_3;\n    uint256 private stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9;\n\n    event OnTokenPurchase(address indexed buyer, uint256 ethereumSpent, uint256 tokensReceived, address indexed referrer, uint256 timestamp, uint256 price);\n    event OnWithdraw(address indexed customerAddress, uint256 ethereumWithdrawn);\n    event OnFunded(address indexed funder, uint256 ethereumFunded, uint256 totalSupply);\n    event OnTokenSell(address indexed seller, uint256 tokensSold, uint256 ethereumEarned, uint256 timestamp, uint256 price);\n    event OnReinvestment(address indexed reinvestor, uint256 ethereumReinvested, uint256 tokensReceived);\n\n    constructor() public {\n        // Initialize your contract here\n    }\n\n    function dividendsOf(address user) public view returns(uint256) {\n        // Implement this function based on your business logic\n    }\n\n    // Implement all other functions based on your business logic\n\n    fallback() external payable {\n        // Implement this function based on your business logic\n    }\n\n    // Implement all other functions based on your business logic\n}\n```\n\nThis is a skeleton of your contract. You need to implement a logic for each function based on your business needs.",
				"role": "assistant"
			}
		}
	],
	"created": 1701456996,
	"id": "chatcmpl-8R2yi6gOQzXz9yTZbzzl8VTaVWmu1",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 16:32 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _stakingRequirement; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _referralBalance_; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _dividendsOf; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _since; // STORAGE[0x7]\nuint256 _totalSupply; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint32 stor_2_0_3; // STORAGE[0x2] bytes 0 to 3\nuint256 stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9; // STORAGE[0x3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9]\n\n// Events\nonTokenPurchase(address, uint256, uint256, address, uint256, uint256);\nonWithdraw(address, uint256);\nOnFunded(address, uint256, uint256);\nonTokenSell(address, uint256, uint256, uint256, uint256);\nonReinvestment(address, uint256, uint256);\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    require(v0 >= varg1);\n    return v0;\n}\n\nfunction fallback() public payable { \n    v0 = 0x3f7(0, msg.value);\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return _dividendsOf[varg0] * stor_9 - _dividendsOf[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction calculateTokensReceived(uint256 varg0) public nonPayable { \n    v0 = 0xf96(10, varg0);\n    v1 = _SafeDiv(100, v0);\n    require(v1 <= varg0);\n    v2 = 0xf96(0xde0b6b3a7640000, varg0 - v1);\n    v3 = _SafeDiv(0x38d7ea4c68000, v2);\n    return v3;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction calculateEthereumReceived(uint256 varg0) public nonPayable { \n    require(varg0 <= _totalSupply);\n    v0 = 0xf96(0x38d7ea4c68000, varg0);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    v2 = v3 = 1;\n    if (_since[msg.sender] + stor_2_0_3 > block.number) {\n        v2 = v4 = 20;\n    }\n    v5 = 0xf96(0xff & v2, v1);\n    v6 = _SafeDiv(100, v5);\n    require(v6 <= v1);\n    return v1 - v6;\n}\n\nfunction ethereumToTokens_(uint256 varg0) public nonPayable { \n    v0 = 0xf96(0xde0b6b3a7640000, varg0);\n    v1 = _SafeDiv(0x38d7ea4c68000, v0);\n    return v1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    0x97b();\n}\n\nfunction sellPrice() public nonPayable { \n    v0 = 0xf96(0x38d7ea4c68000, 0xde0b6b3a7640000);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    v2 = 0xf96(1, v1);\n    v3 = _SafeDiv(100, v2);\n    require(v3 <= v1);\n    return v1 - v3;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    v0 = 0xa8f(varg0);\n    return v0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _exit[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    v0 = 0xaea();\n    return v0;\n}\n\nfunction myTokens() public nonPayable { \n    return _exit[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction fund() public payable { \n    assert(_totalSupply);\n    stor_9 += (msg.value << 64) / _totalSupply;\n    emit OnFunded(msg.sender, msg.value, (msg.value << 64) / _totalSupply);\n}\n\nfunction tokensToEthereum_(uint256 varg0) public nonPayable { \n    v0 = 0xf96(0x38d7ea4c68000, varg0);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    return v1;\n}\n\nfunction referralBalance_(address varg0) public nonPayable { \n    return _referralBalance_[varg0];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0xc2a(varg0);\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0xc2a(_exit[msg.sender]);\n    }\n    0x97b();\n}\n\nfunction since(address varg0) public nonPayable { \n    return _since[varg0];\n}\n\nfunction buy(address varg0) public payable { \n    v0 = 0x3f7(varg0, msg.value);\n    return v0;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0xa8f(1);\n    require(v0 > 0);\n    v1 = 0xa8f(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    _dividendsOf[msg.sender] = 0;\n    v2 = 0x3f7(0, v1 + _dividendsOf[msg.sender]);\n    emit onReinvestment(msg.sender, v1 + _dividendsOf[msg.sender], v2);\n}\n\nfunction 0x3f7(uint256 varg0, uint256 varg1) private { \n    v0 = v1 = 0;\n    v0 = v2 = 0;\n    v3 = v4 = 10;\n    if (block.number < 12130 + stor_a) {\n        v3 = v5 = 0;\n    }\n    v6 = v7 = 1081;\n    v8 = v9 = 0xf96(0xff & v3, varg1);\n    while (1) {\n        v0 = _SafeDiv(100, v8);\n        v6 = v10 = 1097;\n        v8 = 0xf96(33, v0);\n        v6 = v11 = 1113;\n        v8 = 0xf96(10, v0);\n    }\n    require(v0 <= v0);\n    require(v0 <= v0 - v0);\n    require(v0 <= varg1);\n    v12 = 0xf96(0xde0b6b3a7640000, varg1 - v0);\n    v13 = _SafeDiv(0x38d7ea4c68000, v12);\n    v14 = v15 = v0 - v0 - v0 << 64;\n    v16 = v17 = v13 > 0;\n    if (v17) {\n        v18 = _SafeAdd(_totalSupply, v13);\n        v16 = v19 = v18 > _totalSupply;\n    }\n    require(v16);\n    v20 = !address(varg0);\n    v21 = v22 = address(varg0);\n    if (address(varg0)) {\n        v21 = v23 = address(varg0) != msg.sender;\n    }\n    if (v21) {\n        v24 = address(varg0);\n        v21 = v25 = _exit[v24] >= _stakingRequirement;\n    }\n    if (!v21) {\n        MEM[32] = 5;\n        v26 = _SafeAdd(v0, stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9);\n        MEM[32] = 5;\n        stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9 = v26;\n        v27 = 0xaea();\n        emit onTokenPurchase(msg.sender, 0, varg1, v13, block.timestamp, v27);\n    } else {\n        v28 = address(varg0);\n        v29 = _SafeAdd(v0, _referralBalance_[v28]);\n        v30 = address(varg0);\n        _referralBalance_[v30] = v29;\n        v31 = 0xaea();\n        emit onTokenPurchase(msg.sender, v30, varg1, v13, block.timestamp, v31);\n    }\n    MEM[32] = 5;\n    v32 = _SafeAdd(v0, stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9);\n    MEM[32] = 5;\n    stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9 = v32;\n    if (_totalSupply <= 0) {\n        _totalSupply = v13;\n    } else {\n        v33 = _SafeAdd(v13, _totalSupply);\n        _totalSupply = v33;\n        assert(v33);\n        stor_9 = stor_9 + (v0 - v0 - v0 << 64) / v33;\n        assert(_totalSupply);\n        v14 = v34 = v15 - (v15 - v13 * ((v0 - v0 - v0 << 64) / _totalSupply));\n    }\n    v35 = _SafeAdd(v13, _exit[msg.sender]);\n    _exit[msg.sender] = v35;\n    _dividendsOf[msg.sender] += v13 * stor_9 - v14;\n    if (!_dividendsOf[msg.sender]) {\n        _since[msg.sender] = block.number;\n    }\n    return v13;\n}\n\nfunction 0x97b() private { \n    v0 = 0xa8f(1);\n    require(v0 > 0);\n    v1 = 0xa8f(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    _dividendsOf[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + _dividendsOf[msg.sender]).gas(2300 * !(v1 + _dividendsOf[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n    emit onWithdraw(msg.sender, v1 + _dividendsOf[msg.sender]);\n    return ;\n}\n\nfunction 0xa8f(uint256 varg0) private { \n    if (varg0) {\n        return (_dividendsOf[msg.sender] * stor_9 - _dividendsOf[msg.sender] >> 64) + _referralBalance_[msg.sender];\n    } else {\n        return _dividendsOf[msg.sender] * stor_9 - _dividendsOf[msg.sender] >> 64;\n    }\n}\n\nfunction 0xaea() private { \n    v0 = 0xf96(0x38d7ea4c68000, 0xde0b6b3a7640000);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    v2 = 0xf96(10, v1);\n    v3 = _SafeDiv(100, v2);\n    v4 = _SafeAdd(v3, v1);\n    return v4;\n}\n\nfunction 0xc2a(uint256 varg0) private { \n    v0 = v1 = 0;\n    require(_exit[msg.sender] > 0);\n    require(varg0 <= _exit[msg.sender]);\n    v2 = 0xf96(0x38d7ea4c68000, varg0);\n    v3 = _SafeDiv(0xde0b6b3a7640000, v2);\n    if (_since[msg.sender] + stor_2_0_3 <= block.number) {\n        v4 = v5 = 3430;\n        v6 = v7 = 0xf96(1, v3);\n    } else {\n        v4 = v8 = 3246;\n        v6 = v9 = 0xf96(20, v3);\n    }\n    while (1) {\n        v0 = v10 = _SafeDiv(100, v6);\n        v4 = v11 = 3262;\n        v6 = 0xf96(25, v10);\n    }\n    require(v0 <= v3);\n    v12 = v13 = v3 - v0;\n    require(v10 <= v0);\n    require(varg0 <= _totalSupply);\n    v14 = _totalSupply - varg0;\n    _totalSupply = v14;\n    if (0 >= v14) {\n        MEM[32] = 5;\n        stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9 += v0 - v10;\n    } else {\n        assert(_totalSupply);\n        require((v0 - v10 << 64) / _totalSupply + stor_9 >= stor_9);\n        stor_9 += (v0 - v10 << 64) / _totalSupply;\n    }\n    require(v10 <= v3);\n    v12 = v3 - v10;\n    require(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    MEM[32] = 5;\n    v15 = _SafeAdd(v10, stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9);\n    stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9 = v15;\n    require(varg0 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg0;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - ((v12 << 64) + varg0 * stor_9);\n    v16 = 0xaea();\n    emit onTokenSell(msg.sender, varg0, v12, block.timestamp, v16);\n    return ;\n}\n\nfunction 0xf96(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        require(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0);\n    assert(varg0);\n    return varg1 / varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x65318b) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x10d0ffdd == function_selector) {\n            calculateTokensReceived(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x22609373 == function_selector) {\n            calculateEthereumReceived(uint256);\n        } else if (0x2a9121c7 == function_selector) {\n            ethereumToTokens_(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xb60d4288 == function_selector) {\n            fund();\n        } else if (0xbf3b397b == function_selector) {\n            tokensToEthereum_(uint256);\n        } else if (0xc664f7f1 == function_selector) {\n            referralBalance_(address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xeaec2b43 == function_selector) {\n            since(address);\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 16:32 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _stakingRequirement; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _referralBalance_; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _dividendsOf; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _since; // STORAGE[0x7]\nuint256 _totalSupply; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint32 stor_2_0_3; // STORAGE[0x2] bytes 0 to 3\nuint256 stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9; // STORAGE[0x3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9]\n\n// Events\nonTokenPurchase(address, uint256, uint256, address, uint256, uint256);\nonWithdraw(address, uint256);\nOnFunded(address, uint256, uint256);\nonTokenSell(address, uint256, uint256, uint256, uint256);\nonReinvestment(address, uint256, uint256);\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    require(v0 >= varg1);\n    return v0;\n}\n\nfunction fallback() public payable { \n    v0 = 0x3f7(0, msg.value);\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return _dividendsOf[varg0] * stor_9 - _dividendsOf[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction calculateTokensReceived(uint256 varg0) public nonPayable { \n    v0 = 0xf96(10, varg0);\n    v1 = _SafeDiv(100, v0);\n    require(v1 <= varg0);\n    v2 = 0xf96(0xde0b6b3a7640000, varg0 - v1);\n    v3 = _SafeDiv(0x38d7ea4c68000, v2);\n    return v3;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction calculateEthereumReceived(uint256 varg0) public nonPayable { \n    require(varg0 <= _totalSupply);\n    v0 = 0xf96(0x38d7ea4c68000, varg0);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    v2 = v3 = 1;\n    if (_since[msg.sender] + stor_2_0_3 > block.number) {\n        v2 = v4 = 20;\n    }\n    v5 = 0xf96(0xff & v2, v1);\n    v6 = _SafeDiv(100, v5);\n    require(v6 <= v1);\n    return v1 - v6;\n}\n\nfunction ethereumToTokens_(uint256 varg0) public nonPayable { \n    v0 = 0xf96(0xde0b6b3a7640000, varg0);\n    v1 = _SafeDiv(0x38d7ea4c68000, v0);\n    return v1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    0x97b();\n}\n\nfunction sellPrice() public nonPayable { \n    v0 = 0xf96(0x38d7ea4c68000, 0xde0b6b3a7640000);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    v2 = 0xf96(1, v1);\n    v3 = _SafeDiv(100, v2);\n    require(v3 <= v1);\n    return v1 - v3;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    v0 = 0xa8f(varg0);\n    return v0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _exit[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    v0 = 0xaea();\n    return v0;\n}\n\nfunction myTokens() public nonPayable { \n    return _exit[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction fund() public payable { \n    assert(_totalSupply);\n    stor_9 += (msg.value << 64) / _totalSupply;\n    emit OnFunded(msg.sender, msg.value, (msg.value << 64) / _totalSupply);\n}\n\nfunction tokensToEthereum_(uint256 varg0) public nonPayable { \n    v0 = 0xf96(0x38d7ea4c68000, varg0);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    return v1;\n}\n\nfunction referralBalance_(address varg0) public nonPayable { \n    return _referralBalance_[varg0];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0xc2a(varg0);\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0xc2a(_exit[msg.sender]);\n    }\n    0x97b();\n}\n\nfunction since(address varg0) public nonPayable { \n    return _since[varg0];\n}\n\nfunction buy(address varg0) public payable { \n    v0 = 0x3f7(varg0, msg.value);\n    return v0;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0xa8f(1);\n    require(v0 > 0);\n    v1 = 0xa8f(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    _dividendsOf[msg.sender] = 0;\n    v2 = 0x3f7(0, v1 + _dividendsOf[msg.sender]);\n    emit onReinvestment(msg.sender, v1 + _dividendsOf[msg.sender], v2);\n}\n\nfunction 0x3f7(uint256 varg0, uint256 varg1) private { \n    v0 = v1 = 0;\n    v0 = v2 = 0;\n    v3 = v4 = 10;\n    if (block.number < 12130 + stor_a) {\n        v3 = v5 = 0;\n    }\n    v6 = v7 = 1081;\n    v8 = v9 = 0xf96(0xff & v3, varg1);\n    while (1) {\n        v0 = _SafeDiv(100, v8);\n        v6 = v10 = 1097;\n        v8 = 0xf96(33, v0);\n        v6 = v11 = 1113;\n        v8 = 0xf96(10, v0);\n    }\n    require(v0 <= v0);\n    require(v0 <= v0 - v0);\n    require(v0 <= varg1);\n    v12 = 0xf96(0xde0b6b3a7640000, varg1 - v0);\n    v13 = _SafeDiv(0x38d7ea4c68000, v12);\n    v14 = v15 = v0 - v0 - v0 << 64;\n    v16 = v17 = v13 > 0;\n    if (v17) {\n        v18 = _SafeAdd(_totalSupply, v13);\n        v16 = v19 = v18 > _totalSupply;\n    }\n    require(v16);\n    v20 = !address(varg0);\n    v21 = v22 = address(varg0);\n    if (address(varg0)) {\n        v21 = v23 = address(varg0) != msg.sender;\n    }\n    if (v21) {\n        v24 = address(varg0);\n        v21 = v25 = _exit[v24] >= _stakingRequirement;\n    }\n    if (!v21) {\n        MEM[32] = 5;\n        v26 = _SafeAdd(v0, stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9);\n        MEM[32] = 5;\n        stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9 = v26;\n        v27 = 0xaea();\n        emit onTokenPurchase(msg.sender, 0, varg1, v13, block.timestamp, v27);\n    } else {\n        v28 = address(varg0);\n        v29 = _SafeAdd(v0, _referralBalance_[v28]);\n        v30 = address(varg0);\n        _referralBalance_[v30] = v29;\n        v31 = 0xaea();\n        emit onTokenPurchase(msg.sender, v30, varg1, v13, block.timestamp, v31);\n    }\n    MEM[32] = 5;\n    v32 = _SafeAdd(v0, stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9);\n    MEM[32] = 5;\n    stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9 = v32;\n    if (_totalSupply <= 0) {\n        _totalSupply = v13;\n    } else {\n        v33 = _SafeAdd(v13, _totalSupply);\n        _totalSupply = v33;\n        assert(v33);\n        stor_9 = stor_9 + (v0 - v0 - v0 << 64) / v33;\n        assert(_totalSupply);\n        v14 = v34 = v15 - (v15 - v13 * ((v0 - v0 - v0 << 64) / _totalSupply));\n    }\n    v35 = _SafeAdd(v13, _exit[msg.sender]);\n    _exit[msg.sender] = v35;\n    _dividendsOf[msg.sender] += v13 * stor_9 - v14;\n    if (!_dividendsOf[msg.sender]) {\n        _since[msg.sender] = block.number;\n    }\n    return v13;\n}\n\nfunction 0x97b() private { \n    v0 = 0xa8f(1);\n    require(v0 > 0);\n    v1 = 0xa8f(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    _dividendsOf[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + _dividendsOf[msg.sender]).gas(2300 * !(v1 + _dividendsOf[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n    emit onWithdraw(msg.sender, v1 + _dividendsOf[msg.sender]);\n    return ;\n}\n\nfunction 0xa8f(uint256 varg0) private { \n    if (varg0) {\n        return (_dividendsOf[msg.sender] * stor_9 - _dividendsOf[msg.sender] >> 64) + _referralBalance_[msg.sender];\n    } else {\n        return _dividendsOf[msg.sender] * stor_9 - _dividendsOf[msg.sender] >> 64;\n    }\n}\n\nfunction 0xaea() private { \n    v0 = 0xf96(0x38d7ea4c68000, 0xde0b6b3a7640000);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    v2 = 0xf96(10, v1);\n    v3 = _SafeDiv(100, v2);\n    v4 = _SafeAdd(v3, v1);\n    return v4;\n}\n\nfunction 0xc2a(uint256 varg0) private { \n    v0 = v1 = 0;\n    require(_exit[msg.sender] > 0);\n    require(varg0 <= _exit[msg.sender]);\n    v2 = 0xf96(0x38d7ea4c68000, varg0);\n    v3 = _SafeDiv(0xde0b6b3a7640000, v2);\n    if (_since[msg.sender] + stor_2_0_3 <= block.number) {\n        v4 = v5 = 3430;\n        v6 = v7 = 0xf96(1, v3);\n    } else {\n        v4 = v8 = 3246;\n        v6 = v9 = 0xf96(20, v3);\n    }\n    while (1) {\n        v0 = v10 = _SafeDiv(100, v6);\n        v4 = v11 = 3262;\n        v6 = 0xf96(25, v10);\n    }\n    require(v0 <= v3);\n    v12 = v13 = v3 - v0;\n    require(v10 <= v0);\n    require(varg0 <= _totalSupply);\n    v14 = _totalSupply - varg0;\n    _totalSupply = v14;\n    if (0 >= v14) {\n        MEM[32] = 5;\n        stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9 += v0 - v10;\n    } else {\n        assert(_totalSupply);\n        require((v0 - v10 << 64) / _totalSupply + stor_9 >= stor_9);\n        stor_9 += (v0 - v10 << 64) / _totalSupply;\n    }\n    require(v10 <= v3);\n    v12 = v3 - v10;\n    require(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    MEM[32] = 5;\n    v15 = _SafeAdd(v10, stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9);\n    stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9 = v15;\n    require(varg0 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg0;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - ((v12 << 64) + varg0 * stor_9);\n    v16 = 0xaea();\n    emit onTokenSell(msg.sender, varg0, v12, block.timestamp, v16);\n    return ;\n}\n\nfunction 0xf96(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        require(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0);\n    assert(varg0);\n    return varg1 / varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x65318b) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x10d0ffdd == function_selector) {\n            calculateTokensReceived(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x22609373 == function_selector) {\n            calculateEthereumReceived(uint256);\n        } else if (0x2a9121c7 == function_selector) {\n            ethereumToTokens_(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xb60d4288 == function_selector) {\n            fund();\n        } else if (0xbf3b397b == function_selector) {\n            tokensToEthereum_(uint256);\n        } else if (0xc664f7f1 == function_selector) {\n            referralBalance_(address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xeaec2b43 == function_selector) {\n            since(address);\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 16:32 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _stakingRequirement; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _exit; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _referralBalance_; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _dividendsOf; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _since; // STORAGE[0x7]\nuint256 _totalSupply; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint32 stor_2_0_3; // STORAGE[0x2] bytes 0 to 3\nuint256 stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9; // STORAGE[0x3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9]\n\n// Events\nonTokenPurchase(address, uint256, uint256, address, uint256, uint256);\nonWithdraw(address, uint256);\nOnFunded(address, uint256, uint256);\nonTokenSell(address, uint256, uint256, uint256, uint256);\nonReinvestment(address, uint256, uint256);\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    require(v0 >= varg1);\n    return v0;\n}\n\nfunction fallback() public payable { \n    v0 = 0x3f7(0, msg.value);\n}\n\nfunction dividendsOf(address varg0) public nonPayable { \n    return _dividendsOf[varg0] * stor_9 - _dividendsOf[varg0] >> 64;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction calculateTokensReceived(uint256 varg0) public nonPayable { \n    v0 = 0xf96(10, varg0);\n    v1 = _SafeDiv(100, v0);\n    require(v1 <= varg0);\n    v2 = 0xf96(0xde0b6b3a7640000, varg0 - v1);\n    v3 = _SafeDiv(0x38d7ea4c68000, v2);\n    return v3;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction calculateEthereumReceived(uint256 varg0) public nonPayable { \n    require(varg0 <= _totalSupply);\n    v0 = 0xf96(0x38d7ea4c68000, varg0);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    v2 = v3 = 1;\n    if (_since[msg.sender] + stor_2_0_3 > block.number) {\n        v2 = v4 = 20;\n    }\n    v5 = 0xf96(0xff & v2, v1);\n    v6 = _SafeDiv(100, v5);\n    require(v6 <= v1);\n    return v1 - v6;\n}\n\nfunction ethereumToTokens_(uint256 varg0) public nonPayable { \n    v0 = 0xf96(0xde0b6b3a7640000, varg0);\n    v1 = _SafeDiv(0x38d7ea4c68000, v0);\n    return v1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    0x97b();\n}\n\nfunction sellPrice() public nonPayable { \n    v0 = 0xf96(0x38d7ea4c68000, 0xde0b6b3a7640000);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    v2 = 0xf96(1, v1);\n    v3 = _SafeDiv(100, v2);\n    require(v3 <= v1);\n    return v1 - v3;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction myDividends(bool varg0) public nonPayable { \n    v0 = 0xa8f(varg0);\n    return v0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _exit[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    v0 = 0xaea();\n    return v0;\n}\n\nfunction myTokens() public nonPayable { \n    return _exit[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction fund() public payable { \n    assert(_totalSupply);\n    stor_9 += (msg.value << 64) / _totalSupply;\n    emit OnFunded(msg.sender, msg.value, (msg.value << 64) / _totalSupply);\n}\n\nfunction tokensToEthereum_(uint256 varg0) public nonPayable { \n    v0 = 0xf96(0x38d7ea4c68000, varg0);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    return v1;\n}\n\nfunction referralBalance_(address varg0) public nonPayable { \n    return _referralBalance_[varg0];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    0xc2a(varg0);\n}\n\nfunction exit() public nonPayable { \n    if (_exit[msg.sender] > 0) {\n        0xc2a(_exit[msg.sender]);\n    }\n    0x97b();\n}\n\nfunction since(address varg0) public nonPayable { \n    return _since[varg0];\n}\n\nfunction buy(address varg0) public payable { \n    v0 = 0x3f7(varg0, msg.value);\n    return v0;\n}\n\nfunction reinvest() public nonPayable { \n    v0 = 0xa8f(1);\n    require(v0 > 0);\n    v1 = 0xa8f(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    _dividendsOf[msg.sender] = 0;\n    v2 = 0x3f7(0, v1 + _dividendsOf[msg.sender]);\n    emit onReinvestment(msg.sender, v1 + _dividendsOf[msg.sender], v2);\n}\n\nfunction 0x3f7(uint256 varg0, uint256 varg1) private { \n    v0 = v1 = 0;\n    v0 = v2 = 0;\n    v3 = v4 = 10;\n    if (block.number < 12130 + stor_a) {\n        v3 = v5 = 0;\n    }\n    v6 = v7 = 1081;\n    v8 = v9 = 0xf96(0xff & v3, varg1);\n    while (1) {\n        v0 = _SafeDiv(100, v8);\n        v6 = v10 = 1097;\n        v8 = 0xf96(33, v0);\n        v6 = v11 = 1113;\n        v8 = 0xf96(10, v0);\n    }\n    require(v0 <= v0);\n    require(v0 <= v0 - v0);\n    require(v0 <= varg1);\n    v12 = 0xf96(0xde0b6b3a7640000, varg1 - v0);\n    v13 = _SafeDiv(0x38d7ea4c68000, v12);\n    v14 = v15 = v0 - v0 - v0 << 64;\n    v16 = v17 = v13 > 0;\n    if (v17) {\n        v18 = _SafeAdd(_totalSupply, v13);\n        v16 = v19 = v18 > _totalSupply;\n    }\n    require(v16);\n    v20 = !address(varg0);\n    v21 = v22 = address(varg0);\n    if (address(varg0)) {\n        v21 = v23 = address(varg0) != msg.sender;\n    }\n    if (v21) {\n        v24 = address(varg0);\n        v21 = v25 = _exit[v24] >= _stakingRequirement;\n    }\n    if (!v21) {\n        MEM[32] = 5;\n        v26 = _SafeAdd(v0, stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9);\n        MEM[32] = 5;\n        stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9 = v26;\n        v27 = 0xaea();\n        emit onTokenPurchase(msg.sender, 0, varg1, v13, block.timestamp, v27);\n    } else {\n        v28 = address(varg0);\n        v29 = _SafeAdd(v0, _referralBalance_[v28]);\n        v30 = address(varg0);\n        _referralBalance_[v30] = v29;\n        v31 = 0xaea();\n        emit onTokenPurchase(msg.sender, v30, varg1, v13, block.timestamp, v31);\n    }\n    MEM[32] = 5;\n    v32 = _SafeAdd(v0, stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9);\n    MEM[32] = 5;\n    stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9 = v32;\n    if (_totalSupply <= 0) {\n        _totalSupply = v13;\n    } else {\n        v33 = _SafeAdd(v13, _totalSupply);\n        _totalSupply = v33;\n        assert(v33);\n        stor_9 = stor_9 + (v0 - v0 - v0 << 64) / v33;\n        assert(_totalSupply);\n        v14 = v34 = v15 - (v15 - v13 * ((v0 - v0 - v0 << 64) / _totalSupply));\n    }\n    v35 = _SafeAdd(v13, _exit[msg.sender]);\n    _exit[msg.sender] = v35;\n    _dividendsOf[msg.sender] += v13 * stor_9 - v14;\n    if (!_dividendsOf[msg.sender]) {\n        _since[msg.sender] = block.number;\n    }\n    return v13;\n}\n\nfunction 0x97b() private { \n    v0 = 0xa8f(1);\n    require(v0 > 0);\n    v1 = 0xa8f(0);\n    _dividendsOf[msg.sender] += v1 << 64;\n    _dividendsOf[msg.sender] = 0;\n    v2 = msg.sender.call().value(v1 + _dividendsOf[msg.sender]).gas(2300 * !(v1 + _dividendsOf[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n    emit onWithdraw(msg.sender, v1 + _dividendsOf[msg.sender]);\n    return ;\n}\n\nfunction 0xa8f(uint256 varg0) private { \n    if (varg0) {\n        return (_dividendsOf[msg.sender] * stor_9 - _dividendsOf[msg.sender] >> 64) + _referralBalance_[msg.sender];\n    } else {\n        return _dividendsOf[msg.sender] * stor_9 - _dividendsOf[msg.sender] >> 64;\n    }\n}\n\nfunction 0xaea() private { \n    v0 = 0xf96(0x38d7ea4c68000, 0xde0b6b3a7640000);\n    v1 = _SafeDiv(0xde0b6b3a7640000, v0);\n    v2 = 0xf96(10, v1);\n    v3 = _SafeDiv(100, v2);\n    v4 = _SafeAdd(v3, v1);\n    return v4;\n}\n\nfunction 0xc2a(uint256 varg0) private { \n    v0 = v1 = 0;\n    require(_exit[msg.sender] > 0);\n    require(varg0 <= _exit[msg.sender]);\n    v2 = 0xf96(0x38d7ea4c68000, varg0);\n    v3 = _SafeDiv(0xde0b6b3a7640000, v2);\n    if (_since[msg.sender] + stor_2_0_3 <= block.number) {\n        v4 = v5 = 3430;\n        v6 = v7 = 0xf96(1, v3);\n    } else {\n        v4 = v8 = 3246;\n        v6 = v9 = 0xf96(20, v3);\n    }\n    while (1) {\n        v0 = v10 = _SafeDiv(100, v6);\n        v4 = v11 = 3262;\n        v6 = 0xf96(25, v10);\n    }\n    require(v0 <= v3);\n    v12 = v13 = v3 - v0;\n    require(v10 <= v0);\n    require(varg0 <= _totalSupply);\n    v14 = _totalSupply - varg0;\n    _totalSupply = v14;\n    if (0 >= v14) {\n        MEM[32] = 5;\n        stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9 += v0 - v10;\n    } else {\n        assert(_totalSupply);\n        require((v0 - v10 << 64) / _totalSupply + stor_9 >= stor_9);\n        stor_9 += (v0 - v10 << 64) / _totalSupply;\n    }\n    require(v10 <= v3);\n    v12 = v3 - v10;\n    require(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    MEM[32] = 5;\n    v15 = _SafeAdd(v10, stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9);\n    stor_3da9f4950be0ad425c904eb1e7a324f21d3383c7b2b242570f7821e9665dcdc9 = v15;\n    require(varg0 <= _exit[msg.sender]);\n    _exit[msg.sender] = _exit[msg.sender] - varg0;\n    _dividendsOf[msg.sender] = _dividendsOf[msg.sender] - ((v12 << 64) + varg0 * stor_9);\n    v16 = 0xaea();\n    emit onTokenSell(msg.sender, varg0, v12, block.timestamp, v16);\n    return ;\n}\n\nfunction 0xf96(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        require(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0);\n    assert(varg0);\n    return varg1 / varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x65318b) {\n            dividendsOf(address);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x10d0ffdd == function_selector) {\n            calculateTokensReceived(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x22609373 == function_selector) {\n            calculateEthereumReceived(uint256);\n        } else if (0x2a9121c7 == function_selector) {\n            ethereumToTokens_(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x688abbf7 == function_selector) {\n            myDividends(bool);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x949e8acd == function_selector) {\n            myTokens();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xb60d4288 == function_selector) {\n            fund();\n        } else if (0xbf3b397b == function_selector) {\n            tokensToEthereum_(uint256);\n        } else if (0xc664f7f1 == function_selector) {\n            referralBalance_(address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe9fad8ee == function_selector) {\n            exit();\n        } else if (0xeaec2b43 == function_selector) {\n            since(address);\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 21.025443077087402,
	"usage": {
		"completion_tokens": 481,
		"prompt_tokens": 4896,
		"total_tokens": 5377
	}
}