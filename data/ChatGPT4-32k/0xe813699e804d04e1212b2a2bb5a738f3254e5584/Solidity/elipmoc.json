{
	"address": "0xe813699e804d04e1212b2a2bb5a738f3254e5584",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code that corresponds to the decompiled code:\n\n```Solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\ncontract Bank {\n    uint256 private _useEmergencyCode; \n    uint256 private stor_3; \n    address private _owner; \n    address private stor_1_0_19; \n\n    // Events\n    event BankWithdrawal(address indexed user, uint256 amount);\n    event BankDeposit(address indexed user, uint256 amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"Caller is not owner\");\n        _;\n    }\n\n    constructor(address owner) {\n        _owner = owner;\n    }\n\n    function useEmergencyCode(uint256 varg0) external payable { \n        require(msg.data.length - 4 >= 32, \"Invalid data length\");\n        bool v0 = varg0 == _useEmergencyCode;\n        if (v0) {\n            v0 = msg.value == stor_3;\n        }\n        if (v0) {\n            stor_1_0_19 = msg.sender;\n        }\n    }\n\n    function deposit() external payable { \n        require(msg.value > 0, \"Deposit amount should be more than 0\");\n        emit BankDeposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 varg0) external payable onlyOwner { \n        require(msg.data.length - 4 >= 32, \"Invalid data length\");\n        require(varg0 <= address(this).balance, \"Insufficient balance\");\n        (bool success, ) = msg.sender.call{value: varg0}(\"\");\n        require(success, \"Transfer failed\");\n        emit BankWithdrawal(msg.sender, varg0);\n    }\n\n    function setEmergencyCode(uint256 varg0, uint256 varg1) external onlyOwner { \n        require(msg.data.length - 4 >= 64, \"Invalid data length\");\n        _useEmergencyCode = varg0;\n        stor_3 = varg1;\n    }\n\n    function getOwner() external view returns (address) { \n        return _owner;\n    }\n\n    fallback() external payable { \n        revert();\n    }\n\n    receive() external payable {\n        revert();\n    }\n}\n```\nI have made some assumptions and improvements to the code to make it more understandable and safe. The original decompiled code doesn't seem to have a constructor to set the owner initially. I have added `onlyOwner` modifier for the functions which require `msg.sender` to be the owner. I have also added `receive()` function to explicitly indicate that the contract should not receive ether directly without a function call.",
				"role": "assistant"
			}
		}
	],
	"created": 1701462281,
	"id": "chatcmpl-8R4LxW3GSJBoHCIFxXBOrDVyKK7Fz",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.07.03 22:31 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _useEmergencyCode; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress stor_1_0_19; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nBankWithdrawal(address, uint256);\nBankDeposit(address, uint256);\n\nfunction useEmergencyCode(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = varg0 == _useEmergencyCode;\n    if (v1) {\n        v0 = v2 = msg.value == stor_3;\n    }\n    if (v0) {\n        stor_1_0_19 = msg.sender;\n    }\n}\n\nfunction deposit() public payable { \n    require(msg.value > 0);\n    emit BankDeposit(msg.sender, msg.value);\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction withdraw(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    require(varg0 <= (address(this)).balance);\n    v0 = msg.sender.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit BankWithdrawal(msg.sender, msg.value);\n}\n\nfunction setEmergencyCode(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _useEmergencyCode = varg0;\n    stor_3 = varg1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x85511d5f == function_selector) {\n            setEmergencyCode(uint256,uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa70f101c == function_selector) {\n            useEmergencyCode(uint256);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.07.03 22:31 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _useEmergencyCode; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress stor_1_0_19; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nBankWithdrawal(address, uint256);\nBankDeposit(address, uint256);\n\nfunction useEmergencyCode(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = varg0 == _useEmergencyCode;\n    if (v1) {\n        v0 = v2 = msg.value == stor_3;\n    }\n    if (v0) {\n        stor_1_0_19 = msg.sender;\n    }\n}\n\nfunction deposit() public payable { \n    require(msg.value > 0);\n    emit BankDeposit(msg.sender, msg.value);\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction withdraw(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    require(varg0 <= (address(this)).balance);\n    v0 = msg.sender.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit BankWithdrawal(msg.sender, msg.value);\n}\n\nfunction setEmergencyCode(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _useEmergencyCode = varg0;\n    stor_3 = varg1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x85511d5f == function_selector) {\n            setEmergencyCode(uint256,uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa70f101c == function_selector) {\n            useEmergencyCode(uint256);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.07.03 22:31 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _useEmergencyCode; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress stor_1_0_19; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nBankWithdrawal(address, uint256);\nBankDeposit(address, uint256);\n\nfunction useEmergencyCode(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = varg0 == _useEmergencyCode;\n    if (v1) {\n        v0 = v2 = msg.value == stor_3;\n    }\n    if (v0) {\n        stor_1_0_19 = msg.sender;\n    }\n}\n\nfunction deposit() public payable { \n    require(msg.value > 0);\n    emit BankDeposit(msg.sender, msg.value);\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction withdraw(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    require(varg0 <= (address(this)).balance);\n    v0 = msg.sender.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit BankWithdrawal(msg.sender, msg.value);\n}\n\nfunction setEmergencyCode(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _useEmergencyCode = varg0;\n    stor_3 = varg1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x85511d5f == function_selector) {\n            setEmergencyCode(uint256,uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa70f101c == function_selector) {\n            useEmergencyCode(uint256);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 30.824982404708862,
	"usage": {
		"completion_tokens": 547,
		"prompt_tokens": 654,
		"total_tokens": 1201
	}
}