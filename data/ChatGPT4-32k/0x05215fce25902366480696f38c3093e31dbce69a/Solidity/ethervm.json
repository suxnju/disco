{
	"address": "0x05215fce25902366480696f38c3093e31dbce69a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity version of the given smart contract code. Please note that some functions in the original code could not be converted accurately due to the obfuscation or complexity of the original bytecode, and hence, they are approximated. \n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping (address => uint256) balances;\n    mapping (address => bool) admins;\n    mapping (address => uint256) dividends;\n    uint256 totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public stakingRequirement;\n    uint256 public pricePerToken;\n\n    function dividendsOf(address _owner) public view returns(uint256) {\n        return dividends[_owner];\n    }\n\n    function balanceOf(address _owner) public view returns(uint256) {\n        return balances[_owner];\n    }\n\n    function setStakingRequirement(uint256 _value) public {\n        require(admins[msg.sender], \"Only admins can set staking requirement\");\n        stakingRequirement = _value;\n    }\n\n    function setAdministrator(address _admin, bool _value) public {\n        require(admins[msg.sender], \"Only admins can set other admins\");\n        admins[_admin] = _value;\n    }\n\n    function transfer(address _to, uint256 _value) public returns(bool success) {\n        require(_value <= balances[msg.sender]);\n        require(balances[_to] + _value >= balances[_to]); // Prevent overflow\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function buy(address _buyer) public payable returns(uint256) {\n        uint256 tokens = msg.value / pricePerToken; // Assume pricePerToken is in wei\n        require(balances[_buyer] + tokens >= balances[_buyer]); // Prevent overflow\n        balances[_buyer] += tokens;\n        totalSupply += tokens;\n        return tokens;\n    }\n\n    function sell(uint256 _value) public returns(bool success) {\n        require(_value <= balances[msg.sender]);\n        uint256 ethAmount = _value * pricePerToken;\n        require(address(this).balance >= ethAmount); // Contract has enough ether to pay\n        balances[msg.sender] -= _value;\n        totalSupply -= _value;\n        msg.sender.transfer(ethAmount);\n        return true;\n    }\n\n    function withdraw() public {\n        uint256 dividend = dividends[msg.sender];\n        require(dividend > 0);\n        dividends[msg.sender] = 0;\n        msg.sender.transfer(dividend);\n    }\n\n    function reinvest() public {\n        uint256 dividend = dividends[msg.sender];\n        require(dividend > 0);\n        dividends[msg.sender] = 0;\n        uint256 tokens = dividend / pricePerToken;\n        require(balances[msg.sender] + tokens >= balances[msg.sender]); // Prevent overflow\n        balances[msg.sender] += tokens;\n        totalSupply += tokens;\n    }\n}\n```\n\nPlease note that the original bytecode appears to include various other lower-level operations and conditions, which are not represented in the above simplified Solidity version. This includes various checks and operations on memory, storage and other lower-level EVM aspects.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474001,
	"id": "chatcmpl-8MvFxP5D9eGfbQQ84chroIQGf9pKu",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_015E:\n            var var0 = 0x0169;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = func_085E(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ad;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = dividendsOf(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d8;\n                var2 = name();\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp3 - var4;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var6 = temp4 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0218:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_0206:\n                    var temp10 = var11;\n                    memory[var9 + temp10:var9 + temp10 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0218; }\n                    else { goto label_0206; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x027e;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateTokensReceived(var2);\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a9;\n                var1 = totalSupply();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02ea;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0315;\n                var2 = decimals();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x392efb52) {\n                // Dispatch table entry for administrators(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0360;\n                var2 = msg.data[0x04:0x24];\n                var2 = administrators(var2);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = !!var2;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038f;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03a6;\n                var1 = sellPrice();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x523191bf) {\n                // Dispatch table entry for 0x523191bf (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03fd;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = func_0EF2(var2);\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0428;\n                var2 = stakingRequirement();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var2;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x046b;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var1;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0496;\n                var1 = totalEthereumBalance();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var1;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ed;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var1;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x052e;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0545;\n                var1 = buyPrice();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var1;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x89135ae9) {\n                // Dispatch table entry for setAdministrator(bytes32,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0596;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ad;\n                var1 = myTokens();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var1;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d8;\n                var2 = symbol();\n                var temp37 = memory[0x40:0x60];\n                var3 = temp37;\n                var4 = var3;\n                var temp38 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp38 - var4;\n                var temp39 = var2;\n                memory[temp38:temp38 + 0x20] = memory[temp39:temp39 + 0x20];\n                var5 = temp38 + 0x20;\n                var6 = temp39 + 0x20;\n                var7 = memory[temp39:temp39 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0618:\n                    var temp40 = var7;\n                    var5 = temp40 + var5;\n                    var6 = temp40 & 0x1f;\n                \n                    if (!var6) {\n                        var temp41 = memory[0x40:0x60];\n                        return memory[temp41:temp41 + var5 - temp41];\n                    } else {\n                        var temp42 = var6;\n                        var temp43 = var5 - temp42;\n                        memory[temp43:temp43 + 0x20] = ~(0x0100 ** (0x20 - temp42) - 0x01) & memory[temp43:temp43 + 0x20];\n                        var temp44 = memory[0x40:0x60];\n                        return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n                    }\n                } else {\n                label_0606:\n                    var temp45 = var11;\n                    memory[var9 + temp45:var9 + temp45 + 0x20] = memory[var10 + temp45:var10 + temp45 + 0x20];\n                    var11 = temp45 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0618; }\n                    else { goto label_0606; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x069e;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = !!var1;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x071f;\n                var temp48 = msg.data[0x04:0x24] + 0x04;\n                var temp49 = msg.data[temp48:temp48 + 0x20];\n                var temp50 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp50 + (temp49 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp50:temp50 + 0x20] = temp49;\n                memory[temp50 + 0x20:temp50 + 0x20 + temp49] = msg.data[temp48 + 0x20:temp48 + 0x20 + temp49];\n                var2 = temp50;\n                setSymbol(var2);\n                stop();\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0788;\n                var temp51 = msg.data[0x04:0x24] + 0x04;\n                var temp52 = msg.data[temp51:temp51 + 0x20];\n                var temp53 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp53 + (temp52 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp53:temp53 + 0x20] = temp52;\n                memory[temp53 + 0x20:temp53 + 0x20 + temp52] = msg.data[temp51 + 0x20:temp51 + 0x20 + temp52];\n                var2 = temp53;\n                setName(var2);\n                stop();\n            } else if (var0 == 0xd6b0f484) {\n                // Dispatch table entry for disableWhitelist()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x079f;\n                var1 = disableWhitelist();\n                var temp54 = memory[0x40:0x60];\n                memory[temp54:temp54 + 0x20] = !!var1;\n                var temp55 = memory[0x40:0x60];\n                return memory[temp55:temp55 + (temp54 + 0x20) - temp55];\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07e4;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07fb;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x0831;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = buy(var2);\n                var temp56 = memory[0x40:0x60];\n                memory[temp56:temp56 + 0x20] = var1;\n                var temp57 = memory[0x40:0x60];\n                return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x085c;\n                reinvest();\n                stop();\n            } else { goto label_015E; }\n        }\n    }\n    \n    function func_085E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var1 = msg.sender;\n        var var3 = msg.value < address(this).balance;\n    \n        if (!var3) {\n            if (!var3) {\n            label_08CE:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0b;\n                var3 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x00;\n            \n                if (!var3) {\n                label_0941:\n                \n                    if (var3) { revert(memory[0x00:0x00]); }\n                \n                label_094B:\n                    var3 = 0x0955;\n                    var var4 = msg.value;\n                    var var5 = arg1;\n                    var3 = func_1D10(var4, var5);\n                    var2 = var3;\n                    memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x03;\n                \n                    if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x01) {\n                    label_0AED:\n                        return var2;\n                    } else {\n                        var3 = 0x09bc;\n                        var4 = storage[0x08];\n                        var5 = var2;\n                        var3 = func_210E(var4, var5);\n                        storage[0x08] = var3;\n                        var3 = 0x0a0b;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x04;\n                        var4 = storage[keccak256(memory[0x00:0x40])];\n                        var5 = var2;\n                        var3 = func_210E(var4, var5);\n                        var temp0 = var1;\n                        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x04;\n                        storage[keccak256(memory[0x00:0x40])] = var3;\n                        var3 = 0x0a97;\n                        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var4 = storage[keccak256(memory[0x00:0x40])];\n                        var5 = var2;\n                        var3 = func_2127(var4, var5);\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40])] = var3;\n                        var3 = 0x0ae6;\n                        var4 = storage[0x09];\n                        var5 = var2;\n                        var3 = func_2127(var4, var5);\n                        storage[0x09] = var3;\n                        goto label_0AED;\n                    }\n                } else {\n                label_0929:\n                \n                    if (!!(storage[0x0c] & 0xff) != !!0x01) { goto label_094B; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_08B3:\n                storage[0x0c] = (storage[0x0c] & ~0xff) | 0x00;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0b;\n                var3 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x00;\n            \n                if (!var3) { goto label_0941; }\n                else { goto label_0929; }\n            }\n        } else if (address(this).balance - msg.value < 0x6124fee993bc0000) { goto label_08CE; }\n        else { goto label_08B3; }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x010000000000000000;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var var2 = storage[0x0a] * storage[keccak256(memory[0x00:0x40])] - temp1;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0C30:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0C27; }\n        \n        label_0C13:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0C13; }\n        \n        label_0C27:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0C30;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0C30;\n        }\n    }\n    \n    function calculateTokensReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x0c4c;\n        var var5 = arg0;\n        var var6 = 0xff & 0x0a;\n        var4 = func_2145(var5, var6);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x0c58;\n        var5 = arg0;\n        var6 = var1;\n        var4 = func_210E(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x0c63;\n        var5 = var2;\n        return func_2160(var5);\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x08] + storage[0x09]; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 > storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x0c9e;\n        var var5 = arg0;\n        var4 = func_21F2(var5);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x0cae;\n        var5 = var1;\n        var var6 = 0xff & 0x0a;\n        var4 = func_2145(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x0cba;\n        var5 = var1;\n        var6 = var2;\n        return func_210E(var5, var6);\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x0cfb;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x0d14;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var2;\n        var temp1 = var0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var1 = temp3;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(temp1 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var1 * 0x08fc).value(var1)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n        var2 = !temp5;\n    \n        if (!var2) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var1;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] + storage[0x09] != 0x00) {\n            var var4 = 0x0eca;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_21F2(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0eda;\n            var5 = var1;\n            var var6 = 0xff & 0x0a;\n            var4 = func_2145(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x0ee6;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_210E(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0EEC:\n            return var0;\n        } else {\n            var0 = 0x174876e800 - 0x02540be400;\n            goto label_0EEC;\n        }\n    }\n    \n    function func_0EF2(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x02]; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x0f72;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x0f24;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x01) {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            return storage[keccak256(memory[0x00:0x40])];\n        } else {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            return storage[keccak256(memory[0x00:0x40])];\n        }\n    }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = arg0;\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] + storage[0x09] != 0x00) {\n            var var4 = 0x1158;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_21F2(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x1168;\n            var5 = var1;\n            var var6 = 0xff & 0x0a;\n            var4 = func_2145(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x1174;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_2127(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_117A:\n            return var0;\n        } else {\n            var0 = 0x174876e800 + 0x02540be400;\n            goto label_117A;\n        }\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0d;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = !!arg1 | (storage[temp2] & ~0xff);\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x1250;\n        var var3 = var1;\n        return balanceOf(var3);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_12EC:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_12E3; }\n        \n        label_12CF:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_12CF; }\n        \n        label_12E3:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_12EC;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_12EC;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x1301;\n        var3 = myTokens();\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var2 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x00;\n    \n        if (var2) {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x03;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x00) { goto label_13CB; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var2) {\n        label_13CB:\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n        \n            if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x00;\n            var3 = 0x1425;\n            var var4 = 0x01;\n            var3 = myDividends(var4);\n        \n            if (var3 <= var2) {\n            label_1434:\n                var2 = 0x147d;\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var4 = arg1;\n                var2 = func_210E(var3, var4);\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var2 = 0x1509;\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var4 = arg1;\n                var2 = func_2127(var3, var4);\n                var temp0 = arg0;\n                memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var temp1 = arg1;\n                var temp2 = var1;\n                memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] - storage[0x0a] * temp1;\n                memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] + storage[0x0a] * temp1;\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = temp1;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n                var2 = 0x1433;\n                withdraw();\n                goto label_1434;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setSymbol(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        var var1 = 0x16fd;\n        var var2 = 0x01;\n        var var4 = memory[temp2:temp2 + 0x20];\n        var var3 = temp2 + 0x20;\n        var1 = func_22EC(var2, var3, var4);\n    }\n    \n    function setName(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        var var1 = 0x17a1;\n        var var2 = 0x00;\n        var var4 = memory[temp2:temp2 + 0x20];\n        var var3 = temp2 + 0x20;\n        var1 = func_22EC(var2, var3, var4);\n    }\n    \n    function disableWhitelist() returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0c] = (storage[0x0c] & ~0xff) | 0x00;\n        return storage[0x0c] & 0xff;\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x184a;\n        var7 = myTokens();\n    \n        if (var7 <= var6) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var6 = 0x1912;\n        var7 = var1;\n        var6 = func_21F2(var7);\n        var temp0 = var6;\n        var2 = temp0;\n        var6 = 0x1922;\n        var7 = var2;\n        var var8 = 0xff & 0x0a;\n        var6 = func_2145(var7, var8);\n        var temp1 = var6;\n        var3 = temp1;\n        var6 = 0x192e;\n        var7 = var2;\n        var8 = var3;\n        var6 = func_210E(var7, var8);\n        var4 = var6;\n        var6 = 0x193c;\n        var7 = storage[0x08];\n        var8 = var1;\n        var6 = func_210E(var7, var8);\n        storage[0x08] = var6;\n        var6 = 0x198b;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var8 = var1;\n        var6 = func_210E(var7, var8);\n        var temp2 = var0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        var5 = storage[0x0a] * var1 + var4 * 0x010000000000000000;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] - var5;\n    \n        if (storage[0x08] <= 0x00) {\n        label_1A65:\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = var4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n            var6 = 0x1a5e;\n            var7 = storage[0x0a];\n            var8 = storage[0x08];\n            var var9 = var3 * 0x010000000000000000;\n        \n            if (!var8) { assert(); }\n        \n            var6 = func_1A58(var7, var8, var9);\n            storage[0x0a] = var6;\n            goto label_1A65;\n        }\n    }\n    \n    function func_1A58(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_2127(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_1B1F:\n            var var2 = 0x1b27;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x1b1e;\n            var var3 = var1;\n            sell(var3);\n            goto label_1B1F;\n        }\n    }\n    \n    function buy(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1b37;\n        var var2 = msg.value;\n        var var3 = arg0;\n        var1 = func_085E(var2, var3);\n        return var0;\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x1b4d;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x1b63;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        var0 = var3;\n        var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0;\n        var temp1 = var1;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var0 = temp3;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var3 = 0x1cb3;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_1D10(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1D10(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n    \n        if (msg.value <= 0x0de0b6b3a7640000) {\n        label_1D5C:\n            var1 = msg.sender;\n            var var9 = 0x1d6d;\n            var var10 = arg0;\n            var var11 = 0xff & 0x0a;\n            var9 = func_2145(var10, var11);\n            var temp0 = var9;\n            var2 = temp0;\n            var9 = 0x1d7a;\n            var10 = var2;\n            var11 = 0x03;\n            var9 = func_2145(var10, var11);\n            var temp1 = var9;\n            var3 = temp1;\n            var9 = 0x1d86;\n            var10 = var2;\n            var11 = var3;\n            var9 = func_210E(var10, var11);\n            var4 = var9;\n            var9 = 0x1d92;\n            var10 = arg0;\n            var11 = var2;\n            var9 = func_210E(var10, var11);\n            var temp2 = var9;\n            var5 = temp2;\n            var9 = 0x1d9d;\n            var10 = var5;\n            var9 = func_2160(var10);\n            var6 = var9;\n            var7 = var4 * 0x010000000000000000;\n            var temp3 = var6 > 0x00;\n            var9 = temp3;\n        \n            if (!var9) {\n            label_1DC9:\n            \n                if (!var9) { revert(memory[0x00:0x00]); }\n            \n                var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n            \n                if (var9) {\n                    var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                \n                    if (!var9) { goto label_1E8A; }\n                    else { goto label_1E44; }\n                } else if (!var9) {\n                label_1E8A:\n                \n                    if (!var9) {\n                    label_1F20:\n                        var9 = 0x1f2a;\n                        var10 = var4;\n                        var11 = var3;\n                        var9 = func_2127(var10, var11);\n                        var4 = var9;\n                        var7 = var4 * 0x010000000000000000;\n                    \n                        if (storage[0x08] <= 0x00) {\n                        label_1FA6:\n                            storage[0x08] = var6;\n                            var9 = 0x1ff7;\n                            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                            var10 = storage[keccak256(memory[0x00:0x40])];\n                            var11 = var6;\n                            var9 = func_2127(var10, var11);\n                        \n                        label_1FF7:\n                            var temp4 = var1;\n                            memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                            storage[keccak256(memory[0x00:0x40])] = var9;\n                            var temp5 = var6;\n                            memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x07;\n                            var temp6 = keccak256(memory[0x00:0x40]);\n                            storage[temp6] = storage[temp6] + (storage[0x0a] * temp5 - var7);\n                            var temp7 = memory[0x40:0x60];\n                            memory[temp7:temp7 + 0x20] = arg0;\n                            var temp8 = temp7 + 0x20;\n                            memory[temp8:temp8 + 0x20] = temp5;\n                            var temp9 = memory[0x40:0x60];\n                            log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-11] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                            return temp5;\n                        } else {\n                        label_1F47:\n                            var9 = 0x1f52;\n                            var10 = storage[0x08];\n                            var11 = var6;\n                            var9 = func_2127(var10, var11);\n                            storage[0x08] = var9;\n                            var9 = storage[0x08];\n                            var10 = var4 * 0x010000000000000000;\n                        \n                            if (!var9) { assert(); }\n                        \n                            storage[0x0a] = storage[0x0a] + var10 / var9;\n                            var9 = storage[0x08];\n                            var10 = var4 * 0x010000000000000000;\n                        \n                            if (!var9) { assert(); }\n                        \n                            var temp10 = var7;\n                            var7 = temp10 - (temp10 - var6 * (var10 / var9));\n                            var9 = 0x1ff7;\n                            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                            var10 = storage[keccak256(memory[0x00:0x40])];\n                            var11 = var6;\n                            var9 = func_2127(var10, var11);\n                            goto label_1FF7;\n                        }\n                    } else {\n                    label_1E90:\n                        var9 = 0x1ed8;\n                        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x06;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = var3;\n                        var9 = func_2127(var10, var11);\n                        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x06;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                    \n                        if (storage[0x08] <= 0x00) { goto label_1FA6; }\n                        else { goto label_1F47; }\n                    }\n                } else {\n                label_1E44:\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_1F20; }\n                    else { goto label_1E90; }\n                }\n            } else {\n                var9 = storage[0x08];\n                var10 = 0x1dc7;\n                var11 = var6;\n                var var12 = storage[0x08];\n                var10 = func_2127(var11, var12);\n                var9 = var10 > var9;\n                goto label_1DC9;\n            }\n        } else if (address(this).balance < 0x8ac7230489e80000) { goto label_1D5C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_210E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_2127(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_2145(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_2160(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var3 = 0x00;\n        var temp0 = 0x174876e800 * 0x0de0b6b3a7640000;\n        var var1 = temp0;\n        var temp1 = storage[0x08] + storage[0x09];\n        var var2 = temp1;\n        var var4 = var2;\n        var var5 = 0x02540be400;\n        var var6 = 0x21da;\n        var var7 = 0x21d4;\n        var var8 = var1 ** 0x02 + arg0 * 0x0de0b6b3a7640000 * 0x02 * 0x02540be400 * 0x0de0b6b3a7640000 + var4 ** 0x02 * 0x02540be400 ** 0x02 + var1 * 0x02 * 0x02540be400 * var4;\n        var7 = func_22A1(var8);\n        var6 = func_21D4(var1, var7);\n    \n        if (var5) { return var6 / var5 - var4; }\n        else { assert(); }\n    }\n    \n    function func_21D4(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_210E(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_21F2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var3 = 0x00;\n        var var1 = arg0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x08] + storage[0x09] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x228a;\n        var var6 = var1 - 0x0de0b6b3a7640000;\n        var var7 = 0x02540be400;\n        var var8 = 0x0de0b6b3a7640000;\n        var var9 = var2;\n    \n        if (!var8) { assert(); }\n    \n        var5 = func_2248(var1, var6, var7, var8, var9);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_2248(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        arg1 = (arg4 / arg3 * 0x02540be400 + 0x174876e800) - arg2 * arg1;\n        arg2 = 0x02;\n        arg3 = 0x0de0b6b3a7640000;\n        var temp0 = arg0;\n        arg4 = temp0 ** 0x02 - temp0;\n    \n        if (!arg3) { assert(); }\n    \n        arg3 = arg4 / arg3 * 0x02540be400;\n    \n        if (!arg2) { assert(); }\n    \n        arg2 = arg3 / arg2;\n        r0 = func_210E(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_22A1(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = arg0 + 0x01;\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_22E6:\n            return var0;\n        } else {\n        label_22C3:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_22E6; }\n            else { goto label_22C3; }\n        }\n    }\n    \n    function func_22EC(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var var1 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n    \n        if (0x1f < arg2) {\n            var temp2 = arg2;\n            storage[arg0] = temp2 + temp2 + 0x01;\n        \n            if (!temp2) {\n            label_235B:\n                var temp3 = arg1;\n                arg1 = 0x2368;\n                var0 = var0;\n                arg2 = temp3;\n                arg1 = func_236C(arg2, var0);\n                return arg0;\n            } else {\n                var temp4 = arg2;\n                var temp5 = var1;\n                arg2 = temp5;\n                var1 = arg2 + temp4;\n            \n                if (var1 <= arg2) {\n                label_235A:\n                    goto label_235B;\n                } else {\n                label_2348:\n                    var temp6 = arg2;\n                    var temp7 = var0;\n                    storage[temp7] = memory[temp6:temp6 + 0x20];\n                    arg2 = temp6 + 0x20;\n                    var1 = var1;\n                    var0 = temp7 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_235A; }\n                    else { goto label_2348; }\n                }\n            }\n        } else {\n            var temp8 = arg2;\n            storage[arg0] = temp8 + temp8 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_235B;\n        }\n    }\n    \n    function func_236C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x238e;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_238A(arg1, var0); }\n    \n    label_237B:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_237B; }\n    \n        arg0 = func_238A(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_238A(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_015E:\n            var var0 = 0x0169;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = func_085E(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ad;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = dividendsOf(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d8;\n                var2 = name();\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp3 - var4;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var6 = temp4 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0218:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_0206:\n                    var temp10 = var11;\n                    memory[var9 + temp10:var9 + temp10 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0218; }\n                    else { goto label_0206; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x027e;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateTokensReceived(var2);\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a9;\n                var1 = totalSupply();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02ea;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0315;\n                var2 = decimals();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x392efb52) {\n                // Dispatch table entry for administrators(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0360;\n                var2 = msg.data[0x04:0x24];\n                var2 = administrators(var2);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = !!var2;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038f;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03a6;\n                var1 = sellPrice();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x523191bf) {\n                // Dispatch table entry for 0x523191bf (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03fd;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = func_0EF2(var2);\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0428;\n                var2 = stakingRequirement();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var2;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x046b;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var1;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0496;\n                var1 = totalEthereumBalance();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var1;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ed;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var1;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x052e;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0545;\n                var1 = buyPrice();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var1;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x89135ae9) {\n                // Dispatch table entry for setAdministrator(bytes32,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0596;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ad;\n                var1 = myTokens();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var1;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d8;\n                var2 = symbol();\n                var temp37 = memory[0x40:0x60];\n                var3 = temp37;\n                var4 = var3;\n                var temp38 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp38 - var4;\n                var temp39 = var2;\n                memory[temp38:temp38 + 0x20] = memory[temp39:temp39 + 0x20];\n                var5 = temp38 + 0x20;\n                var6 = temp39 + 0x20;\n                var7 = memory[temp39:temp39 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0618:\n                    var temp40 = var7;\n                    var5 = temp40 + var5;\n                    var6 = temp40 & 0x1f;\n                \n                    if (!var6) {\n                        var temp41 = memory[0x40:0x60];\n                        return memory[temp41:temp41 + var5 - temp41];\n                    } else {\n                        var temp42 = var6;\n                        var temp43 = var5 - temp42;\n                        memory[temp43:temp43 + 0x20] = ~(0x0100 ** (0x20 - temp42) - 0x01) & memory[temp43:temp43 + 0x20];\n                        var temp44 = memory[0x40:0x60];\n                        return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n                    }\n                } else {\n                label_0606:\n                    var temp45 = var11;\n                    memory[var9 + temp45:var9 + temp45 + 0x20] = memory[var10 + temp45:var10 + temp45 + 0x20];\n                    var11 = temp45 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0618; }\n                    else { goto label_0606; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x069e;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = !!var1;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x071f;\n                var temp48 = msg.data[0x04:0x24] + 0x04;\n                var temp49 = msg.data[temp48:temp48 + 0x20];\n                var temp50 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp50 + (temp49 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp50:temp50 + 0x20] = temp49;\n                memory[temp50 + 0x20:temp50 + 0x20 + temp49] = msg.data[temp48 + 0x20:temp48 + 0x20 + temp49];\n                var2 = temp50;\n                setSymbol(var2);\n                stop();\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0788;\n                var temp51 = msg.data[0x04:0x24] + 0x04;\n                var temp52 = msg.data[temp51:temp51 + 0x20];\n                var temp53 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp53 + (temp52 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp53:temp53 + 0x20] = temp52;\n                memory[temp53 + 0x20:temp53 + 0x20 + temp52] = msg.data[temp51 + 0x20:temp51 + 0x20 + temp52];\n                var2 = temp53;\n                setName(var2);\n                stop();\n            } else if (var0 == 0xd6b0f484) {\n                // Dispatch table entry for disableWhitelist()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x079f;\n                var1 = disableWhitelist();\n                var temp54 = memory[0x40:0x60];\n                memory[temp54:temp54 + 0x20] = !!var1;\n                var temp55 = memory[0x40:0x60];\n                return memory[temp55:temp55 + (temp54 + 0x20) - temp55];\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07e4;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07fb;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x0831;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = buy(var2);\n                var temp56 = memory[0x40:0x60];\n                memory[temp56:temp56 + 0x20] = var1;\n                var temp57 = memory[0x40:0x60];\n                return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x085c;\n                reinvest();\n                stop();\n            } else { goto label_015E; }\n        }\n    }\n    \n    function func_085E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var1 = msg.sender;\n        var var3 = msg.value < address(this).balance;\n    \n        if (!var3) {\n            if (!var3) {\n            label_08CE:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0b;\n                var3 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x00;\n            \n                if (!var3) {\n                label_0941:\n                \n                    if (var3) { revert(memory[0x00:0x00]); }\n                \n                label_094B:\n                    var3 = 0x0955;\n                    var var4 = msg.value;\n                    var var5 = arg1;\n                    var3 = func_1D10(var4, var5);\n                    var2 = var3;\n                    memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x03;\n                \n                    if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x01) {\n                    label_0AED:\n                        return var2;\n                    } else {\n                        var3 = 0x09bc;\n                        var4 = storage[0x08];\n                        var5 = var2;\n                        var3 = func_210E(var4, var5);\n                        storage[0x08] = var3;\n                        var3 = 0x0a0b;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x04;\n                        var4 = storage[keccak256(memory[0x00:0x40])];\n                        var5 = var2;\n                        var3 = func_210E(var4, var5);\n                        var temp0 = var1;\n                        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x04;\n                        storage[keccak256(memory[0x00:0x40])] = var3;\n                        var3 = 0x0a97;\n                        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var4 = storage[keccak256(memory[0x00:0x40])];\n                        var5 = var2;\n                        var3 = func_2127(var4, var5);\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40])] = var3;\n                        var3 = 0x0ae6;\n                        var4 = storage[0x09];\n                        var5 = var2;\n                        var3 = func_2127(var4, var5);\n                        storage[0x09] = var3;\n                        goto label_0AED;\n                    }\n                } else {\n                label_0929:\n                \n                    if (!!(storage[0x0c] & 0xff) != !!0x01) { goto label_094B; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_08B3:\n                storage[0x0c] = (storage[0x0c] & ~0xff) | 0x00;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0b;\n                var3 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x00;\n            \n                if (!var3) { goto label_0941; }\n                else { goto label_0929; }\n            }\n        } else if (address(this).balance - msg.value < 0x6124fee993bc0000) { goto label_08CE; }\n        else { goto label_08B3; }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x010000000000000000;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var var2 = storage[0x0a] * storage[keccak256(memory[0x00:0x40])] - temp1;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0C30:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0C27; }\n        \n        label_0C13:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0C13; }\n        \n        label_0C27:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0C30;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0C30;\n        }\n    }\n    \n    function calculateTokensReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x0c4c;\n        var var5 = arg0;\n        var var6 = 0xff & 0x0a;\n        var4 = func_2145(var5, var6);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x0c58;\n        var5 = arg0;\n        var6 = var1;\n        var4 = func_210E(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x0c63;\n        var5 = var2;\n        return func_2160(var5);\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x08] + storage[0x09]; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 > storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x0c9e;\n        var var5 = arg0;\n        var4 = func_21F2(var5);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x0cae;\n        var5 = var1;\n        var var6 = 0xff & 0x0a;\n        var4 = func_2145(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x0cba;\n        var5 = var1;\n        var6 = var2;\n        return func_210E(var5, var6);\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x0cfb;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x0d14;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var2;\n        var temp1 = var0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var1 = temp3;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(temp1 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var1 * 0x08fc).value(var1)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n        var2 = !temp5;\n    \n        if (!var2) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var1;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] + storage[0x09] != 0x00) {\n            var var4 = 0x0eca;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_21F2(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0eda;\n            var5 = var1;\n            var var6 = 0xff & 0x0a;\n            var4 = func_2145(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x0ee6;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_210E(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0EEC:\n            return var0;\n        } else {\n            var0 = 0x174876e800 - 0x02540be400;\n            goto label_0EEC;\n        }\n    }\n    \n    function func_0EF2(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x02]; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x0f72;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x0f24;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x01) {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            return storage[keccak256(memory[0x00:0x40])];\n        } else {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            return storage[keccak256(memory[0x00:0x40])];\n        }\n    }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = arg0;\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] + storage[0x09] != 0x00) {\n            var var4 = 0x1158;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_21F2(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x1168;\n            var5 = var1;\n            var var6 = 0xff & 0x0a;\n            var4 = func_2145(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x1174;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_2127(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_117A:\n            return var0;\n        } else {\n            var0 = 0x174876e800 + 0x02540be400;\n            goto label_117A;\n        }\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0d;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = !!arg1 | (storage[temp2] & ~0xff);\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x1250;\n        var var3 = var1;\n        return balanceOf(var3);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_12EC:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_12E3; }\n        \n        label_12CF:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_12CF; }\n        \n        label_12E3:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_12EC;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_12EC;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x1301;\n        var3 = myTokens();\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var2 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x00;\n    \n        if (var2) {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x03;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x00) { goto label_13CB; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var2) {\n        label_13CB:\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n        \n            if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x00;\n            var3 = 0x1425;\n            var var4 = 0x01;\n            var3 = myDividends(var4);\n        \n            if (var3 <= var2) {\n            label_1434:\n                var2 = 0x147d;\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var4 = arg1;\n                var2 = func_210E(var3, var4);\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var2 = 0x1509;\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var4 = arg1;\n                var2 = func_2127(var3, var4);\n                var temp0 = arg0;\n                memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var temp1 = arg1;\n                var temp2 = var1;\n                memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] - storage[0x0a] * temp1;\n                memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] + storage[0x0a] * temp1;\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = temp1;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n                var2 = 0x1433;\n                withdraw();\n                goto label_1434;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setSymbol(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        var var1 = 0x16fd;\n        var var2 = 0x01;\n        var var4 = memory[temp2:temp2 + 0x20];\n        var var3 = temp2 + 0x20;\n        var1 = func_22EC(var2, var3, var4);\n    }\n    \n    function setName(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        var var1 = 0x17a1;\n        var var2 = 0x00;\n        var var4 = memory[temp2:temp2 + 0x20];\n        var var3 = temp2 + 0x20;\n        var1 = func_22EC(var2, var3, var4);\n    }\n    \n    function disableWhitelist() returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0c] = (storage[0x0c] & ~0xff) | 0x00;\n        return storage[0x0c] & 0xff;\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x184a;\n        var7 = myTokens();\n    \n        if (var7 <= var6) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var6 = 0x1912;\n        var7 = var1;\n        var6 = func_21F2(var7);\n        var temp0 = var6;\n        var2 = temp0;\n        var6 = 0x1922;\n        var7 = var2;\n        var var8 = 0xff & 0x0a;\n        var6 = func_2145(var7, var8);\n        var temp1 = var6;\n        var3 = temp1;\n        var6 = 0x192e;\n        var7 = var2;\n        var8 = var3;\n        var6 = func_210E(var7, var8);\n        var4 = var6;\n        var6 = 0x193c;\n        var7 = storage[0x08];\n        var8 = var1;\n        var6 = func_210E(var7, var8);\n        storage[0x08] = var6;\n        var6 = 0x198b;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var8 = var1;\n        var6 = func_210E(var7, var8);\n        var temp2 = var0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        var5 = storage[0x0a] * var1 + var4 * 0x010000000000000000;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] - var5;\n    \n        if (storage[0x08] <= 0x00) {\n        label_1A65:\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = var4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n            var6 = 0x1a5e;\n            var7 = storage[0x0a];\n            var8 = storage[0x08];\n            var var9 = var3 * 0x010000000000000000;\n        \n            if (!var8) { assert(); }\n        \n            var6 = func_1A58(var7, var8, var9);\n            storage[0x0a] = var6;\n            goto label_1A65;\n        }\n    }\n    \n    function func_1A58(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_2127(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_1B1F:\n            var var2 = 0x1b27;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x1b1e;\n            var var3 = var1;\n            sell(var3);\n            goto label_1B1F;\n        }\n    }\n    \n    function buy(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1b37;\n        var var2 = msg.value;\n        var var3 = arg0;\n        var1 = func_085E(var2, var3);\n        return var0;\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x1b4d;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x1b63;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        var0 = var3;\n        var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0;\n        var temp1 = var1;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var0 = temp3;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var3 = 0x1cb3;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_1D10(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1D10(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n    \n        if (msg.value <= 0x0de0b6b3a7640000) {\n        label_1D5C:\n            var1 = msg.sender;\n            var var9 = 0x1d6d;\n            var var10 = arg0;\n            var var11 = 0xff & 0x0a;\n            var9 = func_2145(var10, var11);\n            var temp0 = var9;\n            var2 = temp0;\n            var9 = 0x1d7a;\n            var10 = var2;\n            var11 = 0x03;\n            var9 = func_2145(var10, var11);\n            var temp1 = var9;\n            var3 = temp1;\n            var9 = 0x1d86;\n            var10 = var2;\n            var11 = var3;\n            var9 = func_210E(var10, var11);\n            var4 = var9;\n            var9 = 0x1d92;\n            var10 = arg0;\n            var11 = var2;\n            var9 = func_210E(var10, var11);\n            var temp2 = var9;\n            var5 = temp2;\n            var9 = 0x1d9d;\n            var10 = var5;\n            var9 = func_2160(var10);\n            var6 = var9;\n            var7 = var4 * 0x010000000000000000;\n            var temp3 = var6 > 0x00;\n            var9 = temp3;\n        \n            if (!var9) {\n            label_1DC9:\n            \n                if (!var9) { revert(memory[0x00:0x00]); }\n            \n                var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n            \n                if (var9) {\n                    var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                \n                    if (!var9) { goto label_1E8A; }\n                    else { goto label_1E44; }\n                } else if (!var9) {\n                label_1E8A:\n                \n                    if (!var9) {\n                    label_1F20:\n                        var9 = 0x1f2a;\n                        var10 = var4;\n                        var11 = var3;\n                        var9 = func_2127(var10, var11);\n                        var4 = var9;\n                        var7 = var4 * 0x010000000000000000;\n                    \n                        if (storage[0x08] <= 0x00) {\n                        label_1FA6:\n                            storage[0x08] = var6;\n                            var9 = 0x1ff7;\n                            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                            var10 = storage[keccak256(memory[0x00:0x40])];\n                            var11 = var6;\n                            var9 = func_2127(var10, var11);\n                        \n                        label_1FF7:\n                            var temp4 = var1;\n                            memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                            storage[keccak256(memory[0x00:0x40])] = var9;\n                            var temp5 = var6;\n                            memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x07;\n                            var temp6 = keccak256(memory[0x00:0x40]);\n                            storage[temp6] = storage[temp6] + (storage[0x0a] * temp5 - var7);\n                            var temp7 = memory[0x40:0x60];\n                            memory[temp7:temp7 + 0x20] = arg0;\n                            var temp8 = temp7 + 0x20;\n                            memory[temp8:temp8 + 0x20] = temp5;\n                            var temp9 = memory[0x40:0x60];\n                            log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-11] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                            return temp5;\n                        } else {\n                        label_1F47:\n                            var9 = 0x1f52;\n                            var10 = storage[0x08];\n                            var11 = var6;\n                            var9 = func_2127(var10, var11);\n                            storage[0x08] = var9;\n                            var9 = storage[0x08];\n                            var10 = var4 * 0x010000000000000000;\n                        \n                            if (!var9) { assert(); }\n                        \n                            storage[0x0a] = storage[0x0a] + var10 / var9;\n                            var9 = storage[0x08];\n                            var10 = var4 * 0x010000000000000000;\n                        \n                            if (!var9) { assert(); }\n                        \n                            var temp10 = var7;\n                            var7 = temp10 - (temp10 - var6 * (var10 / var9));\n                            var9 = 0x1ff7;\n                            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                            var10 = storage[keccak256(memory[0x00:0x40])];\n                            var11 = var6;\n                            var9 = func_2127(var10, var11);\n                            goto label_1FF7;\n                        }\n                    } else {\n                    label_1E90:\n                        var9 = 0x1ed8;\n                        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x06;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = var3;\n                        var9 = func_2127(var10, var11);\n                        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x06;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                    \n                        if (storage[0x08] <= 0x00) { goto label_1FA6; }\n                        else { goto label_1F47; }\n                    }\n                } else {\n                label_1E44:\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_1F20; }\n                    else { goto label_1E90; }\n                }\n            } else {\n                var9 = storage[0x08];\n                var10 = 0x1dc7;\n                var11 = var6;\n                var var12 = storage[0x08];\n                var10 = func_2127(var11, var12);\n                var9 = var10 > var9;\n                goto label_1DC9;\n            }\n        } else if (address(this).balance < 0x8ac7230489e80000) { goto label_1D5C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_210E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_2127(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_2145(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_2160(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var3 = 0x00;\n        var temp0 = 0x174876e800 * 0x0de0b6b3a7640000;\n        var var1 = temp0;\n        var temp1 = storage[0x08] + storage[0x09];\n        var var2 = temp1;\n        var var4 = var2;\n        var var5 = 0x02540be400;\n        var var6 = 0x21da;\n        var var7 = 0x21d4;\n        var var8 = var1 ** 0x02 + arg0 * 0x0de0b6b3a7640000 * 0x02 * 0x02540be400 * 0x0de0b6b3a7640000 + var4 ** 0x02 * 0x02540be400 ** 0x02 + var1 * 0x02 * 0x02540be400 * var4;\n        var7 = func_22A1(var8);\n        var6 = func_21D4(var1, var7);\n    \n        if (var5) { return var6 / var5 - var4; }\n        else { assert(); }\n    }\n    \n    function func_21D4(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_210E(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_21F2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var3 = 0x00;\n        var var1 = arg0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x08] + storage[0x09] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x228a;\n        var var6 = var1 - 0x0de0b6b3a7640000;\n        var var7 = 0x02540be400;\n        var var8 = 0x0de0b6b3a7640000;\n        var var9 = var2;\n    \n        if (!var8) { assert(); }\n    \n        var5 = func_2248(var1, var6, var7, var8, var9);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_2248(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        arg1 = (arg4 / arg3 * 0x02540be400 + 0x174876e800) - arg2 * arg1;\n        arg2 = 0x02;\n        arg3 = 0x0de0b6b3a7640000;\n        var temp0 = arg0;\n        arg4 = temp0 ** 0x02 - temp0;\n    \n        if (!arg3) { assert(); }\n    \n        arg3 = arg4 / arg3 * 0x02540be400;\n    \n        if (!arg2) { assert(); }\n    \n        arg2 = arg3 / arg2;\n        r0 = func_210E(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_22A1(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = arg0 + 0x01;\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_22E6:\n            return var0;\n        } else {\n        label_22C3:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_22E6; }\n            else { goto label_22C3; }\n        }\n    }\n    \n    function func_22EC(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var var1 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n    \n        if (0x1f < arg2) {\n            var temp2 = arg2;\n            storage[arg0] = temp2 + temp2 + 0x01;\n        \n            if (!temp2) {\n            label_235B:\n                var temp3 = arg1;\n                arg1 = 0x2368;\n                var0 = var0;\n                arg2 = temp3;\n                arg1 = func_236C(arg2, var0);\n                return arg0;\n            } else {\n                var temp4 = arg2;\n                var temp5 = var1;\n                arg2 = temp5;\n                var1 = arg2 + temp4;\n            \n                if (var1 <= arg2) {\n                label_235A:\n                    goto label_235B;\n                } else {\n                label_2348:\n                    var temp6 = arg2;\n                    var temp7 = var0;\n                    storage[temp7] = memory[temp6:temp6 + 0x20];\n                    arg2 = temp6 + 0x20;\n                    var1 = var1;\n                    var0 = temp7 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_235A; }\n                    else { goto label_2348; }\n                }\n            }\n        } else {\n            var temp8 = arg2;\n            storage[arg0] = temp8 + temp8 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_235B;\n        }\n    }\n    \n    function func_236C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x238e;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_238A(arg1, var0); }\n    \n    label_237B:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_237B; }\n    \n        arg0 = func_238A(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_238A(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_015E:\n            var var0 = 0x0169;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = func_085E(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ad;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = dividendsOf(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d8;\n                var2 = name();\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp3 - var4;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var6 = temp4 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0218:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_0206:\n                    var temp10 = var11;\n                    memory[var9 + temp10:var9 + temp10 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0218; }\n                    else { goto label_0206; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x027e;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateTokensReceived(var2);\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a9;\n                var1 = totalSupply();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02ea;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0315;\n                var2 = decimals();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x392efb52) {\n                // Dispatch table entry for administrators(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0360;\n                var2 = msg.data[0x04:0x24];\n                var2 = administrators(var2);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = !!var2;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038f;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03a6;\n                var1 = sellPrice();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x523191bf) {\n                // Dispatch table entry for 0x523191bf (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03fd;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = func_0EF2(var2);\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0428;\n                var2 = stakingRequirement();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var2;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x046b;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var1;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0496;\n                var1 = totalEthereumBalance();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var1;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ed;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var1;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x052e;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0545;\n                var1 = buyPrice();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var1;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x89135ae9) {\n                // Dispatch table entry for setAdministrator(bytes32,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0596;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ad;\n                var1 = myTokens();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var1;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d8;\n                var2 = symbol();\n                var temp37 = memory[0x40:0x60];\n                var3 = temp37;\n                var4 = var3;\n                var temp38 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp38 - var4;\n                var temp39 = var2;\n                memory[temp38:temp38 + 0x20] = memory[temp39:temp39 + 0x20];\n                var5 = temp38 + 0x20;\n                var6 = temp39 + 0x20;\n                var7 = memory[temp39:temp39 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0618:\n                    var temp40 = var7;\n                    var5 = temp40 + var5;\n                    var6 = temp40 & 0x1f;\n                \n                    if (!var6) {\n                        var temp41 = memory[0x40:0x60];\n                        return memory[temp41:temp41 + var5 - temp41];\n                    } else {\n                        var temp42 = var6;\n                        var temp43 = var5 - temp42;\n                        memory[temp43:temp43 + 0x20] = ~(0x0100 ** (0x20 - temp42) - 0x01) & memory[temp43:temp43 + 0x20];\n                        var temp44 = memory[0x40:0x60];\n                        return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n                    }\n                } else {\n                label_0606:\n                    var temp45 = var11;\n                    memory[var9 + temp45:var9 + temp45 + 0x20] = memory[var10 + temp45:var10 + temp45 + 0x20];\n                    var11 = temp45 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0618; }\n                    else { goto label_0606; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x069e;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = !!var1;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x071f;\n                var temp48 = msg.data[0x04:0x24] + 0x04;\n                var temp49 = msg.data[temp48:temp48 + 0x20];\n                var temp50 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp50 + (temp49 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp50:temp50 + 0x20] = temp49;\n                memory[temp50 + 0x20:temp50 + 0x20 + temp49] = msg.data[temp48 + 0x20:temp48 + 0x20 + temp49];\n                var2 = temp50;\n                setSymbol(var2);\n                stop();\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0788;\n                var temp51 = msg.data[0x04:0x24] + 0x04;\n                var temp52 = msg.data[temp51:temp51 + 0x20];\n                var temp53 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp53 + (temp52 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp53:temp53 + 0x20] = temp52;\n                memory[temp53 + 0x20:temp53 + 0x20 + temp52] = msg.data[temp51 + 0x20:temp51 + 0x20 + temp52];\n                var2 = temp53;\n                setName(var2);\n                stop();\n            } else if (var0 == 0xd6b0f484) {\n                // Dispatch table entry for disableWhitelist()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x079f;\n                var1 = disableWhitelist();\n                var temp54 = memory[0x40:0x60];\n                memory[temp54:temp54 + 0x20] = !!var1;\n                var temp55 = memory[0x40:0x60];\n                return memory[temp55:temp55 + (temp54 + 0x20) - temp55];\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07e4;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07fb;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x0831;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = buy(var2);\n                var temp56 = memory[0x40:0x60];\n                memory[temp56:temp56 + 0x20] = var1;\n                var temp57 = memory[0x40:0x60];\n                return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x085c;\n                reinvest();\n                stop();\n            } else { goto label_015E; }\n        }\n    }\n    \n    function func_085E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var1 = msg.sender;\n        var var3 = msg.value < address(this).balance;\n    \n        if (!var3) {\n            if (!var3) {\n            label_08CE:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0b;\n                var3 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x00;\n            \n                if (!var3) {\n                label_0941:\n                \n                    if (var3) { revert(memory[0x00:0x00]); }\n                \n                label_094B:\n                    var3 = 0x0955;\n                    var var4 = msg.value;\n                    var var5 = arg1;\n                    var3 = func_1D10(var4, var5);\n                    var2 = var3;\n                    memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x03;\n                \n                    if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x01) {\n                    label_0AED:\n                        return var2;\n                    } else {\n                        var3 = 0x09bc;\n                        var4 = storage[0x08];\n                        var5 = var2;\n                        var3 = func_210E(var4, var5);\n                        storage[0x08] = var3;\n                        var3 = 0x0a0b;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x04;\n                        var4 = storage[keccak256(memory[0x00:0x40])];\n                        var5 = var2;\n                        var3 = func_210E(var4, var5);\n                        var temp0 = var1;\n                        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x04;\n                        storage[keccak256(memory[0x00:0x40])] = var3;\n                        var3 = 0x0a97;\n                        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var4 = storage[keccak256(memory[0x00:0x40])];\n                        var5 = var2;\n                        var3 = func_2127(var4, var5);\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40])] = var3;\n                        var3 = 0x0ae6;\n                        var4 = storage[0x09];\n                        var5 = var2;\n                        var3 = func_2127(var4, var5);\n                        storage[0x09] = var3;\n                        goto label_0AED;\n                    }\n                } else {\n                label_0929:\n                \n                    if (!!(storage[0x0c] & 0xff) != !!0x01) { goto label_094B; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_08B3:\n                storage[0x0c] = (storage[0x0c] & ~0xff) | 0x00;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0b;\n                var3 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x00;\n            \n                if (!var3) { goto label_0941; }\n                else { goto label_0929; }\n            }\n        } else if (address(this).balance - msg.value < 0x6124fee993bc0000) { goto label_08CE; }\n        else { goto label_08B3; }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x010000000000000000;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var var2 = storage[0x0a] * storage[keccak256(memory[0x00:0x40])] - temp1;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0C30:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0C27; }\n        \n        label_0C13:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0C13; }\n        \n        label_0C27:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0C30;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0C30;\n        }\n    }\n    \n    function calculateTokensReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x0c4c;\n        var var5 = arg0;\n        var var6 = 0xff & 0x0a;\n        var4 = func_2145(var5, var6);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x0c58;\n        var5 = arg0;\n        var6 = var1;\n        var4 = func_210E(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x0c63;\n        var5 = var2;\n        return func_2160(var5);\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x08] + storage[0x09]; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 > storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x0c9e;\n        var var5 = arg0;\n        var4 = func_21F2(var5);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x0cae;\n        var5 = var1;\n        var var6 = 0xff & 0x0a;\n        var4 = func_2145(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x0cba;\n        var5 = var1;\n        var6 = var2;\n        return func_210E(var5, var6);\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x0cfb;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x0d14;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var2;\n        var temp1 = var0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var1 = temp3;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(temp1 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var1 * 0x08fc).value(var1)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n        var2 = !temp5;\n    \n        if (!var2) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var1;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] + storage[0x09] != 0x00) {\n            var var4 = 0x0eca;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_21F2(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0eda;\n            var5 = var1;\n            var var6 = 0xff & 0x0a;\n            var4 = func_2145(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x0ee6;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_210E(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0EEC:\n            return var0;\n        } else {\n            var0 = 0x174876e800 - 0x02540be400;\n            goto label_0EEC;\n        }\n    }\n    \n    function func_0EF2(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x02]; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x0f72;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x0f24;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x01) {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            return storage[keccak256(memory[0x00:0x40])];\n        } else {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            return storage[keccak256(memory[0x00:0x40])];\n        }\n    }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = arg0;\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] + storage[0x09] != 0x00) {\n            var var4 = 0x1158;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_21F2(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x1168;\n            var5 = var1;\n            var var6 = 0xff & 0x0a;\n            var4 = func_2145(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x1174;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_2127(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_117A:\n            return var0;\n        } else {\n            var0 = 0x174876e800 + 0x02540be400;\n            goto label_117A;\n        }\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0d;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = !!arg1 | (storage[temp2] & ~0xff);\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x1250;\n        var var3 = var1;\n        return balanceOf(var3);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_12EC:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_12E3; }\n        \n        label_12CF:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_12CF; }\n        \n        label_12E3:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_12EC;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_12EC;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x1301;\n        var3 = myTokens();\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var2 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x00;\n    \n        if (var2) {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x03;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x00) { goto label_13CB; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var2) {\n        label_13CB:\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n        \n            if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x00;\n            var3 = 0x1425;\n            var var4 = 0x01;\n            var3 = myDividends(var4);\n        \n            if (var3 <= var2) {\n            label_1434:\n                var2 = 0x147d;\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var4 = arg1;\n                var2 = func_210E(var3, var4);\n                memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var2 = 0x1509;\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var4 = arg1;\n                var2 = func_2127(var3, var4);\n                var temp0 = arg0;\n                memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var temp1 = arg1;\n                var temp2 = var1;\n                memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] - storage[0x0a] * temp1;\n                memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x07;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] + storage[0x0a] * temp1;\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = temp1;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n                var2 = 0x1433;\n                withdraw();\n                goto label_1434;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setSymbol(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        var var1 = 0x16fd;\n        var var2 = 0x01;\n        var var4 = memory[temp2:temp2 + 0x20];\n        var var3 = temp2 + 0x20;\n        var1 = func_22EC(var2, var3, var4);\n    }\n    \n    function setName(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0d;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        var var1 = 0x17a1;\n        var var2 = 0x00;\n        var var4 = memory[temp2:temp2 + 0x20];\n        var var3 = temp2 + 0x20;\n        var1 = func_22EC(var2, var3, var4);\n    }\n    \n    function disableWhitelist() returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0c] = (storage[0x0c] & ~0xff) | 0x00;\n        return storage[0x0c] & 0xff;\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x184a;\n        var7 = myTokens();\n    \n        if (var7 <= var6) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var6 = 0x1912;\n        var7 = var1;\n        var6 = func_21F2(var7);\n        var temp0 = var6;\n        var2 = temp0;\n        var6 = 0x1922;\n        var7 = var2;\n        var var8 = 0xff & 0x0a;\n        var6 = func_2145(var7, var8);\n        var temp1 = var6;\n        var3 = temp1;\n        var6 = 0x192e;\n        var7 = var2;\n        var8 = var3;\n        var6 = func_210E(var7, var8);\n        var4 = var6;\n        var6 = 0x193c;\n        var7 = storage[0x08];\n        var8 = var1;\n        var6 = func_210E(var7, var8);\n        storage[0x08] = var6;\n        var6 = 0x198b;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var8 = var1;\n        var6 = func_210E(var7, var8);\n        var temp2 = var0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        var5 = storage[0x0a] * var1 + var4 * 0x010000000000000000;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] - var5;\n    \n        if (storage[0x08] <= 0x00) {\n        label_1A65:\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1;\n            var temp5 = temp4 + 0x20;\n            memory[temp5:temp5 + 0x20] = var4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n            var6 = 0x1a5e;\n            var7 = storage[0x0a];\n            var8 = storage[0x08];\n            var var9 = var3 * 0x010000000000000000;\n        \n            if (!var8) { assert(); }\n        \n            var6 = func_1A58(var7, var8, var9);\n            storage[0x0a] = var6;\n            goto label_1A65;\n        }\n    }\n    \n    function func_1A58(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_2127(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_1B1F:\n            var var2 = 0x1b27;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x1b1e;\n            var var3 = var1;\n            sell(var3);\n            goto label_1B1F;\n        }\n    }\n    \n    function buy(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1b37;\n        var var2 = msg.value;\n        var var3 = arg0;\n        var1 = func_085E(var2, var3);\n        return var0;\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x1b4d;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x1b63;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        var0 = var3;\n        var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0;\n        var temp1 = var1;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var0 = temp3;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var3 = 0x1cb3;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_1D10(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1D10(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n    \n        if (msg.value <= 0x0de0b6b3a7640000) {\n        label_1D5C:\n            var1 = msg.sender;\n            var var9 = 0x1d6d;\n            var var10 = arg0;\n            var var11 = 0xff & 0x0a;\n            var9 = func_2145(var10, var11);\n            var temp0 = var9;\n            var2 = temp0;\n            var9 = 0x1d7a;\n            var10 = var2;\n            var11 = 0x03;\n            var9 = func_2145(var10, var11);\n            var temp1 = var9;\n            var3 = temp1;\n            var9 = 0x1d86;\n            var10 = var2;\n            var11 = var3;\n            var9 = func_210E(var10, var11);\n            var4 = var9;\n            var9 = 0x1d92;\n            var10 = arg0;\n            var11 = var2;\n            var9 = func_210E(var10, var11);\n            var temp2 = var9;\n            var5 = temp2;\n            var9 = 0x1d9d;\n            var10 = var5;\n            var9 = func_2160(var10);\n            var6 = var9;\n            var7 = var4 * 0x010000000000000000;\n            var temp3 = var6 > 0x00;\n            var9 = temp3;\n        \n            if (!var9) {\n            label_1DC9:\n            \n                if (!var9) { revert(memory[0x00:0x00]); }\n            \n                var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n            \n                if (var9) {\n                    var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                \n                    if (!var9) { goto label_1E8A; }\n                    else { goto label_1E44; }\n                } else if (!var9) {\n                label_1E8A:\n                \n                    if (!var9) {\n                    label_1F20:\n                        var9 = 0x1f2a;\n                        var10 = var4;\n                        var11 = var3;\n                        var9 = func_2127(var10, var11);\n                        var4 = var9;\n                        var7 = var4 * 0x010000000000000000;\n                    \n                        if (storage[0x08] <= 0x00) {\n                        label_1FA6:\n                            storage[0x08] = var6;\n                            var9 = 0x1ff7;\n                            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                            var10 = storage[keccak256(memory[0x00:0x40])];\n                            var11 = var6;\n                            var9 = func_2127(var10, var11);\n                        \n                        label_1FF7:\n                            var temp4 = var1;\n                            memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                            storage[keccak256(memory[0x00:0x40])] = var9;\n                            var temp5 = var6;\n                            memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x07;\n                            var temp6 = keccak256(memory[0x00:0x40]);\n                            storage[temp6] = storage[temp6] + (storage[0x0a] * temp5 - var7);\n                            var temp7 = memory[0x40:0x60];\n                            memory[temp7:temp7 + 0x20] = arg0;\n                            var temp8 = temp7 + 0x20;\n                            memory[temp8:temp8 + 0x20] = temp5;\n                            var temp9 = memory[0x40:0x60];\n                            log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-11] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                            return temp5;\n                        } else {\n                        label_1F47:\n                            var9 = 0x1f52;\n                            var10 = storage[0x08];\n                            var11 = var6;\n                            var9 = func_2127(var10, var11);\n                            storage[0x08] = var9;\n                            var9 = storage[0x08];\n                            var10 = var4 * 0x010000000000000000;\n                        \n                            if (!var9) { assert(); }\n                        \n                            storage[0x0a] = storage[0x0a] + var10 / var9;\n                            var9 = storage[0x08];\n                            var10 = var4 * 0x010000000000000000;\n                        \n                            if (!var9) { assert(); }\n                        \n                            var temp10 = var7;\n                            var7 = temp10 - (temp10 - var6 * (var10 / var9));\n                            var9 = 0x1ff7;\n                            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            memory[0x20:0x40] = 0x04;\n                            var10 = storage[keccak256(memory[0x00:0x40])];\n                            var11 = var6;\n                            var9 = func_2127(var10, var11);\n                            goto label_1FF7;\n                        }\n                    } else {\n                    label_1E90:\n                        var9 = 0x1ed8;\n                        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x06;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = var3;\n                        var9 = func_2127(var10, var11);\n                        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x06;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                    \n                        if (storage[0x08] <= 0x00) { goto label_1FA6; }\n                        else { goto label_1F47; }\n                    }\n                } else {\n                label_1E44:\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_1F20; }\n                    else { goto label_1E90; }\n                }\n            } else {\n                var9 = storage[0x08];\n                var10 = 0x1dc7;\n                var11 = var6;\n                var var12 = storage[0x08];\n                var10 = func_2127(var11, var12);\n                var9 = var10 > var9;\n                goto label_1DC9;\n            }\n        } else if (address(this).balance < 0x8ac7230489e80000) { goto label_1D5C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_210E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_2127(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_2145(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_2160(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var3 = 0x00;\n        var temp0 = 0x174876e800 * 0x0de0b6b3a7640000;\n        var var1 = temp0;\n        var temp1 = storage[0x08] + storage[0x09];\n        var var2 = temp1;\n        var var4 = var2;\n        var var5 = 0x02540be400;\n        var var6 = 0x21da;\n        var var7 = 0x21d4;\n        var var8 = var1 ** 0x02 + arg0 * 0x0de0b6b3a7640000 * 0x02 * 0x02540be400 * 0x0de0b6b3a7640000 + var4 ** 0x02 * 0x02540be400 ** 0x02 + var1 * 0x02 * 0x02540be400 * var4;\n        var7 = func_22A1(var8);\n        var6 = func_21D4(var1, var7);\n    \n        if (var5) { return var6 / var5 - var4; }\n        else { assert(); }\n    }\n    \n    function func_21D4(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_210E(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_21F2(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var3 = 0x00;\n        var var1 = arg0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x08] + storage[0x09] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x228a;\n        var var6 = var1 - 0x0de0b6b3a7640000;\n        var var7 = 0x02540be400;\n        var var8 = 0x0de0b6b3a7640000;\n        var var9 = var2;\n    \n        if (!var8) { assert(); }\n    \n        var5 = func_2248(var1, var6, var7, var8, var9);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_2248(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        arg1 = (arg4 / arg3 * 0x02540be400 + 0x174876e800) - arg2 * arg1;\n        arg2 = 0x02;\n        arg3 = 0x0de0b6b3a7640000;\n        var temp0 = arg0;\n        arg4 = temp0 ** 0x02 - temp0;\n    \n        if (!arg3) { assert(); }\n    \n        arg3 = arg4 / arg3 * 0x02540be400;\n    \n        if (!arg2) { assert(); }\n    \n        arg2 = arg3 / arg2;\n        r0 = func_210E(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_22A1(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = arg0 + 0x01;\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_22E6:\n            return var0;\n        } else {\n        label_22C3:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_22E6; }\n            else { goto label_22C3; }\n        }\n    }\n    \n    function func_22EC(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var var1 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n    \n        if (0x1f < arg2) {\n            var temp2 = arg2;\n            storage[arg0] = temp2 + temp2 + 0x01;\n        \n            if (!temp2) {\n            label_235B:\n                var temp3 = arg1;\n                arg1 = 0x2368;\n                var0 = var0;\n                arg2 = temp3;\n                arg1 = func_236C(arg2, var0);\n                return arg0;\n            } else {\n                var temp4 = arg2;\n                var temp5 = var1;\n                arg2 = temp5;\n                var1 = arg2 + temp4;\n            \n                if (var1 <= arg2) {\n                label_235A:\n                    goto label_235B;\n                } else {\n                label_2348:\n                    var temp6 = arg2;\n                    var temp7 = var0;\n                    storage[temp7] = memory[temp6:temp6 + 0x20];\n                    arg2 = temp6 + 0x20;\n                    var1 = var1;\n                    var0 = temp7 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_235A; }\n                    else { goto label_2348; }\n                }\n            }\n        } else {\n            var temp8 = arg2;\n            storage[arg0] = temp8 + temp8 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_235B;\n        }\n    }\n    \n    function func_236C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x238e;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_238A(arg1, var0); }\n    \n    label_237B:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_237B; }\n    \n        arg0 = func_238A(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_238A(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 63.52462601661682,
	"usage": {
		"completion_tokens": 659,
		"prompt_tokens": 17559,
		"total_tokens": 18218
	}
}