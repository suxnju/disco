{
	"address": "0xdf49c9f599a0a9049d97cff34d0c30e468987389",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity smart contract that matches the given decompiled code:\n\n```solidity\npragma solidity ^0.6.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    address private _owner;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function totalSupply() public pure returns (uint256) {\n        return 0x409f9cbc7c4a04c220000000;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= _allowance[from][msg.sender]);\n        _allowance[from][msg.sender] -= value;\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function withdraw() public {\n        require(msg.sender == _owner);\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"SATT\";\n    }\n\n    function _transfer(address from, address to, uint256 value) private {\n        require(_balanceOf[from] >= value);\n        require(_balanceOf[to] + value > _balanceOf[to]);\n\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(from, to, value);\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner);\n        _owner = newOwner;\n    }\n\n    fallback() external payable {}\n}\n```\n\nPlease note, this Solidity contract represents a simplified version of the decompiled code. It omits extraneous checks and some uncommon operations, and it assumes that the contract should be an ERC20 token. The `tokenFallback` and `transferToken` functions are not included, as they aren't standard ERC20 functions and their implementation is unclear from the provided decompiled code. Similarly, the `name` method is not included because its implementation in the decompiled code is unclear.",
				"role": "assistant"
			}
		}
	],
	"created": 1701466863,
	"id": "chatcmpl-8R5Xrtu5lspQBT3ULQ5TLSedNmVHo",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 04:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return 0x409f9cbc7c4a04c220000000;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x843(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x5341545400000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x843(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n    assert(0 < v0.length);\n    if (MEM[v0.data] >> 248 << 248 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        0x843(varg1, varg0, msg.sender);\n    }\n    return 1;\n}\n\nfunction tokenFallback(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction transferToken(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(msg.sender == _owner);\n    require(varg0.code.size);\n    v0 = varg0.transfer(varg1, varg2).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n}\n\nfunction 0x843(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    _balanceOf[v2] = _balanceOf[v2] - varg0;\n    v3 = address(varg1);\n    _balanceOf[v3] += varg0;\n    v4 = EXTCODEHASH(varg1);\n    v5 = v6 = v4 != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n    if (v4 != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470) {\n        v5 = v4;\n    }\n    if (v5) {\n        v7 = address(varg1);\n        require(v7.code.size);\n        v8 = v7.tokenFallback(msg.sender, varg0, 0).gas(msg.gas);\n        require(v8); // checks call status, propagates error data on error\n    }\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (3) {\n        MEM[v5 - 3] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v5 - 3];\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x8da5cb5b > function_selector >> 224) {\n            if (0x23b872dd > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x3ccfd60b == function_selector >> 224) {\n                withdraw();\n            } else if (0x70a08231 == function_selector >> 224) {\n                balanceOf(address);\n            }\n        } else if (0xc0ee0b8a > function_selector >> 224) {\n            if (0x8da5cb5b == function_selector >> 224) {\n                owner();\n            } else if (0x95d89b41 == function_selector >> 224) {\n                symbol();\n            } else if (0xa9059cbb == function_selector >> 224) {\n                transfer(address,uint256);\n            } else if (0xbe45fd62 == function_selector >> 224) {\n                transfer(address,uint256,bytes);\n            }\n        } else if (0xc0ee0b8a == function_selector >> 224) {\n            tokenFallback(address,uint256,bytes);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector >> 224) {\n            transferOwnership(address);\n        } else if (0xf5537ede == function_selector >> 224) {\n            transferToken(address,address,uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 04:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return 0x409f9cbc7c4a04c220000000;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x843(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x5341545400000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x843(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n    assert(0 < v0.length);\n    if (MEM[v0.data] >> 248 << 248 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        0x843(varg1, varg0, msg.sender);\n    }\n    return 1;\n}\n\nfunction tokenFallback(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction transferToken(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(msg.sender == _owner);\n    require(varg0.code.size);\n    v0 = varg0.transfer(varg1, varg2).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n}\n\nfunction 0x843(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    _balanceOf[v2] = _balanceOf[v2] - varg0;\n    v3 = address(varg1);\n    _balanceOf[v3] += varg0;\n    v4 = EXTCODEHASH(varg1);\n    v5 = v6 = v4 != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n    if (v4 != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470) {\n        v5 = v4;\n    }\n    if (v5) {\n        v7 = address(varg1);\n        require(v7.code.size);\n        v8 = v7.tokenFallback(msg.sender, varg0, 0).gas(msg.gas);\n        require(v8); // checks call status, propagates error data on error\n    }\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (3) {\n        MEM[v5 - 3] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v5 - 3];\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x8da5cb5b > function_selector >> 224) {\n            if (0x23b872dd > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x3ccfd60b == function_selector >> 224) {\n                withdraw();\n            } else if (0x70a08231 == function_selector >> 224) {\n                balanceOf(address);\n            }\n        } else if (0xc0ee0b8a > function_selector >> 224) {\n            if (0x8da5cb5b == function_selector >> 224) {\n                owner();\n            } else if (0x95d89b41 == function_selector >> 224) {\n                symbol();\n            } else if (0xa9059cbb == function_selector >> 224) {\n                transfer(address,uint256);\n            } else if (0xbe45fd62 == function_selector >> 224) {\n                transfer(address,uint256,bytes);\n            }\n        } else if (0xc0ee0b8a == function_selector >> 224) {\n            tokenFallback(address,uint256,bytes);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector >> 224) {\n            transferOwnership(address);\n        } else if (0xf5537ede == function_selector >> 224) {\n            transferToken(address,address,uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 04:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return 0x409f9cbc7c4a04c220000000;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x843(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x5341545400000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x843(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n    assert(0 < v0.length);\n    if (MEM[v0.data] >> 248 << 248 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        0x843(varg1, varg0, msg.sender);\n    }\n    return 1;\n}\n\nfunction tokenFallback(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction transferToken(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(msg.sender == _owner);\n    require(varg0.code.size);\n    v0 = varg0.transfer(varg1, varg2).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n}\n\nfunction 0x843(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    _balanceOf[v2] = _balanceOf[v2] - varg0;\n    v3 = address(varg1);\n    _balanceOf[v3] += varg0;\n    v4 = EXTCODEHASH(varg1);\n    v5 = v6 = v4 != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n    if (v4 != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470) {\n        v5 = v4;\n    }\n    if (v5) {\n        v7 = address(varg1);\n        require(v7.code.size);\n        v8 = v7.tokenFallback(msg.sender, varg0, 0).gas(msg.gas);\n        require(v8); // checks call status, propagates error data on error\n    }\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (3) {\n        MEM[v5 - 3] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v5 - 3];\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x8da5cb5b > function_selector >> 224) {\n            if (0x23b872dd > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x3ccfd60b == function_selector >> 224) {\n                withdraw();\n            } else if (0x70a08231 == function_selector >> 224) {\n                balanceOf(address);\n            }\n        } else if (0xc0ee0b8a > function_selector >> 224) {\n            if (0x8da5cb5b == function_selector >> 224) {\n                owner();\n            } else if (0x95d89b41 == function_selector >> 224) {\n                symbol();\n            } else if (0xa9059cbb == function_selector >> 224) {\n                transfer(address,uint256);\n            } else if (0xbe45fd62 == function_selector >> 224) {\n                transfer(address,uint256,bytes);\n            }\n        } else if (0xc0ee0b8a == function_selector >> 224) {\n            tokenFallback(address,uint256,bytes);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector >> 224) {\n            transferOwnership(address);\n        } else if (0xf5537ede == function_selector >> 224) {\n            transferToken(address,address,uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 20.135117530822754,
	"usage": {
		"completion_tokens": 620,
		"prompt_tokens": 2161,
		"total_tokens": 2781
	}
}