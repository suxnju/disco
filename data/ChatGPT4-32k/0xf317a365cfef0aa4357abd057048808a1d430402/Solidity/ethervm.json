{
	"address": "0xf317a365cfef0aa4357abd057048808a1d430402",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code according to the decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n\n    uint256 private _totalEth;\n    uint256 private _currentRound;\n    address private _owner;\n    address private _receiver;\n    uint256 private _lastRoundStartTime;\n    uint256 private _lastRoundEndTime;\n    uint256 private _lastRoundId;\n    uint256 private _buyPrice;\n    uint256 private _gameStarted;\n    uint256 private _rndNo;\n\n    mapping(uint256 => Round) private _rounds;\n    mapping(address => mapping(uint256 => PlayerRound)) private _playerRounds;\n\n    struct Round {\n        uint256 startTime;\n        uint256 endTime;\n        address winner;\n        uint256 buyPrice;\n        uint256 totalBuy;\n        uint256 award;\n        uint256 rndNo;\n    }\n\n    struct PlayerRound {\n        uint256 buyAmount;\n        uint256 award;\n    }\n\n    function getBuyPrice() public view returns (uint256) {\n        require(msg.sender == _owner, \"Permission denied\");\n        uint256 currentRoundBuy = _rounds[_currentRound].totalBuy;\n        if (currentRoundBuy >= 1e16) {\n            return 1e16;\n        } else if (currentRoundBuy > 1e15) {\n            return currentRoundBuy * 2;\n        } else {\n            return 1e15;\n        }\n    }\n\n    function getPlayerAwardByRndNo(uint256 rndNo, address playerAddress) public view returns (uint256) {\n        require(msg.sender == _owner, \"Permission denied\");\n        PlayerRound memory playerRound = _playerRounds[playerAddress][rndNo];\n\n        uint256 buyAmount = playerRound.buyAmount;\n        Round memory round = _rounds[rndNo];\n        uint256 totalBuy = round.totalBuy;\n        uint256 awardRate = buyAmount * 1e6 / totalBuy;\n\n        uint256 award = 0;\n        if (round.winner == playerAddress) {\n            award += round.award * 1e6;\n        }\n        \n        award += round.buyPrice * awardRate;\n\n        return award;\n    }\n\n    function startGame() public {\n        require(msg.sender == _owner, \"Permission denied\");\n        require(_gameStarted == 0, \"Game already started\");\n\n        _gameStarted = 1;\n        _currentRound++;\n        Round storage round = _rounds[_currentRound];\n        round.startTime = now;\n        round.endTime = now + 1 days;\n    }\n\n    function buyKeyByAddr(address playerAddress) public payable {\n        require(msg.value >= 1e9, \"Not enough ETH\");\n        require(msg.value <= 1e21, \"Too much ETH\");\n        require(_gameStarted == 1, \"Game not started yet\");\n        require(playerAddress != address(0), \"Invalid address\");\n\n        uint256 buyValue = msg.value;\n        Round storage round = _rounds[_currentRound];\n        PlayerRound storage playerRound = _playerRounds[playerAddress][_currentRound];\n\n        if (now > round.endTime) {\n            round.endTime = now + 1 hours;\n            round.winner = playerAddress;\n        }\n\n        uint256 buyPrice = getBuyPrice();\n\n        require(buyValue >= buyPrice, \"Not enough ETH\");\n        require(buyValue <= round.buyPrice * 2, \"Too much ETH\");\n\n        round.totalBuy += buyValue;\n        round.buyPrice = buyPrice;\n        playerRound.buyAmount += buyValue;\n    }\n\n    function withdraw(address payable playerAddress) public {\n        require(msg.sender == _owner, \"Permission denied\");\n\n        uint256 award = getPlayerAwardByRndNo(_currentRound, playerAddress);\n        PlayerRound storage playerRound = _playerRounds[playerAddress][_currentRound];\n\n        require(award >= playerRound.award, \"No award\");\n\n        playerRound.award = award;\n\n        playerAddress.transfer(award);\n    }\n}\n```\n\nPlease note that the conversion from EVM bytecode to Solidity is not perfect, and this code may not compile or function correctly without further modification. Also, it doesn't cover all the functions mentioned in the EVM bytecode, especially those related to the calculation and storage manipulation.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474665,
	"id": "chatcmpl-8MvQf1NDMTrykHyWTkXQ63vGNoRsZ",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00E5:\n            var var0 = msg.sender;\n            var var1 = address(var0).code.length;\n        \n            if (!var1) {\n                var var2 = msg.value;\n            \n                if (var2 < 0x3b9aca00) {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x21;\n                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x706f636b6574206c696e743a206e6f7420612076616c69642063757272656e63;\n                    memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x7900000000000000000000000000000000000000000000000000000000000000;\n                    var temp7 = memory[0x40:0x60];\n                    revert(memory[temp7:temp7 + temp6 - temp7 + 0x84]);\n                } else if (var2 > 0x152d02c7e14af6800000) {\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                    memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x0e;\n                    memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6e6f20766974616c696b2c206e6f000000000000000000000000000000000000;\n                    var temp5 = memory[0x40:0x60];\n                    revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);\n                } else if (!!(storage[0x07] & 0xff) == 0x01) {\n                    var var3 = 0x0268;\n                    var var4 = 0x00;\n                    func_05FF(var4);\n                    stop();\n                } else {\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                    memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1c;\n                    var temp1 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x27e6:0x2806];\n                    var temp2 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp1;\n                    memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp2;\n                    var temp3 = memory[0x40:0x60];\n                    revert(memory[temp3:temp3 + temp0 - temp3 + 0x64]);\n                }\n            } else {\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x11;\n                var temp9 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2806:0x2826];\n                var temp10 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp9;\n                memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n                var temp11 = memory[0x40:0x60];\n                revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x018a25e8) {\n                // Dispatch table entry for getBuyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var1 = getBuyPrice();\n            \n            label_0282:\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x3c28308a) {\n                // Dispatch table entry for rndNo()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = rndNo();\n                goto label_0282;\n            } else if (var0 == 0x3c3c9c23) {\n                // Dispatch table entry for totalEth()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = totalEth();\n                goto label_0282;\n            } else if (var0 == 0x4311de8f) {\n                // Dispatch table entry for ownerWithdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = ownerWithdraw();\n                goto label_0282;\n            } else if (var0 == 0x547e3f06) {\n                // Dispatch table entry for changeReceiver(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeReceiver(var2);\n                stop();\n            } else if (var0 == 0x6561e6ba) {\n                // Dispatch table entry for feeWithdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f4;\n                feeWithdraw();\n                stop();\n            } else if (var0 == 0x747dff42) {\n                // Dispatch table entry for getCurrentRoundInfo()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0320;\n                var2 = 0x00;\n                var3 = 0x157e;\n                var3 = func_274D();\n                var4 = 0x1586;\n                var4 = func_2768();\n                var var5 = 0x158e;\n                var5 = func_274D();\n                var var6 = 0x1596;\n                var6 = func_2787();\n                var var7 = 0x159e;\n                var7 = func_27A6();\n                var var8 = 0x15a6;\n                var8 = func_27C6();\n                memory[0x00:0x20] = storage[0x00];\n                memory[0x20:0x40] = 0x02;\n                var var9 = storage[0x00];\n                var var10 = 0x00;\n                var var11 = 0x1608;\n                var var12 = 0x64;\n                var var13 = 0x15d2;\n                var var14 = storage[keccak256(memory[var10:var10 + 0x40])];\n                var var15 = 0x1e;\n                var13 = func_245A(var14, var15);\n            \n                if (!var12) { assert(); }\n            \n                memory[0x00:0x20] = var9;\n                memory[0x20:0x40] = 0x02;\n                var temp14 = keccak256(memory[0x00:0x40]);\n                var12 = var13 / var12;\n                var14 = storage[temp14 + 0x19];\n                var13 = 0x09c6;\n                var15 = storage[temp14 + 0x1a];\n                var13 = func_2537(var14, var15);\n                var11 = func_09C6(var12, var13);\n                // Error: Could not resolve method call return address!\n            } else if (var0 == 0x7e8ac590) {\n                // Dispatch table entry for round_m(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0456;\n                var2 = msg.data[0x04:0x24];\n                var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12 = round_m(var2);\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2;\n                memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = var3;\n                memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = var4;\n                memory[temp15 + 0x60:temp15 + 0x60 + 0x20] = var5;\n                memory[temp15 + 0x80:temp15 + 0x80 + 0x20] = var6;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                memory[temp15 + 0xa0:temp15 + 0xa0 + 0x20] = temp16 & var7;\n                memory[temp15 + 0xc0:temp15 + 0xc0 + 0x20] = temp16 & var8;\n                memory[temp15 + 0xe0:temp15 + 0xe0 + 0x20] = var9;\n                memory[temp15 + 0x0100:temp15 + 0x0100 + 0x20] = var10;\n                memory[temp15 + 0x0120:temp15 + 0x0120 + 0x20] = var11;\n                memory[temp15 + 0x0140:temp15 + 0x0140 + 0x20] = var12;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + temp15 - temp17 + 0x0160];\n            } else if (var0 == 0x80ec35ff) {\n                // Dispatch table entry for awardByRndNo(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f4;\n                var2 = msg.data[0x04:0x24];\n                awardByRndNo(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e3;\n                var2 = owner();\n            \n            label_04E3:\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + temp18 - temp19 + 0x20];\n            } else if (var0 == 0xa05ce940) {\n                // Dispatch table entry for playerRound_m(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2, var3, var4, var5, var6 = playerRound_m(var2, var3);\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = var2;\n                memory[temp20 + 0x20:temp20 + 0x20 + 0x20] = var3;\n                memory[temp20 + 0x40:temp20 + 0x40 + 0x20] = var4;\n                memory[temp20 + 0x60:temp20 + 0x60 + 0x20] = var5;\n                memory[temp20 + 0x80:temp20 + 0x80 + 0x20] = var6;\n                var temp21 = memory[0x40:0x60];\n                return memory[temp21:temp21 + temp20 - temp21 + 0xa0];\n            } else if (var0 == 0xc5960c29) {\n                // Dispatch table entry for buyKeyByAddr(address)\n                var1 = 0x02f4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                buyKeyByAddr(var2);\n                stop();\n            } else if (var0 == 0xd65ab5f2) {\n                // Dispatch table entry for startGame()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f4;\n                startGame();\n                stop();\n            } else if (var0 == 0xd982466d) {\n                // Dispatch table entry for getPlayerAwardByRndNo(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x059b;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1, var2, var3, var4 = getPlayerAwardByRndNo(var2, var3);\n                var temp22 = memory[0x40:0x60];\n                memory[temp22:temp22 + 0x20] = var1;\n                memory[temp22 + 0x20:temp22 + 0x20 + 0x20] = var2;\n                memory[temp22 + 0x40:temp22 + 0x40 + 0x20] = var3;\n                memory[temp22 + 0x60:temp22 + 0x60 + 0x20] = var4;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + temp22 - temp23 + 0x80];\n            } else if (var0 == 0xe3aae11b) {\n                // Dispatch table entry for isStartGame()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d6;\n                var2 = isStartGame();\n                var temp24 = memory[0x40:0x60];\n                memory[temp24:temp24 + 0x20] = !!var2;\n                var temp25 = memory[0x40:0x60];\n                return memory[temp25:temp25 + temp24 - temp25 + 0x20];\n            } else if (var0 == 0xf7260d3e) {\n                // Dispatch table entry for receiver()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e3;\n                var2 = receiver();\n                goto label_04E3;\n            } else { goto label_00E5; }\n        }\n    }\n    \n    function func_05FF(var arg0) {\n        memory[0x00:0x20] = storage[0x00];\n        memory[0x20:0x40] = 0x02;\n        var var0 = msg.value;\n        var var1 = block.timestamp;\n        var var2 = storage[0x00];\n        var var3 = var0;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = var7;\n    \n        if (var1 <= storage[keccak256(memory[var8:var8 + 0x40]) + 0x03]) {\n        label_083B:\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x02;\n        \n            if (0x0c685fa11e01ec6f000000 <= storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x02;\n            \n                if (var1 > storage[keccak256(memory[0x00:0x40]) + 0x04]) {\n                    var var9 = 0x0ca9;\n                    var var10 = 0xb1a2bc2ec50000;\n                    var var11 = 0x09c6;\n                    var var12 = 0xb1a2bc2ec50000;\n                    var var13 = 0x2a30;\n                    var var14 = 0x0c93;\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var var15 = var1;\n                    var var16 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                    var14 = func_24D7(var15, var16);\n                    var11 = func_0C93(var12, var13, var14);\n                    var9 = func_09C6(var10, var11);\n                    var3 = var9;\n                \n                    if (var0 < var3) {\n                        var temp20 = memory[0x40:0x60];\n                        memory[temp20:temp20 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n                        memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x15;\n                        memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x457468657220616d6f756e742069732077726f6e670000000000000000000000;\n                        var temp21 = memory[0x40:0x60];\n                        revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n                    } else if (var0 <= var3) {\n                    label_0D49:\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x02;\n                        var temp0 = keccak256(memory[0x00:0x40]);\n                        storage[temp0 + 0x03] = var1 + 0x0384;\n                        var temp1 = temp0 + 0x05;\n                        var temp2 = msg.sender;\n                        storage[temp1] = temp2 | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        memory[0x20:0x40] = 0x03;\n                        var temp3 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = temp3;\n                        var9 = 0x0dad;\n                        var10 = var3;\n                        var11 = storage[keccak256(memory[0x00:0x40])];\n                        var9 = func_2537(var10, var11);\n                        var temp4 = var2;\n                        memory[0x00:0x20] = temp4;\n                        memory[0x20:0x40] = 0x03;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp5;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                        memory[0x00:0x20] = temp4;\n                        memory[0x20:0x40] = 0x02;\n                        var9 = 0x0de4;\n                        var10 = var3;\n                        var11 = storage[keccak256(memory[0x00:0x40])];\n                        var9 = func_2537(var10, var11);\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x02;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                        var9 = 0x0e07;\n                        var10 = var3;\n                        var11 = storage[0x01];\n                        var9 = func_2537(var10, var11);\n                        storage[0x01] = var9;\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x02;\n                        var9 = 0x0e3e;\n                        var10 = 0x01;\n                        var11 = 0x09c6;\n                        var12 = var10;\n                        var13 = 0x2a30;\n                        var14 = 0x0c93;\n                        var16 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                        var15 = var1;\n                        var14 = func_24D7(var15, var16);\n                        var11 = func_0C93(var12, var13, var14);\n                        var9 = func_09C6(var10, var11);\n                        var8 = var9;\n                    \n                        if (var8 < 0x019a) {\n                            memory[0x00:0x20] = var2;\n                            memory[0x20:0x40] = 0x02;\n                            var10 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n                            var9 = 0x0e8d;\n                            var11 = 0x03e8;\n                            var12 = 0x0e77;\n                            var13 = var8;\n                            var14 = var3;\n                            var12 = func_245A(var13, var14);\n                            var9 = func_0E77(var10, var11, var12);\n                        \n                        label_0E8D:\n                            var temp6 = var2;\n                            memory[0x00:0x20] = temp6;\n                            memory[0x20:0x40] = 0x02;\n                            storage[keccak256(memory[0x00:0x40]) + 0x1a] = var9;\n                            var temp7 = memory[0x40:0x60];\n                            memory[temp7:temp7 + 0x20] = var3;\n                            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var1;\n                            var temp8 = memory[0x40:0x60];\n                            var temp9 = arg0;\n                            log(memory[temp8:temp8 + temp7 - temp8 + 0x40], [0x7cfc1da3c0c40e1670d11d884a3776eb3a8949e87b844c6dac43b5c9c3dc5f7e, msg.sender, stack[-8], stack[-11] & 0x02 ** 0xa0 - 0x01]);\n                            var9 = !!(temp9 & 0x02 ** 0xa0 - 0x01);\n                        \n                            if (temp9 & 0x02 ** 0xa0 - 0x01) {\n                                var9 = 0x0f09;\n                                var10 = arg0;\n                                var12 = address(var10).code.length;\n                                var11 = !var12;\n                                var9 = var11;\n                                // Error: Could not resolve jump destination!\n                            } else if (!var9) {\n                            label_1008:\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                var temp10 = keccak256(memory[0x00:0x40]);\n                                var9 = temp10 + 0x07;\n                                var10 = storage[temp10 + 0x17] % 0x0b;\n                            \n                                if (var10 >= 0x0b) { assert(); }\n                            \n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                var temp11 = keccak256(memory[0x00:0x40]);\n                                var9 = storage[var10 + var9] & 0x02 ** 0xa0 - 0x01;\n                                var10 = temp11 + 0x12;\n                                var11 = storage[temp11 + 0x17] & 0x03;\n                            \n                                if (var11 >= 0x04) { assert(); }\n                            \n                                var temp12 = var11 + var10;\n                                storage[temp12] = (var9 & 0x02 ** 0xa0 - 0x01) | (storage[temp12] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                var temp13 = keccak256(memory[0x00:0x40]);\n                                var9 = msg.sender;\n                                var10 = temp13 + 0x07;\n                                var11 = storage[temp13 + 0x17] % 0x0b;\n                            \n                                if (var11 >= 0x0b) { assert(); }\n                            \n                                var temp14 = var11 + var10;\n                                storage[temp14] = (var9 & 0x02 ** 0xa0 - 0x01) | (storage[temp14] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                var9 = 0x10ff;\n                                var10 = storage[keccak256(memory[0x00:0x40]) + 0x17];\n                                var11 = 0x01;\n                                var9 = func_2537(var10, var11);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                storage[keccak256(memory[0x00:0x40]) + 0x17] = var9;\n                                return;\n                            } else {\n                                var9 = 0x0f76;\n                                var10 = 0x64;\n                                var11 = 0x0f24;\n                                var12 = var3;\n                                var13 = 0x0a;\n                                var11 = func_245A(var12, var13);\n                                var9 = func_0F24(arg0, var2, var10, var11);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x03;\n                                var temp15 = keccak256(memory[0x00:0x40]);\n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = temp15;\n                                storage[keccak256(memory[0x00:0x40]) + 0x03] = var9;\n                                var9 = 0x0ff5;\n                                var10 = 0x64;\n                                var11 = 0x0fcc;\n                                var12 = var3;\n                                var13 = 0x0a;\n                                var11 = func_245A(var12, var13);\n                                var9 = func_0FCC(var2, var10, var11);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                storage[keccak256(memory[0x00:0x40]) + 0x18] = var9;\n                                goto label_1008;\n                            }\n                        } else {\n                            var8 = 0x019a;\n                            memory[0x00:0x20] = var2;\n                            memory[0x20:0x40] = 0x02;\n                            var9 = 0x0e8d;\n                            var10 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n                            var11 = 0x03e8;\n                            var12 = 0x0e77;\n                            var13 = var8;\n                            var14 = var3;\n                            var12 = func_245A(var13, var14);\n                            var9 = func_0E77(var10, var11, var12);\n                            goto label_0E8D;\n                        }\n                    } else {\n                        var9 = msg.sender;\n                        var10 = 0x08fc;\n                        var11 = 0x0d1f;\n                        var12 = var0;\n                        var13 = var3;\n                        var11 = func_24D7(var12, var13);\n                        var temp16 = memory[0x40:0x60];\n                        var temp17 = var11;\n                        var temp18;\n                        temp18, memory[temp16:temp16 + 0x00] = address(var9).call.gas(var10 * !temp17).value(temp17)(memory[temp16:temp16 + 0x00]);\n                        var9 = !temp18;\n                    \n                        if (!var9) { goto label_0D49; }\n                    \n                        var temp19 = returndata.length;\n                        memory[0x00:0x00 + temp19] = returndata[0x00:0x00 + temp19];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp22 = memory[0x40:0x60];\n                    memory[temp22:temp22 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp22 + 0x04:temp22 + 0x04 + 0x20] = 0x20;\n                    memory[temp22 + 0x24:temp22 + 0x24 + 0x20] = 0x1e;\n                    memory[temp22 + 0x44:temp22 + 0x44 + 0x20] = 0x546865207669727573206973206265696e672070726570617265642e2e2e0000;\n                    var temp23 = memory[0x40:0x60];\n                    revert(memory[temp23:temp23 + temp22 - temp23 + 0x64]);\n                }\n            } else {\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x02;\n                var9 = 0x087e;\n                var10 = storage[keccak256(memory[0x00:0x40])];\n                var11 = var0;\n                var12 = 0x00;\n                var13 = 0x25c4;\n                var14 = 0x25a0;\n                var15 = var10;\n                var14 = func_25FD(var15);\n                var15 = 0x25b8;\n                var16 = 0x25b3;\n                var var17 = var10;\n                var var18 = var11;\n                var16 = func_2537(var17, var18);\n                var15 = func_25B3(var16);\n                var13 = func_25B8(var14, var15);\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x02;\n        \n            if (var1 > storage[keccak256(memory[0x00:0x40]) + 0x03] + 0xa8c0) {\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x02;\n                var temp24 = keccak256(memory[0x00:0x40]);\n                var9 = 0x06da;\n                var10 = storage[temp24 + 0x18];\n                var11 = 0x64;\n                var13 = storage[temp24];\n                var12 = 0x06c4;\n                var14 = 0x0e;\n                var12 = func_245A(var13, var14);\n                var9 = func_06C4(var10, var11, var12);\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x02;\n                var4 = var9;\n            \n                if (0x0b <= storage[keccak256(memory[0x00:0x40]) + 0x17]) {\n                label_07F6:\n                    var9 = 0x0807;\n                    var10 = var2;\n                    var11 = 0x01;\n                    var9 = func_2537(var10, var11);\n                    var temp25 = var9;\n                    storage[0x00] = temp25;\n                    memory[0x00:0x20] = temp25;\n                    memory[0x20:0x40] = 0x02;\n                    var temp26 = keccak256(memory[0x00:0x40]);\n                    var temp27 = var1;\n                    storage[temp26 + 0x02] = temp27;\n                    storage[temp26 + 0x03] = temp27 + 0xa8c0;\n                    storage[temp26 + 0x17] = 0x00;\n                    storage[temp26 + 0x19] = var4;\n                    var2 = temp25;\n                    goto label_083B;\n                } else {\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var9 = 0x071b;\n                    var11 = storage[keccak256(memory[0x00:0x40]) + 0x17];\n                    var10 = 0x0b;\n                    var9 = func_24D7(var10, var11);\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var5 = var9;\n                    var9 = 0x64;\n                    var10 = 0x0741;\n                    var11 = storage[keccak256(memory[0x00:0x40])];\n                    var12 = 0x1e;\n                    var10 = func_245A(var11, var12);\n                \n                    if (!var9) { assert(); }\n                \n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var temp28 = var10 / var9;\n                    var6 = temp28;\n                    var9 = 0x0772;\n                    var11 = storage[keccak256(memory[0x00:0x40]) + 0x19];\n                    var10 = var6;\n                    var9 = func_2537(var10, var11);\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var6 = var9;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01)) {\n                        var9 = 0x07f3;\n                        var10 = 0x07c6;\n                        var11 = 0x64;\n                        var12 = 0x07ae;\n                        var13 = var6;\n                        var14 = 0x04;\n                        var12 = func_245A(var13, var14);\n                        var10 = func_07AE(var5, var11, var12);\n                        var9 = func_07C6(var4, var10);\n                        var4 = var9;\n                        goto label_07F6;\n                    } else {\n                        var9 = 0x07d3;\n                        var10 = 0x07c6;\n                        var11 = 0x64;\n                        var12 = 0x07ae;\n                        var13 = var6;\n                        var14 = 0x03;\n                        var12 = func_245A(var13, var14);\n                        var10 = func_07AE(var5, var11, var12);\n                        var9 = func_07C6(var4, var10);\n                        var4 = var9;\n                        goto label_07F6;\n                    }\n                }\n            } else {\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = 0x20;\n                memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = 0x18;\n                memory[temp29 + 0x44:temp29 + 0x44 + 0x20] = 0x77652073686f756c64207761697420736f6d652074696d650000000000000000;\n                var temp30 = memory[0x40:0x60];\n                revert(memory[temp30:temp30 + temp29 - temp30 + 0x64]);\n            }\n        }\n    }\n    \n    function func_06C4(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg0;\n        arg0 = arg2 / arg1;\n        arg1 = temp0;\n        r0 = func_24D7(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_07AE(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg1;\n        arg1 = arg0;\n        arg2 = arg2 / temp0;\n        r0 = func_245A(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_07C6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_2537(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_09C6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_2537(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0C93(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg0;\n        arg0 = arg2 / arg1;\n        arg1 = temp0;\n        r0 = func_245A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0E77(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg0;\n        arg0 = arg2 / arg1;\n        arg1 = temp0;\n        r0 = func_2537(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0F24(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        if (!arg2) { assert(); }\n    \n        var temp0 = arg3 / arg2;\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = temp1;\n        arg2 = storage[keccak256(memory[0x00:0x40]) + 0x03];\n        arg3 = temp0;\n        r0 = func_2537(arg2, arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0FCC(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = arg1;\n        arg1 = storage[keccak256(memory[0x00:0x40]) + 0x18];\n        arg2 = arg2 / temp0;\n        r0 = func_2537(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getBuyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[var0];\n        memory[var0:var0 + 0x20] = var1;\n        memory[0x20:0x40] = 0x02;\n        var var2 = block.timestamp;\n        var var3 = var0;\n    \n        if (var2 <= storage[keccak256(memory[var3:var3 + 0x40]) + 0x03]) {\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x02;\n        \n            if (0x0c685fa11e01ec6f000000 <= storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x02;\n                var var4 = 0x0c685fa11e01ec6f000000 > storage[keccak256(memory[0x00:0x40]) + 0x01];\n            \n                if (0x0c685fa11e01ec6f000000 > storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                    memory[0x00:0x20] = var1;\n                    memory[0x20:0x40] = 0x02;\n                    var4 = !!storage[keccak256(memory[0x00:0x40]) + 0x04];\n                \n                    if (!var4) { goto label_1216; }\n                    else { goto label_11F8; }\n                } else if (!var4) {\n                label_1216:\n                \n                    if (!var4) {\n                    label_1232:\n                    \n                        if (!var4) {\n                        label_1246:\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x02;\n                            var4 = 0x0c685fa11e01ec6f000000 > storage[keccak256(memory[0x00:0x40]) + 0x01];\n                        \n                            if (0x0c685fa11e01ec6f000000 > storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                                memory[0x00:0x20] = var1;\n                                memory[0x20:0x40] = 0x02;\n                            \n                                if (var2 <= storage[keccak256(memory[0x00:0x40]) + 0x04]) { goto label_12D3; }\n                                else { goto label_1288; }\n                            } else if (!var4) {\n                            label_12D3:\n                                var0 = 0x00;\n                            \n                            label_12D8:\n                                return var0;\n                            } else {\n                            label_1288:\n                                var4 = 0x12c9;\n                                var var5 = 0xb1a2bc2ec50000;\n                                var var6 = 0x09c6;\n                                var var7 = 0xb1a2bc2ec50000;\n                                var var8 = 0x2a30;\n                                var var9 = 0x0c93;\n                                memory[0x00:0x20] = var1;\n                                memory[0x20:0x40] = 0x02;\n                                var var10 = var2;\n                                var var11 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                                var9 = func_24D7(var10, var11);\n                                var6 = func_0C93(var7, var8, var9);\n                                var4 = func_09C6(var5, var6);\n                                var3 = var4;\n                                var0 = var3;\n                                goto label_12D8;\n                            }\n                        } else {\n                        label_1238:\n                            var0 = 0xb1a2bc2ec50000;\n                            goto label_12D8;\n                        }\n                    } else {\n                    label_121D:\n                        memory[0x00:0x20] = var1;\n                        memory[0x20:0x40] = 0x02;\n                    \n                        if (var2 >= storage[keccak256(memory[0x00:0x40]) + 0x04]) { goto label_1246; }\n                        else { goto label_1238; }\n                    }\n                } else {\n                label_11F8:\n                    memory[0x00:0x20] = var1;\n                    memory[0x20:0x40] = 0x02;\n                    var4 = !!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01);\n                \n                    if (!var4) { goto label_1232; }\n                    else { goto label_121D; }\n                }\n            } else {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x02;\n                var4 = 0x11ae;\n                var5 = 0x8ac7230489e80000;\n                var7 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                var6 = 0x11a2;\n                var8 = var5;\n                var6 = func_2537(var7, var8);\n                var temp0 = var5;\n                var5 = var6;\n                var6 = temp0;\n                var7 = 0x00;\n                var8 = 0x25c4;\n                var9 = 0x25f4;\n                var10 = 0x25ef;\n                var11 = var5;\n                var var12 = var6;\n                var10 = func_24D7(var11, var12);\n                var11 = 0x00;\n                var12 = 0x2694;\n                var var13 = 0x0de0b6b3a7640000;\n                var var14 = 0x00;\n                var var15 = 0x24d1;\n                var var16 = var13;\n                var var17 = var16;\n                var15 = func_245A(var16, var17);\n                var12 = var15;\n                // Error: Could not resolve jump destination!\n            }\n        } else {\n            var0 = 0x02aa209ead3c50;\n            goto label_12D8;\n        }\n    }\n    \n    function rndNo() returns (var r0) { return storage[0x00]; }\n    \n    function totalEth() returns (var r0) { return storage[0x01]; }\n    \n    function ownerWithdraw() returns (var r0) { return storage[0x06]; }\n    \n    function changeReceiver(var arg0) {\n        if (msg.sender == storage[0x04] & 0x02 ** 0xa0 - 0x01) {\n            storage[0x05] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x05] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x14;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6f6e6c79206f776e65722063616e20646f206974000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        }\n    }\n    \n    function feeWithdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = msg.sender;\n        var var3 = address(var2).code.length;\n    \n        if (var3) {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x11;\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2806:0x2826];\n            var temp14 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp13;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = temp14;\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + temp12 - temp15 + 0x64]);\n        } else if (!!(storage[0x07] & 0xff) != 0x01) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x1c;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x27e6:0x2806];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n        } else if (storage[0x05] & 0x02 ** 0xa0 - 0x01) {\n            var var4 = 0x64;\n            var var5 = 0x14b7;\n            var var6 = storage[0x01];\n            var var7 = 0x05;\n            var5 = func_245A(var6, var7);\n        \n            if (!var4) { assert(); }\n        \n            var0 = var5 / var4;\n            var1 = storage[0x06];\n        \n            if (var0 > var1) {\n                storage[0x06] = var0;\n                var4 = storage[0x05] & 0x02 ** 0xa0 - 0x01;\n                var5 = 0x08fc;\n                var6 = 0x1545;\n                var7 = var0;\n                var var8 = var1;\n                var6 = func_24D7(var7, var8);\n                var temp0 = memory[0x40:0x60];\n                var temp1 = var6;\n                var temp2;\n                temp2, memory[temp0:temp0 + 0x00] = address(var4).call.gas(var5 * !temp1).value(temp1)(memory[temp0:temp0 + 0x00]);\n                var4 = !temp2;\n            \n                if (!var4) { return; }\n            \n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x13;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x4e6f206e65656420746f20776974686472617700000000000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x2e;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x546865207265636569766572206164647265737320686173206e6f7420626565;\n            memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x6e20696e697469616c697a65642e000000000000000000000000000000000000;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp6 - temp7 + 0x84]);\n        }\n    }\n    \n    function round_m(var arg0) returns (var arg0, var r1, var r2, var r3, var r4, var r5, var r6, var r7, var r8, var r9, var r10) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02];\n        r3 = storage[temp0 + 0x03];\n        r4 = storage[temp0 + 0x04];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        r5 = temp1 & storage[temp0 + 0x05];\n        r6 = temp1 & storage[temp0 + 0x06];\n        r7 = storage[temp0 + 0x17];\n        r9 = storage[temp0 + 0x19];\n        r8 = storage[temp0 + 0x18];\n        r10 = storage[temp0 + 0x1a];\n        return arg0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;\n    }\n    \n    function awardByRndNo(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = msg.sender;\n        var var8 = address(var7).code.length;\n    \n        if (var8) {\n            var temp29 = memory[0x40:0x60];\n            memory[temp29:temp29 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = 0x20;\n            memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = 0x11;\n            var temp30 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2806:0x2826];\n            var temp31 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp30;\n            memory[temp29 + 0x44:temp29 + 0x44 + 0x20] = temp31;\n            var temp32 = memory[0x40:0x60];\n            revert(memory[temp32:temp32 + temp29 - temp32 + 0x64]);\n        } else if (!!(storage[0x07] & 0xff) != 0x01) {\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n            memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x1c;\n            var temp26 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x27e6:0x2806];\n            var temp27 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp26;\n            memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = temp27;\n            var temp28 = memory[0x40:0x60];\n            revert(memory[temp28:temp28 + temp25 - temp28 + 0x64]);\n        } else if (arg0 <= storage[0x00]) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var0 = 0x00;\n            var var9 = 0x64;\n            var var10 = 0x18fe;\n            var var11 = storage[keccak256(memory[var0:var0 + 0x40])];\n            var var12 = 0x1e;\n            var10 = func_245A(var11, var12);\n        \n            if (!var9) { assert(); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = var10 / var9;\n            var1 = temp0;\n            var9 = 0x192f;\n            var10 = var1;\n            var11 = storage[keccak256(memory[0x00:0x40]) + 0x19];\n            var9 = func_2537(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = var9;\n            var1 = temp1;\n            var9 = 0x1955;\n            var10 = var1;\n            var11 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n            var9 = func_2537(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var1 = var9;\n            var2 = 0x00;\n            var9 = 0x64;\n            var11 = storage[keccak256(memory[var2:var2 + 0x40])];\n            var10 = 0x197d;\n            var12 = 0x33;\n            var10 = func_245A(var11, var12);\n        \n            if (!var9) { assert(); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = var10 / var9;\n            var3 = temp2;\n            var9 = 0x19ae;\n            var11 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n            var10 = var3;\n            var9 = func_24D7(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp3;\n            var temp4 = var9;\n            var3 = temp4;\n            var9 = 0x19df;\n            var10 = var3;\n            var11 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n            var9 = func_245A(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var temp5 = var9;\n            var9 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n            var3 = temp5;\n            var10 = var3;\n        \n            if (!var9) { assert(); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp6;\n            var temp7 = var10 / var9;\n            var3 = temp7;\n            var4 = storage[keccak256(memory[0x00:0x40]) + 0x03];\n            var9 = 0x1a31;\n            var10 = var3;\n            var11 = var4;\n            var9 = func_2537(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp8;\n            var3 = var9;\n            var5 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n        \n            if (var3 <= var5) {\n            label_1A9D:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x02;\n                var9 = msg.sender == storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01;\n            \n                if (var9) {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x02;\n                    var9 = !!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01);\n                \n                    if (!var9) { goto label_1AFB; }\n                    else { goto label_1AE6; }\n                } else if (!var9) {\n                label_1AFB:\n                \n                    if (!var9) {\n                    label_1B31:\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x02;\n                    \n                        if (block.timestamp <= storage[keccak256(memory[0x00:0x40]) + 0x03]) {\n                        label_1CF1:\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x03;\n                            var temp9 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = temp9;\n                            var9 = 0x1d23;\n                            var10 = 0x1a6e;\n                            var11 = var2;\n                            var12 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                            var10 = func_24D7(var11, var12);\n                            var9 = func_1A6E(var0, var10);\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x03;\n                            var temp10 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = temp10;\n                            storage[keccak256(memory[0x00:0x40]) + 0x04] = var2;\n                            var0 = var9;\n                        \n                            if (!var0) {\n                            label_1D79:\n                                var temp11 = memory[0x40:0x60];\n                                memory[temp11:temp11 + 0x20] = var0;\n                                memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = block.timestamp;\n                                var temp12 = memory[0x40:0x60];\n                                log(memory[temp12:temp12 + temp11 - temp12 + 0x40], [0x067aa1d7e7bd2c0daf878a68551cbd9e1a4dbaaa1510600154c71bffbe420d86, msg.sender, stack[-10]]);\n                                return;\n                            } else {\n                                var temp13 = memory[0x40:0x60];\n                                var temp14 = var0;\n                                var temp15;\n                                temp15, memory[temp13:temp13 + 0x00] = address(msg.sender).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp13:temp13 + 0x00]);\n                                var9 = !temp15;\n                            \n                                if (!var9) { goto label_1D79; }\n                            \n                                var temp16 = returndata.length;\n                                memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x02;\n                        \n                            if (msg.sender != storage[keccak256(memory[0x00:0x40]) + 0x05] & 0x02 ** 0xa0 - 0x01) {\n                            label_1B85:\n                                var6 = 0x00;\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x02;\n                            \n                                if (var6 >= 0x0b) { goto label_1CF1; }\n                            \n                            label_1B9E:\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x02;\n                                var9 = msg.sender;\n                                var10 = keccak256(memory[0x00:0x40]) + 0x07;\n                                var11 = var6;\n                            \n                                if (var11 >= 0x0b) { assert(); }\n                            \n                                var temp17 = storage[var11 + var10] & 0x02 ** 0xa0 - 0x01 == var9;\n                                var9 = temp17;\n                            \n                                if (!var9) {\n                                label_1C03:\n                                \n                                    if (!var9) {\n                                    label_1CD9:\n                                        var9 = 0x1cea;\n                                        var10 = var6;\n                                        var11 = 0x01;\n                                        var9 = func_2537(var10, var11);\n                                        var6 = var9;\n                                        memory[0x00:0x20] = arg0;\n                                        memory[0x20:0x40] = 0x02;\n                                    \n                                        if (var6 >= 0x0b) { goto label_1CF1; }\n                                        else { goto label_1B9E; }\n                                    } else {\n                                        memory[0x00:0x20] = arg0;\n                                        memory[0x20:0x40] = 0x02;\n                                        var9 = keccak256(memory[0x00:0x40]) + 0x16;\n                                        var10 = var6;\n                                    \n                                        if (var10 >= 0x0b) { assert(); }\n                                    \n                                        var temp18 = var10;\n                                    \n                                        if (storage[var9 + temp18 / 0x20] / 0x0100 ** (temp18 & 0x1f) & 0xff) { goto label_1CD9; }\n                                    \n                                        memory[0x00:0x20] = arg0;\n                                        memory[0x20:0x40] = 0x02;\n                                    \n                                        if (!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01)) {\n                                            var9 = 0x1c97;\n                                            var10 = 0x64;\n                                            var11 = 0x1b16;\n                                            var12 = var1;\n                                            var var13 = 0x04;\n                                            var11 = func_245A(var12, var13);\n                                            var9 = func_1B16(var2, var10, var11);\n                                            var2 = var9;\n                                            memory[0x00:0x20] = arg0;\n                                            memory[0x20:0x40] = 0x02;\n                                            var9 = 0x01;\n                                            var10 = keccak256(memory[0x00:0x40]) + 0x16;\n                                            var11 = var6;\n                                        \n                                            if (var11 >= 0x0b) { assert(); }\n                                        \n                                        label_1CB9:\n                                            var temp19 = var11;\n                                            var temp20 = temp19 / 0x20 + var10;\n                                            var temp21 = 0x0100 ** (temp19 % 0x20);\n                                            storage[temp20] = !!var9 * temp21 | (~(temp21 * 0xff) & storage[temp20]);\n                                            goto label_1CD9;\n                                        } else {\n                                            var9 = 0x1c7a;\n                                            var10 = 0x64;\n                                            var11 = 0x1b16;\n                                            var12 = var1;\n                                            var13 = 0x03;\n                                            var11 = func_245A(var12, var13);\n                                            var9 = func_1B16(var2, var10, var11);\n                                            var2 = var9;\n                                            memory[0x00:0x20] = arg0;\n                                            memory[0x20:0x40] = 0x02;\n                                            var9 = 0x01;\n                                            var10 = keccak256(memory[0x00:0x40]) + 0x16;\n                                            var11 = var6;\n                                        \n                                            if (var11 < 0x0b) { goto label_1CB9; }\n                                            else { assert(); }\n                                        }\n                                    }\n                                } else {\n                                    memory[0x00:0x20] = arg0;\n                                    memory[0x20:0x40] = 0x02;\n                                    var9 = var6;\n                                    var10 = 0x0b;\n                                    var12 = storage[keccak256(memory[0x00:0x40]) + 0x17];\n                                    var11 = 0x1bf6;\n                                    var13 = 0x01;\n                                    var11 = func_24D7(var12, var13);\n                                \n                                    if (!var10) { assert(); }\n                                \n                                    var9 = var11 % var10 != var9;\n                                    goto label_1C03;\n                                }\n                            } else {\n                                var9 = 0x1b82;\n                                var10 = 0x64;\n                                var11 = 0x1b16;\n                                var12 = var1;\n                                var13 = 0x3c;\n                                var11 = func_245A(var12, var13);\n                                var9 = func_1B16(var2, var10, var11);\n                                var2 = var9;\n                                goto label_1B85;\n                            }\n                        }\n                    } else {\n                    label_1B01:\n                        var9 = 0x1b2e;\n                        var10 = 0x64;\n                        var11 = 0x1b16;\n                        var12 = var1;\n                        var13 = 0x0a;\n                        var11 = func_245A(var12, var13);\n                        var9 = func_1B16(var2, var10, var11);\n                        var2 = var9;\n                        goto label_1B31;\n                    }\n                } else {\n                label_1AE6:\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x02;\n                \n                    if (!storage[keccak256(memory[0x00:0x40]) + 0x04]) { goto label_1B31; }\n                    else { goto label_1B01; }\n                }\n            } else {\n                var9 = 0x1a7b;\n                var10 = 0x1a6e;\n                var11 = var3;\n                var12 = var5;\n                var10 = func_24D7(var11, var12);\n                var9 = func_1A6E(var0, var10);\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x03;\n                var temp22 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp22;\n                storage[keccak256(memory[0x00:0x40]) + 0x02] = var3;\n                var0 = var9;\n                goto label_1A9D;\n            }\n        } else {\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp23 + 0x04:temp23 + 0x04 + 0x20] = 0x20;\n            memory[temp23 + 0x24:temp23 + 0x24 + 0x20] = 0x17;\n            memory[temp23 + 0x44:temp23 + 0x44 + 0x20] = 0x596f752772652072756e6e696e6720746f6f2066617374000000000000000000;\n            var temp24 = memory[0x40:0x60];\n            revert(memory[temp24:temp24 + temp23 - temp24 + 0x64]);\n        }\n    }\n    \n    function func_1A6E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_2537(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1B16(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg1;\n        arg1 = arg0;\n        arg2 = arg2 / temp0;\n        r0 = func_2537(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function owner() returns (var r0) { return storage[0x04] & 0x02 ** 0xa0 - 0x01; }\n    \n    function playerRound_m(var arg0, var arg1) returns (var arg0, var arg1, var r2, var r3, var r4) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        arg1 = storage[temp0 + 0x01];\n        r3 = storage[temp0 + 0x03];\n        r2 = storage[temp0 + 0x02];\n        r4 = storage[temp0 + 0x04];\n        return arg0, arg1, r2, r3, r4;\n    }\n    \n    function buyKeyByAddr(var arg0) {\n        var var0 = msg.sender;\n        var var1 = address(var0).code.length;\n    \n        if (!var1) {\n            var var2 = msg.value;\n        \n            if (var2 < 0x3b9aca00) {\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x21;\n                memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x706f636b6574206c696e743a206e6f7420612076616c69642063757272656e63;\n                memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x7900000000000000000000000000000000000000000000000000000000000000;\n                var temp7 = memory[0x40:0x60];\n                revert(memory[temp7:temp7 + temp6 - temp7 + 0x84]);\n            } else if (var2 > 0x152d02c7e14af6800000) {\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x0e;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6e6f20766974616c696b2c206e6f000000000000000000000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);\n            } else if (!!(storage[0x07] & 0xff) == 0x01) {\n                var var3 = 0x1f8c;\n                var var4 = arg0;\n                func_05FF(var4);\n                return;\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1c;\n                var temp1 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x27e6:0x2806];\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp1;\n                memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp2;\n                var temp3 = memory[0x40:0x60];\n                revert(memory[temp3:temp3 + temp0 - temp3 + 0x64]);\n            }\n        } else {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x11;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2806:0x2826];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n        }\n    }\n    \n    function startGame() {\n        if (msg.sender != storage[0x04] & 0x02 ** 0xa0 - 0x01) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x14;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x6f6e6c79206f776e65722063616e20646f206974000000000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        } else if (!(storage[0x07] & 0xff)) {\n            memory[0x00:0x20] = 0x01;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = block.timestamp;\n            storage[0xe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e2] = temp0;\n            storage[0xe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e3] = temp0 + 0xa8c0;\n            storage[0xe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2f9] = 0x00;\n            storage[0x07] = (storage[0x07] & ~0xff) | 0x01;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1d;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x5468652067616d652068617320616c7265616479207374617274656421000000;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function getPlayerAwardByRndNo(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        memory[r3:r3 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var var1 = r3;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = 0x64;\n        var var9 = 0x2108;\n        var var10 = storage[keccak256(memory[var7:var7 + 0x40])];\n        var var11 = 0x33;\n        var9 = func_245A(var10, var11);\n    \n        if (!var8) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = var9 / var8;\n        var5 = temp0;\n        var8 = 0x2139;\n        var10 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n        var9 = var5;\n        var8 = func_24D7(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = temp1;\n        var temp2 = var8;\n        var5 = temp2;\n        var8 = 0x2173;\n        var9 = var5;\n        var10 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n        var8 = func_245A(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp3 = var8;\n        var8 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n        var5 = temp3;\n        var9 = var5;\n    \n        if (!var8) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var5 = var9 / var8;\n        var8 = 0x64;\n        var9 = 0x21ba;\n        var10 = storage[keccak256(memory[0x00:0x40])];\n        var11 = 0x1e;\n        var9 = func_245A(var10, var11);\n    \n        if (!var8) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp4 = var9 / var8;\n        var6 = temp4;\n        var8 = 0x21eb;\n        var9 = var6;\n        var10 = storage[keccak256(memory[0x00:0x40]) + 0x19];\n        var8 = func_2537(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp5 = var8;\n        var6 = temp5;\n        var8 = 0x2211;\n        var9 = var6;\n        var10 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n        var8 = func_2537(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var6 = var8;\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var8 = storage[keccak256(memory[0x00:0x40]) + 0x06] & temp6 == temp6 & arg1;\n    \n        if (var8) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var8 = !!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01);\n        \n            if (!var8) { goto label_2275; }\n            else { goto label_2260; }\n        } else if (!var8) {\n        label_2275:\n        \n            if (!var8) {\n            label_22AB:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x02;\n            \n                if (block.timestamp <= storage[keccak256(memory[0x00:0x40]) + 0x03]) {\n                label_23FB:\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x03;\n                    var temp7 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = temp7;\n                    arg0 = var5;\n                    var temp8 = keccak256(memory[0x00:0x40]);\n                    r0 = var4;\n                    arg1 = storage[temp8 + 0x03];\n                    r3 = storage[temp8 + 0x02] + storage[temp8 + 0x04];\n                    return r0, arg0, arg1, r3;\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x02;\n                    var temp9 = 0x02 ** 0xa0 - 0x01;\n                \n                    if (storage[keccak256(memory[0x00:0x40]) + 0x05] & temp9 != temp9 & arg1) {\n                    label_2302:\n                        var7 = 0x00;\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x02;\n                    \n                        if (var7 >= 0x0b) { goto label_23FB; }\n                    \n                    label_231A:\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x02;\n                        var8 = arg1 & 0x02 ** 0xa0 - 0x01;\n                        var9 = keccak256(memory[0x00:0x40]) + 0x07;\n                        var10 = var7;\n                    \n                        if (var10 >= 0x0b) { assert(); }\n                    \n                        var temp10 = storage[var10 + var9] & 0x02 ** 0xa0 - 0x01 == var8;\n                        var8 = temp10;\n                    \n                        if (!var8) {\n                        label_2388:\n                        \n                            if (!var8) {\n                            label_23E3:\n                                var8 = 0x23f4;\n                                var9 = var7;\n                                var10 = 0x01;\n                                var8 = func_2537(var9, var10);\n                                var7 = var8;\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x02;\n                            \n                                if (var7 >= 0x0b) { goto label_23FB; }\n                                else { goto label_231A; }\n                            } else {\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x02;\n                            \n                                if (!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01)) {\n                                    var8 = 0x23e0;\n                                    var9 = 0x64;\n                                    var10 = 0x2290;\n                                    var11 = var6;\n                                    var var12 = 0x04;\n                                    var10 = func_245A(var11, var12);\n                                    var8 = func_2290(var4, var9, var10);\n                                    var4 = var8;\n                                    goto label_23E3;\n                                } else {\n                                    var8 = 0x23c3;\n                                    var9 = 0x64;\n                                    var10 = 0x2290;\n                                    var11 = var6;\n                                    var12 = 0x03;\n                                    var10 = func_245A(var11, var12);\n                                    var8 = func_2290(var4, var9, var10);\n                                    var4 = var8;\n                                    goto label_23E3;\n                                }\n                            }\n                        } else {\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x02;\n                            var8 = var7;\n                            var9 = 0x0b;\n                            var10 = 0x237b;\n                            var11 = storage[keccak256(memory[0x00:0x40]) + 0x17];\n                            var12 = 0x01;\n                            var10 = func_24D7(var11, var12);\n                        \n                            if (!var9) { assert(); }\n                        \n                            var8 = var10 % var9 != var8;\n                            goto label_2388;\n                        }\n                    } else {\n                        var8 = 0x22ff;\n                        var9 = 0x64;\n                        var10 = 0x2290;\n                        var11 = var6;\n                        var12 = 0x3c;\n                        var10 = func_245A(var11, var12);\n                        var8 = func_2290(var4, var9, var10);\n                        var4 = var8;\n                        goto label_2302;\n                    }\n                }\n            } else {\n            label_227B:\n                var8 = 0x22a8;\n                var9 = 0x64;\n                var10 = 0x2290;\n                var11 = var6;\n                var12 = 0x0a;\n                var10 = func_245A(var11, var12);\n                var8 = func_2290(var4, var9, var10);\n                var4 = var8;\n                goto label_22AB;\n            }\n        } else {\n        label_2260:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n        \n            if (!storage[keccak256(memory[0x00:0x40]) + 0x04]) { goto label_22AB; }\n            else { goto label_227B; }\n        }\n    }\n    \n    function func_2290(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg1;\n        arg1 = arg0;\n        arg2 = arg2 / temp0;\n        r0 = func_2537(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function isStartGame() returns (var r0) { return storage[0x07] & 0xff; }\n    \n    function receiver() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_245A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var0 = arg1 * temp0;\n            var var1 = arg1;\n            var var2 = temp0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            if (var3 / var2 == var1) {\n            label_24D1:\n                return var0;\n            } else {\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n                memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n                memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d617468206d756c206661696c656400000000000000000000000000;\n                var temp2 = memory[0x40:0x60];\n                revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_24D1;\n        }\n    }\n    \n    function func_24D7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x13;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d61746820737562206661696c656400000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n    }\n    \n    function func_2537(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d61746820616464206661696c656400000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_25B3(var arg0) returns (var r0) {\n        r0 = func_25FD(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_25B8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_24D7(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_25FD(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x09502f90;\n        var var2 = 0x2671;\n        var var3 = 0x03b2a1d15167e7c5699bfde00000;\n        var var4 = 0x25b8;\n        var var5 = 0x266c;\n        var var6 = 0x0dac7055469777a6122ee4310dd6c14410500f2904840000000000;\n        var var7 = 0x09c6;\n        var var8 = 0x01027e72f1f1281308800000;\n        var var9 = 0x2660;\n        var var10 = arg0;\n        var var11 = 0x0de0b6b3a7640000;\n        var9 = func_245A(var10, var11);\n        var7 = func_2660(var8, var9);\n        var5 = func_09C6(var6, var7);\n        var4 = func_266C(var5);\n        var2 = func_25B8(var3, var4);\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_2660(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_245A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_266C(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = 0x26fe;\n        var var4 = arg0;\n        var var5 = 0x01;\n        var3 = func_2537(var4, var5);\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_25D1:\n            return var0;\n        } else {\n        label_2717:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = 0x2730;\n            var4 = var0;\n            var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = func_2729(var1, var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_25D1; }\n            else { goto label_2717; }\n        }\n    }\n    \n    function func_2729(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        arg2 = arg0;\n        r0 = func_2537(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_274D() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x40] = code[code.length:code.length + 0x40];\n        return temp0;\n    }\n    \n    function func_2768() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0:temp0 + 0x03 * 0x20] = code[code.length:code.length + 0x03 * 0x20];\n        return temp0;\n    }\n    \n    function func_2787() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xc0;\n        memory[temp0:temp0 + 0x06 * 0x20] = code[code.length:code.length + 0x06 * 0x20];\n        return temp0;\n    }\n    \n    function func_27A6() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0160;\n        memory[temp0:temp0 + 0x0b * 0x20] = code[code.length:code.length + 0x0b * 0x20];\n        return temp0;\n    }\n    \n    function func_27C6() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x80;\n        memory[temp0:temp0 + 0x04 * 0x20] = code[code.length:code.length + 0x04 * 0x20];\n        return temp0;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00E5:\n            var var0 = msg.sender;\n            var var1 = address(var0).code.length;\n        \n            if (!var1) {\n                var var2 = msg.value;\n            \n                if (var2 < 0x3b9aca00) {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x21;\n                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x706f636b6574206c696e743a206e6f7420612076616c69642063757272656e63;\n                    memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x7900000000000000000000000000000000000000000000000000000000000000;\n                    var temp7 = memory[0x40:0x60];\n                    revert(memory[temp7:temp7 + temp6 - temp7 + 0x84]);\n                } else if (var2 > 0x152d02c7e14af6800000) {\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                    memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x0e;\n                    memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6e6f20766974616c696b2c206e6f000000000000000000000000000000000000;\n                    var temp5 = memory[0x40:0x60];\n                    revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);\n                } else if (!!(storage[0x07] & 0xff) == 0x01) {\n                    var var3 = 0x0268;\n                    var var4 = 0x00;\n                    func_05FF(var4);\n                    stop();\n                } else {\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                    memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1c;\n                    var temp1 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x27e6:0x2806];\n                    var temp2 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp1;\n                    memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp2;\n                    var temp3 = memory[0x40:0x60];\n                    revert(memory[temp3:temp3 + temp0 - temp3 + 0x64]);\n                }\n            } else {\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x11;\n                var temp9 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2806:0x2826];\n                var temp10 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp9;\n                memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n                var temp11 = memory[0x40:0x60];\n                revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x018a25e8) {\n                // Dispatch table entry for getBuyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var1 = getBuyPrice();\n            \n            label_0282:\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x3c28308a) {\n                // Dispatch table entry for rndNo()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = rndNo();\n                goto label_0282;\n            } else if (var0 == 0x3c3c9c23) {\n                // Dispatch table entry for totalEth()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = totalEth();\n                goto label_0282;\n            } else if (var0 == 0x4311de8f) {\n                // Dispatch table entry for ownerWithdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = ownerWithdraw();\n                goto label_0282;\n            } else if (var0 == 0x547e3f06) {\n                // Dispatch table entry for changeReceiver(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeReceiver(var2);\n                stop();\n            } else if (var0 == 0x6561e6ba) {\n                // Dispatch table entry for feeWithdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f4;\n                feeWithdraw();\n                stop();\n            } else if (var0 == 0x747dff42) {\n                // Dispatch table entry for getCurrentRoundInfo()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0320;\n                var2 = 0x00;\n                var3 = 0x157e;\n                var3 = func_274D();\n                var4 = 0x1586;\n                var4 = func_2768();\n                var var5 = 0x158e;\n                var5 = func_274D();\n                var var6 = 0x1596;\n                var6 = func_2787();\n                var var7 = 0x159e;\n                var7 = func_27A6();\n                var var8 = 0x15a6;\n                var8 = func_27C6();\n                memory[0x00:0x20] = storage[0x00];\n                memory[0x20:0x40] = 0x02;\n                var var9 = storage[0x00];\n                var var10 = 0x00;\n                var var11 = 0x1608;\n                var var12 = 0x64;\n                var var13 = 0x15d2;\n                var var14 = storage[keccak256(memory[var10:var10 + 0x40])];\n                var var15 = 0x1e;\n                var13 = func_245A(var14, var15);\n            \n                if (!var12) { assert(); }\n            \n                memory[0x00:0x20] = var9;\n                memory[0x20:0x40] = 0x02;\n                var temp14 = keccak256(memory[0x00:0x40]);\n                var12 = var13 / var12;\n                var14 = storage[temp14 + 0x19];\n                var13 = 0x09c6;\n                var15 = storage[temp14 + 0x1a];\n                var13 = func_2537(var14, var15);\n                var11 = func_09C6(var12, var13);\n                // Error: Could not resolve method call return address!\n            } else if (var0 == 0x7e8ac590) {\n                // Dispatch table entry for round_m(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0456;\n                var2 = msg.data[0x04:0x24];\n                var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12 = round_m(var2);\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2;\n                memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = var3;\n                memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = var4;\n                memory[temp15 + 0x60:temp15 + 0x60 + 0x20] = var5;\n                memory[temp15 + 0x80:temp15 + 0x80 + 0x20] = var6;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                memory[temp15 + 0xa0:temp15 + 0xa0 + 0x20] = temp16 & var7;\n                memory[temp15 + 0xc0:temp15 + 0xc0 + 0x20] = temp16 & var8;\n                memory[temp15 + 0xe0:temp15 + 0xe0 + 0x20] = var9;\n                memory[temp15 + 0x0100:temp15 + 0x0100 + 0x20] = var10;\n                memory[temp15 + 0x0120:temp15 + 0x0120 + 0x20] = var11;\n                memory[temp15 + 0x0140:temp15 + 0x0140 + 0x20] = var12;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + temp15 - temp17 + 0x0160];\n            } else if (var0 == 0x80ec35ff) {\n                // Dispatch table entry for awardByRndNo(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f4;\n                var2 = msg.data[0x04:0x24];\n                awardByRndNo(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e3;\n                var2 = owner();\n            \n            label_04E3:\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + temp18 - temp19 + 0x20];\n            } else if (var0 == 0xa05ce940) {\n                // Dispatch table entry for playerRound_m(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2, var3, var4, var5, var6 = playerRound_m(var2, var3);\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = var2;\n                memory[temp20 + 0x20:temp20 + 0x20 + 0x20] = var3;\n                memory[temp20 + 0x40:temp20 + 0x40 + 0x20] = var4;\n                memory[temp20 + 0x60:temp20 + 0x60 + 0x20] = var5;\n                memory[temp20 + 0x80:temp20 + 0x80 + 0x20] = var6;\n                var temp21 = memory[0x40:0x60];\n                return memory[temp21:temp21 + temp20 - temp21 + 0xa0];\n            } else if (var0 == 0xc5960c29) {\n                // Dispatch table entry for buyKeyByAddr(address)\n                var1 = 0x02f4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                buyKeyByAddr(var2);\n                stop();\n            } else if (var0 == 0xd65ab5f2) {\n                // Dispatch table entry for startGame()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f4;\n                startGame();\n                stop();\n            } else if (var0 == 0xd982466d) {\n                // Dispatch table entry for getPlayerAwardByRndNo(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x059b;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1, var2, var3, var4 = getPlayerAwardByRndNo(var2, var3);\n                var temp22 = memory[0x40:0x60];\n                memory[temp22:temp22 + 0x20] = var1;\n                memory[temp22 + 0x20:temp22 + 0x20 + 0x20] = var2;\n                memory[temp22 + 0x40:temp22 + 0x40 + 0x20] = var3;\n                memory[temp22 + 0x60:temp22 + 0x60 + 0x20] = var4;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + temp22 - temp23 + 0x80];\n            } else if (var0 == 0xe3aae11b) {\n                // Dispatch table entry for isStartGame()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d6;\n                var2 = isStartGame();\n                var temp24 = memory[0x40:0x60];\n                memory[temp24:temp24 + 0x20] = !!var2;\n                var temp25 = memory[0x40:0x60];\n                return memory[temp25:temp25 + temp24 - temp25 + 0x20];\n            } else if (var0 == 0xf7260d3e) {\n                // Dispatch table entry for receiver()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e3;\n                var2 = receiver();\n                goto label_04E3;\n            } else { goto label_00E5; }\n        }\n    }\n    \n    function func_05FF(var arg0) {\n        memory[0x00:0x20] = storage[0x00];\n        memory[0x20:0x40] = 0x02;\n        var var0 = msg.value;\n        var var1 = block.timestamp;\n        var var2 = storage[0x00];\n        var var3 = var0;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = var7;\n    \n        if (var1 <= storage[keccak256(memory[var8:var8 + 0x40]) + 0x03]) {\n        label_083B:\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x02;\n        \n            if (0x0c685fa11e01ec6f000000 <= storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x02;\n            \n                if (var1 > storage[keccak256(memory[0x00:0x40]) + 0x04]) {\n                    var var9 = 0x0ca9;\n                    var var10 = 0xb1a2bc2ec50000;\n                    var var11 = 0x09c6;\n                    var var12 = 0xb1a2bc2ec50000;\n                    var var13 = 0x2a30;\n                    var var14 = 0x0c93;\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var var15 = var1;\n                    var var16 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                    var14 = func_24D7(var15, var16);\n                    var11 = func_0C93(var12, var13, var14);\n                    var9 = func_09C6(var10, var11);\n                    var3 = var9;\n                \n                    if (var0 < var3) {\n                        var temp20 = memory[0x40:0x60];\n                        memory[temp20:temp20 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n                        memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x15;\n                        memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x457468657220616d6f756e742069732077726f6e670000000000000000000000;\n                        var temp21 = memory[0x40:0x60];\n                        revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n                    } else if (var0 <= var3) {\n                    label_0D49:\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x02;\n                        var temp0 = keccak256(memory[0x00:0x40]);\n                        storage[temp0 + 0x03] = var1 + 0x0384;\n                        var temp1 = temp0 + 0x05;\n                        var temp2 = msg.sender;\n                        storage[temp1] = temp2 | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        memory[0x20:0x40] = 0x03;\n                        var temp3 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = temp3;\n                        var9 = 0x0dad;\n                        var10 = var3;\n                        var11 = storage[keccak256(memory[0x00:0x40])];\n                        var9 = func_2537(var10, var11);\n                        var temp4 = var2;\n                        memory[0x00:0x20] = temp4;\n                        memory[0x20:0x40] = 0x03;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp5;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                        memory[0x00:0x20] = temp4;\n                        memory[0x20:0x40] = 0x02;\n                        var9 = 0x0de4;\n                        var10 = var3;\n                        var11 = storage[keccak256(memory[0x00:0x40])];\n                        var9 = func_2537(var10, var11);\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x02;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                        var9 = 0x0e07;\n                        var10 = var3;\n                        var11 = storage[0x01];\n                        var9 = func_2537(var10, var11);\n                        storage[0x01] = var9;\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x02;\n                        var9 = 0x0e3e;\n                        var10 = 0x01;\n                        var11 = 0x09c6;\n                        var12 = var10;\n                        var13 = 0x2a30;\n                        var14 = 0x0c93;\n                        var16 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                        var15 = var1;\n                        var14 = func_24D7(var15, var16);\n                        var11 = func_0C93(var12, var13, var14);\n                        var9 = func_09C6(var10, var11);\n                        var8 = var9;\n                    \n                        if (var8 < 0x019a) {\n                            memory[0x00:0x20] = var2;\n                            memory[0x20:0x40] = 0x02;\n                            var10 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n                            var9 = 0x0e8d;\n                            var11 = 0x03e8;\n                            var12 = 0x0e77;\n                            var13 = var8;\n                            var14 = var3;\n                            var12 = func_245A(var13, var14);\n                            var9 = func_0E77(var10, var11, var12);\n                        \n                        label_0E8D:\n                            var temp6 = var2;\n                            memory[0x00:0x20] = temp6;\n                            memory[0x20:0x40] = 0x02;\n                            storage[keccak256(memory[0x00:0x40]) + 0x1a] = var9;\n                            var temp7 = memory[0x40:0x60];\n                            memory[temp7:temp7 + 0x20] = var3;\n                            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var1;\n                            var temp8 = memory[0x40:0x60];\n                            var temp9 = arg0;\n                            log(memory[temp8:temp8 + temp7 - temp8 + 0x40], [0x7cfc1da3c0c40e1670d11d884a3776eb3a8949e87b844c6dac43b5c9c3dc5f7e, msg.sender, stack[-8], stack[-11] & 0x02 ** 0xa0 - 0x01]);\n                            var9 = !!(temp9 & 0x02 ** 0xa0 - 0x01);\n                        \n                            if (temp9 & 0x02 ** 0xa0 - 0x01) {\n                                var9 = 0x0f09;\n                                var10 = arg0;\n                                var12 = address(var10).code.length;\n                                var11 = !var12;\n                                var9 = var11;\n                                // Error: Could not resolve jump destination!\n                            } else if (!var9) {\n                            label_1008:\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                var temp10 = keccak256(memory[0x00:0x40]);\n                                var9 = temp10 + 0x07;\n                                var10 = storage[temp10 + 0x17] % 0x0b;\n                            \n                                if (var10 >= 0x0b) { assert(); }\n                            \n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                var temp11 = keccak256(memory[0x00:0x40]);\n                                var9 = storage[var10 + var9] & 0x02 ** 0xa0 - 0x01;\n                                var10 = temp11 + 0x12;\n                                var11 = storage[temp11 + 0x17] & 0x03;\n                            \n                                if (var11 >= 0x04) { assert(); }\n                            \n                                var temp12 = var11 + var10;\n                                storage[temp12] = (var9 & 0x02 ** 0xa0 - 0x01) | (storage[temp12] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                var temp13 = keccak256(memory[0x00:0x40]);\n                                var9 = msg.sender;\n                                var10 = temp13 + 0x07;\n                                var11 = storage[temp13 + 0x17] % 0x0b;\n                            \n                                if (var11 >= 0x0b) { assert(); }\n                            \n                                var temp14 = var11 + var10;\n                                storage[temp14] = (var9 & 0x02 ** 0xa0 - 0x01) | (storage[temp14] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                var9 = 0x10ff;\n                                var10 = storage[keccak256(memory[0x00:0x40]) + 0x17];\n                                var11 = 0x01;\n                                var9 = func_2537(var10, var11);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                storage[keccak256(memory[0x00:0x40]) + 0x17] = var9;\n                                return;\n                            } else {\n                                var9 = 0x0f76;\n                                var10 = 0x64;\n                                var11 = 0x0f24;\n                                var12 = var3;\n                                var13 = 0x0a;\n                                var11 = func_245A(var12, var13);\n                                var9 = func_0F24(arg0, var2, var10, var11);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x03;\n                                var temp15 = keccak256(memory[0x00:0x40]);\n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = temp15;\n                                storage[keccak256(memory[0x00:0x40]) + 0x03] = var9;\n                                var9 = 0x0ff5;\n                                var10 = 0x64;\n                                var11 = 0x0fcc;\n                                var12 = var3;\n                                var13 = 0x0a;\n                                var11 = func_245A(var12, var13);\n                                var9 = func_0FCC(var2, var10, var11);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                storage[keccak256(memory[0x00:0x40]) + 0x18] = var9;\n                                goto label_1008;\n                            }\n                        } else {\n                            var8 = 0x019a;\n                            memory[0x00:0x20] = var2;\n                            memory[0x20:0x40] = 0x02;\n                            var9 = 0x0e8d;\n                            var10 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n                            var11 = 0x03e8;\n                            var12 = 0x0e77;\n                            var13 = var8;\n                            var14 = var3;\n                            var12 = func_245A(var13, var14);\n                            var9 = func_0E77(var10, var11, var12);\n                            goto label_0E8D;\n                        }\n                    } else {\n                        var9 = msg.sender;\n                        var10 = 0x08fc;\n                        var11 = 0x0d1f;\n                        var12 = var0;\n                        var13 = var3;\n                        var11 = func_24D7(var12, var13);\n                        var temp16 = memory[0x40:0x60];\n                        var temp17 = var11;\n                        var temp18;\n                        temp18, memory[temp16:temp16 + 0x00] = address(var9).call.gas(var10 * !temp17).value(temp17)(memory[temp16:temp16 + 0x00]);\n                        var9 = !temp18;\n                    \n                        if (!var9) { goto label_0D49; }\n                    \n                        var temp19 = returndata.length;\n                        memory[0x00:0x00 + temp19] = returndata[0x00:0x00 + temp19];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp22 = memory[0x40:0x60];\n                    memory[temp22:temp22 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp22 + 0x04:temp22 + 0x04 + 0x20] = 0x20;\n                    memory[temp22 + 0x24:temp22 + 0x24 + 0x20] = 0x1e;\n                    memory[temp22 + 0x44:temp22 + 0x44 + 0x20] = 0x546865207669727573206973206265696e672070726570617265642e2e2e0000;\n                    var temp23 = memory[0x40:0x60];\n                    revert(memory[temp23:temp23 + temp22 - temp23 + 0x64]);\n                }\n            } else {\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x02;\n                var9 = 0x087e;\n                var10 = storage[keccak256(memory[0x00:0x40])];\n                var11 = var0;\n                var12 = 0x00;\n                var13 = 0x25c4;\n                var14 = 0x25a0;\n                var15 = var10;\n                var14 = func_25FD(var15);\n                var15 = 0x25b8;\n                var16 = 0x25b3;\n                var var17 = var10;\n                var var18 = var11;\n                var16 = func_2537(var17, var18);\n                var15 = func_25B3(var16);\n                var13 = func_25B8(var14, var15);\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x02;\n        \n            if (var1 > storage[keccak256(memory[0x00:0x40]) + 0x03] + 0xa8c0) {\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x02;\n                var temp24 = keccak256(memory[0x00:0x40]);\n                var9 = 0x06da;\n                var10 = storage[temp24 + 0x18];\n                var11 = 0x64;\n                var13 = storage[temp24];\n                var12 = 0x06c4;\n                var14 = 0x0e;\n                var12 = func_245A(var13, var14);\n                var9 = func_06C4(var10, var11, var12);\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x02;\n                var4 = var9;\n            \n                if (0x0b <= storage[keccak256(memory[0x00:0x40]) + 0x17]) {\n                label_07F6:\n                    var9 = 0x0807;\n                    var10 = var2;\n                    var11 = 0x01;\n                    var9 = func_2537(var10, var11);\n                    var temp25 = var9;\n                    storage[0x00] = temp25;\n                    memory[0x00:0x20] = temp25;\n                    memory[0x20:0x40] = 0x02;\n                    var temp26 = keccak256(memory[0x00:0x40]);\n                    var temp27 = var1;\n                    storage[temp26 + 0x02] = temp27;\n                    storage[temp26 + 0x03] = temp27 + 0xa8c0;\n                    storage[temp26 + 0x17] = 0x00;\n                    storage[temp26 + 0x19] = var4;\n                    var2 = temp25;\n                    goto label_083B;\n                } else {\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var9 = 0x071b;\n                    var11 = storage[keccak256(memory[0x00:0x40]) + 0x17];\n                    var10 = 0x0b;\n                    var9 = func_24D7(var10, var11);\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var5 = var9;\n                    var9 = 0x64;\n                    var10 = 0x0741;\n                    var11 = storage[keccak256(memory[0x00:0x40])];\n                    var12 = 0x1e;\n                    var10 = func_245A(var11, var12);\n                \n                    if (!var9) { assert(); }\n                \n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var temp28 = var10 / var9;\n                    var6 = temp28;\n                    var9 = 0x0772;\n                    var11 = storage[keccak256(memory[0x00:0x40]) + 0x19];\n                    var10 = var6;\n                    var9 = func_2537(var10, var11);\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var6 = var9;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01)) {\n                        var9 = 0x07f3;\n                        var10 = 0x07c6;\n                        var11 = 0x64;\n                        var12 = 0x07ae;\n                        var13 = var6;\n                        var14 = 0x04;\n                        var12 = func_245A(var13, var14);\n                        var10 = func_07AE(var5, var11, var12);\n                        var9 = func_07C6(var4, var10);\n                        var4 = var9;\n                        goto label_07F6;\n                    } else {\n                        var9 = 0x07d3;\n                        var10 = 0x07c6;\n                        var11 = 0x64;\n                        var12 = 0x07ae;\n                        var13 = var6;\n                        var14 = 0x03;\n                        var12 = func_245A(var13, var14);\n                        var10 = func_07AE(var5, var11, var12);\n                        var9 = func_07C6(var4, var10);\n                        var4 = var9;\n                        goto label_07F6;\n                    }\n                }\n            } else {\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = 0x20;\n                memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = 0x18;\n                memory[temp29 + 0x44:temp29 + 0x44 + 0x20] = 0x77652073686f756c64207761697420736f6d652074696d650000000000000000;\n                var temp30 = memory[0x40:0x60];\n                revert(memory[temp30:temp30 + temp29 - temp30 + 0x64]);\n            }\n        }\n    }\n    \n    function func_06C4(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg0;\n        arg0 = arg2 / arg1;\n        arg1 = temp0;\n        r0 = func_24D7(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_07AE(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg1;\n        arg1 = arg0;\n        arg2 = arg2 / temp0;\n        r0 = func_245A(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_07C6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_2537(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_09C6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_2537(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0C93(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg0;\n        arg0 = arg2 / arg1;\n        arg1 = temp0;\n        r0 = func_245A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0E77(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg0;\n        arg0 = arg2 / arg1;\n        arg1 = temp0;\n        r0 = func_2537(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0F24(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        if (!arg2) { assert(); }\n    \n        var temp0 = arg3 / arg2;\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = temp1;\n        arg2 = storage[keccak256(memory[0x00:0x40]) + 0x03];\n        arg3 = temp0;\n        r0 = func_2537(arg2, arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0FCC(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = arg1;\n        arg1 = storage[keccak256(memory[0x00:0x40]) + 0x18];\n        arg2 = arg2 / temp0;\n        r0 = func_2537(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getBuyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[var0];\n        memory[var0:var0 + 0x20] = var1;\n        memory[0x20:0x40] = 0x02;\n        var var2 = block.timestamp;\n        var var3 = var0;\n    \n        if (var2 <= storage[keccak256(memory[var3:var3 + 0x40]) + 0x03]) {\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x02;\n        \n            if (0x0c685fa11e01ec6f000000 <= storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x02;\n                var var4 = 0x0c685fa11e01ec6f000000 > storage[keccak256(memory[0x00:0x40]) + 0x01];\n            \n                if (0x0c685fa11e01ec6f000000 > storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                    memory[0x00:0x20] = var1;\n                    memory[0x20:0x40] = 0x02;\n                    var4 = !!storage[keccak256(memory[0x00:0x40]) + 0x04];\n                \n                    if (!var4) { goto label_1216; }\n                    else { goto label_11F8; }\n                } else if (!var4) {\n                label_1216:\n                \n                    if (!var4) {\n                    label_1232:\n                    \n                        if (!var4) {\n                        label_1246:\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x02;\n                            var4 = 0x0c685fa11e01ec6f000000 > storage[keccak256(memory[0x00:0x40]) + 0x01];\n                        \n                            if (0x0c685fa11e01ec6f000000 > storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                                memory[0x00:0x20] = var1;\n                                memory[0x20:0x40] = 0x02;\n                            \n                                if (var2 <= storage[keccak256(memory[0x00:0x40]) + 0x04]) { goto label_12D3; }\n                                else { goto label_1288; }\n                            } else if (!var4) {\n                            label_12D3:\n                                var0 = 0x00;\n                            \n                            label_12D8:\n                                return var0;\n                            } else {\n                            label_1288:\n                                var4 = 0x12c9;\n                                var var5 = 0xb1a2bc2ec50000;\n                                var var6 = 0x09c6;\n                                var var7 = 0xb1a2bc2ec50000;\n                                var var8 = 0x2a30;\n                                var var9 = 0x0c93;\n                                memory[0x00:0x20] = var1;\n                                memory[0x20:0x40] = 0x02;\n                                var var10 = var2;\n                                var var11 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                                var9 = func_24D7(var10, var11);\n                                var6 = func_0C93(var7, var8, var9);\n                                var4 = func_09C6(var5, var6);\n                                var3 = var4;\n                                var0 = var3;\n                                goto label_12D8;\n                            }\n                        } else {\n                        label_1238:\n                            var0 = 0xb1a2bc2ec50000;\n                            goto label_12D8;\n                        }\n                    } else {\n                    label_121D:\n                        memory[0x00:0x20] = var1;\n                        memory[0x20:0x40] = 0x02;\n                    \n                        if (var2 >= storage[keccak256(memory[0x00:0x40]) + 0x04]) { goto label_1246; }\n                        else { goto label_1238; }\n                    }\n                } else {\n                label_11F8:\n                    memory[0x00:0x20] = var1;\n                    memory[0x20:0x40] = 0x02;\n                    var4 = !!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01);\n                \n                    if (!var4) { goto label_1232; }\n                    else { goto label_121D; }\n                }\n            } else {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x02;\n                var4 = 0x11ae;\n                var5 = 0x8ac7230489e80000;\n                var7 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                var6 = 0x11a2;\n                var8 = var5;\n                var6 = func_2537(var7, var8);\n                var temp0 = var5;\n                var5 = var6;\n                var6 = temp0;\n                var7 = 0x00;\n                var8 = 0x25c4;\n                var9 = 0x25f4;\n                var10 = 0x25ef;\n                var11 = var5;\n                var var12 = var6;\n                var10 = func_24D7(var11, var12);\n                var11 = 0x00;\n                var12 = 0x2694;\n                var var13 = 0x0de0b6b3a7640000;\n                var var14 = 0x00;\n                var var15 = 0x24d1;\n                var var16 = var13;\n                var var17 = var16;\n                var15 = func_245A(var16, var17);\n                var12 = var15;\n                // Error: Could not resolve jump destination!\n            }\n        } else {\n            var0 = 0x02aa209ead3c50;\n            goto label_12D8;\n        }\n    }\n    \n    function rndNo() returns (var r0) { return storage[0x00]; }\n    \n    function totalEth() returns (var r0) { return storage[0x01]; }\n    \n    function ownerWithdraw() returns (var r0) { return storage[0x06]; }\n    \n    function changeReceiver(var arg0) {\n        if (msg.sender == storage[0x04] & 0x02 ** 0xa0 - 0x01) {\n            storage[0x05] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x05] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x14;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6f6e6c79206f776e65722063616e20646f206974000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        }\n    }\n    \n    function feeWithdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = msg.sender;\n        var var3 = address(var2).code.length;\n    \n        if (var3) {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x11;\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2806:0x2826];\n            var temp14 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp13;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = temp14;\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + temp12 - temp15 + 0x64]);\n        } else if (!!(storage[0x07] & 0xff) != 0x01) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x1c;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x27e6:0x2806];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n        } else if (storage[0x05] & 0x02 ** 0xa0 - 0x01) {\n            var var4 = 0x64;\n            var var5 = 0x14b7;\n            var var6 = storage[0x01];\n            var var7 = 0x05;\n            var5 = func_245A(var6, var7);\n        \n            if (!var4) { assert(); }\n        \n            var0 = var5 / var4;\n            var1 = storage[0x06];\n        \n            if (var0 > var1) {\n                storage[0x06] = var0;\n                var4 = storage[0x05] & 0x02 ** 0xa0 - 0x01;\n                var5 = 0x08fc;\n                var6 = 0x1545;\n                var7 = var0;\n                var var8 = var1;\n                var6 = func_24D7(var7, var8);\n                var temp0 = memory[0x40:0x60];\n                var temp1 = var6;\n                var temp2;\n                temp2, memory[temp0:temp0 + 0x00] = address(var4).call.gas(var5 * !temp1).value(temp1)(memory[temp0:temp0 + 0x00]);\n                var4 = !temp2;\n            \n                if (!var4) { return; }\n            \n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x13;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x4e6f206e65656420746f20776974686472617700000000000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x2e;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x546865207265636569766572206164647265737320686173206e6f7420626565;\n            memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x6e20696e697469616c697a65642e000000000000000000000000000000000000;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp6 - temp7 + 0x84]);\n        }\n    }\n    \n    function round_m(var arg0) returns (var arg0, var r1, var r2, var r3, var r4, var r5, var r6, var r7, var r8, var r9, var r10) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02];\n        r3 = storage[temp0 + 0x03];\n        r4 = storage[temp0 + 0x04];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        r5 = temp1 & storage[temp0 + 0x05];\n        r6 = temp1 & storage[temp0 + 0x06];\n        r7 = storage[temp0 + 0x17];\n        r9 = storage[temp0 + 0x19];\n        r8 = storage[temp0 + 0x18];\n        r10 = storage[temp0 + 0x1a];\n        return arg0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;\n    }\n    \n    function awardByRndNo(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = msg.sender;\n        var var8 = address(var7).code.length;\n    \n        if (var8) {\n            var temp29 = memory[0x40:0x60];\n            memory[temp29:temp29 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = 0x20;\n            memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = 0x11;\n            var temp30 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2806:0x2826];\n            var temp31 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp30;\n            memory[temp29 + 0x44:temp29 + 0x44 + 0x20] = temp31;\n            var temp32 = memory[0x40:0x60];\n            revert(memory[temp32:temp32 + temp29 - temp32 + 0x64]);\n        } else if (!!(storage[0x07] & 0xff) != 0x01) {\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n            memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x1c;\n            var temp26 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x27e6:0x2806];\n            var temp27 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp26;\n            memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = temp27;\n            var temp28 = memory[0x40:0x60];\n            revert(memory[temp28:temp28 + temp25 - temp28 + 0x64]);\n        } else if (arg0 <= storage[0x00]) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var0 = 0x00;\n            var var9 = 0x64;\n            var var10 = 0x18fe;\n            var var11 = storage[keccak256(memory[var0:var0 + 0x40])];\n            var var12 = 0x1e;\n            var10 = func_245A(var11, var12);\n        \n            if (!var9) { assert(); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = var10 / var9;\n            var1 = temp0;\n            var9 = 0x192f;\n            var10 = var1;\n            var11 = storage[keccak256(memory[0x00:0x40]) + 0x19];\n            var9 = func_2537(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = var9;\n            var1 = temp1;\n            var9 = 0x1955;\n            var10 = var1;\n            var11 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n            var9 = func_2537(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var1 = var9;\n            var2 = 0x00;\n            var9 = 0x64;\n            var11 = storage[keccak256(memory[var2:var2 + 0x40])];\n            var10 = 0x197d;\n            var12 = 0x33;\n            var10 = func_245A(var11, var12);\n        \n            if (!var9) { assert(); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = var10 / var9;\n            var3 = temp2;\n            var9 = 0x19ae;\n            var11 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n            var10 = var3;\n            var9 = func_24D7(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp3;\n            var temp4 = var9;\n            var3 = temp4;\n            var9 = 0x19df;\n            var10 = var3;\n            var11 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n            var9 = func_245A(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var temp5 = var9;\n            var9 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n            var3 = temp5;\n            var10 = var3;\n        \n            if (!var9) { assert(); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp6;\n            var temp7 = var10 / var9;\n            var3 = temp7;\n            var4 = storage[keccak256(memory[0x00:0x40]) + 0x03];\n            var9 = 0x1a31;\n            var10 = var3;\n            var11 = var4;\n            var9 = func_2537(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp8;\n            var3 = var9;\n            var5 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n        \n            if (var3 <= var5) {\n            label_1A9D:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x02;\n                var9 = msg.sender == storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01;\n            \n                if (var9) {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x02;\n                    var9 = !!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01);\n                \n                    if (!var9) { goto label_1AFB; }\n                    else { goto label_1AE6; }\n                } else if (!var9) {\n                label_1AFB:\n                \n                    if (!var9) {\n                    label_1B31:\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x02;\n                    \n                        if (block.timestamp <= storage[keccak256(memory[0x00:0x40]) + 0x03]) {\n                        label_1CF1:\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x03;\n                            var temp9 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = temp9;\n                            var9 = 0x1d23;\n                            var10 = 0x1a6e;\n                            var11 = var2;\n                            var12 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                            var10 = func_24D7(var11, var12);\n                            var9 = func_1A6E(var0, var10);\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x03;\n                            var temp10 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = temp10;\n                            storage[keccak256(memory[0x00:0x40]) + 0x04] = var2;\n                            var0 = var9;\n                        \n                            if (!var0) {\n                            label_1D79:\n                                var temp11 = memory[0x40:0x60];\n                                memory[temp11:temp11 + 0x20] = var0;\n                                memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = block.timestamp;\n                                var temp12 = memory[0x40:0x60];\n                                log(memory[temp12:temp12 + temp11 - temp12 + 0x40], [0x067aa1d7e7bd2c0daf878a68551cbd9e1a4dbaaa1510600154c71bffbe420d86, msg.sender, stack[-10]]);\n                                return;\n                            } else {\n                                var temp13 = memory[0x40:0x60];\n                                var temp14 = var0;\n                                var temp15;\n                                temp15, memory[temp13:temp13 + 0x00] = address(msg.sender).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp13:temp13 + 0x00]);\n                                var9 = !temp15;\n                            \n                                if (!var9) { goto label_1D79; }\n                            \n                                var temp16 = returndata.length;\n                                memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x02;\n                        \n                            if (msg.sender != storage[keccak256(memory[0x00:0x40]) + 0x05] & 0x02 ** 0xa0 - 0x01) {\n                            label_1B85:\n                                var6 = 0x00;\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x02;\n                            \n                                if (var6 >= 0x0b) { goto label_1CF1; }\n                            \n                            label_1B9E:\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x02;\n                                var9 = msg.sender;\n                                var10 = keccak256(memory[0x00:0x40]) + 0x07;\n                                var11 = var6;\n                            \n                                if (var11 >= 0x0b) { assert(); }\n                            \n                                var temp17 = storage[var11 + var10] & 0x02 ** 0xa0 - 0x01 == var9;\n                                var9 = temp17;\n                            \n                                if (!var9) {\n                                label_1C03:\n                                \n                                    if (!var9) {\n                                    label_1CD9:\n                                        var9 = 0x1cea;\n                                        var10 = var6;\n                                        var11 = 0x01;\n                                        var9 = func_2537(var10, var11);\n                                        var6 = var9;\n                                        memory[0x00:0x20] = arg0;\n                                        memory[0x20:0x40] = 0x02;\n                                    \n                                        if (var6 >= 0x0b) { goto label_1CF1; }\n                                        else { goto label_1B9E; }\n                                    } else {\n                                        memory[0x00:0x20] = arg0;\n                                        memory[0x20:0x40] = 0x02;\n                                        var9 = keccak256(memory[0x00:0x40]) + 0x16;\n                                        var10 = var6;\n                                    \n                                        if (var10 >= 0x0b) { assert(); }\n                                    \n                                        var temp18 = var10;\n                                    \n                                        if (storage[var9 + temp18 / 0x20] / 0x0100 ** (temp18 & 0x1f) & 0xff) { goto label_1CD9; }\n                                    \n                                        memory[0x00:0x20] = arg0;\n                                        memory[0x20:0x40] = 0x02;\n                                    \n                                        if (!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01)) {\n                                            var9 = 0x1c97;\n                                            var10 = 0x64;\n                                            var11 = 0x1b16;\n                                            var12 = var1;\n                                            var var13 = 0x04;\n                                            var11 = func_245A(var12, var13);\n                                            var9 = func_1B16(var2, var10, var11);\n                                            var2 = var9;\n                                            memory[0x00:0x20] = arg0;\n                                            memory[0x20:0x40] = 0x02;\n                                            var9 = 0x01;\n                                            var10 = keccak256(memory[0x00:0x40]) + 0x16;\n                                            var11 = var6;\n                                        \n                                            if (var11 >= 0x0b) { assert(); }\n                                        \n                                        label_1CB9:\n                                            var temp19 = var11;\n                                            var temp20 = temp19 / 0x20 + var10;\n                                            var temp21 = 0x0100 ** (temp19 % 0x20);\n                                            storage[temp20] = !!var9 * temp21 | (~(temp21 * 0xff) & storage[temp20]);\n                                            goto label_1CD9;\n                                        } else {\n                                            var9 = 0x1c7a;\n                                            var10 = 0x64;\n                                            var11 = 0x1b16;\n                                            var12 = var1;\n                                            var13 = 0x03;\n                                            var11 = func_245A(var12, var13);\n                                            var9 = func_1B16(var2, var10, var11);\n                                            var2 = var9;\n                                            memory[0x00:0x20] = arg0;\n                                            memory[0x20:0x40] = 0x02;\n                                            var9 = 0x01;\n                                            var10 = keccak256(memory[0x00:0x40]) + 0x16;\n                                            var11 = var6;\n                                        \n                                            if (var11 < 0x0b) { goto label_1CB9; }\n                                            else { assert(); }\n                                        }\n                                    }\n                                } else {\n                                    memory[0x00:0x20] = arg0;\n                                    memory[0x20:0x40] = 0x02;\n                                    var9 = var6;\n                                    var10 = 0x0b;\n                                    var12 = storage[keccak256(memory[0x00:0x40]) + 0x17];\n                                    var11 = 0x1bf6;\n                                    var13 = 0x01;\n                                    var11 = func_24D7(var12, var13);\n                                \n                                    if (!var10) { assert(); }\n                                \n                                    var9 = var11 % var10 != var9;\n                                    goto label_1C03;\n                                }\n                            } else {\n                                var9 = 0x1b82;\n                                var10 = 0x64;\n                                var11 = 0x1b16;\n                                var12 = var1;\n                                var13 = 0x3c;\n                                var11 = func_245A(var12, var13);\n                                var9 = func_1B16(var2, var10, var11);\n                                var2 = var9;\n                                goto label_1B85;\n                            }\n                        }\n                    } else {\n                    label_1B01:\n                        var9 = 0x1b2e;\n                        var10 = 0x64;\n                        var11 = 0x1b16;\n                        var12 = var1;\n                        var13 = 0x0a;\n                        var11 = func_245A(var12, var13);\n                        var9 = func_1B16(var2, var10, var11);\n                        var2 = var9;\n                        goto label_1B31;\n                    }\n                } else {\n                label_1AE6:\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x02;\n                \n                    if (!storage[keccak256(memory[0x00:0x40]) + 0x04]) { goto label_1B31; }\n                    else { goto label_1B01; }\n                }\n            } else {\n                var9 = 0x1a7b;\n                var10 = 0x1a6e;\n                var11 = var3;\n                var12 = var5;\n                var10 = func_24D7(var11, var12);\n                var9 = func_1A6E(var0, var10);\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x03;\n                var temp22 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp22;\n                storage[keccak256(memory[0x00:0x40]) + 0x02] = var3;\n                var0 = var9;\n                goto label_1A9D;\n            }\n        } else {\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp23 + 0x04:temp23 + 0x04 + 0x20] = 0x20;\n            memory[temp23 + 0x24:temp23 + 0x24 + 0x20] = 0x17;\n            memory[temp23 + 0x44:temp23 + 0x44 + 0x20] = 0x596f752772652072756e6e696e6720746f6f2066617374000000000000000000;\n            var temp24 = memory[0x40:0x60];\n            revert(memory[temp24:temp24 + temp23 - temp24 + 0x64]);\n        }\n    }\n    \n    function func_1A6E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_2537(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1B16(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg1;\n        arg1 = arg0;\n        arg2 = arg2 / temp0;\n        r0 = func_2537(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function owner() returns (var r0) { return storage[0x04] & 0x02 ** 0xa0 - 0x01; }\n    \n    function playerRound_m(var arg0, var arg1) returns (var arg0, var arg1, var r2, var r3, var r4) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        arg1 = storage[temp0 + 0x01];\n        r3 = storage[temp0 + 0x03];\n        r2 = storage[temp0 + 0x02];\n        r4 = storage[temp0 + 0x04];\n        return arg0, arg1, r2, r3, r4;\n    }\n    \n    function buyKeyByAddr(var arg0) {\n        var var0 = msg.sender;\n        var var1 = address(var0).code.length;\n    \n        if (!var1) {\n            var var2 = msg.value;\n        \n            if (var2 < 0x3b9aca00) {\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x21;\n                memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x706f636b6574206c696e743a206e6f7420612076616c69642063757272656e63;\n                memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x7900000000000000000000000000000000000000000000000000000000000000;\n                var temp7 = memory[0x40:0x60];\n                revert(memory[temp7:temp7 + temp6 - temp7 + 0x84]);\n            } else if (var2 > 0x152d02c7e14af6800000) {\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x0e;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6e6f20766974616c696b2c206e6f000000000000000000000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);\n            } else if (!!(storage[0x07] & 0xff) == 0x01) {\n                var var3 = 0x1f8c;\n                var var4 = arg0;\n                func_05FF(var4);\n                return;\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1c;\n                var temp1 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x27e6:0x2806];\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp1;\n                memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp2;\n                var temp3 = memory[0x40:0x60];\n                revert(memory[temp3:temp3 + temp0 - temp3 + 0x64]);\n            }\n        } else {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x11;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2806:0x2826];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n        }\n    }\n    \n    function startGame() {\n        if (msg.sender != storage[0x04] & 0x02 ** 0xa0 - 0x01) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x14;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x6f6e6c79206f776e65722063616e20646f206974000000000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        } else if (!(storage[0x07] & 0xff)) {\n            memory[0x00:0x20] = 0x01;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = block.timestamp;\n            storage[0xe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e2] = temp0;\n            storage[0xe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e3] = temp0 + 0xa8c0;\n            storage[0xe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2f9] = 0x00;\n            storage[0x07] = (storage[0x07] & ~0xff) | 0x01;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1d;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x5468652067616d652068617320616c7265616479207374617274656421000000;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function getPlayerAwardByRndNo(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        memory[r3:r3 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var var1 = r3;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = 0x64;\n        var var9 = 0x2108;\n        var var10 = storage[keccak256(memory[var7:var7 + 0x40])];\n        var var11 = 0x33;\n        var9 = func_245A(var10, var11);\n    \n        if (!var8) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = var9 / var8;\n        var5 = temp0;\n        var8 = 0x2139;\n        var10 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n        var9 = var5;\n        var8 = func_24D7(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = temp1;\n        var temp2 = var8;\n        var5 = temp2;\n        var8 = 0x2173;\n        var9 = var5;\n        var10 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n        var8 = func_245A(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp3 = var8;\n        var8 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n        var5 = temp3;\n        var9 = var5;\n    \n        if (!var8) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var5 = var9 / var8;\n        var8 = 0x64;\n        var9 = 0x21ba;\n        var10 = storage[keccak256(memory[0x00:0x40])];\n        var11 = 0x1e;\n        var9 = func_245A(var10, var11);\n    \n        if (!var8) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp4 = var9 / var8;\n        var6 = temp4;\n        var8 = 0x21eb;\n        var9 = var6;\n        var10 = storage[keccak256(memory[0x00:0x40]) + 0x19];\n        var8 = func_2537(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp5 = var8;\n        var6 = temp5;\n        var8 = 0x2211;\n        var9 = var6;\n        var10 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n        var8 = func_2537(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var6 = var8;\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var8 = storage[keccak256(memory[0x00:0x40]) + 0x06] & temp6 == temp6 & arg1;\n    \n        if (var8) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var8 = !!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01);\n        \n            if (!var8) { goto label_2275; }\n            else { goto label_2260; }\n        } else if (!var8) {\n        label_2275:\n        \n            if (!var8) {\n            label_22AB:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x02;\n            \n                if (block.timestamp <= storage[keccak256(memory[0x00:0x40]) + 0x03]) {\n                label_23FB:\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x03;\n                    var temp7 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = temp7;\n                    arg0 = var5;\n                    var temp8 = keccak256(memory[0x00:0x40]);\n                    r0 = var4;\n                    arg1 = storage[temp8 + 0x03];\n                    r3 = storage[temp8 + 0x02] + storage[temp8 + 0x04];\n                    return r0, arg0, arg1, r3;\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x02;\n                    var temp9 = 0x02 ** 0xa0 - 0x01;\n                \n                    if (storage[keccak256(memory[0x00:0x40]) + 0x05] & temp9 != temp9 & arg1) {\n                    label_2302:\n                        var7 = 0x00;\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x02;\n                    \n                        if (var7 >= 0x0b) { goto label_23FB; }\n                    \n                    label_231A:\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x02;\n                        var8 = arg1 & 0x02 ** 0xa0 - 0x01;\n                        var9 = keccak256(memory[0x00:0x40]) + 0x07;\n                        var10 = var7;\n                    \n                        if (var10 >= 0x0b) { assert(); }\n                    \n                        var temp10 = storage[var10 + var9] & 0x02 ** 0xa0 - 0x01 == var8;\n                        var8 = temp10;\n                    \n                        if (!var8) {\n                        label_2388:\n                        \n                            if (!var8) {\n                            label_23E3:\n                                var8 = 0x23f4;\n                                var9 = var7;\n                                var10 = 0x01;\n                                var8 = func_2537(var9, var10);\n                                var7 = var8;\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x02;\n                            \n                                if (var7 >= 0x0b) { goto label_23FB; }\n                                else { goto label_231A; }\n                            } else {\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x02;\n                            \n                                if (!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01)) {\n                                    var8 = 0x23e0;\n                                    var9 = 0x64;\n                                    var10 = 0x2290;\n                                    var11 = var6;\n                                    var var12 = 0x04;\n                                    var10 = func_245A(var11, var12);\n                                    var8 = func_2290(var4, var9, var10);\n                                    var4 = var8;\n                                    goto label_23E3;\n                                } else {\n                                    var8 = 0x23c3;\n                                    var9 = 0x64;\n                                    var10 = 0x2290;\n                                    var11 = var6;\n                                    var12 = 0x03;\n                                    var10 = func_245A(var11, var12);\n                                    var8 = func_2290(var4, var9, var10);\n                                    var4 = var8;\n                                    goto label_23E3;\n                                }\n                            }\n                        } else {\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x02;\n                            var8 = var7;\n                            var9 = 0x0b;\n                            var10 = 0x237b;\n                            var11 = storage[keccak256(memory[0x00:0x40]) + 0x17];\n                            var12 = 0x01;\n                            var10 = func_24D7(var11, var12);\n                        \n                            if (!var9) { assert(); }\n                        \n                            var8 = var10 % var9 != var8;\n                            goto label_2388;\n                        }\n                    } else {\n                        var8 = 0x22ff;\n                        var9 = 0x64;\n                        var10 = 0x2290;\n                        var11 = var6;\n                        var12 = 0x3c;\n                        var10 = func_245A(var11, var12);\n                        var8 = func_2290(var4, var9, var10);\n                        var4 = var8;\n                        goto label_2302;\n                    }\n                }\n            } else {\n            label_227B:\n                var8 = 0x22a8;\n                var9 = 0x64;\n                var10 = 0x2290;\n                var11 = var6;\n                var12 = 0x0a;\n                var10 = func_245A(var11, var12);\n                var8 = func_2290(var4, var9, var10);\n                var4 = var8;\n                goto label_22AB;\n            }\n        } else {\n        label_2260:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n        \n            if (!storage[keccak256(memory[0x00:0x40]) + 0x04]) { goto label_22AB; }\n            else { goto label_227B; }\n        }\n    }\n    \n    function func_2290(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg1;\n        arg1 = arg0;\n        arg2 = arg2 / temp0;\n        r0 = func_2537(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function isStartGame() returns (var r0) { return storage[0x07] & 0xff; }\n    \n    function receiver() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_245A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var0 = arg1 * temp0;\n            var var1 = arg1;\n            var var2 = temp0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            if (var3 / var2 == var1) {\n            label_24D1:\n                return var0;\n            } else {\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n                memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n                memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d617468206d756c206661696c656400000000000000000000000000;\n                var temp2 = memory[0x40:0x60];\n                revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_24D1;\n        }\n    }\n    \n    function func_24D7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x13;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d61746820737562206661696c656400000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n    }\n    \n    function func_2537(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d61746820616464206661696c656400000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_25B3(var arg0) returns (var r0) {\n        r0 = func_25FD(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_25B8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_24D7(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_25FD(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x09502f90;\n        var var2 = 0x2671;\n        var var3 = 0x03b2a1d15167e7c5699bfde00000;\n        var var4 = 0x25b8;\n        var var5 = 0x266c;\n        var var6 = 0x0dac7055469777a6122ee4310dd6c14410500f2904840000000000;\n        var var7 = 0x09c6;\n        var var8 = 0x01027e72f1f1281308800000;\n        var var9 = 0x2660;\n        var var10 = arg0;\n        var var11 = 0x0de0b6b3a7640000;\n        var9 = func_245A(var10, var11);\n        var7 = func_2660(var8, var9);\n        var5 = func_09C6(var6, var7);\n        var4 = func_266C(var5);\n        var2 = func_25B8(var3, var4);\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_2660(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_245A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_266C(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = 0x26fe;\n        var var4 = arg0;\n        var var5 = 0x01;\n        var3 = func_2537(var4, var5);\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_25D1:\n            return var0;\n        } else {\n        label_2717:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = 0x2730;\n            var4 = var0;\n            var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = func_2729(var1, var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_25D1; }\n            else { goto label_2717; }\n        }\n    }\n    \n    function func_2729(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        arg2 = arg0;\n        r0 = func_2537(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_274D() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x40] = code[code.length:code.length + 0x40];\n        return temp0;\n    }\n    \n    function func_2768() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0:temp0 + 0x03 * 0x20] = code[code.length:code.length + 0x03 * 0x20];\n        return temp0;\n    }\n    \n    function func_2787() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xc0;\n        memory[temp0:temp0 + 0x06 * 0x20] = code[code.length:code.length + 0x06 * 0x20];\n        return temp0;\n    }\n    \n    function func_27A6() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0160;\n        memory[temp0:temp0 + 0x0b * 0x20] = code[code.length:code.length + 0x0b * 0x20];\n        return temp0;\n    }\n    \n    function func_27C6() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x80;\n        memory[temp0:temp0 + 0x04 * 0x20] = code[code.length:code.length + 0x04 * 0x20];\n        return temp0;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00E5:\n            var var0 = msg.sender;\n            var var1 = address(var0).code.length;\n        \n            if (!var1) {\n                var var2 = msg.value;\n            \n                if (var2 < 0x3b9aca00) {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x21;\n                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x706f636b6574206c696e743a206e6f7420612076616c69642063757272656e63;\n                    memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x7900000000000000000000000000000000000000000000000000000000000000;\n                    var temp7 = memory[0x40:0x60];\n                    revert(memory[temp7:temp7 + temp6 - temp7 + 0x84]);\n                } else if (var2 > 0x152d02c7e14af6800000) {\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                    memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x0e;\n                    memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6e6f20766974616c696b2c206e6f000000000000000000000000000000000000;\n                    var temp5 = memory[0x40:0x60];\n                    revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);\n                } else if (!!(storage[0x07] & 0xff) == 0x01) {\n                    var var3 = 0x0268;\n                    var var4 = 0x00;\n                    func_05FF(var4);\n                    stop();\n                } else {\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                    memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1c;\n                    var temp1 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x27e6:0x2806];\n                    var temp2 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp1;\n                    memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp2;\n                    var temp3 = memory[0x40:0x60];\n                    revert(memory[temp3:temp3 + temp0 - temp3 + 0x64]);\n                }\n            } else {\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x11;\n                var temp9 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2806:0x2826];\n                var temp10 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp9;\n                memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n                var temp11 = memory[0x40:0x60];\n                revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x018a25e8) {\n                // Dispatch table entry for getBuyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var1 = getBuyPrice();\n            \n            label_0282:\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x3c28308a) {\n                // Dispatch table entry for rndNo()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = rndNo();\n                goto label_0282;\n            } else if (var0 == 0x3c3c9c23) {\n                // Dispatch table entry for totalEth()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = totalEth();\n                goto label_0282;\n            } else if (var0 == 0x4311de8f) {\n                // Dispatch table entry for ownerWithdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = ownerWithdraw();\n                goto label_0282;\n            } else if (var0 == 0x547e3f06) {\n                // Dispatch table entry for changeReceiver(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeReceiver(var2);\n                stop();\n            } else if (var0 == 0x6561e6ba) {\n                // Dispatch table entry for feeWithdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f4;\n                feeWithdraw();\n                stop();\n            } else if (var0 == 0x747dff42) {\n                // Dispatch table entry for getCurrentRoundInfo()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0320;\n                var2 = 0x00;\n                var3 = 0x157e;\n                var3 = func_274D();\n                var4 = 0x1586;\n                var4 = func_2768();\n                var var5 = 0x158e;\n                var5 = func_274D();\n                var var6 = 0x1596;\n                var6 = func_2787();\n                var var7 = 0x159e;\n                var7 = func_27A6();\n                var var8 = 0x15a6;\n                var8 = func_27C6();\n                memory[0x00:0x20] = storage[0x00];\n                memory[0x20:0x40] = 0x02;\n                var var9 = storage[0x00];\n                var var10 = 0x00;\n                var var11 = 0x1608;\n                var var12 = 0x64;\n                var var13 = 0x15d2;\n                var var14 = storage[keccak256(memory[var10:var10 + 0x40])];\n                var var15 = 0x1e;\n                var13 = func_245A(var14, var15);\n            \n                if (!var12) { assert(); }\n            \n                memory[0x00:0x20] = var9;\n                memory[0x20:0x40] = 0x02;\n                var temp14 = keccak256(memory[0x00:0x40]);\n                var12 = var13 / var12;\n                var14 = storage[temp14 + 0x19];\n                var13 = 0x09c6;\n                var15 = storage[temp14 + 0x1a];\n                var13 = func_2537(var14, var15);\n                var11 = func_09C6(var12, var13);\n                // Error: Could not resolve method call return address!\n            } else if (var0 == 0x7e8ac590) {\n                // Dispatch table entry for round_m(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0456;\n                var2 = msg.data[0x04:0x24];\n                var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12 = round_m(var2);\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2;\n                memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = var3;\n                memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = var4;\n                memory[temp15 + 0x60:temp15 + 0x60 + 0x20] = var5;\n                memory[temp15 + 0x80:temp15 + 0x80 + 0x20] = var6;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                memory[temp15 + 0xa0:temp15 + 0xa0 + 0x20] = temp16 & var7;\n                memory[temp15 + 0xc0:temp15 + 0xc0 + 0x20] = temp16 & var8;\n                memory[temp15 + 0xe0:temp15 + 0xe0 + 0x20] = var9;\n                memory[temp15 + 0x0100:temp15 + 0x0100 + 0x20] = var10;\n                memory[temp15 + 0x0120:temp15 + 0x0120 + 0x20] = var11;\n                memory[temp15 + 0x0140:temp15 + 0x0140 + 0x20] = var12;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + temp15 - temp17 + 0x0160];\n            } else if (var0 == 0x80ec35ff) {\n                // Dispatch table entry for awardByRndNo(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f4;\n                var2 = msg.data[0x04:0x24];\n                awardByRndNo(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e3;\n                var2 = owner();\n            \n            label_04E3:\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + temp18 - temp19 + 0x20];\n            } else if (var0 == 0xa05ce940) {\n                // Dispatch table entry for playerRound_m(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2, var3, var4, var5, var6 = playerRound_m(var2, var3);\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = var2;\n                memory[temp20 + 0x20:temp20 + 0x20 + 0x20] = var3;\n                memory[temp20 + 0x40:temp20 + 0x40 + 0x20] = var4;\n                memory[temp20 + 0x60:temp20 + 0x60 + 0x20] = var5;\n                memory[temp20 + 0x80:temp20 + 0x80 + 0x20] = var6;\n                var temp21 = memory[0x40:0x60];\n                return memory[temp21:temp21 + temp20 - temp21 + 0xa0];\n            } else if (var0 == 0xc5960c29) {\n                // Dispatch table entry for buyKeyByAddr(address)\n                var1 = 0x02f4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                buyKeyByAddr(var2);\n                stop();\n            } else if (var0 == 0xd65ab5f2) {\n                // Dispatch table entry for startGame()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f4;\n                startGame();\n                stop();\n            } else if (var0 == 0xd982466d) {\n                // Dispatch table entry for getPlayerAwardByRndNo(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x059b;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1, var2, var3, var4 = getPlayerAwardByRndNo(var2, var3);\n                var temp22 = memory[0x40:0x60];\n                memory[temp22:temp22 + 0x20] = var1;\n                memory[temp22 + 0x20:temp22 + 0x20 + 0x20] = var2;\n                memory[temp22 + 0x40:temp22 + 0x40 + 0x20] = var3;\n                memory[temp22 + 0x60:temp22 + 0x60 + 0x20] = var4;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + temp22 - temp23 + 0x80];\n            } else if (var0 == 0xe3aae11b) {\n                // Dispatch table entry for isStartGame()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d6;\n                var2 = isStartGame();\n                var temp24 = memory[0x40:0x60];\n                memory[temp24:temp24 + 0x20] = !!var2;\n                var temp25 = memory[0x40:0x60];\n                return memory[temp25:temp25 + temp24 - temp25 + 0x20];\n            } else if (var0 == 0xf7260d3e) {\n                // Dispatch table entry for receiver()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e3;\n                var2 = receiver();\n                goto label_04E3;\n            } else { goto label_00E5; }\n        }\n    }\n    \n    function func_05FF(var arg0) {\n        memory[0x00:0x20] = storage[0x00];\n        memory[0x20:0x40] = 0x02;\n        var var0 = msg.value;\n        var var1 = block.timestamp;\n        var var2 = storage[0x00];\n        var var3 = var0;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = var7;\n    \n        if (var1 <= storage[keccak256(memory[var8:var8 + 0x40]) + 0x03]) {\n        label_083B:\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x02;\n        \n            if (0x0c685fa11e01ec6f000000 <= storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x02;\n            \n                if (var1 > storage[keccak256(memory[0x00:0x40]) + 0x04]) {\n                    var var9 = 0x0ca9;\n                    var var10 = 0xb1a2bc2ec50000;\n                    var var11 = 0x09c6;\n                    var var12 = 0xb1a2bc2ec50000;\n                    var var13 = 0x2a30;\n                    var var14 = 0x0c93;\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var var15 = var1;\n                    var var16 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                    var14 = func_24D7(var15, var16);\n                    var11 = func_0C93(var12, var13, var14);\n                    var9 = func_09C6(var10, var11);\n                    var3 = var9;\n                \n                    if (var0 < var3) {\n                        var temp20 = memory[0x40:0x60];\n                        memory[temp20:temp20 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n                        memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x15;\n                        memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x457468657220616d6f756e742069732077726f6e670000000000000000000000;\n                        var temp21 = memory[0x40:0x60];\n                        revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n                    } else if (var0 <= var3) {\n                    label_0D49:\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x02;\n                        var temp0 = keccak256(memory[0x00:0x40]);\n                        storage[temp0 + 0x03] = var1 + 0x0384;\n                        var temp1 = temp0 + 0x05;\n                        var temp2 = msg.sender;\n                        storage[temp1] = temp2 | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        memory[0x20:0x40] = 0x03;\n                        var temp3 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp2;\n                        memory[0x20:0x40] = temp3;\n                        var9 = 0x0dad;\n                        var10 = var3;\n                        var11 = storage[keccak256(memory[0x00:0x40])];\n                        var9 = func_2537(var10, var11);\n                        var temp4 = var2;\n                        memory[0x00:0x20] = temp4;\n                        memory[0x20:0x40] = 0x03;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp5;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                        memory[0x00:0x20] = temp4;\n                        memory[0x20:0x40] = 0x02;\n                        var9 = 0x0de4;\n                        var10 = var3;\n                        var11 = storage[keccak256(memory[0x00:0x40])];\n                        var9 = func_2537(var10, var11);\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x02;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                        var9 = 0x0e07;\n                        var10 = var3;\n                        var11 = storage[0x01];\n                        var9 = func_2537(var10, var11);\n                        storage[0x01] = var9;\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x02;\n                        var9 = 0x0e3e;\n                        var10 = 0x01;\n                        var11 = 0x09c6;\n                        var12 = var10;\n                        var13 = 0x2a30;\n                        var14 = 0x0c93;\n                        var16 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                        var15 = var1;\n                        var14 = func_24D7(var15, var16);\n                        var11 = func_0C93(var12, var13, var14);\n                        var9 = func_09C6(var10, var11);\n                        var8 = var9;\n                    \n                        if (var8 < 0x019a) {\n                            memory[0x00:0x20] = var2;\n                            memory[0x20:0x40] = 0x02;\n                            var10 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n                            var9 = 0x0e8d;\n                            var11 = 0x03e8;\n                            var12 = 0x0e77;\n                            var13 = var8;\n                            var14 = var3;\n                            var12 = func_245A(var13, var14);\n                            var9 = func_0E77(var10, var11, var12);\n                        \n                        label_0E8D:\n                            var temp6 = var2;\n                            memory[0x00:0x20] = temp6;\n                            memory[0x20:0x40] = 0x02;\n                            storage[keccak256(memory[0x00:0x40]) + 0x1a] = var9;\n                            var temp7 = memory[0x40:0x60];\n                            memory[temp7:temp7 + 0x20] = var3;\n                            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var1;\n                            var temp8 = memory[0x40:0x60];\n                            var temp9 = arg0;\n                            log(memory[temp8:temp8 + temp7 - temp8 + 0x40], [0x7cfc1da3c0c40e1670d11d884a3776eb3a8949e87b844c6dac43b5c9c3dc5f7e, msg.sender, stack[-8], stack[-11] & 0x02 ** 0xa0 - 0x01]);\n                            var9 = !!(temp9 & 0x02 ** 0xa0 - 0x01);\n                        \n                            if (temp9 & 0x02 ** 0xa0 - 0x01) {\n                                var9 = 0x0f09;\n                                var10 = arg0;\n                                var12 = address(var10).code.length;\n                                var11 = !var12;\n                                var9 = var11;\n                                // Error: Could not resolve jump destination!\n                            } else if (!var9) {\n                            label_1008:\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                var temp10 = keccak256(memory[0x00:0x40]);\n                                var9 = temp10 + 0x07;\n                                var10 = storage[temp10 + 0x17] % 0x0b;\n                            \n                                if (var10 >= 0x0b) { assert(); }\n                            \n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                var temp11 = keccak256(memory[0x00:0x40]);\n                                var9 = storage[var10 + var9] & 0x02 ** 0xa0 - 0x01;\n                                var10 = temp11 + 0x12;\n                                var11 = storage[temp11 + 0x17] & 0x03;\n                            \n                                if (var11 >= 0x04) { assert(); }\n                            \n                                var temp12 = var11 + var10;\n                                storage[temp12] = (var9 & 0x02 ** 0xa0 - 0x01) | (storage[temp12] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                var temp13 = keccak256(memory[0x00:0x40]);\n                                var9 = msg.sender;\n                                var10 = temp13 + 0x07;\n                                var11 = storage[temp13 + 0x17] % 0x0b;\n                            \n                                if (var11 >= 0x0b) { assert(); }\n                            \n                                var temp14 = var11 + var10;\n                                storage[temp14] = (var9 & 0x02 ** 0xa0 - 0x01) | (storage[temp14] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                var9 = 0x10ff;\n                                var10 = storage[keccak256(memory[0x00:0x40]) + 0x17];\n                                var11 = 0x01;\n                                var9 = func_2537(var10, var11);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                storage[keccak256(memory[0x00:0x40]) + 0x17] = var9;\n                                return;\n                            } else {\n                                var9 = 0x0f76;\n                                var10 = 0x64;\n                                var11 = 0x0f24;\n                                var12 = var3;\n                                var13 = 0x0a;\n                                var11 = func_245A(var12, var13);\n                                var9 = func_0F24(arg0, var2, var10, var11);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x03;\n                                var temp15 = keccak256(memory[0x00:0x40]);\n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = temp15;\n                                storage[keccak256(memory[0x00:0x40]) + 0x03] = var9;\n                                var9 = 0x0ff5;\n                                var10 = 0x64;\n                                var11 = 0x0fcc;\n                                var12 = var3;\n                                var13 = 0x0a;\n                                var11 = func_245A(var12, var13);\n                                var9 = func_0FCC(var2, var10, var11);\n                                memory[0x00:0x20] = var2;\n                                memory[0x20:0x40] = 0x02;\n                                storage[keccak256(memory[0x00:0x40]) + 0x18] = var9;\n                                goto label_1008;\n                            }\n                        } else {\n                            var8 = 0x019a;\n                            memory[0x00:0x20] = var2;\n                            memory[0x20:0x40] = 0x02;\n                            var9 = 0x0e8d;\n                            var10 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n                            var11 = 0x03e8;\n                            var12 = 0x0e77;\n                            var13 = var8;\n                            var14 = var3;\n                            var12 = func_245A(var13, var14);\n                            var9 = func_0E77(var10, var11, var12);\n                            goto label_0E8D;\n                        }\n                    } else {\n                        var9 = msg.sender;\n                        var10 = 0x08fc;\n                        var11 = 0x0d1f;\n                        var12 = var0;\n                        var13 = var3;\n                        var11 = func_24D7(var12, var13);\n                        var temp16 = memory[0x40:0x60];\n                        var temp17 = var11;\n                        var temp18;\n                        temp18, memory[temp16:temp16 + 0x00] = address(var9).call.gas(var10 * !temp17).value(temp17)(memory[temp16:temp16 + 0x00]);\n                        var9 = !temp18;\n                    \n                        if (!var9) { goto label_0D49; }\n                    \n                        var temp19 = returndata.length;\n                        memory[0x00:0x00 + temp19] = returndata[0x00:0x00 + temp19];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp22 = memory[0x40:0x60];\n                    memory[temp22:temp22 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp22 + 0x04:temp22 + 0x04 + 0x20] = 0x20;\n                    memory[temp22 + 0x24:temp22 + 0x24 + 0x20] = 0x1e;\n                    memory[temp22 + 0x44:temp22 + 0x44 + 0x20] = 0x546865207669727573206973206265696e672070726570617265642e2e2e0000;\n                    var temp23 = memory[0x40:0x60];\n                    revert(memory[temp23:temp23 + temp22 - temp23 + 0x64]);\n                }\n            } else {\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x02;\n                var9 = 0x087e;\n                var10 = storage[keccak256(memory[0x00:0x40])];\n                var11 = var0;\n                var12 = 0x00;\n                var13 = 0x25c4;\n                var14 = 0x25a0;\n                var15 = var10;\n                var14 = func_25FD(var15);\n                var15 = 0x25b8;\n                var16 = 0x25b3;\n                var var17 = var10;\n                var var18 = var11;\n                var16 = func_2537(var17, var18);\n                var15 = func_25B3(var16);\n                var13 = func_25B8(var14, var15);\n                // Error: Could not resolve method call return address!\n            }\n        } else {\n            memory[0x00:0x20] = var2;\n            memory[0x20:0x40] = 0x02;\n        \n            if (var1 > storage[keccak256(memory[0x00:0x40]) + 0x03] + 0xa8c0) {\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x02;\n                var temp24 = keccak256(memory[0x00:0x40]);\n                var9 = 0x06da;\n                var10 = storage[temp24 + 0x18];\n                var11 = 0x64;\n                var13 = storage[temp24];\n                var12 = 0x06c4;\n                var14 = 0x0e;\n                var12 = func_245A(var13, var14);\n                var9 = func_06C4(var10, var11, var12);\n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x02;\n                var4 = var9;\n            \n                if (0x0b <= storage[keccak256(memory[0x00:0x40]) + 0x17]) {\n                label_07F6:\n                    var9 = 0x0807;\n                    var10 = var2;\n                    var11 = 0x01;\n                    var9 = func_2537(var10, var11);\n                    var temp25 = var9;\n                    storage[0x00] = temp25;\n                    memory[0x00:0x20] = temp25;\n                    memory[0x20:0x40] = 0x02;\n                    var temp26 = keccak256(memory[0x00:0x40]);\n                    var temp27 = var1;\n                    storage[temp26 + 0x02] = temp27;\n                    storage[temp26 + 0x03] = temp27 + 0xa8c0;\n                    storage[temp26 + 0x17] = 0x00;\n                    storage[temp26 + 0x19] = var4;\n                    var2 = temp25;\n                    goto label_083B;\n                } else {\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var9 = 0x071b;\n                    var11 = storage[keccak256(memory[0x00:0x40]) + 0x17];\n                    var10 = 0x0b;\n                    var9 = func_24D7(var10, var11);\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var5 = var9;\n                    var9 = 0x64;\n                    var10 = 0x0741;\n                    var11 = storage[keccak256(memory[0x00:0x40])];\n                    var12 = 0x1e;\n                    var10 = func_245A(var11, var12);\n                \n                    if (!var9) { assert(); }\n                \n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var temp28 = var10 / var9;\n                    var6 = temp28;\n                    var9 = 0x0772;\n                    var11 = storage[keccak256(memory[0x00:0x40]) + 0x19];\n                    var10 = var6;\n                    var9 = func_2537(var10, var11);\n                    memory[0x00:0x20] = var2;\n                    memory[0x20:0x40] = 0x02;\n                    var6 = var9;\n                \n                    if (!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01)) {\n                        var9 = 0x07f3;\n                        var10 = 0x07c6;\n                        var11 = 0x64;\n                        var12 = 0x07ae;\n                        var13 = var6;\n                        var14 = 0x04;\n                        var12 = func_245A(var13, var14);\n                        var10 = func_07AE(var5, var11, var12);\n                        var9 = func_07C6(var4, var10);\n                        var4 = var9;\n                        goto label_07F6;\n                    } else {\n                        var9 = 0x07d3;\n                        var10 = 0x07c6;\n                        var11 = 0x64;\n                        var12 = 0x07ae;\n                        var13 = var6;\n                        var14 = 0x03;\n                        var12 = func_245A(var13, var14);\n                        var10 = func_07AE(var5, var11, var12);\n                        var9 = func_07C6(var4, var10);\n                        var4 = var9;\n                        goto label_07F6;\n                    }\n                }\n            } else {\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = 0x20;\n                memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = 0x18;\n                memory[temp29 + 0x44:temp29 + 0x44 + 0x20] = 0x77652073686f756c64207761697420736f6d652074696d650000000000000000;\n                var temp30 = memory[0x40:0x60];\n                revert(memory[temp30:temp30 + temp29 - temp30 + 0x64]);\n            }\n        }\n    }\n    \n    function func_06C4(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg0;\n        arg0 = arg2 / arg1;\n        arg1 = temp0;\n        r0 = func_24D7(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_07AE(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg1;\n        arg1 = arg0;\n        arg2 = arg2 / temp0;\n        r0 = func_245A(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_07C6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_2537(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_09C6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_2537(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0C93(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg0;\n        arg0 = arg2 / arg1;\n        arg1 = temp0;\n        r0 = func_245A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0E77(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg0;\n        arg0 = arg2 / arg1;\n        arg1 = temp0;\n        r0 = func_2537(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0F24(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        if (!arg2) { assert(); }\n    \n        var temp0 = arg3 / arg2;\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = temp1;\n        arg2 = storage[keccak256(memory[0x00:0x40]) + 0x03];\n        arg3 = temp0;\n        r0 = func_2537(arg2, arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0FCC(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = arg1;\n        arg1 = storage[keccak256(memory[0x00:0x40]) + 0x18];\n        arg2 = arg2 / temp0;\n        r0 = func_2537(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getBuyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[var0];\n        memory[var0:var0 + 0x20] = var1;\n        memory[0x20:0x40] = 0x02;\n        var var2 = block.timestamp;\n        var var3 = var0;\n    \n        if (var2 <= storage[keccak256(memory[var3:var3 + 0x40]) + 0x03]) {\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x02;\n        \n            if (0x0c685fa11e01ec6f000000 <= storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x02;\n                var var4 = 0x0c685fa11e01ec6f000000 > storage[keccak256(memory[0x00:0x40]) + 0x01];\n            \n                if (0x0c685fa11e01ec6f000000 > storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                    memory[0x00:0x20] = var1;\n                    memory[0x20:0x40] = 0x02;\n                    var4 = !!storage[keccak256(memory[0x00:0x40]) + 0x04];\n                \n                    if (!var4) { goto label_1216; }\n                    else { goto label_11F8; }\n                } else if (!var4) {\n                label_1216:\n                \n                    if (!var4) {\n                    label_1232:\n                    \n                        if (!var4) {\n                        label_1246:\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x02;\n                            var4 = 0x0c685fa11e01ec6f000000 > storage[keccak256(memory[0x00:0x40]) + 0x01];\n                        \n                            if (0x0c685fa11e01ec6f000000 > storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                                memory[0x00:0x20] = var1;\n                                memory[0x20:0x40] = 0x02;\n                            \n                                if (var2 <= storage[keccak256(memory[0x00:0x40]) + 0x04]) { goto label_12D3; }\n                                else { goto label_1288; }\n                            } else if (!var4) {\n                            label_12D3:\n                                var0 = 0x00;\n                            \n                            label_12D8:\n                                return var0;\n                            } else {\n                            label_1288:\n                                var4 = 0x12c9;\n                                var var5 = 0xb1a2bc2ec50000;\n                                var var6 = 0x09c6;\n                                var var7 = 0xb1a2bc2ec50000;\n                                var var8 = 0x2a30;\n                                var var9 = 0x0c93;\n                                memory[0x00:0x20] = var1;\n                                memory[0x20:0x40] = 0x02;\n                                var var10 = var2;\n                                var var11 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                                var9 = func_24D7(var10, var11);\n                                var6 = func_0C93(var7, var8, var9);\n                                var4 = func_09C6(var5, var6);\n                                var3 = var4;\n                                var0 = var3;\n                                goto label_12D8;\n                            }\n                        } else {\n                        label_1238:\n                            var0 = 0xb1a2bc2ec50000;\n                            goto label_12D8;\n                        }\n                    } else {\n                    label_121D:\n                        memory[0x00:0x20] = var1;\n                        memory[0x20:0x40] = 0x02;\n                    \n                        if (var2 >= storage[keccak256(memory[0x00:0x40]) + 0x04]) { goto label_1246; }\n                        else { goto label_1238; }\n                    }\n                } else {\n                label_11F8:\n                    memory[0x00:0x20] = var1;\n                    memory[0x20:0x40] = 0x02;\n                    var4 = !!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01);\n                \n                    if (!var4) { goto label_1232; }\n                    else { goto label_121D; }\n                }\n            } else {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x02;\n                var4 = 0x11ae;\n                var5 = 0x8ac7230489e80000;\n                var7 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                var6 = 0x11a2;\n                var8 = var5;\n                var6 = func_2537(var7, var8);\n                var temp0 = var5;\n                var5 = var6;\n                var6 = temp0;\n                var7 = 0x00;\n                var8 = 0x25c4;\n                var9 = 0x25f4;\n                var10 = 0x25ef;\n                var11 = var5;\n                var var12 = var6;\n                var10 = func_24D7(var11, var12);\n                var11 = 0x00;\n                var12 = 0x2694;\n                var var13 = 0x0de0b6b3a7640000;\n                var var14 = 0x00;\n                var var15 = 0x24d1;\n                var var16 = var13;\n                var var17 = var16;\n                var15 = func_245A(var16, var17);\n                var12 = var15;\n                // Error: Could not resolve jump destination!\n            }\n        } else {\n            var0 = 0x02aa209ead3c50;\n            goto label_12D8;\n        }\n    }\n    \n    function rndNo() returns (var r0) { return storage[0x00]; }\n    \n    function totalEth() returns (var r0) { return storage[0x01]; }\n    \n    function ownerWithdraw() returns (var r0) { return storage[0x06]; }\n    \n    function changeReceiver(var arg0) {\n        if (msg.sender == storage[0x04] & 0x02 ** 0xa0 - 0x01) {\n            storage[0x05] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x05] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x14;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6f6e6c79206f776e65722063616e20646f206974000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        }\n    }\n    \n    function feeWithdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = msg.sender;\n        var var3 = address(var2).code.length;\n    \n        if (var3) {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x11;\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2806:0x2826];\n            var temp14 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp13;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = temp14;\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + temp12 - temp15 + 0x64]);\n        } else if (!!(storage[0x07] & 0xff) != 0x01) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x1c;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x27e6:0x2806];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n        } else if (storage[0x05] & 0x02 ** 0xa0 - 0x01) {\n            var var4 = 0x64;\n            var var5 = 0x14b7;\n            var var6 = storage[0x01];\n            var var7 = 0x05;\n            var5 = func_245A(var6, var7);\n        \n            if (!var4) { assert(); }\n        \n            var0 = var5 / var4;\n            var1 = storage[0x06];\n        \n            if (var0 > var1) {\n                storage[0x06] = var0;\n                var4 = storage[0x05] & 0x02 ** 0xa0 - 0x01;\n                var5 = 0x08fc;\n                var6 = 0x1545;\n                var7 = var0;\n                var var8 = var1;\n                var6 = func_24D7(var7, var8);\n                var temp0 = memory[0x40:0x60];\n                var temp1 = var6;\n                var temp2;\n                temp2, memory[temp0:temp0 + 0x00] = address(var4).call.gas(var5 * !temp1).value(temp1)(memory[temp0:temp0 + 0x00]);\n                var4 = !temp2;\n            \n                if (!var4) { return; }\n            \n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x13;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x4e6f206e65656420746f20776974686472617700000000000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x2e;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x546865207265636569766572206164647265737320686173206e6f7420626565;\n            memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x6e20696e697469616c697a65642e000000000000000000000000000000000000;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp6 - temp7 + 0x84]);\n        }\n    }\n    \n    function round_m(var arg0) returns (var arg0, var r1, var r2, var r3, var r4, var r5, var r6, var r7, var r8, var r9, var r10) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01];\n        r2 = storage[temp0 + 0x02];\n        r3 = storage[temp0 + 0x03];\n        r4 = storage[temp0 + 0x04];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        r5 = temp1 & storage[temp0 + 0x05];\n        r6 = temp1 & storage[temp0 + 0x06];\n        r7 = storage[temp0 + 0x17];\n        r9 = storage[temp0 + 0x19];\n        r8 = storage[temp0 + 0x18];\n        r10 = storage[temp0 + 0x1a];\n        return arg0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;\n    }\n    \n    function awardByRndNo(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = msg.sender;\n        var var8 = address(var7).code.length;\n    \n        if (var8) {\n            var temp29 = memory[0x40:0x60];\n            memory[temp29:temp29 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = 0x20;\n            memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = 0x11;\n            var temp30 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2806:0x2826];\n            var temp31 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp30;\n            memory[temp29 + 0x44:temp29 + 0x44 + 0x20] = temp31;\n            var temp32 = memory[0x40:0x60];\n            revert(memory[temp32:temp32 + temp29 - temp32 + 0x64]);\n        } else if (!!(storage[0x07] & 0xff) != 0x01) {\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n            memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x1c;\n            var temp26 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x27e6:0x2806];\n            var temp27 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp26;\n            memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = temp27;\n            var temp28 = memory[0x40:0x60];\n            revert(memory[temp28:temp28 + temp25 - temp28 + 0x64]);\n        } else if (arg0 <= storage[0x00]) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var0 = 0x00;\n            var var9 = 0x64;\n            var var10 = 0x18fe;\n            var var11 = storage[keccak256(memory[var0:var0 + 0x40])];\n            var var12 = 0x1e;\n            var10 = func_245A(var11, var12);\n        \n            if (!var9) { assert(); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = var10 / var9;\n            var1 = temp0;\n            var9 = 0x192f;\n            var10 = var1;\n            var11 = storage[keccak256(memory[0x00:0x40]) + 0x19];\n            var9 = func_2537(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = var9;\n            var1 = temp1;\n            var9 = 0x1955;\n            var10 = var1;\n            var11 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n            var9 = func_2537(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var1 = var9;\n            var2 = 0x00;\n            var9 = 0x64;\n            var11 = storage[keccak256(memory[var2:var2 + 0x40])];\n            var10 = 0x197d;\n            var12 = 0x33;\n            var10 = func_245A(var11, var12);\n        \n            if (!var9) { assert(); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = var10 / var9;\n            var3 = temp2;\n            var9 = 0x19ae;\n            var11 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n            var10 = var3;\n            var9 = func_24D7(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp3;\n            var temp4 = var9;\n            var3 = temp4;\n            var9 = 0x19df;\n            var10 = var3;\n            var11 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n            var9 = func_245A(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var temp5 = var9;\n            var9 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n            var3 = temp5;\n            var10 = var3;\n        \n            if (!var9) { assert(); }\n        \n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp6;\n            var temp7 = var10 / var9;\n            var3 = temp7;\n            var4 = storage[keccak256(memory[0x00:0x40]) + 0x03];\n            var9 = 0x1a31;\n            var10 = var3;\n            var11 = var4;\n            var9 = func_2537(var10, var11);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x03;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp8;\n            var3 = var9;\n            var5 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n        \n            if (var3 <= var5) {\n            label_1A9D:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x02;\n                var9 = msg.sender == storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01;\n            \n                if (var9) {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x02;\n                    var9 = !!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01);\n                \n                    if (!var9) { goto label_1AFB; }\n                    else { goto label_1AE6; }\n                } else if (!var9) {\n                label_1AFB:\n                \n                    if (!var9) {\n                    label_1B31:\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x02;\n                    \n                        if (block.timestamp <= storage[keccak256(memory[0x00:0x40]) + 0x03]) {\n                        label_1CF1:\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x03;\n                            var temp9 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = temp9;\n                            var9 = 0x1d23;\n                            var10 = 0x1a6e;\n                            var11 = var2;\n                            var12 = storage[keccak256(memory[0x00:0x40]) + 0x04];\n                            var10 = func_24D7(var11, var12);\n                            var9 = func_1A6E(var0, var10);\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x03;\n                            var temp10 = keccak256(memory[0x00:0x40]);\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = temp10;\n                            storage[keccak256(memory[0x00:0x40]) + 0x04] = var2;\n                            var0 = var9;\n                        \n                            if (!var0) {\n                            label_1D79:\n                                var temp11 = memory[0x40:0x60];\n                                memory[temp11:temp11 + 0x20] = var0;\n                                memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = block.timestamp;\n                                var temp12 = memory[0x40:0x60];\n                                log(memory[temp12:temp12 + temp11 - temp12 + 0x40], [0x067aa1d7e7bd2c0daf878a68551cbd9e1a4dbaaa1510600154c71bffbe420d86, msg.sender, stack[-10]]);\n                                return;\n                            } else {\n                                var temp13 = memory[0x40:0x60];\n                                var temp14 = var0;\n                                var temp15;\n                                temp15, memory[temp13:temp13 + 0x00] = address(msg.sender).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp13:temp13 + 0x00]);\n                                var9 = !temp15;\n                            \n                                if (!var9) { goto label_1D79; }\n                            \n                                var temp16 = returndata.length;\n                                memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x02;\n                        \n                            if (msg.sender != storage[keccak256(memory[0x00:0x40]) + 0x05] & 0x02 ** 0xa0 - 0x01) {\n                            label_1B85:\n                                var6 = 0x00;\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x02;\n                            \n                                if (var6 >= 0x0b) { goto label_1CF1; }\n                            \n                            label_1B9E:\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x02;\n                                var9 = msg.sender;\n                                var10 = keccak256(memory[0x00:0x40]) + 0x07;\n                                var11 = var6;\n                            \n                                if (var11 >= 0x0b) { assert(); }\n                            \n                                var temp17 = storage[var11 + var10] & 0x02 ** 0xa0 - 0x01 == var9;\n                                var9 = temp17;\n                            \n                                if (!var9) {\n                                label_1C03:\n                                \n                                    if (!var9) {\n                                    label_1CD9:\n                                        var9 = 0x1cea;\n                                        var10 = var6;\n                                        var11 = 0x01;\n                                        var9 = func_2537(var10, var11);\n                                        var6 = var9;\n                                        memory[0x00:0x20] = arg0;\n                                        memory[0x20:0x40] = 0x02;\n                                    \n                                        if (var6 >= 0x0b) { goto label_1CF1; }\n                                        else { goto label_1B9E; }\n                                    } else {\n                                        memory[0x00:0x20] = arg0;\n                                        memory[0x20:0x40] = 0x02;\n                                        var9 = keccak256(memory[0x00:0x40]) + 0x16;\n                                        var10 = var6;\n                                    \n                                        if (var10 >= 0x0b) { assert(); }\n                                    \n                                        var temp18 = var10;\n                                    \n                                        if (storage[var9 + temp18 / 0x20] / 0x0100 ** (temp18 & 0x1f) & 0xff) { goto label_1CD9; }\n                                    \n                                        memory[0x00:0x20] = arg0;\n                                        memory[0x20:0x40] = 0x02;\n                                    \n                                        if (!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01)) {\n                                            var9 = 0x1c97;\n                                            var10 = 0x64;\n                                            var11 = 0x1b16;\n                                            var12 = var1;\n                                            var var13 = 0x04;\n                                            var11 = func_245A(var12, var13);\n                                            var9 = func_1B16(var2, var10, var11);\n                                            var2 = var9;\n                                            memory[0x00:0x20] = arg0;\n                                            memory[0x20:0x40] = 0x02;\n                                            var9 = 0x01;\n                                            var10 = keccak256(memory[0x00:0x40]) + 0x16;\n                                            var11 = var6;\n                                        \n                                            if (var11 >= 0x0b) { assert(); }\n                                        \n                                        label_1CB9:\n                                            var temp19 = var11;\n                                            var temp20 = temp19 / 0x20 + var10;\n                                            var temp21 = 0x0100 ** (temp19 % 0x20);\n                                            storage[temp20] = !!var9 * temp21 | (~(temp21 * 0xff) & storage[temp20]);\n                                            goto label_1CD9;\n                                        } else {\n                                            var9 = 0x1c7a;\n                                            var10 = 0x64;\n                                            var11 = 0x1b16;\n                                            var12 = var1;\n                                            var13 = 0x03;\n                                            var11 = func_245A(var12, var13);\n                                            var9 = func_1B16(var2, var10, var11);\n                                            var2 = var9;\n                                            memory[0x00:0x20] = arg0;\n                                            memory[0x20:0x40] = 0x02;\n                                            var9 = 0x01;\n                                            var10 = keccak256(memory[0x00:0x40]) + 0x16;\n                                            var11 = var6;\n                                        \n                                            if (var11 < 0x0b) { goto label_1CB9; }\n                                            else { assert(); }\n                                        }\n                                    }\n                                } else {\n                                    memory[0x00:0x20] = arg0;\n                                    memory[0x20:0x40] = 0x02;\n                                    var9 = var6;\n                                    var10 = 0x0b;\n                                    var12 = storage[keccak256(memory[0x00:0x40]) + 0x17];\n                                    var11 = 0x1bf6;\n                                    var13 = 0x01;\n                                    var11 = func_24D7(var12, var13);\n                                \n                                    if (!var10) { assert(); }\n                                \n                                    var9 = var11 % var10 != var9;\n                                    goto label_1C03;\n                                }\n                            } else {\n                                var9 = 0x1b82;\n                                var10 = 0x64;\n                                var11 = 0x1b16;\n                                var12 = var1;\n                                var13 = 0x3c;\n                                var11 = func_245A(var12, var13);\n                                var9 = func_1B16(var2, var10, var11);\n                                var2 = var9;\n                                goto label_1B85;\n                            }\n                        }\n                    } else {\n                    label_1B01:\n                        var9 = 0x1b2e;\n                        var10 = 0x64;\n                        var11 = 0x1b16;\n                        var12 = var1;\n                        var13 = 0x0a;\n                        var11 = func_245A(var12, var13);\n                        var9 = func_1B16(var2, var10, var11);\n                        var2 = var9;\n                        goto label_1B31;\n                    }\n                } else {\n                label_1AE6:\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x02;\n                \n                    if (!storage[keccak256(memory[0x00:0x40]) + 0x04]) { goto label_1B31; }\n                    else { goto label_1B01; }\n                }\n            } else {\n                var9 = 0x1a7b;\n                var10 = 0x1a6e;\n                var11 = var3;\n                var12 = var5;\n                var10 = func_24D7(var11, var12);\n                var9 = func_1A6E(var0, var10);\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x03;\n                var temp22 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp22;\n                storage[keccak256(memory[0x00:0x40]) + 0x02] = var3;\n                var0 = var9;\n                goto label_1A9D;\n            }\n        } else {\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp23 + 0x04:temp23 + 0x04 + 0x20] = 0x20;\n            memory[temp23 + 0x24:temp23 + 0x24 + 0x20] = 0x17;\n            memory[temp23 + 0x44:temp23 + 0x44 + 0x20] = 0x596f752772652072756e6e696e6720746f6f2066617374000000000000000000;\n            var temp24 = memory[0x40:0x60];\n            revert(memory[temp24:temp24 + temp23 - temp24 + 0x64]);\n        }\n    }\n    \n    function func_1A6E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_2537(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1B16(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg1;\n        arg1 = arg0;\n        arg2 = arg2 / temp0;\n        r0 = func_2537(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function owner() returns (var r0) { return storage[0x04] & 0x02 ** 0xa0 - 0x01; }\n    \n    function playerRound_m(var arg0, var arg1) returns (var arg0, var arg1, var r2, var r3, var r4) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        arg1 = storage[temp0 + 0x01];\n        r3 = storage[temp0 + 0x03];\n        r2 = storage[temp0 + 0x02];\n        r4 = storage[temp0 + 0x04];\n        return arg0, arg1, r2, r3, r4;\n    }\n    \n    function buyKeyByAddr(var arg0) {\n        var var0 = msg.sender;\n        var var1 = address(var0).code.length;\n    \n        if (!var1) {\n            var var2 = msg.value;\n        \n            if (var2 < 0x3b9aca00) {\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x21;\n                memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x706f636b6574206c696e743a206e6f7420612076616c69642063757272656e63;\n                memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x7900000000000000000000000000000000000000000000000000000000000000;\n                var temp7 = memory[0x40:0x60];\n                revert(memory[temp7:temp7 + temp6 - temp7 + 0x84]);\n            } else if (var2 > 0x152d02c7e14af6800000) {\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x0e;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6e6f20766974616c696b2c206e6f000000000000000000000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x64]);\n            } else if (!!(storage[0x07] & 0xff) == 0x01) {\n                var var3 = 0x1f8c;\n                var var4 = arg0;\n                func_05FF(var4);\n                return;\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1c;\n                var temp1 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x27e6:0x2806];\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp1;\n                memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp2;\n                var temp3 = memory[0x40:0x60];\n                revert(memory[temp3:temp3 + temp0 - temp3 + 0x64]);\n            }\n        } else {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x11;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2806:0x2826];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n        }\n    }\n    \n    function startGame() {\n        if (msg.sender != storage[0x04] & 0x02 ** 0xa0 - 0x01) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x14;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x6f6e6c79206f776e65722063616e20646f206974000000000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        } else if (!(storage[0x07] & 0xff)) {\n            memory[0x00:0x20] = 0x01;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = block.timestamp;\n            storage[0xe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e2] = temp0;\n            storage[0xe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e3] = temp0 + 0xa8c0;\n            storage[0xe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2f9] = 0x00;\n            storage[0x07] = (storage[0x07] & ~0xff) | 0x01;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1d;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x5468652067616d652068617320616c7265616479207374617274656421000000;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function getPlayerAwardByRndNo(var arg0, var arg1) returns (var r0, var arg0, var arg1, var r3) {\n        r3 = 0x00;\n        memory[r3:r3 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var var1 = r3;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = 0x64;\n        var var9 = 0x2108;\n        var var10 = storage[keccak256(memory[var7:var7 + 0x40])];\n        var var11 = 0x33;\n        var9 = func_245A(var10, var11);\n    \n        if (!var8) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = var9 / var8;\n        var5 = temp0;\n        var8 = 0x2139;\n        var10 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n        var9 = var5;\n        var8 = func_24D7(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = temp1;\n        var temp2 = var8;\n        var5 = temp2;\n        var8 = 0x2173;\n        var9 = var5;\n        var10 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n        var8 = func_245A(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp3 = var8;\n        var8 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n        var5 = temp3;\n        var9 = var5;\n    \n        if (!var8) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var5 = var9 / var8;\n        var8 = 0x64;\n        var9 = 0x21ba;\n        var10 = storage[keccak256(memory[0x00:0x40])];\n        var11 = 0x1e;\n        var9 = func_245A(var10, var11);\n    \n        if (!var8) { assert(); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp4 = var9 / var8;\n        var6 = temp4;\n        var8 = 0x21eb;\n        var9 = var6;\n        var10 = storage[keccak256(memory[0x00:0x40]) + 0x19];\n        var8 = func_2537(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp5 = var8;\n        var6 = temp5;\n        var8 = 0x2211;\n        var9 = var6;\n        var10 = storage[keccak256(memory[0x00:0x40]) + 0x1a];\n        var8 = func_2537(var9, var10);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x02;\n        var6 = var8;\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var8 = storage[keccak256(memory[0x00:0x40]) + 0x06] & temp6 == temp6 & arg1;\n    \n        if (var8) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n            var8 = !!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01);\n        \n            if (!var8) { goto label_2275; }\n            else { goto label_2260; }\n        } else if (!var8) {\n        label_2275:\n        \n            if (!var8) {\n            label_22AB:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x02;\n            \n                if (block.timestamp <= storage[keccak256(memory[0x00:0x40]) + 0x03]) {\n                label_23FB:\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x03;\n                    var temp7 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = temp7;\n                    arg0 = var5;\n                    var temp8 = keccak256(memory[0x00:0x40]);\n                    r0 = var4;\n                    arg1 = storage[temp8 + 0x03];\n                    r3 = storage[temp8 + 0x02] + storage[temp8 + 0x04];\n                    return r0, arg0, arg1, r3;\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x02;\n                    var temp9 = 0x02 ** 0xa0 - 0x01;\n                \n                    if (storage[keccak256(memory[0x00:0x40]) + 0x05] & temp9 != temp9 & arg1) {\n                    label_2302:\n                        var7 = 0x00;\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x02;\n                    \n                        if (var7 >= 0x0b) { goto label_23FB; }\n                    \n                    label_231A:\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x02;\n                        var8 = arg1 & 0x02 ** 0xa0 - 0x01;\n                        var9 = keccak256(memory[0x00:0x40]) + 0x07;\n                        var10 = var7;\n                    \n                        if (var10 >= 0x0b) { assert(); }\n                    \n                        var temp10 = storage[var10 + var9] & 0x02 ** 0xa0 - 0x01 == var8;\n                        var8 = temp10;\n                    \n                        if (!var8) {\n                        label_2388:\n                        \n                            if (!var8) {\n                            label_23E3:\n                                var8 = 0x23f4;\n                                var9 = var7;\n                                var10 = 0x01;\n                                var8 = func_2537(var9, var10);\n                                var7 = var8;\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x02;\n                            \n                                if (var7 >= 0x0b) { goto label_23FB; }\n                                else { goto label_231A; }\n                            } else {\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x02;\n                            \n                                if (!(storage[keccak256(memory[0x00:0x40]) + 0x06] & 0x02 ** 0xa0 - 0x01)) {\n                                    var8 = 0x23e0;\n                                    var9 = 0x64;\n                                    var10 = 0x2290;\n                                    var11 = var6;\n                                    var var12 = 0x04;\n                                    var10 = func_245A(var11, var12);\n                                    var8 = func_2290(var4, var9, var10);\n                                    var4 = var8;\n                                    goto label_23E3;\n                                } else {\n                                    var8 = 0x23c3;\n                                    var9 = 0x64;\n                                    var10 = 0x2290;\n                                    var11 = var6;\n                                    var12 = 0x03;\n                                    var10 = func_245A(var11, var12);\n                                    var8 = func_2290(var4, var9, var10);\n                                    var4 = var8;\n                                    goto label_23E3;\n                                }\n                            }\n                        } else {\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x02;\n                            var8 = var7;\n                            var9 = 0x0b;\n                            var10 = 0x237b;\n                            var11 = storage[keccak256(memory[0x00:0x40]) + 0x17];\n                            var12 = 0x01;\n                            var10 = func_24D7(var11, var12);\n                        \n                            if (!var9) { assert(); }\n                        \n                            var8 = var10 % var9 != var8;\n                            goto label_2388;\n                        }\n                    } else {\n                        var8 = 0x22ff;\n                        var9 = 0x64;\n                        var10 = 0x2290;\n                        var11 = var6;\n                        var12 = 0x3c;\n                        var10 = func_245A(var11, var12);\n                        var8 = func_2290(var4, var9, var10);\n                        var4 = var8;\n                        goto label_2302;\n                    }\n                }\n            } else {\n            label_227B:\n                var8 = 0x22a8;\n                var9 = 0x64;\n                var10 = 0x2290;\n                var11 = var6;\n                var12 = 0x0a;\n                var10 = func_245A(var11, var12);\n                var8 = func_2290(var4, var9, var10);\n                var4 = var8;\n                goto label_22AB;\n            }\n        } else {\n        label_2260:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x02;\n        \n            if (!storage[keccak256(memory[0x00:0x40]) + 0x04]) { goto label_22AB; }\n            else { goto label_227B; }\n        }\n    }\n    \n    function func_2290(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg1;\n        arg1 = arg0;\n        arg2 = arg2 / temp0;\n        r0 = func_2537(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function isStartGame() returns (var r0) { return storage[0x07] & 0xff; }\n    \n    function receiver() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_245A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var0 = arg1 * temp0;\n            var var1 = arg1;\n            var var2 = temp0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            if (var3 / var2 == var1) {\n            label_24D1:\n                return var0;\n            } else {\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n                memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n                memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d617468206d756c206661696c656400000000000000000000000000;\n                var temp2 = memory[0x40:0x60];\n                revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n            }\n        } else {\n            var0 = 0x00;\n            goto label_24D1;\n        }\n    }\n    \n    function func_24D7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x13;\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x536166654d61746820737562206661696c656400000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n    }\n    \n    function func_2537(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x13;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d61746820616464206661696c656400000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_25B3(var arg0) returns (var r0) {\n        r0 = func_25FD(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_25B8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_24D7(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_25FD(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x09502f90;\n        var var2 = 0x2671;\n        var var3 = 0x03b2a1d15167e7c5699bfde00000;\n        var var4 = 0x25b8;\n        var var5 = 0x266c;\n        var var6 = 0x0dac7055469777a6122ee4310dd6c14410500f2904840000000000;\n        var var7 = 0x09c6;\n        var var8 = 0x01027e72f1f1281308800000;\n        var var9 = 0x2660;\n        var var10 = arg0;\n        var var11 = 0x0de0b6b3a7640000;\n        var9 = func_245A(var10, var11);\n        var7 = func_2660(var8, var9);\n        var5 = func_09C6(var6, var7);\n        var4 = func_266C(var5);\n        var2 = func_25B8(var3, var4);\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_2660(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_245A(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_266C(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = 0x26fe;\n        var var4 = arg0;\n        var var5 = 0x01;\n        var3 = func_2537(var4, var5);\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_25D1:\n            return var0;\n        } else {\n        label_2717:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = 0x2730;\n            var4 = var0;\n            var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = func_2729(var1, var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_25D1; }\n            else { goto label_2717; }\n        }\n    }\n    \n    function func_2729(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        arg2 = arg0;\n        r0 = func_2537(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_274D() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x40] = code[code.length:code.length + 0x40];\n        return temp0;\n    }\n    \n    function func_2768() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x60;\n        memory[temp0:temp0 + 0x03 * 0x20] = code[code.length:code.length + 0x03 * 0x20];\n        return temp0;\n    }\n    \n    function func_2787() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xc0;\n        memory[temp0:temp0 + 0x06 * 0x20] = code[code.length:code.length + 0x06 * 0x20];\n        return temp0;\n    }\n    \n    function func_27A6() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0160;\n        memory[temp0:temp0 + 0x0b * 0x20] = code[code.length:code.length + 0x0b * 0x20];\n        return temp0;\n    }\n    \n    function func_27C6() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x80;\n        memory[temp0:temp0 + 0x04 * 0x20] = code[code.length:code.length + 0x04 * 0x20];\n        return temp0;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 78.89538955688477,
	"usage": {
		"completion_tokens": 882,
		"prompt_tokens": 24919,
		"total_tokens": 25801
	}
}