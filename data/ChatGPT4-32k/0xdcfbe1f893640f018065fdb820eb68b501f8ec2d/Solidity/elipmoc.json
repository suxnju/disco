{
	"address": "0xdcfbe1f893640f018065fdb820eb68b501f8ec2d",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 06:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) map_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) owner_2; // STORAGE[0x2]\nmapping (uint256 => [uint256]) owner_3; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _myColorIs; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _colorLeaderboard; // STORAGE[0x5]\nuint256 stor_6; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nuint256 stor_c; // STORAGE[0xc]\nuint256 stor_d; // STORAGE[0xd]\nuint256 stor_e; // STORAGE[0xe]\nuint256 stor_f; // STORAGE[0xf]\nuint256 stor_10; // STORAGE[0x10]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint256[] array_1c8d1bf01472944f62fa726559c57c955f3535856e865cee78082252c0dbe65; // STORAGE[0x1c8d1bf01472944f62fa726559c57c955f3535856e865cee78082252c0dbe65]\nuint256[] array_2d9f8353bca53bc9b195aa186ab6d98b49a9120c00257ee2c7d860c26f864ea; // STORAGE[0x2d9f8353bca53bc9b195aa186ab6d98b49a9120c00257ee2c7d860c26f864ea]\nuint256[] array_b4595228ef9d6fd2aeb7154fa18462681cdc944621830181269e75d4b39a885; // STORAGE[0xb4595228ef9d6fd2aeb7154fa18462681cdc944621830181269e75d4b39a885]\nuint256[] array_f0519a40093d7edad68f12e2ec868fdf92a03df1cbec3e035c987d6b218f2f4; // STORAGE[0xf0519a40093d7edad68f12e2ec868fdf92a03df1cbec3e035c987d6b218f2f4]\nuint256[] array_10f3a17841c6d818ccbb16e4596978865bb77ba586b583c9de26b166e55de864; // STORAGE[0x10f3a17841c6d818ccbb16e4596978865bb77ba586b583c9de26b166e55de864]\nuint256[] array_10f5232ee9f6343d8bf0b7c9043a31ee616d8f028dcf3d2e9033ff8e0ce0ef0f; // STORAGE[0x10f5232ee9f6343d8bf0b7c9043a31ee616d8f028dcf3d2e9033ff8e0ce0ef0f]\nuint256[] array_1161d849492e842dca32edceeb2630bc6d621f9dea3fdc78ca65f82bb844f4b1; // STORAGE[0x1161d849492e842dca32edceeb2630bc6d621f9dea3fdc78ca65f82bb844f4b1]\nuint256[] array_13e779bc7ec8e84a68157fc5c2caa579dc0ee0b80d83944c270539b94cac271f; // STORAGE[0x13e779bc7ec8e84a68157fc5c2caa579dc0ee0b80d83944c270539b94cac271f]\nuint256[] array_163a647ba7edd41caabec3eace9ce83f1a89ebea06fc099aa7fb98088da75131; // STORAGE[0x163a647ba7edd41caabec3eace9ce83f1a89ebea06fc099aa7fb98088da75131]\nuint256[] array_181ec19a0f957384e4ecbe9410e516ad0fe8cc3e53caac5ffc50eb11e64bf488; // STORAGE[0x181ec19a0f957384e4ecbe9410e516ad0fe8cc3e53caac5ffc50eb11e64bf488]\nuint256[] array_1bf4ff26d49d102c44233384b81dc2319b0570d368e5dde6461eecaaeae3eb22; // STORAGE[0x1bf4ff26d49d102c44233384b81dc2319b0570d368e5dde6461eecaaeae3eb22]\nuint256[] array_1c5556a54fe414bb73b8e027c2ff4bb044a11e7ca4f73a8463fd263d06b76aa6; // STORAGE[0x1c5556a54fe414bb73b8e027c2ff4bb044a11e7ca4f73a8463fd263d06b76aa6]\nuint256[] array_1cf7587647dd634439ba2d9be5ebcbd7499630058b1ef9fa111be225c5d08e14; // STORAGE[0x1cf7587647dd634439ba2d9be5ebcbd7499630058b1ef9fa111be225c5d08e14]\nuint256[] array_22848320af6c4894685e387cf97d56ba798f5dabcd8f3a2db70374776f0f2f93; // STORAGE[0x22848320af6c4894685e387cf97d56ba798f5dabcd8f3a2db70374776f0f2f93]\nuint256[] array_2480fe25ee21f0b2bc289ccff6df415947190b288094ab9f0cbd50f7b814fd5e; // STORAGE[0x2480fe25ee21f0b2bc289ccff6df415947190b288094ab9f0cbd50f7b814fd5e]\nuint256[] array_28eef39a072497d2105dcb780594e4ed840d3beb94e2ea31a78a935b50a4ae2e; // STORAGE[0x28eef39a072497d2105dcb780594e4ed840d3beb94e2ea31a78a935b50a4ae2e]\nuint256[] array_2ad561dc52a39ba65c35d8ffc50780b2be420e6593582aa43068d94afe08aa0b; // STORAGE[0x2ad561dc52a39ba65c35d8ffc50780b2be420e6593582aa43068d94afe08aa0b]\nuint256[] array_2b00120b81607971383f6f5676c1551d6bb27be3f263689fd3630e1a5be14018; // STORAGE[0x2b00120b81607971383f6f5676c1551d6bb27be3f263689fd3630e1a5be14018]\nuint256[] array_2b05300599b1ce20a949224edaf6681df49e80b65b405ccf2180d9992bb642a9; // STORAGE[0x2b05300599b1ce20a949224edaf6681df49e80b65b405ccf2180d9992bb642a9]\nuint256[] array_2bb318060b44525c3d947c00393e6d416e9d457a7e83b67b8daab0973739b0fa; // STORAGE[0x2bb318060b44525c3d947c00393e6d416e9d457a7e83b67b8daab0973739b0fa]\nuint256[] array_308b08755ec965f49e4d58d22ebbf80dc425791b553f8567a173e85e1abb76c3; // STORAGE[0x308b08755ec965f49e4d58d22ebbf80dc425791b553f8567a173e85e1abb76c3]\nuint256[] array_312b1850f800d121ee2b1ec7d23abfdc8f66c2114f2531fbb671ea6446558182; // STORAGE[0x312b1850f800d121ee2b1ec7d23abfdc8f66c2114f2531fbb671ea6446558182]\nuint256[] array_31ff9da46623ded696608610c3749320b1cb2c2dfd644b1139da5367a8e616cf; // STORAGE[0x31ff9da46623ded696608610c3749320b1cb2c2dfd644b1139da5367a8e616cf]\nuint256[] array_35b47ec3f55b71d6589203440915d2ef7280ff31d26085f81a04730b0655d961; // STORAGE[0x35b47ec3f55b71d6589203440915d2ef7280ff31d26085f81a04730b0655d961]\nuint256[] array_370c8c7c6215b209793aa720f65163fbeecd5f5114008532ba0649ee23405402; // STORAGE[0x370c8c7c6215b209793aa720f65163fbeecd5f5114008532ba0649ee23405402]\nuint256[] array_37e56e4c2b6ed73b31a7a63e641bfee67245b50921806a650aa65bb58a213ba7; // STORAGE[0x37e56e4c2b6ed73b31a7a63e641bfee67245b50921806a650aa65bb58a213ba7]\nuint256[] array_38ccf7fe89e68e9cb9e9fc31f6d47173231206ebecc0bf076a9068dce043717e; // STORAGE[0x38ccf7fe89e68e9cb9e9fc31f6d47173231206ebecc0bf076a9068dce043717e]\nuint256[] array_39b891754677077a5297bdcd461d43105bb93e213858a126f6d7310acd650aa4; // STORAGE[0x39b891754677077a5297bdcd461d43105bb93e213858a126f6d7310acd650aa4]\nuint256[] array_3ba015d6b845e102ce2f76836007be82508e3543856f2a3c2ff4b56eb46d920e; // STORAGE[0x3ba015d6b845e102ce2f76836007be82508e3543856f2a3c2ff4b56eb46d920e]\nuint256[] array_47bd603b2672149df187087e649a417345c22ebc601af252344b2472b5a5fea8; // STORAGE[0x47bd603b2672149df187087e649a417345c22ebc601af252344b2472b5a5fea8]\nuint256[] array_48febe6eee659df7cb3fcff72a980b3482f1179ef87c242c4f20c6830616885e; // STORAGE[0x48febe6eee659df7cb3fcff72a980b3482f1179ef87c242c4f20c6830616885e]\nuint256[] array_4a7072cae31c8066404bff29911e471dd7b488d543a218806da51870552a74bb; // STORAGE[0x4a7072cae31c8066404bff29911e471dd7b488d543a218806da51870552a74bb]\nuint256[] array_4ba0d371c59a4c8176901cb7799ecdd8b41b974be3a1349b5d0a9ff9aaa230d9; // STORAGE[0x4ba0d371c59a4c8176901cb7799ecdd8b41b974be3a1349b5d0a9ff9aaa230d9]\nuint256[] array_4d08cb3ffa33592f3b5eeb877647984f4070d1d2997d57c9aea4c3e34ddd6e8e; // STORAGE[0x4d08cb3ffa33592f3b5eeb877647984f4070d1d2997d57c9aea4c3e34ddd6e8e]\nuint256[] array_4e68cda4a6128fdfebaae69af59e96a318b50754e0da27477d282f3d224cc4fd; // STORAGE[0x4e68cda4a6128fdfebaae69af59e96a318b50754e0da27477d282f3d224cc4fd]\nuint256[] array_4e788733fe0bff9af5f3e3a353367490c603293e53707fe7e4e0071b9ed497d6; // STORAGE[0x4e788733fe0bff9af5f3e3a353367490c603293e53707fe7e4e0071b9ed497d6]\nuint256[] array_4f8c9d329171a3577e6beb939d329b1f26da4c7a51f25bbe134c866f0feee945; // STORAGE[0x4f8c9d329171a3577e6beb939d329b1f26da4c7a51f25bbe134c866f0feee945]\nuint256[] array_51c44284d952b00f7c584661b05f3b5ef462e7e5fa5fd8ff860e55075b3c69e1; // STORAGE[0x51c44284d952b00f7c584661b05f3b5ef462e7e5fa5fd8ff860e55075b3c69e1]\nuint256[] array_57023ef7fe58b878582140ea36f22723905ad724896eaf74090fba76c229bd22; // STORAGE[0x57023ef7fe58b878582140ea36f22723905ad724896eaf74090fba76c229bd22]\nuint256[] array_5a24c9b3971c014c51c7c161d38b480cbcde22ab593a7a6bb0c9e5a9763a6f16; // STORAGE[0x5a24c9b3971c014c51c7c161d38b480cbcde22ab593a7a6bb0c9e5a9763a6f16]\nuint256[] array_5b162060ded226415457bbc62b41be6cb742618d4be93db7911c49a0c7e4fab1; // STORAGE[0x5b162060ded226415457bbc62b41be6cb742618d4be93db7911c49a0c7e4fab1]\nuint256[] array_5f3ffac152518418b730c1b4427b48de47a050e582434504c9ffd15088f0d196; // STORAGE[0x5f3ffac152518418b730c1b4427b48de47a050e582434504c9ffd15088f0d196]\nuint256[] array_6117fee2f1274e1b392d2c3fe842478040a980d896757f38cbfe2ceebfa9f55f; // STORAGE[0x6117fee2f1274e1b392d2c3fe842478040a980d896757f38cbfe2ceebfa9f55f]\nuint256[] array_6280e9caec09c2f0007c3f9e61e9e1a060188c72cdbb510e12183e12d0752cef; // STORAGE[0x6280e9caec09c2f0007c3f9e61e9e1a060188c72cdbb510e12183e12d0752cef]\nuint256[] array_649ad4ccefe948b2d43ac19747d5abc540fbdd07b230124aa9ade80ee5d79540; // STORAGE[0x649ad4ccefe948b2d43ac19747d5abc540fbdd07b230124aa9ade80ee5d79540]\nuint256[] array_669beea0e2381f1cf6b3a3f857b6e0ae3b31c4bc1558bc7f3ac7e4091d6aafcc; // STORAGE[0x669beea0e2381f1cf6b3a3f857b6e0ae3b31c4bc1558bc7f3ac7e4091d6aafcc]\nuint256[] array_682542400590cecd25f82cad25103b4dc125cd3511d319539197c8bb9765a74f; // STORAGE[0x682542400590cecd25f82cad25103b4dc125cd3511d319539197c8bb9765a74f]\nuint256[] array_68fb8e7cad479ccc9244a179d64897454189fd25db04e15d3a5135327a17597b; // STORAGE[0x68fb8e7cad479ccc9244a179d64897454189fd25db04e15d3a5135327a17597b]\nuint256[] array_68fc0e82119a780903c8e97d959a36d433d1e401ad7b7a461ff2087e524d54a8; // STORAGE[0x68fc0e82119a780903c8e97d959a36d433d1e401ad7b7a461ff2087e524d54a8]\nuint256[] array_6a4c132bb6958029ac3595112f46988f11d4ebbbea74e0a2100963f772df62e2; // STORAGE[0x6a4c132bb6958029ac3595112f46988f11d4ebbbea74e0a2100963f772df62e2]\nuint256[] array_6c22aa398af7efcdf0396581b727df5ed57ae588f2d82fd799cbf5f8c3ed84d4; // STORAGE[0x6c22aa398af7efcdf0396581b727df5ed57ae588f2d82fd799cbf5f8c3ed84d4]\nuint256[] array_6e80044b428a86ddb5f7277680f16ac528219bbc3f477f367a023fd1680fef05; // STORAGE[0x6e80044b428a86ddb5f7277680f16ac528219bbc3f477f367a023fd1680fef05]\nuint256[] array_6f153c7bec1b961778a44c5a2c99b1e110e89aa94705c74c316b7331a3d84065; // STORAGE[0x6f153c7bec1b961778a44c5a2c99b1e110e89aa94705c74c316b7331a3d84065]\nuint256[] array_71b77ca6c28942a6a5831a75c27e59515f05848f3eb905d816d90fe6792b6da7; // STORAGE[0x71b77ca6c28942a6a5831a75c27e59515f05848f3eb905d816d90fe6792b6da7]\nuint256[] array_7328c223b526ac18a2ca34e3cc928d22c174fde8c81d65ae5d17c01763d134b1; // STORAGE[0x7328c223b526ac18a2ca34e3cc928d22c174fde8c81d65ae5d17c01763d134b1]\nuint256[] array_7af51807487ed801b97f9a13aded219acf180b0f4e84cab1d24d71f9dbe1d25c; // STORAGE[0x7af51807487ed801b97f9a13aded219acf180b0f4e84cab1d24d71f9dbe1d25c]\nuint256[] array_7bfa808024a5334b0a1e191d8e95f6724ea40d1a03d1286b6934e670f8c6924b; // STORAGE[0x7bfa808024a5334b0a1e191d8e95f6724ea40d1a03d1286b6934e670f8c6924b]\nuint256[] array_7d8f31d22c75db1e8e364ca358d5a3691a36535d438f852fd3533a53c8f16acf; // STORAGE[0x7d8f31d22c75db1e8e364ca358d5a3691a36535d438f852fd3533a53c8f16acf]\nuint256[] array_7f0d1b48082df3e2dc522530de36c82247a22429eca92f4f18d0e2f55931d689; // STORAGE[0x7f0d1b48082df3e2dc522530de36c82247a22429eca92f4f18d0e2f55931d689]\nuint256[] array_80f14989282b60fa53cdd4f20dddf40419d0398091709cceef4ea6608cb53a86; // STORAGE[0x80f14989282b60fa53cdd4f20dddf40419d0398091709cceef4ea6608cb53a86]\nuint256[] array_885ce2cbc289e24b266643f1b3bd713351837e3869b2fe1821204bfb89df8355; // STORAGE[0x885ce2cbc289e24b266643f1b3bd713351837e3869b2fe1821204bfb89df8355]\nuint256[] array_8a3a0b6f6fa9438554c4aa5bdaf7838f6c90507836aabb33d6ebaeb414e248f9; // STORAGE[0x8a3a0b6f6fa9438554c4aa5bdaf7838f6c90507836aabb33d6ebaeb414e248f9]\nuint256[] array_9062a4b4dbb38897d7030e75266746773c25296ddcc4429a1573d7e14899dc4a; // STORAGE[0x9062a4b4dbb38897d7030e75266746773c25296ddcc4429a1573d7e14899dc4a]\nuint256[] array_925be0b447003e4366d6addf976a9e5448b14e56ca3733fe4a9ca6f86b0dcbd5; // STORAGE[0x925be0b447003e4366d6addf976a9e5448b14e56ca3733fe4a9ca6f86b0dcbd5]\nuint256[] array_94f2575c7592b1dfd5a8846a17482da7b0e38fb10c93880d74916c5f16792464; // STORAGE[0x94f2575c7592b1dfd5a8846a17482da7b0e38fb10c93880d74916c5f16792464]\nuint256[] array_950e937492ee34259869433cf638f9ddc3db789216033729827dca31e9130b28; // STORAGE[0x950e937492ee34259869433cf638f9ddc3db789216033729827dca31e9130b28]\nuint256[] array_9796157d41eb7c055be364fa14d5c9deb251f51b72f8cebea06ccb390e603354; // STORAGE[0x9796157d41eb7c055be364fa14d5c9deb251f51b72f8cebea06ccb390e603354]\nuint256[] array_9c0ea5b0ac1441361bd97a1871d83799b2d794cf29a9954ddc2e33262e005d67; // STORAGE[0x9c0ea5b0ac1441361bd97a1871d83799b2d794cf29a9954ddc2e33262e005d67]\nuint256[] array_9d25560b530187b64e3d8eebac1a6611a17144d1a34b39d6b0367b23d25771de; // STORAGE[0x9d25560b530187b64e3d8eebac1a6611a17144d1a34b39d6b0367b23d25771de]\nuint256[] array_9f4e12e393433b9749089d7660b578840ae05c9423ce1aefceb0c80c340a21c6; // STORAGE[0x9f4e12e393433b9749089d7660b578840ae05c9423ce1aefceb0c80c340a21c6]\nuint256[] array_a171e6dff2e291b2403638b36fa1900bfb6d28056b9cc28339adf04ff3e24b88; // STORAGE[0xa171e6dff2e291b2403638b36fa1900bfb6d28056b9cc28339adf04ff3e24b88]\nuint256[] array_a3ddc4e8d053be09ec661eb04964a206cbd921c2c11fc03088857923bed1485a; // STORAGE[0xa3ddc4e8d053be09ec661eb04964a206cbd921c2c11fc03088857923bed1485a]\nuint256[] array_a4b6f6c87384a4c75064343ffd6646b01b98a7d0701dec60343872fe39d78894; // STORAGE[0xa4b6f6c87384a4c75064343ffd6646b01b98a7d0701dec60343872fe39d78894]\nuint256[] array_a6d60d4ff1c38ae572157a43d1b8579039e4b4cc96e22c75c07379751785fe51; // STORAGE[0xa6d60d4ff1c38ae572157a43d1b8579039e4b4cc96e22c75c07379751785fe51]\nuint256[] array_a7d0f7195d52522be008ca0e9c182cb8d5cdec7c4327b16f8f80417732546566; // STORAGE[0xa7d0f7195d52522be008ca0e9c182cb8d5cdec7c4327b16f8f80417732546566]\nuint256[] array_ad96411afed98a37aa585ce71717b0782fa4bee47da09d8f483e532128238611; // STORAGE[0xad96411afed98a37aa585ce71717b0782fa4bee47da09d8f483e532128238611]\nuint256[] array_af2afaf35ad6da1368c28c91ba52a84b6fc26e5aa0d9b26dc4fa0373e4d12c30; // STORAGE[0xaf2afaf35ad6da1368c28c91ba52a84b6fc26e5aa0d9b26dc4fa0373e4d12c30]\nuint256[] array_b45c265061aa22e7658e9b26b3853f5506e5bc5b9f4d73625eb6f5e4ce181e0e; // STORAGE[0xb45c265061aa22e7658e9b26b3853f5506e5bc5b9f4d73625eb6f5e4ce181e0e]\nuint256[] array_b607cc36270bbbb376b98f602ec3a5ec6c4fe7cf0d42af35fd17a642242d24fd; // STORAGE[0xb607cc36270bbbb376b98f602ec3a5ec6c4fe7cf0d42af35fd17a642242d24fd]\nuint256[] array_b79c508b45d95db38395ed273cca5afa4bcb8f1225ec7e9c849430db27d6f0fe; // STORAGE[0xb79c508b45d95db38395ed273cca5afa4bcb8f1225ec7e9c849430db27d6f0fe]\nuint256[] array_bb7ea1d025e27e153f156855239b4b128e9da3a64a6f0a0270f8920989588142; // STORAGE[0xbb7ea1d025e27e153f156855239b4b128e9da3a64a6f0a0270f8920989588142]\nuint256[] array_bc49c41a6e963445b9f692012bd7dfc893d239ca45ab7b217fdbab0816fc0509; // STORAGE[0xbc49c41a6e963445b9f692012bd7dfc893d239ca45ab7b217fdbab0816fc0509]\nuint256[] array_bdbfd5fe12b0725f9a86effbf0320821eb71455f8b2a1271fae01b3621e6f172; // STORAGE[0xbdbfd5fe12b0725f9a86effbf0320821eb71455f8b2a1271fae01b3621e6f172]\nuint256[] array_c20be026ae5ea792bd28b5908d1dfcfd8c2e447d9276607ddf6143e7dddc0fe8; // STORAGE[0xc20be026ae5ea792bd28b5908d1dfcfd8c2e447d9276607ddf6143e7dddc0fe8]\nuint256[] array_cad859e690f7d8c761fcdbf5924952161e6445676b1f33de04f8588c21dba694; // STORAGE[0xcad859e690f7d8c761fcdbf5924952161e6445676b1f33de04f8588c21dba694]\nuint256[] array_d5310f85f4460a57771b0ba7c922e1273458411836157e863377c3ceba09ccc5; // STORAGE[0xd5310f85f4460a57771b0ba7c922e1273458411836157e863377c3ceba09ccc5]\nuint256[] array_d6e773d900ec812417038da9baf6d960fcc201dd4bfa0d6323c29c7f6d7d874a; // STORAGE[0xd6e773d900ec812417038da9baf6d960fcc201dd4bfa0d6323c29c7f6d7d874a]\nuint256[] array_d9ae7388d2083c2e208c0dfdf9b10bc72bbfb00d63d88b3c7fd7c315bfc1cf40; // STORAGE[0xd9ae7388d2083c2e208c0dfdf9b10bc72bbfb00d63d88b3c7fd7c315bfc1cf40]\nuint256[] array_da4c88cb8422456e6dbc87bdc0d70fdf69c0f9f7d6833899744759615d2d4cc5; // STORAGE[0xda4c88cb8422456e6dbc87bdc0d70fdf69c0f9f7d6833899744759615d2d4cc5]\nuint256[] array_dd629e5d55690c61d87bb2283f8033a4ed0c9727f0b3cc897e051f7afda800a5; // STORAGE[0xdd629e5d55690c61d87bb2283f8033a4ed0c9727f0b3cc897e051f7afda800a5]\nuint256[] array_ddd2ed02835f51d041d738f145bf914e284838547c9bcc952ea4f9de82c9f093; // STORAGE[0xddd2ed02835f51d041d738f145bf914e284838547c9bcc952ea4f9de82c9f093]\nuint256[] array_e0033292d8349127dd6b6fa9c34f6f3d290151b2785dbcbf18fa2c3985d1f743; // STORAGE[0xe0033292d8349127dd6b6fa9c34f6f3d290151b2785dbcbf18fa2c3985d1f743]\nuint256[] array_e03615811ae25b894de73e643038c13c37f602dc1e17ff1a02e5854893f3bd5e; // STORAGE[0xe03615811ae25b894de73e643038c13c37f602dc1e17ff1a02e5854893f3bd5e]\nuint256[] array_e99635fccc8593e18a8f8d41f3819fbbb23d116b5e979cc68c43a98e9c10e52a; // STORAGE[0xe99635fccc8593e18a8f8d41f3819fbbb23d116b5e979cc68c43a98e9c10e52a]\nuint256[] array_f0a880c29f3aa22e9078c1072a445ad492aa9148a64bef22960367f9f163347e; // STORAGE[0xf0a880c29f3aa22e9078c1072a445ad492aa9148a64bef22960367f9f163347e]\nuint256[] array_f3acc69a9031f5037951ce1c99fcf7752f2d0ceae99c0b9690d37b7553f5f03f; // STORAGE[0xf3acc69a9031f5037951ce1c99fcf7752f2d0ceae99c0b9690d37b7553f5f03f]\nuint256[] array_f7459e621ec1fc60fd62c436d4281de72cb9f48787dc9c8288a3050292b09004; // STORAGE[0xf7459e621ec1fc60fd62c436d4281de72cb9f48787dc9c8288a3050292b09004]\nuint256[] array_f787d5ff306ee7ea1d7b35b5cacd5a837646921c113945dbc3a3b6329ce40033; // STORAGE[0xf787d5ff306ee7ea1d7b35b5cacd5a837646921c113945dbc3a3b6329ce40033]\nuint256[] array_fbefd6df65b5da21e9f0dc3da2df6dc37be71551086f5aba2b0ad548c4758150; // STORAGE[0xfbefd6df65b5da21e9f0dc3da2df6dc37be71551086f5aba2b0ad548c4758150]\nuint256[] array_fc869d08d1790d4602743c5b6e4adb33c74c1d0d7c8c47359779d859193dcb05; // STORAGE[0xfc869d08d1790d4602743c5b6e4adb33c74c1d0d7c8c47359779d859193dcb05]\nuint160 stor_3572d0e1360c3381bfd3c17c49b4f148cc36b0e1714d60d425884c43b3164d_0_19; // STORAGE[0x3572d0e1360c3381bfd3c17c49b4f148cc36b0e1714d60d425884c43b3164d] bytes 0 to 19\nuint160 stor_b80c4ff21059bea8fc1d75692dc11a282117d4df95e89684ca76663735d95b_0_19; // STORAGE[0xb80c4ff21059bea8fc1d75692dc11a282117d4df95e89684ca76663735d95b] bytes 0 to 19\nuint160 _view66; // STORAGE[0x15ff080d7eac1f6f63bc15ad59f1aa0e91a8dd9a1d05302cf0b541d6b91a174a] bytes 0 to 19\nuint160 stor_18429c28d334b14b42b6ef9de5acb651e5d5290947050226e0461d6dea0d9428_0_19; // STORAGE[0x18429c28d334b14b42b6ef9de5acb651e5d5290947050226e0461d6dea0d9428] bytes 0 to 19\nuint160 stor_1bccf7cdda3c8614e4cd7494b1ac91ffd64f111d8f3e8157c677e5d8ec07514a_0_19; // STORAGE[0x1bccf7cdda3c8614e4cd7494b1ac91ffd64f111d8f3e8157c677e5d8ec07514a] bytes 0 to 19\nuint160 _view36; // STORAGE[0x1d6259cceddee50e33c0ede37bb2e8136cec47688223681b2fb690d3fce7a3d9] bytes 0 to 19\nuint160 _view34; // STORAGE[0x20b9f448bd756afc257978f9292eb690e01b69b27011d24a9e480dc936eddce6] bytes 0 to 19\nuint160 _view42; // STORAGE[0x2a41d6eb867ddcfeac667c3fe429f7b1dc4c811189b3ece5135425064920a1b7] bytes 0 to 19\nuint160 _view44; // STORAGE[0x2c3ae7faa961c1022fc62c6e28aa6a8ca294093f03d2e3388f637423816a5ca5] bytes 0 to 19\nuint160 _view26; // STORAGE[0x2cc0eb4b3ec5bf92d601b8938793073ef9a83f91d7e5985435824ae87524336a] bytes 0 to 19\nuint160 stor_38378c408f71c9e5f35d8db763a45d2b35da16f98182f9f4d54306cbd58c0a09_0_19; // STORAGE[0x38378c408f71c9e5f35d8db763a45d2b35da16f98182f9f4d54306cbd58c0a09] bytes 0 to 19\nuint160 stor_39366d2e14b42d797be5fb2272e93ead41cec826548512dfa09eaadf5ba4c2a4_0_19; // STORAGE[0x39366d2e14b42d797be5fb2272e93ead41cec826548512dfa09eaadf5ba4c2a4] bytes 0 to 19\nuint160 _view68; // STORAGE[0x3ef9364d21f37d354c87e17a06c3c4cdf15e8eed5cd473da1fa84a7d682d105a] bytes 0 to 19\nuint160 stor_43b5581607f3794931937dc64797d2130b6bf8bdfd272fb8ea0df3fe46d9c410_0_19; // STORAGE[0x43b5581607f3794931937dc64797d2130b6bf8bdfd272fb8ea0df3fe46d9c410] bytes 0 to 19\nuint160 stor_44f9494ddace41673149b1ce2120e2a8dc5880bba93ff68e6b6c883c57a0c695_0_19; // STORAGE[0x44f9494ddace41673149b1ce2120e2a8dc5880bba93ff68e6b6c883c57a0c695] bytes 0 to 19\nuint160 stor_4b9bef40f84d0af3e7ab60bb731d04fce0950a559d5370235722888a1f5f99d8_0_19; // STORAGE[0x4b9bef40f84d0af3e7ab60bb731d04fce0950a559d5370235722888a1f5f99d8] bytes 0 to 19\nuint160 _view40; // STORAGE[0x5759ed2ce2b5d312af3edff82a4df858741988b1bddfcca1f32b72a28d1d70f0] bytes 0 to 19\nuint160 stor_5859c04fd0363b95e824b76bab6d064bf500fe171eea5114a198e11ac4dfbbf0_0_19; // STORAGE[0x5859c04fd0363b95e824b76bab6d064bf500fe171eea5114a198e11ac4dfbbf0] bytes 0 to 19\nuint160 _view38; // STORAGE[0x59120eb83699c466c74218988aa3115ae72e537ee35dc8cc4c4abd122c83ad0a] bytes 0 to 19\nuint160 _view52; // STORAGE[0x5e24e8ce886354498e332d1e8a2a01424c34984b9e9878f3b90a653f45c2fe94] bytes 0 to 19\nuint160 stor_6185c5e8994dce17071ce177c03c6de8690044327ac7998c1b8b6b55cca70ba8_0_19; // STORAGE[0x6185c5e8994dce17071ce177c03c6de8690044327ac7998c1b8b6b55cca70ba8] bytes 0 to 19\nuint160 _view70; // STORAGE[0x620e7da6943df11e66c1d88b8271702e31ee8bec0947241b0ac443ebd26a9910] bytes 0 to 19\nuint160 _view58; // STORAGE[0x69338dff4f784e52d4e35f74f32f0d1e170d428e47d685b873079dead04db668] bytes 0 to 19\nuint160 _view50; // STORAGE[0x6d00efa09a7071d855bc5fb7d93921fbf02f2c4e3992802f2a9b08050cf48ea8] bytes 0 to 19\nuint160 stor_6db3ef05809c347508073838d040f85e724aad0387cbd203710480231a932b90_0_19; // STORAGE[0x6db3ef05809c347508073838d040f85e724aad0387cbd203710480231a932b90] bytes 0 to 19\nuint160 _view30; // STORAGE[0x6ea47ca2f9e3a67b0e336c514aa9f125109f49309b7162caec32e7d27e5c838c] bytes 0 to 19\nuint160 stor_716ee643adc48c0d54d1cca3fd34acddf96d91766d436fe06943cbddbf3657c8_0_19; // STORAGE[0x716ee643adc48c0d54d1cca3fd34acddf96d91766d436fe06943cbddbf3657c8] bytes 0 to 19\nuint160 _view56; // STORAGE[0x7235287a5cb1908d23369905908658187d8d258d18d7ad15bcb288795998bcba] bytes 0 to 19\nuint160 _view28; // STORAGE[0x7352bc45c8aa6995480780fe15a07c4daa795263b5e7a9d04d9ed979c93ca85e] bytes 0 to 19\nuint160 stor_82fb8bdd0a53542a1f59046c16f7a1350c43d22db36425bb53f551e7c6a09181_0_19; // STORAGE[0x82fb8bdd0a53542a1f59046c16f7a1350c43d22db36425bb53f551e7c6a09181] bytes 0 to 19\nuint160 stor_85987b95e14cde5be3e42d9efb376de14ffdece0bb4541a56f9ab965e7927edf_0_19; // STORAGE[0x85987b95e14cde5be3e42d9efb376de14ffdece0bb4541a56f9ab965e7927edf] bytes 0 to 19\nuint160 stor_929186da681e8492d5c67674d8a4dc7a9df883794b8e9896af8955a73f171239_0_19; // STORAGE[0x929186da681e8492d5c67674d8a4dc7a9df883794b8e9896af8955a73f171239] bytes 0 to 19\nuint160 _view24; // STORAGE[0x9542868bcbb5bd2ea274742292a8fd9233b9d5ee15ffeb027d991190493290d8] bytes 0 to 19\nuint160 stor_a325aa408b8d79ac3cad595647b5c792e1aaac5507b7d2a601e7daa894133a4f_0_19; // STORAGE[0xa325aa408b8d79ac3cad595647b5c792e1aaac5507b7d2a601e7daa894133a4f] bytes 0 to 19\nuint160 stor_a780ab882f61163081726a9afc75e90df3c1caced105f924cbb367ec432d483c_0_19; // STORAGE[0xa780ab882f61163081726a9afc75e90df3c1caced105f924cbb367ec432d483c] bytes 0 to 19\nuint160 stor_a82effcee24f9d07d1b8ac005bd5c8627d3d8c14e389a86d3b62ee3d5f63ab89_0_19; // STORAGE[0xa82effcee24f9d07d1b8ac005bd5c8627d3d8c14e389a86d3b62ee3d5f63ab89] bytes 0 to 19\nuint160 stor_ad2d52b8047a96778c45f477dabddaae71b5ff6b355ac44a03c9522a54a18a26_0_19; // STORAGE[0xad2d52b8047a96778c45f477dabddaae71b5ff6b355ac44a03c9522a54a18a26] bytes 0 to 19\nuint160 _view62; // STORAGE[0xb2c0f7f2035a27e69c9e7dbc21354039da07b465d84ab3b1eba23eace489d13e] bytes 0 to 19\nuint160 _view60; // STORAGE[0xb60b41cd0546c5957f612a339faac0e24916738bd2d2e12670d8608e3bc0ed87] bytes 0 to 19\nuint160 _view54; // STORAGE[0xc2e10ab7a19d872b97ee35501295cf578a457b800ae20d9a790ee95f37737970] bytes 0 to 19\nuint160 _view32; // STORAGE[0xc61cb1584591e22c2f2af6b8faa5e1dfb9c5f01cb4cf13988b636ec701ab8cfa] bytes 0 to 19\nuint160 stor_c6e96e6d3fc054a65579470aba35596b4e2269e2a014917ba21223d9a88d9b45_0_19; // STORAGE[0xc6e96e6d3fc054a65579470aba35596b4e2269e2a014917ba21223d9a88d9b45] bytes 0 to 19\nuint160 stor_d257fbe569f4c734b4e0a7c00d87a54b79972ad849b7d12d3c1d2a271b94bbac_0_19; // STORAGE[0xd257fbe569f4c734b4e0a7c00d87a54b79972ad849b7d12d3c1d2a271b94bbac] bytes 0 to 19\nuint160 stor_dde03a41ded2460749257e7d744d5bd57a6483348238b11f66f08a3e6be9d0ae_0_19; // STORAGE[0xdde03a41ded2460749257e7d744d5bd57a6483348238b11f66f08a3e6be9d0ae] bytes 0 to 19\nuint160 _view46; // STORAGE[0xe3c071b83ece3f25966730b2cdbe352aaff3ac63e58b83ca8d2e852975ab811a] bytes 0 to 19\nuint160 stor_e720f07b0e62fc810dbb64d4f17af5986a497161476b9904f42e9066ecd3e989_0_19; // STORAGE[0xe720f07b0e62fc810dbb64d4f17af5986a497161476b9904f42e9066ecd3e989] bytes 0 to 19\nuint160 _view48; // STORAGE[0xe7ee43b207a5830b8f1cfb6dd5e3a4a684b78ee29fa74602d586f8fb3f0c8bed] bytes 0 to 19\nuint160 stor_f3118d41e0deec621ee3de85ec11bfcf8aee617b34cd0b5f1496acc8de2cbdcc_0_19; // STORAGE[0xf3118d41e0deec621ee3de85ec11bfcf8aee617b34cd0b5f1496acc8de2cbdcc] bytes 0 to 19\nuint160 _view64; // STORAGE[0xf643a7cd3d3c53a29cb8a071b504caed95bec2c91d4fdeab71014a3fec6400e9] bytes 0 to 19\nuint160 _view22; // STORAGE[0xfa3bcae139a60d3922021a29633a6c8687b9ba7e920e2516b2cfd8f5fd3e0e51] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction view28() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 28;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_925be0b447003e4366d6addf976a9e5448b14e56ca3733fe4a9ca6f86b0dcbd5.length & (!(array_925be0b447003e4366d6addf976a9e5448b14e56ca3733fe4a9ca6f86b0dcbd5.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_925be0b447003e4366d6addf976a9e5448b14e56ca3733fe4a9ca6f86b0dcbd5.length) {\n        if (31 < array_925be0b447003e4366d6addf976a9e5448b14e56ca3733fe4a9ca6f86b0dcbd5.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_925be0b447003e4366d6addf976a9e5448b14e56ca3733fe4a9ca6f86b0dcbd5.length <= v1);\n        } else {\n            MEM[v2] = array_925be0b447003e4366d6addf976a9e5448b14e56ca3733fe4a9ca6f86b0dcbd5.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_d6e773d900ec812417038da9baf6d960fcc201dd4bfa0d6323c29c7f6d7d874a.length);\n    v5 = v4.data;\n    if (array_d6e773d900ec812417038da9baf6d960fcc201dd4bfa0d6323c29c7f6d7d874a.length) {\n        if (31 < array_d6e773d900ec812417038da9baf6d960fcc201dd4bfa0d6323c29c7f6d7d874a.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_d6e773d900ec812417038da9baf6d960fcc201dd4bfa0d6323c29c7f6d7d874a.length <= v5);\n        } else {\n            MEM[v5] = array_d6e773d900ec812417038da9baf6d960fcc201dd4bfa0d6323c29c7f6d7d874a.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_57023ef7fe58b878582140ea36f22723905ad724896eaf74090fba76c229bd22.length);\n    v8 = v7.data;\n    if (array_57023ef7fe58b878582140ea36f22723905ad724896eaf74090fba76c229bd22.length) {\n        if (31 < array_57023ef7fe58b878582140ea36f22723905ad724896eaf74090fba76c229bd22.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_57023ef7fe58b878582140ea36f22723905ad724896eaf74090fba76c229bd22.length <= v8);\n        } else {\n            MEM[v8] = array_57023ef7fe58b878582140ea36f22723905ad724896eaf74090fba76c229bd22.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_2d9f8353bca53bc9b195aa186ab6d98b49a9120c00257ee2c7d860c26f864ea.length);\n    v11 = v10.data;\n    if (array_2d9f8353bca53bc9b195aa186ab6d98b49a9120c00257ee2c7d860c26f864ea.length) {\n        if (31 < array_2d9f8353bca53bc9b195aa186ab6d98b49a9120c00257ee2c7d860c26f864ea.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_2d9f8353bca53bc9b195aa186ab6d98b49a9120c00257ee2c7d860c26f864ea.length <= v11);\n        } else {\n            MEM[v11] = array_2d9f8353bca53bc9b195aa186ab6d98b49a9120c00257ee2c7d860c26f864ea.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_ad2d52b8047a96778c45f477dabddaae71b5ff6b355ac44a03c9522a54a18a26_0_19, v13, v16, _view28, v19, v22;\n}\n\nfunction changeColorGreen() public payable { \n    require(_colorLeaderboard[msg.sender] > 0);\n    require(msg.value == 0x470de4df82000);\n    stor_a += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#67d75c';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction view70() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 70;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_885ce2cbc289e24b266643f1b3bd713351837e3869b2fe1821204bfb89df8355.length & (!(array_885ce2cbc289e24b266643f1b3bd713351837e3869b2fe1821204bfb89df8355.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_885ce2cbc289e24b266643f1b3bd713351837e3869b2fe1821204bfb89df8355.length) {\n        if (31 < array_885ce2cbc289e24b266643f1b3bd713351837e3869b2fe1821204bfb89df8355.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_885ce2cbc289e24b266643f1b3bd713351837e3869b2fe1821204bfb89df8355.length <= v1);\n        } else {\n            MEM[v2] = array_885ce2cbc289e24b266643f1b3bd713351837e3869b2fe1821204bfb89df8355.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_9796157d41eb7c055be364fa14d5c9deb251f51b72f8cebea06ccb390e603354.length);\n    v5 = v4.data;\n    if (array_9796157d41eb7c055be364fa14d5c9deb251f51b72f8cebea06ccb390e603354.length) {\n        if (31 < array_9796157d41eb7c055be364fa14d5c9deb251f51b72f8cebea06ccb390e603354.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_9796157d41eb7c055be364fa14d5c9deb251f51b72f8cebea06ccb390e603354.length <= v5);\n        } else {\n            MEM[v5] = array_9796157d41eb7c055be364fa14d5c9deb251f51b72f8cebea06ccb390e603354.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_dd629e5d55690c61d87bb2283f8033a4ed0c9727f0b3cc897e051f7afda800a5.length);\n    v8 = v7.data;\n    if (array_dd629e5d55690c61d87bb2283f8033a4ed0c9727f0b3cc897e051f7afda800a5.length) {\n        if (31 < array_dd629e5d55690c61d87bb2283f8033a4ed0c9727f0b3cc897e051f7afda800a5.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_dd629e5d55690c61d87bb2283f8033a4ed0c9727f0b3cc897e051f7afda800a5.length <= v8);\n        } else {\n            MEM[v8] = array_dd629e5d55690c61d87bb2283f8033a4ed0c9727f0b3cc897e051f7afda800a5.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_649ad4ccefe948b2d43ac19747d5abc540fbdd07b230124aa9ade80ee5d79540.length);\n    v11 = v10.data;\n    if (array_649ad4ccefe948b2d43ac19747d5abc540fbdd07b230124aa9ade80ee5d79540.length) {\n        if (31 < array_649ad4ccefe948b2d43ac19747d5abc540fbdd07b230124aa9ade80ee5d79540.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_649ad4ccefe948b2d43ac19747d5abc540fbdd07b230124aa9ade80ee5d79540.length <= v11);\n        } else {\n            MEM[v11] = array_649ad4ccefe948b2d43ac19747d5abc540fbdd07b230124aa9ade80ee5d79540.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_3572d0e1360c3381bfd3c17c49b4f148cc36b0e1714d60d425884c43b3164d_0_19, v13, v16, _view70, v19, v22;\n}\n\nfunction setColorYellow() public payable { \n    require(!_colorLeaderboard[msg.sender]);\n    require(msg.value == 0x8e1bc9bf04000);\n    stor_9 += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#ead353';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction view36() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 36;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_4f8c9d329171a3577e6beb939d329b1f26da4c7a51f25bbe134c866f0feee945.length & (!(array_4f8c9d329171a3577e6beb939d329b1f26da4c7a51f25bbe134c866f0feee945.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_4f8c9d329171a3577e6beb939d329b1f26da4c7a51f25bbe134c866f0feee945.length) {\n        if (31 < array_4f8c9d329171a3577e6beb939d329b1f26da4c7a51f25bbe134c866f0feee945.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_4f8c9d329171a3577e6beb939d329b1f26da4c7a51f25bbe134c866f0feee945.length <= v1);\n        } else {\n            MEM[v2] = array_4f8c9d329171a3577e6beb939d329b1f26da4c7a51f25bbe134c866f0feee945.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_b4595228ef9d6fd2aeb7154fa18462681cdc944621830181269e75d4b39a885.length);\n    v5 = v4.data;\n    if (array_b4595228ef9d6fd2aeb7154fa18462681cdc944621830181269e75d4b39a885.length) {\n        if (31 < array_b4595228ef9d6fd2aeb7154fa18462681cdc944621830181269e75d4b39a885.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_b4595228ef9d6fd2aeb7154fa18462681cdc944621830181269e75d4b39a885.length <= v5);\n        } else {\n            MEM[v5] = array_b4595228ef9d6fd2aeb7154fa18462681cdc944621830181269e75d4b39a885.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_10f5232ee9f6343d8bf0b7c9043a31ee616d8f028dcf3d2e9033ff8e0ce0ef0f.length);\n    v8 = v7.data;\n    if (array_10f5232ee9f6343d8bf0b7c9043a31ee616d8f028dcf3d2e9033ff8e0ce0ef0f.length) {\n        if (31 < array_10f5232ee9f6343d8bf0b7c9043a31ee616d8f028dcf3d2e9033ff8e0ce0ef0f.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_10f5232ee9f6343d8bf0b7c9043a31ee616d8f028dcf3d2e9033ff8e0ce0ef0f.length <= v8);\n        } else {\n            MEM[v8] = array_10f5232ee9f6343d8bf0b7c9043a31ee616d8f028dcf3d2e9033ff8e0ce0ef0f.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_f3acc69a9031f5037951ce1c99fcf7752f2d0ceae99c0b9690d37b7553f5f03f.length);\n    v11 = v10.data;\n    if (array_f3acc69a9031f5037951ce1c99fcf7752f2d0ceae99c0b9690d37b7553f5f03f.length) {\n        if (31 < array_f3acc69a9031f5037951ce1c99fcf7752f2d0ceae99c0b9690d37b7553f5f03f.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_f3acc69a9031f5037951ce1c99fcf7752f2d0ceae99c0b9690d37b7553f5f03f.length <= v11);\n        } else {\n            MEM[v11] = array_f3acc69a9031f5037951ce1c99fcf7752f2d0ceae99c0b9690d37b7553f5f03f.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_4b9bef40f84d0af3e7ab60bb731d04fce0950a559d5370235722888a1f5f99d8_0_19, v13, v16, _view36, v19, v22;\n}\n\nfunction changeColorBlack() public payable { \n    require(_colorLeaderboard[msg.sender] > 0);\n    require(msg.value == 0x470de4df82000);\n    stor_f += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#212121';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction setColorGreen() public payable { \n    require(!_colorLeaderboard[msg.sender]);\n    require(msg.value == 0x8e1bc9bf04000);\n    stor_a += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#67d75c';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction view64() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 64;\n    MEM[32] = 1;\n    v0 = new bytes[](((!(array_163a647ba7edd41caabec3eace9ce83f1a89ebea06fc099aa7fb98088da75131.length & 0x1) << 8) + ~0 & array_163a647ba7edd41caabec3eace9ce83f1a89ebea06fc099aa7fb98088da75131.length) >> 1);\n    v1 = v2 = v0.data;\n    if (array_163a647ba7edd41caabec3eace9ce83f1a89ebea06fc099aa7fb98088da75131.length) {\n        if (31 < array_163a647ba7edd41caabec3eace9ce83f1a89ebea06fc099aa7fb98088da75131.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_163a647ba7edd41caabec3eace9ce83f1a89ebea06fc099aa7fb98088da75131.length <= v1);\n        } else {\n            MEM[v2] = array_163a647ba7edd41caabec3eace9ce83f1a89ebea06fc099aa7fb98088da75131.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_bc49c41a6e963445b9f692012bd7dfc893d239ca45ab7b217fdbab0816fc0509.length);\n    v5 = v4.data;\n    if (array_bc49c41a6e963445b9f692012bd7dfc893d239ca45ab7b217fdbab0816fc0509.length) {\n        if (31 < array_bc49c41a6e963445b9f692012bd7dfc893d239ca45ab7b217fdbab0816fc0509.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_bc49c41a6e963445b9f692012bd7dfc893d239ca45ab7b217fdbab0816fc0509.length <= v5);\n        } else {\n            MEM[v5] = array_bc49c41a6e963445b9f692012bd7dfc893d239ca45ab7b217fdbab0816fc0509.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_13e779bc7ec8e84a68157fc5c2caa579dc0ee0b80d83944c270539b94cac271f.length);\n    v8 = v7.data;\n    if (array_13e779bc7ec8e84a68157fc5c2caa579dc0ee0b80d83944c270539b94cac271f.length) {\n        if (31 < array_13e779bc7ec8e84a68157fc5c2caa579dc0ee0b80d83944c270539b94cac271f.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_13e779bc7ec8e84a68157fc5c2caa579dc0ee0b80d83944c270539b94cac271f.length <= v8);\n        } else {\n            MEM[v8] = array_13e779bc7ec8e84a68157fc5c2caa579dc0ee0b80d83944c270539b94cac271f.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_9d25560b530187b64e3d8eebac1a6611a17144d1a34b39d6b0367b23d25771de.length);\n    v11 = v10.data;\n    if (array_9d25560b530187b64e3d8eebac1a6611a17144d1a34b39d6b0367b23d25771de.length) {\n        if (31 < array_9d25560b530187b64e3d8eebac1a6611a17144d1a34b39d6b0367b23d25771de.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_9d25560b530187b64e3d8eebac1a6611a17144d1a34b39d6b0367b23d25771de.length <= v11);\n        } else {\n            MEM[v11] = array_9d25560b530187b64e3d8eebac1a6611a17144d1a34b39d6b0367b23d25771de.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_dde03a41ded2460749257e7d744d5bd57a6483348238b11f66f08a3e6be9d0ae_0_19, v13, v16, _view64, v19, v22;\n}\n\nfunction setColorTeal() public payable { \n    require(!_colorLeaderboard[msg.sender]);\n    require(msg.value == 0x8e1bc9bf04000);\n    stor_c += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#86e3db';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction view50() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 50;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_28eef39a072497d2105dcb780594e4ed840d3beb94e2ea31a78a935b50a4ae2e.length & (!(array_28eef39a072497d2105dcb780594e4ed840d3beb94e2ea31a78a935b50a4ae2e.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_28eef39a072497d2105dcb780594e4ed840d3beb94e2ea31a78a935b50a4ae2e.length) {\n        if (31 < array_28eef39a072497d2105dcb780594e4ed840d3beb94e2ea31a78a935b50a4ae2e.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_28eef39a072497d2105dcb780594e4ed840d3beb94e2ea31a78a935b50a4ae2e.length <= v1);\n        } else {\n            MEM[v2] = array_28eef39a072497d2105dcb780594e4ed840d3beb94e2ea31a78a935b50a4ae2e.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_b45c265061aa22e7658e9b26b3853f5506e5bc5b9f4d73625eb6f5e4ce181e0e.length);\n    v5 = v4.data;\n    if (array_b45c265061aa22e7658e9b26b3853f5506e5bc5b9f4d73625eb6f5e4ce181e0e.length) {\n        if (31 < array_b45c265061aa22e7658e9b26b3853f5506e5bc5b9f4d73625eb6f5e4ce181e0e.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_b45c265061aa22e7658e9b26b3853f5506e5bc5b9f4d73625eb6f5e4ce181e0e.length <= v5);\n        } else {\n            MEM[v5] = array_b45c265061aa22e7658e9b26b3853f5506e5bc5b9f4d73625eb6f5e4ce181e0e.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_3ba015d6b845e102ce2f76836007be82508e3543856f2a3c2ff4b56eb46d920e.length);\n    v8 = v7.data;\n    if (array_3ba015d6b845e102ce2f76836007be82508e3543856f2a3c2ff4b56eb46d920e.length) {\n        if (31 < array_3ba015d6b845e102ce2f76836007be82508e3543856f2a3c2ff4b56eb46d920e.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_3ba015d6b845e102ce2f76836007be82508e3543856f2a3c2ff4b56eb46d920e.length <= v8);\n        } else {\n            MEM[v8] = array_3ba015d6b845e102ce2f76836007be82508e3543856f2a3c2ff4b56eb46d920e.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_f7459e621ec1fc60fd62c436d4281de72cb9f48787dc9c8288a3050292b09004.length);\n    v11 = v10.data;\n    if (array_f7459e621ec1fc60fd62c436d4281de72cb9f48787dc9c8288a3050292b09004.length) {\n        if (31 < array_f7459e621ec1fc60fd62c436d4281de72cb9f48787dc9c8288a3050292b09004.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_f7459e621ec1fc60fd62c436d4281de72cb9f48787dc9c8288a3050292b09004.length <= v11);\n        } else {\n            MEM[v11] = array_f7459e621ec1fc60fd62c436d4281de72cb9f48787dc9c8288a3050292b09004.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_716ee643adc48c0d54d1cca3fd34acddf96d91766d436fe06943cbddbf3657c8_0_19, v13, v16, _view50, v19, v22;\n}\n\nfunction view66() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 66;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_c20be026ae5ea792bd28b5908d1dfcfd8c2e447d9276607ddf6143e7dddc0fe8.length & (!(array_c20be026ae5ea792bd28b5908d1dfcfd8c2e447d9276607ddf6143e7dddc0fe8.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_c20be026ae5ea792bd28b5908d1dfcfd8c2e447d9276607ddf6143e7dddc0fe8.length) {\n        if (31 < array_c20be026ae5ea792bd28b5908d1dfcfd8c2e447d9276607ddf6143e7dddc0fe8.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_c20be026ae5ea792bd28b5908d1dfcfd8c2e447d9276607ddf6143e7dddc0fe8.length <= v1);\n        } else {\n            MEM[v2] = array_c20be026ae5ea792bd28b5908d1dfcfd8c2e447d9276607ddf6143e7dddc0fe8.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_48febe6eee659df7cb3fcff72a980b3482f1179ef87c242c4f20c6830616885e.length);\n    v5 = v4.data;\n    if (array_48febe6eee659df7cb3fcff72a980b3482f1179ef87c242c4f20c6830616885e.length) {\n        if (31 < array_48febe6eee659df7cb3fcff72a980b3482f1179ef87c242c4f20c6830616885e.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_48febe6eee659df7cb3fcff72a980b3482f1179ef87c242c4f20c6830616885e.length <= v5);\n        } else {\n            MEM[v5] = array_48febe6eee659df7cb3fcff72a980b3482f1179ef87c242c4f20c6830616885e.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_fc869d08d1790d4602743c5b6e4adb33c74c1d0d7c8c47359779d859193dcb05.length);\n    v8 = v7.data;\n    if (array_fc869d08d1790d4602743c5b6e4adb33c74c1d0d7c8c47359779d859193dcb05.length) {\n        if (31 < array_fc869d08d1790d4602743c5b6e4adb33c74c1d0d7c8c47359779d859193dcb05.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_fc869d08d1790d4602743c5b6e4adb33c74c1d0d7c8c47359779d859193dcb05.length <= v8);\n        } else {\n            MEM[v8] = array_fc869d08d1790d4602743c5b6e4adb33c74c1d0d7c8c47359779d859193dcb05.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_e99635fccc8593e18a8f8d41f3819fbbb23d116b5e979cc68c43a98e9c10e52a.length);\n    v11 = v10.data;\n    if (array_e99635fccc8593e18a8f8d41f3819fbbb23d116b5e979cc68c43a98e9c10e52a.length) {\n        if (31 < array_e99635fccc8593e18a8f8d41f3819fbbb23d116b5e979cc68c43a98e9c10e52a.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_e99635fccc8593e18a8f8d41f3819fbbb23d116b5e979cc68c43a98e9c10e52a.length <= v11);\n        } else {\n            MEM[v11] = array_e99635fccc8593e18a8f8d41f3819fbbb23d116b5e979cc68c43a98e9c10e52a.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_85987b95e14cde5be3e42d9efb376de14ffdece0bb4541a56f9ab965e7927edf_0_19, v13, v16, _view66, v19, v22;\n}\n\nfunction setColorBlue() public payable { \n    require(!_colorLeaderboard[msg.sender]);\n    require(msg.value == 0x8e1bc9bf04000);\n    stor_b += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#476ef2';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction withdraw() public nonPayable { \n    require(_owner == msg.sender);\n    v0 = _owner.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction view34() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 34;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_b79c508b45d95db38395ed273cca5afa4bcb8f1225ec7e9c849430db27d6f0fe.length & (!(array_b79c508b45d95db38395ed273cca5afa4bcb8f1225ec7e9c849430db27d6f0fe.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_b79c508b45d95db38395ed273cca5afa4bcb8f1225ec7e9c849430db27d6f0fe.length) {\n        if (31 < array_b79c508b45d95db38395ed273cca5afa4bcb8f1225ec7e9c849430db27d6f0fe.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_b79c508b45d95db38395ed273cca5afa4bcb8f1225ec7e9c849430db27d6f0fe.length <= v1);\n        } else {\n            MEM[v2] = array_b79c508b45d95db38395ed273cca5afa4bcb8f1225ec7e9c849430db27d6f0fe.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_6f153c7bec1b961778a44c5a2c99b1e110e89aa94705c74c316b7331a3d84065.length);\n    v5 = v4.data;\n    if (array_6f153c7bec1b961778a44c5a2c99b1e110e89aa94705c74c316b7331a3d84065.length) {\n        if (31 < array_6f153c7bec1b961778a44c5a2c99b1e110e89aa94705c74c316b7331a3d84065.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_6f153c7bec1b961778a44c5a2c99b1e110e89aa94705c74c316b7331a3d84065.length <= v5);\n        } else {\n            MEM[v5] = array_6f153c7bec1b961778a44c5a2c99b1e110e89aa94705c74c316b7331a3d84065.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_9f4e12e393433b9749089d7660b578840ae05c9423ce1aefceb0c80c340a21c6.length);\n    v8 = v7.data;\n    if (array_9f4e12e393433b9749089d7660b578840ae05c9423ce1aefceb0c80c340a21c6.length) {\n        if (31 < array_9f4e12e393433b9749089d7660b578840ae05c9423ce1aefceb0c80c340a21c6.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_9f4e12e393433b9749089d7660b578840ae05c9423ce1aefceb0c80c340a21c6.length <= v8);\n        } else {\n            MEM[v8] = array_9f4e12e393433b9749089d7660b578840ae05c9423ce1aefceb0c80c340a21c6.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_38ccf7fe89e68e9cb9e9fc31f6d47173231206ebecc0bf076a9068dce043717e.length);\n    v11 = v10.data;\n    if (array_38ccf7fe89e68e9cb9e9fc31f6d47173231206ebecc0bf076a9068dce043717e.length) {\n        if (31 < array_38ccf7fe89e68e9cb9e9fc31f6d47173231206ebecc0bf076a9068dce043717e.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_38ccf7fe89e68e9cb9e9fc31f6d47173231206ebecc0bf076a9068dce043717e.length <= v11);\n        } else {\n            MEM[v11] = array_38ccf7fe89e68e9cb9e9fc31f6d47173231206ebecc0bf076a9068dce043717e.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_43b5581607f3794931937dc64797d2130b6bf8bdfd272fb8ea0df3fe46d9c410_0_19, v13, v16, _view34, v19, v22;\n}\n\nfunction changeColorYellow() public payable { \n    require(_colorLeaderboard[msg.sender] > 0);\n    require(msg.value == 0x470de4df82000);\n    stor_9 += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#ead353';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction view44() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 44;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_47bd603b2672149df187087e649a417345c22ebc601af252344b2472b5a5fea8.length & (!(array_47bd603b2672149df187087e649a417345c22ebc601af252344b2472b5a5fea8.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_47bd603b2672149df187087e649a417345c22ebc601af252344b2472b5a5fea8.length) {\n        if (31 < array_47bd603b2672149df187087e649a417345c22ebc601af252344b2472b5a5fea8.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_47bd603b2672149df187087e649a417345c22ebc601af252344b2472b5a5fea8.length <= v1);\n        } else {\n            MEM[v2] = array_47bd603b2672149df187087e649a417345c22ebc601af252344b2472b5a5fea8.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_7f0d1b48082df3e2dc522530de36c82247a22429eca92f4f18d0e2f55931d689.length);\n    v5 = v4.data;\n    if (array_7f0d1b48082df3e2dc522530de36c82247a22429eca92f4f18d0e2f55931d689.length) {\n        if (31 < array_7f0d1b48082df3e2dc522530de36c82247a22429eca92f4f18d0e2f55931d689.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_7f0d1b48082df3e2dc522530de36c82247a22429eca92f4f18d0e2f55931d689.length <= v5);\n        } else {\n            MEM[v5] = array_7f0d1b48082df3e2dc522530de36c82247a22429eca92f4f18d0e2f55931d689.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_181ec19a0f957384e4ecbe9410e516ad0fe8cc3e53caac5ffc50eb11e64bf488.length);\n    v8 = v7.data;\n    if (array_181ec19a0f957384e4ecbe9410e516ad0fe8cc3e53caac5ffc50eb11e64bf488.length) {\n        if (31 < array_181ec19a0f957384e4ecbe9410e516ad0fe8cc3e53caac5ffc50eb11e64bf488.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_181ec19a0f957384e4ecbe9410e516ad0fe8cc3e53caac5ffc50eb11e64bf488.length <= v8);\n        } else {\n            MEM[v8] = array_181ec19a0f957384e4ecbe9410e516ad0fe8cc3e53caac5ffc50eb11e64bf488.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_e03615811ae25b894de73e643038c13c37f602dc1e17ff1a02e5854893f3bd5e.length);\n    v11 = v10.data;\n    if (array_e03615811ae25b894de73e643038c13c37f602dc1e17ff1a02e5854893f3bd5e.length) {\n        if (31 < array_e03615811ae25b894de73e643038c13c37f602dc1e17ff1a02e5854893f3bd5e.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_e03615811ae25b894de73e643038c13c37f602dc1e17ff1a02e5854893f3bd5e.length <= v11);\n        } else {\n            MEM[v11] = array_e03615811ae25b894de73e643038c13c37f602dc1e17ff1a02e5854893f3bd5e.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_a780ab882f61163081726a9afc75e90df3c1caced105f924cbb367ec432d483c_0_19, v13, v16, _view44, v19, v22;\n}\n\nfunction changeColorWhite() public payable { \n    require(_colorLeaderboard[msg.sender] > 0);\n    require(msg.value == 0x470de4df82000);\n    stor_10 += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#cecece';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction setColorOrange() public payable { \n    require(!_colorLeaderboard[msg.sender]);\n    require(msg.value == 0x8e1bc9bf04000);\n    stor_8 += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#f8ac28';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction sendMessage(string varg0) public nonPayable { \n    v0 = v1 = varg0 + 36;\n    require(_colorLeaderboard[msg.sender] > 0);\n    if (70 == stor_6) {\n        stor_6 = 20;\n    }\n    stor_6 += 1;\n    owner_2[1 + stor_6] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & owner_2[1 + stor_6];\n    v2 = (~0 + (!(_myColorIs[msg.sender] & 0x1) << 8) & _myColorIs[msg.sender]) >> 1;\n    if (31 < v2) {\n        owner_3[stor_6] = 1 + (v2 + v2);\n        if (v2) {\n            while (v3 + (31 + v2 >> 5) > v4) {\n                STORAGE[v5] = STORAGE[v4];\n                v4 += 1;\n                v5 += 1;\n            }\n        }\n    } else {\n        owner_3[stor_6] = _myColorIs[msg.sender];\n    }\n    while (v6 + (31 + (((!(0x1 & owner_3[stor_6]) << 8) - 1 & owner_3[stor_6]) >> 1) >> 5) > v5) {\n        STORAGE[v5] = 0;\n        v5 += 1;\n    }\n    if (31 < (?).length) {\n        map_1[stor_6] = 1 + ((?).length + (?).length);\n        if ((?).length) {\n            while (v1 + (?).length > v0) {\n                STORAGE[v7] = msg.data[v0];\n                v0 += 32;\n                v7 += 1;\n            }\n        }\n    } else {\n        map_1[stor_6] = msg.data[v1] & ~0xff | (?).length + (?).length;\n    }\n    while (v8 + (31 + (((!(0x1 & map_1[stor_6]) << 8) - 1 & map_1[stor_6]) >> 1) >> 5) > v7) {\n        STORAGE[v7] = 0;\n        v7 += 1;\n    }\n}\n\nfunction changeColorTeal() public payable { \n    require(_colorLeaderboard[msg.sender] > 0);\n    require(msg.value == 0x470de4df82000);\n    stor_c += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#86e3db';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction changeColorPurple() public payable { \n    require(_colorLeaderboard[msg.sender] > 0);\n    require(msg.value == 0x470de4df82000);\n    stor_d += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#9b5aea';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction view42() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 42;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_a6d60d4ff1c38ae572157a43d1b8579039e4b4cc96e22c75c07379751785fe51.length & (!(array_a6d60d4ff1c38ae572157a43d1b8579039e4b4cc96e22c75c07379751785fe51.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_a6d60d4ff1c38ae572157a43d1b8579039e4b4cc96e22c75c07379751785fe51.length) {\n        if (31 < array_a6d60d4ff1c38ae572157a43d1b8579039e4b4cc96e22c75c07379751785fe51.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_a6d60d4ff1c38ae572157a43d1b8579039e4b4cc96e22c75c07379751785fe51.length <= v1);\n        } else {\n            MEM[v2] = array_a6d60d4ff1c38ae572157a43d1b8579039e4b4cc96e22c75c07379751785fe51.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_4d08cb3ffa33592f3b5eeb877647984f4070d1d2997d57c9aea4c3e34ddd6e8e.length);\n    v5 = v4.data;\n    if (array_4d08cb3ffa33592f3b5eeb877647984f4070d1d2997d57c9aea4c3e34ddd6e8e.length) {\n        if (31 < array_4d08cb3ffa33592f3b5eeb877647984f4070d1d2997d57c9aea4c3e34ddd6e8e.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_4d08cb3ffa33592f3b5eeb877647984f4070d1d2997d57c9aea4c3e34ddd6e8e.length <= v5);\n        } else {\n            MEM[v5] = array_4d08cb3ffa33592f3b5eeb877647984f4070d1d2997d57c9aea4c3e34ddd6e8e.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_fbefd6df65b5da21e9f0dc3da2df6dc37be71551086f5aba2b0ad548c4758150.length);\n    v8 = v7.data;\n    if (array_fbefd6df65b5da21e9f0dc3da2df6dc37be71551086f5aba2b0ad548c4758150.length) {\n        if (31 < array_fbefd6df65b5da21e9f0dc3da2df6dc37be71551086f5aba2b0ad548c4758150.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_fbefd6df65b5da21e9f0dc3da2df6dc37be71551086f5aba2b0ad548c4758150.length <= v8);\n        } else {\n            MEM[v8] = array_fbefd6df65b5da21e9f0dc3da2df6dc37be71551086f5aba2b0ad548c4758150.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_d9ae7388d2083c2e208c0dfdf9b10bc72bbfb00d63d88b3c7fd7c315bfc1cf40.length);\n    v11 = v10.data;\n    if (array_d9ae7388d2083c2e208c0dfdf9b10bc72bbfb00d63d88b3c7fd7c315bfc1cf40.length) {\n        if (31 < array_d9ae7388d2083c2e208c0dfdf9b10bc72bbfb00d63d88b3c7fd7c315bfc1cf40.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_d9ae7388d2083c2e208c0dfdf9b10bc72bbfb00d63d88b3c7fd7c315bfc1cf40.length <= v11);\n        } else {\n            MEM[v11] = array_d9ae7388d2083c2e208c0dfdf9b10bc72bbfb00d63d88b3c7fd7c315bfc1cf40.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_6db3ef05809c347508073838d040f85e724aad0387cbd203710480231a932b90_0_19, v13, v16, _view42, v19, v22;\n}\n\nfunction view24() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 24;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_f0519a40093d7edad68f12e2ec868fdf92a03df1cbec3e035c987d6b218f2f4.length & (!(array_f0519a40093d7edad68f12e2ec868fdf92a03df1cbec3e035c987d6b218f2f4.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_f0519a40093d7edad68f12e2ec868fdf92a03df1cbec3e035c987d6b218f2f4.length) {\n        if (31 < array_f0519a40093d7edad68f12e2ec868fdf92a03df1cbec3e035c987d6b218f2f4.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_f0519a40093d7edad68f12e2ec868fdf92a03df1cbec3e035c987d6b218f2f4.length <= v1);\n        } else {\n            MEM[v2] = array_f0519a40093d7edad68f12e2ec868fdf92a03df1cbec3e035c987d6b218f2f4.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_bdbfd5fe12b0725f9a86effbf0320821eb71455f8b2a1271fae01b3621e6f172.length);\n    v5 = v4.data;\n    if (array_bdbfd5fe12b0725f9a86effbf0320821eb71455f8b2a1271fae01b3621e6f172.length) {\n        if (31 < array_bdbfd5fe12b0725f9a86effbf0320821eb71455f8b2a1271fae01b3621e6f172.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_bdbfd5fe12b0725f9a86effbf0320821eb71455f8b2a1271fae01b3621e6f172.length <= v5);\n        } else {\n            MEM[v5] = array_bdbfd5fe12b0725f9a86effbf0320821eb71455f8b2a1271fae01b3621e6f172.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_a3ddc4e8d053be09ec661eb04964a206cbd921c2c11fc03088857923bed1485a.length);\n    v8 = v7.data;\n    if (array_a3ddc4e8d053be09ec661eb04964a206cbd921c2c11fc03088857923bed1485a.length) {\n        if (31 < array_a3ddc4e8d053be09ec661eb04964a206cbd921c2c11fc03088857923bed1485a.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_a3ddc4e8d053be09ec661eb04964a206cbd921c2c11fc03088857923bed1485a.length <= v8);\n        } else {\n            MEM[v8] = array_a3ddc4e8d053be09ec661eb04964a206cbd921c2c11fc03088857923bed1485a.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_80f14989282b60fa53cdd4f20dddf40419d0398091709cceef4ea6608cb53a86.length);\n    v11 = v10.data;\n    if (array_80f14989282b60fa53cdd4f20dddf40419d0398091709cceef4ea6608cb53a86.length) {\n        if (31 < array_80f14989282b60fa53cdd4f20dddf40419d0398091709cceef4ea6608cb53a86.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_80f14989282b60fa53cdd4f20dddf40419d0398091709cceef4ea6608cb53a86.length <= v11);\n        } else {\n            MEM[v11] = array_80f14989282b60fa53cdd4f20dddf40419d0398091709cceef4ea6608cb53a86.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_f3118d41e0deec621ee3de85ec11bfcf8aee617b34cd0b5f1496acc8de2cbdcc_0_19, v13, v16, _view24, v19, v22;\n}\n\nfunction changeColorBlue() public payable { \n    require(_colorLeaderboard[msg.sender] > 0);\n    require(msg.value == 0x470de4df82000);\n    stor_b += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#476ef2';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction view60() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 60;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_9c0ea5b0ac1441361bd97a1871d83799b2d794cf29a9954ddc2e33262e005d67.length & (!(array_9c0ea5b0ac1441361bd97a1871d83799b2d794cf29a9954ddc2e33262e005d67.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_9c0ea5b0ac1441361bd97a1871d83799b2d794cf29a9954ddc2e33262e005d67.length) {\n        if (31 < array_9c0ea5b0ac1441361bd97a1871d83799b2d794cf29a9954ddc2e33262e005d67.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_9c0ea5b0ac1441361bd97a1871d83799b2d794cf29a9954ddc2e33262e005d67.length <= v1);\n        } else {\n            MEM[v2] = array_9c0ea5b0ac1441361bd97a1871d83799b2d794cf29a9954ddc2e33262e005d67.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_1cf7587647dd634439ba2d9be5ebcbd7499630058b1ef9fa111be225c5d08e14.length);\n    v5 = v4.data;\n    if (array_1cf7587647dd634439ba2d9be5ebcbd7499630058b1ef9fa111be225c5d08e14.length) {\n        if (31 < array_1cf7587647dd634439ba2d9be5ebcbd7499630058b1ef9fa111be225c5d08e14.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_1cf7587647dd634439ba2d9be5ebcbd7499630058b1ef9fa111be225c5d08e14.length <= v5);\n        } else {\n            MEM[v5] = array_1cf7587647dd634439ba2d9be5ebcbd7499630058b1ef9fa111be225c5d08e14.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_1c8d1bf01472944f62fa726559c57c955f3535856e865cee78082252c0dbe65.length);\n    v8 = v7.data;\n    if (array_1c8d1bf01472944f62fa726559c57c955f3535856e865cee78082252c0dbe65.length) {\n        if (31 < array_1c8d1bf01472944f62fa726559c57c955f3535856e865cee78082252c0dbe65.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_1c8d1bf01472944f62fa726559c57c955f3535856e865cee78082252c0dbe65.length <= v8);\n        } else {\n            MEM[v8] = array_1c8d1bf01472944f62fa726559c57c955f3535856e865cee78082252c0dbe65.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_7af51807487ed801b97f9a13aded219acf180b0f4e84cab1d24d71f9dbe1d25c.length);\n    v11 = v10.data;\n    if (array_7af51807487ed801b97f9a13aded219acf180b0f4e84cab1d24d71f9dbe1d25c.length) {\n        if (31 < array_7af51807487ed801b97f9a13aded219acf180b0f4e84cab1d24d71f9dbe1d25c.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_7af51807487ed801b97f9a13aded219acf180b0f4e84cab1d24d71f9dbe1d25c.length <= v11);\n        } else {\n            MEM[v11] = array_7af51807487ed801b97f9a13aded219acf180b0f4e84cab1d24d71f9dbe1d25c.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_a325aa408b8d79ac3cad595647b5c792e1aaac5507b7d2a601e7daa894133a4f_0_19, v13, v16, _view60, v19, v22;\n}\n\nfunction setColorWhite() public payable { \n    require(!_colorLeaderboard[msg.sender]);\n    require(msg.value == 0x8e1bc9bf04000);\n    stor_10 += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#cecece';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction view56() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 56;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_2bb318060b44525c3d947c00393e6d416e9d457a7e83b67b8daab0973739b0fa.length & (!(array_2bb318060b44525c3d947c00393e6d416e9d457a7e83b67b8daab0973739b0fa.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_2bb318060b44525c3d947c00393e6d416e9d457a7e83b67b8daab0973739b0fa.length) {\n        if (31 < array_2bb318060b44525c3d947c00393e6d416e9d457a7e83b67b8daab0973739b0fa.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_2bb318060b44525c3d947c00393e6d416e9d457a7e83b67b8daab0973739b0fa.length <= v1);\n        } else {\n            MEM[v2] = array_2bb318060b44525c3d947c00393e6d416e9d457a7e83b67b8daab0973739b0fa.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_6c22aa398af7efcdf0396581b727df5ed57ae588f2d82fd799cbf5f8c3ed84d4.length);\n    v5 = v4.data;\n    if (array_6c22aa398af7efcdf0396581b727df5ed57ae588f2d82fd799cbf5f8c3ed84d4.length) {\n        if (31 < array_6c22aa398af7efcdf0396581b727df5ed57ae588f2d82fd799cbf5f8c3ed84d4.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_6c22aa398af7efcdf0396581b727df5ed57ae588f2d82fd799cbf5f8c3ed84d4.length <= v5);\n        } else {\n            MEM[v5] = array_6c22aa398af7efcdf0396581b727df5ed57ae588f2d82fd799cbf5f8c3ed84d4.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_22848320af6c4894685e387cf97d56ba798f5dabcd8f3a2db70374776f0f2f93.length);\n    v8 = v7.data;\n    if (array_22848320af6c4894685e387cf97d56ba798f5dabcd8f3a2db70374776f0f2f93.length) {\n        if (31 < array_22848320af6c4894685e387cf97d56ba798f5dabcd8f3a2db70374776f0f2f93.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_22848320af6c4894685e387cf97d56ba798f5dabcd8f3a2db70374776f0f2f93.length <= v8);\n        } else {\n            MEM[v8] = array_22848320af6c4894685e387cf97d56ba798f5dabcd8f3a2db70374776f0f2f93.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_b607cc36270bbbb376b98f602ec3a5ec6c4fe7cf0d42af35fd17a642242d24fd.length);\n    v11 = v10.data;\n    if (array_b607cc36270bbbb376b98f602ec3a5ec6c4fe7cf0d42af35fd17a642242d24fd.length) {\n        if (31 < array_b607cc36270bbbb376b98f602ec3a5ec6c4fe7cf0d42af35fd17a642242d24fd.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_b607cc36270bbbb376b98f602ec3a5ec6c4fe7cf0d42af35fd17a642242d24fd.length <= v11);\n        } else {\n            MEM[v11] = array_b607cc36270bbbb376b98f602ec3a5ec6c4fe7cf0d42af35fd17a642242d24fd.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_d257fbe569f4c734b4e0a7c00d87a54b79972ad849b7d12d3c1d2a271b94bbac_0_19, v13, v16, _view56, v19, v22;\n}\n\nfunction changeColorRed() public payable { \n    require(_colorLeaderboard[msg.sender] > 0);\n    require(msg.value == 0x470de4df82000);\n    stor_7 += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#ff383b';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction setColorRed() public payable { \n    require(!_colorLeaderboard[msg.sender]);\n    require(msg.value == 0x8e1bc9bf04000);\n    stor_7 += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#ff383b';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction view30() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 30;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_4ba0d371c59a4c8176901cb7799ecdd8b41b974be3a1349b5d0a9ff9aaa230d9.length & (!(array_4ba0d371c59a4c8176901cb7799ecdd8b41b974be3a1349b5d0a9ff9aaa230d9.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_4ba0d371c59a4c8176901cb7799ecdd8b41b974be3a1349b5d0a9ff9aaa230d9.length) {\n        if (31 < array_4ba0d371c59a4c8176901cb7799ecdd8b41b974be3a1349b5d0a9ff9aaa230d9.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_4ba0d371c59a4c8176901cb7799ecdd8b41b974be3a1349b5d0a9ff9aaa230d9.length <= v1);\n        } else {\n            MEM[v2] = array_4ba0d371c59a4c8176901cb7799ecdd8b41b974be3a1349b5d0a9ff9aaa230d9.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_31ff9da46623ded696608610c3749320b1cb2c2dfd644b1139da5367a8e616cf.length);\n    v5 = v4.data;\n    if (array_31ff9da46623ded696608610c3749320b1cb2c2dfd644b1139da5367a8e616cf.length) {\n        if (31 < array_31ff9da46623ded696608610c3749320b1cb2c2dfd644b1139da5367a8e616cf.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_31ff9da46623ded696608610c3749320b1cb2c2dfd644b1139da5367a8e616cf.length <= v5);\n        } else {\n            MEM[v5] = array_31ff9da46623ded696608610c3749320b1cb2c2dfd644b1139da5367a8e616cf.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_6117fee2f1274e1b392d2c3fe842478040a980d896757f38cbfe2ceebfa9f55f.length);\n    v8 = v7.data;\n    if (array_6117fee2f1274e1b392d2c3fe842478040a980d896757f38cbfe2ceebfa9f55f.length) {\n        if (31 < array_6117fee2f1274e1b392d2c3fe842478040a980d896757f38cbfe2ceebfa9f55f.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_6117fee2f1274e1b392d2c3fe842478040a980d896757f38cbfe2ceebfa9f55f.length <= v8);\n        } else {\n            MEM[v8] = array_6117fee2f1274e1b392d2c3fe842478040a980d896757f38cbfe2ceebfa9f55f.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_68fb8e7cad479ccc9244a179d64897454189fd25db04e15d3a5135327a17597b.length);\n    v11 = v10.data;\n    if (array_68fb8e7cad479ccc9244a179d64897454189fd25db04e15d3a5135327a17597b.length) {\n        if (31 < array_68fb8e7cad479ccc9244a179d64897454189fd25db04e15d3a5135327a17597b.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_68fb8e7cad479ccc9244a179d64897454189fd25db04e15d3a5135327a17597b.length <= v11);\n        } else {\n            MEM[v11] = array_68fb8e7cad479ccc9244a179d64897454189fd25db04e15d3a5135327a17597b.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_82fb8bdd0a53542a1f59046c16f7a1350c43d22db36425bb53f551e7c6a09181_0_19, v13, v16, _view30, v19, v22;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction colorLeaderboard() public nonPayable { \n    return _colorLeaderboard[msg.sender], stor_7, stor_8, stor_9, stor_a, stor_b, stor_c, stor_d, stor_e, stor_f, stor_10, stor_6;\n}\n\nfunction setColorBlack() public payable { \n    require(!_colorLeaderboard[msg.sender]);\n    require(msg.value == 0x8e1bc9bf04000);\n    stor_f += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#212121';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction setColorPurple() public payable { \n    require(!_colorLeaderboard[msg.sender]);\n    require(msg.value == 0x8e1bc9bf04000);\n    stor_d += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#9b5aea';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction view52() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 52;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_308b08755ec965f49e4d58d22ebbf80dc425791b553f8567a173e85e1abb76c3.length & (!(array_308b08755ec965f49e4d58d22ebbf80dc425791b553f8567a173e85e1abb76c3.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_308b08755ec965f49e4d58d22ebbf80dc425791b553f8567a173e85e1abb76c3.length) {\n        if (31 < array_308b08755ec965f49e4d58d22ebbf80dc425791b553f8567a173e85e1abb76c3.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_308b08755ec965f49e4d58d22ebbf80dc425791b553f8567a173e85e1abb76c3.length <= v1);\n        } else {\n            MEM[v2] = array_308b08755ec965f49e4d58d22ebbf80dc425791b553f8567a173e85e1abb76c3.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_51c44284d952b00f7c584661b05f3b5ef462e7e5fa5fd8ff860e55075b3c69e1.length);\n    v5 = v4.data;\n    if (array_51c44284d952b00f7c584661b05f3b5ef462e7e5fa5fd8ff860e55075b3c69e1.length) {\n        if (31 < array_51c44284d952b00f7c584661b05f3b5ef462e7e5fa5fd8ff860e55075b3c69e1.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_51c44284d952b00f7c584661b05f3b5ef462e7e5fa5fd8ff860e55075b3c69e1.length <= v5);\n        } else {\n            MEM[v5] = array_51c44284d952b00f7c584661b05f3b5ef462e7e5fa5fd8ff860e55075b3c69e1.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_da4c88cb8422456e6dbc87bdc0d70fdf69c0f9f7d6833899744759615d2d4cc5.length);\n    v8 = v7.data;\n    if (array_da4c88cb8422456e6dbc87bdc0d70fdf69c0f9f7d6833899744759615d2d4cc5.length) {\n        if (31 < array_da4c88cb8422456e6dbc87bdc0d70fdf69c0f9f7d6833899744759615d2d4cc5.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_da4c88cb8422456e6dbc87bdc0d70fdf69c0f9f7d6833899744759615d2d4cc5.length <= v8);\n        } else {\n            MEM[v8] = array_da4c88cb8422456e6dbc87bdc0d70fdf69c0f9f7d6833899744759615d2d4cc5.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_2b05300599b1ce20a949224edaf6681df49e80b65b405ccf2180d9992bb642a9.length);\n    v11 = v10.data;\n    if (array_2b05300599b1ce20a949224edaf6681df49e80b65b405ccf2180d9992bb642a9.length) {\n        if (31 < array_2b05300599b1ce20a949224edaf6681df49e80b65b405ccf2180d9992bb642a9.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_2b05300599b1ce20a949224edaf6681df49e80b65b405ccf2180d9992bb642a9.length <= v11);\n        } else {\n            MEM[v11] = array_2b05300599b1ce20a949224edaf6681df49e80b65b405ccf2180d9992bb642a9.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_b80c4ff21059bea8fc1d75692dc11a282117d4df95e89684ca76663735d95b_0_19, v13, v16, _view52, v19, v22;\n}\n\nfunction setColorPink() public payable { \n    require(!_colorLeaderboard[msg.sender]);\n    require(msg.value == 0x8e1bc9bf04000);\n    stor_e += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#e96de8';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction changeColorPink() public payable { \n    require(_colorLeaderboard[msg.sender] > 0);\n    require(msg.value == 0x470de4df82000);\n    stor_e += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#e96de8';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction view22() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 22;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_94f2575c7592b1dfd5a8846a17482da7b0e38fb10c93880d74916c5f16792464.length & (!(array_94f2575c7592b1dfd5a8846a17482da7b0e38fb10c93880d74916c5f16792464.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_94f2575c7592b1dfd5a8846a17482da7b0e38fb10c93880d74916c5f16792464.length) {\n        if (31 < array_94f2575c7592b1dfd5a8846a17482da7b0e38fb10c93880d74916c5f16792464.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_94f2575c7592b1dfd5a8846a17482da7b0e38fb10c93880d74916c5f16792464.length <= v1);\n        } else {\n            MEM[v2] = array_94f2575c7592b1dfd5a8846a17482da7b0e38fb10c93880d74916c5f16792464.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_4e788733fe0bff9af5f3e3a353367490c603293e53707fe7e4e0071b9ed497d6.length);\n    v5 = v4.data;\n    if (array_4e788733fe0bff9af5f3e3a353367490c603293e53707fe7e4e0071b9ed497d6.length) {\n        if (31 < array_4e788733fe0bff9af5f3e3a353367490c603293e53707fe7e4e0071b9ed497d6.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_4e788733fe0bff9af5f3e3a353367490c603293e53707fe7e4e0071b9ed497d6.length <= v5);\n        } else {\n            MEM[v5] = array_4e788733fe0bff9af5f3e3a353367490c603293e53707fe7e4e0071b9ed497d6.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_370c8c7c6215b209793aa720f65163fbeecd5f5114008532ba0649ee23405402.length);\n    v8 = v7.data;\n    if (array_370c8c7c6215b209793aa720f65163fbeecd5f5114008532ba0649ee23405402.length) {\n        if (31 < array_370c8c7c6215b209793aa720f65163fbeecd5f5114008532ba0649ee23405402.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_370c8c7c6215b209793aa720f65163fbeecd5f5114008532ba0649ee23405402.length <= v8);\n        } else {\n            MEM[v8] = array_370c8c7c6215b209793aa720f65163fbeecd5f5114008532ba0649ee23405402.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_2b00120b81607971383f6f5676c1551d6bb27be3f263689fd3630e1a5be14018.length);\n    v11 = v10.data;\n    if (array_2b00120b81607971383f6f5676c1551d6bb27be3f263689fd3630e1a5be14018.length) {\n        if (31 < array_2b00120b81607971383f6f5676c1551d6bb27be3f263689fd3630e1a5be14018.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_2b00120b81607971383f6f5676c1551d6bb27be3f263689fd3630e1a5be14018.length <= v11);\n        } else {\n            MEM[v11] = array_2b00120b81607971383f6f5676c1551d6bb27be3f263689fd3630e1a5be14018.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_44f9494ddace41673149b1ce2120e2a8dc5880bba93ff68e6b6c883c57a0c695_0_19, v13, v16, _view22, v19, v22;\n}\n\nfunction view38() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 38;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_37e56e4c2b6ed73b31a7a63e641bfee67245b50921806a650aa65bb58a213ba7.length & (!(array_37e56e4c2b6ed73b31a7a63e641bfee67245b50921806a650aa65bb58a213ba7.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_37e56e4c2b6ed73b31a7a63e641bfee67245b50921806a650aa65bb58a213ba7.length) {\n        if (31 < array_37e56e4c2b6ed73b31a7a63e641bfee67245b50921806a650aa65bb58a213ba7.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_37e56e4c2b6ed73b31a7a63e641bfee67245b50921806a650aa65bb58a213ba7.length <= v1);\n        } else {\n            MEM[v2] = array_37e56e4c2b6ed73b31a7a63e641bfee67245b50921806a650aa65bb58a213ba7.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_669beea0e2381f1cf6b3a3f857b6e0ae3b31c4bc1558bc7f3ac7e4091d6aafcc.length);\n    v5 = v4.data;\n    if (array_669beea0e2381f1cf6b3a3f857b6e0ae3b31c4bc1558bc7f3ac7e4091d6aafcc.length) {\n        if (31 < array_669beea0e2381f1cf6b3a3f857b6e0ae3b31c4bc1558bc7f3ac7e4091d6aafcc.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_669beea0e2381f1cf6b3a3f857b6e0ae3b31c4bc1558bc7f3ac7e4091d6aafcc.length <= v5);\n        } else {\n            MEM[v5] = array_669beea0e2381f1cf6b3a3f857b6e0ae3b31c4bc1558bc7f3ac7e4091d6aafcc.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_6e80044b428a86ddb5f7277680f16ac528219bbc3f477f367a023fd1680fef05.length);\n    v8 = v7.data;\n    if (array_6e80044b428a86ddb5f7277680f16ac528219bbc3f477f367a023fd1680fef05.length) {\n        if (31 < array_6e80044b428a86ddb5f7277680f16ac528219bbc3f477f367a023fd1680fef05.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_6e80044b428a86ddb5f7277680f16ac528219bbc3f477f367a023fd1680fef05.length <= v8);\n        } else {\n            MEM[v8] = array_6e80044b428a86ddb5f7277680f16ac528219bbc3f477f367a023fd1680fef05.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_9062a4b4dbb38897d7030e75266746773c25296ddcc4429a1573d7e14899dc4a.length);\n    v11 = v10.data;\n    if (array_9062a4b4dbb38897d7030e75266746773c25296ddcc4429a1573d7e14899dc4a.length) {\n        if (31 < array_9062a4b4dbb38897d7030e75266746773c25296ddcc4429a1573d7e14899dc4a.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_9062a4b4dbb38897d7030e75266746773c25296ddcc4429a1573d7e14899dc4a.length <= v11);\n        } else {\n            MEM[v11] = array_9062a4b4dbb38897d7030e75266746773c25296ddcc4429a1573d7e14899dc4a.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_6185c5e8994dce17071ce177c03c6de8690044327ac7998c1b8b6b55cca70ba8_0_19, v13, v16, _view38, v19, v22;\n}\n\nfunction view40() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 40;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_10f3a17841c6d818ccbb16e4596978865bb77ba586b583c9de26b166e55de864.length & (!(array_10f3a17841c6d818ccbb16e4596978865bb77ba586b583c9de26b166e55de864.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_10f3a17841c6d818ccbb16e4596978865bb77ba586b583c9de26b166e55de864.length) {\n        if (31 < array_10f3a17841c6d818ccbb16e4596978865bb77ba586b583c9de26b166e55de864.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_10f3a17841c6d818ccbb16e4596978865bb77ba586b583c9de26b166e55de864.length <= v1);\n        } else {\n            MEM[v2] = array_10f3a17841c6d818ccbb16e4596978865bb77ba586b583c9de26b166e55de864.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_2ad561dc52a39ba65c35d8ffc50780b2be420e6593582aa43068d94afe08aa0b.length);\n    v5 = v4.data;\n    if (array_2ad561dc52a39ba65c35d8ffc50780b2be420e6593582aa43068d94afe08aa0b.length) {\n        if (31 < array_2ad561dc52a39ba65c35d8ffc50780b2be420e6593582aa43068d94afe08aa0b.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_2ad561dc52a39ba65c35d8ffc50780b2be420e6593582aa43068d94afe08aa0b.length <= v5);\n        } else {\n            MEM[v5] = array_2ad561dc52a39ba65c35d8ffc50780b2be420e6593582aa43068d94afe08aa0b.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_f787d5ff306ee7ea1d7b35b5cacd5a837646921c113945dbc3a3b6329ce40033.length);\n    v8 = v7.data;\n    if (array_f787d5ff306ee7ea1d7b35b5cacd5a837646921c113945dbc3a3b6329ce40033.length) {\n        if (31 < array_f787d5ff306ee7ea1d7b35b5cacd5a837646921c113945dbc3a3b6329ce40033.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_f787d5ff306ee7ea1d7b35b5cacd5a837646921c113945dbc3a3b6329ce40033.length <= v8);\n        } else {\n            MEM[v8] = array_f787d5ff306ee7ea1d7b35b5cacd5a837646921c113945dbc3a3b6329ce40033.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_71b77ca6c28942a6a5831a75c27e59515f05848f3eb905d816d90fe6792b6da7.length);\n    v11 = v10.data;\n    if (array_71b77ca6c28942a6a5831a75c27e59515f05848f3eb905d816d90fe6792b6da7.length) {\n        if (31 < array_71b77ca6c28942a6a5831a75c27e59515f05848f3eb905d816d90fe6792b6da7.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_71b77ca6c28942a6a5831a75c27e59515f05848f3eb905d816d90fe6792b6da7.length <= v11);\n        } else {\n            MEM[v11] = array_71b77ca6c28942a6a5831a75c27e59515f05848f3eb905d816d90fe6792b6da7.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_a82effcee24f9d07d1b8ac005bd5c8627d3d8c14e389a86d3b62ee3d5f63ab89_0_19, v13, v16, _view40, v19, v22;\n}\n\nfunction changeColorOrange() public payable { \n    require(_colorLeaderboard[msg.sender] > 0);\n    require(msg.value == 0x470de4df82000);\n    stor_8 += 1;\n    _colorLeaderboard[msg.sender] += 1;\n    v0 = v1 = v2.data;\n    if (31 < v2.length) {\n        _myColorIs[msg.sender] = 15;\n        if (v2.length) {\n            while (v1 + v2.length > v0) {\n                STORAGE[v3] = MEM[v0];\n                v0 += 32;\n                v3 += 1;\n            }\n        }\n    } else {\n        _myColorIs[msg.sender] = 0xe | ~0xff & '#f8ac28';\n    }\n    while (v4 + (31 + (((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1) >> 5) > v3) {\n        STORAGE[v3] = 0;\n        v3 += 1;\n    }\n}\n\nfunction view58() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 58;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_7328c223b526ac18a2ca34e3cc928d22c174fde8c81d65ae5d17c01763d134b1.length & (!(array_7328c223b526ac18a2ca34e3cc928d22c174fde8c81d65ae5d17c01763d134b1.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_7328c223b526ac18a2ca34e3cc928d22c174fde8c81d65ae5d17c01763d134b1.length) {\n        if (31 < array_7328c223b526ac18a2ca34e3cc928d22c174fde8c81d65ae5d17c01763d134b1.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_7328c223b526ac18a2ca34e3cc928d22c174fde8c81d65ae5d17c01763d134b1.length <= v1);\n        } else {\n            MEM[v2] = array_7328c223b526ac18a2ca34e3cc928d22c174fde8c81d65ae5d17c01763d134b1.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_cad859e690f7d8c761fcdbf5924952161e6445676b1f33de04f8588c21dba694.length);\n    v5 = v4.data;\n    if (array_cad859e690f7d8c761fcdbf5924952161e6445676b1f33de04f8588c21dba694.length) {\n        if (31 < array_cad859e690f7d8c761fcdbf5924952161e6445676b1f33de04f8588c21dba694.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_cad859e690f7d8c761fcdbf5924952161e6445676b1f33de04f8588c21dba694.length <= v5);\n        } else {\n            MEM[v5] = array_cad859e690f7d8c761fcdbf5924952161e6445676b1f33de04f8588c21dba694.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_4e68cda4a6128fdfebaae69af59e96a318b50754e0da27477d282f3d224cc4fd.length);\n    v8 = v7.data;\n    if (array_4e68cda4a6128fdfebaae69af59e96a318b50754e0da27477d282f3d224cc4fd.length) {\n        if (31 < array_4e68cda4a6128fdfebaae69af59e96a318b50754e0da27477d282f3d224cc4fd.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_4e68cda4a6128fdfebaae69af59e96a318b50754e0da27477d282f3d224cc4fd.length <= v8);\n        } else {\n            MEM[v8] = array_4e68cda4a6128fdfebaae69af59e96a318b50754e0da27477d282f3d224cc4fd.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_1bf4ff26d49d102c44233384b81dc2319b0570d368e5dde6461eecaaeae3eb22.length);\n    v11 = v10.data;\n    if (array_1bf4ff26d49d102c44233384b81dc2319b0570d368e5dde6461eecaaeae3eb22.length) {\n        if (31 < array_1bf4ff26d49d102c44233384b81dc2319b0570d368e5dde6461eecaaeae3eb22.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_1bf4ff26d49d102c44233384b81dc2319b0570d368e5dde6461eecaaeae3eb22.length <= v11);\n        } else {\n            MEM[v11] = array_1bf4ff26d49d102c44233384b81dc2319b0570d368e5dde6461eecaaeae3eb22.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_18429c28d334b14b42b6ef9de5acb651e5d5290947050226e0461d6dea0d9428_0_19, v13, v16, _view58, v19, v22;\n}\n\nfunction view68() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 68;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_682542400590cecd25f82cad25103b4dc125cd3511d319539197c8bb9765a74f.length & (!(array_682542400590cecd25f82cad25103b4dc125cd3511d319539197c8bb9765a74f.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_682542400590cecd25f82cad25103b4dc125cd3511d319539197c8bb9765a74f.length) {\n        if (31 < array_682542400590cecd25f82cad25103b4dc125cd3511d319539197c8bb9765a74f.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_682542400590cecd25f82cad25103b4dc125cd3511d319539197c8bb9765a74f.length <= v1);\n        } else {\n            MEM[v2] = array_682542400590cecd25f82cad25103b4dc125cd3511d319539197c8bb9765a74f.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_f0a880c29f3aa22e9078c1072a445ad492aa9148a64bef22960367f9f163347e.length);\n    v5 = v4.data;\n    if (array_f0a880c29f3aa22e9078c1072a445ad492aa9148a64bef22960367f9f163347e.length) {\n        if (31 < array_f0a880c29f3aa22e9078c1072a445ad492aa9148a64bef22960367f9f163347e.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_f0a880c29f3aa22e9078c1072a445ad492aa9148a64bef22960367f9f163347e.length <= v5);\n        } else {\n            MEM[v5] = array_f0a880c29f3aa22e9078c1072a445ad492aa9148a64bef22960367f9f163347e.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_d5310f85f4460a57771b0ba7c922e1273458411836157e863377c3ceba09ccc5.length);\n    v8 = v7.data;\n    if (array_d5310f85f4460a57771b0ba7c922e1273458411836157e863377c3ceba09ccc5.length) {\n        if (31 < array_d5310f85f4460a57771b0ba7c922e1273458411836157e863377c3ceba09ccc5.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_d5310f85f4460a57771b0ba7c922e1273458411836157e863377c3ceba09ccc5.length <= v8);\n        } else {\n            MEM[v8] = array_d5310f85f4460a57771b0ba7c922e1273458411836157e863377c3ceba09ccc5.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_312b1850f800d121ee2b1ec7d23abfdc8f66c2114f2531fbb671ea6446558182.length);\n    v11 = v10.data;\n    if (array_312b1850f800d121ee2b1ec7d23abfdc8f66c2114f2531fbb671ea6446558182.length) {\n        if (31 < array_312b1850f800d121ee2b1ec7d23abfdc8f66c2114f2531fbb671ea6446558182.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_312b1850f800d121ee2b1ec7d23abfdc8f66c2114f2531fbb671ea6446558182.length <= v11);\n        } else {\n            MEM[v11] = array_312b1850f800d121ee2b1ec7d23abfdc8f66c2114f2531fbb671ea6446558182.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_c6e96e6d3fc054a65579470aba35596b4e2269e2a014917ba21223d9a88d9b45_0_19, v13, v16, _view68, v19, v22;\n}\n\nfunction view62() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 62;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_a171e6dff2e291b2403638b36fa1900bfb6d28056b9cc28339adf04ff3e24b88.length & (!(array_a171e6dff2e291b2403638b36fa1900bfb6d28056b9cc28339adf04ff3e24b88.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_a171e6dff2e291b2403638b36fa1900bfb6d28056b9cc28339adf04ff3e24b88.length) {\n        if (31 < array_a171e6dff2e291b2403638b36fa1900bfb6d28056b9cc28339adf04ff3e24b88.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_a171e6dff2e291b2403638b36fa1900bfb6d28056b9cc28339adf04ff3e24b88.length <= v1);\n        } else {\n            MEM[v2] = array_a171e6dff2e291b2403638b36fa1900bfb6d28056b9cc28339adf04ff3e24b88.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_1161d849492e842dca32edceeb2630bc6d621f9dea3fdc78ca65f82bb844f4b1.length);\n    v5 = v4.data;\n    if (array_1161d849492e842dca32edceeb2630bc6d621f9dea3fdc78ca65f82bb844f4b1.length) {\n        if (31 < array_1161d849492e842dca32edceeb2630bc6d621f9dea3fdc78ca65f82bb844f4b1.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_1161d849492e842dca32edceeb2630bc6d621f9dea3fdc78ca65f82bb844f4b1.length <= v5);\n        } else {\n            MEM[v5] = array_1161d849492e842dca32edceeb2630bc6d621f9dea3fdc78ca65f82bb844f4b1.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_7bfa808024a5334b0a1e191d8e95f6724ea40d1a03d1286b6934e670f8c6924b.length);\n    v8 = v7.data;\n    if (array_7bfa808024a5334b0a1e191d8e95f6724ea40d1a03d1286b6934e670f8c6924b.length) {\n        if (31 < array_7bfa808024a5334b0a1e191d8e95f6724ea40d1a03d1286b6934e670f8c6924b.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_7bfa808024a5334b0a1e191d8e95f6724ea40d1a03d1286b6934e670f8c6924b.length <= v8);\n        } else {\n            MEM[v8] = array_7bfa808024a5334b0a1e191d8e95f6724ea40d1a03d1286b6934e670f8c6924b.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_35b47ec3f55b71d6589203440915d2ef7280ff31d26085f81a04730b0655d961.length);\n    v11 = v10.data;\n    if (array_35b47ec3f55b71d6589203440915d2ef7280ff31d26085f81a04730b0655d961.length) {\n        if (31 < array_35b47ec3f55b71d6589203440915d2ef7280ff31d26085f81a04730b0655d961.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_35b47ec3f55b71d6589203440915d2ef7280ff31d26085f81a04730b0655d961.length <= v11);\n        } else {\n            MEM[v11] = array_35b47ec3f55b71d6589203440915d2ef7280ff31d26085f81a04730b0655d961.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_39366d2e14b42d797be5fb2272e93ead41cec826548512dfa09eaadf5ba4c2a4_0_19, v13, v16, _view62, v19, v22;\n}\n\nfunction view26() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 26;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_ad96411afed98a37aa585ce71717b0782fa4bee47da09d8f483e532128238611.length & (!(array_ad96411afed98a37aa585ce71717b0782fa4bee47da09d8f483e532128238611.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_ad96411afed98a37aa585ce71717b0782fa4bee47da09d8f483e532128238611.length) {\n        if (31 < array_ad96411afed98a37aa585ce71717b0782fa4bee47da09d8f483e532128238611.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_ad96411afed98a37aa585ce71717b0782fa4bee47da09d8f483e532128238611.length <= v1);\n        } else {\n            MEM[v2] = array_ad96411afed98a37aa585ce71717b0782fa4bee47da09d8f483e532128238611.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_2480fe25ee21f0b2bc289ccff6df415947190b288094ab9f0cbd50f7b814fd5e.length);\n    v5 = v4.data;\n    if (array_2480fe25ee21f0b2bc289ccff6df415947190b288094ab9f0cbd50f7b814fd5e.length) {\n        if (31 < array_2480fe25ee21f0b2bc289ccff6df415947190b288094ab9f0cbd50f7b814fd5e.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_2480fe25ee21f0b2bc289ccff6df415947190b288094ab9f0cbd50f7b814fd5e.length <= v5);\n        } else {\n            MEM[v5] = array_2480fe25ee21f0b2bc289ccff6df415947190b288094ab9f0cbd50f7b814fd5e.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_68fc0e82119a780903c8e97d959a36d433d1e401ad7b7a461ff2087e524d54a8.length);\n    v8 = v7.data;\n    if (array_68fc0e82119a780903c8e97d959a36d433d1e401ad7b7a461ff2087e524d54a8.length) {\n        if (31 < array_68fc0e82119a780903c8e97d959a36d433d1e401ad7b7a461ff2087e524d54a8.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_68fc0e82119a780903c8e97d959a36d433d1e401ad7b7a461ff2087e524d54a8.length <= v8);\n        } else {\n            MEM[v8] = array_68fc0e82119a780903c8e97d959a36d433d1e401ad7b7a461ff2087e524d54a8.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_ddd2ed02835f51d041d738f145bf914e284838547c9bcc952ea4f9de82c9f093.length);\n    v11 = v10.data;\n    if (array_ddd2ed02835f51d041d738f145bf914e284838547c9bcc952ea4f9de82c9f093.length) {\n        if (31 < array_ddd2ed02835f51d041d738f145bf914e284838547c9bcc952ea4f9de82c9f093.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_ddd2ed02835f51d041d738f145bf914e284838547c9bcc952ea4f9de82c9f093.length <= v11);\n        } else {\n            MEM[v11] = array_ddd2ed02835f51d041d738f145bf914e284838547c9bcc952ea4f9de82c9f093.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_38378c408f71c9e5f35d8db763a45d2b35da16f98182f9f4d54306cbd58c0a09_0_19, v13, v16, _view26, v19, v22;\n}\n\nfunction view32() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 32;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_bb7ea1d025e27e153f156855239b4b128e9da3a64a6f0a0270f8920989588142.length & (!(array_bb7ea1d025e27e153f156855239b4b128e9da3a64a6f0a0270f8920989588142.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_bb7ea1d025e27e153f156855239b4b128e9da3a64a6f0a0270f8920989588142.length) {\n        if (31 < array_bb7ea1d025e27e153f156855239b4b128e9da3a64a6f0a0270f8920989588142.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_bb7ea1d025e27e153f156855239b4b128e9da3a64a6f0a0270f8920989588142.length <= v1);\n        } else {\n            MEM[v2] = array_bb7ea1d025e27e153f156855239b4b128e9da3a64a6f0a0270f8920989588142.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_af2afaf35ad6da1368c28c91ba52a84b6fc26e5aa0d9b26dc4fa0373e4d12c30.length);\n    v5 = v4.data;\n    if (array_af2afaf35ad6da1368c28c91ba52a84b6fc26e5aa0d9b26dc4fa0373e4d12c30.length) {\n        if (31 < array_af2afaf35ad6da1368c28c91ba52a84b6fc26e5aa0d9b26dc4fa0373e4d12c30.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_af2afaf35ad6da1368c28c91ba52a84b6fc26e5aa0d9b26dc4fa0373e4d12c30.length <= v5);\n        } else {\n            MEM[v5] = array_af2afaf35ad6da1368c28c91ba52a84b6fc26e5aa0d9b26dc4fa0373e4d12c30.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_e0033292d8349127dd6b6fa9c34f6f3d290151b2785dbcbf18fa2c3985d1f743.length);\n    v8 = v7.data;\n    if (array_e0033292d8349127dd6b6fa9c34f6f3d290151b2785dbcbf18fa2c3985d1f743.length) {\n        if (31 < array_e0033292d8349127dd6b6fa9c34f6f3d290151b2785dbcbf18fa2c3985d1f743.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_e0033292d8349127dd6b6fa9c34f6f3d290151b2785dbcbf18fa2c3985d1f743.length <= v8);\n        } else {\n            MEM[v8] = array_e0033292d8349127dd6b6fa9c34f6f3d290151b2785dbcbf18fa2c3985d1f743.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_6280e9caec09c2f0007c3f9e61e9e1a060188c72cdbb510e12183e12d0752cef.length);\n    v11 = v10.data;\n    if (array_6280e9caec09c2f0007c3f9e61e9e1a060188c72cdbb510e12183e12d0752cef.length) {\n        if (31 < array_6280e9caec09c2f0007c3f9e61e9e1a060188c72cdbb510e12183e12d0752cef.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_6280e9caec09c2f0007c3f9e61e9e1a060188c72cdbb510e12183e12d0752cef.length <= v11);\n        } else {\n            MEM[v11] = array_6280e9caec09c2f0007c3f9e61e9e1a060188c72cdbb510e12183e12d0752cef.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_5859c04fd0363b95e824b76bab6d064bf500fe171eea5114a198e11ac4dfbbf0_0_19, v13, v16, _view32, v19, v22;\n}\n\nfunction view54() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 54;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_6a4c132bb6958029ac3595112f46988f11d4ebbbea74e0a2100963f772df62e2.length & (!(array_6a4c132bb6958029ac3595112f46988f11d4ebbbea74e0a2100963f772df62e2.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_6a4c132bb6958029ac3595112f46988f11d4ebbbea74e0a2100963f772df62e2.length) {\n        if (31 < array_6a4c132bb6958029ac3595112f46988f11d4ebbbea74e0a2100963f772df62e2.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_6a4c132bb6958029ac3595112f46988f11d4ebbbea74e0a2100963f772df62e2.length <= v1);\n        } else {\n            MEM[v2] = array_6a4c132bb6958029ac3595112f46988f11d4ebbbea74e0a2100963f772df62e2.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_5b162060ded226415457bbc62b41be6cb742618d4be93db7911c49a0c7e4fab1.length);\n    v5 = v4.data;\n    if (array_5b162060ded226415457bbc62b41be6cb742618d4be93db7911c49a0c7e4fab1.length) {\n        if (31 < array_5b162060ded226415457bbc62b41be6cb742618d4be93db7911c49a0c7e4fab1.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_5b162060ded226415457bbc62b41be6cb742618d4be93db7911c49a0c7e4fab1.length <= v5);\n        } else {\n            MEM[v5] = array_5b162060ded226415457bbc62b41be6cb742618d4be93db7911c49a0c7e4fab1.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_1c5556a54fe414bb73b8e027c2ff4bb044a11e7ca4f73a8463fd263d06b76aa6.length);\n    v8 = v7.data;\n    if (array_1c5556a54fe414bb73b8e027c2ff4bb044a11e7ca4f73a8463fd263d06b76aa6.length) {\n        if (31 < array_1c5556a54fe414bb73b8e027c2ff4bb044a11e7ca4f73a8463fd263d06b76aa6.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_1c5556a54fe414bb73b8e027c2ff4bb044a11e7ca4f73a8463fd263d06b76aa6.length <= v8);\n        } else {\n            MEM[v8] = array_1c5556a54fe414bb73b8e027c2ff4bb044a11e7ca4f73a8463fd263d06b76aa6.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_39b891754677077a5297bdcd461d43105bb93e213858a126f6d7310acd650aa4.length);\n    v11 = v10.data;\n    if (array_39b891754677077a5297bdcd461d43105bb93e213858a126f6d7310acd650aa4.length) {\n        if (31 < array_39b891754677077a5297bdcd461d43105bb93e213858a126f6d7310acd650aa4.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_39b891754677077a5297bdcd461d43105bb93e213858a126f6d7310acd650aa4.length <= v11);\n        } else {\n            MEM[v11] = array_39b891754677077a5297bdcd461d43105bb93e213858a126f6d7310acd650aa4.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_e720f07b0e62fc810dbb64d4f17af5986a497161476b9904f42e9066ecd3e989_0_19, v13, v16, _view54, v19, v22;\n}\n\nfunction view48() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 48;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_8a3a0b6f6fa9438554c4aa5bdaf7838f6c90507836aabb33d6ebaeb414e248f9.length & (!(array_8a3a0b6f6fa9438554c4aa5bdaf7838f6c90507836aabb33d6ebaeb414e248f9.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_8a3a0b6f6fa9438554c4aa5bdaf7838f6c90507836aabb33d6ebaeb414e248f9.length) {\n        if (31 < array_8a3a0b6f6fa9438554c4aa5bdaf7838f6c90507836aabb33d6ebaeb414e248f9.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_8a3a0b6f6fa9438554c4aa5bdaf7838f6c90507836aabb33d6ebaeb414e248f9.length <= v1);\n        } else {\n            MEM[v2] = array_8a3a0b6f6fa9438554c4aa5bdaf7838f6c90507836aabb33d6ebaeb414e248f9.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_5a24c9b3971c014c51c7c161d38b480cbcde22ab593a7a6bb0c9e5a9763a6f16.length);\n    v5 = v4.data;\n    if (array_5a24c9b3971c014c51c7c161d38b480cbcde22ab593a7a6bb0c9e5a9763a6f16.length) {\n        if (31 < array_5a24c9b3971c014c51c7c161d38b480cbcde22ab593a7a6bb0c9e5a9763a6f16.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_5a24c9b3971c014c51c7c161d38b480cbcde22ab593a7a6bb0c9e5a9763a6f16.length <= v5);\n        } else {\n            MEM[v5] = array_5a24c9b3971c014c51c7c161d38b480cbcde22ab593a7a6bb0c9e5a9763a6f16.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_5f3ffac152518418b730c1b4427b48de47a050e582434504c9ffd15088f0d196.length);\n    v8 = v7.data;\n    if (array_5f3ffac152518418b730c1b4427b48de47a050e582434504c9ffd15088f0d196.length) {\n        if (31 < array_5f3ffac152518418b730c1b4427b48de47a050e582434504c9ffd15088f0d196.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_5f3ffac152518418b730c1b4427b48de47a050e582434504c9ffd15088f0d196.length <= v8);\n        } else {\n            MEM[v8] = array_5f3ffac152518418b730c1b4427b48de47a050e582434504c9ffd15088f0d196.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_4a7072cae31c8066404bff29911e471dd7b488d543a218806da51870552a74bb.length);\n    v11 = v10.data;\n    if (array_4a7072cae31c8066404bff29911e471dd7b488d543a218806da51870552a74bb.length) {\n        if (31 < array_4a7072cae31c8066404bff29911e471dd7b488d543a218806da51870552a74bb.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_4a7072cae31c8066404bff29911e471dd7b488d543a218806da51870552a74bb.length <= v11);\n        } else {\n            MEM[v11] = array_4a7072cae31c8066404bff29911e471dd7b488d543a218806da51870552a74bb.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_1bccf7cdda3c8614e4cd7494b1ac91ffd64f111d8f3e8157c677e5d8ec07514a_0_19, v13, v16, _view48, v19, v22;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction view46() public nonPayable { \n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[64] = MEM[64] + 32;\n    MEM[MEM[64]] = 0;\n    MEM[MEM[64]] = 0;\n    MEM[0] = 46;\n    MEM[32] = 1;\n    v0 = new bytes[]((array_a4b6f6c87384a4c75064343ffd6646b01b98a7d0701dec60343872fe39d78894.length & (!(array_a4b6f6c87384a4c75064343ffd6646b01b98a7d0701dec60343872fe39d78894.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if (array_a4b6f6c87384a4c75064343ffd6646b01b98a7d0701dec60343872fe39d78894.length) {\n        if (31 < array_a4b6f6c87384a4c75064343ffd6646b01b98a7d0701dec60343872fe39d78894.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + array_a4b6f6c87384a4c75064343ffd6646b01b98a7d0701dec60343872fe39d78894.length <= v1);\n        } else {\n            MEM[v2] = array_a4b6f6c87384a4c75064343ffd6646b01b98a7d0701dec60343872fe39d78894.length >> 8 << 8;\n        }\n    }\n    v4 = new bytes[](array_7d8f31d22c75db1e8e364ca358d5a3691a36535d438f852fd3533a53c8f16acf.length);\n    v5 = v4.data;\n    if (array_7d8f31d22c75db1e8e364ca358d5a3691a36535d438f852fd3533a53c8f16acf.length) {\n        if (31 < array_7d8f31d22c75db1e8e364ca358d5a3691a36535d438f852fd3533a53c8f16acf.length) {\n            do {\n                MEM[v5] = STORAGE[v6];\n                v6 += 1;\n                v5 += 32;\n            } while (v5 + array_7d8f31d22c75db1e8e364ca358d5a3691a36535d438f852fd3533a53c8f16acf.length <= v5);\n        } else {\n            MEM[v5] = array_7d8f31d22c75db1e8e364ca358d5a3691a36535d438f852fd3533a53c8f16acf.length >> 8 << 8;\n        }\n    }\n    v7 = new bytes[](array_a7d0f7195d52522be008ca0e9c182cb8d5cdec7c4327b16f8f80417732546566.length);\n    v8 = v7.data;\n    if (array_a7d0f7195d52522be008ca0e9c182cb8d5cdec7c4327b16f8f80417732546566.length) {\n        if (31 < array_a7d0f7195d52522be008ca0e9c182cb8d5cdec7c4327b16f8f80417732546566.length) {\n            do {\n                MEM[v8] = STORAGE[v9];\n                v9 += 1;\n                v8 += 32;\n            } while (v8 + array_a7d0f7195d52522be008ca0e9c182cb8d5cdec7c4327b16f8f80417732546566.length <= v8);\n        } else {\n            MEM[v8] = array_a7d0f7195d52522be008ca0e9c182cb8d5cdec7c4327b16f8f80417732546566.length >> 8 << 8;\n        }\n    }\n    v10 = new bytes[](array_950e937492ee34259869433cf638f9ddc3db789216033729827dca31e9130b28.length);\n    v11 = v10.data;\n    if (array_950e937492ee34259869433cf638f9ddc3db789216033729827dca31e9130b28.length) {\n        if (31 < array_950e937492ee34259869433cf638f9ddc3db789216033729827dca31e9130b28.length) {\n            do {\n                MEM[v11] = STORAGE[v12];\n                v12 += 1;\n                v11 += 32;\n            } while (v11 + array_950e937492ee34259869433cf638f9ddc3db789216033729827dca31e9130b28.length <= v11);\n        } else {\n            MEM[v11] = array_950e937492ee34259869433cf638f9ddc3db789216033729827dca31e9130b28.length >> 8 << 8;\n        }\n    }\n    v13 = new array[](v0.length);\n    v14 = v15 = 0;\n    while (v14 < v0.length) {\n        MEM[v14 + v13.data] = MEM[v0.data + v14];\n        v14 += 32;\n    }\n    if (0x1f & v0.length) {\n        MEM[v0.length + v13.data - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v0.length + v13.data - (0x1f & v0.length)];\n    }\n    v16 = new array[](v4.length);\n    v17 = v18 = 0;\n    while (v17 < v4.length) {\n        MEM[v17 + v16.data] = MEM[v4.data + v17];\n        v17 += 32;\n    }\n    if (0x1f & v4.length) {\n        MEM[v4.length + v16.data - (0x1f & v4.length)] = ~(256 ** (32 - (0x1f & v4.length)) - 1) & MEM[v4.length + v16.data - (0x1f & v4.length)];\n    }\n    v19 = new array[](v7.length);\n    v20 = v21 = 0;\n    while (v20 < v7.length) {\n        MEM[v20 + v19.data] = MEM[v7.data + v20];\n        v20 += 32;\n    }\n    if (0x1f & v7.length) {\n        MEM[v7.length + v19.data - (0x1f & v7.length)] = ~(256 ** (32 - (0x1f & v7.length)) - 1) & MEM[v7.length + v19.data - (0x1f & v7.length)];\n    }\n    v22 = new array[](v10.length);\n    v23 = v24 = 0;\n    while (v23 < v10.length) {\n        MEM[v23 + v22.data] = MEM[v10.data + v23];\n        v23 += 32;\n    }\n    v25 = v26 = v10.length + v22.data;\n    if (0x1f & v10.length) {\n        MEM[v26 - (0x1f & v10.length)] = ~(256 ** (32 - (0x1f & v10.length)) - 1) & MEM[v26 - (0x1f & v10.length)];\n    }\n    return stor_929186da681e8492d5c67674d8a4dc7a9df883794b8e9896af8955a73f171239_0_19, v13, v16, _view46, v19, v22;\n}\n\nfunction myColorIs() public nonPayable { \n    MEM[MEM[64]] = 0;\n    v0 = ((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1;\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = ((!(0x1 & _myColorIs[msg.sender]) << 8) - 1 & _myColorIs[msg.sender]) >> 1;\n    if (v4) {\n        if (31 < v4) {\n            do {\n                MEM[v2] = STORAGE[v5];\n                v5 += 1;\n                v2 += 32;\n            } while (v3 + v4 <= v2);\n        } else {\n            MEM[v3] = _myColorIs[msg.sender] >> 8 << 8;\n        }\n    }\n    v6 = new array[](v1.length);\n    v7 = v8 = 0;\n    while (v7 < v1.length) {\n        MEM[v7 + v6.data] = MEM[v1.data + v7];\n        v7 += 32;\n    }\n    v9 = v10 = v1.length + v6.data;\n    if (0x1f & v1.length) {\n        MEM[v10 - (0x1f & v1.length)] = ~(256 ** (32 - (0x1f & v1.length)) - 1) & MEM[v10 - (0x1f & v1.length)];\n    }\n    return v6;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0xb99f8c) {\n            view28();\n        } else if (0x27bd9a8 == function_selector) {\n            changeColorGreen();\n        } else if (0x7dda675 == function_selector) {\n            view70();\n        } else if (0xce38276 == function_selector) {\n            setColorYellow();\n        } else if (0x11886bd4 == function_selector) {\n            view36();\n        } else if (0x168b4a53 == function_selector) {\n            changeColorBlack();\n        } else if (0x194f97ba == function_selector) {\n            setColorGreen();\n        } else if (0x1a699085 == function_selector) {\n            view64();\n        } else if (0x2886d76f == function_selector) {\n            setColorTeal();\n        } else if (0x2dd28736 == function_selector) {\n            view50();\n        } else if (0x34ae6984 == function_selector) {\n            view66();\n        } else if (0x3cbeb49a == function_selector) {\n            setColorBlue();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x409c962e == function_selector) {\n            view34();\n        } else if (0x43bd6e6f == function_selector) {\n            changeColorYellow();\n        } else if (0x45c8e118 == function_selector) {\n            view44();\n        } else if (0x45cdb714 == function_selector) {\n            changeColorWhite();\n        } else if (0x45f9072b == function_selector) {\n            setColorOrange();\n        } else if (0x469c8110 == function_selector) {\n            sendMessage(string);\n        } else if (0x4bef71ac == function_selector) {\n            changeColorTeal();\n        } else if (0x4c922a9f == function_selector) {\n            changeColorPurple();\n        } else if (0x55be1168 == function_selector) {\n            view42();\n        } else if (0x565e2220 == function_selector) {\n            view24();\n        } else if (0x58990372 == function_selector) {\n            changeColorBlue();\n        } else if (0x63c43415 == function_selector) {\n            view60();\n        } else if (0x6b3ad4f8 == function_selector) {\n            setColorWhite();\n        } else if (0x775ee3ef == function_selector) {\n            view56();\n        } else if (0x7d69f335 == function_selector) {\n            changeColorRed();\n        } else if (0x84da7e38 == function_selector) {\n            setColorRed();\n        } else if (0x8c41399c == function_selector) {\n            view30();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x913fb60b == function_selector) {\n            colorLeaderboard();\n        } else if (0x915015c5 == function_selector) {\n            setColorBlack();\n        } else if (0x95d84d99 == function_selector) {\n            setColorPurple();\n        } else if (0x9739203b == function_selector) {\n            view52();\n        } else if (0x9db834fe == function_selector) {\n            setColorPink();\n        } else if (0xaefe696b == function_selector) {\n            changeColorPink();\n        } else if (0xb08ba6a1 == function_selector) {\n            view22();\n        } else if (0xb5128f66 == function_selector) {\n            view38();\n        } else if (0xb6b3d325 == function_selector) {\n            view40();\n        } else if (0xb8ec59e4 == function_selector) {\n            changeColorOrange();\n        } else if (0xc3ceb939 == function_selector) {\n            view58();\n        } else if (0xce383ec7 == function_selector) {\n            view68();\n        } else if (0xcf6bd8b9 == function_selector) {\n            view62();\n        } else if (0xd933dac7 == function_selector) {\n            view26();\n        } else if (0xdc5418b1 == function_selector) {\n            view32();\n        } else if (0xde1446e8 == function_selector) {\n            view54();\n        } else if (0xee7f9c47 == function_selector) {\n            view48();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf5419108 == function_selector) {\n            view46();\n        } else if (0xf5a23af0 == function_selector) {\n            myColorIs();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 67123 tokens. Please reduce the length of the messages."
}