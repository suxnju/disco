{
	"address": "0x7824134a725e63a5f0bb2bb47b57239adafc147b",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Ethereum Solidity smart contract based on the provided decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    uint256 private _mostSent;\n    uint256 private stor_3;\n    mapping (uint256 => uint256) private map_6;\n    address private _richest;\n    address private _owner;\n    IERC20 private _paytoken;\n    address private __reserve20;\n\n    event PackageJoinedViaPAD(address indexed sender, uint256 value);\n    event PackageJoinedViaETH(address indexed sender, uint256 value);\n\n    function richest() public view returns (address) {\n        return _richest;\n    }\n\n    function swapUToD(address from, address to, uint256 amount) public {\n        require(msg.sender == _owner);\n        require(_paytoken.balanceOf(from) >= amount);\n        _paytoken.transferFrom(from, to, amount);\n    }\n\n    function Paytoken() public view returns (address) {\n        return address(_paytoken);\n    }\n\n    function _reserve20() public view returns (address) {\n        return __reserve20;\n    }\n\n    function wdE(uint256 amount) public {\n        require(msg.sender == _owner);\n        require(address(this).balance >= amount);\n        msg.sender.transfer(amount);\n    }\n\n    function getBalanceContract() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function mostSent() public view returns (uint256) {\n        return _mostSent;\n    }\n\n    function becomeRichest() public payable {\n        require(msg.value > _mostSent);\n        map_6[_richest] += msg.value;\n        _richest = msg.sender;\n        _mostSent = msg.value;\n    }\n\n    function getTokenBalanceOf(address owner) public view returns (uint256) {\n        return _paytoken.balanceOf(owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function joinPackageViaPAD(uint256 value) public {\n        require(value >= 0);\n        require(address(_paytoken) != address(0));\n        _paytoken.transfer(__reserve20, value * 20 / 100);\n        emit PackageJoinedViaPAD(msg.sender, value);\n    }\n\n    function setPrices(uint256 value) public {\n        require(msg.sender == _owner);\n        stor_3 = value;\n    }\n\n    function setPayanyToken(address token) public {\n        require(msg.sender == _owner);\n        _paytoken = IERC20(token);\n    }\n\n    function joinPackageViaETH(uint256 value) public payable {\n        require(value >= 0);\n        __reserve20.transfer(msg.value * 20 / 100);\n        emit PackageJoinedViaETH(msg.sender, msg.value);\n    }\n\n    function() external payable {\n        require(address(_paytoken) != address(0));\n        _paytoken.transfer(__reserve20, msg.value);\n    }\n}\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n```\n\nPlease note that, in Solidity, there is no direct equivalent for EVM's RETURNDATASIZE and gas management operations, so they have been omitted. Also, the function selector is not present in Solidity, so it is removed from the contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701458928,
	"id": "chatcmpl-8R3TsRjMj9soGOnrwlqrDujL52aea",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 07:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _mostSent; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nmapping (uint256 => [uint256]) map_6; // STORAGE[0x6]\naddress _richest; // STORAGE[0x0] bytes 0 to 19\naddress _owner; // STORAGE[0x1] bytes 0 to 19\naddress _paytoken; // STORAGE[0x4] bytes 0 to 19\naddress __reserve20; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nPackageJoinedViaPAD(address, uint256);\nPackageJoinedViaETH(address, uint256);\n\nfunction richest() public nonPayable { \n    return _richest;\n}\n\nfunction swapUToD(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.sender == _owner);\n    require(_paytoken.code.size);\n    v0, v1 = _paytoken.balanceOf(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(varg2 <= v1);\n    require(_paytoken.code.size);\n    v2, v3 = _paytoken.transfer(varg1, varg2).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return 1;\n}\n\nfunction Paytoken() public nonPayable { \n    return _paytoken;\n}\n\nfunction _reserve20() public nonPayable { \n    return __reserve20;\n}\n\nfunction wdE(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 <= (address(this)).balance);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction getBalanceContract() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction mostSent() public nonPayable { \n    return _mostSent;\n}\n\nfunction becomeRichest() public payable { \n    require(msg.value > _mostSent);\n    map_6[_richest] = map_6[_richest] + msg.value;\n    _richest = msg.sender;\n    _mostSent = msg.value;\n    return 1;\n}\n\nfunction getTokenBalanceOf(address varg0) public nonPayable { \n    require(_paytoken.code.size);\n    v0, v1 = _paytoken.balanceOf(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction joinPackageViaPAD(uint256 varg0) public nonPayable { \n    require(varg0 >= 0);\n    require(_paytoken.code.size);\n    v0, v1 = _paytoken.transfer(__reserve20, msg.value * 20 / 100).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    emit PackageJoinedViaPAD(msg.sender, msg.value);\n}\n\nfunction setPrices(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    stor_3 = varg0;\n}\n\nfunction setPayanyToken(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _paytoken = varg0;\n}\n\nfunction joinPackageViaETH(uint256 varg0) public payable { \n    require(varg0 >= 0);\n    v0 = __reserve20.call().value(msg.value * 20 / 100).gas(!(msg.value * 20 / 100) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit PackageJoinedViaETH(msg.sender, msg.value);\n}\n\nfunction fallback() public payable { \n    require(_paytoken.code.size);\n    v0, v1 = _paytoken.transfer(__reserve20, msg.value).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x2e26c38 == function_selector) {\n            richest();\n        } else if (0x1253b994 == function_selector) {\n            swapUToD(address,address,uint256);\n        } else if (0x21896589 == function_selector) {\n            Paytoken();\n        } else if (0x3af27e4f == function_selector) {\n            _reserve20();\n        } else if (0x43605779 == function_selector) {\n            wdE(uint256);\n        } else if (0x66bd78fd == function_selector) {\n            getBalanceContract();\n        } else if (0x6886bf1c == function_selector) {\n            mostSent();\n        } else if (0x69934ee7 == function_selector) {\n            becomeRichest();\n        } else if (0x83894548 == function_selector) {\n            getTokenBalanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9deddd26 == function_selector) {\n            joinPackageViaPAD(uint256);\n        } else if (0xa3201daa == function_selector) {\n            setPrices(uint256);\n        } else if (0xa5455d45 == function_selector) {\n            setPayanyToken(address);\n        } else if (0xfdbf40c3 == function_selector) {\n            joinPackageViaETH(uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 07:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _mostSent; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nmapping (uint256 => [uint256]) map_6; // STORAGE[0x6]\naddress _richest; // STORAGE[0x0] bytes 0 to 19\naddress _owner; // STORAGE[0x1] bytes 0 to 19\naddress _paytoken; // STORAGE[0x4] bytes 0 to 19\naddress __reserve20; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nPackageJoinedViaPAD(address, uint256);\nPackageJoinedViaETH(address, uint256);\n\nfunction richest() public nonPayable { \n    return _richest;\n}\n\nfunction swapUToD(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.sender == _owner);\n    require(_paytoken.code.size);\n    v0, v1 = _paytoken.balanceOf(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(varg2 <= v1);\n    require(_paytoken.code.size);\n    v2, v3 = _paytoken.transfer(varg1, varg2).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return 1;\n}\n\nfunction Paytoken() public nonPayable { \n    return _paytoken;\n}\n\nfunction _reserve20() public nonPayable { \n    return __reserve20;\n}\n\nfunction wdE(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 <= (address(this)).balance);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction getBalanceContract() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction mostSent() public nonPayable { \n    return _mostSent;\n}\n\nfunction becomeRichest() public payable { \n    require(msg.value > _mostSent);\n    map_6[_richest] = map_6[_richest] + msg.value;\n    _richest = msg.sender;\n    _mostSent = msg.value;\n    return 1;\n}\n\nfunction getTokenBalanceOf(address varg0) public nonPayable { \n    require(_paytoken.code.size);\n    v0, v1 = _paytoken.balanceOf(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction joinPackageViaPAD(uint256 varg0) public nonPayable { \n    require(varg0 >= 0);\n    require(_paytoken.code.size);\n    v0, v1 = _paytoken.transfer(__reserve20, msg.value * 20 / 100).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    emit PackageJoinedViaPAD(msg.sender, msg.value);\n}\n\nfunction setPrices(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    stor_3 = varg0;\n}\n\nfunction setPayanyToken(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _paytoken = varg0;\n}\n\nfunction joinPackageViaETH(uint256 varg0) public payable { \n    require(varg0 >= 0);\n    v0 = __reserve20.call().value(msg.value * 20 / 100).gas(!(msg.value * 20 / 100) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit PackageJoinedViaETH(msg.sender, msg.value);\n}\n\nfunction fallback() public payable { \n    require(_paytoken.code.size);\n    v0, v1 = _paytoken.transfer(__reserve20, msg.value).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x2e26c38 == function_selector) {\n            richest();\n        } else if (0x1253b994 == function_selector) {\n            swapUToD(address,address,uint256);\n        } else if (0x21896589 == function_selector) {\n            Paytoken();\n        } else if (0x3af27e4f == function_selector) {\n            _reserve20();\n        } else if (0x43605779 == function_selector) {\n            wdE(uint256);\n        } else if (0x66bd78fd == function_selector) {\n            getBalanceContract();\n        } else if (0x6886bf1c == function_selector) {\n            mostSent();\n        } else if (0x69934ee7 == function_selector) {\n            becomeRichest();\n        } else if (0x83894548 == function_selector) {\n            getTokenBalanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9deddd26 == function_selector) {\n            joinPackageViaPAD(uint256);\n        } else if (0xa3201daa == function_selector) {\n            setPrices(uint256);\n        } else if (0xa5455d45 == function_selector) {\n            setPayanyToken(address);\n        } else if (0xfdbf40c3 == function_selector) {\n            joinPackageViaETH(uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 07:21 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _mostSent; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nmapping (uint256 => [uint256]) map_6; // STORAGE[0x6]\naddress _richest; // STORAGE[0x0] bytes 0 to 19\naddress _owner; // STORAGE[0x1] bytes 0 to 19\naddress _paytoken; // STORAGE[0x4] bytes 0 to 19\naddress __reserve20; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nPackageJoinedViaPAD(address, uint256);\nPackageJoinedViaETH(address, uint256);\n\nfunction richest() public nonPayable { \n    return _richest;\n}\n\nfunction swapUToD(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.sender == _owner);\n    require(_paytoken.code.size);\n    v0, v1 = _paytoken.balanceOf(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(varg2 <= v1);\n    require(_paytoken.code.size);\n    v2, v3 = _paytoken.transfer(varg1, varg2).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return 1;\n}\n\nfunction Paytoken() public nonPayable { \n    return _paytoken;\n}\n\nfunction _reserve20() public nonPayable { \n    return __reserve20;\n}\n\nfunction wdE(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 <= (address(this)).balance);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction getBalanceContract() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction mostSent() public nonPayable { \n    return _mostSent;\n}\n\nfunction becomeRichest() public payable { \n    require(msg.value > _mostSent);\n    map_6[_richest] = map_6[_richest] + msg.value;\n    _richest = msg.sender;\n    _mostSent = msg.value;\n    return 1;\n}\n\nfunction getTokenBalanceOf(address varg0) public nonPayable { \n    require(_paytoken.code.size);\n    v0, v1 = _paytoken.balanceOf(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction joinPackageViaPAD(uint256 varg0) public nonPayable { \n    require(varg0 >= 0);\n    require(_paytoken.code.size);\n    v0, v1 = _paytoken.transfer(__reserve20, msg.value * 20 / 100).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    emit PackageJoinedViaPAD(msg.sender, msg.value);\n}\n\nfunction setPrices(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    stor_3 = varg0;\n}\n\nfunction setPayanyToken(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _paytoken = varg0;\n}\n\nfunction joinPackageViaETH(uint256 varg0) public payable { \n    require(varg0 >= 0);\n    v0 = __reserve20.call().value(msg.value * 20 / 100).gas(!(msg.value * 20 / 100) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    emit PackageJoinedViaETH(msg.sender, msg.value);\n}\n\nfunction fallback() public payable { \n    require(_paytoken.code.size);\n    v0, v1 = _paytoken.transfer(__reserve20, msg.value).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x2e26c38 == function_selector) {\n            richest();\n        } else if (0x1253b994 == function_selector) {\n            swapUToD(address,address,uint256);\n        } else if (0x21896589 == function_selector) {\n            Paytoken();\n        } else if (0x3af27e4f == function_selector) {\n            _reserve20();\n        } else if (0x43605779 == function_selector) {\n            wdE(uint256);\n        } else if (0x66bd78fd == function_selector) {\n            getBalanceContract();\n        } else if (0x6886bf1c == function_selector) {\n            mostSent();\n        } else if (0x69934ee7 == function_selector) {\n            becomeRichest();\n        } else if (0x83894548 == function_selector) {\n            getTokenBalanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9deddd26 == function_selector) {\n            joinPackageViaPAD(uint256);\n        } else if (0xa3201daa == function_selector) {\n            setPrices(uint256);\n        } else if (0xa5455d45 == function_selector) {\n            setPayanyToken(address);\n        } else if (0xfdbf40c3 == function_selector) {\n            joinPackageViaETH(uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 40.338021755218506,
	"usage": {
		"completion_tokens": 716,
		"prompt_tokens": 1439,
		"total_tokens": 2155
	}
}