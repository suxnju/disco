{
	"address": "0xefe076de83ccf27bc893002439dec13f93564e84",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on your provided pseudo code, here is the Solidity contract that can be compiled into the EVM bytecode:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    uint256[] private store;\n    event Log(bytes32);\n\n    // This contract doesn't allow ether to be sent to it straight away\n    function() external payable {\n        revert();\n    }\n\n    function method_1(address addr) public {\n        require(addr != address(0));\n        uint256 value = uint256(addr);\n        store.push(value);\n    }\n\n    function method_2(uint256 index) public view returns(uint256) {\n        require(index < store.length);\n        return store[index];\n    }\n    \n    function method_3(address addr) public {\n        require(addr != address(0));\n        uint256 value = uint256(addr);\n        emit Log(bytes32(value));\n    }\n\n    function method_4(uint256 index, uint256 value) public {\n        require(index < store.length);\n        require(value < 0x0a);\n        store[index] = value;\n    }\n\n    function method_5(uint256 index) public {\n        require(index < store.length);\n        store[index] = 0x01;\n    }\n}\n```\n\nPlease note that this is a rough equivalence to the pseudo code you provided, and it might not behave exactly as the original contract. The function names and the logic inside each function is inferred from the decompiled code, but without the original source it's hard to tell what exactly each function is supposed to do.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474907,
	"id": "chatcmpl-8MvUZDaTV6Fiqh7n0EpaVz1zySNB3",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0xf1bb1086) {\n            if (memory[0x00:0x20] != 0xfa75d160) {\n                if (memory[0x00:0x20] != 0x3d710a9d) {\n                    if (memory[0x00:0x20] != 0x06fdde03) {\n                        if (memory[0x00:0x20] != 0x8da5cb5b) {\n                            if (memory[0x00:0x20] != 0x9b8ce99a) {\n                                if (memory[0x00:0x20] != 0x2c387275) {\n                                    if (memory[0x00:0x20] != 0x72df29a7) { revert(memory[0x00:0x00]); }\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0x00:0x20] = storage[0x04];\n                                    return memory[0x00:0x20];\n                                } else if (!msg.value) {\n                                    memory[0x00:0x20] = storage[0x03];\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var var0 = memory[0x60:0x80];\n                                var var1 = msg.data[0x04:0x24];\n                            \n                                if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                            \n                                var temp0 = var0;\n                                var0 = var1;\n                            \n                                if (var0 i< temp0) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= 0x0a) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xc0:0xe0] = 0x02;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + var0];\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x01];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        var0 = 0x00;\n                        memory[0xc0:0xe0] = var0;\n                        var1 = keccak256(memory[0xc0:0xe0]);\n                        var var2 = 0x0180;\n                        var temp1 = storage[var1] + 0x20;\n                        var var3 = temp1;\n                        var var4 = 0x0120;\n                        memory[var4:var4 + 0x20] = 0x00;\n                        var var5 = 0x02;\n                    \n                        if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_062C; }\n                    \n                    label_0630:\n                        memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                        var temp2 = var4;\n                        var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                        memory[temp2:temp2 + 0x20] = temp3;\n                    \n                        if (var5 == temp3) { goto label_0652; }\n                    \n                        if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0630; }\n                    \n                    label_062C:\n                    \n                    label_0652:\n                        var temp4 = memory[0x0180:0x01a0];\n                        var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                        var1 = 0x01e0;\n                        var temp5 = memory[0x0180:0x01a0];\n                        memory[var1:var1 + 0x20] = temp5;\n                        var2 = temp5 + 0x10;\n                    \n                        if (memory[0x01e0:0x0200] > var0) { goto label_0684; }\n                    \n                    label_0688:\n                        memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                        var temp6 = var1;\n                        var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                        memory[temp6:temp6 + 0x20] = temp7;\n                    \n                        if (var2 == temp7) { goto label_06A4; }\n                    \n                        if (memory[0x01e0:0x0200] <= var0) { goto label_0688; }\n                    \n                    label_0684:\n                    \n                    label_06A4:\n                        memory[0x0160:0x0180] = 0x20;\n                        var temp8 = memory[0x0180:0x01a0] + 0x40;\n                        return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x60:0x80];\n                    var1 = msg.data[0x24:0x44];\n                \n                    if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                \n                    var temp9 = var0;\n                    var0 = var1;\n                \n                    if (var0 i< temp9) { revert(memory[0x00:0x00]); }\n                \n                    if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                    var1 = msg.data[0x24:0x44];\n                \n                    if (var1 >= 0x0a) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xc0:0xe0] = 0x02;\n                    storage[keccak256(memory[0xc0:0xe0]) + var1] = var0;\n                    log(memory[0x00:0x00], [0xa92882985915193a9370218a3a7e82c81fc53c081fbc542aa6766ba82239902d, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0180:0x01a0] = 0x00;\n                var0 = 0x01a0;\n                memory[var0:var0 + 0x20] = 0x00;\n                var1 = 0x0a;\n                var2 = memory[0x01a0:0x01c0];\n            \n                if (var2 >= 0x0a) { revert(memory[0x00:0x00]); }\n            \n            label_03BF:\n                memory[0xc0:0xe0] = 0x02;\n                memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + var2];\n            \n                if (!(memory[0x0140:0x0160] ~ 0x00)) {\n                label_050D:\n                    var temp10 = var0;\n                    var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n                    memory[temp10:temp10 + 0x20] = temp11;\n                \n                    if (var1 != temp11) {\n                        var2 = memory[0x01a0:0x01c0];\n                    \n                        if (var2 < 0x0a) { goto label_03BF; }\n                        else { revert(memory[0x00:0x00]); }\n                    } else {\n                        memory[0x00:0x20] = memory[0x0180:0x01a0];\n                        return memory[0x00:0x20];\n                    }\n                } else if (address(memory[0x0140:0x0160]).code.length) {\n                    if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x01e0:0x0200] = 0x70a08231;\n                    memory[0x0200:0x0220] = msg.data[0x04:0x24];\n                    var temp12;\n                    temp12, memory[0x0260:0x0280] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x01fc:0x0220]);\n                \n                    if (!temp12) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x01c0:0x01e0] = memory[0x0260:0x0280];\n                    memory[0x0280:0x02a0] = 0xf1bb1086;\n                    memory[0x02a0:0x02c0] = memory[0x0140:0x0160];\n                    var temp13;\n                    temp13, memory[0x0300:0x0320] = address(address(this)).call.gas(msg.gas)(memory[0x029c:0x02c0]);\n                \n                    if (!temp13) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0160:0x0180] = memory[0x0300:0x0320];\n                    var2 = 0x0180;\n                    var3 = memory[var2:var2 + 0x20];\n                \n                    if (!0x05f5e100) { revert(memory[0x00:0x00]); }\n                \n                    var4 = 0x05f5e100;\n                \n                    if (!memory[0x01c0:0x01e0]) {\n                        var5 = 0x00;\n                        goto label_04AC;\n                    } else if ((memory[0x01c0:0x01e0] * memory[0x0160:0x0180]) / memory[0x01c0:0x01e0] == memory[0x0160:0x0180]) {\n                        var5 = memory[0x01c0:0x01e0] * memory[0x0160:0x0180];\n                    \n                    label_04AC:\n                    \n                        if (memory[var2:var2 + 0x20] + var5 / var4 < var3) { revert(memory[0x00:0x00]); }\n                    \n                        if (!0x05f5e100) { revert(memory[0x00:0x00]); }\n                    \n                        var3 = 0x05f5e100;\n                    \n                        if (!memory[0x01c0:0x01e0]) {\n                            var4 = 0x00;\n                            var temp15 = var2;\n                            memory[temp15:temp15 + 0x20] = memory[temp15:temp15 + 0x20] + var4 / var3;\n                            goto label_050D;\n                        } else if ((memory[0x01c0:0x01e0] * memory[0x0160:0x0180]) / memory[0x01c0:0x01e0] == memory[0x0160:0x0180]) {\n                            var temp14 = var2;\n                            memory[temp14:temp14 + 0x20] = memory[temp14:temp14 + 0x20] + (memory[0x01c0:0x01e0] * memory[0x0160:0x0180]) / var3;\n                            goto label_050D;\n                        } else { revert(memory[0x00:0x00]); }\n                    } else { revert(memory[0x00:0x00]); }\n                } else { revert(memory[0x00:0x00]); }\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (!address(msg.data[0x04:0x24]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ msg.data[0x04:0x24])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0x313ce567;\n            var temp16;\n            temp16, memory[0x01e0:0x0200] = address(msg.data[0x04:0x24]).staticcall.gas(msg.gas)(memory[0x019c:0x01a0]);\n        \n            if (!temp16) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x0180] = memory[0x01e0:0x0200];\n        \n            if (!(msg.data[0x04:0x24] ~ storage[0x03])) {\n                var0 = 0x0200;\n            \n                if (!address(storage[0x04]).code.length) { revert(memory[0x00:0x00]); }\n            \n                if (!(address(this) ~ storage[0x04])) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0240:0x0260] = 0xafb1f8d6;\n                var temp17;\n                temp17, memory[0x02a0:0x02e0] = address(storage[0x04]).staticcall.gas(msg.gas)(memory[0x025c:0x0260]);\n            \n                if (!temp17) { revert(memory[0x00:0x00]); }\n            \n                var temp18 = var0;\n                memory[temp18:temp18 + 0x20] = memory[0x02a0:0x02c0];\n                memory[temp18 + 0x20:temp18 + 0x20 + 0x20] = memory[0x02c0:0x02e0];\n                memory[0x0140:0x0160] = memory[0x0200:0x0220];\n            \n                if (memory[0x0140:0x0160] < 0x0d2f13f7789f0000) { revert(memory[0x00:0x00]); }\n            \n                if (memory[0x0140:0x0160] > 0x0e92596fd6290000) { revert(memory[0x00:0x00]); }\n            \n                if (!0x02540be400) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0140:0x0160] = memory[0x0140:0x0160] / 0x02540be400;\n            \n            label_01CB:\n            \n                if (!memory[0x0140:0x0160]) {\n                    var0 = 0x00;\n                    goto label_035E;\n                } else if (0x12 >= memory[0x0160:0x0180]) {\n                    var0 = 0x0a < 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var1 = !(0x12 - memory[0x0160:0x0180]);\n                    var2 = 0x01;\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    if (!((0x12 - memory[0x0160:0x0180] == var2) | var1 | var0)) { revert(memory[0x00:0x00]); }\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                    var1 = memory[0x0140:0x0160];\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var2 = 0x0a < 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var3 = !(0x12 - memory[0x0160:0x0180]);\n                    var4 = 0x01;\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    if (!((0x12 - memory[0x0160:0x0180] == var4) | var3 | var2)) { revert(memory[0x00:0x00]); }\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    if ((memory[0x0140:0x0160] * 0x0a ** (0x12 - memory[0x0160:0x0180])) / var1 != var0) { revert(memory[0x00:0x00]); }\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = 0x0a < 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var1 = !(0x12 - memory[0x0160:0x0180]);\n                    var2 = 0x01;\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    if (!((0x12 - memory[0x0160:0x0180] == var2) | var1 | var0)) { revert(memory[0x00:0x00]); }\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x0140:0x0160] * 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                \n                label_035E:\n                    memory[0x02e0:0x0300] = var0;\n                    memory[0x00:0x20] = memory[0x02e0:0x0300];\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else {\n                memory[0x0140:0x0160] = 0x05f5e100;\n                goto label_01CB;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0xf1bb1086) {\n            if (memory[0x00:0x20] != 0xfa75d160) {\n                if (memory[0x00:0x20] != 0x3d710a9d) {\n                    if (memory[0x00:0x20] != 0x06fdde03) {\n                        if (memory[0x00:0x20] != 0x8da5cb5b) {\n                            if (memory[0x00:0x20] != 0x9b8ce99a) {\n                                if (memory[0x00:0x20] != 0x2c387275) {\n                                    if (memory[0x00:0x20] != 0x72df29a7) { revert(memory[0x00:0x00]); }\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0x00:0x20] = storage[0x04];\n                                    return memory[0x00:0x20];\n                                } else if (!msg.value) {\n                                    memory[0x00:0x20] = storage[0x03];\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var var0 = memory[0x60:0x80];\n                                var var1 = msg.data[0x04:0x24];\n                            \n                                if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                            \n                                var temp0 = var0;\n                                var0 = var1;\n                            \n                                if (var0 i< temp0) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= 0x0a) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xc0:0xe0] = 0x02;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + var0];\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x01];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        var0 = 0x00;\n                        memory[0xc0:0xe0] = var0;\n                        var1 = keccak256(memory[0xc0:0xe0]);\n                        var var2 = 0x0180;\n                        var temp1 = storage[var1] + 0x20;\n                        var var3 = temp1;\n                        var var4 = 0x0120;\n                        memory[var4:var4 + 0x20] = 0x00;\n                        var var5 = 0x02;\n                    \n                        if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_062C; }\n                    \n                    label_0630:\n                        memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                        var temp2 = var4;\n                        var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                        memory[temp2:temp2 + 0x20] = temp3;\n                    \n                        if (var5 == temp3) { goto label_0652; }\n                    \n                        if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0630; }\n                    \n                    label_062C:\n                    \n                    label_0652:\n                        var temp4 = memory[0x0180:0x01a0];\n                        var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                        var1 = 0x01e0;\n                        var temp5 = memory[0x0180:0x01a0];\n                        memory[var1:var1 + 0x20] = temp5;\n                        var2 = temp5 + 0x10;\n                    \n                        if (memory[0x01e0:0x0200] > var0) { goto label_0684; }\n                    \n                    label_0688:\n                        memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                        var temp6 = var1;\n                        var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                        memory[temp6:temp6 + 0x20] = temp7;\n                    \n                        if (var2 == temp7) { goto label_06A4; }\n                    \n                        if (memory[0x01e0:0x0200] <= var0) { goto label_0688; }\n                    \n                    label_0684:\n                    \n                    label_06A4:\n                        memory[0x0160:0x0180] = 0x20;\n                        var temp8 = memory[0x0180:0x01a0] + 0x40;\n                        return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x60:0x80];\n                    var1 = msg.data[0x24:0x44];\n                \n                    if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                \n                    var temp9 = var0;\n                    var0 = var1;\n                \n                    if (var0 i< temp9) { revert(memory[0x00:0x00]); }\n                \n                    if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                    var1 = msg.data[0x24:0x44];\n                \n                    if (var1 >= 0x0a) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xc0:0xe0] = 0x02;\n                    storage[keccak256(memory[0xc0:0xe0]) + var1] = var0;\n                    log(memory[0x00:0x00], [0xa92882985915193a9370218a3a7e82c81fc53c081fbc542aa6766ba82239902d, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0180:0x01a0] = 0x00;\n                var0 = 0x01a0;\n                memory[var0:var0 + 0x20] = 0x00;\n                var1 = 0x0a;\n                var2 = memory[0x01a0:0x01c0];\n            \n                if (var2 >= 0x0a) { revert(memory[0x00:0x00]); }\n            \n            label_03BF:\n                memory[0xc0:0xe0] = 0x02;\n                memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + var2];\n            \n                if (!(memory[0x0140:0x0160] ~ 0x00)) {\n                label_050D:\n                    var temp10 = var0;\n                    var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n                    memory[temp10:temp10 + 0x20] = temp11;\n                \n                    if (var1 != temp11) {\n                        var2 = memory[0x01a0:0x01c0];\n                    \n                        if (var2 < 0x0a) { goto label_03BF; }\n                        else { revert(memory[0x00:0x00]); }\n                    } else {\n                        memory[0x00:0x20] = memory[0x0180:0x01a0];\n                        return memory[0x00:0x20];\n                    }\n                } else if (address(memory[0x0140:0x0160]).code.length) {\n                    if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x01e0:0x0200] = 0x70a08231;\n                    memory[0x0200:0x0220] = msg.data[0x04:0x24];\n                    var temp12;\n                    temp12, memory[0x0260:0x0280] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x01fc:0x0220]);\n                \n                    if (!temp12) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x01c0:0x01e0] = memory[0x0260:0x0280];\n                    memory[0x0280:0x02a0] = 0xf1bb1086;\n                    memory[0x02a0:0x02c0] = memory[0x0140:0x0160];\n                    var temp13;\n                    temp13, memory[0x0300:0x0320] = address(address(this)).call.gas(msg.gas)(memory[0x029c:0x02c0]);\n                \n                    if (!temp13) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0160:0x0180] = memory[0x0300:0x0320];\n                    var2 = 0x0180;\n                    var3 = memory[var2:var2 + 0x20];\n                \n                    if (!0x05f5e100) { revert(memory[0x00:0x00]); }\n                \n                    var4 = 0x05f5e100;\n                \n                    if (!memory[0x01c0:0x01e0]) {\n                        var5 = 0x00;\n                        goto label_04AC;\n                    } else if ((memory[0x01c0:0x01e0] * memory[0x0160:0x0180]) / memory[0x01c0:0x01e0] == memory[0x0160:0x0180]) {\n                        var5 = memory[0x01c0:0x01e0] * memory[0x0160:0x0180];\n                    \n                    label_04AC:\n                    \n                        if (memory[var2:var2 + 0x20] + var5 / var4 < var3) { revert(memory[0x00:0x00]); }\n                    \n                        if (!0x05f5e100) { revert(memory[0x00:0x00]); }\n                    \n                        var3 = 0x05f5e100;\n                    \n                        if (!memory[0x01c0:0x01e0]) {\n                            var4 = 0x00;\n                            var temp15 = var2;\n                            memory[temp15:temp15 + 0x20] = memory[temp15:temp15 + 0x20] + var4 / var3;\n                            goto label_050D;\n                        } else if ((memory[0x01c0:0x01e0] * memory[0x0160:0x0180]) / memory[0x01c0:0x01e0] == memory[0x0160:0x0180]) {\n                            var temp14 = var2;\n                            memory[temp14:temp14 + 0x20] = memory[temp14:temp14 + 0x20] + (memory[0x01c0:0x01e0] * memory[0x0160:0x0180]) / var3;\n                            goto label_050D;\n                        } else { revert(memory[0x00:0x00]); }\n                    } else { revert(memory[0x00:0x00]); }\n                } else { revert(memory[0x00:0x00]); }\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (!address(msg.data[0x04:0x24]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ msg.data[0x04:0x24])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0x313ce567;\n            var temp16;\n            temp16, memory[0x01e0:0x0200] = address(msg.data[0x04:0x24]).staticcall.gas(msg.gas)(memory[0x019c:0x01a0]);\n        \n            if (!temp16) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x0180] = memory[0x01e0:0x0200];\n        \n            if (!(msg.data[0x04:0x24] ~ storage[0x03])) {\n                var0 = 0x0200;\n            \n                if (!address(storage[0x04]).code.length) { revert(memory[0x00:0x00]); }\n            \n                if (!(address(this) ~ storage[0x04])) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0240:0x0260] = 0xafb1f8d6;\n                var temp17;\n                temp17, memory[0x02a0:0x02e0] = address(storage[0x04]).staticcall.gas(msg.gas)(memory[0x025c:0x0260]);\n            \n                if (!temp17) { revert(memory[0x00:0x00]); }\n            \n                var temp18 = var0;\n                memory[temp18:temp18 + 0x20] = memory[0x02a0:0x02c0];\n                memory[temp18 + 0x20:temp18 + 0x20 + 0x20] = memory[0x02c0:0x02e0];\n                memory[0x0140:0x0160] = memory[0x0200:0x0220];\n            \n                if (memory[0x0140:0x0160] < 0x0d2f13f7789f0000) { revert(memory[0x00:0x00]); }\n            \n                if (memory[0x0140:0x0160] > 0x0e92596fd6290000) { revert(memory[0x00:0x00]); }\n            \n                if (!0x02540be400) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0140:0x0160] = memory[0x0140:0x0160] / 0x02540be400;\n            \n            label_01CB:\n            \n                if (!memory[0x0140:0x0160]) {\n                    var0 = 0x00;\n                    goto label_035E;\n                } else if (0x12 >= memory[0x0160:0x0180]) {\n                    var0 = 0x0a < 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var1 = !(0x12 - memory[0x0160:0x0180]);\n                    var2 = 0x01;\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    if (!((0x12 - memory[0x0160:0x0180] == var2) | var1 | var0)) { revert(memory[0x00:0x00]); }\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                    var1 = memory[0x0140:0x0160];\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var2 = 0x0a < 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var3 = !(0x12 - memory[0x0160:0x0180]);\n                    var4 = 0x01;\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    if (!((0x12 - memory[0x0160:0x0180] == var4) | var3 | var2)) { revert(memory[0x00:0x00]); }\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    if ((memory[0x0140:0x0160] * 0x0a ** (0x12 - memory[0x0160:0x0180])) / var1 != var0) { revert(memory[0x00:0x00]); }\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = 0x0a < 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var1 = !(0x12 - memory[0x0160:0x0180]);\n                    var2 = 0x01;\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    if (!((0x12 - memory[0x0160:0x0180] == var2) | var1 | var0)) { revert(memory[0x00:0x00]); }\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x0140:0x0160] * 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                \n                label_035E:\n                    memory[0x02e0:0x0300] = var0;\n                    memory[0x00:0x20] = memory[0x02e0:0x0300];\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else {\n                memory[0x0140:0x0160] = 0x05f5e100;\n                goto label_01CB;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] != 0xf1bb1086) {\n            if (memory[0x00:0x20] != 0xfa75d160) {\n                if (memory[0x00:0x20] != 0x3d710a9d) {\n                    if (memory[0x00:0x20] != 0x06fdde03) {\n                        if (memory[0x00:0x20] != 0x8da5cb5b) {\n                            if (memory[0x00:0x20] != 0x9b8ce99a) {\n                                if (memory[0x00:0x20] != 0x2c387275) {\n                                    if (memory[0x00:0x20] != 0x72df29a7) { revert(memory[0x00:0x00]); }\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0x00:0x20] = storage[0x04];\n                                    return memory[0x00:0x20];\n                                } else if (!msg.value) {\n                                    memory[0x00:0x20] = storage[0x03];\n                                    return memory[0x00:0x20];\n                                } else { revert(memory[0x00:0x00]); }\n                            } else if (!msg.value) {\n                                var var0 = memory[0x60:0x80];\n                                var var1 = msg.data[0x04:0x24];\n                            \n                                if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                            \n                                var temp0 = var0;\n                                var0 = var1;\n                            \n                                if (var0 i< temp0) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= 0x0a) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xc0:0xe0] = 0x02;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + var0];\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x01];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        var0 = 0x00;\n                        memory[0xc0:0xe0] = var0;\n                        var1 = keccak256(memory[0xc0:0xe0]);\n                        var var2 = 0x0180;\n                        var temp1 = storage[var1] + 0x20;\n                        var var3 = temp1;\n                        var var4 = 0x0120;\n                        memory[var4:var4 + 0x20] = 0x00;\n                        var var5 = 0x02;\n                    \n                        if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_062C; }\n                    \n                    label_0630:\n                        memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                        var temp2 = var4;\n                        var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                        memory[temp2:temp2 + 0x20] = temp3;\n                    \n                        if (var5 == temp3) { goto label_0652; }\n                    \n                        if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0630; }\n                    \n                    label_062C:\n                    \n                    label_0652:\n                        var temp4 = memory[0x0180:0x01a0];\n                        var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                        var1 = 0x01e0;\n                        var temp5 = memory[0x0180:0x01a0];\n                        memory[var1:var1 + 0x20] = temp5;\n                        var2 = temp5 + 0x10;\n                    \n                        if (memory[0x01e0:0x0200] > var0) { goto label_0684; }\n                    \n                    label_0688:\n                        memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                        var temp6 = var1;\n                        var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                        memory[temp6:temp6 + 0x20] = temp7;\n                    \n                        if (var2 == temp7) { goto label_06A4; }\n                    \n                        if (memory[0x01e0:0x0200] <= var0) { goto label_0688; }\n                    \n                    label_0684:\n                    \n                    label_06A4:\n                        memory[0x0160:0x0180] = 0x20;\n                        var temp8 = memory[0x0180:0x01a0] + 0x40;\n                        return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x60:0x80];\n                    var1 = msg.data[0x24:0x44];\n                \n                    if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                \n                    var temp9 = var0;\n                    var0 = var1;\n                \n                    if (var0 i< temp9) { revert(memory[0x00:0x00]); }\n                \n                    if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = msg.data[0x04:0x24];\n                    var1 = msg.data[0x24:0x44];\n                \n                    if (var1 >= 0x0a) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xc0:0xe0] = 0x02;\n                    storage[keccak256(memory[0xc0:0xe0]) + var1] = var0;\n                    log(memory[0x00:0x00], [0xa92882985915193a9370218a3a7e82c81fc53c081fbc542aa6766ba82239902d, msg.data[0x04:0x24], msg.data[0x24:0x44]]);\n                    memory[0x00:0x20] = 0x01;\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0180:0x01a0] = 0x00;\n                var0 = 0x01a0;\n                memory[var0:var0 + 0x20] = 0x00;\n                var1 = 0x0a;\n                var2 = memory[0x01a0:0x01c0];\n            \n                if (var2 >= 0x0a) { revert(memory[0x00:0x00]); }\n            \n            label_03BF:\n                memory[0xc0:0xe0] = 0x02;\n                memory[0x0140:0x0160] = storage[keccak256(memory[0xc0:0xe0]) + var2];\n            \n                if (!(memory[0x0140:0x0160] ~ 0x00)) {\n                label_050D:\n                    var temp10 = var0;\n                    var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n                    memory[temp10:temp10 + 0x20] = temp11;\n                \n                    if (var1 != temp11) {\n                        var2 = memory[0x01a0:0x01c0];\n                    \n                        if (var2 < 0x0a) { goto label_03BF; }\n                        else { revert(memory[0x00:0x00]); }\n                    } else {\n                        memory[0x00:0x20] = memory[0x0180:0x01a0];\n                        return memory[0x00:0x20];\n                    }\n                } else if (address(memory[0x0140:0x0160]).code.length) {\n                    if (!(address(this) ~ memory[0x0140:0x0160])) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x01e0:0x0200] = 0x70a08231;\n                    memory[0x0200:0x0220] = msg.data[0x04:0x24];\n                    var temp12;\n                    temp12, memory[0x0260:0x0280] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x01fc:0x0220]);\n                \n                    if (!temp12) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x01c0:0x01e0] = memory[0x0260:0x0280];\n                    memory[0x0280:0x02a0] = 0xf1bb1086;\n                    memory[0x02a0:0x02c0] = memory[0x0140:0x0160];\n                    var temp13;\n                    temp13, memory[0x0300:0x0320] = address(address(this)).call.gas(msg.gas)(memory[0x029c:0x02c0]);\n                \n                    if (!temp13) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x0160:0x0180] = memory[0x0300:0x0320];\n                    var2 = 0x0180;\n                    var3 = memory[var2:var2 + 0x20];\n                \n                    if (!0x05f5e100) { revert(memory[0x00:0x00]); }\n                \n                    var4 = 0x05f5e100;\n                \n                    if (!memory[0x01c0:0x01e0]) {\n                        var5 = 0x00;\n                        goto label_04AC;\n                    } else if ((memory[0x01c0:0x01e0] * memory[0x0160:0x0180]) / memory[0x01c0:0x01e0] == memory[0x0160:0x0180]) {\n                        var5 = memory[0x01c0:0x01e0] * memory[0x0160:0x0180];\n                    \n                    label_04AC:\n                    \n                        if (memory[var2:var2 + 0x20] + var5 / var4 < var3) { revert(memory[0x00:0x00]); }\n                    \n                        if (!0x05f5e100) { revert(memory[0x00:0x00]); }\n                    \n                        var3 = 0x05f5e100;\n                    \n                        if (!memory[0x01c0:0x01e0]) {\n                            var4 = 0x00;\n                            var temp15 = var2;\n                            memory[temp15:temp15 + 0x20] = memory[temp15:temp15 + 0x20] + var4 / var3;\n                            goto label_050D;\n                        } else if ((memory[0x01c0:0x01e0] * memory[0x0160:0x0180]) / memory[0x01c0:0x01e0] == memory[0x0160:0x0180]) {\n                            var temp14 = var2;\n                            memory[temp14:temp14 + 0x20] = memory[temp14:temp14 + 0x20] + (memory[0x01c0:0x01e0] * memory[0x0160:0x0180]) / var3;\n                            goto label_050D;\n                        } else { revert(memory[0x00:0x00]); }\n                    } else { revert(memory[0x00:0x00]); }\n                } else { revert(memory[0x00:0x00]); }\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (!address(msg.data[0x04:0x24]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ msg.data[0x04:0x24])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0x313ce567;\n            var temp16;\n            temp16, memory[0x01e0:0x0200] = address(msg.data[0x04:0x24]).staticcall.gas(msg.gas)(memory[0x019c:0x01a0]);\n        \n            if (!temp16) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x0180] = memory[0x01e0:0x0200];\n        \n            if (!(msg.data[0x04:0x24] ~ storage[0x03])) {\n                var0 = 0x0200;\n            \n                if (!address(storage[0x04]).code.length) { revert(memory[0x00:0x00]); }\n            \n                if (!(address(this) ~ storage[0x04])) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0240:0x0260] = 0xafb1f8d6;\n                var temp17;\n                temp17, memory[0x02a0:0x02e0] = address(storage[0x04]).staticcall.gas(msg.gas)(memory[0x025c:0x0260]);\n            \n                if (!temp17) { revert(memory[0x00:0x00]); }\n            \n                var temp18 = var0;\n                memory[temp18:temp18 + 0x20] = memory[0x02a0:0x02c0];\n                memory[temp18 + 0x20:temp18 + 0x20 + 0x20] = memory[0x02c0:0x02e0];\n                memory[0x0140:0x0160] = memory[0x0200:0x0220];\n            \n                if (memory[0x0140:0x0160] < 0x0d2f13f7789f0000) { revert(memory[0x00:0x00]); }\n            \n                if (memory[0x0140:0x0160] > 0x0e92596fd6290000) { revert(memory[0x00:0x00]); }\n            \n                if (!0x02540be400) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0140:0x0160] = memory[0x0140:0x0160] / 0x02540be400;\n            \n            label_01CB:\n            \n                if (!memory[0x0140:0x0160]) {\n                    var0 = 0x00;\n                    goto label_035E;\n                } else if (0x12 >= memory[0x0160:0x0180]) {\n                    var0 = 0x0a < 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var1 = !(0x12 - memory[0x0160:0x0180]);\n                    var2 = 0x01;\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    if (!((0x12 - memory[0x0160:0x0180] == var2) | var1 | var0)) { revert(memory[0x00:0x00]); }\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                    var1 = memory[0x0140:0x0160];\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var2 = 0x0a < 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var3 = !(0x12 - memory[0x0160:0x0180]);\n                    var4 = 0x01;\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    if (!((0x12 - memory[0x0160:0x0180] == var4) | var3 | var2)) { revert(memory[0x00:0x00]); }\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    if ((memory[0x0140:0x0160] * 0x0a ** (0x12 - memory[0x0160:0x0180])) / var1 != var0) { revert(memory[0x00:0x00]); }\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = 0x0a < 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var1 = !(0x12 - memory[0x0160:0x0180]);\n                    var2 = 0x01;\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    if (!((0x12 - memory[0x0160:0x0180] == var2) | var1 | var0)) { revert(memory[0x00:0x00]); }\n                \n                    if (0x12 < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x0140:0x0160] * 0x0a ** (0x12 - memory[0x0160:0x0180]);\n                \n                label_035E:\n                    memory[0x02e0:0x0300] = var0;\n                    memory[0x00:0x20] = memory[0x02e0:0x0300];\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else {\n                memory[0x0140:0x0160] = 0x05f5e100;\n                goto label_01CB;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 17.371602535247803,
	"usage": {
		"completion_tokens": 316,
		"prompt_tokens": 4978,
		"total_tokens": 5294
	}
}