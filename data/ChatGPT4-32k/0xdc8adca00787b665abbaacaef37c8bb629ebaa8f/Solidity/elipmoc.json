{
	"address": "0xdc8adca00787b665abbaacaef37c8bb629ebaa8f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract that encapsulates the functionality of the decompiled code:\n\n```Solidity\npragma solidity >=0.7.0 <0.9.0;\n\ncontract VotingContract {\n    address private _ceoAddress;\n    mapping (uint8 => uint256) private votes;\n\n    constructor() {\n        _ceoAddress = msg.sender;\n    }\n\n    function getVotes() public view returns (uint256[8] memory) {\n        uint256[8] memory votesArray;\n        for(uint8 i = 0; i < 8; i++) {\n            votesArray[i] = votes[i];\n        }\n        return votesArray;\n    }\n\n    function setCEO(address newCEO) public {\n        require(msg.sender == _ceoAddress, \"Only the current CEO can set new CEO\");\n        require(newCEO != address(0), \"New CEO address cannot be 0\");\n        _ceoAddress = newCEO;\n    }\n\n    function buyVotes(uint8 voteIndex) public payable {\n        require(msg.value >= 1 ether, \"Minimum 1 ether required to buy votes\");\n        require(voteIndex >= 0 && voteIndex < 8, \"Vote index must be between 0 and 7\");\n        votes[voteIndex] += msg.value / 1 ether;\n    }\n\n    function voteCounts(uint8 voteIndex) public view returns (uint256) {\n        require(voteIndex < 8, \"Vote index must be between 0 and 7\");\n        return votes[voteIndex];\n    }\n\n    function voteCost() public pure returns (uint256) {\n        return 1 ether;\n    }\n\n    function schoolOrdering() public pure returns (string memory) {\n        return \"vardPennPrincetonYaleBrownColumbiaCornellDartmouthHar\";\n    }\n\n    function NAME() public pure returns (string memory) {\n        return \"TopIvy\";\n    }\n\n    function ceoAddress() public view returns (address) {\n        return _ceoAddress;\n    }\n\n    function payout(address to) public {\n        require(msg.sender == _ceoAddress, \"Only the CEO can initiate a payout\");\n        if(to != address(0)) {\n            (bool success,) = to.call{value: address(this).balance}(\"\");\n            require(success, \"Transfer failed.\");\n        } else {\n            (bool success,) = _ceoAddress.call{value: address(this).balance}(\"\");\n            require(success, \"Transfer to CEO failed.\");\n        }\n    }\n\n    fallback() external payable {\n        revert(\"This contract does not accept ether directly\");\n    }\n}\n```\n\nPlease note that the `__function_selector__` function was not included in this Solidity contract because it is not a standard Solidity function, and its use case could not be inferred from the provided decompiled code. Function selectors are automatically generated by the Solidity compiler based on the function signature, and are used internally by the EVM to call the appropriate function.",
				"role": "assistant"
			}
		}
	],
	"created": 1701460894,
	"id": "chatcmpl-8R3zaroXSkeYvK6O8ohHWhz6mkT9W",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 23:13 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _ceoAddress; // STORAGE[0x0] bytes 0 to 19\n\n\nfunction getVotes() public nonPayable { \n    v0 = v1 = MEM[64];\n    MEM[64] = v1 + 256;\n    v2 = v3 = 8;\n    do {\n        MEM[v0] = 0;\n        v0 += 32;\n        v2 = v2 - 1;\n    } while (!v2);\n    v4 = v5 = 1;\n    v6 = v7 = MEM[64];\n    MEM[64] = v7 + 256;\n    if (8) {\n        do {\n            MEM[v6] = STORAGE[v4];\n            v6 += 32;\n            v4 += 1;\n        } while (v7 + 256 <= v6);\n    }\n    v8 = v9 = 0;\n    while (v8 < 256) {\n        MEM[MEM[64] + v8] = MEM[v7 + v8];\n        v8 = v8 + 32;\n    }\n    return MEM[(MEM[64]) len 256];\n}\n\nfunction setCEO(address varg0) public nonPayable { \n    require(msg.sender == _ceoAddress);\n    require(varg0 != 0);\n    _ceoAddress = varg0;\n}\n\nfunction buyVotes(uint8 varg0) public payable { \n    require(msg.value >= 0x38d7ea4c68000);\n    v0 = v1 = 0xff & (0xff & varg0) >= 0;\n    if (v1) {\n        v0 = v2 = 0xff & (0xff & varg0) <= 7;\n    }\n    require(v0);\n    assert(0xff & (0xff & varg0) < 8);\n    STORAGE[(0xff & (0xff & varg0)) + 1] = STORAGE[(0xff & (0xff & varg0)) + 1] + msg.value / 0x38d7ea4c68000;\n}\n\nfunction voteCounts(uint256 varg0) public nonPayable { \n    assert(varg0 < 8);\n    return STORAGE[varg0 + 1];\n}\n\nfunction voteCost() public nonPayable { \n    return 0x38d7ea4c68000;\n}\n\nfunction schoolOrdering() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (21) {\n        MEM[v5 - 21] = ~0xffffffffffffffffffffff & 'vardPennPrincetonYale';\n    }\n    return v0, v6, 'BrownColumbiaCornellDartmouthHar';\n}\n\nfunction NAME() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (6) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & 'TopIvy';\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction ceoAddress() public nonPayable { \n    return _ceoAddress;\n}\n\nfunction payout(address varg0) public nonPayable { \n    require(msg.sender == _ceoAddress);\n    if (varg0 != 0) {\n        v0 = varg0.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v0);\n    } else {\n        v1 = _ceoAddress.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v1);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0xa0f8168 == function_selector) {\n            ceoAddress();\n        } else if (0xb7e9c44 == function_selector) {\n            payout(address);\n        } else if (0xdc96015 == function_selector) {\n            getVotes();\n        } else if (0x27d7874c == function_selector) {\n            setCEO(address);\n        } else if (0x2f274d91 == function_selector) {\n            buyVotes(uint8);\n        } else if (0x3c3a220d == function_selector) {\n            voteCounts(uint256);\n        } else if (0x4c1b8ffd == function_selector) {\n            voteCost();\n        } else if (0x6d88885e == function_selector) {\n            schoolOrdering();\n        } else if (0xa3f4df7e == function_selector) {\n            NAME();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 23:13 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _ceoAddress; // STORAGE[0x0] bytes 0 to 19\n\n\nfunction getVotes() public nonPayable { \n    v0 = v1 = MEM[64];\n    MEM[64] = v1 + 256;\n    v2 = v3 = 8;\n    do {\n        MEM[v0] = 0;\n        v0 += 32;\n        v2 = v2 - 1;\n    } while (!v2);\n    v4 = v5 = 1;\n    v6 = v7 = MEM[64];\n    MEM[64] = v7 + 256;\n    if (8) {\n        do {\n            MEM[v6] = STORAGE[v4];\n            v6 += 32;\n            v4 += 1;\n        } while (v7 + 256 <= v6);\n    }\n    v8 = v9 = 0;\n    while (v8 < 256) {\n        MEM[MEM[64] + v8] = MEM[v7 + v8];\n        v8 = v8 + 32;\n    }\n    return MEM[(MEM[64]) len 256];\n}\n\nfunction setCEO(address varg0) public nonPayable { \n    require(msg.sender == _ceoAddress);\n    require(varg0 != 0);\n    _ceoAddress = varg0;\n}\n\nfunction buyVotes(uint8 varg0) public payable { \n    require(msg.value >= 0x38d7ea4c68000);\n    v0 = v1 = 0xff & (0xff & varg0) >= 0;\n    if (v1) {\n        v0 = v2 = 0xff & (0xff & varg0) <= 7;\n    }\n    require(v0);\n    assert(0xff & (0xff & varg0) < 8);\n    STORAGE[(0xff & (0xff & varg0)) + 1] = STORAGE[(0xff & (0xff & varg0)) + 1] + msg.value / 0x38d7ea4c68000;\n}\n\nfunction voteCounts(uint256 varg0) public nonPayable { \n    assert(varg0 < 8);\n    return STORAGE[varg0 + 1];\n}\n\nfunction voteCost() public nonPayable { \n    return 0x38d7ea4c68000;\n}\n\nfunction schoolOrdering() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (21) {\n        MEM[v5 - 21] = ~0xffffffffffffffffffffff & 'vardPennPrincetonYale';\n    }\n    return v0, v6, 'BrownColumbiaCornellDartmouthHar';\n}\n\nfunction NAME() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (6) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & 'TopIvy';\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction ceoAddress() public nonPayable { \n    return _ceoAddress;\n}\n\nfunction payout(address varg0) public nonPayable { \n    require(msg.sender == _ceoAddress);\n    if (varg0 != 0) {\n        v0 = varg0.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v0);\n    } else {\n        v1 = _ceoAddress.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v1);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0xa0f8168 == function_selector) {\n            ceoAddress();\n        } else if (0xb7e9c44 == function_selector) {\n            payout(address);\n        } else if (0xdc96015 == function_selector) {\n            getVotes();\n        } else if (0x27d7874c == function_selector) {\n            setCEO(address);\n        } else if (0x2f274d91 == function_selector) {\n            buyVotes(uint8);\n        } else if (0x3c3a220d == function_selector) {\n            voteCounts(uint256);\n        } else if (0x4c1b8ffd == function_selector) {\n            voteCost();\n        } else if (0x6d88885e == function_selector) {\n            schoolOrdering();\n        } else if (0xa3f4df7e == function_selector) {\n            NAME();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 23:13 UTC\n\n// Data structures and variables inferred from the use of storage instructions\naddress _ceoAddress; // STORAGE[0x0] bytes 0 to 19\n\n\nfunction getVotes() public nonPayable { \n    v0 = v1 = MEM[64];\n    MEM[64] = v1 + 256;\n    v2 = v3 = 8;\n    do {\n        MEM[v0] = 0;\n        v0 += 32;\n        v2 = v2 - 1;\n    } while (!v2);\n    v4 = v5 = 1;\n    v6 = v7 = MEM[64];\n    MEM[64] = v7 + 256;\n    if (8) {\n        do {\n            MEM[v6] = STORAGE[v4];\n            v6 += 32;\n            v4 += 1;\n        } while (v7 + 256 <= v6);\n    }\n    v8 = v9 = 0;\n    while (v8 < 256) {\n        MEM[MEM[64] + v8] = MEM[v7 + v8];\n        v8 = v8 + 32;\n    }\n    return MEM[(MEM[64]) len 256];\n}\n\nfunction setCEO(address varg0) public nonPayable { \n    require(msg.sender == _ceoAddress);\n    require(varg0 != 0);\n    _ceoAddress = varg0;\n}\n\nfunction buyVotes(uint8 varg0) public payable { \n    require(msg.value >= 0x38d7ea4c68000);\n    v0 = v1 = 0xff & (0xff & varg0) >= 0;\n    if (v1) {\n        v0 = v2 = 0xff & (0xff & varg0) <= 7;\n    }\n    require(v0);\n    assert(0xff & (0xff & varg0) < 8);\n    STORAGE[(0xff & (0xff & varg0)) + 1] = STORAGE[(0xff & (0xff & varg0)) + 1] + msg.value / 0x38d7ea4c68000;\n}\n\nfunction voteCounts(uint256 varg0) public nonPayable { \n    assert(varg0 < 8);\n    return STORAGE[varg0 + 1];\n}\n\nfunction voteCost() public nonPayable { \n    return 0x38d7ea4c68000;\n}\n\nfunction schoolOrdering() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (21) {\n        MEM[v5 - 21] = ~0xffffffffffffffffffffff & 'vardPennPrincetonYale';\n    }\n    return v0, v6, 'BrownColumbiaCornellDartmouthHar';\n}\n\nfunction NAME() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (6) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & 'TopIvy';\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction ceoAddress() public nonPayable { \n    return _ceoAddress;\n}\n\nfunction payout(address varg0) public nonPayable { \n    require(msg.sender == _ceoAddress);\n    if (varg0 != 0) {\n        v0 = varg0.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v0);\n    } else {\n        v1 = _ceoAddress.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v1);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0xa0f8168 == function_selector) {\n            ceoAddress();\n        } else if (0xb7e9c44 == function_selector) {\n            payout(address);\n        } else if (0xdc96015 == function_selector) {\n            getVotes();\n        } else if (0x27d7874c == function_selector) {\n            setCEO(address);\n        } else if (0x2f274d91 == function_selector) {\n            buyVotes(uint8);\n        } else if (0x3c3a220d == function_selector) {\n            voteCounts(uint256);\n        } else if (0x4c1b8ffd == function_selector) {\n            voteCost();\n        } else if (0x6d88885e == function_selector) {\n            schoolOrdering();\n        } else if (0xa3f4df7e == function_selector) {\n            NAME();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 32.00729727745056,
	"usage": {
		"completion_tokens": 611,
		"prompt_tokens": 1241,
		"total_tokens": 1852
	}
}