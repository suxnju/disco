{
	"address": "0xa85b55495a6c7fe7d41dd2494d42be2622ee20da",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity code equivalent to the provided decompiled EVM Bytecode:\n\n```solidity\npragma solidity ^0.8.7;\n\ncontract Fundraiser {\n    uint256 public _tokenBalance;\n    uint256 public _amountRaised;\n    uint256 public _deadline;\n    uint256 stor_6;\n    mapping(address => uint256) public _balanceOf;\n    address public _beneficiary;\n    uint8 stor_4_0_0;\n    ERC20 public _tokenReward;\n\n    event FundTransfer(address backer, uint amount, bool isContribution);\n\n    constructor(address tokenAddress, address beneficiary, uint256 deadline) {\n        _beneficiary = beneficiary;\n        _deadline = deadline;\n        _tokenReward = ERC20(tokenAddress);\n    }\n\n    function safeWithdrawal() public {\n        if (block.timestamp >= _deadline) {\n            bool success = payable(_beneficiary).send(_amountRaised);\n            if (success) {\n                emit FundTransfer(_beneficiary, _amountRaised, false);\n                uint256 remainingBalance = _tokenReward.balanceOf(address(this));\n                require(_tokenReward.transfer(_beneficiary, remainingBalance));\n                _tokenBalance = 0;\n            }\n        }\n    }\n\n    fallback() external payable {\n        require(block.timestamp <= _deadline);\n        _balanceOf[msg.sender] += msg.value;\n        _amountRaised += msg.value;\n\n        uint256 tokenAmount;\n        if (block.timestamp > stor_6 + 604800) {\n            require(stor_4_0_0 > 0);\n            tokenAmount = 1e18 / stor_4_0_0;\n        } else {\n            require(stor_4_0_0 > 0);\n            tokenAmount = 2e18 / stor_4_0_0;\n        }\n\n        require(tokenAmount > 0);\n        require(msg.value / tokenAmount <= _tokenBalance);\n        _tokenBalance -= msg.value / tokenAmount;\n        require(_tokenBalance >= 0);\n        require(_tokenReward.transfer(msg.sender, msg.value * 1e18 / tokenAmount));\n        emit FundTransfer(msg.sender, msg.value, true);\n    }\n}\n\ninterface ERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function code() external returns (bytes memory);\n}\n```\n\nPlease note that the conversion from EVM Bytecode to Solidity involves some assumptions and interpretations. The above Solidity code represents one possible interpretation of your provided EVM Bytecode.",
				"role": "assistant"
			}
		}
	],
	"created": 1701467266,
	"id": "chatcmpl-8R5eMawnw2IrTeKstimjMvq3LAWND",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.14 22:38 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _tokenBalance; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 stor_6; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x8]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\naddress _tokenReward; // STORAGE[0x7] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction tokenBalance() public nonPayable { \n    return _tokenBalance;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        v0 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n        if (v0) {\n            emit FundTransfer(_beneficiary, _amountRaised, 0);\n            MEM[32 + MEM[64]] = 0;\n            require(_tokenReward.code.size);\n            v1, v2 = _tokenReward.balanceOf(address(this)).gas(msg.gas - 710);\n            require(v1);\n            require(_tokenReward.code.size);\n            v3 = _tokenReward.transfer(_beneficiary, v2).gas(msg.gas - 710);\n            require(v3);\n            _tokenBalance = 0;\n        }\n    }\n}\n\nfunction fallback() public payable { \n    if (block.timestamp <= _deadline) {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n        _amountRaised = _amountRaised + msg.value;\n        if (block.timestamp > stor_6 + 0x93a80) {\n            assert(stor_4_0_0);\n            v0 = 0x29a2241af62c0000 / STORAGE[4];\n        } else {\n            assert(stor_4_0_0);\n            v0 = v1 = 0x1bc16d674ec80000 / STORAGE[4];\n        }\n        assert(v0);\n        assert(msg.value / v0 <= _tokenBalance);\n        _tokenBalance = _tokenBalance - msg.value / v0;\n        require(_tokenBalance >= 0);\n        assert(v0);\n        require(_tokenReward.code.size);\n        v2 = _tokenReward.transfer(msg.sender, msg.value * 0xde0b6b3a7640000 / v0).gas(msg.gas - 710);\n        require(v2);\n        emit FundTransfer(msg.sender, msg.value, 1);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x9e1a4d19 == function_selector) {\n            tokenBalance();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 22:38 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _tokenBalance; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 stor_6; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x8]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\naddress _tokenReward; // STORAGE[0x7] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction tokenBalance() public nonPayable { \n    return _tokenBalance;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        v0 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n        if (v0) {\n            emit FundTransfer(_beneficiary, _amountRaised, 0);\n            MEM[32 + MEM[64]] = 0;\n            require(_tokenReward.code.size);\n            v1, v2 = _tokenReward.balanceOf(address(this)).gas(msg.gas - 710);\n            require(v1);\n            require(_tokenReward.code.size);\n            v3 = _tokenReward.transfer(_beneficiary, v2).gas(msg.gas - 710);\n            require(v3);\n            _tokenBalance = 0;\n        }\n    }\n}\n\nfunction fallback() public payable { \n    if (block.timestamp <= _deadline) {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n        _amountRaised = _amountRaised + msg.value;\n        if (block.timestamp > stor_6 + 0x93a80) {\n            assert(stor_4_0_0);\n            v0 = 0x29a2241af62c0000 / STORAGE[4];\n        } else {\n            assert(stor_4_0_0);\n            v0 = v1 = 0x1bc16d674ec80000 / STORAGE[4];\n        }\n        assert(v0);\n        assert(msg.value / v0 <= _tokenBalance);\n        _tokenBalance = _tokenBalance - msg.value / v0;\n        require(_tokenBalance >= 0);\n        assert(v0);\n        require(_tokenReward.code.size);\n        v2 = _tokenReward.transfer(msg.sender, msg.value * 0xde0b6b3a7640000 / v0).gas(msg.gas - 710);\n        require(v2);\n        emit FundTransfer(msg.sender, msg.value, 1);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x9e1a4d19 == function_selector) {\n            tokenBalance();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 22:38 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _tokenBalance; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 stor_6; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x8]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\naddress _tokenReward; // STORAGE[0x7] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction tokenBalance() public nonPayable { \n    return _tokenBalance;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        v0 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n        if (v0) {\n            emit FundTransfer(_beneficiary, _amountRaised, 0);\n            MEM[32 + MEM[64]] = 0;\n            require(_tokenReward.code.size);\n            v1, v2 = _tokenReward.balanceOf(address(this)).gas(msg.gas - 710);\n            require(v1);\n            require(_tokenReward.code.size);\n            v3 = _tokenReward.transfer(_beneficiary, v2).gas(msg.gas - 710);\n            require(v3);\n            _tokenBalance = 0;\n        }\n    }\n}\n\nfunction fallback() public payable { \n    if (block.timestamp <= _deadline) {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n        _amountRaised = _amountRaised + msg.value;\n        if (block.timestamp > stor_6 + 0x93a80) {\n            assert(stor_4_0_0);\n            v0 = 0x29a2241af62c0000 / STORAGE[4];\n        } else {\n            assert(stor_4_0_0);\n            v0 = v1 = 0x1bc16d674ec80000 / STORAGE[4];\n        }\n        assert(v0);\n        assert(msg.value / v0 <= _tokenBalance);\n        _tokenBalance = _tokenBalance - msg.value / v0;\n        require(_tokenBalance >= 0);\n        assert(v0);\n        require(_tokenReward.code.size);\n        v2 = _tokenReward.transfer(msg.sender, msg.value * 0xde0b6b3a7640000 / v0).gas(msg.gas - 710);\n        require(v2);\n        emit FundTransfer(msg.sender, msg.value, 1);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x9e1a4d19 == function_selector) {\n            tokenBalance();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 46.073322057724,
	"usage": {
		"completion_tokens": 530,
		"prompt_tokens": 973,
		"total_tokens": 1503
	}
}