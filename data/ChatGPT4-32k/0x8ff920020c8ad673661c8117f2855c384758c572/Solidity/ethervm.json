{
	"address": "0x8ff920020c8ad673661c8117f2855c384758c572",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the contract code for the given decompiled code:\n\n```Solidity\npragma solidity ^0.4.0;\n\ncontract Contract {\n    uint256 constant MAX_OWNER_COUNT = 0x32;\n    mapping(address => uint256) owners;\n    mapping(uint256 => address) confirmations;\n    mapping(uint256 => Transaction) transactions;\n    mapping(uint256 => mapping(address => bool)) isOwner;\n    mapping(uint256 => mapping(address => bool)) getConfirmations;\n    \n    struct Transaction {\n        address destination;\n        uint256 value;\n        bytes data;\n        bool executed;\n    }\n\n    function addOwner(address _owner) public;\n    function removeOwner(address _owner) public;\n    function replaceOwner(address _owner, address _newOwner) public;\n    function isOwner(address _addr) public view returns (bool);\n    function executeTransaction(uint256 _transactionId) public;\n    function confirmTransaction(uint256 _transactionId) public;\n    function revokeConfirmation(uint256 _transactionId) public;\n    function getConfirmationCount(uint256 _transactionId) public view returns (uint256);\n    function getTransactionCount(bool _pending, bool _executed) public view returns (uint256);\n    function getOwners() public view returns (address[]);\n    function getConfirmations(uint256 _transactionId) public view returns (address[]);\n    function getTransactionIds(uint256 _from, uint256 _to, bool _pending, bool _executed) public view returns (uint256[] memory _transactionIds);\n    function changeRequirement(uint256 _required) public;\n    function submitTransaction(address _destination, uint256 _value, bytes memory _data) public returns (uint256 _transactionId);\n    function required() public view returns (uint256);\n    function transactionCount() public view returns (uint256);\n}\n```\n\nPlease note that this is a high level representation of the contract. Actual implementation would involve adding logic to the function bodies.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471154,
	"id": "chatcmpl-8MuW2RY40nHMqeQfqtw48pWlBty5y",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_011A:\n            var var0 = 0x016a;\n        \n            if (msg.value <= 0x00) {\n                func_0167();\n                stop();\n            } else {\n                func_0128();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x017f;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ea;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = isOwner(var2);\n            \n            label_01EA:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ea;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2 = confirmations(var2, var3);\n                goto label_01EA;\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n            \n            label_024B:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var1;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ea;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                goto label_01EA;\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                goto label_024B;\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x02da;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var3;\n                memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = !!var5;\n                memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = 0x80;\n                var temp7 = storage[var4];\n                var temp8 = (temp7 & !(temp7 & 0x01) * 0x0100 + ~0x00) / 0x02;\n                memory[temp6 + 0x80:temp6 + 0x80 + 0x20] = temp8;\n                var var7 = temp6 + 0x40;\n                var var6 = temp6;\n                var var8 = var6 + 0xa0;\n                var var10 = temp8;\n                var var9 = var4;\n            \n                if (!var10) {\n                label_0372:\n                    var temp9 = memory[0x40:0x60];\n                    return memory[temp9:temp9 + var8 - temp9];\n                } else if (0x1f < var10) {\n                    var temp10 = var8;\n                    var temp11 = temp10 + var10;\n                    var8 = temp11;\n                    memory[0x00:0x20] = var9;\n                    var temp12 = keccak256(memory[0x00:0x20]);\n                    memory[temp10:temp10 + 0x20] = storage[temp12];\n                    var9 = temp12 + 0x01;\n                    var10 = temp10 + 0x20;\n                \n                    if (var8 <= var10) { goto label_0369; }\n                \n                label_0355:\n                    var temp13 = var9;\n                    var temp14 = var10;\n                    memory[temp14:temp14 + 0x20] = storage[temp13];\n                    var9 = temp13 + 0x01;\n                    var10 = temp14 + 0x20;\n                \n                    if (var8 > var10) { goto label_0355; }\n                \n                label_0369:\n                    var temp15 = var8;\n                    var temp16 = temp15 + (var10 - temp15 & 0x1f);\n                    var10 = temp15;\n                    var8 = temp16;\n                    goto label_0372;\n                } else {\n                    var temp17 = var8;\n                    memory[temp17:temp17 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var10 = var10;\n                    var8 = temp17 + 0x20;\n                    goto label_0372;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0394;\n                var2 = 0x0c00;\n                var2 = getOwners();\n                var temp18 = storage[0x03];\n                var temp19 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp19 + temp18 * 0x20 + 0x20;\n                var3 = temp19;\n                var4 = 0x03;\n                var5 = temp18;\n                memory[var3:var3 + 0x20] = var5;\n                var6 = var3 + 0x20;\n                var7 = var4;\n                var8 = storage[var7];\n            \n                if (!var8) {\n                label_0C56:\n                    var2 = var3;\n                    var1 = var2;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var temp20 = var6;\n                    var temp21 = temp20 + var8 * 0x20;\n                    var6 = temp21;\n                    memory[0x00:0x20] = var7;\n                    var temp22 = keccak256(memory[0x00:0x20]);\n                    memory[temp20:temp20 + 0x20] = storage[temp22] & 0x02 ** 0xa0 - 0x01;\n                    var7 = temp22 + 0x01;\n                    var8 = temp20 + 0x20;\n                \n                    if (var6 <= var8) { goto label_0C56; }\n                \n                label_0C38:\n                    var temp23 = var7;\n                    var temp24 = var8;\n                    memory[temp24:temp24 + 0x20] = storage[temp23] & 0x02 ** 0xa0 - 0x01;\n                    var7 = temp23 + 0x01;\n                    var8 = temp24 + 0x20;\n                \n                    if (var6 > var8) { goto label_0C38; }\n                    else { goto label_0C56; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0394;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n            \n            label_0394:\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = 0x20;\n                var temp26 = var1;\n                memory[temp25 + 0x20:temp25 + 0x20 + 0x20] = memory[temp26:temp26 + 0x20];\n                var2 = temp25;\n                var3 = var2;\n                var4 = var3 + 0x40;\n                var5 = temp26 + 0x20;\n                var6 = memory[temp26:temp26 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n            \n                if (!var7) {\n                label_03DC:\n                    var temp27 = memory[0x40:0x60];\n                    return memory[temp27:temp27 + (var6 + var4) - temp27];\n                } else {\n                label_03BC:\n                    memory[var8:var8 + 0x20] = memory[var9:var9 + 0x20];\n                \n                    if (var7 <= 0x20) { goto label_03DC; }\n                \n                    var7 = var7 + ~0x1f;\n                    var8 = var8 + 0x20;\n                    var9 = var9 + 0x20;\n                    goto label_03BC;\n                }\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0394;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                goto label_0394;\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = transactionCount();\n                goto label_024B;\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { assert(); }\n            \n                var temp28 = memory[0x40:0x60];\n                var temp29 = msg.data[0x44:0x64];\n                var temp30 = msg.data[temp29 + 0x04:temp29 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp28 + (temp30 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp28:temp28 + 0x20] = temp30;\n                var1 = 0x024b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                memory[temp28 + 0x20:temp28 + 0x20 + temp30] = msg.data[temp29 + 0x24:temp29 + 0x24 + temp30];\n                var4 = temp28;\n                var5 = 0x00;\n                var6 = 0x10af;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var10 = 0x00;\n                var var11 = var7;\n            \n                if (!(var11 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = storage[0x05];\n                var temp32 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp32 + 0x80;\n                var temp33 = 0x02 ** 0xa0 - 0x01;\n                memory[temp32:temp32 + 0x20] = temp33 & var7;\n                var temp34 = temp32 + 0x20;\n                memory[temp34:temp34 + 0x20] = var8;\n                var temp35 = temp32 + 0x40;\n                memory[temp35:temp35 + 0x20] = var9;\n                memory[temp32 + 0x60:temp32 + 0x60 + 0x20] = 0x00;\n                memory[0x00:0x20] = temp31;\n                memory[0x20:0x40] = 0x00;\n                var temp36 = keccak256(memory[0x00:0x40]);\n                storage[temp36] = (temp33 & memory[temp32:temp32 + 0x20]) | (storage[temp36] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                storage[temp36 + 0x01] = memory[temp34:temp34 + 0x20];\n                var temp37 = memory[temp35:temp35 + 0x20];\n                var10 = temp31;\n                var var12 = temp32;\n                var var13 = temp36;\n                var var14 = 0x148a;\n                var var15 = var13 + 0x02;\n                var var17 = memory[temp37:temp37 + 0x20];\n                var var16 = temp37 + 0x20;\n                var temp38 = var15;\n                var temp39 = storage[temp38];\n                memory[0x00:0x20] = temp38;\n                var var18 = keccak256(memory[0x00:0x20]);\n                var temp40 = var16;\n                var16 = var18 + ((!(temp39 & 0x01) * 0x0100 - 0x01 & temp39) / 0x02 + 0x1f) / 0x20;\n                var var19 = temp40;\n            \n                if (0x1f < var17) {\n                    var temp41 = var17;\n                    storage[var15] = temp41 + temp41 + 0x01;\n                \n                    if (!temp41) {\n                    label_15CA:\n                        var temp42 = var16;\n                        var16 = 0x15d7;\n                        var17 = temp42;\n                        var16 = func_15DB(var17, var18);\n                        var14 = func_15D7(var15, var16);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp43 = var17;\n                        var temp44 = var19;\n                        var17 = temp44;\n                        var19 = var17 + temp43;\n                    \n                        if (var19 <= var17) { goto label_15CA; }\n                    \n                    label_15B8:\n                        var temp45 = var17;\n                        var temp46 = var18;\n                        storage[temp46] = memory[temp45:temp45 + 0x20];\n                        var17 = temp45 + 0x20;\n                        var19 = var19;\n                        var18 = temp46 + 0x01;\n                    \n                        if (var19 <= var17) { goto label_15CA; }\n                        else { goto label_15B8; }\n                    }\n                } else {\n                    var temp47 = var17;\n                    storage[var15] = temp47 + temp47 | (memory[var19:var19 + 0x20] & ~0xff);\n                    goto label_15CA;\n                }\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = MAX_OWNER_COUNT();\n                goto label_024B;\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = required();\n                goto label_024B;\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var temp48 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp48 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp48;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_011A; }\n        }\n    }\n    \n    function func_0128() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n    }\n    \n    function func_0167() {}\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xff;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] + ~0x00) {\n        label_0790:\n            var var2 = storage[0x03] + ~0x00;\n            var var3 = 0x07a3;\n            var var4 = 0x03;\n            var var5 = var2;\n            func_14E4(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_07BC:\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n                var3 = storage[0x03];\n                var2 = 0x07bc;\n                changeRequirement(var3);\n                goto label_07BC;\n            }\n        } else {\n        label_06C7:\n            var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var2) {\n                var1 = var1;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] + ~0x00) { goto label_0790; }\n                else { goto label_06C7; }\n            } else {\n                var2 = 0x03;\n                var temp1 = storage[var2];\n                var3 = temp1 + ~0x00;\n            \n                if (var3 >= temp1) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[var3 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = var4 + keccak256(memory[0x00:0x20]);\n                storage[temp2] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp2] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_0790;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg0;\n        var var2 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var3 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x05]) {\n        label_0972:\n            return var0;\n        } else {\n        label_091A:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_095C; }\n                else { goto label_093E; }\n            } else if (var2) {\n            label_095C:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_090F:\n                \n                    if (var1 >= storage[0x05]) { goto label_0972; }\n                    else { goto label_091A; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_090F;\n                }\n            } else {\n            label_093E:\n                var2 = arg1;\n            \n                if (!var2) { goto label_095C; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_095C;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var0 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_09FE; }\n            else { goto label_09FB; }\n        } else if (var4) {\n        label_09FE:\n        \n            if (var4) {\n            label_0A07:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0A12:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var var5 = storage[0x03];\n                var4 = 0x03;\n                var var6 = var5 + 0x01;\n                var var7 = 0x0a4a;\n                var var8 = var4;\n                var var9 = var6;\n                func_14E4(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = arg0 & temp2;\n                storage[temp1] = (storage[temp1] & ~temp2) | temp3;\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_0A04:\n            \n                if (var2) { goto label_0A12; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_09FB:\n            var4 = !var3;\n        \n            if (var4) { goto label_0A07; }\n            else { goto label_0A04; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x03]) {\n        label_0B3D:\n            return var0;\n        } else {\n        label_0AC1:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var5 = 0x03;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff) {\n                var temp1 = var1 + 0x01;\n                var1 = temp1;\n            \n                if (var1 != storage[0x04]) { goto label_0B34; }\n                else { goto label_0B2C; }\n            } else if (var1 != storage[0x04]) {\n            label_0B34:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_0B3D; }\n                else { goto label_0AC1; }\n            } else {\n            label_0B2C:\n                var0 = 0x01;\n                goto label_0B3D;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x03]) {\n        label_0BBD:\n            return var0;\n        } else {\n        label_0B54:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var4 = 0x03;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_0B49:\n            \n                if (var1 >= storage[0x03]) { goto label_0BBD; }\n                else { goto label_0B54; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_0B49;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x0c69;\n        var0 = getOwners();\n        var var1 = 0x0c71;\n        var1 = getOwners();\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_0D1F:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var4;\n                    var temp3 = var5;\n                    memory[temp3:temp3 + 0x20] = temp2;\n                    memory[0x40:0x60] = temp3 + temp2 * 0x20 + 0x20;\n                    var0 = temp3;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_0D8A:\n                        return var0;\n                    } else {\n                    label_0D50:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_0D8A; }\n                        else { goto label_0D50; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_0D8A; }\n                    else { goto label_0D50; }\n                }\n            } else {\n            label_0CAD:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_0CEF; }\n                    else { goto label_0CD1; }\n                } else if (var4) {\n                label_0CEF:\n                \n                    if (!var4) {\n                    label_0D16:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_0D1F; }\n                        else { goto label_0CAD; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3;\n                        var2 = var2 + 0x01;\n                        goto label_0D16;\n                    }\n                } else {\n                label_0CD1:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_0CEF; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_0CEF;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_0D1F; }\n            else { goto label_0CAD; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x0d9e;\n        var0 = getOwners();\n        var var1 = 0x0da6;\n        var1 = getOwners();\n        var var4 = storage[0x03];\n        var var2 = 0x00;\n        var var3 = var2;\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_0EA0:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_0F15:\n                        return var0;\n                    } else {\n                    label_0ED0:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_0F15; }\n                        else { goto label_0ED0; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_0F15; }\n                    else { goto label_0ED0; }\n                }\n            } else {\n            label_0DE3:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var6 = 0x03;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x40])] & 0xff)) {\n                label_0E97:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_0EA0; }\n                    else { goto label_0DE3; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                    var3 = var3;\n                    var2 = var2 + 0x01;\n                    goto label_0E97;\n                }\n            }\n        } else {\n            var temp7 = MSIZE();\n            var temp8 = var4;\n            memory[temp7:temp7 + 0x20] = temp8;\n            memory[0x40:0x60] = temp7 + temp8 * 0x20 + 0x20;\n            var1 = temp7;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_0EA0; }\n            else { goto label_0DE3; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_0F60; }\n            else { goto label_0F5D; }\n        } else if (var2) {\n        label_0F60:\n        \n            if (var2) {\n            label_0F69:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_0F74:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_0F66:\n            \n                if (var0) { goto label_0F74; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0F5D:\n            var2 = !var1;\n        \n            if (var2) { goto label_0F69; }\n            else { goto label_0F66; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var2 = arg0;\n        var var3 = msg.sender;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x08cc;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var2 = arg1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_11EB:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = ~0xff;\n            storage[temp2] = temp3 & storage[temp2];\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & temp0;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = (temp3 & storage[temp5]) | 0x01;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n        label_1153:\n            var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var3) {\n                var2 = var2;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_11EB; }\n                else { goto label_1153; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp6 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp6] = (var3 & 0x02 ** 0xa0 - 0x01) | (storage[temp6] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_11EB;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = var0;\n        var var1 = arg0;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x12b4;\n        var var3 = arg0;\n        var2 = isConfirmed(var3);\n    \n        if (!var2) {\n        label_07F2:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x00;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = temp0 + 0x03;\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x01;\n            var temp2 = storage[temp0 + 0x02];\n            var0 = temp0;\n            var2 = storage[var0] & 0x02 ** 0xa0 - 0x01;\n            var3 = storage[var0 + 0x01];\n            var var4 = temp0 + 0x02;\n            var var5 = memory[0x40:0x60];\n            var var6 = var5;\n            var var7 = var4;\n            var var8 = (temp2 & !(temp2 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        \n            if (!var8) {\n            label_1362:\n                var temp3 = memory[0x40:0x60];\n                var temp4;\n                temp4, memory[temp3:temp3 + 0x00] = address(var2).call.gas(msg.gas - 0x8796).value(var3)(memory[temp3:temp3 + var6 - temp3]);\n            \n                if (!temp4) {\n                    log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-3]]);\n                    var temp5 = var0 + 0x03;\n                    storage[temp5] = storage[temp5] & ~0xff;\n                    return;\n                } else {\n                    log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-3]]);\n                    goto label_07F2;\n                }\n            } else if (0x1f < var8) {\n                var temp6 = var6;\n                var temp7 = temp6 + var8;\n                var6 = temp7;\n                memory[0x00:0x20] = var7;\n                var temp8 = keccak256(memory[0x00:0x20]);\n                memory[temp6:temp6 + 0x20] = storage[temp8];\n                var7 = temp8 + 0x01;\n                var8 = temp6 + 0x20;\n            \n                if (var6 <= var8) { goto label_1359; }\n            \n            label_1345:\n                var temp9 = var7;\n                var temp10 = var8;\n                memory[temp10:temp10 + 0x20] = storage[temp9];\n                var7 = temp9 + 0x01;\n                var8 = temp10 + 0x20;\n            \n                if (var6 > var8) { goto label_1345; }\n            \n            label_1359:\n                var temp11 = var6;\n                var temp12 = temp11 + (var8 - temp11 & 0x1f);\n                var8 = temp11;\n                var6 = temp12;\n                goto label_1362;\n            } else {\n                var temp13 = var6;\n                memory[temp13:temp13 + 0x20] = storage[var7] / 0x0100 * 0x0100;\n                var6 = temp13 + 0x20;\n                var8 = var8;\n                goto label_1362;\n            }\n        }\n    }\n    \n    function func_14E4(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_07F2:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x07f2;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_15DB(var1, var2);\n            goto label_07F2;\n        }\n    }\n    \n    function getOwners() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_15D7(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_15DB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x0c5e;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_15D7(arg1, var0); }\n    \n    label_15EA:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_15EA; }\n    \n        arg0 = func_15D7(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_011A:\n            var var0 = 0x016a;\n        \n            if (msg.value <= 0x00) {\n                func_0167();\n                stop();\n            } else {\n                func_0128();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x017f;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ea;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = isOwner(var2);\n            \n            label_01EA:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ea;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2 = confirmations(var2, var3);\n                goto label_01EA;\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n            \n            label_024B:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var1;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ea;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                goto label_01EA;\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                goto label_024B;\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x02da;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var3;\n                memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = !!var5;\n                memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = 0x80;\n                var temp7 = storage[var4];\n                var temp8 = (temp7 & !(temp7 & 0x01) * 0x0100 + ~0x00) / 0x02;\n                memory[temp6 + 0x80:temp6 + 0x80 + 0x20] = temp8;\n                var var7 = temp6 + 0x40;\n                var var6 = temp6;\n                var var8 = var6 + 0xa0;\n                var var10 = temp8;\n                var var9 = var4;\n            \n                if (!var10) {\n                label_0372:\n                    var temp9 = memory[0x40:0x60];\n                    return memory[temp9:temp9 + var8 - temp9];\n                } else if (0x1f < var10) {\n                    var temp10 = var8;\n                    var temp11 = temp10 + var10;\n                    var8 = temp11;\n                    memory[0x00:0x20] = var9;\n                    var temp12 = keccak256(memory[0x00:0x20]);\n                    memory[temp10:temp10 + 0x20] = storage[temp12];\n                    var9 = temp12 + 0x01;\n                    var10 = temp10 + 0x20;\n                \n                    if (var8 <= var10) { goto label_0369; }\n                \n                label_0355:\n                    var temp13 = var9;\n                    var temp14 = var10;\n                    memory[temp14:temp14 + 0x20] = storage[temp13];\n                    var9 = temp13 + 0x01;\n                    var10 = temp14 + 0x20;\n                \n                    if (var8 > var10) { goto label_0355; }\n                \n                label_0369:\n                    var temp15 = var8;\n                    var temp16 = temp15 + (var10 - temp15 & 0x1f);\n                    var10 = temp15;\n                    var8 = temp16;\n                    goto label_0372;\n                } else {\n                    var temp17 = var8;\n                    memory[temp17:temp17 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var10 = var10;\n                    var8 = temp17 + 0x20;\n                    goto label_0372;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0394;\n                var2 = 0x0c00;\n                var2 = getOwners();\n                var temp18 = storage[0x03];\n                var temp19 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp19 + temp18 * 0x20 + 0x20;\n                var3 = temp19;\n                var4 = 0x03;\n                var5 = temp18;\n                memory[var3:var3 + 0x20] = var5;\n                var6 = var3 + 0x20;\n                var7 = var4;\n                var8 = storage[var7];\n            \n                if (!var8) {\n                label_0C56:\n                    var2 = var3;\n                    var1 = var2;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var temp20 = var6;\n                    var temp21 = temp20 + var8 * 0x20;\n                    var6 = temp21;\n                    memory[0x00:0x20] = var7;\n                    var temp22 = keccak256(memory[0x00:0x20]);\n                    memory[temp20:temp20 + 0x20] = storage[temp22] & 0x02 ** 0xa0 - 0x01;\n                    var7 = temp22 + 0x01;\n                    var8 = temp20 + 0x20;\n                \n                    if (var6 <= var8) { goto label_0C56; }\n                \n                label_0C38:\n                    var temp23 = var7;\n                    var temp24 = var8;\n                    memory[temp24:temp24 + 0x20] = storage[temp23] & 0x02 ** 0xa0 - 0x01;\n                    var7 = temp23 + 0x01;\n                    var8 = temp24 + 0x20;\n                \n                    if (var6 > var8) { goto label_0C38; }\n                    else { goto label_0C56; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0394;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n            \n            label_0394:\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = 0x20;\n                var temp26 = var1;\n                memory[temp25 + 0x20:temp25 + 0x20 + 0x20] = memory[temp26:temp26 + 0x20];\n                var2 = temp25;\n                var3 = var2;\n                var4 = var3 + 0x40;\n                var5 = temp26 + 0x20;\n                var6 = memory[temp26:temp26 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n            \n                if (!var7) {\n                label_03DC:\n                    var temp27 = memory[0x40:0x60];\n                    return memory[temp27:temp27 + (var6 + var4) - temp27];\n                } else {\n                label_03BC:\n                    memory[var8:var8 + 0x20] = memory[var9:var9 + 0x20];\n                \n                    if (var7 <= 0x20) { goto label_03DC; }\n                \n                    var7 = var7 + ~0x1f;\n                    var8 = var8 + 0x20;\n                    var9 = var9 + 0x20;\n                    goto label_03BC;\n                }\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0394;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                goto label_0394;\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = transactionCount();\n                goto label_024B;\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { assert(); }\n            \n                var temp28 = memory[0x40:0x60];\n                var temp29 = msg.data[0x44:0x64];\n                var temp30 = msg.data[temp29 + 0x04:temp29 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp28 + (temp30 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp28:temp28 + 0x20] = temp30;\n                var1 = 0x024b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                memory[temp28 + 0x20:temp28 + 0x20 + temp30] = msg.data[temp29 + 0x24:temp29 + 0x24 + temp30];\n                var4 = temp28;\n                var5 = 0x00;\n                var6 = 0x10af;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var10 = 0x00;\n                var var11 = var7;\n            \n                if (!(var11 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = storage[0x05];\n                var temp32 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp32 + 0x80;\n                var temp33 = 0x02 ** 0xa0 - 0x01;\n                memory[temp32:temp32 + 0x20] = temp33 & var7;\n                var temp34 = temp32 + 0x20;\n                memory[temp34:temp34 + 0x20] = var8;\n                var temp35 = temp32 + 0x40;\n                memory[temp35:temp35 + 0x20] = var9;\n                memory[temp32 + 0x60:temp32 + 0x60 + 0x20] = 0x00;\n                memory[0x00:0x20] = temp31;\n                memory[0x20:0x40] = 0x00;\n                var temp36 = keccak256(memory[0x00:0x40]);\n                storage[temp36] = (temp33 & memory[temp32:temp32 + 0x20]) | (storage[temp36] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                storage[temp36 + 0x01] = memory[temp34:temp34 + 0x20];\n                var temp37 = memory[temp35:temp35 + 0x20];\n                var10 = temp31;\n                var var12 = temp32;\n                var var13 = temp36;\n                var var14 = 0x148a;\n                var var15 = var13 + 0x02;\n                var var17 = memory[temp37:temp37 + 0x20];\n                var var16 = temp37 + 0x20;\n                var temp38 = var15;\n                var temp39 = storage[temp38];\n                memory[0x00:0x20] = temp38;\n                var var18 = keccak256(memory[0x00:0x20]);\n                var temp40 = var16;\n                var16 = var18 + ((!(temp39 & 0x01) * 0x0100 - 0x01 & temp39) / 0x02 + 0x1f) / 0x20;\n                var var19 = temp40;\n            \n                if (0x1f < var17) {\n                    var temp41 = var17;\n                    storage[var15] = temp41 + temp41 + 0x01;\n                \n                    if (!temp41) {\n                    label_15CA:\n                        var temp42 = var16;\n                        var16 = 0x15d7;\n                        var17 = temp42;\n                        var16 = func_15DB(var17, var18);\n                        var14 = func_15D7(var15, var16);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp43 = var17;\n                        var temp44 = var19;\n                        var17 = temp44;\n                        var19 = var17 + temp43;\n                    \n                        if (var19 <= var17) { goto label_15CA; }\n                    \n                    label_15B8:\n                        var temp45 = var17;\n                        var temp46 = var18;\n                        storage[temp46] = memory[temp45:temp45 + 0x20];\n                        var17 = temp45 + 0x20;\n                        var19 = var19;\n                        var18 = temp46 + 0x01;\n                    \n                        if (var19 <= var17) { goto label_15CA; }\n                        else { goto label_15B8; }\n                    }\n                } else {\n                    var temp47 = var17;\n                    storage[var15] = temp47 + temp47 | (memory[var19:var19 + 0x20] & ~0xff);\n                    goto label_15CA;\n                }\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = MAX_OWNER_COUNT();\n                goto label_024B;\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = required();\n                goto label_024B;\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var temp48 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp48 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp48;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_011A; }\n        }\n    }\n    \n    function func_0128() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n    }\n    \n    function func_0167() {}\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xff;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] + ~0x00) {\n        label_0790:\n            var var2 = storage[0x03] + ~0x00;\n            var var3 = 0x07a3;\n            var var4 = 0x03;\n            var var5 = var2;\n            func_14E4(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_07BC:\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n                var3 = storage[0x03];\n                var2 = 0x07bc;\n                changeRequirement(var3);\n                goto label_07BC;\n            }\n        } else {\n        label_06C7:\n            var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var2) {\n                var1 = var1;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] + ~0x00) { goto label_0790; }\n                else { goto label_06C7; }\n            } else {\n                var2 = 0x03;\n                var temp1 = storage[var2];\n                var3 = temp1 + ~0x00;\n            \n                if (var3 >= temp1) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[var3 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = var4 + keccak256(memory[0x00:0x20]);\n                storage[temp2] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp2] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_0790;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg0;\n        var var2 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var3 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x05]) {\n        label_0972:\n            return var0;\n        } else {\n        label_091A:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_095C; }\n                else { goto label_093E; }\n            } else if (var2) {\n            label_095C:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_090F:\n                \n                    if (var1 >= storage[0x05]) { goto label_0972; }\n                    else { goto label_091A; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_090F;\n                }\n            } else {\n            label_093E:\n                var2 = arg1;\n            \n                if (!var2) { goto label_095C; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_095C;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var0 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_09FE; }\n            else { goto label_09FB; }\n        } else if (var4) {\n        label_09FE:\n        \n            if (var4) {\n            label_0A07:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0A12:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var var5 = storage[0x03];\n                var4 = 0x03;\n                var var6 = var5 + 0x01;\n                var var7 = 0x0a4a;\n                var var8 = var4;\n                var var9 = var6;\n                func_14E4(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = arg0 & temp2;\n                storage[temp1] = (storage[temp1] & ~temp2) | temp3;\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_0A04:\n            \n                if (var2) { goto label_0A12; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_09FB:\n            var4 = !var3;\n        \n            if (var4) { goto label_0A07; }\n            else { goto label_0A04; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x03]) {\n        label_0B3D:\n            return var0;\n        } else {\n        label_0AC1:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var5 = 0x03;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff) {\n                var temp1 = var1 + 0x01;\n                var1 = temp1;\n            \n                if (var1 != storage[0x04]) { goto label_0B34; }\n                else { goto label_0B2C; }\n            } else if (var1 != storage[0x04]) {\n            label_0B34:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_0B3D; }\n                else { goto label_0AC1; }\n            } else {\n            label_0B2C:\n                var0 = 0x01;\n                goto label_0B3D;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x03]) {\n        label_0BBD:\n            return var0;\n        } else {\n        label_0B54:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var4 = 0x03;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_0B49:\n            \n                if (var1 >= storage[0x03]) { goto label_0BBD; }\n                else { goto label_0B54; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_0B49;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x0c69;\n        var0 = getOwners();\n        var var1 = 0x0c71;\n        var1 = getOwners();\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_0D1F:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var4;\n                    var temp3 = var5;\n                    memory[temp3:temp3 + 0x20] = temp2;\n                    memory[0x40:0x60] = temp3 + temp2 * 0x20 + 0x20;\n                    var0 = temp3;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_0D8A:\n                        return var0;\n                    } else {\n                    label_0D50:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_0D8A; }\n                        else { goto label_0D50; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_0D8A; }\n                    else { goto label_0D50; }\n                }\n            } else {\n            label_0CAD:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_0CEF; }\n                    else { goto label_0CD1; }\n                } else if (var4) {\n                label_0CEF:\n                \n                    if (!var4) {\n                    label_0D16:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_0D1F; }\n                        else { goto label_0CAD; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3;\n                        var2 = var2 + 0x01;\n                        goto label_0D16;\n                    }\n                } else {\n                label_0CD1:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_0CEF; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_0CEF;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_0D1F; }\n            else { goto label_0CAD; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x0d9e;\n        var0 = getOwners();\n        var var1 = 0x0da6;\n        var1 = getOwners();\n        var var4 = storage[0x03];\n        var var2 = 0x00;\n        var var3 = var2;\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_0EA0:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_0F15:\n                        return var0;\n                    } else {\n                    label_0ED0:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_0F15; }\n                        else { goto label_0ED0; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_0F15; }\n                    else { goto label_0ED0; }\n                }\n            } else {\n            label_0DE3:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var6 = 0x03;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x40])] & 0xff)) {\n                label_0E97:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_0EA0; }\n                    else { goto label_0DE3; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                    var3 = var3;\n                    var2 = var2 + 0x01;\n                    goto label_0E97;\n                }\n            }\n        } else {\n            var temp7 = MSIZE();\n            var temp8 = var4;\n            memory[temp7:temp7 + 0x20] = temp8;\n            memory[0x40:0x60] = temp7 + temp8 * 0x20 + 0x20;\n            var1 = temp7;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_0EA0; }\n            else { goto label_0DE3; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_0F60; }\n            else { goto label_0F5D; }\n        } else if (var2) {\n        label_0F60:\n        \n            if (var2) {\n            label_0F69:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_0F74:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_0F66:\n            \n                if (var0) { goto label_0F74; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0F5D:\n            var2 = !var1;\n        \n            if (var2) { goto label_0F69; }\n            else { goto label_0F66; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var2 = arg0;\n        var var3 = msg.sender;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x08cc;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var2 = arg1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_11EB:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = ~0xff;\n            storage[temp2] = temp3 & storage[temp2];\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & temp0;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = (temp3 & storage[temp5]) | 0x01;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n        label_1153:\n            var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var3) {\n                var2 = var2;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_11EB; }\n                else { goto label_1153; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp6 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp6] = (var3 & 0x02 ** 0xa0 - 0x01) | (storage[temp6] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_11EB;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = var0;\n        var var1 = arg0;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x12b4;\n        var var3 = arg0;\n        var2 = isConfirmed(var3);\n    \n        if (!var2) {\n        label_07F2:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x00;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = temp0 + 0x03;\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x01;\n            var temp2 = storage[temp0 + 0x02];\n            var0 = temp0;\n            var2 = storage[var0] & 0x02 ** 0xa0 - 0x01;\n            var3 = storage[var0 + 0x01];\n            var var4 = temp0 + 0x02;\n            var var5 = memory[0x40:0x60];\n            var var6 = var5;\n            var var7 = var4;\n            var var8 = (temp2 & !(temp2 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        \n            if (!var8) {\n            label_1362:\n                var temp3 = memory[0x40:0x60];\n                var temp4;\n                temp4, memory[temp3:temp3 + 0x00] = address(var2).call.gas(msg.gas - 0x8796).value(var3)(memory[temp3:temp3 + var6 - temp3]);\n            \n                if (!temp4) {\n                    log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-3]]);\n                    var temp5 = var0 + 0x03;\n                    storage[temp5] = storage[temp5] & ~0xff;\n                    return;\n                } else {\n                    log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-3]]);\n                    goto label_07F2;\n                }\n            } else if (0x1f < var8) {\n                var temp6 = var6;\n                var temp7 = temp6 + var8;\n                var6 = temp7;\n                memory[0x00:0x20] = var7;\n                var temp8 = keccak256(memory[0x00:0x20]);\n                memory[temp6:temp6 + 0x20] = storage[temp8];\n                var7 = temp8 + 0x01;\n                var8 = temp6 + 0x20;\n            \n                if (var6 <= var8) { goto label_1359; }\n            \n            label_1345:\n                var temp9 = var7;\n                var temp10 = var8;\n                memory[temp10:temp10 + 0x20] = storage[temp9];\n                var7 = temp9 + 0x01;\n                var8 = temp10 + 0x20;\n            \n                if (var6 > var8) { goto label_1345; }\n            \n            label_1359:\n                var temp11 = var6;\n                var temp12 = temp11 + (var8 - temp11 & 0x1f);\n                var8 = temp11;\n                var6 = temp12;\n                goto label_1362;\n            } else {\n                var temp13 = var6;\n                memory[temp13:temp13 + 0x20] = storage[var7] / 0x0100 * 0x0100;\n                var6 = temp13 + 0x20;\n                var8 = var8;\n                goto label_1362;\n            }\n        }\n    }\n    \n    function func_14E4(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_07F2:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x07f2;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_15DB(var1, var2);\n            goto label_07F2;\n        }\n    }\n    \n    function getOwners() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_15D7(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_15DB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x0c5e;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_15D7(arg1, var0); }\n    \n    label_15EA:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_15EA; }\n    \n        arg0 = func_15D7(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_011A:\n            var var0 = 0x016a;\n        \n            if (msg.value <= 0x00) {\n                func_0167();\n                stop();\n            } else {\n                func_0128();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x017f;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ea;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = isOwner(var2);\n            \n            label_01EA:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ea;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2 = confirmations(var2, var3);\n                goto label_01EA;\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n            \n            label_024B:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var1;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ea;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                goto label_01EA;\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                goto label_024B;\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x02da;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var3;\n                memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = !!var5;\n                memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = 0x80;\n                var temp7 = storage[var4];\n                var temp8 = (temp7 & !(temp7 & 0x01) * 0x0100 + ~0x00) / 0x02;\n                memory[temp6 + 0x80:temp6 + 0x80 + 0x20] = temp8;\n                var var7 = temp6 + 0x40;\n                var var6 = temp6;\n                var var8 = var6 + 0xa0;\n                var var10 = temp8;\n                var var9 = var4;\n            \n                if (!var10) {\n                label_0372:\n                    var temp9 = memory[0x40:0x60];\n                    return memory[temp9:temp9 + var8 - temp9];\n                } else if (0x1f < var10) {\n                    var temp10 = var8;\n                    var temp11 = temp10 + var10;\n                    var8 = temp11;\n                    memory[0x00:0x20] = var9;\n                    var temp12 = keccak256(memory[0x00:0x20]);\n                    memory[temp10:temp10 + 0x20] = storage[temp12];\n                    var9 = temp12 + 0x01;\n                    var10 = temp10 + 0x20;\n                \n                    if (var8 <= var10) { goto label_0369; }\n                \n                label_0355:\n                    var temp13 = var9;\n                    var temp14 = var10;\n                    memory[temp14:temp14 + 0x20] = storage[temp13];\n                    var9 = temp13 + 0x01;\n                    var10 = temp14 + 0x20;\n                \n                    if (var8 > var10) { goto label_0355; }\n                \n                label_0369:\n                    var temp15 = var8;\n                    var temp16 = temp15 + (var10 - temp15 & 0x1f);\n                    var10 = temp15;\n                    var8 = temp16;\n                    goto label_0372;\n                } else {\n                    var temp17 = var8;\n                    memory[temp17:temp17 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var10 = var10;\n                    var8 = temp17 + 0x20;\n                    goto label_0372;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0394;\n                var2 = 0x0c00;\n                var2 = getOwners();\n                var temp18 = storage[0x03];\n                var temp19 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp19 + temp18 * 0x20 + 0x20;\n                var3 = temp19;\n                var4 = 0x03;\n                var5 = temp18;\n                memory[var3:var3 + 0x20] = var5;\n                var6 = var3 + 0x20;\n                var7 = var4;\n                var8 = storage[var7];\n            \n                if (!var8) {\n                label_0C56:\n                    var2 = var3;\n                    var1 = var2;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var temp20 = var6;\n                    var temp21 = temp20 + var8 * 0x20;\n                    var6 = temp21;\n                    memory[0x00:0x20] = var7;\n                    var temp22 = keccak256(memory[0x00:0x20]);\n                    memory[temp20:temp20 + 0x20] = storage[temp22] & 0x02 ** 0xa0 - 0x01;\n                    var7 = temp22 + 0x01;\n                    var8 = temp20 + 0x20;\n                \n                    if (var6 <= var8) { goto label_0C56; }\n                \n                label_0C38:\n                    var temp23 = var7;\n                    var temp24 = var8;\n                    memory[temp24:temp24 + 0x20] = storage[temp23] & 0x02 ** 0xa0 - 0x01;\n                    var7 = temp23 + 0x01;\n                    var8 = temp24 + 0x20;\n                \n                    if (var6 > var8) { goto label_0C38; }\n                    else { goto label_0C56; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0394;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n            \n            label_0394:\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = 0x20;\n                var temp26 = var1;\n                memory[temp25 + 0x20:temp25 + 0x20 + 0x20] = memory[temp26:temp26 + 0x20];\n                var2 = temp25;\n                var3 = var2;\n                var4 = var3 + 0x40;\n                var5 = temp26 + 0x20;\n                var6 = memory[temp26:temp26 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n            \n                if (!var7) {\n                label_03DC:\n                    var temp27 = memory[0x40:0x60];\n                    return memory[temp27:temp27 + (var6 + var4) - temp27];\n                } else {\n                label_03BC:\n                    memory[var8:var8 + 0x20] = memory[var9:var9 + 0x20];\n                \n                    if (var7 <= 0x20) { goto label_03DC; }\n                \n                    var7 = var7 + ~0x1f;\n                    var8 = var8 + 0x20;\n                    var9 = var9 + 0x20;\n                    goto label_03BC;\n                }\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0394;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                goto label_0394;\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = transactionCount();\n                goto label_024B;\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { assert(); }\n            \n                var temp28 = memory[0x40:0x60];\n                var temp29 = msg.data[0x44:0x64];\n                var temp30 = msg.data[temp29 + 0x04:temp29 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp28 + (temp30 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp28:temp28 + 0x20] = temp30;\n                var1 = 0x024b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                memory[temp28 + 0x20:temp28 + 0x20 + temp30] = msg.data[temp29 + 0x24:temp29 + 0x24 + temp30];\n                var4 = temp28;\n                var5 = 0x00;\n                var6 = 0x10af;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var10 = 0x00;\n                var var11 = var7;\n            \n                if (!(var11 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = storage[0x05];\n                var temp32 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp32 + 0x80;\n                var temp33 = 0x02 ** 0xa0 - 0x01;\n                memory[temp32:temp32 + 0x20] = temp33 & var7;\n                var temp34 = temp32 + 0x20;\n                memory[temp34:temp34 + 0x20] = var8;\n                var temp35 = temp32 + 0x40;\n                memory[temp35:temp35 + 0x20] = var9;\n                memory[temp32 + 0x60:temp32 + 0x60 + 0x20] = 0x00;\n                memory[0x00:0x20] = temp31;\n                memory[0x20:0x40] = 0x00;\n                var temp36 = keccak256(memory[0x00:0x40]);\n                storage[temp36] = (temp33 & memory[temp32:temp32 + 0x20]) | (storage[temp36] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                storage[temp36 + 0x01] = memory[temp34:temp34 + 0x20];\n                var temp37 = memory[temp35:temp35 + 0x20];\n                var10 = temp31;\n                var var12 = temp32;\n                var var13 = temp36;\n                var var14 = 0x148a;\n                var var15 = var13 + 0x02;\n                var var17 = memory[temp37:temp37 + 0x20];\n                var var16 = temp37 + 0x20;\n                var temp38 = var15;\n                var temp39 = storage[temp38];\n                memory[0x00:0x20] = temp38;\n                var var18 = keccak256(memory[0x00:0x20]);\n                var temp40 = var16;\n                var16 = var18 + ((!(temp39 & 0x01) * 0x0100 - 0x01 & temp39) / 0x02 + 0x1f) / 0x20;\n                var var19 = temp40;\n            \n                if (0x1f < var17) {\n                    var temp41 = var17;\n                    storage[var15] = temp41 + temp41 + 0x01;\n                \n                    if (!temp41) {\n                    label_15CA:\n                        var temp42 = var16;\n                        var16 = 0x15d7;\n                        var17 = temp42;\n                        var16 = func_15DB(var17, var18);\n                        var14 = func_15D7(var15, var16);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp43 = var17;\n                        var temp44 = var19;\n                        var17 = temp44;\n                        var19 = var17 + temp43;\n                    \n                        if (var19 <= var17) { goto label_15CA; }\n                    \n                    label_15B8:\n                        var temp45 = var17;\n                        var temp46 = var18;\n                        storage[temp46] = memory[temp45:temp45 + 0x20];\n                        var17 = temp45 + 0x20;\n                        var19 = var19;\n                        var18 = temp46 + 0x01;\n                    \n                        if (var19 <= var17) { goto label_15CA; }\n                        else { goto label_15B8; }\n                    }\n                } else {\n                    var temp47 = var17;\n                    storage[var15] = temp47 + temp47 | (memory[var19:var19 + 0x20] & ~0xff);\n                    goto label_15CA;\n                }\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = MAX_OWNER_COUNT();\n                goto label_024B;\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x024b;\n                var2 = required();\n                goto label_024B;\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var temp48 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp48 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp48;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016a;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_011A; }\n        }\n    }\n    \n    function func_0128() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n    }\n    \n    function func_0167() {}\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xff;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] + ~0x00) {\n        label_0790:\n            var var2 = storage[0x03] + ~0x00;\n            var var3 = 0x07a3;\n            var var4 = 0x03;\n            var var5 = var2;\n            func_14E4(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_07BC:\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n                var3 = storage[0x03];\n                var2 = 0x07bc;\n                changeRequirement(var3);\n                goto label_07BC;\n            }\n        } else {\n        label_06C7:\n            var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var2) {\n                var1 = var1;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] + ~0x00) { goto label_0790; }\n                else { goto label_06C7; }\n            } else {\n                var2 = 0x03;\n                var temp1 = storage[var2];\n                var3 = temp1 + ~0x00;\n            \n                if (var3 >= temp1) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[var3 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = var4 + keccak256(memory[0x00:0x20]);\n                storage[temp2] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp2] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_0790;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg0;\n        var var2 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var3 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x05]) {\n        label_0972:\n            return var0;\n        } else {\n        label_091A:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_095C; }\n                else { goto label_093E; }\n            } else if (var2) {\n            label_095C:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_090F:\n                \n                    if (var1 >= storage[0x05]) { goto label_0972; }\n                    else { goto label_091A; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_090F;\n                }\n            } else {\n            label_093E:\n                var2 = arg1;\n            \n                if (!var2) { goto label_095C; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_095C;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var0 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_09FE; }\n            else { goto label_09FB; }\n        } else if (var4) {\n        label_09FE:\n        \n            if (var4) {\n            label_0A07:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0A12:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var var5 = storage[0x03];\n                var4 = 0x03;\n                var var6 = var5 + 0x01;\n                var var7 = 0x0a4a;\n                var var8 = var4;\n                var var9 = var6;\n                func_14E4(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = arg0 & temp2;\n                storage[temp1] = (storage[temp1] & ~temp2) | temp3;\n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_0A04:\n            \n                if (var2) { goto label_0A12; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_09FB:\n            var4 = !var3;\n        \n            if (var4) { goto label_0A07; }\n            else { goto label_0A04; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x03]) {\n        label_0B3D:\n            return var0;\n        } else {\n        label_0AC1:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var5 = 0x03;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff) {\n                var temp1 = var1 + 0x01;\n                var1 = temp1;\n            \n                if (var1 != storage[0x04]) { goto label_0B34; }\n                else { goto label_0B2C; }\n            } else if (var1 != storage[0x04]) {\n            label_0B34:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_0B3D; }\n                else { goto label_0AC1; }\n            } else {\n            label_0B2C:\n                var0 = 0x01;\n                goto label_0B3D;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x03]) {\n        label_0BBD:\n            return var0;\n        } else {\n        label_0B54:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var4 = 0x03;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_0B49:\n            \n                if (var1 >= storage[0x03]) { goto label_0BBD; }\n                else { goto label_0B54; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_0B49;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x0c69;\n        var0 = getOwners();\n        var var1 = 0x0c71;\n        var1 = getOwners();\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_0D1F:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var4;\n                    var temp3 = var5;\n                    memory[temp3:temp3 + 0x20] = temp2;\n                    memory[0x40:0x60] = temp3 + temp2 * 0x20 + 0x20;\n                    var0 = temp3;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_0D8A:\n                        return var0;\n                    } else {\n                    label_0D50:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_0D8A; }\n                        else { goto label_0D50; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_0D8A; }\n                    else { goto label_0D50; }\n                }\n            } else {\n            label_0CAD:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_0CEF; }\n                    else { goto label_0CD1; }\n                } else if (var4) {\n                label_0CEF:\n                \n                    if (!var4) {\n                    label_0D16:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_0D1F; }\n                        else { goto label_0CAD; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3;\n                        var2 = var2 + 0x01;\n                        goto label_0D16;\n                    }\n                } else {\n                label_0CD1:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_0CEF; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_0CEF;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_0D1F; }\n            else { goto label_0CAD; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x0d9e;\n        var0 = getOwners();\n        var var1 = 0x0da6;\n        var1 = getOwners();\n        var var4 = storage[0x03];\n        var var2 = 0x00;\n        var var3 = var2;\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_0EA0:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_0F15:\n                        return var0;\n                    } else {\n                    label_0ED0:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_0F15; }\n                        else { goto label_0ED0; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_0F15; }\n                    else { goto label_0ED0; }\n                }\n            } else {\n            label_0DE3:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var6 = 0x03;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x40])] & 0xff)) {\n                label_0E97:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_0EA0; }\n                    else { goto label_0DE3; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                    var3 = var3;\n                    var2 = var2 + 0x01;\n                    goto label_0E97;\n                }\n            }\n        } else {\n            var temp7 = MSIZE();\n            var temp8 = var4;\n            memory[temp7:temp7 + 0x20] = temp8;\n            memory[0x40:0x60] = temp7 + temp8 * 0x20 + 0x20;\n            var1 = temp7;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_0EA0; }\n            else { goto label_0DE3; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_0F60; }\n            else { goto label_0F5D; }\n        } else if (var2) {\n        label_0F60:\n        \n            if (var2) {\n            label_0F69:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_0F74:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_0F66:\n            \n                if (var0) { goto label_0F74; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0F5D:\n            var2 = !var1;\n        \n            if (var2) { goto label_0F69; }\n            else { goto label_0F66; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var2 = arg0;\n        var var3 = msg.sender;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x08cc;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var2 = arg1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_11EB:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = ~0xff;\n            storage[temp2] = temp3 & storage[temp2];\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & temp0;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = (temp3 & storage[temp5]) | 0x01;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n        label_1153:\n            var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01 != var3) {\n                var2 = var2;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_11EB; }\n                else { goto label_1153; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp6 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp6] = (var3 & 0x02 ** 0xa0 - 0x01) | (storage[temp6] & ~(0x02 ** 0xa0 - 0x01));\n                goto label_11EB;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = var0;\n        var var1 = arg0;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x12b4;\n        var var3 = arg0;\n        var2 = isConfirmed(var3);\n    \n        if (!var2) {\n        label_07F2:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x00;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var temp1 = temp0 + 0x03;\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x01;\n            var temp2 = storage[temp0 + 0x02];\n            var0 = temp0;\n            var2 = storage[var0] & 0x02 ** 0xa0 - 0x01;\n            var3 = storage[var0 + 0x01];\n            var var4 = temp0 + 0x02;\n            var var5 = memory[0x40:0x60];\n            var var6 = var5;\n            var var7 = var4;\n            var var8 = (temp2 & !(temp2 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        \n            if (!var8) {\n            label_1362:\n                var temp3 = memory[0x40:0x60];\n                var temp4;\n                temp4, memory[temp3:temp3 + 0x00] = address(var2).call.gas(msg.gas - 0x8796).value(var3)(memory[temp3:temp3 + var6 - temp3]);\n            \n                if (!temp4) {\n                    log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-3]]);\n                    var temp5 = var0 + 0x03;\n                    storage[temp5] = storage[temp5] & ~0xff;\n                    return;\n                } else {\n                    log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-3]]);\n                    goto label_07F2;\n                }\n            } else if (0x1f < var8) {\n                var temp6 = var6;\n                var temp7 = temp6 + var8;\n                var6 = temp7;\n                memory[0x00:0x20] = var7;\n                var temp8 = keccak256(memory[0x00:0x20]);\n                memory[temp6:temp6 + 0x20] = storage[temp8];\n                var7 = temp8 + 0x01;\n                var8 = temp6 + 0x20;\n            \n                if (var6 <= var8) { goto label_1359; }\n            \n            label_1345:\n                var temp9 = var7;\n                var temp10 = var8;\n                memory[temp10:temp10 + 0x20] = storage[temp9];\n                var7 = temp9 + 0x01;\n                var8 = temp10 + 0x20;\n            \n                if (var6 > var8) { goto label_1345; }\n            \n            label_1359:\n                var temp11 = var6;\n                var temp12 = temp11 + (var8 - temp11 & 0x1f);\n                var8 = temp11;\n                var6 = temp12;\n                goto label_1362;\n            } else {\n                var temp13 = var6;\n                memory[temp13:temp13 + 0x20] = storage[var7] / 0x0100 * 0x0100;\n                var6 = temp13 + 0x20;\n                var8 = var8;\n                goto label_1362;\n            }\n        }\n    }\n    \n    function func_14E4(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_07F2:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x07f2;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_15DB(var1, var2);\n            goto label_07F2;\n        }\n    }\n    \n    function getOwners() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_15D7(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_15DB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x0c5e;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_15D7(arg1, var0); }\n    \n    label_15EA:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_15EA; }\n    \n        arg0 = func_15D7(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 39.064579248428345,
	"usage": {
		"completion_tokens": 396,
		"prompt_tokens": 14678,
		"total_tokens": 15074
	}
}