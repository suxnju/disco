{
	"address": "0x9249133819102b2ed31680468c8c67f6fe9e7505",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The corresponding Solidity code would look something like this:\n\n```solidity\npragma solidity >=0.4.0 <0.7.0;\n\ncontract Contract {\n    mapping(address => uint) public ownership;\n    mapping(address => uint) public ownedNumbers;\n    mapping(address => uint) public earnings;\n    mapping(address => uint) public deadbids;\n    uint public houseEarnings;\n    uint public minPrice;\n\n    function acceptBid(uint256 _value) public {\n        require(msg.value >= _value);\n    }\n\n    function hasBuyNowOffer(uint256 _value) public view returns (bool) {\n        return _value > 0;\n    }\n\n    function takeNumber(uint256 _value) public {\n        require(ownership[msg.sender] < _value);\n    }\n\n    function withdrawHouseEarnings() public {\n        require(msg.sender == address(this));\n    }\n\n    function placeBuyNowOffer(uint256 _value, uint256 _price) public {\n        require(ownedNumbers[msg.sender] >= _value);\n        require(_price >= 0.01 ether);\n    }\n\n    function updateMessage(uint256 _value, string memory _message) public {\n        require(ownedNumbers[msg.sender] >= _value);\n    }\n\n    function placeNewBid(uint256 _value) public payable {\n        require(msg.value >= _value);\n    }\n\n    function canAcceptBuyNow(uint256 _value, address _addr) public view returns (bool) {\n        return _value > 0 && ownership[_addr] < _value;\n    }\n\n    function cancelBid(uint256 _value) public {\n        require(ownership[msg.sender] >= _value);\n    }\n\n    function ownership(uint256 _value) public view returns (address) {\n        return address(_value);\n    }\n\n    function withdrawEarnings() public {\n        require(earnings[msg.sender] > 0);\n    }\n\n    function acceptBuyNowOffer(uint256 _value) public payable {\n        require(_value > 0 && msg.value >= _value);\n    }\n\n    function withdrawDeadBids() public {\n        require(deadbids[msg.sender] > 0);\n    }\n\n    function isOwner(address _addr, uint256 _value) public view returns (bool) {\n        return ownership[_addr] >= _value;\n    }\n\n    function cancelBuyNowOffer(uint256 _value) public {\n        require(ownedNumbers[msg.sender] >= _value);\n    }\n\n    function hasOwner(uint256 _value) public view returns (bool) {\n        return _value > 0;\n    }\n\n    function deadbids(address _addr) public view returns (uint) {\n        return deadbids[_addr];\n    }\n}\n```\n\nPlease note that this Solidity code is an interpretation of the given decompiled code which isn't a perfect one-to-one translation. It is abstracted to represent the same logic for a better understanding of the contract functionalities. Also, the Solidity version pragma is set to have a wide range assuming we do not know the exact Solidity compiler version.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474345,
	"id": "chatcmpl-8MvLVZCfE64098lyB3wWwC9KYOotI",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x02fc1f85) {\n            // Dispatch table entry for ownedNumbers(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0162;\n            var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = ownedNumbers(var2);\n            var temp0 = memory[0x40:0x60];\n            var2 = temp0;\n            var var3 = var2;\n            var temp1 = var3 + 0x20;\n            memory[var3:var3 + 0x20] = temp1 - var3;\n            var temp2 = var1;\n            memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n            var var4 = temp1 + 0x20;\n            var var5 = temp2 + 0x20;\n            var var6 = memory[temp2:temp2 + 0x20] * 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_01A6:\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (var6 + var4) - temp3];\n            } else {\n            label_0193:\n                var temp4 = var10;\n                memory[var8 + temp4:var8 + temp4 + 0x20] = memory[var9 + temp4:var9 + temp4 + 0x20];\n                var10 = temp4 + 0x20;\n            \n                if (var10 >= var7) { goto label_01A6; }\n                else { goto label_0193; }\n            }\n        } else if (var0 == 0x2b1fd58a) {\n            // Dispatch table entry for acceptBid(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01db;\n            var2 = msg.data[0x04:0x24];\n            acceptBid(var2);\n            stop();\n        } else if (var0 == 0x2d087944) {\n            // Dispatch table entry for hasBuyNowOffer(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01fe;\n            var2 = msg.data[0x04:0x24];\n            var1 = hasBuyNowOffer(var2);\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = !!var1;\n            var temp6 = memory[0x40:0x60];\n            return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n        } else if (var0 == 0x30ef3d56) {\n            // Dispatch table entry for takeNumber(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0239;\n            var2 = msg.data[0x04:0x24];\n            takeNumber(var2);\n            stop();\n        } else if (var0 == 0x41883b78) {\n            // Dispatch table entry for withdrawHouseEarnings()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x024e;\n            withdrawHouseEarnings();\n            stop();\n        } else if (var0 == 0x543fd313) {\n            // Dispatch table entry for earnings(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0287;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = earnings(var2);\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = var2;\n            var temp8 = memory[0x40:0x60];\n            return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n        } else if (var0 == 0x5bd9279c) {\n            // Dispatch table entry for placeBuyNowOffer(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c7;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            placeBuyNowOffer(var2, var3);\n            stop();\n        } else if (var0 == 0x655b97db) {\n            // Dispatch table entry for ownershipLookup(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0309;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var2 = ownershipLookup(var2, var3);\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = var2;\n            var temp10 = memory[0x40:0x60];\n            return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n        } else if (var0 == 0x7f949386) {\n            // Dispatch table entry for updateMessage(uint256,string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0383;\n            var2 = msg.data[0x04:0x24];\n            var temp11 = msg.data[0x24:0x44] + 0x04;\n            var temp12 = msg.data[temp11:temp11 + 0x20];\n            var temp13 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp13 + (temp12 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp13:temp13 + 0x20] = temp12;\n            memory[temp13 + 0x20:temp13 + 0x20 + temp12] = msg.data[temp11 + 0x20:temp11 + 0x20 + temp12];\n            var3 = temp13;\n            updateMessage(var2, var3);\n            stop();\n        } else if (var0 == 0x81086763) {\n            // Dispatch table entry for placeNewBid(uint256)\n            var1 = 0x039b;\n            var2 = msg.data[0x04:0x24];\n            placeNewBid(var2);\n            stop();\n        } else if (var0 == 0x8df3a24c) {\n            // Dispatch table entry for canAcceptBuyNow(uint256,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03dd;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = canAcceptBuyNow(var2, var3);\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = !!var1;\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n        } else if (var0 == 0x9703ef35) {\n            // Dispatch table entry for cancelBid(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0418;\n            var2 = msg.data[0x04:0x24];\n            cancelBid(var2);\n            stop();\n        } else if (var0 == 0xa0f45b69) {\n            // Dispatch table entry for ownership(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x043b;\n            var2 = msg.data[0x04:0x24];\n            var2, var3, var4, var5, var6, var7, var8 = ownership(var2);\n            var temp16 = memory[0x40:0x60];\n            var9 = temp16;\n            memory[var9:var9 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp17 = var9 + 0x20;\n            memory[temp17:temp17 + 0x20] = var3;\n            var temp18 = temp17 + 0x20;\n            var10 = temp18;\n            var temp19 = var10 + 0x20;\n            memory[temp19:temp19 + 0x20] = !!var5;\n            var temp20 = temp19 + 0x20;\n            memory[temp20:temp20 + 0x20] = var6;\n            var temp21 = temp20 + 0x20;\n            memory[temp21:temp21 + 0x20] = var7 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp22 = temp21 + 0x20;\n            memory[temp22:temp22 + 0x20] = var8;\n            var temp23 = temp22 + 0x20;\n            memory[var10:var10 + 0x20] = temp23 - var9;\n            var temp24 = var4;\n            var var12 = temp24;\n            var temp25 = storage[var12];\n            memory[temp23:temp23 + 0x20] = (!(temp25 & 0x01) * 0x0100 - 0x01 & temp25) / 0x02;\n            var var11 = temp23 + 0x20;\n            var temp26 = storage[var12];\n            var var13 = (!(temp26 & 0x01) * 0x0100 - 0x01 & temp26) / 0x02;\n        \n            if (!var13) {\n            label_0544:\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + var11 - temp27];\n            } else if (0x1f < var13) {\n                var temp28 = var11;\n                var temp29 = temp28 + var13;\n                var11 = temp29;\n                memory[0x00:0x20] = var12;\n                var temp30 = keccak256(memory[0x00:0x20]);\n                memory[temp28:temp28 + 0x20] = storage[temp30];\n                var12 = temp30 + 0x01;\n                var13 = temp28 + 0x20;\n            \n                if (var11 <= var13) { goto label_053B; }\n            \n            label_0527:\n                var temp31 = var12;\n                var temp32 = var13;\n                memory[temp32:temp32 + 0x20] = storage[temp31];\n                var12 = temp31 + 0x01;\n                var13 = temp32 + 0x20;\n            \n                if (var11 > var13) { goto label_0527; }\n            \n            label_053B:\n                var temp33 = var11;\n                var temp34 = temp33 + (var13 - temp33 & 0x1f);\n                var13 = temp33;\n                var11 = temp34;\n                goto label_0544;\n            } else {\n                var temp35 = var11;\n                memory[temp35:temp35 + 0x20] = storage[var12] / 0x0100 * 0x0100;\n                var11 = temp35 + 0x20;\n                var13 = var13;\n                goto label_0544;\n            }\n        } else if (var0 == 0xb73c6ce9) {\n            // Dispatch table entry for withdrawEarnings()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x056c;\n            withdrawEarnings();\n            stop();\n        } else if (var0 == 0xc7daceb1) {\n            // Dispatch table entry for acceptBuyNowOffer(uint256)\n            var1 = 0x0584;\n            var2 = msg.data[0x04:0x24];\n            acceptBuyNowOffer(var2);\n            stop();\n        } else if (var0 == 0xcfe30939) {\n            // Dispatch table entry for houseEarnings()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0599;\n            var2 = houseEarnings();\n            var temp36 = memory[0x40:0x60];\n            memory[temp36:temp36 + 0x20] = var2;\n            var temp37 = memory[0x40:0x60];\n            return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n        } else if (var0 == 0xddb22537) {\n            // Dispatch table entry for withdrawDeadBids()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x05c2;\n            withdrawDeadBids();\n            stop();\n        } else if (var0 == 0xe327a6af) {\n            // Dispatch table entry for isOwner(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0604;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = isOwner(var2, var3);\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = !!var1;\n            var temp39 = memory[0x40:0x60];\n            return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n        } else if (var0 == 0xe45be8eb) {\n            // Dispatch table entry for minPrice()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0631;\n            var2 = minPrice();\n            var temp40 = memory[0x40:0x60];\n            memory[temp40:temp40 + 0x20] = var2;\n            var temp41 = memory[0x40:0x60];\n            return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n        } else if (var0 == 0xf047d077) {\n            // Dispatch table entry for cancelBuyNowOffer(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0668;\n            var2 = msg.data[0x04:0x24];\n            cancelBuyNowOffer(var2);\n            stop();\n        } else if (var0 == 0xf48d60ca) {\n            // Dispatch table entry for hasOwner(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x068b;\n            var2 = msg.data[0x04:0x24];\n            var1 = hasOwner(var2);\n            var temp42 = memory[0x40:0x60];\n            memory[temp42:temp42 + 0x20] = !!var1;\n            var temp43 = memory[0x40:0x60];\n            return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n        } else if (var0 == 0xff1ad781) {\n            // Dispatch table entry for deadbids(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x06dc;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = deadbids(var2);\n            var temp44 = memory[0x40:0x60];\n            memory[temp44:temp44 + 0x20] = var2;\n            var temp45 = memory[0x40:0x60];\n            return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function ownedNumbers(var arg0) returns (var r0) {\n        var var0 = 0x06fa;\n        var0 = func_194A();\n        var var1 = 0x00;\n        var var2 = 0x0704;\n        var2 = func_194A();\n        var var3 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = var1;\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var2 = temp0;\n            var3 = 0x00;\n        \n            if (var3 >= var1) {\n            label_0800:\n                return var2;\n            } else {\n            label_077B:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x01;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = var3;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var4 = storage[var5 + keccak256(memory[0x00:0x20])];\n                var5 = var2;\n                var var6 = var3;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                var3 = var3 + 0x01;\n            \n                if (var3 >= var1) { goto label_0800; }\n                else { goto label_077B; }\n            }\n        } else {\n            var temp2 = MSIZE();\n            var temp3 = var4;\n            memory[temp2:temp2 + 0x20] = temp3;\n            memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n            var2 = temp2;\n            var3 = 0x00;\n        \n            if (var3 >= var1) { goto label_0800; }\n            else { goto label_077B; }\n        }\n    }\n    \n    function acceptBid(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0819;\n        var var3 = msg.sender;\n        var var4 = arg0;\n        var2 = isOwner(var3, var4);\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (storage[var0 + 0x06] <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0;\n        var1 = storage[temp0 + 0x06];\n        var2 = 0x08ca;\n        var3 = var1;\n        var4 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        func_1535(var3, var4);\n        var2 = 0x091d;\n        var3 = arg0;\n        var temp1 = var0;\n        var4 = storage[temp1] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var5 = storage[temp1 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        func_15AB(var3, var4, var5);\n        var temp2 = var0;\n        var temp3 = temp2 + 0x05;\n        storage[temp3] = (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n        storage[temp2 + 0x06] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xeeb046b305fcff3538cfdefcb3ce223663ef84836df9830a1de00bc00817631e, stack[-3]]);\n    }\n    \n    function hasBuyNowOffer(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n    }\n    \n    function takeNumber(var arg0) {\n        var var0 = 0x09df;\n        var var1 = arg0;\n        var0 = hasOwner(var1);\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x09f5;\n        var1 = msg.sender;\n        var var2 = arg0;\n        var0 = isOwner(var1, var2);\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        var0 = temp0;\n        memory[0x40:0x60] = var0 + 0xe0;\n        memory[var0:var0 + 0x20] = msg.sender;\n        var temp1 = var0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + 0x20;\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[temp2:temp2 + 0x20] = temp3;\n        var temp4 = temp2 + 0x20;\n        memory[temp4:temp4 + 0x20] = !!0x00;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = 0x00;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var1 = temp7;\n        var temp8 = var1;\n        storage[temp8] = (memory[var0:var0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[var1 + 0x01] = memory[var0 + 0x20:var0 + 0x20 + 0x20];\n        var temp9 = memory[var0 + 0x40:var0 + 0x40 + 0x20];\n        var2 = 0x0af7;\n        var var3 = var1 + 0x02;\n        var var4 = temp9 + 0x20;\n        var var5 = memory[temp9:temp9 + 0x20];\n        var2 = func_195E(var3, var4, var5);\n        var temp10 = var0;\n        var temp11 = var1;\n        var temp12 = temp11 + 0x03;\n        storage[temp12] = !!memory[temp10 + 0x60:temp10 + 0x60 + 0x20] | (storage[temp12] & ~0xff);\n        storage[temp11 + 0x04] = memory[temp10 + 0x80:temp10 + 0x80 + 0x20];\n        var temp13 = temp11 + 0x05;\n        storage[temp13] = (memory[temp10 + 0xa0:temp10 + 0xa0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp13] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp11 + 0x06] = memory[temp10 + 0xc0:temp10 + 0xc0 + 0x20];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var0 = keccak256(memory[0x00:0x40]);\n        var1 = storage[var0];\n        var2 = var1 + 0x01;\n        var3 = 0x0bc7;\n        var5 = var2;\n        var4 = var0;\n        func_19DE(var4, var5);\n        memory[0x00:0x20] = var0;\n        var temp14 = arg0;\n        storage[var1 + keccak256(memory[0x00:0x20])] = temp14;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp15 = storage[keccak256(memory[0x00:0x40])] - 0x01;\n        memory[0x00:0x20] = temp14;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40]) + 0x01] = temp15;\n        var temp16 = memory[0x40:0x60];\n        log(memory[temp16:temp16 + memory[0x40:0x60] - temp16], [0x9ada7a4ceef780fdb0068b7de6d49551c1922466a3fdb952554f20aee9cfaa4f, stack[-4]]);\n    }\n    \n    function withdrawHouseEarnings() {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x02];\n        var0 = temp0;\n        storage[0x02] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function earnings(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function placeBuyNowOffer(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x0d3f;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var1 = isOwner(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 < 0x038d7ea4c68000) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x00;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1;\n        storage[temp1 + 0x04] = temp2;\n        var temp3 = temp1 + 0x03;\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xa0f1665b7b659537b52deec61ea64d134a3bccda74c7f4e79f2246e7a8187a8a, stack[-3]]);\n    }\n    \n    function ownershipLookup(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = arg1;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])];\n    }\n    \n    function updateMessage(var arg0, var arg1) {\n        var var0 = 0x0e14;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        var0 = isOwner(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = 0x0e48;\n        var1 = keccak256(memory[0x00:0x40]) + 0x02;\n        var var3 = memory[temp0:temp0 + 0x20];\n        var2 = temp0 + 0x20;\n        var0 = func_1A0A(var1, var2, var3);\n    }\n    \n    function placeNewBid(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x0e59;\n        var var2 = arg0;\n        var1 = hasOwner(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0e6e;\n        var2 = msg.sender;\n        var var3 = arg0;\n        var1 = isOwner(var2, var3);\n    \n        if (var1) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value < 0x038d7ea4c68000) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (msg.value <= storage[var0 + 0x06] + 0x038d7ea4c68000) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0;\n        memory[0x00:0x20] = storage[temp0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] + storage[temp0 + 0x06];\n        storage[temp0 + 0x06] = msg.value;\n        var temp2 = temp0 + 0x05;\n        storage[temp2] = msg.sender | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = msg.value;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x0fc69407039e8ba8cdd517e2a4cae9dd19697b0a500ff37a2425c59ebc649b31, stack[-2]]);\n    }\n    \n    function canAcceptBuyNow(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var1) {\n        label_1035:\n            return var1;\n        } else {\n            var1 = 0x1034;\n            var var2 = arg0;\n            var1 = hasBuyNowOffer(var2);\n            goto label_1035;\n        }\n    }\n    \n    function cancelBid(var arg0) {\n        var var1 = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var0 = keccak256(memory[0x00:0x40]);\n    \n        if (msg.sender != storage[var0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var1 = storage[var0 + 0x06];\n        var var2 = 0x10c3;\n        var var3 = arg0;\n        func_1841(var3);\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x2a0a5f509bc9b1f09c4172bec62e98d404d2f98b3977aa9b9a2bb243671f5fe2, stack[-3]]);\n    }\n    \n    function ownership(var arg0) returns (var arg0, var r1, var r2, var r3, var r4, var r5, var r6) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        r4 = storage[temp0 + 0x04];\n        r5 = storage[temp0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r6 = storage[temp0 + 0x06];\n        return arg0, r1, r2, r3, r4, r5, r6;\n    }\n    \n    function withdrawEarnings() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function acceptBuyNowOffer(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x1268;\n        var var2 = arg0;\n        var var3 = msg.sender;\n        var1 = canAcceptBuyNow(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (msg.value != storage[var0 + 0x04]) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x12c7;\n        var2 = msg.value;\n        var3 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        func_1535(var2, var3);\n        var1 = 0x12d0;\n        var2 = arg0;\n        func_1841(var2);\n        var1 = 0x12ff;\n        var2 = arg0;\n        var3 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var4 = msg.sender;\n        func_15AB(var2, var3, var4);\n        var1 = 0x1308;\n        var2 = var0;\n        func_191F(var2);\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xfbdd8508825d37ca4a6c9a25fda096c88f19774025d4289975fe037e7581306f, stack[-2]]);\n    }\n    \n    function houseEarnings() returns (var r0) { return storage[0x02]; }\n    \n    function withdrawDeadBids() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function isOwner(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function minPrice() returns (var r0) { return 0x038d7ea4c68000; }\n    \n    function cancelBuyNowOffer(var arg0) {\n        var var0 = 0x149c;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        var0 = isOwner(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x14c1;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var1 = keccak256(memory[0x00:0x40]);\n        func_191F(var1);\n    }\n    \n    function hasOwner(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff > 0x00;\n    }\n    \n    function deadbids(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_1535(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x64;\n        var var2 = arg0;\n    \n        if (!var1) { assert(); }\n    \n        var temp0 = var2 / var1;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] + (arg0 - temp0);\n        storage[0x02] = storage[0x02] + temp0;\n    }\n    \n    function func_15AB(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x15b8;\n        var var3 = arg1;\n        var var4 = arg0;\n        var2 = isOwner(var3, var4);\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n        var temp0 = var0;\n        storage[temp0] = (arg2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp1 = arg1;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = storage[keccak256(memory[0x00:0x40])];\n        var1 = temp2;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = keccak256(memory[0x00:0x40]);\n        var3 = var1 - 0x01;\n    \n        if (var3 >= storage[var2]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n        var2 = storage[var3 + keccak256(memory[0x00:0x20])];\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var3 = keccak256(memory[0x00:0x40]);\n        var4 = storage[var0 + 0x01];\n    \n        if (var4 >= storage[var3]) { assert(); }\n    \n        memory[0x00:0x20] = var3;\n        storage[var4 + keccak256(memory[0x00:0x20])] = var2;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x1773;\n        var var5 = var2 - 0x01;\n        var4 = keccak256(memory[0x00:0x40]);\n        func_1A8A(var4, var5);\n        memory[0x00:0x20] = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = keccak256(memory[0x00:0x40]);\n        var3 = storage[var2];\n        var4 = var3 + 0x01;\n        var5 = 0x17c5;\n        var var6 = var2;\n        var var7 = var4;\n        func_19DE(var6, var7);\n        memory[0x00:0x20] = var2;\n        var temp3 = arg0;\n        storage[var3 + keccak256(memory[0x00:0x20])] = temp3;\n        memory[0x00:0x20] = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp4 = storage[keccak256(memory[0x00:0x40])] - 0x01;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40]) + 0x01] = temp4;\n    }\n    \n    function func_1841(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = storage[temp0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] + storage[temp0 + 0x06];\n        storage[temp0 + 0x06] = 0x00;\n        var temp2 = temp0 + 0x05;\n        storage[temp2] = (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n    }\n    \n    function func_191F(var arg0) {\n        var temp0 = arg0;\n        storage[temp0 + 0x04] = 0x00;\n        var temp1 = temp0 + 0x03;\n        storage[temp1] = (storage[temp1] & ~0xff) | 0x00;\n    }\n    \n    function func_194A() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_195E(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_19CD:\n                var temp4 = arg1;\n                arg1 = 0x19da;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1AB6(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_19CC:\n                    goto label_19CD;\n                } else {\n                label_19BA:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_19CC; }\n                    else { goto label_19BA; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_19CD;\n        }\n    }\n    \n    function func_19DE(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1A05:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1a04;\n            var var2 = temp3 + arg1;\n            var var1 = temp4;\n            var0 = func_1AB6(var1, var2);\n            goto label_1A05;\n        }\n    }\n    \n    function func_1A0A(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_1A79:\n                var temp4 = arg1;\n                arg1 = 0x1a86;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1AB6(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = var1;\n                var temp6 = arg2;\n                arg2 = temp5;\n                var1 = arg2 + temp6;\n            \n                if (var1 <= arg2) {\n                label_1A78:\n                    goto label_1A79;\n                } else {\n                label_1A66:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_1A78; }\n                    else { goto label_1A66; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_1A79;\n        }\n    }\n    \n    function func_1A8A(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1AB1:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1ab0;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_1AB6(var1, var2);\n            goto label_1AB1;\n        }\n    }\n    \n    function func_1AB6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1ad8;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_1AD4(arg1, var0); }\n    \n    label_1AC5:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_1AC5; }\n    \n        arg0 = func_1AD4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1AD4(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x02fc1f85) {\n            // Dispatch table entry for ownedNumbers(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0162;\n            var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = ownedNumbers(var2);\n            var temp0 = memory[0x40:0x60];\n            var2 = temp0;\n            var var3 = var2;\n            var temp1 = var3 + 0x20;\n            memory[var3:var3 + 0x20] = temp1 - var3;\n            var temp2 = var1;\n            memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n            var var4 = temp1 + 0x20;\n            var var5 = temp2 + 0x20;\n            var var6 = memory[temp2:temp2 + 0x20] * 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_01A6:\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (var6 + var4) - temp3];\n            } else {\n            label_0193:\n                var temp4 = var10;\n                memory[var8 + temp4:var8 + temp4 + 0x20] = memory[var9 + temp4:var9 + temp4 + 0x20];\n                var10 = temp4 + 0x20;\n            \n                if (var10 >= var7) { goto label_01A6; }\n                else { goto label_0193; }\n            }\n        } else if (var0 == 0x2b1fd58a) {\n            // Dispatch table entry for acceptBid(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01db;\n            var2 = msg.data[0x04:0x24];\n            acceptBid(var2);\n            stop();\n        } else if (var0 == 0x2d087944) {\n            // Dispatch table entry for hasBuyNowOffer(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01fe;\n            var2 = msg.data[0x04:0x24];\n            var1 = hasBuyNowOffer(var2);\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = !!var1;\n            var temp6 = memory[0x40:0x60];\n            return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n        } else if (var0 == 0x30ef3d56) {\n            // Dispatch table entry for takeNumber(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0239;\n            var2 = msg.data[0x04:0x24];\n            takeNumber(var2);\n            stop();\n        } else if (var0 == 0x41883b78) {\n            // Dispatch table entry for withdrawHouseEarnings()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x024e;\n            withdrawHouseEarnings();\n            stop();\n        } else if (var0 == 0x543fd313) {\n            // Dispatch table entry for earnings(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0287;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = earnings(var2);\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = var2;\n            var temp8 = memory[0x40:0x60];\n            return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n        } else if (var0 == 0x5bd9279c) {\n            // Dispatch table entry for placeBuyNowOffer(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c7;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            placeBuyNowOffer(var2, var3);\n            stop();\n        } else if (var0 == 0x655b97db) {\n            // Dispatch table entry for ownershipLookup(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0309;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var2 = ownershipLookup(var2, var3);\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = var2;\n            var temp10 = memory[0x40:0x60];\n            return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n        } else if (var0 == 0x7f949386) {\n            // Dispatch table entry for updateMessage(uint256,string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0383;\n            var2 = msg.data[0x04:0x24];\n            var temp11 = msg.data[0x24:0x44] + 0x04;\n            var temp12 = msg.data[temp11:temp11 + 0x20];\n            var temp13 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp13 + (temp12 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp13:temp13 + 0x20] = temp12;\n            memory[temp13 + 0x20:temp13 + 0x20 + temp12] = msg.data[temp11 + 0x20:temp11 + 0x20 + temp12];\n            var3 = temp13;\n            updateMessage(var2, var3);\n            stop();\n        } else if (var0 == 0x81086763) {\n            // Dispatch table entry for placeNewBid(uint256)\n            var1 = 0x039b;\n            var2 = msg.data[0x04:0x24];\n            placeNewBid(var2);\n            stop();\n        } else if (var0 == 0x8df3a24c) {\n            // Dispatch table entry for canAcceptBuyNow(uint256,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03dd;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = canAcceptBuyNow(var2, var3);\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = !!var1;\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n        } else if (var0 == 0x9703ef35) {\n            // Dispatch table entry for cancelBid(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0418;\n            var2 = msg.data[0x04:0x24];\n            cancelBid(var2);\n            stop();\n        } else if (var0 == 0xa0f45b69) {\n            // Dispatch table entry for ownership(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x043b;\n            var2 = msg.data[0x04:0x24];\n            var2, var3, var4, var5, var6, var7, var8 = ownership(var2);\n            var temp16 = memory[0x40:0x60];\n            var9 = temp16;\n            memory[var9:var9 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp17 = var9 + 0x20;\n            memory[temp17:temp17 + 0x20] = var3;\n            var temp18 = temp17 + 0x20;\n            var10 = temp18;\n            var temp19 = var10 + 0x20;\n            memory[temp19:temp19 + 0x20] = !!var5;\n            var temp20 = temp19 + 0x20;\n            memory[temp20:temp20 + 0x20] = var6;\n            var temp21 = temp20 + 0x20;\n            memory[temp21:temp21 + 0x20] = var7 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp22 = temp21 + 0x20;\n            memory[temp22:temp22 + 0x20] = var8;\n            var temp23 = temp22 + 0x20;\n            memory[var10:var10 + 0x20] = temp23 - var9;\n            var temp24 = var4;\n            var var12 = temp24;\n            var temp25 = storage[var12];\n            memory[temp23:temp23 + 0x20] = (!(temp25 & 0x01) * 0x0100 - 0x01 & temp25) / 0x02;\n            var var11 = temp23 + 0x20;\n            var temp26 = storage[var12];\n            var var13 = (!(temp26 & 0x01) * 0x0100 - 0x01 & temp26) / 0x02;\n        \n            if (!var13) {\n            label_0544:\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + var11 - temp27];\n            } else if (0x1f < var13) {\n                var temp28 = var11;\n                var temp29 = temp28 + var13;\n                var11 = temp29;\n                memory[0x00:0x20] = var12;\n                var temp30 = keccak256(memory[0x00:0x20]);\n                memory[temp28:temp28 + 0x20] = storage[temp30];\n                var12 = temp30 + 0x01;\n                var13 = temp28 + 0x20;\n            \n                if (var11 <= var13) { goto label_053B; }\n            \n            label_0527:\n                var temp31 = var12;\n                var temp32 = var13;\n                memory[temp32:temp32 + 0x20] = storage[temp31];\n                var12 = temp31 + 0x01;\n                var13 = temp32 + 0x20;\n            \n                if (var11 > var13) { goto label_0527; }\n            \n            label_053B:\n                var temp33 = var11;\n                var temp34 = temp33 + (var13 - temp33 & 0x1f);\n                var13 = temp33;\n                var11 = temp34;\n                goto label_0544;\n            } else {\n                var temp35 = var11;\n                memory[temp35:temp35 + 0x20] = storage[var12] / 0x0100 * 0x0100;\n                var11 = temp35 + 0x20;\n                var13 = var13;\n                goto label_0544;\n            }\n        } else if (var0 == 0xb73c6ce9) {\n            // Dispatch table entry for withdrawEarnings()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x056c;\n            withdrawEarnings();\n            stop();\n        } else if (var0 == 0xc7daceb1) {\n            // Dispatch table entry for acceptBuyNowOffer(uint256)\n            var1 = 0x0584;\n            var2 = msg.data[0x04:0x24];\n            acceptBuyNowOffer(var2);\n            stop();\n        } else if (var0 == 0xcfe30939) {\n            // Dispatch table entry for houseEarnings()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0599;\n            var2 = houseEarnings();\n            var temp36 = memory[0x40:0x60];\n            memory[temp36:temp36 + 0x20] = var2;\n            var temp37 = memory[0x40:0x60];\n            return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n        } else if (var0 == 0xddb22537) {\n            // Dispatch table entry for withdrawDeadBids()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x05c2;\n            withdrawDeadBids();\n            stop();\n        } else if (var0 == 0xe327a6af) {\n            // Dispatch table entry for isOwner(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0604;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = isOwner(var2, var3);\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = !!var1;\n            var temp39 = memory[0x40:0x60];\n            return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n        } else if (var0 == 0xe45be8eb) {\n            // Dispatch table entry for minPrice()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0631;\n            var2 = minPrice();\n            var temp40 = memory[0x40:0x60];\n            memory[temp40:temp40 + 0x20] = var2;\n            var temp41 = memory[0x40:0x60];\n            return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n        } else if (var0 == 0xf047d077) {\n            // Dispatch table entry for cancelBuyNowOffer(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0668;\n            var2 = msg.data[0x04:0x24];\n            cancelBuyNowOffer(var2);\n            stop();\n        } else if (var0 == 0xf48d60ca) {\n            // Dispatch table entry for hasOwner(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x068b;\n            var2 = msg.data[0x04:0x24];\n            var1 = hasOwner(var2);\n            var temp42 = memory[0x40:0x60];\n            memory[temp42:temp42 + 0x20] = !!var1;\n            var temp43 = memory[0x40:0x60];\n            return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n        } else if (var0 == 0xff1ad781) {\n            // Dispatch table entry for deadbids(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x06dc;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = deadbids(var2);\n            var temp44 = memory[0x40:0x60];\n            memory[temp44:temp44 + 0x20] = var2;\n            var temp45 = memory[0x40:0x60];\n            return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function ownedNumbers(var arg0) returns (var r0) {\n        var var0 = 0x06fa;\n        var0 = func_194A();\n        var var1 = 0x00;\n        var var2 = 0x0704;\n        var2 = func_194A();\n        var var3 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = var1;\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var2 = temp0;\n            var3 = 0x00;\n        \n            if (var3 >= var1) {\n            label_0800:\n                return var2;\n            } else {\n            label_077B:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x01;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = var3;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var4 = storage[var5 + keccak256(memory[0x00:0x20])];\n                var5 = var2;\n                var var6 = var3;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                var3 = var3 + 0x01;\n            \n                if (var3 >= var1) { goto label_0800; }\n                else { goto label_077B; }\n            }\n        } else {\n            var temp2 = MSIZE();\n            var temp3 = var4;\n            memory[temp2:temp2 + 0x20] = temp3;\n            memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n            var2 = temp2;\n            var3 = 0x00;\n        \n            if (var3 >= var1) { goto label_0800; }\n            else { goto label_077B; }\n        }\n    }\n    \n    function acceptBid(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0819;\n        var var3 = msg.sender;\n        var var4 = arg0;\n        var2 = isOwner(var3, var4);\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (storage[var0 + 0x06] <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0;\n        var1 = storage[temp0 + 0x06];\n        var2 = 0x08ca;\n        var3 = var1;\n        var4 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        func_1535(var3, var4);\n        var2 = 0x091d;\n        var3 = arg0;\n        var temp1 = var0;\n        var4 = storage[temp1] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var5 = storage[temp1 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        func_15AB(var3, var4, var5);\n        var temp2 = var0;\n        var temp3 = temp2 + 0x05;\n        storage[temp3] = (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n        storage[temp2 + 0x06] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xeeb046b305fcff3538cfdefcb3ce223663ef84836df9830a1de00bc00817631e, stack[-3]]);\n    }\n    \n    function hasBuyNowOffer(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n    }\n    \n    function takeNumber(var arg0) {\n        var var0 = 0x09df;\n        var var1 = arg0;\n        var0 = hasOwner(var1);\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x09f5;\n        var1 = msg.sender;\n        var var2 = arg0;\n        var0 = isOwner(var1, var2);\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        var0 = temp0;\n        memory[0x40:0x60] = var0 + 0xe0;\n        memory[var0:var0 + 0x20] = msg.sender;\n        var temp1 = var0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + 0x20;\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[temp2:temp2 + 0x20] = temp3;\n        var temp4 = temp2 + 0x20;\n        memory[temp4:temp4 + 0x20] = !!0x00;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = 0x00;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var1 = temp7;\n        var temp8 = var1;\n        storage[temp8] = (memory[var0:var0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[var1 + 0x01] = memory[var0 + 0x20:var0 + 0x20 + 0x20];\n        var temp9 = memory[var0 + 0x40:var0 + 0x40 + 0x20];\n        var2 = 0x0af7;\n        var var3 = var1 + 0x02;\n        var var4 = temp9 + 0x20;\n        var var5 = memory[temp9:temp9 + 0x20];\n        var2 = func_195E(var3, var4, var5);\n        var temp10 = var0;\n        var temp11 = var1;\n        var temp12 = temp11 + 0x03;\n        storage[temp12] = !!memory[temp10 + 0x60:temp10 + 0x60 + 0x20] | (storage[temp12] & ~0xff);\n        storage[temp11 + 0x04] = memory[temp10 + 0x80:temp10 + 0x80 + 0x20];\n        var temp13 = temp11 + 0x05;\n        storage[temp13] = (memory[temp10 + 0xa0:temp10 + 0xa0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp13] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp11 + 0x06] = memory[temp10 + 0xc0:temp10 + 0xc0 + 0x20];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var0 = keccak256(memory[0x00:0x40]);\n        var1 = storage[var0];\n        var2 = var1 + 0x01;\n        var3 = 0x0bc7;\n        var5 = var2;\n        var4 = var0;\n        func_19DE(var4, var5);\n        memory[0x00:0x20] = var0;\n        var temp14 = arg0;\n        storage[var1 + keccak256(memory[0x00:0x20])] = temp14;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp15 = storage[keccak256(memory[0x00:0x40])] - 0x01;\n        memory[0x00:0x20] = temp14;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40]) + 0x01] = temp15;\n        var temp16 = memory[0x40:0x60];\n        log(memory[temp16:temp16 + memory[0x40:0x60] - temp16], [0x9ada7a4ceef780fdb0068b7de6d49551c1922466a3fdb952554f20aee9cfaa4f, stack[-4]]);\n    }\n    \n    function withdrawHouseEarnings() {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x02];\n        var0 = temp0;\n        storage[0x02] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function earnings(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function placeBuyNowOffer(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x0d3f;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var1 = isOwner(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 < 0x038d7ea4c68000) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x00;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1;\n        storage[temp1 + 0x04] = temp2;\n        var temp3 = temp1 + 0x03;\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xa0f1665b7b659537b52deec61ea64d134a3bccda74c7f4e79f2246e7a8187a8a, stack[-3]]);\n    }\n    \n    function ownershipLookup(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = arg1;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])];\n    }\n    \n    function updateMessage(var arg0, var arg1) {\n        var var0 = 0x0e14;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        var0 = isOwner(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = 0x0e48;\n        var1 = keccak256(memory[0x00:0x40]) + 0x02;\n        var var3 = memory[temp0:temp0 + 0x20];\n        var2 = temp0 + 0x20;\n        var0 = func_1A0A(var1, var2, var3);\n    }\n    \n    function placeNewBid(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x0e59;\n        var var2 = arg0;\n        var1 = hasOwner(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0e6e;\n        var2 = msg.sender;\n        var var3 = arg0;\n        var1 = isOwner(var2, var3);\n    \n        if (var1) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value < 0x038d7ea4c68000) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (msg.value <= storage[var0 + 0x06] + 0x038d7ea4c68000) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0;\n        memory[0x00:0x20] = storage[temp0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] + storage[temp0 + 0x06];\n        storage[temp0 + 0x06] = msg.value;\n        var temp2 = temp0 + 0x05;\n        storage[temp2] = msg.sender | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = msg.value;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x0fc69407039e8ba8cdd517e2a4cae9dd19697b0a500ff37a2425c59ebc649b31, stack[-2]]);\n    }\n    \n    function canAcceptBuyNow(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var1) {\n        label_1035:\n            return var1;\n        } else {\n            var1 = 0x1034;\n            var var2 = arg0;\n            var1 = hasBuyNowOffer(var2);\n            goto label_1035;\n        }\n    }\n    \n    function cancelBid(var arg0) {\n        var var1 = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var0 = keccak256(memory[0x00:0x40]);\n    \n        if (msg.sender != storage[var0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var1 = storage[var0 + 0x06];\n        var var2 = 0x10c3;\n        var var3 = arg0;\n        func_1841(var3);\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x2a0a5f509bc9b1f09c4172bec62e98d404d2f98b3977aa9b9a2bb243671f5fe2, stack[-3]]);\n    }\n    \n    function ownership(var arg0) returns (var arg0, var r1, var r2, var r3, var r4, var r5, var r6) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        r4 = storage[temp0 + 0x04];\n        r5 = storage[temp0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r6 = storage[temp0 + 0x06];\n        return arg0, r1, r2, r3, r4, r5, r6;\n    }\n    \n    function withdrawEarnings() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function acceptBuyNowOffer(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x1268;\n        var var2 = arg0;\n        var var3 = msg.sender;\n        var1 = canAcceptBuyNow(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (msg.value != storage[var0 + 0x04]) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x12c7;\n        var2 = msg.value;\n        var3 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        func_1535(var2, var3);\n        var1 = 0x12d0;\n        var2 = arg0;\n        func_1841(var2);\n        var1 = 0x12ff;\n        var2 = arg0;\n        var3 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var4 = msg.sender;\n        func_15AB(var2, var3, var4);\n        var1 = 0x1308;\n        var2 = var0;\n        func_191F(var2);\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xfbdd8508825d37ca4a6c9a25fda096c88f19774025d4289975fe037e7581306f, stack[-2]]);\n    }\n    \n    function houseEarnings() returns (var r0) { return storage[0x02]; }\n    \n    function withdrawDeadBids() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function isOwner(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function minPrice() returns (var r0) { return 0x038d7ea4c68000; }\n    \n    function cancelBuyNowOffer(var arg0) {\n        var var0 = 0x149c;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        var0 = isOwner(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x14c1;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var1 = keccak256(memory[0x00:0x40]);\n        func_191F(var1);\n    }\n    \n    function hasOwner(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff > 0x00;\n    }\n    \n    function deadbids(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_1535(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x64;\n        var var2 = arg0;\n    \n        if (!var1) { assert(); }\n    \n        var temp0 = var2 / var1;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] + (arg0 - temp0);\n        storage[0x02] = storage[0x02] + temp0;\n    }\n    \n    function func_15AB(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x15b8;\n        var var3 = arg1;\n        var var4 = arg0;\n        var2 = isOwner(var3, var4);\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n        var temp0 = var0;\n        storage[temp0] = (arg2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp1 = arg1;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = storage[keccak256(memory[0x00:0x40])];\n        var1 = temp2;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = keccak256(memory[0x00:0x40]);\n        var3 = var1 - 0x01;\n    \n        if (var3 >= storage[var2]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n        var2 = storage[var3 + keccak256(memory[0x00:0x20])];\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var3 = keccak256(memory[0x00:0x40]);\n        var4 = storage[var0 + 0x01];\n    \n        if (var4 >= storage[var3]) { assert(); }\n    \n        memory[0x00:0x20] = var3;\n        storage[var4 + keccak256(memory[0x00:0x20])] = var2;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x1773;\n        var var5 = var2 - 0x01;\n        var4 = keccak256(memory[0x00:0x40]);\n        func_1A8A(var4, var5);\n        memory[0x00:0x20] = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = keccak256(memory[0x00:0x40]);\n        var3 = storage[var2];\n        var4 = var3 + 0x01;\n        var5 = 0x17c5;\n        var var6 = var2;\n        var var7 = var4;\n        func_19DE(var6, var7);\n        memory[0x00:0x20] = var2;\n        var temp3 = arg0;\n        storage[var3 + keccak256(memory[0x00:0x20])] = temp3;\n        memory[0x00:0x20] = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp4 = storage[keccak256(memory[0x00:0x40])] - 0x01;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40]) + 0x01] = temp4;\n    }\n    \n    function func_1841(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = storage[temp0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] + storage[temp0 + 0x06];\n        storage[temp0 + 0x06] = 0x00;\n        var temp2 = temp0 + 0x05;\n        storage[temp2] = (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n    }\n    \n    function func_191F(var arg0) {\n        var temp0 = arg0;\n        storage[temp0 + 0x04] = 0x00;\n        var temp1 = temp0 + 0x03;\n        storage[temp1] = (storage[temp1] & ~0xff) | 0x00;\n    }\n    \n    function func_194A() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_195E(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_19CD:\n                var temp4 = arg1;\n                arg1 = 0x19da;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1AB6(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_19CC:\n                    goto label_19CD;\n                } else {\n                label_19BA:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_19CC; }\n                    else { goto label_19BA; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_19CD;\n        }\n    }\n    \n    function func_19DE(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1A05:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1a04;\n            var var2 = temp3 + arg1;\n            var var1 = temp4;\n            var0 = func_1AB6(var1, var2);\n            goto label_1A05;\n        }\n    }\n    \n    function func_1A0A(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_1A79:\n                var temp4 = arg1;\n                arg1 = 0x1a86;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1AB6(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = var1;\n                var temp6 = arg2;\n                arg2 = temp5;\n                var1 = arg2 + temp6;\n            \n                if (var1 <= arg2) {\n                label_1A78:\n                    goto label_1A79;\n                } else {\n                label_1A66:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_1A78; }\n                    else { goto label_1A66; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_1A79;\n        }\n    }\n    \n    function func_1A8A(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1AB1:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1ab0;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_1AB6(var1, var2);\n            goto label_1AB1;\n        }\n    }\n    \n    function func_1AB6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1ad8;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_1AD4(arg1, var0); }\n    \n    label_1AC5:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_1AC5; }\n    \n        arg0 = func_1AD4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1AD4(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x02fc1f85) {\n            // Dispatch table entry for ownedNumbers(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0162;\n            var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = ownedNumbers(var2);\n            var temp0 = memory[0x40:0x60];\n            var2 = temp0;\n            var var3 = var2;\n            var temp1 = var3 + 0x20;\n            memory[var3:var3 + 0x20] = temp1 - var3;\n            var temp2 = var1;\n            memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n            var var4 = temp1 + 0x20;\n            var var5 = temp2 + 0x20;\n            var var6 = memory[temp2:temp2 + 0x20] * 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n            var var10 = 0x00;\n        \n            if (var10 >= var7) {\n            label_01A6:\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (var6 + var4) - temp3];\n            } else {\n            label_0193:\n                var temp4 = var10;\n                memory[var8 + temp4:var8 + temp4 + 0x20] = memory[var9 + temp4:var9 + temp4 + 0x20];\n                var10 = temp4 + 0x20;\n            \n                if (var10 >= var7) { goto label_01A6; }\n                else { goto label_0193; }\n            }\n        } else if (var0 == 0x2b1fd58a) {\n            // Dispatch table entry for acceptBid(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01db;\n            var2 = msg.data[0x04:0x24];\n            acceptBid(var2);\n            stop();\n        } else if (var0 == 0x2d087944) {\n            // Dispatch table entry for hasBuyNowOffer(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01fe;\n            var2 = msg.data[0x04:0x24];\n            var1 = hasBuyNowOffer(var2);\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = !!var1;\n            var temp6 = memory[0x40:0x60];\n            return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n        } else if (var0 == 0x30ef3d56) {\n            // Dispatch table entry for takeNumber(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0239;\n            var2 = msg.data[0x04:0x24];\n            takeNumber(var2);\n            stop();\n        } else if (var0 == 0x41883b78) {\n            // Dispatch table entry for withdrawHouseEarnings()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x024e;\n            withdrawHouseEarnings();\n            stop();\n        } else if (var0 == 0x543fd313) {\n            // Dispatch table entry for earnings(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0287;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = earnings(var2);\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = var2;\n            var temp8 = memory[0x40:0x60];\n            return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n        } else if (var0 == 0x5bd9279c) {\n            // Dispatch table entry for placeBuyNowOffer(uint256,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02c7;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            placeBuyNowOffer(var2, var3);\n            stop();\n        } else if (var0 == 0x655b97db) {\n            // Dispatch table entry for ownershipLookup(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0309;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var2 = ownershipLookup(var2, var3);\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = var2;\n            var temp10 = memory[0x40:0x60];\n            return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n        } else if (var0 == 0x7f949386) {\n            // Dispatch table entry for updateMessage(uint256,string)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0383;\n            var2 = msg.data[0x04:0x24];\n            var temp11 = msg.data[0x24:0x44] + 0x04;\n            var temp12 = msg.data[temp11:temp11 + 0x20];\n            var temp13 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp13 + (temp12 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp13:temp13 + 0x20] = temp12;\n            memory[temp13 + 0x20:temp13 + 0x20 + temp12] = msg.data[temp11 + 0x20:temp11 + 0x20 + temp12];\n            var3 = temp13;\n            updateMessage(var2, var3);\n            stop();\n        } else if (var0 == 0x81086763) {\n            // Dispatch table entry for placeNewBid(uint256)\n            var1 = 0x039b;\n            var2 = msg.data[0x04:0x24];\n            placeNewBid(var2);\n            stop();\n        } else if (var0 == 0x8df3a24c) {\n            // Dispatch table entry for canAcceptBuyNow(uint256,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03dd;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = canAcceptBuyNow(var2, var3);\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = !!var1;\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n        } else if (var0 == 0x9703ef35) {\n            // Dispatch table entry for cancelBid(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0418;\n            var2 = msg.data[0x04:0x24];\n            cancelBid(var2);\n            stop();\n        } else if (var0 == 0xa0f45b69) {\n            // Dispatch table entry for ownership(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x043b;\n            var2 = msg.data[0x04:0x24];\n            var2, var3, var4, var5, var6, var7, var8 = ownership(var2);\n            var temp16 = memory[0x40:0x60];\n            var9 = temp16;\n            memory[var9:var9 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp17 = var9 + 0x20;\n            memory[temp17:temp17 + 0x20] = var3;\n            var temp18 = temp17 + 0x20;\n            var10 = temp18;\n            var temp19 = var10 + 0x20;\n            memory[temp19:temp19 + 0x20] = !!var5;\n            var temp20 = temp19 + 0x20;\n            memory[temp20:temp20 + 0x20] = var6;\n            var temp21 = temp20 + 0x20;\n            memory[temp21:temp21 + 0x20] = var7 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp22 = temp21 + 0x20;\n            memory[temp22:temp22 + 0x20] = var8;\n            var temp23 = temp22 + 0x20;\n            memory[var10:var10 + 0x20] = temp23 - var9;\n            var temp24 = var4;\n            var var12 = temp24;\n            var temp25 = storage[var12];\n            memory[temp23:temp23 + 0x20] = (!(temp25 & 0x01) * 0x0100 - 0x01 & temp25) / 0x02;\n            var var11 = temp23 + 0x20;\n            var temp26 = storage[var12];\n            var var13 = (!(temp26 & 0x01) * 0x0100 - 0x01 & temp26) / 0x02;\n        \n            if (!var13) {\n            label_0544:\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + var11 - temp27];\n            } else if (0x1f < var13) {\n                var temp28 = var11;\n                var temp29 = temp28 + var13;\n                var11 = temp29;\n                memory[0x00:0x20] = var12;\n                var temp30 = keccak256(memory[0x00:0x20]);\n                memory[temp28:temp28 + 0x20] = storage[temp30];\n                var12 = temp30 + 0x01;\n                var13 = temp28 + 0x20;\n            \n                if (var11 <= var13) { goto label_053B; }\n            \n            label_0527:\n                var temp31 = var12;\n                var temp32 = var13;\n                memory[temp32:temp32 + 0x20] = storage[temp31];\n                var12 = temp31 + 0x01;\n                var13 = temp32 + 0x20;\n            \n                if (var11 > var13) { goto label_0527; }\n            \n            label_053B:\n                var temp33 = var11;\n                var temp34 = temp33 + (var13 - temp33 & 0x1f);\n                var13 = temp33;\n                var11 = temp34;\n                goto label_0544;\n            } else {\n                var temp35 = var11;\n                memory[temp35:temp35 + 0x20] = storage[var12] / 0x0100 * 0x0100;\n                var11 = temp35 + 0x20;\n                var13 = var13;\n                goto label_0544;\n            }\n        } else if (var0 == 0xb73c6ce9) {\n            // Dispatch table entry for withdrawEarnings()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x056c;\n            withdrawEarnings();\n            stop();\n        } else if (var0 == 0xc7daceb1) {\n            // Dispatch table entry for acceptBuyNowOffer(uint256)\n            var1 = 0x0584;\n            var2 = msg.data[0x04:0x24];\n            acceptBuyNowOffer(var2);\n            stop();\n        } else if (var0 == 0xcfe30939) {\n            // Dispatch table entry for houseEarnings()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0599;\n            var2 = houseEarnings();\n            var temp36 = memory[0x40:0x60];\n            memory[temp36:temp36 + 0x20] = var2;\n            var temp37 = memory[0x40:0x60];\n            return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n        } else if (var0 == 0xddb22537) {\n            // Dispatch table entry for withdrawDeadBids()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x05c2;\n            withdrawDeadBids();\n            stop();\n        } else if (var0 == 0xe327a6af) {\n            // Dispatch table entry for isOwner(address,uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0604;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = isOwner(var2, var3);\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = !!var1;\n            var temp39 = memory[0x40:0x60];\n            return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n        } else if (var0 == 0xe45be8eb) {\n            // Dispatch table entry for minPrice()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0631;\n            var2 = minPrice();\n            var temp40 = memory[0x40:0x60];\n            memory[temp40:temp40 + 0x20] = var2;\n            var temp41 = memory[0x40:0x60];\n            return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n        } else if (var0 == 0xf047d077) {\n            // Dispatch table entry for cancelBuyNowOffer(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0668;\n            var2 = msg.data[0x04:0x24];\n            cancelBuyNowOffer(var2);\n            stop();\n        } else if (var0 == 0xf48d60ca) {\n            // Dispatch table entry for hasOwner(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x068b;\n            var2 = msg.data[0x04:0x24];\n            var1 = hasOwner(var2);\n            var temp42 = memory[0x40:0x60];\n            memory[temp42:temp42 + 0x20] = !!var1;\n            var temp43 = memory[0x40:0x60];\n            return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n        } else if (var0 == 0xff1ad781) {\n            // Dispatch table entry for deadbids(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x06dc;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = deadbids(var2);\n            var temp44 = memory[0x40:0x60];\n            memory[temp44:temp44 + 0x20] = var2;\n            var temp45 = memory[0x40:0x60];\n            return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function ownedNumbers(var arg0) returns (var r0) {\n        var var0 = 0x06fa;\n        var0 = func_194A();\n        var var1 = 0x00;\n        var var2 = 0x0704;\n        var2 = func_194A();\n        var var3 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = var1;\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var2 = temp0;\n            var3 = 0x00;\n        \n            if (var3 >= var1) {\n            label_0800:\n                return var2;\n            } else {\n            label_077B:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x01;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = var3;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var4 = storage[var5 + keccak256(memory[0x00:0x20])];\n                var5 = var2;\n                var var6 = var3;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                var3 = var3 + 0x01;\n            \n                if (var3 >= var1) { goto label_0800; }\n                else { goto label_077B; }\n            }\n        } else {\n            var temp2 = MSIZE();\n            var temp3 = var4;\n            memory[temp2:temp2 + 0x20] = temp3;\n            memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n            var2 = temp2;\n            var3 = 0x00;\n        \n            if (var3 >= var1) { goto label_0800; }\n            else { goto label_077B; }\n        }\n    }\n    \n    function acceptBid(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0819;\n        var var3 = msg.sender;\n        var var4 = arg0;\n        var2 = isOwner(var3, var4);\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (storage[var0 + 0x06] <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (storage[var0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0;\n        var1 = storage[temp0 + 0x06];\n        var2 = 0x08ca;\n        var3 = var1;\n        var4 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        func_1535(var3, var4);\n        var2 = 0x091d;\n        var3 = arg0;\n        var temp1 = var0;\n        var4 = storage[temp1] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var5 = storage[temp1 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        func_15AB(var3, var4, var5);\n        var temp2 = var0;\n        var temp3 = temp2 + 0x05;\n        storage[temp3] = (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n        storage[temp2 + 0x06] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xeeb046b305fcff3538cfdefcb3ce223663ef84836df9830a1de00bc00817631e, stack[-3]]);\n    }\n    \n    function hasBuyNowOffer(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n    }\n    \n    function takeNumber(var arg0) {\n        var var0 = 0x09df;\n        var var1 = arg0;\n        var0 = hasOwner(var1);\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x09f5;\n        var1 = msg.sender;\n        var var2 = arg0;\n        var0 = isOwner(var1, var2);\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        var0 = temp0;\n        memory[0x40:0x60] = var0 + 0xe0;\n        memory[var0:var0 + 0x20] = msg.sender;\n        var temp1 = var0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + 0x20;\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[temp2:temp2 + 0x20] = temp3;\n        var temp4 = temp2 + 0x20;\n        memory[temp4:temp4 + 0x20] = !!0x00;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = 0x00;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var1 = temp7;\n        var temp8 = var1;\n        storage[temp8] = (memory[var0:var0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[var1 + 0x01] = memory[var0 + 0x20:var0 + 0x20 + 0x20];\n        var temp9 = memory[var0 + 0x40:var0 + 0x40 + 0x20];\n        var2 = 0x0af7;\n        var var3 = var1 + 0x02;\n        var var4 = temp9 + 0x20;\n        var var5 = memory[temp9:temp9 + 0x20];\n        var2 = func_195E(var3, var4, var5);\n        var temp10 = var0;\n        var temp11 = var1;\n        var temp12 = temp11 + 0x03;\n        storage[temp12] = !!memory[temp10 + 0x60:temp10 + 0x60 + 0x20] | (storage[temp12] & ~0xff);\n        storage[temp11 + 0x04] = memory[temp10 + 0x80:temp10 + 0x80 + 0x20];\n        var temp13 = temp11 + 0x05;\n        storage[temp13] = (memory[temp10 + 0xa0:temp10 + 0xa0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp13] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp11 + 0x06] = memory[temp10 + 0xc0:temp10 + 0xc0 + 0x20];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var0 = keccak256(memory[0x00:0x40]);\n        var1 = storage[var0];\n        var2 = var1 + 0x01;\n        var3 = 0x0bc7;\n        var5 = var2;\n        var4 = var0;\n        func_19DE(var4, var5);\n        memory[0x00:0x20] = var0;\n        var temp14 = arg0;\n        storage[var1 + keccak256(memory[0x00:0x20])] = temp14;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp15 = storage[keccak256(memory[0x00:0x40])] - 0x01;\n        memory[0x00:0x20] = temp14;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40]) + 0x01] = temp15;\n        var temp16 = memory[0x40:0x60];\n        log(memory[temp16:temp16 + memory[0x40:0x60] - temp16], [0x9ada7a4ceef780fdb0068b7de6d49551c1922466a3fdb952554f20aee9cfaa4f, stack[-4]]);\n    }\n    \n    function withdrawHouseEarnings() {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x02];\n        var0 = temp0;\n        storage[0x02] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function earnings(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function placeBuyNowOffer(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x0d3f;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var1 = isOwner(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 < 0x038d7ea4c68000) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x00;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1;\n        storage[temp1 + 0x04] = temp2;\n        var temp3 = temp1 + 0x03;\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xa0f1665b7b659537b52deec61ea64d134a3bccda74c7f4e79f2246e7a8187a8a, stack[-3]]);\n    }\n    \n    function ownershipLookup(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = arg1;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])];\n    }\n    \n    function updateMessage(var arg0, var arg1) {\n        var var0 = 0x0e14;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        var0 = isOwner(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = 0x0e48;\n        var1 = keccak256(memory[0x00:0x40]) + 0x02;\n        var var3 = memory[temp0:temp0 + 0x20];\n        var2 = temp0 + 0x20;\n        var0 = func_1A0A(var1, var2, var3);\n    }\n    \n    function placeNewBid(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x0e59;\n        var var2 = arg0;\n        var1 = hasOwner(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0e6e;\n        var2 = msg.sender;\n        var var3 = arg0;\n        var1 = isOwner(var2, var3);\n    \n        if (var1) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value < 0x038d7ea4c68000) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (msg.value <= storage[var0 + 0x06] + 0x038d7ea4c68000) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0;\n        memory[0x00:0x20] = storage[temp0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] + storage[temp0 + 0x06];\n        storage[temp0 + 0x06] = msg.value;\n        var temp2 = temp0 + 0x05;\n        storage[temp2] = msg.sender | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = msg.value;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x0fc69407039e8ba8cdd517e2a4cae9dd19697b0a500ff37a2425c59ebc649b31, stack[-2]]);\n    }\n    \n    function canAcceptBuyNow(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var1 = storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff != arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (!var1) {\n        label_1035:\n            return var1;\n        } else {\n            var1 = 0x1034;\n            var var2 = arg0;\n            var1 = hasBuyNowOffer(var2);\n            goto label_1035;\n        }\n    }\n    \n    function cancelBid(var arg0) {\n        var var1 = 0x00;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var0 = keccak256(memory[0x00:0x40]);\n    \n        if (msg.sender != storage[var0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var1 = storage[var0 + 0x06];\n        var var2 = 0x10c3;\n        var var3 = arg0;\n        func_1841(var3);\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x2a0a5f509bc9b1f09c4172bec62e98d404d2f98b3977aa9b9a2bb243671f5fe2, stack[-3]]);\n    }\n    \n    function ownership(var arg0) returns (var arg0, var r1, var r2, var r3, var r4, var r5, var r6) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        r4 = storage[temp0 + 0x04];\n        r5 = storage[temp0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r6 = storage[temp0 + 0x06];\n        return arg0, r1, r2, r3, r4, r5, r6;\n    }\n    \n    function withdrawEarnings() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function acceptBuyNowOffer(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x1268;\n        var var2 = arg0;\n        var var3 = msg.sender;\n        var1 = canAcceptBuyNow(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n    \n        if (msg.value != storage[var0 + 0x04]) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x12c7;\n        var2 = msg.value;\n        var3 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        func_1535(var2, var3);\n        var1 = 0x12d0;\n        var2 = arg0;\n        func_1841(var2);\n        var1 = 0x12ff;\n        var2 = arg0;\n        var3 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var4 = msg.sender;\n        func_15AB(var2, var3, var4);\n        var1 = 0x1308;\n        var2 = var0;\n        func_191F(var2);\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xfbdd8508825d37ca4a6c9a25fda096c88f19774025d4289975fe037e7581306f, stack[-2]]);\n    }\n    \n    function houseEarnings() returns (var r0) { return storage[0x02]; }\n    \n    function withdrawDeadBids() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function isOwner(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function minPrice() returns (var r0) { return 0x038d7ea4c68000; }\n    \n    function cancelBuyNowOffer(var arg0) {\n        var var0 = 0x149c;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        var0 = isOwner(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x14c1;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var1 = keccak256(memory[0x00:0x40]);\n        func_191F(var1);\n    }\n    \n    function hasOwner(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff > 0x00;\n    }\n    \n    function deadbids(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_1535(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = 0x64;\n        var var2 = arg0;\n    \n        if (!var1) { assert(); }\n    \n        var temp0 = var2 / var1;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] + (arg0 - temp0);\n        storage[0x02] = storage[0x02] + temp0;\n    }\n    \n    function func_15AB(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x15b8;\n        var var3 = arg1;\n        var var4 = arg0;\n        var2 = isOwner(var3, var4);\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n        var temp0 = var0;\n        storage[temp0] = (arg2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp1 = arg1;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = storage[keccak256(memory[0x00:0x40])];\n        var1 = temp2;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = keccak256(memory[0x00:0x40]);\n        var3 = var1 - 0x01;\n    \n        if (var3 >= storage[var2]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n        var2 = storage[var3 + keccak256(memory[0x00:0x20])];\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var3 = keccak256(memory[0x00:0x40]);\n        var4 = storage[var0 + 0x01];\n    \n        if (var4 >= storage[var3]) { assert(); }\n    \n        memory[0x00:0x20] = var3;\n        storage[var4 + keccak256(memory[0x00:0x20])] = var2;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x1773;\n        var var5 = var2 - 0x01;\n        var4 = keccak256(memory[0x00:0x40]);\n        func_1A8A(var4, var5);\n        memory[0x00:0x20] = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var2 = keccak256(memory[0x00:0x40]);\n        var3 = storage[var2];\n        var4 = var3 + 0x01;\n        var5 = 0x17c5;\n        var var6 = var2;\n        var var7 = var4;\n        func_19DE(var6, var7);\n        memory[0x00:0x20] = var2;\n        var temp3 = arg0;\n        storage[var3 + keccak256(memory[0x00:0x20])] = temp3;\n        memory[0x00:0x20] = arg2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp4 = storage[keccak256(memory[0x00:0x40])] - 0x01;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40]) + 0x01] = temp4;\n    }\n    \n    function func_1841(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = storage[temp0 + 0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] + storage[temp0 + 0x06];\n        storage[temp0 + 0x06] = 0x00;\n        var temp2 = temp0 + 0x05;\n        storage[temp2] = (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff) | 0x00;\n    }\n    \n    function func_191F(var arg0) {\n        var temp0 = arg0;\n        storage[temp0 + 0x04] = 0x00;\n        var temp1 = temp0 + 0x03;\n        storage[temp1] = (storage[temp1] & ~0xff) | 0x00;\n    }\n    \n    function func_194A() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_195E(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_19CD:\n                var temp4 = arg1;\n                arg1 = 0x19da;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1AB6(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_19CC:\n                    goto label_19CD;\n                } else {\n                label_19BA:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_19CC; }\n                    else { goto label_19BA; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_19CD;\n        }\n    }\n    \n    function func_19DE(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1A05:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1a04;\n            var var2 = temp3 + arg1;\n            var var1 = temp4;\n            var0 = func_1AB6(var1, var2);\n            goto label_1A05;\n        }\n    }\n    \n    function func_1A0A(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_1A79:\n                var temp4 = arg1;\n                arg1 = 0x1a86;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1AB6(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = var1;\n                var temp6 = arg2;\n                arg2 = temp5;\n                var1 = arg2 + temp6;\n            \n                if (var1 <= arg2) {\n                label_1A78:\n                    goto label_1A79;\n                } else {\n                label_1A66:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_1A78; }\n                    else { goto label_1A66; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_1A79;\n        }\n    }\n    \n    function func_1A8A(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1AB1:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1ab0;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_1AB6(var1, var2);\n            goto label_1AB1;\n        }\n    }\n    \n    function func_1AB6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1ad8;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_1AD4(arg1, var0); }\n    \n    label_1AC5:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_1AC5; }\n    \n        arg0 = func_1AD4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1AD4(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 43.61923336982727,
	"usage": {
		"completion_tokens": 619,
		"prompt_tokens": 12758,
		"total_tokens": 13377
	}
}