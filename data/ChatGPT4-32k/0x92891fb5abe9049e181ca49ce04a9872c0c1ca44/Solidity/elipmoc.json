{
	"address": "0x92891fb5abe9049e181ca49ce04a9872c0c1ca44",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on your request, here is the Solidity code corresponding to the decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract DecompiledContract {\n    mapping (address => uint256) private owner_0;\n    mapping (address => uint256) private function_selector;\n\n    function functionSelector() public payable { \n        if (msg.value != 0x104c533c000) {\n            if (function_selector[msg.sender] != 0) {\n                uint256 v0;\n                uint256 v1 = function_selector[msg.sender] / 100 * (block.timestamp - owner_0[msg.sender]) / 0x15180;\n                if (v1 > address(this).balance) {\n                    v0 = address(this).balance;\n                } else {\n                    v0 = v1;\n                }\n                (bool success,) = msg.sender.call{value: v0, gas: 2300 * (v0 == 0 ? 1 : 0)}(\"\");\n                require(success);\n            }\n            owner_0[msg.sender] = block.timestamp;\n            function_selector[msg.sender] += msg.value;\n        } else {\n            (bool success1,) = payable(0x85889bbece41bf106675a9ae3b70ee78d86c1649).call{value: 10 * function_selector[address(0)] / 100, gas: 2300 * (10 * function_selector[address(0)] / 100 == 0 ? 1 : 0)}(\"\");\n            require(success1);\n            (bool success2,) = payable(address(0)).call{value: function_selector[address(0)] - 10 * function_selector[address(0)] / 100, gas: 2300 * (function_selector[address(0)] - 10 * function_selector[address(0)] / 100 == 0 ? 1 : 0)}(\"\");\n            require(success2);\n            owner_0[address(0)] = 0;\n            function_selector[address(0)] = 0;\n        }\n    }\n}\n```\nPlease note that:\n- The original code was using raw addresses (`0x0`, `0x85889bbece41bf106675a9ae3b70ee78d86c1649`) directly in the code. It's replaced with the `address(0)` and `payable(0x85889bbece41bf106675a9ae3b70ee78d86c1649)` respectively.\n- `this.balance` has been replaced with `address(this).balance` which is the correct way of getting contract's balance since Solidity 0.5.0.\n- The raw call function `call().value(v0).gas(2300 * !v0)` is replaced with the more up-to-date syntax `call{value: v0, gas: 2300 * (v0 == 0 ? 1 : 0)}(\"\")`.\n- The variables `v0`, `v1`, `v2`, `v3`, `v4`, `v5` from the original code are not all used. So, in the Solidity code I've omitted the unused ones.\n- The `msg.value != 0x104c533c000` is a condition that checks if the sent value is not equal to a specific value. The value `0x104c533c000` is a hexadecimal value, you might need to convert it to a decimal equivalent depending on your needs.\n- The `require(success);` statement is used to ensure that the transfer of ether was successful. If the ether transfer fails for any reason, the entire transaction is reverted.",
				"role": "assistant"
			}
		}
	],
	"created": 1701466601,
	"id": "chatcmpl-8R5TdkZHq75New5HVmYM15T7irKzj",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.12 23:06 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) owner_0; // STORAGE[0x0]\nmapping (uint256 => [uint256]) ___function_selector__; // STORAGE[0x1]\n\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__() public payable { \n    if (0x104c533c000 != msg.value) {\n        if (___function_selector__[msg.sender]) {\n            v0 = v1 = ___function_selector__[msg.sender] / 100 * (block.timestamp - owner_0[msg.sender]) / 0x15180;\n            if (v1 > this.balance) {\n                v0 = v2 = this.balance;\n            }\n            v3 = msg.sender.call().value(v0).gas(2300 * !v0);\n            require(v3); // checks call status, propagates error data on error\n        }\n        owner_0[msg.sender] = block.timestamp;\n        ___function_selector__[msg.sender] += msg.value;\n    } else {\n        v4 = 0x85889bbece41bf106675a9ae3b70ee78d86c1649.call().value(10 * ___function_selector__[0] / 100).gas(2300 * !(10 * ___function_selector__[0] / 100));\n        require(v4); // checks call status, propagates error data on error\n        v5 = 0x0.call().value(___function_selector__[0] - 10 * ___function_selector__[0] / 100).gas(2300 * !(___function_selector__[0] - 10 * ___function_selector__[0] / 100));\n        require(v5); // checks call status, propagates error data on error\n        owner_0[0] = 0;\n        ___function_selector__[0] = 0;\n    }\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 23:06 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) owner_0; // STORAGE[0x0]\nmapping (uint256 => [uint256]) ___function_selector__; // STORAGE[0x1]\n\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__() public payable { \n    if (0x104c533c000 != msg.value) {\n        if (___function_selector__[msg.sender]) {\n            v0 = v1 = ___function_selector__[msg.sender] / 100 * (block.timestamp - owner_0[msg.sender]) / 0x15180;\n            if (v1 > this.balance) {\n                v0 = v2 = this.balance;\n            }\n            v3 = msg.sender.call().value(v0).gas(2300 * !v0);\n            require(v3); // checks call status, propagates error data on error\n        }\n        owner_0[msg.sender] = block.timestamp;\n        ___function_selector__[msg.sender] += msg.value;\n    } else {\n        v4 = 0x85889bbece41bf106675a9ae3b70ee78d86c1649.call().value(10 * ___function_selector__[0] / 100).gas(2300 * !(10 * ___function_selector__[0] / 100));\n        require(v4); // checks call status, propagates error data on error\n        v5 = 0x0.call().value(___function_selector__[0] - 10 * ___function_selector__[0] / 100).gas(2300 * !(___function_selector__[0] - 10 * ___function_selector__[0] / 100));\n        require(v5); // checks call status, propagates error data on error\n        owner_0[0] = 0;\n        ___function_selector__[0] = 0;\n    }\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 23:06 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) owner_0; // STORAGE[0x0]\nmapping (uint256 => [uint256]) ___function_selector__; // STORAGE[0x1]\n\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__() public payable { \n    if (0x104c533c000 != msg.value) {\n        if (___function_selector__[msg.sender]) {\n            v0 = v1 = ___function_selector__[msg.sender] / 100 * (block.timestamp - owner_0[msg.sender]) / 0x15180;\n            if (v1 > this.balance) {\n                v0 = v2 = this.balance;\n            }\n            v3 = msg.sender.call().value(v0).gas(2300 * !v0);\n            require(v3); // checks call status, propagates error data on error\n        }\n        owner_0[msg.sender] = block.timestamp;\n        ___function_selector__[msg.sender] += msg.value;\n    } else {\n        v4 = 0x85889bbece41bf106675a9ae3b70ee78d86c1649.call().value(10 * ___function_selector__[0] / 100).gas(2300 * !(10 * ___function_selector__[0] / 100));\n        require(v4); // checks call status, propagates error data on error\n        v5 = 0x0.call().value(___function_selector__[0] - 10 * ___function_selector__[0] / 100).gas(2300 * !(___function_selector__[0] - 10 * ___function_selector__[0] / 100));\n        require(v5); // checks call status, propagates error data on error\n        owner_0[0] = 0;\n        ___function_selector__[0] = 0;\n    }\n}\n.",
	"status": "1",
	"time_cost": 30.506186962127686,
	"usage": {
		"completion_tokens": 768,
		"prompt_tokens": 493,
		"total_tokens": 1261
	}
}