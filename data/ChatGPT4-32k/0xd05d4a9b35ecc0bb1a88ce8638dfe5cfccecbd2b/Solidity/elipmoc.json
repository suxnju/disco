{
	"address": "0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity version of the provided code:\n\n```solidity\npragma solidity ^0.8.7;\n\ncontract StakingContract {\n    uint256[] private _domain;\n    mapping (address => uint256) private _stakeOf;\n    address private _changeOwner;\n    address private _acceptOwnership;\n    uint8 private _fee;\n    uint32 private _stakers;\n\n    event Staked(address indexed staker, uint256 amount);\n    event Transfered(address indexed from, address indexed to, uint256 amount);\n\n    function withdraw(uint256 amount) public {\n        require(amount > 100 && amount <= _stakeOf[msg.sender]);\n        _stakeOf[msg.sender] -= amount;\n        if (msg.sender != _changeOwner) {\n            uint256 fee = calculateFee(amount);\n            payable(msg.sender).transfer(amount - fee);\n        } else {\n            payable(_changeOwner).transfer(amount);\n        }\n    }\n\n    function stakeOf(address user) public view returns (uint256) {\n        return _stakeOf[user];\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == _acceptOwnership);\n        _changeOwner = _acceptOwnership;\n    }\n\n    function changeOwner(address newOwner) public {\n        require(msg.sender == _changeOwner);\n        _acceptOwnership = newOwner;\n    }\n\n    function transfer(address to, uint256 amount) public {\n        require(to != address(0) && amount > 100 && amount <= _stakeOf[msg.sender]);\n        _stakeOf[msg.sender] -= amount;\n        uint256 fee = calculateFee(amount);\n        if (_stakeOf[to] == 0) {\n            _stakers += 1;\n        }\n        _stakeOf[to] += (amount - fee);\n        emit Transfered(msg.sender, to, amount - fee);\n    }\n\n    function domain() public view returns (uint256[] memory) {\n        return _domain;\n    }\n\n    function fee() public view returns (uint8) {\n        return _fee;\n    }\n\n    function stakers() public view returns (uint32) {\n        return _stakers;\n    }\n\n    function calculateFee(uint256 amount) private returns (uint256) {\n        uint256 fee = amount * _fee / 100;\n        if (msg.sender != _changeOwner) {\n            payable(_changeOwner).transfer(fee);\n        }\n        return fee;\n    }\n\n    receive() external payable {\n        require(msg.value >= 100);\n        if (_stakeOf[msg.sender] == 0) {\n            _stakers += 1;\n        }\n        uint256 fee = calculateFee(msg.value);\n        _stakeOf[msg.sender] += (msg.value - fee);\n        emit Staked(msg.sender, msg.value);\n    }\n}\n```\n\nThis contract enables users to stake their ether. It also allows the contract owner to change the ownership of the contract. The staking balance of any address can be queried. A staker can also withdraw their staked amount (if it exceeds 100 wei) and transfer their staked amount to another address. The contract deducts a fee from each transaction, which is transferred to the contract owner. The contract also keeps track of the number of active stakers.",
				"role": "assistant"
			}
		}
	],
	"created": 1701465679,
	"id": "chatcmpl-8R5ElkyBuQODNaUWpkjIT8ZP06ld2",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.26 11:18 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _domain; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _stakeOf; // STORAGE[0x3]\naddress _changeOwner; // STORAGE[0x0] bytes 0 to 19\naddress _acceptOwnership; // STORAGE[0x1] bytes 0 to 19\nuint8 _fee; // STORAGE[0x1] bytes 20 to 20\nuint32 _stakers; // STORAGE[0x1] bytes 21 to 24\n\n// Events\nStaked(address, uint256);\nTransfered(address, address, uint256);\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = varg0 > 100;\n    if (v1) {\n        v0 = v2 = varg0 <= _stakeOf[msg.sender];\n    }\n    require(v0);\n    _stakeOf[msg.sender] = _stakeOf[msg.sender] - varg0;\n    if (msg.sender != _changeOwner) {\n        v3 = 0x43f(varg0);\n        v4 = msg.sender.call().value(varg0 - v3).gas(!(varg0 - v3) * 2300);\n        require(v4); // checks call status, propagates error data on error\n    } else {\n        v5 = _changeOwner.call().value(varg0).gas(!varg0 * 2300);\n        require(v5); // checks call status, propagates error data on error\n    }\n    return 1;\n}\n\nfunction stakeOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _stakeOf[varg0];\n}\n\nfunction acceptOwnership() public nonPayable { \n    if (msg.sender == _acceptOwnership) {\n        _changeOwner = _acceptOwnership;\n    }\n}\n\nfunction changeOwner(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _changeOwner);\n    _acceptOwnership = varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    v0 = v1 = varg0 != 0;\n    if (v1) {\n        v0 = v2 = varg1 > 100;\n    }\n    if (v0) {\n        v0 = v3 = varg1 <= _stakeOf[msg.sender];\n    }\n    require(v0);\n    _stakeOf[msg.sender] = _stakeOf[msg.sender] - varg1;\n    v4 = 0x43f(varg1);\n    if (_stakeOf[varg0] == 0) {\n        _stakers += 1;\n    }\n    _stakeOf[varg0] = _stakeOf[varg0] + (varg1 - v4);\n    emit Transfered(msg.sender, varg0, varg1 - v4);\n    return 1;\n}\n\nfunction domain() public nonPayable { \n    v0 = new bytes[](_domain.length);\n    v1 = v2 = v0.data;\n    if (_domain.length) {\n        if (31 < _domain.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _domain.length <= v1);\n        } else {\n            MEM[v2] = _domain.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction fee() public nonPayable { \n    return _fee;\n}\n\nfunction stakers() public nonPayable { \n    return _stakers;\n}\n\nfunction 0x43f(uint256 varg0) private { \n    if (msg.sender != _changeOwner) {\n        v0 = v1 = varg0 * _fee / 100;\n        v2 = _changeOwner.call().value(v1).gas(!v1 * 2300);\n        require(v2); // checks call status, propagates error data on error\n    } else {\n        v0 = v3 = 0;\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    require(msg.value >= 100);\n    if (_stakeOf[msg.sender] == 0) {\n        _stakers += 1;\n    }\n    v0 = 0x43f(msg.value);\n    _stakeOf[msg.sender] = _stakeOf[msg.sender] + (msg.value - v0);\n    emit Staked(msg.sender, msg.value);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0xa9059cbb > function_selector >> 224) {\n            if (0x2e1a7d4d == function_selector >> 224) {\n                withdraw(uint256);\n            } else if (0x42623360 == function_selector >> 224) {\n                stakeOf(address);\n            } else if (0x79ba5097 == function_selector >> 224) {\n                acceptOwnership();\n            } else if (0xa6f9dae1 == function_selector >> 224) {\n                changeOwner(address);\n            }\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xc2fb26a6 == function_selector >> 224) {\n            domain();\n        } else if (0xddca3f43 == function_selector >> 224) {\n            fee();\n        } else if (0xfed1252a == function_selector >> 224) {\n            stakers();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 11:18 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _domain; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _stakeOf; // STORAGE[0x3]\naddress _changeOwner; // STORAGE[0x0] bytes 0 to 19\naddress _acceptOwnership; // STORAGE[0x1] bytes 0 to 19\nuint8 _fee; // STORAGE[0x1] bytes 20 to 20\nuint32 _stakers; // STORAGE[0x1] bytes 21 to 24\n\n// Events\nStaked(address, uint256);\nTransfered(address, address, uint256);\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = varg0 > 100;\n    if (v1) {\n        v0 = v2 = varg0 <= _stakeOf[msg.sender];\n    }\n    require(v0);\n    _stakeOf[msg.sender] = _stakeOf[msg.sender] - varg0;\n    if (msg.sender != _changeOwner) {\n        v3 = 0x43f(varg0);\n        v4 = msg.sender.call().value(varg0 - v3).gas(!(varg0 - v3) * 2300);\n        require(v4); // checks call status, propagates error data on error\n    } else {\n        v5 = _changeOwner.call().value(varg0).gas(!varg0 * 2300);\n        require(v5); // checks call status, propagates error data on error\n    }\n    return 1;\n}\n\nfunction stakeOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _stakeOf[varg0];\n}\n\nfunction acceptOwnership() public nonPayable { \n    if (msg.sender == _acceptOwnership) {\n        _changeOwner = _acceptOwnership;\n    }\n}\n\nfunction changeOwner(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _changeOwner);\n    _acceptOwnership = varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    v0 = v1 = varg0 != 0;\n    if (v1) {\n        v0 = v2 = varg1 > 100;\n    }\n    if (v0) {\n        v0 = v3 = varg1 <= _stakeOf[msg.sender];\n    }\n    require(v0);\n    _stakeOf[msg.sender] = _stakeOf[msg.sender] - varg1;\n    v4 = 0x43f(varg1);\n    if (_stakeOf[varg0] == 0) {\n        _stakers += 1;\n    }\n    _stakeOf[varg0] = _stakeOf[varg0] + (varg1 - v4);\n    emit Transfered(msg.sender, varg0, varg1 - v4);\n    return 1;\n}\n\nfunction domain() public nonPayable { \n    v0 = new bytes[](_domain.length);\n    v1 = v2 = v0.data;\n    if (_domain.length) {\n        if (31 < _domain.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _domain.length <= v1);\n        } else {\n            MEM[v2] = _domain.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction fee() public nonPayable { \n    return _fee;\n}\n\nfunction stakers() public nonPayable { \n    return _stakers;\n}\n\nfunction 0x43f(uint256 varg0) private { \n    if (msg.sender != _changeOwner) {\n        v0 = v1 = varg0 * _fee / 100;\n        v2 = _changeOwner.call().value(v1).gas(!v1 * 2300);\n        require(v2); // checks call status, propagates error data on error\n    } else {\n        v0 = v3 = 0;\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    require(msg.value >= 100);\n    if (_stakeOf[msg.sender] == 0) {\n        _stakers += 1;\n    }\n    v0 = 0x43f(msg.value);\n    _stakeOf[msg.sender] = _stakeOf[msg.sender] + (msg.value - v0);\n    emit Staked(msg.sender, msg.value);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0xa9059cbb > function_selector >> 224) {\n            if (0x2e1a7d4d == function_selector >> 224) {\n                withdraw(uint256);\n            } else if (0x42623360 == function_selector >> 224) {\n                stakeOf(address);\n            } else if (0x79ba5097 == function_selector >> 224) {\n                acceptOwnership();\n            } else if (0xa6f9dae1 == function_selector >> 224) {\n                changeOwner(address);\n            }\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xc2fb26a6 == function_selector >> 224) {\n            domain();\n        } else if (0xddca3f43 == function_selector >> 224) {\n            fee();\n        } else if (0xfed1252a == function_selector >> 224) {\n            stakers();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 11:18 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _domain; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _stakeOf; // STORAGE[0x3]\naddress _changeOwner; // STORAGE[0x0] bytes 0 to 19\naddress _acceptOwnership; // STORAGE[0x1] bytes 0 to 19\nuint8 _fee; // STORAGE[0x1] bytes 20 to 20\nuint32 _stakers; // STORAGE[0x1] bytes 21 to 24\n\n// Events\nStaked(address, uint256);\nTransfered(address, address, uint256);\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = varg0 > 100;\n    if (v1) {\n        v0 = v2 = varg0 <= _stakeOf[msg.sender];\n    }\n    require(v0);\n    _stakeOf[msg.sender] = _stakeOf[msg.sender] - varg0;\n    if (msg.sender != _changeOwner) {\n        v3 = 0x43f(varg0);\n        v4 = msg.sender.call().value(varg0 - v3).gas(!(varg0 - v3) * 2300);\n        require(v4); // checks call status, propagates error data on error\n    } else {\n        v5 = _changeOwner.call().value(varg0).gas(!varg0 * 2300);\n        require(v5); // checks call status, propagates error data on error\n    }\n    return 1;\n}\n\nfunction stakeOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _stakeOf[varg0];\n}\n\nfunction acceptOwnership() public nonPayable { \n    if (msg.sender == _acceptOwnership) {\n        _changeOwner = _acceptOwnership;\n    }\n}\n\nfunction changeOwner(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _changeOwner);\n    _acceptOwnership = varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    v0 = v1 = varg0 != 0;\n    if (v1) {\n        v0 = v2 = varg1 > 100;\n    }\n    if (v0) {\n        v0 = v3 = varg1 <= _stakeOf[msg.sender];\n    }\n    require(v0);\n    _stakeOf[msg.sender] = _stakeOf[msg.sender] - varg1;\n    v4 = 0x43f(varg1);\n    if (_stakeOf[varg0] == 0) {\n        _stakers += 1;\n    }\n    _stakeOf[varg0] = _stakeOf[varg0] + (varg1 - v4);\n    emit Transfered(msg.sender, varg0, varg1 - v4);\n    return 1;\n}\n\nfunction domain() public nonPayable { \n    v0 = new bytes[](_domain.length);\n    v1 = v2 = v0.data;\n    if (_domain.length) {\n        if (31 < _domain.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _domain.length <= v1);\n        } else {\n            MEM[v2] = _domain.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction fee() public nonPayable { \n    return _fee;\n}\n\nfunction stakers() public nonPayable { \n    return _stakers;\n}\n\nfunction 0x43f(uint256 varg0) private { \n    if (msg.sender != _changeOwner) {\n        v0 = v1 = varg0 * _fee / 100;\n        v2 = _changeOwner.call().value(v1).gas(!v1 * 2300);\n        require(v2); // checks call status, propagates error data on error\n    } else {\n        v0 = v3 = 0;\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    require(msg.value >= 100);\n    if (_stakeOf[msg.sender] == 0) {\n        _stakers += 1;\n    }\n    v0 = 0x43f(msg.value);\n    _stakeOf[msg.sender] = _stakeOf[msg.sender] + (msg.value - v0);\n    emit Staked(msg.sender, msg.value);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0xa9059cbb > function_selector >> 224) {\n            if (0x2e1a7d4d == function_selector >> 224) {\n                withdraw(uint256);\n            } else if (0x42623360 == function_selector >> 224) {\n                stakeOf(address);\n            } else if (0x79ba5097 == function_selector >> 224) {\n                acceptOwnership();\n            } else if (0xa6f9dae1 == function_selector >> 224) {\n                changeOwner(address);\n            }\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xc2fb26a6 == function_selector >> 224) {\n            domain();\n        } else if (0xddca3f43 == function_selector >> 224) {\n            fee();\n        } else if (0xfed1252a == function_selector >> 224) {\n            stakers();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 37.857550859451294,
	"usage": {
		"completion_tokens": 668,
		"prompt_tokens": 1523,
		"total_tokens": 2191
	}
}