{
	"address": "0x30cefbcb5c26a5b19a019092ab8d09f8739c904f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is the Solidity code based on the provided decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) public allowed;\n    mapping(address => bool) public kycAddresses;\n    address public owner;\n    address public newOwner;\n    address public veredictum;\n    uint256 public totalSupply;\n    uint256 public etherRaised;\n\n    function proxyPurchase(address _address) public returns (bool success) {\n        require(msg.data.length != 0);\n        require(kycAddresses[_address] == true);\n        balances[_address] += msg.value;\n        etherRaised += msg.value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);\n        require(allowed[_from][_to] >= _value);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function changeVeredictum(address _newVeredictum) public {\n        require(msg.sender == owner);\n        veredictum = _newVeredictum;\n    }\n\n    function addKycAddress(address _address, bool _state) public {\n        require(msg.sender == owner);\n        kycAddresses[_address] = _state;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;\n    }\n\n    function changeOwner(address _newOwner) public {\n        require(msg.sender == owner);\n        newOwner = _newOwner;\n    }\n}\n```\n\nPlease note that the Solidity code provided is a simplification of the decompiled EVM bytecode. Some of the original functionality might not be perfectly reflected, such as the exact structure of the data storage or the detailed control flows in the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474568,
	"id": "chatcmpl-8MvP6ALsdTPvTl5SlMN6CRl4Zb2c6",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_021F:\n            var var0 = 0x0230;\n            var var1 = 0x022c;\n            var var2 = msg.sender;\n            var1 = proxyPurchase(var2);\n            func_022C(var1);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0245;\n                var2 = name();\n            \n            label_0245:\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var6 = temp2 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0282:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_0272:\n                    var temp8 = var11;\n                    memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0282; }\n                    else { goto label_0272; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_02DF:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = !!var1;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = totalSupply();\n            \n            label_0306:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x2267b2e3) {\n                // Dispatch table entry for veredictum()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032b;\n                var2 = veredictum();\n            \n            label_032B:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var temp15 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp15 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp15;\n                var4 = msg.data[0x44:0x64];\n                var5 = 0x00;\n            \n                if (storage[var5] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n            \n                if (!(storage[0x05] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var6 = 0x0d68;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var6 = transferFrom(var7, var8, var9);\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x06] & temp16 != temp16 & var3) {\n                label_0E04:\n                    var5 = 0x01;\n                    storage[0x00] = storage[0x00] & ~0xff;\n                    var1 = var5;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var6 = storage[0x06] & 0x02 ** 0xa0 - 0x01;\n                    var7 = 0x25fda176;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = (var7 & 0xffffffff) * 0x02 ** 0xe0;\n                    memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = msg.sender;\n                    memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = var4;\n                    var8 = temp17 + 0x44;\n                    var9 = 0x20;\n                    var10 = memory[0x40:0x60];\n                    var11 = var8 - var10;\n                    var var12 = var10;\n                    var var13 = 0x00;\n                    var var14 = var6;\n                \n                    if (!address(var14).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp18;\n                    temp18, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas - 0x02c6).value(var13)(memory[var12:var12 + var11]);\n                \n                    if (!temp18) { revert(memory[0x00:0x00]); }\n                \n                    if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { goto label_0E04; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0396;\n                var2 = decimals();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2 & 0xff;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x35a063b4) {\n                // Dispatch table entry for abort()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = abort();\n                goto label_02DF;\n            } else if (var0 == 0x372c6533) {\n                // Dispatch table entry for START_DATE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = START_DATE();\n                goto label_0306;\n            } else if (var0 == 0x39f95e63) {\n                // Dispatch table entry for finaliseICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = finaliseICO();\n                goto label_02DF;\n            } else if (var0 == 0x43dbb2de) {\n                // Dispatch table entry for MAX_ETH_FUND()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MAX_ETH_FUND();\n                goto label_0306;\n            } else if (var0 == 0x4449307b) {\n                // Dispatch table entry for addKycAddress(address,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                var1 = addKycAddress(var2, var3);\n                goto label_02DF;\n            } else if (var0 == 0x4a5dddd2) {\n                // Dispatch table entry for proxyPurchase(address)\n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = proxyPurchase(var2);\n                goto label_02DF;\n            } else if (var0 == 0x545599ff) {\n                // Dispatch table entry for END_DATE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = END_DATE();\n                goto label_0306;\n            } else if (var0 == 0x636544be) {\n                // Dispatch table entry for changeVeredictum(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = changeVeredictum(var2);\n                goto label_02DF;\n            } else if (var0 == 0x664a1ad6) {\n                // Dispatch table entry for fundWallet()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032b;\n                var2 = fundWallet();\n                goto label_032B;\n            } else if (var0 == 0x67de81e8) {\n                // Dispatch table entry for fundSucceeded()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = fundSucceeded();\n                goto label_02DF;\n            } else if (var0 == 0x6e62de19) {\n                // Dispatch table entry for fundFailed()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = fundFailed();\n                goto label_02DF;\n            } else if (var0 == 0x6eabcd69) {\n                // Dispatch table entry for __abortFuse()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = __abortFuse();\n                goto label_02DF;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_0306;\n            } else if (var0 == 0x71140942) {\n                // Dispatch table entry for MIN_ETH_FUND()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MIN_ETH_FUND();\n                goto label_0306;\n            } else if (var0 == 0x79099e15) {\n                // Dispatch table entry for MAX_USD_FUND()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MAX_USD_FUND();\n                goto label_0306;\n            } else if (var0 == 0x79ba5097) {\n                // Dispatch table entry for acceptOwnership()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = acceptOwnership();\n                goto label_02DF;\n            } else if (var0 == 0x83197ef0) {\n                // Dispatch table entry for destroy()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0230;\n            \n                if (storage[0x00] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                var temp21 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x0c] & temp21 != temp21 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                if (storage[0x05] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                if (!address(this).balance) { selfdestruct(storage[0x0c] & 0x02 ** 0xa0 - 0x01); }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x835fa3ac) {\n                // Dispatch table entry for icoSuccessful()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = icoSuccessful();\n                goto label_02DF;\n            } else if (var0 == 0x8bace235) {\n                // Dispatch table entry for kycAddresses(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = kycAddresses(var2);\n                goto label_02DF;\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032b;\n                var2 = owner();\n                goto label_032B;\n            } else if (var0 == 0x946d1480) {\n                // Dispatch table entry for ethToUsd(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24];\n                var1 = usdRaised(var2);\n                goto label_0306;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0245;\n                var2 = symbol();\n                goto label_0245;\n            } else if (var0 == 0x9c70b899) {\n                // Dispatch table entry for KYC_ETH_LMT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = KYC_ETH_LMT();\n                goto label_0306;\n            } else if (var0 == 0xa4c89322) {\n                // Dispatch table entry for ethToTokens(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24];\n                var1 = ethToTokens(var2);\n                goto label_0306;\n            } else if (var0 == 0xa6f9dae1) {\n                // Dispatch table entry for changeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = changeOwner(var2);\n                goto label_02DF;\n            } else if (var0 == 0xa82776dd) {\n                // Dispatch table entry for etherContributed(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = etherContributed(var2);\n                goto label_0306;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_02DF;\n            } else if (var0 == 0xb4495b7d) {\n                // Dispatch table entry for MIN_USD_FUND()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MIN_USD_FUND();\n                goto label_0306;\n            } else if (var0 == 0xb9408373) {\n                // Dispatch table entry for USD_PER_ETH()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = USD_PER_ETH();\n                goto label_0306;\n            } else if (var0 == 0xbc6e6604) {\n                // Dispatch table entry for TOKENS_PER_ETH()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = TOKENS_PER_ETH();\n                goto label_0306;\n            } else if (var0 == 0xbcecf667) {\n                // Dispatch table entry for usdToEth(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24];\n                var1 = usdToEth(var2);\n                goto label_0306;\n            } else if (var0 == 0xcd72ab69) {\n                // Dispatch table entry for etherRaised()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = etherRaised();\n                goto label_0306;\n            } else if (var0 == 0xd399354b) {\n                // Dispatch table entry for KYC_USD_LMT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = KYC_USD_LMT();\n                goto label_0306;\n            } else if (var0 == 0xd4ee1d90) {\n                // Dispatch table entry for newOwner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032b;\n                var2 = newOwner();\n                goto label_032B;\n            } else if (var0 == 0xd5356b7d) {\n                // Dispatch table entry for TOKENS_PER_USD()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = TOKENS_PER_USD();\n                goto label_0306;\n            } else if (var0 == 0xdc39d06d) {\n                // Dispatch table entry for transferAnyERC20Token(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transferAnyERC20Token(var2, var3);\n                goto label_02DF;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var temp22 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp22 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp22;\n                var1 = allowance(var2, var3);\n                goto label_0306;\n            } else if (var0 == 0xeadd94ec) {\n                // Dispatch table entry for usdRaised()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = 0x00;\n                var3 = 0x10b3;\n                var4 = storage[0x07];\n                var3 = usdRaised(var4);\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xf47c84c5) {\n                // Dispatch table entry for MAX_TOKENS()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MAX_TOKENS();\n                goto label_0306;\n            } else if (var0 == 0xf90c3f27) {\n                // Dispatch table entry for FUNDING_PERIOD()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = FUNDING_PERIOD();\n                goto label_0306;\n            } else if (var0 == 0xfa89401a) {\n                // Dispatch table entry for refund(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = refund(var2);\n                goto label_02DF;\n            } else { goto label_021F; }\n        }\n    }\n    \n    function func_022C(var arg0) {}\n    \n    function proxyPurchase(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[var1] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0ad9;\n        var2 = fundFailed();\n    \n        if (var2) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (block.timestamp > storage[0x0e]) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) {\n        label_0B8E:\n            var2 = 0x0b98;\n            var var3 = msg.value;\n            var2 = ethToTokens(var3);\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0bb2;\n            var3 = storage[0x0d] & 0x02 ** 0xa0 - 0x01;\n            var var4 = arg0;\n            var var5 = var1;\n            var2 = func_1897(var3, var4, var5);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x09;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n            var2 = 0x0bdc;\n            var4 = msg.value;\n            var2 = func_1883(var3, var4);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x09;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n            var3 = storage[0x07];\n            var2 = 0x0c08;\n            var4 = msg.value;\n            var2 = func_1883(var3, var4);\n            storage[0x07] = var2;\n        \n            if (storage[0x07] <= 0x108b2a2c28029094000000 / 0x0102) { return 0x01; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (block.timestamp >= 0x59916690) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x09;\n            var2 = 0x021e19e0c9bab2400000 / 0x0102;\n            var3 = 0x0b83;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = msg.value;\n            var3 = func_1883(var4, var5);\n        \n            if (var3 <= var2) { goto label_0B8E; }\n            else { revert(memory[0x00:0x00]); }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x0a];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x0a;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0CCE:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0CC5; }\n        \n        label_0CB1:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0CB1; }\n        \n        label_0CC5:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0CCE;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0CCE;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x05] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0d07;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_1994(var2, var3);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function veredictum() returns (var r0) { return storage[0x06] & 0x02 ** 0xa0 - 0x01; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function abort() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x05] = storage[0x05] & ~0xff;\n        return 0x01;\n    }\n    \n    function START_DATE() returns (var r0) { return 0x59916690; }\n    \n    function finaliseICO() returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n        var var1 = 0x0ebf;\n        var1 = fundSucceeded();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        storage[0x05] = (storage[0x05] & ~0xff00) | 0x0100;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0x8c9a4f13b67cb64d7c6aa1ae0c9bf07694af521a28b93e7060020810ab4bc59f, storage[0x0d] & 0x02 ** 0xa0 - 0x01, address(this).balance]);\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        var temp4 = address(address(this) & temp3).balance;\n        var temp5 = memory[0x40:0x60];\n        var temp6;\n        temp6, memory[temp5:temp5 + 0x00] = address(temp3 & storage[0x0d]).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp5:temp5 + memory[0x40:0x60] - temp5]);\n    \n        if (!temp6) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff;\n        return 0x01;\n    }\n    \n    function MAX_ETH_FUND() returns (var r0) { return 0x108b2a2c28029094000000 / 0x0102; }\n    \n    function addKycAddress(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0faa;\n        var1 = fundFailed();\n    \n        if (var1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x08;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = !!arg1;\n        storage[temp2] = temp3 | (storage[temp2] & ~0xff);\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xccc39d7dc7461a69d6b86c0867c4cc1879b70e7239ed223f1ae0eec7036bfdad, stack[-3] & 0x02 ** 0xa0 - 0x01, !!stack[-2]]);\n        return 0x01;\n    }\n    \n    function END_DATE() returns (var r0) { return storage[0x0e]; }\n    \n    function changeVeredictum(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x06] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x06] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function fundWallet() returns (var r0) { return storage[0x0d] & 0x02 ** 0xa0 - 0x01; }\n    \n    function fundSucceeded() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1094;\n        var1 = fundFailed();\n        var temp0 = !var1;\n        var1 = temp0;\n    \n        if (!var1) {\n        label_10B3:\n            return var1;\n        } else {\n            var1 = storage[0x07] >= 0x01a784379d99db42000000 / 0x0102;\n            goto label_10B3;\n        }\n    }\n    \n    function fundFailed() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !(storage[0x05] & 0xff);\n    \n        if (var1) {\n        label_10B3:\n            return var1;\n        } else {\n            var1 = block.timestamp > storage[0x0e];\n        \n            if (!var1) { goto label_10B3; }\n            else { return storage[0x07] < 0x01a784379d99db42000000 / 0x0102; }\n        }\n    }\n    \n    function __abortFuse() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function MIN_ETH_FUND() returns (var r0) {\n        r0 = 0x0102;\n        var var1 = 0x01a784379d99db42000000;\n        return var1 / r0;\n    }\n    \n    function MAX_USD_FUND() returns (var r0) { return 0x01312d00; }\n    \n    function acceptOwnership() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] / 0x010000 & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0x2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e, storage[0x0c] & 0x02 ** 0xa0 - 0x01, storage[0x05] / 0x010000 & 0x02 ** 0xa0 - 0x01]);\n        storage[0x0c] = (storage[0x0c] & ~0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x05] / 0x010000 & 0x02 ** 0xa0 - 0x01);\n        return 0x01;\n    }\n    \n    function icoSuccessful() returns (var r0) { return storage[0x05] / 0x0100 & 0xff; }\n    \n    function kycAddresses(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function owner() returns (var r0) { return storage[0x0c] & 0x02 ** 0xa0 - 0x01; }\n    \n    function usdRaised(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12af;\n        var var2 = 0x0de0b6b3a7640000;\n        var var3 = 0x12a3;\n        var var4 = 0x0102;\n        var var5 = arg0;\n        var3 = func_1AA9(var4, var5);\n        return func_12A3(var2, var3);\n    }\n    \n    function func_12A3(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = arg1;\n        var var2 = arg0;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x0b];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x0b;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0CCE:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0CC5; }\n        \n        label_0CB1:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0CB1; }\n        \n        label_0CC5:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0CCE;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0CCE;\n        }\n    }\n    \n    function KYC_ETH_LMT() returns (var r0) {\n        r0 = 0x0102;\n        var var1 = 0x021e19e0c9bab2400000;\n        return var1 / r0;\n    }\n    \n    function ethToTokens(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x137a;\n        var var4 = arg0;\n        var3 = usdRaised(var4);\n        var1 = var3;\n    \n        if (var1 >= 0x1e8480) {\n            var2 = 0xff & 0x23;\n            var3 = 0x1427;\n            var4 = 0x64;\n            var var5 = 0x12a3;\n            var var6 = var2 + var4;\n            var var7 = 0x140f;\n            var var8 = arg0;\n            var var9 = 0x0306;\n            var7 = func_1AA9(var8, var9);\n            var5 = func_140F(var6, var7);\n            var3 = func_12A3(var4, var5);\n        \n        label_1427:\n            return var3;\n        } else if (var1 >= 0x07a120) {\n            var3 = 0x1e;\n        \n        label_13ED:\n            var temp0 = var3 & 0xff;\n            var2 = temp0;\n            var3 = 0x1427;\n            var4 = 0x64;\n            var5 = 0x12a3;\n            var6 = var2 + var4;\n            var7 = 0x140f;\n            var8 = arg0;\n            var9 = 0x0306;\n            var7 = func_1AA9(var8, var9);\n            var5 = func_140F(var6, var7);\n            var3 = func_12A3(var4, var5);\n            goto label_1427;\n        } else if (var1 >= 0x0186a0) {\n            var3 = 0x14;\n        \n        label_13E5:\n            goto label_13ED;\n        } else if (var1 >= 0x61a8) {\n            var3 = 0x0f;\n        \n        label_13DD:\n            goto label_13E5;\n        } else if (var1 >= 0x2710) {\n            var3 = 0x0a;\n        \n        label_13D5:\n            goto label_13DD;\n        } else if (var1 >= 0x1388) {\n            var3 = 0x05;\n        \n        label_13CD:\n            goto label_13D5;\n        } else {\n            var3 = 0x00;\n            goto label_13CD;\n        }\n    }\n    \n    function func_140F(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_1AA9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function changeOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0xbc48fdaddfcfb54d36a0ac4d7e52f46cdf854784b9c0978d385a35e8383262d4, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        storage[0x05] = (temp1 & 0x02 ** 0xa0 - 0x01) * 0x010000 | (storage[0x05] & ~0xffffffffffffffffffffffffffffffffffffffff0000);\n        return 0x01;\n    }\n    \n    function etherContributed(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n    \n        if (!(storage[0x05] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x151d;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_1AE9(var2, var3);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & arg0) {\n        label_15B9:\n            storage[0x00] = storage[0x00] & ~0xff;\n            return 0x01;\n        } else {\n            var1 = storage[0x06] & 0x02 ** 0xa0 - 0x01;\n            var2 = 0x25fda176;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = msg.sender;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = arg1;\n            var3 = temp1 + 0x44;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { goto label_15B9; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function MIN_USD_FUND() returns (var r0) { return 0x1e8480; }\n    \n    function USD_PER_ETH() returns (var r0) { return 0x0102; }\n    \n    function TOKENS_PER_ETH() returns (var r0) { return 0x0306; }\n    \n    function usdToEth(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12af;\n        var var2 = 0x0102;\n        var var3 = 0x12a3;\n        var var4 = arg0;\n        var var5 = 0x0de0b6b3a7640000;\n        var3 = func_1AA9(var4, var5);\n        return func_12A3(var2, var3);\n    }\n    \n    function etherRaised() returns (var r0) { return storage[0x07]; }\n    \n    function KYC_USD_LMT() returns (var r0) { return 0x2710; }\n    \n    function newOwner() returns (var r0) { return storage[0x05] / 0x010000 & 0x02 ** 0xa0 - 0x01; }\n    \n    function TOKENS_PER_USD() returns (var r0) { return 0x03; }\n    \n    function transferAnyERC20Token(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var var1 = arg0 & temp1;\n        var var2 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = temp1 & storage[0x0c] & 0x02 ** 0xa0 - 0x01;\n        memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = arg1;\n        var var3 = temp2 + 0x44;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = 0x00;\n        var var9 = var1;\n    \n        if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp3;\n        temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff;\n        return 0x01;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function MAX_TOKENS() returns (var r0) { return 0x11e1a300; }\n    \n    function FUNDING_PERIOD() returns (var r0) { return 0x24ea00; }\n    \n    function refund(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[var1] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n        var var2 = 0x178f;\n        var2 = fundFailed();\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x03;\n        var1 = temp1;\n        var2 = 0x17d4;\n        var var3 = arg0;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = temp0 & storage[0x0d];\n        var2 = func_1897(var3, var4, var5);\n    \n    label_17D4:\n        var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x09;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        memory[0x20:0x40] = 0x08;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] & ~0xff;\n        var temp4 = var1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-2]]);\n    \n        if (temp4 <= 0x00) {\n        label_186C:\n            storage[0x00] = storage[0x00] & ~0xff;\n            return 0x01;\n        } else {\n            var temp6 = var1;\n            var temp7 = memory[0x40:0x60];\n            var temp8;\n            temp8, memory[temp7:temp7 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp7:temp7 + memory[0x40:0x60] - temp7]);\n        \n            if (temp8) { goto label_186C; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_1883(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_1897(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg2;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    \n        if (!temp0) { return 0x01; }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var var1 = 0x193b;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_1AFF(var2, var3);\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp3;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg1 & temp3;\n        var1 = 0x1970;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1883(var2, var3);\n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        return 0x01;\n    }\n    \n    function func_1994(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & temp0;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp4;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp2;\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp3;\n        var var1 = 0x1a6d;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_1AFF(var2, var3);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp4;\n        memory[0x20:0x40] = 0x04;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp4 & msg.sender;\n        memory[0x20:0x40] = temp5;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x1a9f;\n        var2 = arg0;\n        var3 = arg1;\n        var var4 = arg2;\n        var1 = func_1897(var2, var3, var4);\n    \n    label_1A9F:\n        return var1;\n    }\n    \n    function func_1AA9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 * temp0;\n        var var1 = !temp0;\n    \n        if (var1) {\n        label_1AC3:\n        \n            if (var1) { return var0; }\n            else { assert(); }\n        } else {\n            var1 = arg1;\n            var var2 = arg0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2 == var1;\n            goto label_1AC3;\n        }\n    }\n    \n    function func_1AE9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1af6;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        var1 = func_1897(var2, var3, var4);\n    \n    label_1AF6:\n        return var1;\n    }\n    \n    function func_1AFF(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 - arg1;\n    \n        if (var0 <= temp0) { return var0; }\n        else { assert(); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_021F:\n            var var0 = 0x0230;\n            var var1 = 0x022c;\n            var var2 = msg.sender;\n            var1 = proxyPurchase(var2);\n            func_022C(var1);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0245;\n                var2 = name();\n            \n            label_0245:\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var6 = temp2 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0282:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_0272:\n                    var temp8 = var11;\n                    memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0282; }\n                    else { goto label_0272; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_02DF:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = !!var1;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = totalSupply();\n            \n            label_0306:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x2267b2e3) {\n                // Dispatch table entry for veredictum()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032b;\n                var2 = veredictum();\n            \n            label_032B:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var temp15 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp15 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp15;\n                var4 = msg.data[0x44:0x64];\n                var5 = 0x00;\n            \n                if (storage[var5] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n            \n                if (!(storage[0x05] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var6 = 0x0d68;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var6 = transferFrom(var7, var8, var9);\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x06] & temp16 != temp16 & var3) {\n                label_0E04:\n                    var5 = 0x01;\n                    storage[0x00] = storage[0x00] & ~0xff;\n                    var1 = var5;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var6 = storage[0x06] & 0x02 ** 0xa0 - 0x01;\n                    var7 = 0x25fda176;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = (var7 & 0xffffffff) * 0x02 ** 0xe0;\n                    memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = msg.sender;\n                    memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = var4;\n                    var8 = temp17 + 0x44;\n                    var9 = 0x20;\n                    var10 = memory[0x40:0x60];\n                    var11 = var8 - var10;\n                    var var12 = var10;\n                    var var13 = 0x00;\n                    var var14 = var6;\n                \n                    if (!address(var14).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp18;\n                    temp18, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas - 0x02c6).value(var13)(memory[var12:var12 + var11]);\n                \n                    if (!temp18) { revert(memory[0x00:0x00]); }\n                \n                    if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { goto label_0E04; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0396;\n                var2 = decimals();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2 & 0xff;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x35a063b4) {\n                // Dispatch table entry for abort()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = abort();\n                goto label_02DF;\n            } else if (var0 == 0x372c6533) {\n                // Dispatch table entry for START_DATE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = START_DATE();\n                goto label_0306;\n            } else if (var0 == 0x39f95e63) {\n                // Dispatch table entry for finaliseICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = finaliseICO();\n                goto label_02DF;\n            } else if (var0 == 0x43dbb2de) {\n                // Dispatch table entry for MAX_ETH_FUND()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MAX_ETH_FUND();\n                goto label_0306;\n            } else if (var0 == 0x4449307b) {\n                // Dispatch table entry for addKycAddress(address,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                var1 = addKycAddress(var2, var3);\n                goto label_02DF;\n            } else if (var0 == 0x4a5dddd2) {\n                // Dispatch table entry for proxyPurchase(address)\n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = proxyPurchase(var2);\n                goto label_02DF;\n            } else if (var0 == 0x545599ff) {\n                // Dispatch table entry for END_DATE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = END_DATE();\n                goto label_0306;\n            } else if (var0 == 0x636544be) {\n                // Dispatch table entry for changeVeredictum(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = changeVeredictum(var2);\n                goto label_02DF;\n            } else if (var0 == 0x664a1ad6) {\n                // Dispatch table entry for fundWallet()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032b;\n                var2 = fundWallet();\n                goto label_032B;\n            } else if (var0 == 0x67de81e8) {\n                // Dispatch table entry for fundSucceeded()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = fundSucceeded();\n                goto label_02DF;\n            } else if (var0 == 0x6e62de19) {\n                // Dispatch table entry for fundFailed()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = fundFailed();\n                goto label_02DF;\n            } else if (var0 == 0x6eabcd69) {\n                // Dispatch table entry for __abortFuse()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = __abortFuse();\n                goto label_02DF;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_0306;\n            } else if (var0 == 0x71140942) {\n                // Dispatch table entry for MIN_ETH_FUND()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MIN_ETH_FUND();\n                goto label_0306;\n            } else if (var0 == 0x79099e15) {\n                // Dispatch table entry for MAX_USD_FUND()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MAX_USD_FUND();\n                goto label_0306;\n            } else if (var0 == 0x79ba5097) {\n                // Dispatch table entry for acceptOwnership()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = acceptOwnership();\n                goto label_02DF;\n            } else if (var0 == 0x83197ef0) {\n                // Dispatch table entry for destroy()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0230;\n            \n                if (storage[0x00] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                var temp21 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x0c] & temp21 != temp21 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                if (storage[0x05] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                if (!address(this).balance) { selfdestruct(storage[0x0c] & 0x02 ** 0xa0 - 0x01); }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x835fa3ac) {\n                // Dispatch table entry for icoSuccessful()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = icoSuccessful();\n                goto label_02DF;\n            } else if (var0 == 0x8bace235) {\n                // Dispatch table entry for kycAddresses(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = kycAddresses(var2);\n                goto label_02DF;\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032b;\n                var2 = owner();\n                goto label_032B;\n            } else if (var0 == 0x946d1480) {\n                // Dispatch table entry for ethToUsd(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24];\n                var1 = usdRaised(var2);\n                goto label_0306;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0245;\n                var2 = symbol();\n                goto label_0245;\n            } else if (var0 == 0x9c70b899) {\n                // Dispatch table entry for KYC_ETH_LMT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = KYC_ETH_LMT();\n                goto label_0306;\n            } else if (var0 == 0xa4c89322) {\n                // Dispatch table entry for ethToTokens(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24];\n                var1 = ethToTokens(var2);\n                goto label_0306;\n            } else if (var0 == 0xa6f9dae1) {\n                // Dispatch table entry for changeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = changeOwner(var2);\n                goto label_02DF;\n            } else if (var0 == 0xa82776dd) {\n                // Dispatch table entry for etherContributed(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = etherContributed(var2);\n                goto label_0306;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_02DF;\n            } else if (var0 == 0xb4495b7d) {\n                // Dispatch table entry for MIN_USD_FUND()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MIN_USD_FUND();\n                goto label_0306;\n            } else if (var0 == 0xb9408373) {\n                // Dispatch table entry for USD_PER_ETH()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = USD_PER_ETH();\n                goto label_0306;\n            } else if (var0 == 0xbc6e6604) {\n                // Dispatch table entry for TOKENS_PER_ETH()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = TOKENS_PER_ETH();\n                goto label_0306;\n            } else if (var0 == 0xbcecf667) {\n                // Dispatch table entry for usdToEth(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24];\n                var1 = usdToEth(var2);\n                goto label_0306;\n            } else if (var0 == 0xcd72ab69) {\n                // Dispatch table entry for etherRaised()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = etherRaised();\n                goto label_0306;\n            } else if (var0 == 0xd399354b) {\n                // Dispatch table entry for KYC_USD_LMT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = KYC_USD_LMT();\n                goto label_0306;\n            } else if (var0 == 0xd4ee1d90) {\n                // Dispatch table entry for newOwner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032b;\n                var2 = newOwner();\n                goto label_032B;\n            } else if (var0 == 0xd5356b7d) {\n                // Dispatch table entry for TOKENS_PER_USD()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = TOKENS_PER_USD();\n                goto label_0306;\n            } else if (var0 == 0xdc39d06d) {\n                // Dispatch table entry for transferAnyERC20Token(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transferAnyERC20Token(var2, var3);\n                goto label_02DF;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var temp22 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp22 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp22;\n                var1 = allowance(var2, var3);\n                goto label_0306;\n            } else if (var0 == 0xeadd94ec) {\n                // Dispatch table entry for usdRaised()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = 0x00;\n                var3 = 0x10b3;\n                var4 = storage[0x07];\n                var3 = usdRaised(var4);\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xf47c84c5) {\n                // Dispatch table entry for MAX_TOKENS()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MAX_TOKENS();\n                goto label_0306;\n            } else if (var0 == 0xf90c3f27) {\n                // Dispatch table entry for FUNDING_PERIOD()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = FUNDING_PERIOD();\n                goto label_0306;\n            } else if (var0 == 0xfa89401a) {\n                // Dispatch table entry for refund(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = refund(var2);\n                goto label_02DF;\n            } else { goto label_021F; }\n        }\n    }\n    \n    function func_022C(var arg0) {}\n    \n    function proxyPurchase(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[var1] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0ad9;\n        var2 = fundFailed();\n    \n        if (var2) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (block.timestamp > storage[0x0e]) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) {\n        label_0B8E:\n            var2 = 0x0b98;\n            var var3 = msg.value;\n            var2 = ethToTokens(var3);\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0bb2;\n            var3 = storage[0x0d] & 0x02 ** 0xa0 - 0x01;\n            var var4 = arg0;\n            var var5 = var1;\n            var2 = func_1897(var3, var4, var5);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x09;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n            var2 = 0x0bdc;\n            var4 = msg.value;\n            var2 = func_1883(var3, var4);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x09;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n            var3 = storage[0x07];\n            var2 = 0x0c08;\n            var4 = msg.value;\n            var2 = func_1883(var3, var4);\n            storage[0x07] = var2;\n        \n            if (storage[0x07] <= 0x108b2a2c28029094000000 / 0x0102) { return 0x01; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (block.timestamp >= 0x59916690) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x09;\n            var2 = 0x021e19e0c9bab2400000 / 0x0102;\n            var3 = 0x0b83;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = msg.value;\n            var3 = func_1883(var4, var5);\n        \n            if (var3 <= var2) { goto label_0B8E; }\n            else { revert(memory[0x00:0x00]); }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x0a];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x0a;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0CCE:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0CC5; }\n        \n        label_0CB1:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0CB1; }\n        \n        label_0CC5:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0CCE;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0CCE;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x05] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0d07;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_1994(var2, var3);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function veredictum() returns (var r0) { return storage[0x06] & 0x02 ** 0xa0 - 0x01; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function abort() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x05] = storage[0x05] & ~0xff;\n        return 0x01;\n    }\n    \n    function START_DATE() returns (var r0) { return 0x59916690; }\n    \n    function finaliseICO() returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n        var var1 = 0x0ebf;\n        var1 = fundSucceeded();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        storage[0x05] = (storage[0x05] & ~0xff00) | 0x0100;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0x8c9a4f13b67cb64d7c6aa1ae0c9bf07694af521a28b93e7060020810ab4bc59f, storage[0x0d] & 0x02 ** 0xa0 - 0x01, address(this).balance]);\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        var temp4 = address(address(this) & temp3).balance;\n        var temp5 = memory[0x40:0x60];\n        var temp6;\n        temp6, memory[temp5:temp5 + 0x00] = address(temp3 & storage[0x0d]).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp5:temp5 + memory[0x40:0x60] - temp5]);\n    \n        if (!temp6) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff;\n        return 0x01;\n    }\n    \n    function MAX_ETH_FUND() returns (var r0) { return 0x108b2a2c28029094000000 / 0x0102; }\n    \n    function addKycAddress(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0faa;\n        var1 = fundFailed();\n    \n        if (var1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x08;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = !!arg1;\n        storage[temp2] = temp3 | (storage[temp2] & ~0xff);\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xccc39d7dc7461a69d6b86c0867c4cc1879b70e7239ed223f1ae0eec7036bfdad, stack[-3] & 0x02 ** 0xa0 - 0x01, !!stack[-2]]);\n        return 0x01;\n    }\n    \n    function END_DATE() returns (var r0) { return storage[0x0e]; }\n    \n    function changeVeredictum(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x06] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x06] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function fundWallet() returns (var r0) { return storage[0x0d] & 0x02 ** 0xa0 - 0x01; }\n    \n    function fundSucceeded() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1094;\n        var1 = fundFailed();\n        var temp0 = !var1;\n        var1 = temp0;\n    \n        if (!var1) {\n        label_10B3:\n            return var1;\n        } else {\n            var1 = storage[0x07] >= 0x01a784379d99db42000000 / 0x0102;\n            goto label_10B3;\n        }\n    }\n    \n    function fundFailed() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !(storage[0x05] & 0xff);\n    \n        if (var1) {\n        label_10B3:\n            return var1;\n        } else {\n            var1 = block.timestamp > storage[0x0e];\n        \n            if (!var1) { goto label_10B3; }\n            else { return storage[0x07] < 0x01a784379d99db42000000 / 0x0102; }\n        }\n    }\n    \n    function __abortFuse() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function MIN_ETH_FUND() returns (var r0) {\n        r0 = 0x0102;\n        var var1 = 0x01a784379d99db42000000;\n        return var1 / r0;\n    }\n    \n    function MAX_USD_FUND() returns (var r0) { return 0x01312d00; }\n    \n    function acceptOwnership() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] / 0x010000 & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0x2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e, storage[0x0c] & 0x02 ** 0xa0 - 0x01, storage[0x05] / 0x010000 & 0x02 ** 0xa0 - 0x01]);\n        storage[0x0c] = (storage[0x0c] & ~0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x05] / 0x010000 & 0x02 ** 0xa0 - 0x01);\n        return 0x01;\n    }\n    \n    function icoSuccessful() returns (var r0) { return storage[0x05] / 0x0100 & 0xff; }\n    \n    function kycAddresses(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function owner() returns (var r0) { return storage[0x0c] & 0x02 ** 0xa0 - 0x01; }\n    \n    function usdRaised(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12af;\n        var var2 = 0x0de0b6b3a7640000;\n        var var3 = 0x12a3;\n        var var4 = 0x0102;\n        var var5 = arg0;\n        var3 = func_1AA9(var4, var5);\n        return func_12A3(var2, var3);\n    }\n    \n    function func_12A3(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = arg1;\n        var var2 = arg0;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x0b];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x0b;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0CCE:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0CC5; }\n        \n        label_0CB1:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0CB1; }\n        \n        label_0CC5:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0CCE;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0CCE;\n        }\n    }\n    \n    function KYC_ETH_LMT() returns (var r0) {\n        r0 = 0x0102;\n        var var1 = 0x021e19e0c9bab2400000;\n        return var1 / r0;\n    }\n    \n    function ethToTokens(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x137a;\n        var var4 = arg0;\n        var3 = usdRaised(var4);\n        var1 = var3;\n    \n        if (var1 >= 0x1e8480) {\n            var2 = 0xff & 0x23;\n            var3 = 0x1427;\n            var4 = 0x64;\n            var var5 = 0x12a3;\n            var var6 = var2 + var4;\n            var var7 = 0x140f;\n            var var8 = arg0;\n            var var9 = 0x0306;\n            var7 = func_1AA9(var8, var9);\n            var5 = func_140F(var6, var7);\n            var3 = func_12A3(var4, var5);\n        \n        label_1427:\n            return var3;\n        } else if (var1 >= 0x07a120) {\n            var3 = 0x1e;\n        \n        label_13ED:\n            var temp0 = var3 & 0xff;\n            var2 = temp0;\n            var3 = 0x1427;\n            var4 = 0x64;\n            var5 = 0x12a3;\n            var6 = var2 + var4;\n            var7 = 0x140f;\n            var8 = arg0;\n            var9 = 0x0306;\n            var7 = func_1AA9(var8, var9);\n            var5 = func_140F(var6, var7);\n            var3 = func_12A3(var4, var5);\n            goto label_1427;\n        } else if (var1 >= 0x0186a0) {\n            var3 = 0x14;\n        \n        label_13E5:\n            goto label_13ED;\n        } else if (var1 >= 0x61a8) {\n            var3 = 0x0f;\n        \n        label_13DD:\n            goto label_13E5;\n        } else if (var1 >= 0x2710) {\n            var3 = 0x0a;\n        \n        label_13D5:\n            goto label_13DD;\n        } else if (var1 >= 0x1388) {\n            var3 = 0x05;\n        \n        label_13CD:\n            goto label_13D5;\n        } else {\n            var3 = 0x00;\n            goto label_13CD;\n        }\n    }\n    \n    function func_140F(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_1AA9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function changeOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0xbc48fdaddfcfb54d36a0ac4d7e52f46cdf854784b9c0978d385a35e8383262d4, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        storage[0x05] = (temp1 & 0x02 ** 0xa0 - 0x01) * 0x010000 | (storage[0x05] & ~0xffffffffffffffffffffffffffffffffffffffff0000);\n        return 0x01;\n    }\n    \n    function etherContributed(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n    \n        if (!(storage[0x05] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x151d;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_1AE9(var2, var3);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & arg0) {\n        label_15B9:\n            storage[0x00] = storage[0x00] & ~0xff;\n            return 0x01;\n        } else {\n            var1 = storage[0x06] & 0x02 ** 0xa0 - 0x01;\n            var2 = 0x25fda176;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = msg.sender;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = arg1;\n            var3 = temp1 + 0x44;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { goto label_15B9; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function MIN_USD_FUND() returns (var r0) { return 0x1e8480; }\n    \n    function USD_PER_ETH() returns (var r0) { return 0x0102; }\n    \n    function TOKENS_PER_ETH() returns (var r0) { return 0x0306; }\n    \n    function usdToEth(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12af;\n        var var2 = 0x0102;\n        var var3 = 0x12a3;\n        var var4 = arg0;\n        var var5 = 0x0de0b6b3a7640000;\n        var3 = func_1AA9(var4, var5);\n        return func_12A3(var2, var3);\n    }\n    \n    function etherRaised() returns (var r0) { return storage[0x07]; }\n    \n    function KYC_USD_LMT() returns (var r0) { return 0x2710; }\n    \n    function newOwner() returns (var r0) { return storage[0x05] / 0x010000 & 0x02 ** 0xa0 - 0x01; }\n    \n    function TOKENS_PER_USD() returns (var r0) { return 0x03; }\n    \n    function transferAnyERC20Token(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var var1 = arg0 & temp1;\n        var var2 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = temp1 & storage[0x0c] & 0x02 ** 0xa0 - 0x01;\n        memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = arg1;\n        var var3 = temp2 + 0x44;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = 0x00;\n        var var9 = var1;\n    \n        if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp3;\n        temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff;\n        return 0x01;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function MAX_TOKENS() returns (var r0) { return 0x11e1a300; }\n    \n    function FUNDING_PERIOD() returns (var r0) { return 0x24ea00; }\n    \n    function refund(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[var1] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n        var var2 = 0x178f;\n        var2 = fundFailed();\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x03;\n        var1 = temp1;\n        var2 = 0x17d4;\n        var var3 = arg0;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = temp0 & storage[0x0d];\n        var2 = func_1897(var3, var4, var5);\n    \n    label_17D4:\n        var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x09;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        memory[0x20:0x40] = 0x08;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] & ~0xff;\n        var temp4 = var1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-2]]);\n    \n        if (temp4 <= 0x00) {\n        label_186C:\n            storage[0x00] = storage[0x00] & ~0xff;\n            return 0x01;\n        } else {\n            var temp6 = var1;\n            var temp7 = memory[0x40:0x60];\n            var temp8;\n            temp8, memory[temp7:temp7 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp7:temp7 + memory[0x40:0x60] - temp7]);\n        \n            if (temp8) { goto label_186C; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_1883(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_1897(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg2;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    \n        if (!temp0) { return 0x01; }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var var1 = 0x193b;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_1AFF(var2, var3);\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp3;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg1 & temp3;\n        var1 = 0x1970;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1883(var2, var3);\n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        return 0x01;\n    }\n    \n    function func_1994(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & temp0;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp4;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp2;\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp3;\n        var var1 = 0x1a6d;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_1AFF(var2, var3);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp4;\n        memory[0x20:0x40] = 0x04;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp4 & msg.sender;\n        memory[0x20:0x40] = temp5;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x1a9f;\n        var2 = arg0;\n        var3 = arg1;\n        var var4 = arg2;\n        var1 = func_1897(var2, var3, var4);\n    \n    label_1A9F:\n        return var1;\n    }\n    \n    function func_1AA9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 * temp0;\n        var var1 = !temp0;\n    \n        if (var1) {\n        label_1AC3:\n        \n            if (var1) { return var0; }\n            else { assert(); }\n        } else {\n            var1 = arg1;\n            var var2 = arg0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2 == var1;\n            goto label_1AC3;\n        }\n    }\n    \n    function func_1AE9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1af6;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        var1 = func_1897(var2, var3, var4);\n    \n    label_1AF6:\n        return var1;\n    }\n    \n    function func_1AFF(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 - arg1;\n    \n        if (var0 <= temp0) { return var0; }\n        else { assert(); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_021F:\n            var var0 = 0x0230;\n            var var1 = 0x022c;\n            var var2 = msg.sender;\n            var1 = proxyPurchase(var2);\n            func_022C(var1);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0245;\n                var2 = name();\n            \n            label_0245:\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var6 = temp2 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0282:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_0272:\n                    var temp8 = var11;\n                    memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0282; }\n                    else { goto label_0272; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_02DF:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = !!var1;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = totalSupply();\n            \n            label_0306:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x2267b2e3) {\n                // Dispatch table entry for veredictum()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032b;\n                var2 = veredictum();\n            \n            label_032B:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var temp15 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp15 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp15;\n                var4 = msg.data[0x44:0x64];\n                var5 = 0x00;\n            \n                if (storage[var5] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n            \n                if (!(storage[0x05] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var6 = 0x0d68;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var6 = transferFrom(var7, var8, var9);\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x06] & temp16 != temp16 & var3) {\n                label_0E04:\n                    var5 = 0x01;\n                    storage[0x00] = storage[0x00] & ~0xff;\n                    var1 = var5;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var6 = storage[0x06] & 0x02 ** 0xa0 - 0x01;\n                    var7 = 0x25fda176;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = (var7 & 0xffffffff) * 0x02 ** 0xe0;\n                    memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = msg.sender;\n                    memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = var4;\n                    var8 = temp17 + 0x44;\n                    var9 = 0x20;\n                    var10 = memory[0x40:0x60];\n                    var11 = var8 - var10;\n                    var var12 = var10;\n                    var var13 = 0x00;\n                    var var14 = var6;\n                \n                    if (!address(var14).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp18;\n                    temp18, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas - 0x02c6).value(var13)(memory[var12:var12 + var11]);\n                \n                    if (!temp18) { revert(memory[0x00:0x00]); }\n                \n                    if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { goto label_0E04; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0396;\n                var2 = decimals();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2 & 0xff;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x35a063b4) {\n                // Dispatch table entry for abort()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = abort();\n                goto label_02DF;\n            } else if (var0 == 0x372c6533) {\n                // Dispatch table entry for START_DATE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = START_DATE();\n                goto label_0306;\n            } else if (var0 == 0x39f95e63) {\n                // Dispatch table entry for finaliseICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = finaliseICO();\n                goto label_02DF;\n            } else if (var0 == 0x43dbb2de) {\n                // Dispatch table entry for MAX_ETH_FUND()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MAX_ETH_FUND();\n                goto label_0306;\n            } else if (var0 == 0x4449307b) {\n                // Dispatch table entry for addKycAddress(address,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                var1 = addKycAddress(var2, var3);\n                goto label_02DF;\n            } else if (var0 == 0x4a5dddd2) {\n                // Dispatch table entry for proxyPurchase(address)\n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = proxyPurchase(var2);\n                goto label_02DF;\n            } else if (var0 == 0x545599ff) {\n                // Dispatch table entry for END_DATE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = END_DATE();\n                goto label_0306;\n            } else if (var0 == 0x636544be) {\n                // Dispatch table entry for changeVeredictum(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = changeVeredictum(var2);\n                goto label_02DF;\n            } else if (var0 == 0x664a1ad6) {\n                // Dispatch table entry for fundWallet()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032b;\n                var2 = fundWallet();\n                goto label_032B;\n            } else if (var0 == 0x67de81e8) {\n                // Dispatch table entry for fundSucceeded()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = fundSucceeded();\n                goto label_02DF;\n            } else if (var0 == 0x6e62de19) {\n                // Dispatch table entry for fundFailed()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = fundFailed();\n                goto label_02DF;\n            } else if (var0 == 0x6eabcd69) {\n                // Dispatch table entry for __abortFuse()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = __abortFuse();\n                goto label_02DF;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_0306;\n            } else if (var0 == 0x71140942) {\n                // Dispatch table entry for MIN_ETH_FUND()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MIN_ETH_FUND();\n                goto label_0306;\n            } else if (var0 == 0x79099e15) {\n                // Dispatch table entry for MAX_USD_FUND()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MAX_USD_FUND();\n                goto label_0306;\n            } else if (var0 == 0x79ba5097) {\n                // Dispatch table entry for acceptOwnership()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var1 = acceptOwnership();\n                goto label_02DF;\n            } else if (var0 == 0x83197ef0) {\n                // Dispatch table entry for destroy()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0230;\n            \n                if (storage[0x00] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                var temp21 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x0c] & temp21 != temp21 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                if (storage[0x05] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                if (!address(this).balance) { selfdestruct(storage[0x0c] & 0x02 ** 0xa0 - 0x01); }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x835fa3ac) {\n                // Dispatch table entry for icoSuccessful()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = icoSuccessful();\n                goto label_02DF;\n            } else if (var0 == 0x8bace235) {\n                // Dispatch table entry for kycAddresses(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = kycAddresses(var2);\n                goto label_02DF;\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032b;\n                var2 = owner();\n                goto label_032B;\n            } else if (var0 == 0x946d1480) {\n                // Dispatch table entry for ethToUsd(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24];\n                var1 = usdRaised(var2);\n                goto label_0306;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0245;\n                var2 = symbol();\n                goto label_0245;\n            } else if (var0 == 0x9c70b899) {\n                // Dispatch table entry for KYC_ETH_LMT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = KYC_ETH_LMT();\n                goto label_0306;\n            } else if (var0 == 0xa4c89322) {\n                // Dispatch table entry for ethToTokens(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24];\n                var1 = ethToTokens(var2);\n                goto label_0306;\n            } else if (var0 == 0xa6f9dae1) {\n                // Dispatch table entry for changeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = changeOwner(var2);\n                goto label_02DF;\n            } else if (var0 == 0xa82776dd) {\n                // Dispatch table entry for etherContributed(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = etherContributed(var2);\n                goto label_0306;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_02DF;\n            } else if (var0 == 0xb4495b7d) {\n                // Dispatch table entry for MIN_USD_FUND()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MIN_USD_FUND();\n                goto label_0306;\n            } else if (var0 == 0xb9408373) {\n                // Dispatch table entry for USD_PER_ETH()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = USD_PER_ETH();\n                goto label_0306;\n            } else if (var0 == 0xbc6e6604) {\n                // Dispatch table entry for TOKENS_PER_ETH()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = TOKENS_PER_ETH();\n                goto label_0306;\n            } else if (var0 == 0xbcecf667) {\n                // Dispatch table entry for usdToEth(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = msg.data[0x04:0x24];\n                var1 = usdToEth(var2);\n                goto label_0306;\n            } else if (var0 == 0xcd72ab69) {\n                // Dispatch table entry for etherRaised()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = etherRaised();\n                goto label_0306;\n            } else if (var0 == 0xd399354b) {\n                // Dispatch table entry for KYC_USD_LMT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = KYC_USD_LMT();\n                goto label_0306;\n            } else if (var0 == 0xd4ee1d90) {\n                // Dispatch table entry for newOwner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032b;\n                var2 = newOwner();\n                goto label_032B;\n            } else if (var0 == 0xd5356b7d) {\n                // Dispatch table entry for TOKENS_PER_USD()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = TOKENS_PER_USD();\n                goto label_0306;\n            } else if (var0 == 0xdc39d06d) {\n                // Dispatch table entry for transferAnyERC20Token(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transferAnyERC20Token(var2, var3);\n                goto label_02DF;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var temp22 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp22 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp22;\n                var1 = allowance(var2, var3);\n                goto label_0306;\n            } else if (var0 == 0xeadd94ec) {\n                // Dispatch table entry for usdRaised()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = 0x00;\n                var3 = 0x10b3;\n                var4 = storage[0x07];\n                var3 = usdRaised(var4);\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xf47c84c5) {\n                // Dispatch table entry for MAX_TOKENS()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = MAX_TOKENS();\n                goto label_0306;\n            } else if (var0 == 0xf90c3f27) {\n                // Dispatch table entry for FUNDING_PERIOD()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0306;\n                var2 = FUNDING_PERIOD();\n                goto label_0306;\n            } else if (var0 == 0xfa89401a) {\n                // Dispatch table entry for refund(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02df;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = refund(var2);\n                goto label_02DF;\n            } else { goto label_021F; }\n        }\n    }\n    \n    function func_022C(var arg0) {}\n    \n    function proxyPurchase(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[var1] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0ad9;\n        var2 = fundFailed();\n    \n        if (var2) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (block.timestamp > storage[0x0e]) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) {\n        label_0B8E:\n            var2 = 0x0b98;\n            var var3 = msg.value;\n            var2 = ethToTokens(var3);\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0bb2;\n            var3 = storage[0x0d] & 0x02 ** 0xa0 - 0x01;\n            var var4 = arg0;\n            var var5 = var1;\n            var2 = func_1897(var3, var4, var5);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x09;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n            var2 = 0x0bdc;\n            var4 = msg.value;\n            var2 = func_1883(var3, var4);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x09;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n            var3 = storage[0x07];\n            var2 = 0x0c08;\n            var4 = msg.value;\n            var2 = func_1883(var3, var4);\n            storage[0x07] = var2;\n        \n            if (storage[0x07] <= 0x108b2a2c28029094000000 / 0x0102) { return 0x01; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (block.timestamp >= 0x59916690) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x09;\n            var2 = 0x021e19e0c9bab2400000 / 0x0102;\n            var3 = 0x0b83;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var5 = msg.value;\n            var3 = func_1883(var4, var5);\n        \n            if (var3 <= var2) { goto label_0B8E; }\n            else { revert(memory[0x00:0x00]); }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x0a];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x0a;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0CCE:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0CC5; }\n        \n        label_0CB1:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0CB1; }\n        \n        label_0CC5:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0CCE;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0CCE;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x05] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0d07;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_1994(var2, var3);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function veredictum() returns (var r0) { return storage[0x06] & 0x02 ** 0xa0 - 0x01; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function abort() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x05] = storage[0x05] & ~0xff;\n        return 0x01;\n    }\n    \n    function START_DATE() returns (var r0) { return 0x59916690; }\n    \n    function finaliseICO() returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n        var var1 = 0x0ebf;\n        var1 = fundSucceeded();\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        storage[0x05] = (storage[0x05] & ~0xff00) | 0x0100;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0x8c9a4f13b67cb64d7c6aa1ae0c9bf07694af521a28b93e7060020810ab4bc59f, storage[0x0d] & 0x02 ** 0xa0 - 0x01, address(this).balance]);\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        var temp4 = address(address(this) & temp3).balance;\n        var temp5 = memory[0x40:0x60];\n        var temp6;\n        temp6, memory[temp5:temp5 + 0x00] = address(temp3 & storage[0x0d]).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp5:temp5 + memory[0x40:0x60] - temp5]);\n    \n        if (!temp6) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff;\n        return 0x01;\n    }\n    \n    function MAX_ETH_FUND() returns (var r0) { return 0x108b2a2c28029094000000 / 0x0102; }\n    \n    function addKycAddress(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0faa;\n        var1 = fundFailed();\n    \n        if (var1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x08;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = !!arg1;\n        storage[temp2] = temp3 | (storage[temp2] & ~0xff);\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xccc39d7dc7461a69d6b86c0867c4cc1879b70e7239ed223f1ae0eec7036bfdad, stack[-3] & 0x02 ** 0xa0 - 0x01, !!stack[-2]]);\n        return 0x01;\n    }\n    \n    function END_DATE() returns (var r0) { return storage[0x0e]; }\n    \n    function changeVeredictum(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x06] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x06] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function fundWallet() returns (var r0) { return storage[0x0d] & 0x02 ** 0xa0 - 0x01; }\n    \n    function fundSucceeded() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1094;\n        var1 = fundFailed();\n        var temp0 = !var1;\n        var1 = temp0;\n    \n        if (!var1) {\n        label_10B3:\n            return var1;\n        } else {\n            var1 = storage[0x07] >= 0x01a784379d99db42000000 / 0x0102;\n            goto label_10B3;\n        }\n    }\n    \n    function fundFailed() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !(storage[0x05] & 0xff);\n    \n        if (var1) {\n        label_10B3:\n            return var1;\n        } else {\n            var1 = block.timestamp > storage[0x0e];\n        \n            if (!var1) { goto label_10B3; }\n            else { return storage[0x07] < 0x01a784379d99db42000000 / 0x0102; }\n        }\n    }\n    \n    function __abortFuse() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function MIN_ETH_FUND() returns (var r0) {\n        r0 = 0x0102;\n        var var1 = 0x01a784379d99db42000000;\n        return var1 / r0;\n    }\n    \n    function MAX_USD_FUND() returns (var r0) { return 0x01312d00; }\n    \n    function acceptOwnership() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] / 0x010000 & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0x2748503f8f31d8071821d1d5144384ba6a465036cda17fa1629a8a2509ccee0e, storage[0x0c] & 0x02 ** 0xa0 - 0x01, storage[0x05] / 0x010000 & 0x02 ** 0xa0 - 0x01]);\n        storage[0x0c] = (storage[0x0c] & ~0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x05] / 0x010000 & 0x02 ** 0xa0 - 0x01);\n        return 0x01;\n    }\n    \n    function icoSuccessful() returns (var r0) { return storage[0x05] / 0x0100 & 0xff; }\n    \n    function kycAddresses(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function owner() returns (var r0) { return storage[0x0c] & 0x02 ** 0xa0 - 0x01; }\n    \n    function usdRaised(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12af;\n        var var2 = 0x0de0b6b3a7640000;\n        var var3 = 0x12a3;\n        var var4 = 0x0102;\n        var var5 = arg0;\n        var3 = func_1AA9(var4, var5);\n        return func_12A3(var2, var3);\n    }\n    \n    function func_12A3(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = arg1;\n        var var2 = arg0;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x0b];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x0b;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0CCE:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0CC5; }\n        \n        label_0CB1:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0CB1; }\n        \n        label_0CC5:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0CCE;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0CCE;\n        }\n    }\n    \n    function KYC_ETH_LMT() returns (var r0) {\n        r0 = 0x0102;\n        var var1 = 0x021e19e0c9bab2400000;\n        return var1 / r0;\n    }\n    \n    function ethToTokens(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x137a;\n        var var4 = arg0;\n        var3 = usdRaised(var4);\n        var1 = var3;\n    \n        if (var1 >= 0x1e8480) {\n            var2 = 0xff & 0x23;\n            var3 = 0x1427;\n            var4 = 0x64;\n            var var5 = 0x12a3;\n            var var6 = var2 + var4;\n            var var7 = 0x140f;\n            var var8 = arg0;\n            var var9 = 0x0306;\n            var7 = func_1AA9(var8, var9);\n            var5 = func_140F(var6, var7);\n            var3 = func_12A3(var4, var5);\n        \n        label_1427:\n            return var3;\n        } else if (var1 >= 0x07a120) {\n            var3 = 0x1e;\n        \n        label_13ED:\n            var temp0 = var3 & 0xff;\n            var2 = temp0;\n            var3 = 0x1427;\n            var4 = 0x64;\n            var5 = 0x12a3;\n            var6 = var2 + var4;\n            var7 = 0x140f;\n            var8 = arg0;\n            var9 = 0x0306;\n            var7 = func_1AA9(var8, var9);\n            var5 = func_140F(var6, var7);\n            var3 = func_12A3(var4, var5);\n            goto label_1427;\n        } else if (var1 >= 0x0186a0) {\n            var3 = 0x14;\n        \n        label_13E5:\n            goto label_13ED;\n        } else if (var1 >= 0x61a8) {\n            var3 = 0x0f;\n        \n        label_13DD:\n            goto label_13E5;\n        } else if (var1 >= 0x2710) {\n            var3 = 0x0a;\n        \n        label_13D5:\n            goto label_13DD;\n        } else if (var1 >= 0x1388) {\n            var3 = 0x05;\n        \n        label_13CD:\n            goto label_13D5;\n        } else {\n            var3 = 0x00;\n            goto label_13CD;\n        }\n    }\n    \n    function func_140F(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_1AA9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function changeOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + memory[0x40:0x60] - temp2], [0xbc48fdaddfcfb54d36a0ac4d7e52f46cdf854784b9c0978d385a35e8383262d4, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        storage[0x05] = (temp1 & 0x02 ** 0xa0 - 0x01) * 0x010000 | (storage[0x05] & ~0xffffffffffffffffffffffffffffffffffffffff0000);\n        return 0x01;\n    }\n    \n    function etherContributed(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[var0] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n    \n        if (!(storage[0x05] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x151d;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_1AE9(var2, var3);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & arg0) {\n        label_15B9:\n            storage[0x00] = storage[0x00] & ~0xff;\n            return 0x01;\n        } else {\n            var1 = storage[0x06] & 0x02 ** 0xa0 - 0x01;\n            var2 = 0x25fda176;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = msg.sender;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = arg1;\n            var3 = temp1 + 0x44;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { goto label_15B9; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function MIN_USD_FUND() returns (var r0) { return 0x1e8480; }\n    \n    function USD_PER_ETH() returns (var r0) { return 0x0102; }\n    \n    function TOKENS_PER_ETH() returns (var r0) { return 0x0306; }\n    \n    function usdToEth(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x12af;\n        var var2 = 0x0102;\n        var var3 = 0x12a3;\n        var var4 = arg0;\n        var var5 = 0x0de0b6b3a7640000;\n        var3 = func_1AA9(var4, var5);\n        return func_12A3(var2, var3);\n    }\n    \n    function etherRaised() returns (var r0) { return storage[0x07]; }\n    \n    function KYC_USD_LMT() returns (var r0) { return 0x2710; }\n    \n    function newOwner() returns (var r0) { return storage[0x05] / 0x010000 & 0x02 ** 0xa0 - 0x01; }\n    \n    function TOKENS_PER_USD() returns (var r0) { return 0x03; }\n    \n    function transferAnyERC20Token(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x0c] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var var1 = arg0 & temp1;\n        var var2 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = temp1 & storage[0x0c] & 0x02 ** 0xa0 - 0x01;\n        memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = arg1;\n        var var3 = temp2 + 0x44;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = 0x00;\n        var var9 = var1;\n    \n        if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp3;\n        temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff;\n        return 0x01;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function MAX_TOKENS() returns (var r0) { return 0x11e1a300; }\n    \n    function FUNDING_PERIOD() returns (var r0) { return 0x24ea00; }\n    \n    function refund(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[var1] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff) | 0x01;\n        var var2 = 0x178f;\n        var2 = fundFailed();\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x03;\n        var1 = temp1;\n        var2 = 0x17d4;\n        var var3 = arg0;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = temp0 & storage[0x0d];\n        var2 = func_1897(var3, var4, var5);\n    \n    label_17D4:\n        var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x09;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        memory[0x20:0x40] = 0x08;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] & ~0xff;\n        var temp4 = var1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-2]]);\n    \n        if (temp4 <= 0x00) {\n        label_186C:\n            storage[0x00] = storage[0x00] & ~0xff;\n            return 0x01;\n        } else {\n            var temp6 = var1;\n            var temp7 = memory[0x40:0x60];\n            var temp8;\n            temp8, memory[temp7:temp7 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp7:temp7 + memory[0x40:0x60] - temp7]);\n        \n            if (temp8) { goto label_186C; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_1883(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 + temp0;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_1897(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg2;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    \n        if (!temp0) { return 0x01; }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var var1 = 0x193b;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_1AFF(var2, var3);\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp3;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg1 & temp3;\n        var1 = 0x1970;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1883(var2, var3);\n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        return 0x01;\n    }\n    \n    function func_1994(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & temp0;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp4;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp2;\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp3;\n        var var1 = 0x1a6d;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_1AFF(var2, var3);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp4;\n        memory[0x20:0x40] = 0x04;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp4 & msg.sender;\n        memory[0x20:0x40] = temp5;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x1a9f;\n        var2 = arg0;\n        var3 = arg1;\n        var var4 = arg2;\n        var1 = func_1897(var2, var3, var4);\n    \n    label_1A9F:\n        return var1;\n    }\n    \n    function func_1AA9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = arg1 * temp0;\n        var var1 = !temp0;\n    \n        if (var1) {\n        label_1AC3:\n        \n            if (var1) { return var0; }\n            else { assert(); }\n        } else {\n            var1 = arg1;\n            var var2 = arg0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2 == var1;\n            goto label_1AC3;\n        }\n    }\n    \n    function func_1AE9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1af6;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        var1 = func_1897(var2, var3, var4);\n    \n    label_1AF6:\n        return var1;\n    }\n    \n    function func_1AFF(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 - arg1;\n    \n        if (var0 <= temp0) { return var0; }\n        else { assert(); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 44.84184718132019,
	"usage": {
		"completion_tokens": 497,
		"prompt_tokens": 15904,
		"total_tokens": 16401
	}
}