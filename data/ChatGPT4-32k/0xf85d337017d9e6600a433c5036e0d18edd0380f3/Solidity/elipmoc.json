{
	"address": "0xf85d337017d9e6600a433c5036e0d18edd0380f3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code based on the decompiled bytecode:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _invested;\n    mapping (address => uint256) private _bonus;\n    mapping (address => uint256) private _atTime;\n    uint256 private _previousBalance;\n    uint256 private _interestRate;\n    uint256 private _nextTime;\n\n    function nextTime() public view returns (uint256) { \n        return _nextTime;\n    }\n\n    function atTime(address user) public view returns (uint256) { \n        return _atTime[user];\n    }\n\n    function invested(address user) public view returns (uint256) { \n        return _invested[user];\n    }\n\n    function interestRate() public view returns (uint256) { \n        return _interestRate;\n    }\n\n    function previousBalance() public view returns (uint256) { \n        return _previousBalance;\n    }\n\n    function bonus(address user) public view returns (uint256) { \n        return _bonus[user];\n    }\n\n    fallback() external payable { \n        uint256 v0 = _atTime[msg.sender];\n        uint256 v2 = block.timestamp;\n        _atTime[msg.sender] = v2;\n        if (v2 >= _nextTime) {\n            uint256 v3 = address(this).balance;\n            if (address(this).balance < _previousBalance) {\n                v3 = _previousBalance;\n            }\n            _interestRate = 1 + (v3 - _previousBalance) / 0x8ac7230489e80000;\n            if (_interestRate > 10) {\n                _interestRate = 10;\n            } else {\n                if (_interestRate < 1) {\n                    _interestRate = 1;\n                }\n            }\n            _previousBalance = v3;\n            _nextTime = v2 + 0x2a300;\n        }\n        if (_invested[msg.sender] != 0) {\n            uint256 v10 = (v2 - v0) * (_invested[msg.sender] * _interestRate / 100) / 0x15180;\n            if (v10 > _invested[msg.sender] / 10) {\n                v10 = _invested[msg.sender] / 10;\n            }\n            if (v10 > address(this).balance / 10) {\n                v10 = address(this).balance / 10;\n            }\n            if (v10 > 0) {\n                (bool success,) = msg.sender.call{value: v10, gas: 2300}(\"\");\n                require(success, \"Transfer failed.\");\n            }\n            if (v2 - v0 >= 0x15180 && msg.value >= 0xde0b6b3a7640000) {\n                _invested[msg.sender] += msg.value;\n                _bonus[msg.sender] += msg.value;\n            }\n        }\n        _invested[msg.sender] += msg.value;\n    }\n}\n```\n\nPlease note that the contract code above is a best-effort translation from the decompiled code. This contract code is provided as is and should be thoroughly reviewed before being used.",
				"role": "assistant"
			}
		}
	],
	"created": 1701463400,
	"id": "chatcmpl-8R4e0jECpDZifzxpoq3JVK94cw4iF",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.26 12:59 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _invested; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _bonus; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _atTime; // STORAGE[0x2]\nuint256 _previousBalance; // STORAGE[0x3]\nuint256 _interestRate; // STORAGE[0x4]\nuint256 _nextTime; // STORAGE[0x5]\n\n\nfunction nextTime() public nonPayable { \n    return _nextTime;\n}\n\nfunction atTime(address varg0) public nonPayable { \n    return _atTime[varg0];\n}\n\nfunction invested(address varg0) public nonPayable { \n    return _invested[varg0];\n}\n\nfunction interestRate() public nonPayable { \n    return _interestRate;\n}\n\nfunction previousBalance() public nonPayable { \n    return _previousBalance;\n}\n\nfunction bonus(address varg0) public nonPayable { \n    return _bonus[varg0];\n}\n\nfunction fallback() public payable { \n    v0 = v1 = _atTime[msg.sender];\n    v0 = v2 = block.timestamp;\n    _atTime[msg.sender] = v2;\n    if (v2 >= _nextTime) {\n        v3 = v4 = this.balance;\n        if (v4 < _previousBalance) {\n            v3 = v5 = _previousBalance;\n        }\n        _interestRate = 1 + (v3 - _previousBalance) / 0x8ac7230489e80000;\n        if (_interestRate > 10) {\n            v6 = v7 = 10;\n        } else {\n            if (_interestRate < 1) {\n                v6 = v8 = 1;\n            } else {\n                v6 = v9 = _interestRate;\n            }\n            goto 0x105;\n        }\n        _interestRate = v6;\n        _previousBalance = v3;\n        _nextTime = v2 + 0x2a300;\n    }\n    if (_invested[msg.sender]) {\n        v10 = v11 = (v2 - v0) * (_invested[msg.sender] * _interestRate / 100) / 0x15180;\n        if (v11 > _invested[msg.sender] / 10) {\n            v10 = v12 = _invested[msg.sender] / 10;\n        }\n        v13 = v14 = v2 - v0 < 0x15180;\n        if (v14) {\n            v13 = v15 = v10 > 0xb1a2bc2ec50000;\n        }\n        if (v13) {\n            v10 = v16 = 0xb1a2bc2ec50000;\n        }\n        if (v10 > this.balance / 10) {\n            v10 = v17 = this.balance / 10;\n        }\n        if (v10 > 0) {\n            v18 = msg.sender.call().value(v10).gas(2300 * !v10);\n            require(v18); // checks call status, propagates error data on error\n        }\n        v19 = v20 = v2 - v0 >= 0x15180;\n        if (v20) {\n            v19 = v21 = msg.value >= 0xde0b6b3a7640000;\n        }\n        if (v19) {\n            _invested[msg.sender] += msg.value;\n            _bonus[msg.sender] += msg.value;\n        }\n    }\n    _invested[msg.sender] += msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x2c27fe99) {\n            nextTime();\n        } else if (0x3c4e5323 == function_selector) {\n            atTime(address);\n        } else if (0x66b3f6bf == function_selector) {\n            invested(address);\n        } else if (0x7c3a00fd == function_selector) {\n            interestRate();\n        } else if (0xb113e7ce == function_selector) {\n            previousBalance();\n        } else if (0xd8cb4aa3 == function_selector) {\n            bonus(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 12:59 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _invested; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _bonus; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _atTime; // STORAGE[0x2]\nuint256 _previousBalance; // STORAGE[0x3]\nuint256 _interestRate; // STORAGE[0x4]\nuint256 _nextTime; // STORAGE[0x5]\n\n\nfunction nextTime() public nonPayable { \n    return _nextTime;\n}\n\nfunction atTime(address varg0) public nonPayable { \n    return _atTime[varg0];\n}\n\nfunction invested(address varg0) public nonPayable { \n    return _invested[varg0];\n}\n\nfunction interestRate() public nonPayable { \n    return _interestRate;\n}\n\nfunction previousBalance() public nonPayable { \n    return _previousBalance;\n}\n\nfunction bonus(address varg0) public nonPayable { \n    return _bonus[varg0];\n}\n\nfunction fallback() public payable { \n    v0 = v1 = _atTime[msg.sender];\n    v0 = v2 = block.timestamp;\n    _atTime[msg.sender] = v2;\n    if (v2 >= _nextTime) {\n        v3 = v4 = this.balance;\n        if (v4 < _previousBalance) {\n            v3 = v5 = _previousBalance;\n        }\n        _interestRate = 1 + (v3 - _previousBalance) / 0x8ac7230489e80000;\n        if (_interestRate > 10) {\n            v6 = v7 = 10;\n        } else {\n            if (_interestRate < 1) {\n                v6 = v8 = 1;\n            } else {\n                v6 = v9 = _interestRate;\n            }\n            goto 0x105;\n        }\n        _interestRate = v6;\n        _previousBalance = v3;\n        _nextTime = v2 + 0x2a300;\n    }\n    if (_invested[msg.sender]) {\n        v10 = v11 = (v2 - v0) * (_invested[msg.sender] * _interestRate / 100) / 0x15180;\n        if (v11 > _invested[msg.sender] / 10) {\n            v10 = v12 = _invested[msg.sender] / 10;\n        }\n        v13 = v14 = v2 - v0 < 0x15180;\n        if (v14) {\n            v13 = v15 = v10 > 0xb1a2bc2ec50000;\n        }\n        if (v13) {\n            v10 = v16 = 0xb1a2bc2ec50000;\n        }\n        if (v10 > this.balance / 10) {\n            v10 = v17 = this.balance / 10;\n        }\n        if (v10 > 0) {\n            v18 = msg.sender.call().value(v10).gas(2300 * !v10);\n            require(v18); // checks call status, propagates error data on error\n        }\n        v19 = v20 = v2 - v0 >= 0x15180;\n        if (v20) {\n            v19 = v21 = msg.value >= 0xde0b6b3a7640000;\n        }\n        if (v19) {\n            _invested[msg.sender] += msg.value;\n            _bonus[msg.sender] += msg.value;\n        }\n    }\n    _invested[msg.sender] += msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x2c27fe99) {\n            nextTime();\n        } else if (0x3c4e5323 == function_selector) {\n            atTime(address);\n        } else if (0x66b3f6bf == function_selector) {\n            invested(address);\n        } else if (0x7c3a00fd == function_selector) {\n            interestRate();\n        } else if (0xb113e7ce == function_selector) {\n            previousBalance();\n        } else if (0xd8cb4aa3 == function_selector) {\n            bonus(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 12:59 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _invested; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _bonus; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _atTime; // STORAGE[0x2]\nuint256 _previousBalance; // STORAGE[0x3]\nuint256 _interestRate; // STORAGE[0x4]\nuint256 _nextTime; // STORAGE[0x5]\n\n\nfunction nextTime() public nonPayable { \n    return _nextTime;\n}\n\nfunction atTime(address varg0) public nonPayable { \n    return _atTime[varg0];\n}\n\nfunction invested(address varg0) public nonPayable { \n    return _invested[varg0];\n}\n\nfunction interestRate() public nonPayable { \n    return _interestRate;\n}\n\nfunction previousBalance() public nonPayable { \n    return _previousBalance;\n}\n\nfunction bonus(address varg0) public nonPayable { \n    return _bonus[varg0];\n}\n\nfunction fallback() public payable { \n    v0 = v1 = _atTime[msg.sender];\n    v0 = v2 = block.timestamp;\n    _atTime[msg.sender] = v2;\n    if (v2 >= _nextTime) {\n        v3 = v4 = this.balance;\n        if (v4 < _previousBalance) {\n            v3 = v5 = _previousBalance;\n        }\n        _interestRate = 1 + (v3 - _previousBalance) / 0x8ac7230489e80000;\n        if (_interestRate > 10) {\n            v6 = v7 = 10;\n        } else {\n            if (_interestRate < 1) {\n                v6 = v8 = 1;\n            } else {\n                v6 = v9 = _interestRate;\n            }\n            goto 0x105;\n        }\n        _interestRate = v6;\n        _previousBalance = v3;\n        _nextTime = v2 + 0x2a300;\n    }\n    if (_invested[msg.sender]) {\n        v10 = v11 = (v2 - v0) * (_invested[msg.sender] * _interestRate / 100) / 0x15180;\n        if (v11 > _invested[msg.sender] / 10) {\n            v10 = v12 = _invested[msg.sender] / 10;\n        }\n        v13 = v14 = v2 - v0 < 0x15180;\n        if (v14) {\n            v13 = v15 = v10 > 0xb1a2bc2ec50000;\n        }\n        if (v13) {\n            v10 = v16 = 0xb1a2bc2ec50000;\n        }\n        if (v10 > this.balance / 10) {\n            v10 = v17 = this.balance / 10;\n        }\n        if (v10 > 0) {\n            v18 = msg.sender.call().value(v10).gas(2300 * !v10);\n            require(v18); // checks call status, propagates error data on error\n        }\n        v19 = v20 = v2 - v0 >= 0x15180;\n        if (v20) {\n            v19 = v21 = msg.value >= 0xde0b6b3a7640000;\n        }\n        if (v19) {\n            _invested[msg.sender] += msg.value;\n            _bonus[msg.sender] += msg.value;\n        }\n    }\n    _invested[msg.sender] += msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x2c27fe99) {\n            nextTime();\n        } else if (0x3c4e5323 == function_selector) {\n            atTime(address);\n        } else if (0x66b3f6bf == function_selector) {\n            invested(address);\n        } else if (0x7c3a00fd == function_selector) {\n            interestRate();\n        } else if (0xb113e7ce == function_selector) {\n            previousBalance();\n        } else if (0xd8cb4aa3 == function_selector) {\n            bonus(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 38.380483627319336,
	"usage": {
		"completion_tokens": 673,
		"prompt_tokens": 1054,
		"total_tokens": 1727
	}
}