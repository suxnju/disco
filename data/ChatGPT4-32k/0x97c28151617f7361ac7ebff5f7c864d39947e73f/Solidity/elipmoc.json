{
	"address": "0x97c28151617f7361ac7ebff5f7c864d39947e73f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity version of the given decompiled code:\n\n```solidity\npragma solidity ^0.8.4;\n\ncontract MyContract {\n    mapping (address => uint256) private _invested;\n    mapping (address => uint256) private _atBlock;\n    uint256 private _getBalance;\n    address private _approveInvestor;\n\n    function getBalance() public view returns (uint256) { \n        return _getBalance;\n    }\n\n    function invested(address investor) public view returns (uint256) { \n        return _invested[investor];\n    }\n\n    function getInvestor() public view returns (address) { \n        require(msg.sender == _approveInvestor, \"You are not authorized\");\n        return _approveInvestor;\n    }\n\n    function approveInvestor(address investor) public { \n        require(msg.sender == _approveInvestor, \"You are not authorized\");\n        _approveInvestor = investor;\n    }\n\n    function atBlock(address investor) public view returns (uint256) { \n        return _atBlock[investor];\n    }\n\n    function sendInvestor(address payable investor, uint256 amount) public payable { \n        require(msg.sender == _approveInvestor, \"You are not authorized\");\n        (bool success,) = investor.call{value: amount}(\"\");\n        require(success, \"Failed to send Ether\");\n        _getBalance -= amount;\n    }\n\n    receive() external payable { \n        if (_invested[msg.sender] != 0) {\n            uint256 amount = 6 * _atBlock[msg.sender] / 100 * (block.number - _atBlock[msg.sender]) / 5900;\n            (bool success,) = msg.sender.call{value: amount}(\"\");\n            require(success, \"Failed to send Ether\");\n        }\n        _atBlock[msg.sender] = block.number;\n        _invested[msg.sender] += msg.value;\n        _getBalance += msg.value;\n    }\n}\n```\nPlease note that the exact translation of some behaviours might not be possible due to the different characteristics of EVM bytecode and high-level Solidity language. For instance, the `__function_selector__` function in EVM bytecode is not directly translatable to Solidity as Solidity compiler automatically handles function selectors.",
				"role": "assistant"
			}
		}
	],
	"created": 1701469806,
	"id": "chatcmpl-8R6JK7Hur6EAgmF0DfluX9wQ2N7BB",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 00:32 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _invested; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _atBlock; // STORAGE[0x1]\nuint256 _getBalance; // STORAGE[0x3]\naddress _approveInvestor; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction getBalance() public nonPayable { \n    return _getBalance;\n}\n\nfunction invested(address varg0) public nonPayable { \n    return _invested[varg0];\n}\n\nfunction getInvestor() public nonPayable { \n    require(msg.sender == _approveInvestor);\n    return _approveInvestor;\n}\n\nfunction approveInvestor(address varg0) public nonPayable { \n    require(msg.sender == _approveInvestor);\n    _approveInvestor = varg0;\n}\n\nfunction atBlock(address varg0) public nonPayable { \n    return _atBlock[varg0];\n}\n\nfunction sendInvestor(address varg0, uint256 varg1) public payable { \n    require(msg.sender == _approveInvestor);\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n    _getBalance = _getBalance - varg1;\n}\n\nfunction fallback() public payable { \n    if (_invested[msg.sender]) {\n        v0 = msg.sender.call().value(6 * _atBlock[msg.sender] / 100 * (block.number - _atBlock[msg.sender]) / 5900).gas(2300 * !(6 * _atBlock[msg.sender] / 100 * (block.number - _atBlock[msg.sender]) / 5900));\n        require(v0); // checks call status, propagates error data on error\n    }\n    _atBlock[msg.sender] = block.number;\n    _atBlock[msg.sender] += msg.value;\n    _getBalance += msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x12065fe0) {\n            getBalance();\n        } else if (0x66b3f6bf == function_selector) {\n            invested(address);\n        } else if (0x796c8902 == function_selector) {\n            getInvestor();\n        } else if (0x7de14129 == function_selector) {\n            approveInvestor(address);\n        } else if (0x8aac1362 == function_selector) {\n            atBlock(address);\n        } else if (0xe8d0ed31 == function_selector) {\n            sendInvestor(address,uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 00:32 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _invested; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _atBlock; // STORAGE[0x1]\nuint256 _getBalance; // STORAGE[0x3]\naddress _approveInvestor; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction getBalance() public nonPayable { \n    return _getBalance;\n}\n\nfunction invested(address varg0) public nonPayable { \n    return _invested[varg0];\n}\n\nfunction getInvestor() public nonPayable { \n    require(msg.sender == _approveInvestor);\n    return _approveInvestor;\n}\n\nfunction approveInvestor(address varg0) public nonPayable { \n    require(msg.sender == _approveInvestor);\n    _approveInvestor = varg0;\n}\n\nfunction atBlock(address varg0) public nonPayable { \n    return _atBlock[varg0];\n}\n\nfunction sendInvestor(address varg0, uint256 varg1) public payable { \n    require(msg.sender == _approveInvestor);\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n    _getBalance = _getBalance - varg1;\n}\n\nfunction fallback() public payable { \n    if (_invested[msg.sender]) {\n        v0 = msg.sender.call().value(6 * _atBlock[msg.sender] / 100 * (block.number - _atBlock[msg.sender]) / 5900).gas(2300 * !(6 * _atBlock[msg.sender] / 100 * (block.number - _atBlock[msg.sender]) / 5900));\n        require(v0); // checks call status, propagates error data on error\n    }\n    _atBlock[msg.sender] = block.number;\n    _atBlock[msg.sender] += msg.value;\n    _getBalance += msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x12065fe0) {\n            getBalance();\n        } else if (0x66b3f6bf == function_selector) {\n            invested(address);\n        } else if (0x796c8902 == function_selector) {\n            getInvestor();\n        } else if (0x7de14129 == function_selector) {\n            approveInvestor(address);\n        } else if (0x8aac1362 == function_selector) {\n            atBlock(address);\n        } else if (0xe8d0ed31 == function_selector) {\n            sendInvestor(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 00:32 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _invested; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _atBlock; // STORAGE[0x1]\nuint256 _getBalance; // STORAGE[0x3]\naddress _approveInvestor; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction getBalance() public nonPayable { \n    return _getBalance;\n}\n\nfunction invested(address varg0) public nonPayable { \n    return _invested[varg0];\n}\n\nfunction getInvestor() public nonPayable { \n    require(msg.sender == _approveInvestor);\n    return _approveInvestor;\n}\n\nfunction approveInvestor(address varg0) public nonPayable { \n    require(msg.sender == _approveInvestor);\n    _approveInvestor = varg0;\n}\n\nfunction atBlock(address varg0) public nonPayable { \n    return _atBlock[varg0];\n}\n\nfunction sendInvestor(address varg0, uint256 varg1) public payable { \n    require(msg.sender == _approveInvestor);\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n    _getBalance = _getBalance - varg1;\n}\n\nfunction fallback() public payable { \n    if (_invested[msg.sender]) {\n        v0 = msg.sender.call().value(6 * _atBlock[msg.sender] / 100 * (block.number - _atBlock[msg.sender]) / 5900).gas(2300 * !(6 * _atBlock[msg.sender] / 100 * (block.number - _atBlock[msg.sender]) / 5900));\n        require(v0); // checks call status, propagates error data on error\n    }\n    _atBlock[msg.sender] = block.number;\n    _atBlock[msg.sender] += msg.value;\n    _getBalance += msg.value;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x12065fe0) {\n            getBalance();\n        } else if (0x66b3f6bf == function_selector) {\n            invested(address);\n        } else if (0x796c8902 == function_selector) {\n            getInvestor();\n        } else if (0x7de14129 == function_selector) {\n            approveInvestor(address);\n        } else if (0x8aac1362 == function_selector) {\n            atBlock(address);\n        } else if (0xe8d0ed31 == function_selector) {\n            sendInvestor(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 14.128585577011108,
	"usage": {
		"completion_tokens": 465,
		"prompt_tokens": 710,
		"total_tokens": 1175
	}
}