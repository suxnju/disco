{
	"address": "0x05461124c86c0ad7c5d8e012e1499fd9109ffb7d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The decompiled EVM bytecode provided corresponds to a complex smart contract that includes multiple functionalities. The equivalent Solidity code could look like the following. Please note that due to the complexity of the contract and lack of context, this is an approximation and may not compile as is.\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowed;\n    uint256 public totalSupply;\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        uint256 allowance = allowed[_from][msg.sender];\n        require(balances[_from] >= _value && allowance >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        if (allowance < MAX_UINT256) {\n            allowed[_from][msg.sender] -= _value;\n        }\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n```\n\nThis is a fairly standard ERC20 token contract, with `transfer`, `transferFrom`, `balanceOf`, `approve`, and `allowance` functions. However, please note that the actual functionality could be more complex as the EVM bytecode decompilation doesn't provide the exact solidity version or the contract purpose.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472720,
	"id": "chatcmpl-8MuvIQ0v3bLzeJ34kFfa1UP9FwVK3",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0165:\n            var temp0 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp1 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = msg.value;\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + (temp2 + 0x40) - temp3], [0x2d0c0a8842b9944ece1495eb61121621b5e36bd6af3bba0318c695f525aef79f]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x99d386) {\n                // Dispatch table entry for enableTrade()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x01cc;\n                var1 = enableTrade();\n            \n            label_01CC:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var1;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x01a12fd3) {\n                // Dispatch table entry for removeAlerter(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeAlerter(var2);\n                stop();\n            } else if (var0 == 0x1bc7bfec) {\n                // Dispatch table entry for setTokenWallet(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp6 & msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & temp6;\n                setTokenWallet(var2, var3);\n                stop();\n            } else if (var0 == 0x26782247) {\n                // Dispatch table entry for pendingAdmin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = pendingAdmin();\n            \n            label_0239:\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp8 = memory[0x40:0x60];\n                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n            } else if (var0 == 0x27a099d8) {\n                // Dispatch table entry for getOperators()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0268;\n                var1 = getOperators();\n            \n            label_0268:\n                var temp9 = memory[0x40:0x60];\n                var2 = temp9;\n                memory[var2:var2 + 0x20] = 0x20;\n                var3 = var2;\n                var temp10 = var3 + 0x20;\n                var temp11 = var1;\n                memory[temp10:temp10 + 0x20] = memory[temp11:temp11 + 0x20];\n                var var4 = temp10 + 0x20;\n                var var5 = temp11 + 0x20;\n                var var6 = memory[temp11:temp11 + 0x20] * 0x20;\n                var var7 = var6;\n                var var8 = var4;\n                var var9 = var5;\n                var var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_02A7:\n                    var temp12 = memory[0x40:0x60];\n                    return memory[temp12:temp12 + (var6 + var4) - temp12];\n                } else {\n                label_0298:\n                    var temp13 = var10;\n                    memory[temp13 + var8:temp13 + var8 + 0x20] = memory[var9 + temp13:var9 + temp13 + 0x20];\n                    var10 = temp13 + 0x20;\n                \n                    if (var10 >= var7) { goto label_02A7; }\n                    else { goto label_0298; }\n                }\n            } else if (var0 == 0x3ccdbb28) {\n                // Dispatch table entry for withdrawToken(address,uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp14 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp14;\n                withdrawToken(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x408ee7fe) {\n                // Dispatch table entry for addAlerter(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addAlerter(var2);\n                stop();\n            } else if (var0 == 0x47e6924f) {\n                // Dispatch table entry for sanityRatesContract()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = sanityRatesContract();\n                goto label_0239;\n            } else if (var0 == 0x546dc71c) {\n                // Dispatch table entry for approveWithdrawAddress(address,address,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var temp15 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp15 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp15;\n                var4 = !!msg.data[0x44:0x64];\n                approveWithdrawAddress(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x69328dec) {\n                // Dispatch table entry for withdraw(address,uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cc;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp16 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp16;\n                var1 = withdraw(var2, var3, var4);\n                goto label_01CC;\n            } else if (var0 == 0x6940030f) {\n                // Dispatch table entry for disableTrade()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cc;\n                var1 = disableTrade();\n                goto label_01CC;\n            } else if (var0 == 0x6cf69811) {\n                // Dispatch table entry for trade(address,uint256,address,address,uint256,bool)\n                var1 = 0x01cc;\n                var temp17 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp17 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = temp17 & msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84] & temp17;\n                var6 = msg.data[0x84:0xa4];\n                var7 = !!msg.data[0xa4:0xc4];\n                var1 = trade(var2, var3, var4, var5, var6, var7);\n                goto label_01CC;\n            } else if (var0 == 0x75829def) {\n                // Dispatch table entry for transferAdmin(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferAdmin(var2);\n                stop();\n            } else if (var0 == 0x77f50f97) {\n                // Dispatch table entry for claimAdmin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                claimAdmin();\n                stop();\n            } else if (var0 == 0x7acc8678) {\n                // Dispatch table entry for transferAdminQuickly(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferAdminQuickly(var2);\n                stop();\n            } else if (var0 == 0x7c423f54) {\n                // Dispatch table entry for getAlerters()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0268;\n                var1 = getAlerters();\n                goto label_0268;\n            } else if (var0 == 0x7cd44272) {\n                // Dispatch table entry for getConversionRate(address,address,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0437;\n                var temp18 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp18 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp18;\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var1 = getConversionRate(var2, var3, var4, var5);\n            \n            label_0437:\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x9870d7fe) {\n                // Dispatch table entry for addOperator(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOperator(var2);\n                stop();\n            } else if (var0 == 0xa7fca953) {\n                // Dispatch table entry for getSrcQty(address,address,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0437;\n                var temp21 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp21 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp21;\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var1 = getSrcQty(var2, var3, var4, var5);\n                goto label_0437;\n            } else if (var0 == 0xa80cbac6) {\n                // Dispatch table entry for tokenWallet(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = tokenWallet(var2);\n                goto label_0239;\n            } else if (var0 == 0xac8a584a) {\n                // Dispatch table entry for removeOperator(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOperator(var2);\n                stop();\n            } else if (var0 == 0xb3066d49) {\n                // Dispatch table entry for setContracts(address,address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var temp22 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp22 & msg.data[0x04:0x24];\n                var3 = temp22 & msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp22;\n                setContracts(var2, var3, var4);\n                stop();\n            } else if (var0 == 0xb78b842d) {\n                // Dispatch table entry for kyberNetwork()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = kyberNetwork();\n                goto label_0239;\n            } else if (var0 == 0xce56c454) {\n                // Dispatch table entry for withdrawEther(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                withdrawEther(var2, var3);\n                stop();\n            } else if (var0 == 0xd5847d33) {\n                // Dispatch table entry for conversionRatesContract()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = conversionRatesContract();\n                goto label_0239;\n            } else if (var0 == 0xd621e813) {\n                // Dispatch table entry for tradeEnabled()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cc;\n                var2 = tradeEnabled();\n                goto label_01CC;\n            } else if (var0 == 0xd7b7024d) {\n                // Dispatch table entry for approvedWithdrawAddresses(bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cc;\n                var2 = msg.data[0x04:0x24];\n                var2 = approvedWithdrawAddresses(var2);\n                goto label_01CC;\n            } else if (var0 == 0xf851a440) {\n                // Dispatch table entry for admin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = admin();\n                goto label_0239;\n            } else if (var0 == 0xf8b2cb4f) {\n                // Dispatch table entry for getBalance(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0437;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = getBalance(var2);\n                goto label_0437;\n            } else if (var0 == 0xfa64dffa) {\n                // Dispatch table entry for getDestQty(address,address,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0437;\n                var temp23 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp23 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp23;\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var1 = getDestQty(var2, var3, var4, var5);\n                goto label_0437;\n            } else { goto label_0165; }\n        }\n    }\n    \n    function enableTrade() returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = (storage[0x07] & ~0xff0000000000000000000000000000000000000000) | 0x010000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = !!0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e735]);\n        return 0x01;\n    }\n    \n    function removeAlerter(var arg0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[var0:var0 + 0x40]);\n        storage[temp1] = storage[temp1] & ~0xff;\n    \n        if (var0 >= storage[0x05]) {\n        label_07C4:\n            return;\n        } else {\n        label_06C8:\n            var var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var2 = 0x05;\n            var var3 = var0;\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var3] & 0x02 ** 0xa0 - 0x01 != var1) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x05]) { goto label_07C4; }\n                else { goto label_06C8; }\n            } else {\n                var1 = 0x05;\n                var temp2 = storage[var1];\n                var2 = temp2 + ~0x00;\n            \n                if (var2 >= temp2) { assert(); }\n            \n                memory[0x00:0x20] = var1;\n                var temp3 = storage[keccak256(memory[0x00:0x20]) + var2];\n                var2 = 0x05;\n                var1 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var3 = var0;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var temp4 = keccak256(memory[0x00:0x20]) + var3;\n                storage[temp4] = (var1 & 0x02 ** 0xa0 - 0x01) | (storage[temp4] & ~(0x02 ** 0xa0 - 0x01));\n                var1 = storage[0x05];\n                var3 = 0x05;\n                var2 = 0x076f;\n                var var4 = var1 + ~0x00;\n                func_1FF4(var3, var4);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = !!0x00;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x40) - temp6], [0x5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762]);\n                goto label_07C4;\n            }\n        }\n    }\n    \n    function setTokenWallet(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp1 & temp2;\n        memory[0x20:0x40] = 0x0b;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg1;\n        storage[temp3] = (temp4 & temp1) | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n        var temp5 = memory[0x40:0x60];\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        memory[temp5:temp5 + 0x20] = temp6 & temp2;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp6 & temp4;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp5 + 0x40) - temp7], [0x81995c7b922889ac0a81e41866106d4046268ea3a9abaae9f9e080a6ce36ee7d]);\n    }\n    \n    function pendingAdmin() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function getOperators() returns (var r0) {\n        var var0 = 0x088b;\n        var0 = func_2018();\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x04;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_08E1:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var4 = temp2 + var6 * 0x20;\n            memory[0x00:0x20] = var5;\n            var6 = temp2;\n            var5 = keccak256(memory[0x00:0x20]);\n        \n        label_08C3:\n            var temp3 = var5;\n            var temp4 = var6;\n            memory[temp4:temp4 + 0x20] = storage[temp3] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp3 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 > var6) { goto label_08C3; }\n            else { goto label_08E1; }\n        }\n    }\n    \n    function withdrawToken(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = arg1;\n        var var2 = temp1 + 0x44;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x40:0x60];\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[temp3:temp3 + 0x20] = temp4 & arg0;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = arg1;\n        memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = temp4 & arg2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp3 + 0x60) - temp5], [0x72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6]);\n    }\n    \n    function addAlerter(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] >= 0x32) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x01;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x40) - temp3], [0x5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762]);\n        memory[0x00:0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var var1 = storage[0x05];\n        var var0 = 0x05;\n        var var2 = var1 + 0x01;\n        var var3 = 0x0ab2;\n        var var4 = var0;\n        var var5 = var2;\n        func_1FF4(var4, var5);\n        memory[0x00:0x20] = var0;\n        var temp5 = keccak256(memory[0x00:0x20]) + var1;\n        storage[temp5] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[temp5] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function sanityRatesContract() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function approveWithdrawAddress(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg2;\n        var temp2 = arg0;\n        var temp3 = arg1;\n        var temp4 = memory[0x40:0x60];\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[temp4:temp4 + 0x20] = (temp5 & temp2) * 0x01000000000000000000000000;\n        memory[temp4 + 0x14:temp4 + 0x14 + 0x20] = (temp5 & temp3) * 0x01000000000000000000000000;\n        var temp6 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp6:temp6 + (temp4 + 0x28) - temp6]);\n        memory[0x20:0x40] = 0x0a;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        storage[temp7] = !!temp1 | (storage[temp7] & ~0xff);\n        var temp8 = memory[0x40:0x60];\n        var temp9 = 0x02 ** 0xa0 - 0x01;\n        memory[temp8:temp8 + 0x20] = temp9 & temp2;\n        memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp9 & temp3;\n        memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = !!temp1;\n        var temp10 = memory[0x40:0x60];\n        log(memory[temp10:temp10 + (temp8 + 0x60) - temp10], [0xd5fd5351efae1f4bb760079da9f0ff9589e2c3e216337ca9d39cdff573b245c4]);\n        var var0 = 0x0bc7;\n        var var1 = temp2;\n        func_19E4(var1);\n        var temp11 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp11 & arg0;\n        memory[0x20:0x40] = 0x0b;\n        var0 = !(storage[keccak256(memory[0x00:0x40])] & temp11);\n    \n        if (var0) {\n            var temp18 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp19 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp18;\n        \n            if (temp19 == arg0 & 0x02 ** 0xa0 - 0x01) { goto label_0CD2; }\n            else { goto label_0C0C; }\n        } else if (!var0) {\n        label_0CD2:\n            return;\n        } else {\n        label_0C0C:\n            var temp12 = 0x02 ** 0xa0 - 0x01;\n            var temp13 = temp12 & arg0;\n            memory[0x00:0x20] = temp13;\n            memory[0x20:0x40] = 0x0b;\n            var temp14 = keccak256(memory[0x00:0x40]);\n            var temp15 = address(this);\n            storage[temp14] = (temp15 & temp12) | (storage[temp14] & ~(0x02 ** 0xa0 - 0x01));\n            var0 = temp13;\n            var1 = 0x095ea7b3;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = temp15 & 0x02 ** 0xa0 - 0x01;\n            memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x8000000000000000000000000000000000000000000000000000000000000000;\n            var var2 = temp16 + 0x44;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp17;\n            temp17, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (!temp17) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { goto label_0CD2; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function withdraw(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & arg0) * 0x01000000000000000000000000;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (temp1 & arg2) * 0x01000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp2:temp2 + (temp0 + 0x28) - temp2]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x2049:0x2069];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n    \n        if (temp4 != arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp5 = 0x02 ** 0xa0 - 0x01;\n            var temp6 = arg0 & temp5;\n            memory[0x00:0x20] = temp6;\n            memory[0x20:0x40] = 0x0b;\n            var var1 = temp6;\n            var var2 = 0x23b872dd;\n            var temp7 = storage[keccak256(memory[0x00:0x40])] & temp5;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = temp9 & temp7;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = temp9 & arg2;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = arg1;\n            var var3 = temp8 + 0x64;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp10;\n            temp10, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n        \n            if (!temp10) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n        label_0E52:\n            var temp11 = memory[0x40:0x60];\n            var temp12 = 0x02 ** 0xa0 - 0x01;\n            memory[temp11:temp11 + 0x20] = temp12 & arg0;\n            memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = arg1;\n            memory[temp11 + 0x40:temp11 + 0x40 + 0x20] = temp12 & arg2;\n            var temp13 = memory[0x40:0x60];\n            log(memory[temp13:temp13 + (temp11 + 0x60) - temp13], [0xb67719fc33c1f17d31bf3a698690d62066b1e0bae28fcd3c56cf2c015c2863d6]);\n            return 0x01;\n        } else {\n            var temp14 = arg1;\n            var temp15 = memory[0x40:0x60];\n            var temp16;\n            temp16, memory[temp15:temp15 + 0x00] = address(arg2 & 0x02 ** 0xa0 - 0x01).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp15:temp15 + memory[0x40:0x60] - temp15]);\n        \n            if (temp16) { goto label_0E52; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function disableTrade() returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = storage[0x07] & ~0xff0000000000000000000000000000000000000000;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = !!0x00;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e735]);\n        return 0x01;\n    }\n    \n    function trade(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x07] / 0x010000000000000000000000000000000000000000 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0f86;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var var5 = arg3;\n        var var6 = arg4;\n        var var7 = arg5;\n        var1 = func_1AA1(var2, var3, var4, var5, var6, var7);\n    \n        if (var1) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferAdmin(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = storage[0x01] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40]);\n        storage[0x01] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function claimAdmin() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[temp2:temp2 + 0x20] = temp3 & temp1 & storage[0x01];\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp3 & storage[0x00] & temp1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp2 + 0x40) - temp4], [0x65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed]);\n        var temp5 = storage[0x01];\n        var temp6 = ~(0x02 ** 0xa0 - 0x01);\n        storage[0x00] = (temp5 & 0x02 ** 0xa0 - 0x01) | (temp6 & storage[0x00]);\n        storage[0x01] = temp6 & temp5;\n    }\n    \n    function transferAdminQuickly(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40]);\n        var temp4 = memory[0x40:0x60];\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[temp4:temp4 + 0x20] = temp5 & temp1;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp5 & storage[0x00] & 0x02 ** 0xa0 - 0x01;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp4 + 0x40) - temp6], [0x65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed]);\n        storage[0x00] = (temp1 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function getAlerters() returns (var r0) {\n        var var0 = 0x11bd;\n        var0 = func_2018();\n        var temp0 = storage[0x05];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x05;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_08E1:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { return var1; }\n        \n        label_08C3:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_08C3; }\n            else { goto label_08E1; }\n        }\n    }\n    \n    function getConversionRate(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (storage[0x07] / 0x0100 ** 0x14 & 0xff) {\n            var temp0 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp1 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp0;\n        \n            if (arg0 & 0x02 ** 0xa0 - 0x01 != temp1) {\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2049:0x2069];\n                var temp3 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp2;\n            \n                if (arg1 & 0x02 ** 0xa0 - 0x01 != temp3) {\n                    var0 = 0x00;\n                \n                label_13F9:\n                    return var0;\n                } else {\n                    var2 = 0x00;\n                    var1 = arg0;\n                \n                label_12A2:\n                    var var6 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                    var var7 = 0xb8e9c22e;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = (var7 & 0xffffffff) * 0x02 ** 0xe0;\n                    memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = arg3;\n                    memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = !!var2;\n                    memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = arg2;\n                    var var8 = temp4 + 0x84;\n                    var var9 = 0x20;\n                    var var10 = memory[0x40:0x60];\n                    var var11 = var8 - var10;\n                    var var12 = var10;\n                    var var13 = 0x00;\n                    var var14 = var6;\n                \n                    if (!address(var14).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp5;\n                    temp5, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas - 0x02c6).value(var13)(memory[var12:var12 + var11]);\n                \n                    if (!temp5) { revert(memory[0x00:0x00]); }\n                \n                    var3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                    var6 = 0x133b;\n                    var7 = arg0;\n                    var8 = arg1;\n                    var9 = arg2;\n                    var10 = var3;\n                    var6 = getDestQty(var7, var8, var9, var10);\n                    var4 = var6;\n                    var6 = var4;\n                    var7 = 0x1347;\n                    var8 = arg1;\n                    var7 = getBalance(var8);\n                \n                    if (var7 < var6) {\n                        var0 = 0x00;\n                        goto label_13F9;\n                    } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n                    label_13F5:\n                        var0 = var3;\n                        goto label_13F9;\n                    } else {\n                        var6 = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                        var7 = 0xa58092b7;\n                        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = (var7 & 0xffffffff) * 0x02 ** 0xe0;\n                        var temp7 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = temp7 & arg0;\n                        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = temp7 & arg1;\n                        var8 = temp6 + 0x44;\n                        var9 = 0x20;\n                        var10 = memory[0x40:0x60];\n                        var11 = var8 - var10;\n                        var12 = var10;\n                        var13 = 0x00;\n                        var14 = var6;\n                    \n                        if (!address(var14).code.length) { revert(memory[0x00:0x00]); }\n                    \n                        var temp8;\n                        temp8, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas - 0x02c6).value(var13)(memory[var12:var12 + var11]);\n                    \n                        if (!temp8) { revert(memory[0x00:0x00]); }\n                    \n                        var5 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                    \n                        if (var3 <= var5) { goto label_13F5; }\n                    \n                        var0 = 0x00;\n                        goto label_13F9;\n                    }\n                }\n            } else {\n                var2 = 0x01;\n                var1 = arg1;\n                goto label_12A2;\n            }\n        } else {\n            var0 = 0x00;\n            goto label_13F9;\n        }\n    }\n    \n    function addOperator(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x04] >= 0x32) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x01;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x40) - temp3], [0x091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b]);\n        memory[0x00:0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var var1 = storage[0x04];\n        var var0 = 0x04;\n        var var2 = var1 + 0x01;\n        var var3 = 0x0ab2;\n        var var4 = var0;\n        var var5 = var2;\n        func_1FF4(var4, var5);\n        memory[0x00:0x20] = var0;\n        var temp5 = keccak256(memory[0x00:0x20]) + var1;\n        storage[temp5] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[temp5] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function getSrcQty(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x14e4;\n        var var4 = arg1;\n        var3 = func_1DF6(var4);\n        var1 = var3;\n        var3 = 0x14ef;\n        var4 = arg0;\n        var3 = func_1DF6(var4);\n        var temp0 = var3;\n        var2 = temp0;\n        var3 = 0x14fd;\n        var4 = arg2;\n        var var5 = var2;\n        var var6 = var1;\n        var var7 = arg3;\n        return func_1EB4(var4, var5, var6, var7);\n    }\n    \n    function tokenWallet(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeOperator(var arg0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[var0:var0 + 0x40]);\n        storage[temp1] = storage[temp1] & ~0xff;\n    \n        if (var0 >= storage[0x04]) {\n        label_07C4:\n            return;\n        } else {\n        label_1593:\n            var var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var2 = 0x04;\n            var var3 = var0;\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var3] & 0x02 ** 0xa0 - 0x01 != var1) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x04]) { goto label_07C4; }\n                else { goto label_1593; }\n            } else {\n                var1 = 0x04;\n                var temp2 = storage[var1];\n                var2 = temp2 + ~0x00;\n            \n                if (var2 >= temp2) { assert(); }\n            \n                memory[0x00:0x20] = var1;\n                var temp3 = storage[keccak256(memory[0x00:0x20]) + var2];\n                var2 = 0x04;\n                var1 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var3 = var0;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var temp4 = keccak256(memory[0x00:0x20]) + var3;\n                storage[temp4] = (var1 & 0x02 ** 0xa0 - 0x01) | (storage[temp4] & ~(0x02 ** 0xa0 - 0x01));\n                var1 = storage[0x04] + ~0x00;\n                var2 = 0x163a;\n                var3 = 0x04;\n                var var4 = var1;\n                func_1FF4(var3, var4);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = !!0x00;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x40) - temp6], [0x091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b]);\n                goto label_07C4;\n            }\n        }\n    }\n    \n    function setContracts(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = ~(0x02 ** 0xa0 - 0x01);\n        var temp3 = (temp2 & storage[0x07]) | (arg0 & temp1);\n        storage[0x07] = temp3;\n        var temp4 = (temp2 & storage[0x08]) | (temp1 & arg1);\n        storage[0x08] = temp4;\n        var temp5 = (temp2 & storage[0x09]) | (temp1 & arg2);\n        storage[0x09] = temp5;\n        var temp6 = memory[0x40:0x60];\n        var temp7 = 0x02 ** 0xa0 - 0x01;\n        memory[temp6:temp6 + 0x20] = temp7 & temp1 & temp3;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp7 & temp1 & temp4;\n        memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = temp7 & temp1 & temp5;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp6 + 0x60) - temp8], [0x7a85322644a4462d8ff5482d2a841a4d231f8cfb3c9f4a50f66f8b2bd568c31c]);\n    }\n    \n    function kyberNetwork() returns (var r0) { return storage[0x07] & 0x02 ** 0xa0 - 0x01; }\n    \n    function withdrawEther(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(arg1 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de]);\n    }\n    \n    function conversionRatesContract() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function tradeEnabled() returns (var r0) { return storage[0x07] / 0x010000000000000000000000000000000000000000 & 0xff; }\n    \n    function approvedWithdrawAddresses(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function admin() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function getBalance(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x2049:0x2069];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n    \n        if (temp1 != arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            var temp3 = arg0 & temp2;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x0b;\n            var temp4 = temp2 & storage[keccak256(memory[0x00:0x40])];\n            var1 = temp4;\n            var var4 = temp3;\n            var var5 = 0x70a08231;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            var var6 = temp5 + 0x24;\n            var var7 = 0x20;\n            var var8 = memory[0x40:0x60];\n            var var9 = var6 - var8;\n            var var10 = var8;\n            var var11 = 0x00;\n            var var12 = var4;\n        \n            if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp6;\n            temp6, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n        \n            if (!temp6) { revert(memory[0x00:0x00]); }\n        \n            var2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            var4 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var5 = 0xdd62ed3e;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = temp8 & var1;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = temp8 & address(this);\n            var6 = temp7 + 0x44;\n            var7 = 0x20;\n            var8 = memory[0x40:0x60];\n            var9 = var6 - var8;\n            var10 = var8;\n            var11 = 0x00;\n            var12 = var4;\n        \n            if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp9;\n            temp9, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n        \n            if (!temp9) { revert(memory[0x00:0x00]); }\n        \n            var3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        \n            if (var2 < var3) {\n                var0 = var2;\n            \n            label_19B5:\n                return var0;\n            } else {\n                var4 = var3;\n                var0 = var4;\n                goto label_19B5;\n            }\n        } else {\n            var0 = address(this).balance;\n            goto label_19B5;\n        }\n    }\n    \n    function getDestQty(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x19cb;\n        var var4 = arg1;\n        var3 = func_1DF6(var4);\n        var1 = var3;\n        var3 = 0x19d6;\n        var4 = arg0;\n        var3 = func_1DF6(var4);\n        var temp0 = var3;\n        var2 = temp0;\n        var3 = 0x14fd;\n        var4 = arg2;\n        var var5 = var2;\n        var var6 = var1;\n        var var7 = arg3;\n        return func_1F5B(var4, var5, var6, var7);\n    }\n    \n    function func_19E4(var arg0) {\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x2049:0x2069];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n    \n        if (temp1 != arg0 & 0x02 ** 0xa0 - 0x01) {\n            var var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var1 = 0x313ce567;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n            var var2 = temp2 + 0x04;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp3;\n            temp3, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (!temp3) { revert(memory[0x00:0x00]); }\n        \n            var temp4 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            return;\n        } else {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            storage[keccak256(memory[0x00:0x40])] = 0x12;\n            return;\n        }\n    }\n    \n    function func_1AA1(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (!arg5) {\n        label_1AF5:\n            var var4 = 0x1b01;\n            var var5 = arg0;\n            var var6 = arg2;\n            var var7 = arg1;\n            var var8 = arg4;\n            var4 = getDestQty(var5, var6, var7, var8);\n            var1 = var4;\n        \n            if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp1 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp0;\n        \n            if (temp1 != arg0 & 0x02 ** 0xa0 - 0x01) {\n                var2 = arg0;\n                var3 = arg1 * ~0x00;\n                var4 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                var5 = 0xc6fd2103;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = var3;\n                memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x00;\n                memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = block.number;\n                var6 = temp2 + 0x84;\n                var7 = 0x00;\n                var8 = memory[0x40:0x60];\n                var var9 = var6 - var8;\n                var var10 = var8;\n                var var11 = 0x00;\n                var var12 = var4;\n            \n                if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n            \n            label_1BA9:\n                var temp3;\n                temp3, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n            \n                if (!temp3) { revert(memory[0x00:0x00]); }\n            \n                var temp4 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2049:0x2069];\n                var temp5 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp4;\n            \n                if (temp5 == arg0 & 0x02 ** 0xa0 - 0x01) {\n                label_1C80:\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x2049:0x2069];\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp6;\n                \n                    if (temp7 != arg2 & 0x02 ** 0xa0 - 0x01) {\n                        var temp8 = 0x02 ** 0xa0 - 0x01;\n                        var temp9 = arg2 & temp8;\n                        memory[0x00:0x20] = temp9;\n                        memory[0x20:0x40] = 0x0b;\n                        var4 = temp9;\n                        var5 = 0x23b872dd;\n                        var temp10 = storage[keccak256(memory[0x00:0x40])] & temp8;\n                        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                        var temp11 = memory[0x40:0x60];\n                        memory[temp11:temp11 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n                        var temp12 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = temp12 & temp10;\n                        memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = temp12 & arg3;\n                        memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = var1;\n                        var6 = temp11 + 0x64;\n                        var7 = 0x20;\n                        var8 = memory[0x40:0x60];\n                        var9 = var6 - var8;\n                        var10 = var8;\n                        var11 = 0x00;\n                        var12 = var4;\n                    \n                        if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n                    \n                        var temp13;\n                        temp13, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n                    \n                        if (!temp13) { revert(memory[0x00:0x00]); }\n                    \n                        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n                    \n                    label_1D79:\n                        var temp14 = memory[0x40:0x60];\n                        var temp15 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp14:temp14 + 0x20] = temp15 & arg0;\n                        memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = arg1;\n                        memory[temp14 + 0x40:temp14 + 0x40 + 0x20] = temp15 & arg2;\n                        memory[temp14 + 0x60:temp14 + 0x60 + 0x20] = var1;\n                        memory[temp14 + 0x80:temp14 + 0x80 + 0x20] = temp15 & arg3;\n                        var temp16 = memory[0x40:0x60];\n                        log(memory[temp16:temp16 + (temp14 + 0xa0) - temp16], [0xea9415385bae08fe9f6dc457b02577166790cde83bb18cc340aac6cb81b824de, msg.sender]);\n                        return 0x01;\n                    } else {\n                        var temp17 = var1;\n                        var temp18 = memory[0x40:0x60];\n                        var temp19;\n                        temp19, memory[temp18:temp18 + 0x00] = address(arg3 & 0x02 ** 0xa0 - 0x01).call.gas(!temp17 * 0x08fc).value(temp17)(memory[temp18:temp18 + memory[0x40:0x60] - temp18]);\n                    \n                        if (temp19) { goto label_1D79; }\n                        else { revert(memory[0x00:0x00]); }\n                    }\n                } else {\n                    var temp20 = 0x02 ** 0xa0 - 0x01;\n                    var temp21 = arg0 & temp20;\n                    memory[0x00:0x20] = temp21;\n                    memory[0x20:0x40] = 0x0b;\n                    var4 = temp21;\n                    var5 = 0x23b872dd;\n                    var temp22 = temp20 & storage[keccak256(memory[0x00:0x40])];\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp23 = memory[0x40:0x60];\n                    memory[temp23:temp23 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n                    var temp24 = 0x02 ** 0xa0 - 0x01;\n                    memory[temp23 + 0x04:temp23 + 0x04 + 0x20] = temp24 & msg.sender;\n                    memory[temp23 + 0x24:temp23 + 0x24 + 0x20] = temp24 & temp22;\n                    memory[temp23 + 0x44:temp23 + 0x44 + 0x20] = arg1;\n                    var6 = temp23 + 0x64;\n                    var7 = 0x20;\n                    var8 = memory[0x40:0x60];\n                    var9 = var6 - var8;\n                    var10 = var8;\n                    var11 = 0x00;\n                    var12 = var4;\n                \n                    if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp25;\n                    temp25, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n                \n                    if (!temp25) { revert(memory[0x00:0x00]); }\n                \n                    if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { goto label_1C80; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n                var2 = arg2;\n                var3 = var1;\n                var4 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                var5 = 0xc6fd2103;\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp26 + 0x04:temp26 + 0x04 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp26 + 0x24:temp26 + 0x24 + 0x20] = var3;\n                memory[temp26 + 0x44:temp26 + 0x44 + 0x20] = 0x00;\n                memory[temp26 + 0x64:temp26 + 0x64 + 0x20] = block.number;\n                var6 = temp26 + 0x84;\n                var7 = 0x00;\n                var8 = memory[0x40:0x60];\n                var9 = var6 - var8;\n                var10 = var8;\n                var11 = 0x00;\n                var12 = var4;\n            \n                if (address(var12).code.length) { goto label_1BA9; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else if (arg4 > 0x00) {\n            var temp27 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp28 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp27;\n        \n            if (temp28 != arg0 & 0x02 ** 0xa0 - 0x01) {\n                if (!msg.value) { goto label_1AF5; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (arg1 == msg.value) { goto label_1AF5; }\n            else { revert(memory[0x00:0x00]); }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1DF6(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x2049:0x2069];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n    \n        if (temp1 != arg0 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var1) {\n                var0 = var1;\n            \n            label_1EAE:\n                return var0;\n            } else {\n                var var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n                var var3 = 0x313ce567;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n                var var4 = temp2 + 0x04;\n                var var5 = 0x20;\n                var var6 = memory[0x40:0x60];\n                var var7 = var4 - var6;\n                var var8 = var6;\n                var var9 = 0x00;\n                var var10 = var2;\n            \n                if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp3;\n                temp3, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n            \n                if (!temp3) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                goto label_1EAE;\n            }\n        } else {\n            var0 = 0x12;\n            goto label_1EAE;\n        }\n    }\n    \n    function func_1EB4(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (arg0 > 0x204fce5e3e25026110000000) { revert(memory[0x00:0x00]); }\n    \n        if (arg3 > 0xd3c21bcecceda1000000) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 < arg2) {\n            if (arg2 - arg1 > 0x12) { revert(memory[0x00:0x00]); }\n        \n            var1 = arg0 * 0x0de0b6b3a7640000;\n            var2 = arg3 * 0x0a ** (arg2 - arg1);\n        \n        label_1F3F:\n            var temp0 = var2;\n            var var3 = temp0;\n            var var4 = (var1 + var3) - 0x01;\n        \n            if (var3) { return var4 / var3; }\n            else { assert(); }\n        } else if (arg1 - arg2 <= 0x12) {\n            var1 = arg0 * 0x0a ** (arg1 - arg2) * 0x0de0b6b3a7640000;\n            var2 = arg3;\n            goto label_1F3F;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1F5B(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 > 0x204fce5e3e25026110000000) { revert(memory[0x00:0x00]); }\n    \n        if (arg3 > 0xd3c21bcecceda1000000) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 < arg1) {\n            if (arg1 - arg2 > 0x12) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0a ** (arg1 - arg2) * 0x0de0b6b3a7640000;\n            var var2 = arg0 * arg3;\n        \n            if (!var1) { assert(); }\n        \n            var0 = var2 / var1;\n        \n        label_1FEC:\n            return var0;\n        } else if (arg2 - arg1 <= 0x12) {\n            var0 = (0x0a ** (arg2 - arg1) * arg3 * arg0) / 0x0de0b6b3a7640000;\n            goto label_1FEC;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1FF4(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_0CD2:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x0cd2;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_202A(var1, var2);\n            goto label_0CD2;\n        }\n    }\n    \n    function func_2018() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_202A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x0655;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_2044(arg1, var0); }\n    \n    label_2039:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_2039; }\n    \n        arg0 = func_2044(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2044(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0165:\n            var temp0 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp1 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = msg.value;\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + (temp2 + 0x40) - temp3], [0x2d0c0a8842b9944ece1495eb61121621b5e36bd6af3bba0318c695f525aef79f]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x99d386) {\n                // Dispatch table entry for enableTrade()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x01cc;\n                var1 = enableTrade();\n            \n            label_01CC:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var1;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x01a12fd3) {\n                // Dispatch table entry for removeAlerter(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeAlerter(var2);\n                stop();\n            } else if (var0 == 0x1bc7bfec) {\n                // Dispatch table entry for setTokenWallet(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp6 & msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & temp6;\n                setTokenWallet(var2, var3);\n                stop();\n            } else if (var0 == 0x26782247) {\n                // Dispatch table entry for pendingAdmin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = pendingAdmin();\n            \n            label_0239:\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp8 = memory[0x40:0x60];\n                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n            } else if (var0 == 0x27a099d8) {\n                // Dispatch table entry for getOperators()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0268;\n                var1 = getOperators();\n            \n            label_0268:\n                var temp9 = memory[0x40:0x60];\n                var2 = temp9;\n                memory[var2:var2 + 0x20] = 0x20;\n                var3 = var2;\n                var temp10 = var3 + 0x20;\n                var temp11 = var1;\n                memory[temp10:temp10 + 0x20] = memory[temp11:temp11 + 0x20];\n                var var4 = temp10 + 0x20;\n                var var5 = temp11 + 0x20;\n                var var6 = memory[temp11:temp11 + 0x20] * 0x20;\n                var var7 = var6;\n                var var8 = var4;\n                var var9 = var5;\n                var var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_02A7:\n                    var temp12 = memory[0x40:0x60];\n                    return memory[temp12:temp12 + (var6 + var4) - temp12];\n                } else {\n                label_0298:\n                    var temp13 = var10;\n                    memory[temp13 + var8:temp13 + var8 + 0x20] = memory[var9 + temp13:var9 + temp13 + 0x20];\n                    var10 = temp13 + 0x20;\n                \n                    if (var10 >= var7) { goto label_02A7; }\n                    else { goto label_0298; }\n                }\n            } else if (var0 == 0x3ccdbb28) {\n                // Dispatch table entry for withdrawToken(address,uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp14 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp14;\n                withdrawToken(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x408ee7fe) {\n                // Dispatch table entry for addAlerter(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addAlerter(var2);\n                stop();\n            } else if (var0 == 0x47e6924f) {\n                // Dispatch table entry for sanityRatesContract()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = sanityRatesContract();\n                goto label_0239;\n            } else if (var0 == 0x546dc71c) {\n                // Dispatch table entry for approveWithdrawAddress(address,address,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var temp15 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp15 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp15;\n                var4 = !!msg.data[0x44:0x64];\n                approveWithdrawAddress(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x69328dec) {\n                // Dispatch table entry for withdraw(address,uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cc;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp16 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp16;\n                var1 = withdraw(var2, var3, var4);\n                goto label_01CC;\n            } else if (var0 == 0x6940030f) {\n                // Dispatch table entry for disableTrade()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cc;\n                var1 = disableTrade();\n                goto label_01CC;\n            } else if (var0 == 0x6cf69811) {\n                // Dispatch table entry for trade(address,uint256,address,address,uint256,bool)\n                var1 = 0x01cc;\n                var temp17 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp17 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = temp17 & msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84] & temp17;\n                var6 = msg.data[0x84:0xa4];\n                var7 = !!msg.data[0xa4:0xc4];\n                var1 = trade(var2, var3, var4, var5, var6, var7);\n                goto label_01CC;\n            } else if (var0 == 0x75829def) {\n                // Dispatch table entry for transferAdmin(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferAdmin(var2);\n                stop();\n            } else if (var0 == 0x77f50f97) {\n                // Dispatch table entry for claimAdmin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                claimAdmin();\n                stop();\n            } else if (var0 == 0x7acc8678) {\n                // Dispatch table entry for transferAdminQuickly(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferAdminQuickly(var2);\n                stop();\n            } else if (var0 == 0x7c423f54) {\n                // Dispatch table entry for getAlerters()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0268;\n                var1 = getAlerters();\n                goto label_0268;\n            } else if (var0 == 0x7cd44272) {\n                // Dispatch table entry for getConversionRate(address,address,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0437;\n                var temp18 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp18 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp18;\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var1 = getConversionRate(var2, var3, var4, var5);\n            \n            label_0437:\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x9870d7fe) {\n                // Dispatch table entry for addOperator(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOperator(var2);\n                stop();\n            } else if (var0 == 0xa7fca953) {\n                // Dispatch table entry for getSrcQty(address,address,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0437;\n                var temp21 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp21 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp21;\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var1 = getSrcQty(var2, var3, var4, var5);\n                goto label_0437;\n            } else if (var0 == 0xa80cbac6) {\n                // Dispatch table entry for tokenWallet(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = tokenWallet(var2);\n                goto label_0239;\n            } else if (var0 == 0xac8a584a) {\n                // Dispatch table entry for removeOperator(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOperator(var2);\n                stop();\n            } else if (var0 == 0xb3066d49) {\n                // Dispatch table entry for setContracts(address,address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var temp22 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp22 & msg.data[0x04:0x24];\n                var3 = temp22 & msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp22;\n                setContracts(var2, var3, var4);\n                stop();\n            } else if (var0 == 0xb78b842d) {\n                // Dispatch table entry for kyberNetwork()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = kyberNetwork();\n                goto label_0239;\n            } else if (var0 == 0xce56c454) {\n                // Dispatch table entry for withdrawEther(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                withdrawEther(var2, var3);\n                stop();\n            } else if (var0 == 0xd5847d33) {\n                // Dispatch table entry for conversionRatesContract()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = conversionRatesContract();\n                goto label_0239;\n            } else if (var0 == 0xd621e813) {\n                // Dispatch table entry for tradeEnabled()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cc;\n                var2 = tradeEnabled();\n                goto label_01CC;\n            } else if (var0 == 0xd7b7024d) {\n                // Dispatch table entry for approvedWithdrawAddresses(bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cc;\n                var2 = msg.data[0x04:0x24];\n                var2 = approvedWithdrawAddresses(var2);\n                goto label_01CC;\n            } else if (var0 == 0xf851a440) {\n                // Dispatch table entry for admin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = admin();\n                goto label_0239;\n            } else if (var0 == 0xf8b2cb4f) {\n                // Dispatch table entry for getBalance(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0437;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = getBalance(var2);\n                goto label_0437;\n            } else if (var0 == 0xfa64dffa) {\n                // Dispatch table entry for getDestQty(address,address,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0437;\n                var temp23 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp23 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp23;\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var1 = getDestQty(var2, var3, var4, var5);\n                goto label_0437;\n            } else { goto label_0165; }\n        }\n    }\n    \n    function enableTrade() returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = (storage[0x07] & ~0xff0000000000000000000000000000000000000000) | 0x010000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = !!0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e735]);\n        return 0x01;\n    }\n    \n    function removeAlerter(var arg0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[var0:var0 + 0x40]);\n        storage[temp1] = storage[temp1] & ~0xff;\n    \n        if (var0 >= storage[0x05]) {\n        label_07C4:\n            return;\n        } else {\n        label_06C8:\n            var var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var2 = 0x05;\n            var var3 = var0;\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var3] & 0x02 ** 0xa0 - 0x01 != var1) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x05]) { goto label_07C4; }\n                else { goto label_06C8; }\n            } else {\n                var1 = 0x05;\n                var temp2 = storage[var1];\n                var2 = temp2 + ~0x00;\n            \n                if (var2 >= temp2) { assert(); }\n            \n                memory[0x00:0x20] = var1;\n                var temp3 = storage[keccak256(memory[0x00:0x20]) + var2];\n                var2 = 0x05;\n                var1 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var3 = var0;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var temp4 = keccak256(memory[0x00:0x20]) + var3;\n                storage[temp4] = (var1 & 0x02 ** 0xa0 - 0x01) | (storage[temp4] & ~(0x02 ** 0xa0 - 0x01));\n                var1 = storage[0x05];\n                var3 = 0x05;\n                var2 = 0x076f;\n                var var4 = var1 + ~0x00;\n                func_1FF4(var3, var4);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = !!0x00;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x40) - temp6], [0x5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762]);\n                goto label_07C4;\n            }\n        }\n    }\n    \n    function setTokenWallet(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp1 & temp2;\n        memory[0x20:0x40] = 0x0b;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg1;\n        storage[temp3] = (temp4 & temp1) | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n        var temp5 = memory[0x40:0x60];\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        memory[temp5:temp5 + 0x20] = temp6 & temp2;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp6 & temp4;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp5 + 0x40) - temp7], [0x81995c7b922889ac0a81e41866106d4046268ea3a9abaae9f9e080a6ce36ee7d]);\n    }\n    \n    function pendingAdmin() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function getOperators() returns (var r0) {\n        var var0 = 0x088b;\n        var0 = func_2018();\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x04;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_08E1:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var4 = temp2 + var6 * 0x20;\n            memory[0x00:0x20] = var5;\n            var6 = temp2;\n            var5 = keccak256(memory[0x00:0x20]);\n        \n        label_08C3:\n            var temp3 = var5;\n            var temp4 = var6;\n            memory[temp4:temp4 + 0x20] = storage[temp3] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp3 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 > var6) { goto label_08C3; }\n            else { goto label_08E1; }\n        }\n    }\n    \n    function withdrawToken(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = arg1;\n        var var2 = temp1 + 0x44;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x40:0x60];\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[temp3:temp3 + 0x20] = temp4 & arg0;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = arg1;\n        memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = temp4 & arg2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp3 + 0x60) - temp5], [0x72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6]);\n    }\n    \n    function addAlerter(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] >= 0x32) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x01;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x40) - temp3], [0x5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762]);\n        memory[0x00:0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var var1 = storage[0x05];\n        var var0 = 0x05;\n        var var2 = var1 + 0x01;\n        var var3 = 0x0ab2;\n        var var4 = var0;\n        var var5 = var2;\n        func_1FF4(var4, var5);\n        memory[0x00:0x20] = var0;\n        var temp5 = keccak256(memory[0x00:0x20]) + var1;\n        storage[temp5] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[temp5] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function sanityRatesContract() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function approveWithdrawAddress(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg2;\n        var temp2 = arg0;\n        var temp3 = arg1;\n        var temp4 = memory[0x40:0x60];\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[temp4:temp4 + 0x20] = (temp5 & temp2) * 0x01000000000000000000000000;\n        memory[temp4 + 0x14:temp4 + 0x14 + 0x20] = (temp5 & temp3) * 0x01000000000000000000000000;\n        var temp6 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp6:temp6 + (temp4 + 0x28) - temp6]);\n        memory[0x20:0x40] = 0x0a;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        storage[temp7] = !!temp1 | (storage[temp7] & ~0xff);\n        var temp8 = memory[0x40:0x60];\n        var temp9 = 0x02 ** 0xa0 - 0x01;\n        memory[temp8:temp8 + 0x20] = temp9 & temp2;\n        memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp9 & temp3;\n        memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = !!temp1;\n        var temp10 = memory[0x40:0x60];\n        log(memory[temp10:temp10 + (temp8 + 0x60) - temp10], [0xd5fd5351efae1f4bb760079da9f0ff9589e2c3e216337ca9d39cdff573b245c4]);\n        var var0 = 0x0bc7;\n        var var1 = temp2;\n        func_19E4(var1);\n        var temp11 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp11 & arg0;\n        memory[0x20:0x40] = 0x0b;\n        var0 = !(storage[keccak256(memory[0x00:0x40])] & temp11);\n    \n        if (var0) {\n            var temp18 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp19 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp18;\n        \n            if (temp19 == arg0 & 0x02 ** 0xa0 - 0x01) { goto label_0CD2; }\n            else { goto label_0C0C; }\n        } else if (!var0) {\n        label_0CD2:\n            return;\n        } else {\n        label_0C0C:\n            var temp12 = 0x02 ** 0xa0 - 0x01;\n            var temp13 = temp12 & arg0;\n            memory[0x00:0x20] = temp13;\n            memory[0x20:0x40] = 0x0b;\n            var temp14 = keccak256(memory[0x00:0x40]);\n            var temp15 = address(this);\n            storage[temp14] = (temp15 & temp12) | (storage[temp14] & ~(0x02 ** 0xa0 - 0x01));\n            var0 = temp13;\n            var1 = 0x095ea7b3;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = temp15 & 0x02 ** 0xa0 - 0x01;\n            memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x8000000000000000000000000000000000000000000000000000000000000000;\n            var var2 = temp16 + 0x44;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp17;\n            temp17, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (!temp17) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { goto label_0CD2; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function withdraw(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & arg0) * 0x01000000000000000000000000;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (temp1 & arg2) * 0x01000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp2:temp2 + (temp0 + 0x28) - temp2]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x2049:0x2069];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n    \n        if (temp4 != arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp5 = 0x02 ** 0xa0 - 0x01;\n            var temp6 = arg0 & temp5;\n            memory[0x00:0x20] = temp6;\n            memory[0x20:0x40] = 0x0b;\n            var var1 = temp6;\n            var var2 = 0x23b872dd;\n            var temp7 = storage[keccak256(memory[0x00:0x40])] & temp5;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = temp9 & temp7;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = temp9 & arg2;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = arg1;\n            var var3 = temp8 + 0x64;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp10;\n            temp10, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n        \n            if (!temp10) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n        label_0E52:\n            var temp11 = memory[0x40:0x60];\n            var temp12 = 0x02 ** 0xa0 - 0x01;\n            memory[temp11:temp11 + 0x20] = temp12 & arg0;\n            memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = arg1;\n            memory[temp11 + 0x40:temp11 + 0x40 + 0x20] = temp12 & arg2;\n            var temp13 = memory[0x40:0x60];\n            log(memory[temp13:temp13 + (temp11 + 0x60) - temp13], [0xb67719fc33c1f17d31bf3a698690d62066b1e0bae28fcd3c56cf2c015c2863d6]);\n            return 0x01;\n        } else {\n            var temp14 = arg1;\n            var temp15 = memory[0x40:0x60];\n            var temp16;\n            temp16, memory[temp15:temp15 + 0x00] = address(arg2 & 0x02 ** 0xa0 - 0x01).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp15:temp15 + memory[0x40:0x60] - temp15]);\n        \n            if (temp16) { goto label_0E52; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function disableTrade() returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = storage[0x07] & ~0xff0000000000000000000000000000000000000000;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = !!0x00;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e735]);\n        return 0x01;\n    }\n    \n    function trade(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x07] / 0x010000000000000000000000000000000000000000 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0f86;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var var5 = arg3;\n        var var6 = arg4;\n        var var7 = arg5;\n        var1 = func_1AA1(var2, var3, var4, var5, var6, var7);\n    \n        if (var1) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferAdmin(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = storage[0x01] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40]);\n        storage[0x01] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function claimAdmin() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[temp2:temp2 + 0x20] = temp3 & temp1 & storage[0x01];\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp3 & storage[0x00] & temp1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp2 + 0x40) - temp4], [0x65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed]);\n        var temp5 = storage[0x01];\n        var temp6 = ~(0x02 ** 0xa0 - 0x01);\n        storage[0x00] = (temp5 & 0x02 ** 0xa0 - 0x01) | (temp6 & storage[0x00]);\n        storage[0x01] = temp6 & temp5;\n    }\n    \n    function transferAdminQuickly(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40]);\n        var temp4 = memory[0x40:0x60];\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[temp4:temp4 + 0x20] = temp5 & temp1;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp5 & storage[0x00] & 0x02 ** 0xa0 - 0x01;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp4 + 0x40) - temp6], [0x65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed]);\n        storage[0x00] = (temp1 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function getAlerters() returns (var r0) {\n        var var0 = 0x11bd;\n        var0 = func_2018();\n        var temp0 = storage[0x05];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x05;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_08E1:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { return var1; }\n        \n        label_08C3:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_08C3; }\n            else { goto label_08E1; }\n        }\n    }\n    \n    function getConversionRate(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (storage[0x07] / 0x0100 ** 0x14 & 0xff) {\n            var temp0 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp1 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp0;\n        \n            if (arg0 & 0x02 ** 0xa0 - 0x01 != temp1) {\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2049:0x2069];\n                var temp3 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp2;\n            \n                if (arg1 & 0x02 ** 0xa0 - 0x01 != temp3) {\n                    var0 = 0x00;\n                \n                label_13F9:\n                    return var0;\n                } else {\n                    var2 = 0x00;\n                    var1 = arg0;\n                \n                label_12A2:\n                    var var6 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                    var var7 = 0xb8e9c22e;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = (var7 & 0xffffffff) * 0x02 ** 0xe0;\n                    memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = arg3;\n                    memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = !!var2;\n                    memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = arg2;\n                    var var8 = temp4 + 0x84;\n                    var var9 = 0x20;\n                    var var10 = memory[0x40:0x60];\n                    var var11 = var8 - var10;\n                    var var12 = var10;\n                    var var13 = 0x00;\n                    var var14 = var6;\n                \n                    if (!address(var14).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp5;\n                    temp5, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas - 0x02c6).value(var13)(memory[var12:var12 + var11]);\n                \n                    if (!temp5) { revert(memory[0x00:0x00]); }\n                \n                    var3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                    var6 = 0x133b;\n                    var7 = arg0;\n                    var8 = arg1;\n                    var9 = arg2;\n                    var10 = var3;\n                    var6 = getDestQty(var7, var8, var9, var10);\n                    var4 = var6;\n                    var6 = var4;\n                    var7 = 0x1347;\n                    var8 = arg1;\n                    var7 = getBalance(var8);\n                \n                    if (var7 < var6) {\n                        var0 = 0x00;\n                        goto label_13F9;\n                    } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n                    label_13F5:\n                        var0 = var3;\n                        goto label_13F9;\n                    } else {\n                        var6 = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                        var7 = 0xa58092b7;\n                        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = (var7 & 0xffffffff) * 0x02 ** 0xe0;\n                        var temp7 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = temp7 & arg0;\n                        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = temp7 & arg1;\n                        var8 = temp6 + 0x44;\n                        var9 = 0x20;\n                        var10 = memory[0x40:0x60];\n                        var11 = var8 - var10;\n                        var12 = var10;\n                        var13 = 0x00;\n                        var14 = var6;\n                    \n                        if (!address(var14).code.length) { revert(memory[0x00:0x00]); }\n                    \n                        var temp8;\n                        temp8, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas - 0x02c6).value(var13)(memory[var12:var12 + var11]);\n                    \n                        if (!temp8) { revert(memory[0x00:0x00]); }\n                    \n                        var5 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                    \n                        if (var3 <= var5) { goto label_13F5; }\n                    \n                        var0 = 0x00;\n                        goto label_13F9;\n                    }\n                }\n            } else {\n                var2 = 0x01;\n                var1 = arg1;\n                goto label_12A2;\n            }\n        } else {\n            var0 = 0x00;\n            goto label_13F9;\n        }\n    }\n    \n    function addOperator(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x04] >= 0x32) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x01;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x40) - temp3], [0x091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b]);\n        memory[0x00:0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var var1 = storage[0x04];\n        var var0 = 0x04;\n        var var2 = var1 + 0x01;\n        var var3 = 0x0ab2;\n        var var4 = var0;\n        var var5 = var2;\n        func_1FF4(var4, var5);\n        memory[0x00:0x20] = var0;\n        var temp5 = keccak256(memory[0x00:0x20]) + var1;\n        storage[temp5] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[temp5] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function getSrcQty(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x14e4;\n        var var4 = arg1;\n        var3 = func_1DF6(var4);\n        var1 = var3;\n        var3 = 0x14ef;\n        var4 = arg0;\n        var3 = func_1DF6(var4);\n        var temp0 = var3;\n        var2 = temp0;\n        var3 = 0x14fd;\n        var4 = arg2;\n        var var5 = var2;\n        var var6 = var1;\n        var var7 = arg3;\n        return func_1EB4(var4, var5, var6, var7);\n    }\n    \n    function tokenWallet(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeOperator(var arg0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[var0:var0 + 0x40]);\n        storage[temp1] = storage[temp1] & ~0xff;\n    \n        if (var0 >= storage[0x04]) {\n        label_07C4:\n            return;\n        } else {\n        label_1593:\n            var var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var2 = 0x04;\n            var var3 = var0;\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var3] & 0x02 ** 0xa0 - 0x01 != var1) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x04]) { goto label_07C4; }\n                else { goto label_1593; }\n            } else {\n                var1 = 0x04;\n                var temp2 = storage[var1];\n                var2 = temp2 + ~0x00;\n            \n                if (var2 >= temp2) { assert(); }\n            \n                memory[0x00:0x20] = var1;\n                var temp3 = storage[keccak256(memory[0x00:0x20]) + var2];\n                var2 = 0x04;\n                var1 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var3 = var0;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var temp4 = keccak256(memory[0x00:0x20]) + var3;\n                storage[temp4] = (var1 & 0x02 ** 0xa0 - 0x01) | (storage[temp4] & ~(0x02 ** 0xa0 - 0x01));\n                var1 = storage[0x04] + ~0x00;\n                var2 = 0x163a;\n                var3 = 0x04;\n                var var4 = var1;\n                func_1FF4(var3, var4);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = !!0x00;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x40) - temp6], [0x091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b]);\n                goto label_07C4;\n            }\n        }\n    }\n    \n    function setContracts(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = ~(0x02 ** 0xa0 - 0x01);\n        var temp3 = (temp2 & storage[0x07]) | (arg0 & temp1);\n        storage[0x07] = temp3;\n        var temp4 = (temp2 & storage[0x08]) | (temp1 & arg1);\n        storage[0x08] = temp4;\n        var temp5 = (temp2 & storage[0x09]) | (temp1 & arg2);\n        storage[0x09] = temp5;\n        var temp6 = memory[0x40:0x60];\n        var temp7 = 0x02 ** 0xa0 - 0x01;\n        memory[temp6:temp6 + 0x20] = temp7 & temp1 & temp3;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp7 & temp1 & temp4;\n        memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = temp7 & temp1 & temp5;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp6 + 0x60) - temp8], [0x7a85322644a4462d8ff5482d2a841a4d231f8cfb3c9f4a50f66f8b2bd568c31c]);\n    }\n    \n    function kyberNetwork() returns (var r0) { return storage[0x07] & 0x02 ** 0xa0 - 0x01; }\n    \n    function withdrawEther(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(arg1 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de]);\n    }\n    \n    function conversionRatesContract() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function tradeEnabled() returns (var r0) { return storage[0x07] / 0x010000000000000000000000000000000000000000 & 0xff; }\n    \n    function approvedWithdrawAddresses(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function admin() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function getBalance(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x2049:0x2069];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n    \n        if (temp1 != arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            var temp3 = arg0 & temp2;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x0b;\n            var temp4 = temp2 & storage[keccak256(memory[0x00:0x40])];\n            var1 = temp4;\n            var var4 = temp3;\n            var var5 = 0x70a08231;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            var var6 = temp5 + 0x24;\n            var var7 = 0x20;\n            var var8 = memory[0x40:0x60];\n            var var9 = var6 - var8;\n            var var10 = var8;\n            var var11 = 0x00;\n            var var12 = var4;\n        \n            if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp6;\n            temp6, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n        \n            if (!temp6) { revert(memory[0x00:0x00]); }\n        \n            var2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            var4 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var5 = 0xdd62ed3e;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = temp8 & var1;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = temp8 & address(this);\n            var6 = temp7 + 0x44;\n            var7 = 0x20;\n            var8 = memory[0x40:0x60];\n            var9 = var6 - var8;\n            var10 = var8;\n            var11 = 0x00;\n            var12 = var4;\n        \n            if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp9;\n            temp9, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n        \n            if (!temp9) { revert(memory[0x00:0x00]); }\n        \n            var3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        \n            if (var2 < var3) {\n                var0 = var2;\n            \n            label_19B5:\n                return var0;\n            } else {\n                var4 = var3;\n                var0 = var4;\n                goto label_19B5;\n            }\n        } else {\n            var0 = address(this).balance;\n            goto label_19B5;\n        }\n    }\n    \n    function getDestQty(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x19cb;\n        var var4 = arg1;\n        var3 = func_1DF6(var4);\n        var1 = var3;\n        var3 = 0x19d6;\n        var4 = arg0;\n        var3 = func_1DF6(var4);\n        var temp0 = var3;\n        var2 = temp0;\n        var3 = 0x14fd;\n        var4 = arg2;\n        var var5 = var2;\n        var var6 = var1;\n        var var7 = arg3;\n        return func_1F5B(var4, var5, var6, var7);\n    }\n    \n    function func_19E4(var arg0) {\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x2049:0x2069];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n    \n        if (temp1 != arg0 & 0x02 ** 0xa0 - 0x01) {\n            var var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var1 = 0x313ce567;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n            var var2 = temp2 + 0x04;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp3;\n            temp3, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (!temp3) { revert(memory[0x00:0x00]); }\n        \n            var temp4 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            return;\n        } else {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            storage[keccak256(memory[0x00:0x40])] = 0x12;\n            return;\n        }\n    }\n    \n    function func_1AA1(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (!arg5) {\n        label_1AF5:\n            var var4 = 0x1b01;\n            var var5 = arg0;\n            var var6 = arg2;\n            var var7 = arg1;\n            var var8 = arg4;\n            var4 = getDestQty(var5, var6, var7, var8);\n            var1 = var4;\n        \n            if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp1 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp0;\n        \n            if (temp1 != arg0 & 0x02 ** 0xa0 - 0x01) {\n                var2 = arg0;\n                var3 = arg1 * ~0x00;\n                var4 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                var5 = 0xc6fd2103;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = var3;\n                memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x00;\n                memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = block.number;\n                var6 = temp2 + 0x84;\n                var7 = 0x00;\n                var8 = memory[0x40:0x60];\n                var var9 = var6 - var8;\n                var var10 = var8;\n                var var11 = 0x00;\n                var var12 = var4;\n            \n                if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n            \n            label_1BA9:\n                var temp3;\n                temp3, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n            \n                if (!temp3) { revert(memory[0x00:0x00]); }\n            \n                var temp4 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2049:0x2069];\n                var temp5 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp4;\n            \n                if (temp5 == arg0 & 0x02 ** 0xa0 - 0x01) {\n                label_1C80:\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x2049:0x2069];\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp6;\n                \n                    if (temp7 != arg2 & 0x02 ** 0xa0 - 0x01) {\n                        var temp8 = 0x02 ** 0xa0 - 0x01;\n                        var temp9 = arg2 & temp8;\n                        memory[0x00:0x20] = temp9;\n                        memory[0x20:0x40] = 0x0b;\n                        var4 = temp9;\n                        var5 = 0x23b872dd;\n                        var temp10 = storage[keccak256(memory[0x00:0x40])] & temp8;\n                        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                        var temp11 = memory[0x40:0x60];\n                        memory[temp11:temp11 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n                        var temp12 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = temp12 & temp10;\n                        memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = temp12 & arg3;\n                        memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = var1;\n                        var6 = temp11 + 0x64;\n                        var7 = 0x20;\n                        var8 = memory[0x40:0x60];\n                        var9 = var6 - var8;\n                        var10 = var8;\n                        var11 = 0x00;\n                        var12 = var4;\n                    \n                        if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n                    \n                        var temp13;\n                        temp13, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n                    \n                        if (!temp13) { revert(memory[0x00:0x00]); }\n                    \n                        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n                    \n                    label_1D79:\n                        var temp14 = memory[0x40:0x60];\n                        var temp15 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp14:temp14 + 0x20] = temp15 & arg0;\n                        memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = arg1;\n                        memory[temp14 + 0x40:temp14 + 0x40 + 0x20] = temp15 & arg2;\n                        memory[temp14 + 0x60:temp14 + 0x60 + 0x20] = var1;\n                        memory[temp14 + 0x80:temp14 + 0x80 + 0x20] = temp15 & arg3;\n                        var temp16 = memory[0x40:0x60];\n                        log(memory[temp16:temp16 + (temp14 + 0xa0) - temp16], [0xea9415385bae08fe9f6dc457b02577166790cde83bb18cc340aac6cb81b824de, msg.sender]);\n                        return 0x01;\n                    } else {\n                        var temp17 = var1;\n                        var temp18 = memory[0x40:0x60];\n                        var temp19;\n                        temp19, memory[temp18:temp18 + 0x00] = address(arg3 & 0x02 ** 0xa0 - 0x01).call.gas(!temp17 * 0x08fc).value(temp17)(memory[temp18:temp18 + memory[0x40:0x60] - temp18]);\n                    \n                        if (temp19) { goto label_1D79; }\n                        else { revert(memory[0x00:0x00]); }\n                    }\n                } else {\n                    var temp20 = 0x02 ** 0xa0 - 0x01;\n                    var temp21 = arg0 & temp20;\n                    memory[0x00:0x20] = temp21;\n                    memory[0x20:0x40] = 0x0b;\n                    var4 = temp21;\n                    var5 = 0x23b872dd;\n                    var temp22 = temp20 & storage[keccak256(memory[0x00:0x40])];\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp23 = memory[0x40:0x60];\n                    memory[temp23:temp23 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n                    var temp24 = 0x02 ** 0xa0 - 0x01;\n                    memory[temp23 + 0x04:temp23 + 0x04 + 0x20] = temp24 & msg.sender;\n                    memory[temp23 + 0x24:temp23 + 0x24 + 0x20] = temp24 & temp22;\n                    memory[temp23 + 0x44:temp23 + 0x44 + 0x20] = arg1;\n                    var6 = temp23 + 0x64;\n                    var7 = 0x20;\n                    var8 = memory[0x40:0x60];\n                    var9 = var6 - var8;\n                    var10 = var8;\n                    var11 = 0x00;\n                    var12 = var4;\n                \n                    if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp25;\n                    temp25, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n                \n                    if (!temp25) { revert(memory[0x00:0x00]); }\n                \n                    if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { goto label_1C80; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n                var2 = arg2;\n                var3 = var1;\n                var4 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                var5 = 0xc6fd2103;\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp26 + 0x04:temp26 + 0x04 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp26 + 0x24:temp26 + 0x24 + 0x20] = var3;\n                memory[temp26 + 0x44:temp26 + 0x44 + 0x20] = 0x00;\n                memory[temp26 + 0x64:temp26 + 0x64 + 0x20] = block.number;\n                var6 = temp26 + 0x84;\n                var7 = 0x00;\n                var8 = memory[0x40:0x60];\n                var9 = var6 - var8;\n                var10 = var8;\n                var11 = 0x00;\n                var12 = var4;\n            \n                if (address(var12).code.length) { goto label_1BA9; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else if (arg4 > 0x00) {\n            var temp27 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp28 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp27;\n        \n            if (temp28 != arg0 & 0x02 ** 0xa0 - 0x01) {\n                if (!msg.value) { goto label_1AF5; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (arg1 == msg.value) { goto label_1AF5; }\n            else { revert(memory[0x00:0x00]); }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1DF6(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x2049:0x2069];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n    \n        if (temp1 != arg0 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var1) {\n                var0 = var1;\n            \n            label_1EAE:\n                return var0;\n            } else {\n                var var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n                var var3 = 0x313ce567;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n                var var4 = temp2 + 0x04;\n                var var5 = 0x20;\n                var var6 = memory[0x40:0x60];\n                var var7 = var4 - var6;\n                var var8 = var6;\n                var var9 = 0x00;\n                var var10 = var2;\n            \n                if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp3;\n                temp3, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n            \n                if (!temp3) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                goto label_1EAE;\n            }\n        } else {\n            var0 = 0x12;\n            goto label_1EAE;\n        }\n    }\n    \n    function func_1EB4(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (arg0 > 0x204fce5e3e25026110000000) { revert(memory[0x00:0x00]); }\n    \n        if (arg3 > 0xd3c21bcecceda1000000) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 < arg2) {\n            if (arg2 - arg1 > 0x12) { revert(memory[0x00:0x00]); }\n        \n            var1 = arg0 * 0x0de0b6b3a7640000;\n            var2 = arg3 * 0x0a ** (arg2 - arg1);\n        \n        label_1F3F:\n            var temp0 = var2;\n            var var3 = temp0;\n            var var4 = (var1 + var3) - 0x01;\n        \n            if (var3) { return var4 / var3; }\n            else { assert(); }\n        } else if (arg1 - arg2 <= 0x12) {\n            var1 = arg0 * 0x0a ** (arg1 - arg2) * 0x0de0b6b3a7640000;\n            var2 = arg3;\n            goto label_1F3F;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1F5B(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 > 0x204fce5e3e25026110000000) { revert(memory[0x00:0x00]); }\n    \n        if (arg3 > 0xd3c21bcecceda1000000) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 < arg1) {\n            if (arg1 - arg2 > 0x12) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0a ** (arg1 - arg2) * 0x0de0b6b3a7640000;\n            var var2 = arg0 * arg3;\n        \n            if (!var1) { assert(); }\n        \n            var0 = var2 / var1;\n        \n        label_1FEC:\n            return var0;\n        } else if (arg2 - arg1 <= 0x12) {\n            var0 = (0x0a ** (arg2 - arg1) * arg3 * arg0) / 0x0de0b6b3a7640000;\n            goto label_1FEC;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1FF4(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_0CD2:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x0cd2;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_202A(var1, var2);\n            goto label_0CD2;\n        }\n    }\n    \n    function func_2018() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_202A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x0655;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_2044(arg1, var0); }\n    \n    label_2039:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_2039; }\n    \n        arg0 = func_2044(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2044(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0165:\n            var temp0 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp1 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = msg.value;\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + (temp2 + 0x40) - temp3], [0x2d0c0a8842b9944ece1495eb61121621b5e36bd6af3bba0318c695f525aef79f]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x99d386) {\n                // Dispatch table entry for enableTrade()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x01cc;\n                var1 = enableTrade();\n            \n            label_01CC:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var1;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x01a12fd3) {\n                // Dispatch table entry for removeAlerter(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeAlerter(var2);\n                stop();\n            } else if (var0 == 0x1bc7bfec) {\n                // Dispatch table entry for setTokenWallet(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp6 & msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & temp6;\n                setTokenWallet(var2, var3);\n                stop();\n            } else if (var0 == 0x26782247) {\n                // Dispatch table entry for pendingAdmin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = pendingAdmin();\n            \n            label_0239:\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp8 = memory[0x40:0x60];\n                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n            } else if (var0 == 0x27a099d8) {\n                // Dispatch table entry for getOperators()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0268;\n                var1 = getOperators();\n            \n            label_0268:\n                var temp9 = memory[0x40:0x60];\n                var2 = temp9;\n                memory[var2:var2 + 0x20] = 0x20;\n                var3 = var2;\n                var temp10 = var3 + 0x20;\n                var temp11 = var1;\n                memory[temp10:temp10 + 0x20] = memory[temp11:temp11 + 0x20];\n                var var4 = temp10 + 0x20;\n                var var5 = temp11 + 0x20;\n                var var6 = memory[temp11:temp11 + 0x20] * 0x20;\n                var var7 = var6;\n                var var8 = var4;\n                var var9 = var5;\n                var var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_02A7:\n                    var temp12 = memory[0x40:0x60];\n                    return memory[temp12:temp12 + (var6 + var4) - temp12];\n                } else {\n                label_0298:\n                    var temp13 = var10;\n                    memory[temp13 + var8:temp13 + var8 + 0x20] = memory[var9 + temp13:var9 + temp13 + 0x20];\n                    var10 = temp13 + 0x20;\n                \n                    if (var10 >= var7) { goto label_02A7; }\n                    else { goto label_0298; }\n                }\n            } else if (var0 == 0x3ccdbb28) {\n                // Dispatch table entry for withdrawToken(address,uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp14 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp14;\n                withdrawToken(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x408ee7fe) {\n                // Dispatch table entry for addAlerter(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addAlerter(var2);\n                stop();\n            } else if (var0 == 0x47e6924f) {\n                // Dispatch table entry for sanityRatesContract()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = sanityRatesContract();\n                goto label_0239;\n            } else if (var0 == 0x546dc71c) {\n                // Dispatch table entry for approveWithdrawAddress(address,address,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var temp15 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp15 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp15;\n                var4 = !!msg.data[0x44:0x64];\n                approveWithdrawAddress(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x69328dec) {\n                // Dispatch table entry for withdraw(address,uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cc;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp16 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp16;\n                var1 = withdraw(var2, var3, var4);\n                goto label_01CC;\n            } else if (var0 == 0x6940030f) {\n                // Dispatch table entry for disableTrade()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cc;\n                var1 = disableTrade();\n                goto label_01CC;\n            } else if (var0 == 0x6cf69811) {\n                // Dispatch table entry for trade(address,uint256,address,address,uint256,bool)\n                var1 = 0x01cc;\n                var temp17 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp17 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = temp17 & msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84] & temp17;\n                var6 = msg.data[0x84:0xa4];\n                var7 = !!msg.data[0xa4:0xc4];\n                var1 = trade(var2, var3, var4, var5, var6, var7);\n                goto label_01CC;\n            } else if (var0 == 0x75829def) {\n                // Dispatch table entry for transferAdmin(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferAdmin(var2);\n                stop();\n            } else if (var0 == 0x77f50f97) {\n                // Dispatch table entry for claimAdmin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                claimAdmin();\n                stop();\n            } else if (var0 == 0x7acc8678) {\n                // Dispatch table entry for transferAdminQuickly(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferAdminQuickly(var2);\n                stop();\n            } else if (var0 == 0x7c423f54) {\n                // Dispatch table entry for getAlerters()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0268;\n                var1 = getAlerters();\n                goto label_0268;\n            } else if (var0 == 0x7cd44272) {\n                // Dispatch table entry for getConversionRate(address,address,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0437;\n                var temp18 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp18 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp18;\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var1 = getConversionRate(var2, var3, var4, var5);\n            \n            label_0437:\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x9870d7fe) {\n                // Dispatch table entry for addOperator(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOperator(var2);\n                stop();\n            } else if (var0 == 0xa7fca953) {\n                // Dispatch table entry for getSrcQty(address,address,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0437;\n                var temp21 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp21 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp21;\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var1 = getSrcQty(var2, var3, var4, var5);\n                goto label_0437;\n            } else if (var0 == 0xa80cbac6) {\n                // Dispatch table entry for tokenWallet(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = tokenWallet(var2);\n                goto label_0239;\n            } else if (var0 == 0xac8a584a) {\n                // Dispatch table entry for removeOperator(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOperator(var2);\n                stop();\n            } else if (var0 == 0xb3066d49) {\n                // Dispatch table entry for setContracts(address,address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var temp22 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp22 & msg.data[0x04:0x24];\n                var3 = temp22 & msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp22;\n                setContracts(var2, var3, var4);\n                stop();\n            } else if (var0 == 0xb78b842d) {\n                // Dispatch table entry for kyberNetwork()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = kyberNetwork();\n                goto label_0239;\n            } else if (var0 == 0xce56c454) {\n                // Dispatch table entry for withdrawEther(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01ff;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                withdrawEther(var2, var3);\n                stop();\n            } else if (var0 == 0xd5847d33) {\n                // Dispatch table entry for conversionRatesContract()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = conversionRatesContract();\n                goto label_0239;\n            } else if (var0 == 0xd621e813) {\n                // Dispatch table entry for tradeEnabled()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cc;\n                var2 = tradeEnabled();\n                goto label_01CC;\n            } else if (var0 == 0xd7b7024d) {\n                // Dispatch table entry for approvedWithdrawAddresses(bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cc;\n                var2 = msg.data[0x04:0x24];\n                var2 = approvedWithdrawAddresses(var2);\n                goto label_01CC;\n            } else if (var0 == 0xf851a440) {\n                // Dispatch table entry for admin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0239;\n                var2 = admin();\n                goto label_0239;\n            } else if (var0 == 0xf8b2cb4f) {\n                // Dispatch table entry for getBalance(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0437;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = getBalance(var2);\n                goto label_0437;\n            } else if (var0 == 0xfa64dffa) {\n                // Dispatch table entry for getDestQty(address,address,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0437;\n                var temp23 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp23 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp23;\n                var4 = msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var1 = getDestQty(var2, var3, var4, var5);\n                goto label_0437;\n            } else { goto label_0165; }\n        }\n    }\n    \n    function enableTrade() returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = (storage[0x07] & ~0xff0000000000000000000000000000000000000000) | 0x010000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = !!0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e735]);\n        return 0x01;\n    }\n    \n    function removeAlerter(var arg0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[var0:var0 + 0x40]);\n        storage[temp1] = storage[temp1] & ~0xff;\n    \n        if (var0 >= storage[0x05]) {\n        label_07C4:\n            return;\n        } else {\n        label_06C8:\n            var var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var2 = 0x05;\n            var var3 = var0;\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var3] & 0x02 ** 0xa0 - 0x01 != var1) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x05]) { goto label_07C4; }\n                else { goto label_06C8; }\n            } else {\n                var1 = 0x05;\n                var temp2 = storage[var1];\n                var2 = temp2 + ~0x00;\n            \n                if (var2 >= temp2) { assert(); }\n            \n                memory[0x00:0x20] = var1;\n                var temp3 = storage[keccak256(memory[0x00:0x20]) + var2];\n                var2 = 0x05;\n                var1 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var3 = var0;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var temp4 = keccak256(memory[0x00:0x20]) + var3;\n                storage[temp4] = (var1 & 0x02 ** 0xa0 - 0x01) | (storage[temp4] & ~(0x02 ** 0xa0 - 0x01));\n                var1 = storage[0x05];\n                var3 = 0x05;\n                var2 = 0x076f;\n                var var4 = var1 + ~0x00;\n                func_1FF4(var3, var4);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = !!0x00;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x40) - temp6], [0x5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762]);\n                goto label_07C4;\n            }\n        }\n    }\n    \n    function setTokenWallet(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp1 & temp2;\n        memory[0x20:0x40] = 0x0b;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg1;\n        storage[temp3] = (temp4 & temp1) | (storage[temp3] & ~(0x02 ** 0xa0 - 0x01));\n        var temp5 = memory[0x40:0x60];\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        memory[temp5:temp5 + 0x20] = temp6 & temp2;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp6 & temp4;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp5 + 0x40) - temp7], [0x81995c7b922889ac0a81e41866106d4046268ea3a9abaae9f9e080a6ce36ee7d]);\n    }\n    \n    function pendingAdmin() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function getOperators() returns (var r0) {\n        var var0 = 0x088b;\n        var0 = func_2018();\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x04;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_08E1:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var4 = temp2 + var6 * 0x20;\n            memory[0x00:0x20] = var5;\n            var6 = temp2;\n            var5 = keccak256(memory[0x00:0x20]);\n        \n        label_08C3:\n            var temp3 = var5;\n            var temp4 = var6;\n            memory[temp4:temp4 + 0x20] = storage[temp3] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp3 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 > var6) { goto label_08C3; }\n            else { goto label_08E1; }\n        }\n    }\n    \n    function withdrawToken(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = arg1;\n        var var2 = temp1 + 0x44;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x40:0x60];\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[temp3:temp3 + 0x20] = temp4 & arg0;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = arg1;\n        memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = temp4 & arg2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp3 + 0x60) - temp5], [0x72cb8a894ddb372ceec3d2a7648d86f17d5a15caae0e986c53109b8a9a9385e6]);\n    }\n    \n    function addAlerter(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] >= 0x32) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x01;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x40) - temp3], [0x5611bf3e417d124f97bf2c788843ea8bb502b66079fbee02158ef30b172cb762]);\n        memory[0x00:0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var var1 = storage[0x05];\n        var var0 = 0x05;\n        var var2 = var1 + 0x01;\n        var var3 = 0x0ab2;\n        var var4 = var0;\n        var var5 = var2;\n        func_1FF4(var4, var5);\n        memory[0x00:0x20] = var0;\n        var temp5 = keccak256(memory[0x00:0x20]) + var1;\n        storage[temp5] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[temp5] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function sanityRatesContract() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function approveWithdrawAddress(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg2;\n        var temp2 = arg0;\n        var temp3 = arg1;\n        var temp4 = memory[0x40:0x60];\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[temp4:temp4 + 0x20] = (temp5 & temp2) * 0x01000000000000000000000000;\n        memory[temp4 + 0x14:temp4 + 0x14 + 0x20] = (temp5 & temp3) * 0x01000000000000000000000000;\n        var temp6 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp6:temp6 + (temp4 + 0x28) - temp6]);\n        memory[0x20:0x40] = 0x0a;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        storage[temp7] = !!temp1 | (storage[temp7] & ~0xff);\n        var temp8 = memory[0x40:0x60];\n        var temp9 = 0x02 ** 0xa0 - 0x01;\n        memory[temp8:temp8 + 0x20] = temp9 & temp2;\n        memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp9 & temp3;\n        memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = !!temp1;\n        var temp10 = memory[0x40:0x60];\n        log(memory[temp10:temp10 + (temp8 + 0x60) - temp10], [0xd5fd5351efae1f4bb760079da9f0ff9589e2c3e216337ca9d39cdff573b245c4]);\n        var var0 = 0x0bc7;\n        var var1 = temp2;\n        func_19E4(var1);\n        var temp11 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp11 & arg0;\n        memory[0x20:0x40] = 0x0b;\n        var0 = !(storage[keccak256(memory[0x00:0x40])] & temp11);\n    \n        if (var0) {\n            var temp18 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp19 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp18;\n        \n            if (temp19 == arg0 & 0x02 ** 0xa0 - 0x01) { goto label_0CD2; }\n            else { goto label_0C0C; }\n        } else if (!var0) {\n        label_0CD2:\n            return;\n        } else {\n        label_0C0C:\n            var temp12 = 0x02 ** 0xa0 - 0x01;\n            var temp13 = temp12 & arg0;\n            memory[0x00:0x20] = temp13;\n            memory[0x20:0x40] = 0x0b;\n            var temp14 = keccak256(memory[0x00:0x40]);\n            var temp15 = address(this);\n            storage[temp14] = (temp15 & temp12) | (storage[temp14] & ~(0x02 ** 0xa0 - 0x01));\n            var0 = temp13;\n            var1 = 0x095ea7b3;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp16 = memory[0x40:0x60];\n            memory[temp16:temp16 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp16 + 0x04:temp16 + 0x04 + 0x20] = temp15 & 0x02 ** 0xa0 - 0x01;\n            memory[temp16 + 0x24:temp16 + 0x24 + 0x20] = 0x8000000000000000000000000000000000000000000000000000000000000000;\n            var var2 = temp16 + 0x44;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp17;\n            temp17, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (!temp17) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { goto label_0CD2; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function withdraw(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & arg0) * 0x01000000000000000000000000;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (temp1 & arg2) * 0x01000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp2:temp2 + (temp0 + 0x28) - temp2]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x2049:0x2069];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n    \n        if (temp4 != arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp5 = 0x02 ** 0xa0 - 0x01;\n            var temp6 = arg0 & temp5;\n            memory[0x00:0x20] = temp6;\n            memory[0x20:0x40] = 0x0b;\n            var var1 = temp6;\n            var var2 = 0x23b872dd;\n            var temp7 = storage[keccak256(memory[0x00:0x40])] & temp5;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = temp9 & temp7;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = temp9 & arg2;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = arg1;\n            var var3 = temp8 + 0x64;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n        \n            if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp10;\n            temp10, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n        \n            if (!temp10) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n        label_0E52:\n            var temp11 = memory[0x40:0x60];\n            var temp12 = 0x02 ** 0xa0 - 0x01;\n            memory[temp11:temp11 + 0x20] = temp12 & arg0;\n            memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = arg1;\n            memory[temp11 + 0x40:temp11 + 0x40 + 0x20] = temp12 & arg2;\n            var temp13 = memory[0x40:0x60];\n            log(memory[temp13:temp13 + (temp11 + 0x60) - temp13], [0xb67719fc33c1f17d31bf3a698690d62066b1e0bae28fcd3c56cf2c015c2863d6]);\n            return 0x01;\n        } else {\n            var temp14 = arg1;\n            var temp15 = memory[0x40:0x60];\n            var temp16;\n            temp16, memory[temp15:temp15 + 0x00] = address(arg2 & 0x02 ** 0xa0 - 0x01).call.gas(!temp14 * 0x08fc).value(temp14)(memory[temp15:temp15 + memory[0x40:0x60] - temp15]);\n        \n            if (temp16) { goto label_0E52; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function disableTrade() returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (!(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = storage[0x07] & ~0xff0000000000000000000000000000000000000000;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = !!0x00;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x7d7f00509dd73ac4449f698ae75ccc797895eff5fa9d446d3df387598a26e735]);\n        return 0x01;\n    }\n    \n    function trade(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x07] / 0x010000000000000000000000000000000000000000 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0f86;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var var5 = arg3;\n        var var6 = arg4;\n        var var7 = arg5;\n        var1 = func_1AA1(var2, var3, var4, var5, var6, var7);\n    \n        if (var1) { return 0x01; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferAdmin(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = storage[0x01] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40]);\n        storage[0x01] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function claimAdmin() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[temp2:temp2 + 0x20] = temp3 & temp1 & storage[0x01];\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp3 & storage[0x00] & temp1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp2 + 0x40) - temp4], [0x65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed]);\n        var temp5 = storage[0x01];\n        var temp6 = ~(0x02 ** 0xa0 - 0x01);\n        storage[0x00] = (temp5 & 0x02 ** 0xa0 - 0x01) | (temp6 & storage[0x00]);\n        storage[0x01] = temp6 & temp5;\n    }\n    \n    function transferAdminQuickly(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x3b81caf78fa51ecbc8acb482fd7012a277b428d9b80f9d156e8a54107496cc40]);\n        var temp4 = memory[0x40:0x60];\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[temp4:temp4 + 0x20] = temp5 & temp1;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp5 & storage[0x00] & 0x02 ** 0xa0 - 0x01;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp4 + 0x40) - temp6], [0x65da1cfc2c2e81576ad96afb24a581f8e109b7a403b35cbd3243a1c99efdb9ed]);\n        storage[0x00] = (temp1 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function getAlerters() returns (var r0) {\n        var var0 = 0x11bd;\n        var0 = func_2018();\n        var temp0 = storage[0x05];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x05;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_08E1:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { return var1; }\n        \n        label_08C3:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_08C3; }\n            else { goto label_08E1; }\n        }\n    }\n    \n    function getConversionRate(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (storage[0x07] / 0x0100 ** 0x14 & 0xff) {\n            var temp0 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp1 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp0;\n        \n            if (arg0 & 0x02 ** 0xa0 - 0x01 != temp1) {\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2049:0x2069];\n                var temp3 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp2;\n            \n                if (arg1 & 0x02 ** 0xa0 - 0x01 != temp3) {\n                    var0 = 0x00;\n                \n                label_13F9:\n                    return var0;\n                } else {\n                    var2 = 0x00;\n                    var1 = arg0;\n                \n                label_12A2:\n                    var var6 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                    var var7 = 0xb8e9c22e;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = (var7 & 0xffffffff) * 0x02 ** 0xe0;\n                    memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = arg3;\n                    memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = !!var2;\n                    memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = arg2;\n                    var var8 = temp4 + 0x84;\n                    var var9 = 0x20;\n                    var var10 = memory[0x40:0x60];\n                    var var11 = var8 - var10;\n                    var var12 = var10;\n                    var var13 = 0x00;\n                    var var14 = var6;\n                \n                    if (!address(var14).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp5;\n                    temp5, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas - 0x02c6).value(var13)(memory[var12:var12 + var11]);\n                \n                    if (!temp5) { revert(memory[0x00:0x00]); }\n                \n                    var3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                    var6 = 0x133b;\n                    var7 = arg0;\n                    var8 = arg1;\n                    var9 = arg2;\n                    var10 = var3;\n                    var6 = getDestQty(var7, var8, var9, var10);\n                    var4 = var6;\n                    var6 = var4;\n                    var7 = 0x1347;\n                    var8 = arg1;\n                    var7 = getBalance(var8);\n                \n                    if (var7 < var6) {\n                        var0 = 0x00;\n                        goto label_13F9;\n                    } else if (!(storage[0x09] & 0x02 ** 0xa0 - 0x01)) {\n                    label_13F5:\n                        var0 = var3;\n                        goto label_13F9;\n                    } else {\n                        var6 = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                        var7 = 0xa58092b7;\n                        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = (var7 & 0xffffffff) * 0x02 ** 0xe0;\n                        var temp7 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = temp7 & arg0;\n                        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = temp7 & arg1;\n                        var8 = temp6 + 0x44;\n                        var9 = 0x20;\n                        var10 = memory[0x40:0x60];\n                        var11 = var8 - var10;\n                        var12 = var10;\n                        var13 = 0x00;\n                        var14 = var6;\n                    \n                        if (!address(var14).code.length) { revert(memory[0x00:0x00]); }\n                    \n                        var temp8;\n                        temp8, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas - 0x02c6).value(var13)(memory[var12:var12 + var11]);\n                    \n                        if (!temp8) { revert(memory[0x00:0x00]); }\n                    \n                        var5 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                    \n                        if (var3 <= var5) { goto label_13F5; }\n                    \n                        var0 = 0x00;\n                        goto label_13F9;\n                    }\n                }\n            } else {\n                var2 = 0x01;\n                var1 = arg1;\n                goto label_12A2;\n            }\n        } else {\n            var0 = 0x00;\n            goto label_13F9;\n        }\n    }\n    \n    function addOperator(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x04] >= 0x32) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x01;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x40) - temp3], [0x091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b]);\n        memory[0x00:0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var var1 = storage[0x04];\n        var var0 = 0x04;\n        var var2 = var1 + 0x01;\n        var var3 = 0x0ab2;\n        var var4 = var0;\n        var var5 = var2;\n        func_1FF4(var4, var5);\n        memory[0x00:0x20] = var0;\n        var temp5 = keccak256(memory[0x00:0x20]) + var1;\n        storage[temp5] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[temp5] & ~(0x02 ** 0xa0 - 0x01));\n    }\n    \n    function getSrcQty(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x14e4;\n        var var4 = arg1;\n        var3 = func_1DF6(var4);\n        var1 = var3;\n        var3 = 0x14ef;\n        var4 = arg0;\n        var3 = func_1DF6(var4);\n        var temp0 = var3;\n        var2 = temp0;\n        var3 = 0x14fd;\n        var4 = arg2;\n        var var5 = var2;\n        var var6 = var1;\n        var var7 = arg3;\n        return func_1EB4(var4, var5, var6, var7);\n    }\n    \n    function tokenWallet(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeOperator(var arg0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[var0:var0 + 0x40]);\n        storage[temp1] = storage[temp1] & ~0xff;\n    \n        if (var0 >= storage[0x04]) {\n        label_07C4:\n            return;\n        } else {\n        label_1593:\n            var var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var2 = 0x04;\n            var var3 = var0;\n        \n            if (var3 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var3] & 0x02 ** 0xa0 - 0x01 != var1) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x04]) { goto label_07C4; }\n                else { goto label_1593; }\n            } else {\n                var1 = 0x04;\n                var temp2 = storage[var1];\n                var2 = temp2 + ~0x00;\n            \n                if (var2 >= temp2) { assert(); }\n            \n                memory[0x00:0x20] = var1;\n                var temp3 = storage[keccak256(memory[0x00:0x20]) + var2];\n                var2 = 0x04;\n                var1 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var3 = var0;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var temp4 = keccak256(memory[0x00:0x20]) + var3;\n                storage[temp4] = (var1 & 0x02 ** 0xa0 - 0x01) | (storage[temp4] & ~(0x02 ** 0xa0 - 0x01));\n                var1 = storage[0x04] + ~0x00;\n                var2 = 0x163a;\n                var3 = 0x04;\n                var var4 = var1;\n                func_1FF4(var3, var4);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = !!0x00;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x40) - temp6], [0x091a7a4b85135fdd7e8dbc18b12fabe5cc191ea867aa3c2e1a24a102af61d58b]);\n                goto label_07C4;\n            }\n        }\n    }\n    \n    function setContracts(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = ~(0x02 ** 0xa0 - 0x01);\n        var temp3 = (temp2 & storage[0x07]) | (arg0 & temp1);\n        storage[0x07] = temp3;\n        var temp4 = (temp2 & storage[0x08]) | (temp1 & arg1);\n        storage[0x08] = temp4;\n        var temp5 = (temp2 & storage[0x09]) | (temp1 & arg2);\n        storage[0x09] = temp5;\n        var temp6 = memory[0x40:0x60];\n        var temp7 = 0x02 ** 0xa0 - 0x01;\n        memory[temp6:temp6 + 0x20] = temp7 & temp1 & temp3;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp7 & temp1 & temp4;\n        memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = temp7 & temp1 & temp5;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp6 + 0x60) - temp8], [0x7a85322644a4462d8ff5482d2a841a4d231f8cfb3c9f4a50f66f8b2bd568c31c]);\n    }\n    \n    function kyberNetwork() returns (var r0) { return storage[0x07] & 0x02 ** 0xa0 - 0x01; }\n    \n    function withdrawEther(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(arg1 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xec47e7ed86c86774d1a72c19f35c639911393fe7c1a34031fdbd260890da90de]);\n    }\n    \n    function conversionRatesContract() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function tradeEnabled() returns (var r0) { return storage[0x07] / 0x010000000000000000000000000000000000000000 & 0xff; }\n    \n    function approvedWithdrawAddresses(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function admin() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function getBalance(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x2049:0x2069];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n    \n        if (temp1 != arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            var temp3 = arg0 & temp2;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x0b;\n            var temp4 = temp2 & storage[keccak256(memory[0x00:0x40])];\n            var1 = temp4;\n            var var4 = temp3;\n            var var5 = 0x70a08231;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            var var6 = temp5 + 0x24;\n            var var7 = 0x20;\n            var var8 = memory[0x40:0x60];\n            var var9 = var6 - var8;\n            var var10 = var8;\n            var var11 = 0x00;\n            var var12 = var4;\n        \n            if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp6;\n            temp6, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n        \n            if (!temp6) { revert(memory[0x00:0x00]); }\n        \n            var2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            var4 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var5 = 0xdd62ed3e;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = temp8 & var1;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = temp8 & address(this);\n            var6 = temp7 + 0x44;\n            var7 = 0x20;\n            var8 = memory[0x40:0x60];\n            var9 = var6 - var8;\n            var10 = var8;\n            var11 = 0x00;\n            var12 = var4;\n        \n            if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp9;\n            temp9, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n        \n            if (!temp9) { revert(memory[0x00:0x00]); }\n        \n            var3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        \n            if (var2 < var3) {\n                var0 = var2;\n            \n            label_19B5:\n                return var0;\n            } else {\n                var4 = var3;\n                var0 = var4;\n                goto label_19B5;\n            }\n        } else {\n            var0 = address(this).balance;\n            goto label_19B5;\n        }\n    }\n    \n    function getDestQty(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x19cb;\n        var var4 = arg1;\n        var3 = func_1DF6(var4);\n        var1 = var3;\n        var3 = 0x19d6;\n        var4 = arg0;\n        var3 = func_1DF6(var4);\n        var temp0 = var3;\n        var2 = temp0;\n        var3 = 0x14fd;\n        var4 = arg2;\n        var var5 = var2;\n        var var6 = var1;\n        var var7 = arg3;\n        return func_1F5B(var4, var5, var6, var7);\n    }\n    \n    function func_19E4(var arg0) {\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x2049:0x2069];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n    \n        if (temp1 != arg0 & 0x02 ** 0xa0 - 0x01) {\n            var var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var1 = 0x313ce567;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n            var var2 = temp2 + 0x04;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n        \n            if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp3;\n            temp3, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n        \n            if (!temp3) { revert(memory[0x00:0x00]); }\n        \n            var temp4 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            return;\n        } else {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            storage[keccak256(memory[0x00:0x40])] = 0x12;\n            return;\n        }\n    }\n    \n    function func_1AA1(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (!arg5) {\n        label_1AF5:\n            var var4 = 0x1b01;\n            var var5 = arg0;\n            var var6 = arg2;\n            var var7 = arg1;\n            var var8 = arg4;\n            var4 = getDestQty(var5, var6, var7, var8);\n            var1 = var4;\n        \n            if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp1 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp0;\n        \n            if (temp1 != arg0 & 0x02 ** 0xa0 - 0x01) {\n                var2 = arg0;\n                var3 = arg1 * ~0x00;\n                var4 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                var5 = 0xc6fd2103;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = var3;\n                memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x00;\n                memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = block.number;\n                var6 = temp2 + 0x84;\n                var7 = 0x00;\n                var8 = memory[0x40:0x60];\n                var var9 = var6 - var8;\n                var var10 = var8;\n                var var11 = 0x00;\n                var var12 = var4;\n            \n                if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n            \n            label_1BA9:\n                var temp3;\n                temp3, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n            \n                if (!temp3) { revert(memory[0x00:0x00]); }\n            \n                var temp4 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2049:0x2069];\n                var temp5 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp4;\n            \n                if (temp5 == arg0 & 0x02 ** 0xa0 - 0x01) {\n                label_1C80:\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x2049:0x2069];\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp6;\n                \n                    if (temp7 != arg2 & 0x02 ** 0xa0 - 0x01) {\n                        var temp8 = 0x02 ** 0xa0 - 0x01;\n                        var temp9 = arg2 & temp8;\n                        memory[0x00:0x20] = temp9;\n                        memory[0x20:0x40] = 0x0b;\n                        var4 = temp9;\n                        var5 = 0x23b872dd;\n                        var temp10 = storage[keccak256(memory[0x00:0x40])] & temp8;\n                        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                        var temp11 = memory[0x40:0x60];\n                        memory[temp11:temp11 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n                        var temp12 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = temp12 & temp10;\n                        memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = temp12 & arg3;\n                        memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = var1;\n                        var6 = temp11 + 0x64;\n                        var7 = 0x20;\n                        var8 = memory[0x40:0x60];\n                        var9 = var6 - var8;\n                        var10 = var8;\n                        var11 = 0x00;\n                        var12 = var4;\n                    \n                        if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n                    \n                        var temp13;\n                        temp13, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n                    \n                        if (!temp13) { revert(memory[0x00:0x00]); }\n                    \n                        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n                    \n                    label_1D79:\n                        var temp14 = memory[0x40:0x60];\n                        var temp15 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp14:temp14 + 0x20] = temp15 & arg0;\n                        memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = arg1;\n                        memory[temp14 + 0x40:temp14 + 0x40 + 0x20] = temp15 & arg2;\n                        memory[temp14 + 0x60:temp14 + 0x60 + 0x20] = var1;\n                        memory[temp14 + 0x80:temp14 + 0x80 + 0x20] = temp15 & arg3;\n                        var temp16 = memory[0x40:0x60];\n                        log(memory[temp16:temp16 + (temp14 + 0xa0) - temp16], [0xea9415385bae08fe9f6dc457b02577166790cde83bb18cc340aac6cb81b824de, msg.sender]);\n                        return 0x01;\n                    } else {\n                        var temp17 = var1;\n                        var temp18 = memory[0x40:0x60];\n                        var temp19;\n                        temp19, memory[temp18:temp18 + 0x00] = address(arg3 & 0x02 ** 0xa0 - 0x01).call.gas(!temp17 * 0x08fc).value(temp17)(memory[temp18:temp18 + memory[0x40:0x60] - temp18]);\n                    \n                        if (temp19) { goto label_1D79; }\n                        else { revert(memory[0x00:0x00]); }\n                    }\n                } else {\n                    var temp20 = 0x02 ** 0xa0 - 0x01;\n                    var temp21 = arg0 & temp20;\n                    memory[0x00:0x20] = temp21;\n                    memory[0x20:0x40] = 0x0b;\n                    var4 = temp21;\n                    var5 = 0x23b872dd;\n                    var temp22 = temp20 & storage[keccak256(memory[0x00:0x40])];\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp23 = memory[0x40:0x60];\n                    memory[temp23:temp23 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n                    var temp24 = 0x02 ** 0xa0 - 0x01;\n                    memory[temp23 + 0x04:temp23 + 0x04 + 0x20] = temp24 & msg.sender;\n                    memory[temp23 + 0x24:temp23 + 0x24 + 0x20] = temp24 & temp22;\n                    memory[temp23 + 0x44:temp23 + 0x44 + 0x20] = arg1;\n                    var6 = temp23 + 0x64;\n                    var7 = 0x20;\n                    var8 = memory[0x40:0x60];\n                    var9 = var6 - var8;\n                    var10 = var8;\n                    var11 = 0x00;\n                    var12 = var4;\n                \n                    if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp25;\n                    temp25, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n                \n                    if (!temp25) { revert(memory[0x00:0x00]); }\n                \n                    if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { goto label_1C80; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n                var2 = arg2;\n                var3 = var1;\n                var4 = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                var5 = 0xc6fd2103;\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = (var5 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp26 + 0x04:temp26 + 0x04 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp26 + 0x24:temp26 + 0x24 + 0x20] = var3;\n                memory[temp26 + 0x44:temp26 + 0x44 + 0x20] = 0x00;\n                memory[temp26 + 0x64:temp26 + 0x64 + 0x20] = block.number;\n                var6 = temp26 + 0x84;\n                var7 = 0x00;\n                var8 = memory[0x40:0x60];\n                var9 = var6 - var8;\n                var10 = var8;\n                var11 = 0x00;\n                var12 = var4;\n            \n                if (address(var12).code.length) { goto label_1BA9; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else if (arg4 > 0x00) {\n            var temp27 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2049:0x2069];\n            var temp28 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp27;\n        \n            if (temp28 != arg0 & 0x02 ** 0xa0 - 0x01) {\n                if (!msg.value) { goto label_1AF5; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (arg1 == msg.value) { goto label_1AF5; }\n            else { revert(memory[0x00:0x00]); }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1DF6(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x2049:0x2069];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n    \n        if (temp1 != arg0 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var1) {\n                var0 = var1;\n            \n            label_1EAE:\n                return var0;\n            } else {\n                var var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n                var var3 = 0x313ce567;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n                var var4 = temp2 + 0x04;\n                var var5 = 0x20;\n                var var6 = memory[0x40:0x60];\n                var var7 = var4 - var6;\n                var var8 = var6;\n                var var9 = 0x00;\n                var var10 = var2;\n            \n                if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp3;\n                temp3, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n            \n                if (!temp3) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                goto label_1EAE;\n            }\n        } else {\n            var0 = 0x12;\n            goto label_1EAE;\n        }\n    }\n    \n    function func_1EB4(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (arg0 > 0x204fce5e3e25026110000000) { revert(memory[0x00:0x00]); }\n    \n        if (arg3 > 0xd3c21bcecceda1000000) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 < arg2) {\n            if (arg2 - arg1 > 0x12) { revert(memory[0x00:0x00]); }\n        \n            var1 = arg0 * 0x0de0b6b3a7640000;\n            var2 = arg3 * 0x0a ** (arg2 - arg1);\n        \n        label_1F3F:\n            var temp0 = var2;\n            var var3 = temp0;\n            var var4 = (var1 + var3) - 0x01;\n        \n            if (var3) { return var4 / var3; }\n            else { assert(); }\n        } else if (arg1 - arg2 <= 0x12) {\n            var1 = arg0 * 0x0a ** (arg1 - arg2) * 0x0de0b6b3a7640000;\n            var2 = arg3;\n            goto label_1F3F;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1F5B(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 > 0x204fce5e3e25026110000000) { revert(memory[0x00:0x00]); }\n    \n        if (arg3 > 0xd3c21bcecceda1000000) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 < arg1) {\n            if (arg1 - arg2 > 0x12) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0a ** (arg1 - arg2) * 0x0de0b6b3a7640000;\n            var var2 = arg0 * arg3;\n        \n            if (!var1) { assert(); }\n        \n            var0 = var2 / var1;\n        \n        label_1FEC:\n            return var0;\n        } else if (arg2 - arg1 <= 0x12) {\n            var0 = (0x0a ** (arg2 - arg1) * arg3 * arg0) / 0x0de0b6b3a7640000;\n            goto label_1FEC;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1FF4(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_0CD2:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x0cd2;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_202A(var1, var2);\n            goto label_0CD2;\n        }\n    }\n    \n    function func_2018() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_202A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x0655;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_2044(arg1, var0); }\n    \n    label_2039:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_2039; }\n    \n        arg0 = func_2044(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2044(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 42.5678436756134,
	"usage": {
		"completion_tokens": 417,
		"prompt_tokens": 22899,
		"total_tokens": 23316
	}
}