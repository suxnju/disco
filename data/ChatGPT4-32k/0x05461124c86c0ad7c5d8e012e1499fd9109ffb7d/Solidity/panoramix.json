{
	"address": "0x05461124c86c0ad7c5d8e012e1499fd9109ffb7d",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\ndef storage:\n  adminAddress is address at storage 0\n  pendingAdminAddress is address at storage 1\n  stor2 is mapping of uint8 at storage 2\n  stor3 is mapping of uint8 at storage 3\n  stor4 is array of struct at storage 4\n  stor5 is array of struct at storage 5\n  stor6 is mapping of uint256 at storage 6\n  tradeEnabled is uint8 at storage 7 offset 160\n  kyberNetworkAddress is address at storage 7\n  conversionRatesContractAddress is address at storage 8\n  sanityRatesContractAddress is address at storage 9\n  stor10 is mapping of uint8 at storage 10\n  tokenWallet is mapping of address at storage 11\n\ndef pendingAdmin(): # not payable\n  return pendingAdminAddress\n\ndef sanityRatesContract(): # not payable\n  return sanityRatesContractAddress\n\ndef tokenWallet(address _param1): # not payable\n  return tokenWallet[_param1]\n\ndef kyberNetwork(): # not payable\n  return kyberNetworkAddress\n\ndef conversionRatesContract(): # not payable\n  return conversionRatesContractAddress\n\ndef tradeEnabled(): # not payable\n  return bool(tradeEnabled)\n\ndef approvedWithdrawAddresses(bytes32 _param1): # not payable\n  return bool(stor10[_param1])\n\ndef admin(): # not payable\n  return adminAddress\n\n#\n#  Regular functions\n#\n\ndef enableTrade(): # not payable\n  require adminAddress == caller\n  tradeEnabled = 1\n  log TradeEnabled(bool enable=1)\n  return 1\n\ndef disableTrade(): # not payable\n  require stor3[caller]\n  tradeEnabled = 0\n  log TradeEnabled(bool enable=0)\n  return 1\n\ndef _fallback(?) payable: # default function\n  log DepositToken(\n        address token=0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee,\n        uint256 amount=call.value)\n\ndef transferAdmin(address newAdmin): # not payable\n  require adminAddress == caller\n  require newAdmin\n  log TransferAdminPending(address pendingAdmin=pendingAdminAddress)\n  pendingAdminAddress = newAdmin\n\ndef claimAdmin(): # not payable\n  require pendingAdminAddress == caller\n  log AdminClaimed(\n        address newAdmin=pendingAdminAddress,\n        address previousAdmin=adminAddress)\n  adminAddress = pendingAdminAddress\n  pendingAdminAddress = 0\n\ndef setTokenWallet(address token, address wallet): # not payable\n  require adminAddress == caller\n  require wallet\n  tokenWallet[address(token)] = wallet\n  log NewTokenWallet(\n        address token=address(token),\n        address wallet=wallet)\n\ndef withdrawEther(uint256 amount, address sendTo): # not payable\n  require adminAddress == caller\n  call sendTo with:\n     value amount wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log EtherWithdraw(\n        uint256 amount=amount,\n        address sendTo=sendTo)\n\ndef transferAdminQuickly(address newAdmin): # not payable\n  require adminAddress == caller\n  require newAdmin\n  log TransferAdminPending(address pendingAdmin=newAdmin)\n  log AdminClaimed(\n        address newAdmin=address(newAdmin),\n        address previousAdmin=adminAddress)\n  adminAddress = newAdmin\n\ndef setContracts(address _kyberNetwork, address _conversionRates, address _sanityRates): # not payable\n  require adminAddress == caller\n  require _kyberNetwork\n  require _conversionRates\n  kyberNetworkAddress = _kyberNetwork\n  conversionRatesContractAddress = _conversionRates\n  sanityRatesContractAddress = _sanityRates\n  log SetContractAddresses(\n        address network=address(_kyberNetwork),\n        address rate=address(_conversionRates),\n        address sanity=_sanityRates)\n\ndef withdrawToken(address token, uint256 amount, address sendTo): # not payable\n  require adminAddress == caller\n  require ext_code.size(token)\n  call token.transfer(address recipient, uint256 amount) with:\n       gas gas_remaining - 710 wei\n      args address(sendTo), amount\n  require ext_call.success\n  require ext_call.return_data[0]\n  log TokenWithdraw(\n        address token=address(token),\n        uint256 amount=amount,\n        address sendTo=sendTo)\n\ndef getBalance(address _address): # not payable\n  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == _address:\n      return eth.balance(this.address)\n  require ext_code.size(_address)\n  call _address.balanceOf(address account) with:\n       gas gas_remaining - 710 wei\n      args tokenWallet[address(_address)]\n  require ext_call.success\n  require ext_code.size(_address)\n  call _address.allowance(address owner, address spender) with:\n       gas gas_remaining - 710 wei\n      args tokenWallet[address(_address)], this.address\n  require ext_call.success\n  return ext_call.return_data[0]\n\ndef addAlerter(address newAlerter): # not payable\n  require adminAddress == caller\n  require not stor3[address(newAlerter)]\n  require stor5.length < 50\n  log AlerterAdded(\n        address newAlerter=address(newAlerter),\n        bool isAdd=1)\n  stor3[address(newAlerter)] = 1\n  stor5.length++\n  if not stor5.length <= stor5.length + 1:\n      idx = stor5.length + 1\n      while stor5.length > idx:\n          stor5[idx].field_0 = 0\n          idx = idx + 1\n          continue \n  address(stor5[stor5.length].field_0) = newAlerter\n\ndef addOperator(address newOperator): # not payable\n  require adminAddress == caller\n  require not stor2[address(newOperator)]\n  require stor4.length < 50\n  log OperatorAdded(\n        address newOperator=address(newOperator),\n        bool isAdd=1)\n  stor2[address(newOperator)] = 1\n  stor4.length++\n  if not stor4.length <= stor4.length + 1:\n      idx = stor4.length + 1\n      while stor4.length > idx:\n          stor4[idx].field_0 = 0\n          idx = idx + 1\n          continue \n  address(stor4[stor4.length].field_0) = newOperator\n\ndef withdraw(address token, uint256 amount, address destination): # not payable\n  require stor2[caller]\n  require stor10[token][destination]\n  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == token:\n      call destination with:\n         value amount wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n  else:\n      require ext_code.size(token)\n      call token.transferFrom(address sender, address recipient, uint256 amount) with:\n           gas gas_remaining - 710 wei\n          args tokenWallet[address(token)], address(destination), amount\n      require ext_call.success\n      require ext_call.return_data[0]\n  log WithdrawFunds(\n        address token=address(token),\n        uint256 amount=amount,\n        address destination=destination)\n  return 1\n\ndef getAlerters(): # not payable\n  if stor5.length:\n      mem[160] = address(stor5.field_0)\n      if (32 * stor5.length) + 32 > 64:\n          mem[192] = address(stor5.field_256)\n          idx = 192\n          s = 1\n          while (32 * stor5.length) + 128 > idx:\n              mem[idx + 32] = address(stor5[s].field_256)\n              idx = idx + 32\n              s = s + 1\n              continue \n  mem[(32 * stor5.length) + 160] = 32\n  mem[(32 * stor5.length) + 192] = stor5.length\n  mem[(32 * stor5.length) + 224 len floor32(stor5.length)] = mem[160 len floor32(stor5.length)]\n  return memory\n    from (32 * stor5.length) + 160\n     len (96 * stor5.length) + 64\n\ndef removeAlerter(address alerter): # not payable\n  require adminAddress == caller\n  require stor3[address(alerter)]\n  stor3[address(alerter)] = 0\n  idx = 0\n  while idx < stor5.length:\n      mem[0] = 5\n      if address(stor5[idx].field_0) != alerter:\n          idx = idx + 1\n          continue \n      require stor5.length - 1 < stor5.length\n      require idx < stor5.length\n      address(stor5[idx].field_0) = address(stor5[stor5.length].field_0)\n      stor5.length--\n      if not stor5.length <= stor5.length - 1:\n          idx = stor5.length + sha3(5) - 1\n          while sha3(5) + stor5.length > idx:\n              stor[idx] = 0\n              idx = idx + 1\n              continue \n      log AlerterAdded(\n            address newAlerter=address(alerter),\n            bool isAdd=0)\n      stop\n\ndef removeOperator(address operator): # not payable\n  require adminAddress == caller\n  require stor2[address(operator)]\n  stor2[address(operator)] = 0\n  idx = 0\n  while idx < stor4.length:\n      mem[0] = 4\n      if address(stor4[idx].field_0) != operator:\n          idx = idx + 1\n          continue \n      require stor4.length - 1 < stor4.length\n      require idx < stor4.length\n      address(stor4[idx].field_0) = address(stor4[stor4.length].field_0)\n      stor4.length--\n      if not stor4.length <= stor4.length - 1:\n          idx = stor4.length + sha3(4) - 1\n          while sha3(4) + stor4.length > idx:\n              stor[idx] = 0\n              idx = idx + 1\n              continue \n      log OperatorAdded(\n            address newOperator=address(operator),\n            bool isAdd=0)\n      stop\n\ndef approveWithdrawAddress(address token, address addr, bool approve): # not payable\n  require adminAddress == caller\n  stor10[token][addr] = uint8(approve)\n  log WithdrawAddressApproved(\n        address token=address(token),\n        address addr=address(addr),\n        bool approve=approve)\n  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == token:\n      stor6[address(token)] = 18\n  else:\n      require ext_code.size(token)\n      call token.decimals() with:\n           gas gas_remaining - 710 wei\n      require ext_call.success\n      stor6[address(token)] = ext_call.return_data[0]\n  if not tokenWallet[address(token)]:\n      if token != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n          tokenWallet[address(token)] = this.address\n          require ext_code.size(token)\n          call token.approve(address spender, uint256 amount) with:\n               gas gas_remaining - 710 wei\n              args address(this.address), 0x8000000000000000000000000000000000000000000000000000000000000000\n          require ext_call.success\n          require ext_call.return_data[0]\n\ndef getOperators(): # not payable\n  if not stor4.length:\n      mem[(32 * stor4.length) + 160] = 32\n      mem[(32 * stor4.length) + 192] = stor4.length\n      mem[(32 * stor4.length) + 224 len floor32(stor4.length)] = mem[160 len floor32(stor4.length)]\n      return memory\n        from (32 * stor4.length) + 160\n         len (96 * stor4.length) + 64\n  mem[160] = address(stor4.field_0)\n  idx = 160\n  s = 0\n  while (32 * stor4.length) + 128 > idx:\n      mem[idx + 32] = address(stor4[s].field_256)\n      idx = idx + 32\n      s = s + 1\n      continue \n  mem[(32 * stor4.length) + 224 len floor32(stor4.length)] = mem[160 len floor32(stor4.length)]\n  return Array(len=stor4.length, data=mem[160 len floor32(stor4.length)], mem[(32 * stor4.length) + floor32(stor4.length) + 224 len (32 * stor4.length) - floor32(stor4.length)]), \n\ndef getDestQty(address src, address dest, uint256 srcQty, uint256 rate): # not payable\n  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == src:\n          require srcQty <= 10000000000 * 10^18\n          require rate <= 1000000 * 10^18\n          return (rate * srcQty / 10^18)\n      if stor6[address(src)]:\n          require srcQty <= 10000000000 * 10^18\n          require rate <= 1000000 * 10^18\n          if 18 >= stor6[address(src)]:\n              require -stor6[address(src)] + 18 <= 18\n              return (10^(-stor6[address(src)] + 18) * rate * srcQty / 10^18)\n          require stor6[address(src)] - 18 <= 18\n          if 10^18 * 10^(stor6[address(src)] - 18):\n              return (srcQty * rate / 10^18 * 10^(stor6[address(src)] - 18))\n      else:\n          require ext_code.size(src)\n          call src.decimals() with:\n               gas gas_remaining - 710 wei\n          require ext_call.success\n          require srcQty <= 10000000000 * 10^18\n          require rate <= 1000000 * 10^18\n          if 18 >= ext_call.return_data[0]:\n              require -ext_call.return_data[0] + 18 <= 18\n              return (10^(-ext_call.return_data[0] + 18) * rate * srcQty / 10^18)\n          require ext_call.return_data[0] - 18 <= 18\n          if 10^18 * 10^(ext_call.return_data[0] - 18):\n              return (srcQty * rate / 10^18 * 10^(ext_call.return_data[0] - 18))\n      revert\n  if stor6[address(dest)]:\n      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == src:\n          require srcQty <= 10000000000 * 10^18\n          require rate <= 1000000 * 10^18\n          if stor6[address(dest)] >= 18:\n              require stor6[address(dest)] - 18 <= 18\n              return (10^(stor6[address(dest)] - 18) * rate * srcQty / 10^18)\n          require -stor6[address(dest)] + 18 <= 18\n          if 10^18 * 10^(-stor6[address(dest)] + 18):\n              return (srcQty * rate / 10^18 * 10^(-stor6[address(dest)] + 18))\n      else:\n          if stor6[address(src)]:\n              require srcQty <= 10000000000 * 10^18\n              require rate <= 1000000 * 10^18\n              if stor6[address(dest)] >= stor6[address(src)]:\n                  require stor6[address(dest)] - stor6[address(src)] <= 18\n                  return (10^(stor6[address(dest)] - stor6[address(src)]) * rate * srcQty / 10^18)\n              require stor6[address(src)] - stor6[address(dest)] <= 18\n              if 10^18 * 10^(stor6[address(src)] - stor6[address(dest)]):\n                  return (srcQty * rate / 10^18 * 10^(stor6[address(src)] - stor6[address(dest)]))\n          else:\n              require ext_code.size(src)\n              call src.decimals() with:\n                   gas gas_remaining - 710 wei\n              require ext_call.success\n              require srcQty <= 10000000000 * 10^18\n              require rate <= 1000000 * 10^18\n              if stor6[address(dest)] >= ext_call.return_data[0]:\n                  require stor6[address(dest)] - ext_call.return_data[0] <= 18\n                  return (10^(stor6[address(dest)] - ext_call.return_data[0]) * rate * srcQty / 10^18)\n              require ext_call.return_data[0] - stor6[address(dest)] <= 18\n              if 10^18 * 10^(ext_call.return_data[0] - stor6[address(dest)]):\n                  return (srcQty * rate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(dest)]))\n      revert\n  require ext_code.size(dest)\n  call dest.decimals() with:\n       gas gas_remaining - 710 wei\n  require ext_call.success\n  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == src:\n      require srcQty <= 10000000000 * 10^18\n      require rate <= 1000000 * 10^18\n      if ext_call.return_data[0] >= 18:\n          require ext_call.return_data[0] - 18 <= 18\n          return (10^(ext_call.return_data[0] - 18) * rate * srcQty / 10^18)\n      require -ext_call.return_data[0] + 18 <= 18\n      require 10^18 * 10^(-ext_call.return_data[0] + 18)\n      return (srcQty * rate / 10^18 * 10^(-ext_call.return_data[0] + 18))\n  if stor6[address(src)]:\n      require srcQty <= 10000000000 * 10^18\n      require rate <= 1000000 * 10^18\n      if ext_call.return_data[0] >= stor6[address(src)]:\n          require ext_call.return_data[0] - stor6[address(src)] <= 18\n          return (10^(ext_call.return_data[0] - stor6[address(src)]) * rate * srcQty / 10^18)\n      require stor6[address(src)] - ext_call.return_data[0] <= 18\n      require 10^18 * 10^(stor6[address(src)] - ext_call.return_data[0])\n      return (srcQty * rate / 10^18 * 10^(stor6[address(src)] - ext_call.return_data[0]))\n  require ext_code.size(src)\n  call src.decimals() with:\n       gas gas_remaining - 710 wei\n  require ext_call.success\n  require srcQty <= 10000000000 * 10^18\n  require rate <= 1000000 * 10^18\n  if ext_call.return_data[0] < ext_call.return_data[0]:\n      return (srcQty * rate / 10^18)\n  return (rate * srcQty / 10^18)\n\ndef getSrcQty(address src, address dest, uint256 dstQty, uint256 rate): # not payable\n  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == src:\n          require dstQty <= 10000000000 * 10^18\n          require rate <= 1000000 * 10^18\n          if rate:\n              return ((10^18 * dstQty) + rate - 1 / rate)\n      else:\n          if stor6[address(src)]:\n              require dstQty <= 10000000000 * 10^18\n              require rate <= 1000000 * 10^18\n              if stor6[address(src)] < 18:\n                  require -stor6[address(src)] + 18 <= 18\n                  if rate * 10^(-stor6[address(src)] + 18):\n                      return ((10^18 * dstQty) + (rate * 10^(-stor6[address(src)] + 18)) - 1 / rate * 10^(-stor6[address(src)] + 18))\n              else:\n                  require stor6[address(src)] - 18 <= 18\n                  if rate:\n                      return ((10^18 * dstQty * 10^(stor6[address(src)] - 18)) + rate - 1 / rate)\n          else:\n              require ext_code.size(src)\n              call src.decimals() with:\n                   gas gas_remaining - 710 wei\n              require ext_call.success\n              require dstQty <= 10000000000 * 10^18\n              require rate <= 1000000 * 10^18\n              if ext_call.return_data[0] < 18:\n                  require -ext_call.return_data[0] + 18 <= 18\n                  if rate * 10^(-ext_call.return_data[0] + 18):\n                      return ((10^18 * dstQty) + (rate * 10^(-ext_call.return_data[0] + 18)) - 1 / rate * 10^(-ext_call.return_data[0] + 18))\n              else:\n                  require ext_call.return_data[0] - 18 <= 18\n                  if rate:\n                      return ((10^18 * dstQty * 10^(ext_call.return_data[0] - 18)) + rate - 1 / rate)\n  else:\n      if stor6[address(dest)]:\n          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == src:\n              require dstQty <= 10000000000 * 10^18\n              require rate <= 1000000 * 10^18\n              if 18 < stor6[address(dest)]:\n                  require stor6[address(dest)] - 18 <= 18\n                  if rate * 10^(stor6[address(dest)] - 18):\n                      return ((10^18 * dstQty) + (rate * 10^(stor6[address(dest)] - 18)) - 1 / rate * 10^(stor6[address(dest)] - 18))\n              else:\n                  require -stor6[address(dest)] + 18 <= 18\n                  if rate:\n                      return ((10^18 * dstQty * 10^(-stor6[address(dest)] + 18)) + rate - 1 / rate)\n          else:\n              if stor6[address(src)]:\n                  require dstQty <= 10000000000 * 10^18\n                  require rate <= 1000000 * 10^18\n                  if stor6[address(src)] < stor6[address(dest)]:\n                      require stor6[address(dest)] - stor6[address(src)] <= 18\n                      if rate * 10^(stor6[address(dest)] - stor6[address(src)]):\n                          return ((10^18 * dstQty) + (rate * 10^(stor6[address(dest)] - stor6[address(src)])) - 1 / rate * 10^(stor6[address(dest)] - stor6[address(src)]))\n                  else:\n                      require stor6[address(src)] - stor6[address(dest)] <= 18\n                      if rate:\n                          return ((10^18 * dstQty * 10^(stor6[address(src)] - stor6[address(dest)])) + rate - 1 / rate)\n              else:\n                  require ext_code.size(src)\n                  call src.decimals() with:\n                       gas gas_remaining - 710 wei\n                  require ext_call.success\n                  require dstQty <= 10000000000 * 10^18\n                  require rate <= 1000000 * 10^18\n                  if ext_call.return_data[0] < stor6[address(dest)]:\n                      require stor6[address(dest)] - ext_call.return_data[0] <= 18\n                      if rate * 10^(stor6[address(dest)] - ext_call.return_data[0]):\n                          return ((10^18 * dstQty) + (rate * 10^(stor6[address(dest)] - ext_call.return_data[0])) - 1 / rate * 10^(stor6[address(dest)] - ext_call.return_data[0]))\n                  else:\n                      require ext_call.return_data[0] - stor6[address(dest)] <= 18\n                      if rate:\n                          return ((10^18 * dstQty * 10^(ext_call.return_data[0] - stor6[address(dest)])) + rate - 1 / rate)\n      else:\n          require ext_code.size(dest)\n          call dest.decimals() with:\n               gas gas_remaining - 710 wei\n          require ext_call.success\n          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == src:\n              require dstQty <= 10000000000 * 10^18\n              require rate <= 1000000 * 10^18\n              if 18 < ext_call.return_data[0]:\n                  require ext_call.return_data[0] - 18 <= 18\n                  if rate * 10^(ext_call.return_data[0] - 18):\n                      return ((10^18 * dstQty) + (rate * 10^(ext_call.return_data[0] - 18)) - 1 / rate * 10^(ext_call.return_data[0] - 18))\n              else:\n                  require -ext_call.return_data[0] + 18 <= 18\n                  if rate:\n                      return ((10^18 * dstQty * 10^(-ext_call.return_data[0] + 18)) + rate - 1 / rate)\n          else:\n              if stor6[address(src)]:\n                  require dstQty <= 10000000000 * 10^18\n                  require rate <= 1000000 * 10^18\n                  if stor6[address(src)] < ext_call.return_data[0]:\n                      require ext_call.return_data[0] - stor6[address(src)] <= 18\n                      if rate * 10^(ext_call.return_data[0] - stor6[address(src)]):\n                          return ((10^18 * dstQty) + (rate * 10^(ext_call.return_data[0] - stor6[address(src)])) - 1 / rate * 10^(ext_call.return_data[0] - stor6[address(src)]))\n                  else:\n                      require stor6[address(src)] - ext_call.return_data[0] <= 18\n                      if rate:\n                          return ((10^18 * dstQty * 10^(stor6[address(src)] - ext_call.return_data[0])) + rate - 1 / rate)\n              else:\n                  require ext_code.size(src)\n                  call src.decimals() with:\n                       gas gas_remaining - 710 wei\n                  require ext_call.success\n                  require dstQty <= 10000000000 * 10^18\n                  require rate <= 1000000 * 10^18\n                  if ext_call.return_data[0] < ext_call.return_data[0]:\n                      if rate * 10^0:\n                          return ((10^18 * dstQty) + rate - 1 / rate)\n                  else:\n                      if rate:\n                          return ((10^18 * dstQty) + rate - 1 / rate)\n  revert\n\ndef getConversionRate(address src, address dest, uint256 srcQty, uint256 blockNumber): # not payable\n  if tradeEnabled:\n      if src == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n          require ext_code.size(conversionRatesContractAddress)\n          call conversionRatesContractAddress.getRate(address token, uint256 currentBlockNumber, bool buy, uint256 qty) with:\n               gas gas_remaining - 710 wei\n              args 0, 0, blockNumber, 1, srcQty\n          require ext_call.success\n          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == src:\n                  require srcQty <= 10000000000 * 10^18\n                  require ext_call.return_data[0] <= 1000000 * 10^18\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                      if eth.balance(this.address) >= ext_call.return_data[0] * srcQty / 10^18:\n                          if not sanityRatesContractAddress:\n                              return ext_call.return_data[0]\n                          require ext_code.size(sanityRatesContractAddress)\n                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                               gas gas_remaining - 710 wei\n                              args address(src), dest\n                          require ext_call.success\n                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                              return ext_call.return_data[0]\n                  else:\n                      require ext_code.size(dest)\n                      call dest.balanceOf(address account) with:\n                           gas gas_remaining - 710 wei\n                          args tokenWallet[address(dest)]\n                      require ext_call.success\n                      require ext_code.size(dest)\n                      call dest.allowance(address owner, address spender) with:\n                           gas gas_remaining - 710 wei\n                          args tokenWallet[address(dest)], this.address\n                      require ext_call.success\n                      if ext_call.return_data[0] >= ext_call.return_data[0] * srcQty / 10^18:\n                          if not sanityRatesContractAddress:\n                              return ext_call.return_data[0]\n                          require ext_code.size(sanityRatesContractAddress)\n                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                               gas gas_remaining - 710 wei\n                              args address(src), dest\n                          require ext_call.success\n                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                              return ext_call.return_data[0]\n              else:\n                  if stor6[address(src)]:\n                      require srcQty <= 10000000000 * 10^18\n                      require ext_call.return_data[0] <= 1000000 * 10^18\n                      if 18 >= stor6[address(src)]:\n                          require -stor6[address(src)] + 18 <= 18\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                              if eth.balance(this.address) >= 10^(-stor6[address(src)] + 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                          else:\n                              require ext_code.size(dest)\n                              call dest.balanceOf(address account) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)]\n                              require ext_call.success\n                              require ext_code.size(dest)\n                              call dest.allowance(address owner, address spender) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)], this.address\n                              require ext_call.success\n                              if ext_call.return_data[0] >= 10^(-stor6[address(src)] + 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                      else:\n                          require stor6[address(src)] - 18 <= 18\n                          require 10^18 * 10^(stor6[address(src)] - 18)\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                              if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(stor6[address(src)] - 18):\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                          else:\n                              require ext_code.size(dest)\n                              call dest.balanceOf(address account) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)]\n                              require ext_call.success\n                              require ext_code.size(dest)\n                              call dest.allowance(address owner, address spender) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)], this.address\n                              require ext_call.success\n                              if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(stor6[address(src)] - 18):\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                  else:\n                      require ext_code.size(src)\n                      call src.decimals() with:\n                           gas gas_remaining - 710 wei\n                      require ext_call.success\n                      require srcQty <= 10000000000 * 10^18\n                      require ext_call.return_data[0] <= 1000000 * 10^18\n                      if 18 >= ext_call.return_data[0]:\n                          require -ext_call.return_data[0] + 18 <= 18\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                              if eth.balance(this.address) >= 10^(-ext_call.return_data[0] + 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                          else:\n                              require ext_code.size(dest)\n                              call dest.balanceOf(address account) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)]\n                              require ext_call.success\n                              require ext_code.size(dest)\n                              call dest.allowance(address owner, address spender) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)], this.address\n                              require ext_call.success\n                              if ext_call.return_data[0] >= 10^(-ext_call.return_data[0] + 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                      else:\n                          require ext_call.return_data[0] - 18 <= 18\n                          require 10^18 * 10^(ext_call.return_data[0] - 18)\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                              if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(ext_call.return_data[0] - 18):\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                          else:\n                              require ext_code.size(dest)\n                              call dest.balanceOf(address account) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)]\n                              require ext_call.success\n                              require ext_code.size(dest)\n                              call dest.allowance(address owner, address spender) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)], this.address\n                              require ext_call.success\n                              if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(ext_call.return_data[0] - 18):\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n          else:\n              if stor6[address(dest)]:\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == src:\n                      require srcQty <= 10000000000 * 10^18\n                      require ext_call.return_data[0] <= 1000000 * 10^18\n                      if stor6[address(dest)] >= 18:\n                          require stor6[address(dest)] - 18 <= 18\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                              if eth.balance(this.address) >= 10^(stor6[address(dest)] - 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                          else:\n                              require ext_code.size(dest)\n                              call dest.balanceOf(address account) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)]\n                              require ext_call.success\n                              require ext_code.size(dest)\n                              call dest.allowance(address owner, address spender) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)], this.address\n                              require ext_call.success\n                              if ext_call.return_data[0] >= 10^(stor6[address(dest)] - 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                      else:\n                          require -stor6[address(dest)] + 18 <= 18\n                          require 10^18 * 10^(-stor6[address(dest)] + 18)\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                              if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(-stor6[address(dest)] + 18):\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                          else:\n                              require ext_code.size(dest)\n                              call dest.balanceOf(address account) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)]\n                              require ext_call.success\n                              require ext_code.size(dest)\n                              call dest.allowance(address owner, address spender) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)], this.address\n                              require ext_call.success\n                              if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(-stor6[address(dest)] + 18):\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                  else:\n                      if stor6[address(src)]:\n                          require srcQty <= 10000000000 * 10^18\n                          require ext_call.return_data[0] <= 1000000 * 10^18\n                          if stor6[address(dest)] >= stor6[address(src)]:\n                              require stor6[address(dest)] - stor6[address(src)] <= 18\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= 10^(stor6[address(dest)] - stor6[address(src)]) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= 10^(stor6[address(dest)] - stor6[address(src)]) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                          else:\n                              require stor6[address(src)] - stor6[address(dest)] <= 18\n                              require 10^18 * 10^(stor6[address(src)] - stor6[address(dest)])\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(stor6[address(src)] - stor6[address(dest)]):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(stor6[address(src)] - stor6[address(dest)]):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                      else:\n                          require ext_code.size(src)\n                          call src.decimals() with:\n                               gas gas_remaining - 710 wei\n                          require ext_call.success\n                          require srcQty <= 10000000000 * 10^18\n                          require ext_call.return_data[0] <= 1000000 * 10^18\n                          if stor6[address(dest)] >= ext_call.return_data[0]:\n                              require stor6[address(dest)] - ext_call.return_data[0] <= 18\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= 10^(stor6[address(dest)] - ext_call.return_data[0]) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= 10^(stor6[address(dest)] - ext_call.return_data[0]) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                          else:\n                              require ext_call.return_data[0] - stor6[address(dest)] <= 18\n                              require 10^18 * 10^(ext_call.return_data[0] - stor6[address(dest)])\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(ext_call.return_data[0] - stor6[address(dest)]):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(ext_call.return_data[0] - stor6[address(dest)]):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n              else:\n                  require ext_code.size(dest)\n                  call dest.decimals() with:\n                       gas gas_remaining - 710 wei\n                  require ext_call.success\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == src:\n                      require srcQty <= 10000000000 * 10^18\n                      require ext_call.return_data[0] <= 1000000 * 10^18\n                      if ext_call.return_data[0] >= 18:\n                          require ext_call.return_data[0] - 18 <= 18\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                              if eth.balance(this.address) >= 10^(ext_call.return_data[0] - 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                          else:\n                              require ext_code.size(dest)\n                              call dest.balanceOf(address account) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)]\n                              require ext_call.success\n                              require ext_code.size(dest)\n                              call dest.allowance(address owner, address spender) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)], this.address\n                              require ext_call.success\n                              if ext_call.return_data[0] >= 10^(ext_call.return_data[0] - 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                      else:\n                          require -ext_call.return_data[0] + 18 <= 18\n                          require 10^18 * 10^(-ext_call.return_data[0] + 18)\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                              if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(-ext_call.return_data[0] + 18):\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                          else:\n                              require ext_code.size(dest)\n                              call dest.balanceOf(address account) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)]\n                              require ext_call.success\n                              require ext_code.size(dest)\n                              call dest.allowance(address owner, address spender) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(dest)], this.address\n                              require ext_call.success\n                              if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(-ext_call.return_data[0] + 18):\n                                  if not sanityRatesContractAddress:\n                                      return ext_call.return_data[0]\n                                  require ext_code.size(sanityRatesContractAddress)\n                                  call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                       gas gas_remaining - 710 wei\n                                      args address(src), dest\n                                  require ext_call.success\n                                  if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                      return ext_call.return_data[0]\n                  else:\n                      if stor6[address(src)]:\n                          require srcQty <= 10000000000 * 10^18\n                          require ext_call.return_data[0] <= 1000000 * 10^18\n                          if ext_call.return_data[0] >= stor6[address(src)]:\n                              require ext_call.return_data[0] - stor6[address(src)] <= 18\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= 10^(ext_call.return_data[0] - stor6[address(src)]) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= 10^(ext_call.return_data[0] - stor6[address(src)]) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                          else:\n                              require stor6[address(src)] - ext_call.return_data[0] <= 18\n                              require 10^18 * 10^(stor6[address(src)] - ext_call.return_data[0])\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(stor6[address(src)] - ext_call.return_data[0]):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(stor6[address(src)] - ext_call.return_data[0]):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                      else:\n                          require ext_code.size(src)\n                          call src.decimals() with:\n                               gas gas_remaining - 710 wei\n                          require ext_call.success\n                          require srcQty <= 10000000000 * 10^18\n                          require ext_call.return_data[0] <= 1000000 * 10^18\n                          if ext_call.return_data[0] < ext_call.return_data[0]:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^0:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^0:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                          else:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= 10^0 * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= 10^0 * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n      else:\n          if dest == 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n              require ext_code.size(conversionRatesContractAddress)\n              call conversionRatesContractAddress.getRate(address token, uint256 currentBlockNumber, bool buy, uint256 qty) with:\n                   gas gas_remaining - 710 wei\n                  args 0, 0, blockNumber, 0, srcQty\n              require ext_call.success\n              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == src:\n                      require srcQty <= 10000000000 * 10^18\n                      require ext_call.return_data[0] <= 1000000 * 10^18\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                          if eth.balance(this.address) >= ext_call.return_data[0] * srcQty / 10^18:\n                              if not sanityRatesContractAddress:\n                                  return ext_call.return_data[0]\n                              require ext_code.size(sanityRatesContractAddress)\n                              call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                   gas gas_remaining - 710 wei\n                                  args address(src), dest\n                              require ext_call.success\n                              if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                  return ext_call.return_data[0]\n                      else:\n                          require ext_code.size(dest)\n                          call dest.balanceOf(address account) with:\n                               gas gas_remaining - 710 wei\n                              args tokenWallet[address(dest)]\n                          require ext_call.success\n                          require ext_code.size(dest)\n                          call dest.allowance(address owner, address spender) with:\n                               gas gas_remaining - 710 wei\n                              args tokenWallet[address(dest)], this.address\n                          require ext_call.success\n                          if ext_call.return_data[0] >= ext_call.return_data[0] * srcQty / 10^18:\n                              if not sanityRatesContractAddress:\n                                  return ext_call.return_data[0]\n                              require ext_code.size(sanityRatesContractAddress)\n                              call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                   gas gas_remaining - 710 wei\n                                  args address(src), dest\n                              require ext_call.success\n                              if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                  return ext_call.return_data[0]\n                  else:\n                      if stor6[address(src)]:\n                          require srcQty <= 10000000000 * 10^18\n                          require ext_call.return_data[0] <= 1000000 * 10^18\n                          if 18 >= stor6[address(src)]:\n                              require -stor6[address(src)] + 18 <= 18\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= 10^(-stor6[address(src)] + 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= 10^(-stor6[address(src)] + 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                          else:\n                              require stor6[address(src)] - 18 <= 18\n                              require 10^18 * 10^(stor6[address(src)] - 18)\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(stor6[address(src)] - 18):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(stor6[address(src)] - 18):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                      else:\n                          require ext_code.size(src)\n                          call src.decimals() with:\n                               gas gas_remaining - 710 wei\n                          require ext_call.success\n                          require srcQty <= 10000000000 * 10^18\n                          require ext_call.return_data[0] <= 1000000 * 10^18\n                          if 18 >= ext_call.return_data[0]:\n                              require -ext_call.return_data[0] + 18 <= 18\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= 10^(-ext_call.return_data[0] + 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= 10^(-ext_call.return_data[0] + 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                          else:\n                              require ext_call.return_data[0] - 18 <= 18\n                              require 10^18 * 10^(ext_call.return_data[0] - 18)\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(ext_call.return_data[0] - 18):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(ext_call.return_data[0] - 18):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n              else:\n                  if stor6[address(dest)]:\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == src:\n                          require srcQty <= 10000000000 * 10^18\n                          require ext_call.return_data[0] <= 1000000 * 10^18\n                          if stor6[address(dest)] >= 18:\n                              require stor6[address(dest)] - 18 <= 18\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= 10^(stor6[address(dest)] - 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= 10^(stor6[address(dest)] - 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                          else:\n                              require -stor6[address(dest)] + 18 <= 18\n                              require 10^18 * 10^(-stor6[address(dest)] + 18)\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(-stor6[address(dest)] + 18):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(-stor6[address(dest)] + 18):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                      else:\n                          if stor6[address(src)]:\n                              require srcQty <= 10000000000 * 10^18\n                              require ext_call.return_data[0] <= 1000000 * 10^18\n                              if stor6[address(dest)] >= stor6[address(src)]:\n                                  require stor6[address(dest)] - stor6[address(src)] <= 18\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                      if eth.balance(this.address) >= 10^(stor6[address(dest)] - stor6[address(src)]) * ext_call.return_data[0] * srcQty / 10^18:\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                                  else:\n                                      require ext_code.size(dest)\n                                      call dest.balanceOf(address account) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)]\n                                      require ext_call.success\n                                      require ext_code.size(dest)\n                                      call dest.allowance(address owner, address spender) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)], this.address\n                                      require ext_call.success\n                                      if ext_call.return_data[0] >= 10^(stor6[address(dest)] - stor6[address(src)]) * ext_call.return_data[0] * srcQty / 10^18:\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                              else:\n                                  require stor6[address(src)] - stor6[address(dest)] <= 18\n                                  require 10^18 * 10^(stor6[address(src)] - stor6[address(dest)])\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                      if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(stor6[address(src)] - stor6[address(dest)]):\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                                  else:\n                                      require ext_code.size(dest)\n                                      call dest.balanceOf(address account) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)]\n                                      require ext_call.success\n                                      require ext_code.size(dest)\n                                      call dest.allowance(address owner, address spender) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)], this.address\n                                      require ext_call.success\n                                      if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(stor6[address(src)] - stor6[address(dest)]):\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                          else:\n                              require ext_code.size(src)\n                              call src.decimals() with:\n                                   gas gas_remaining - 710 wei\n                              require ext_call.success\n                              require srcQty <= 10000000000 * 10^18\n                              require ext_call.return_data[0] <= 1000000 * 10^18\n                              if stor6[address(dest)] >= ext_call.return_data[0]:\n                                  require stor6[address(dest)] - ext_call.return_data[0] <= 18\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                      if eth.balance(this.address) >= 10^(stor6[address(dest)] - ext_call.return_data[0]) * ext_call.return_data[0] * srcQty / 10^18:\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                                  else:\n                                      require ext_code.size(dest)\n                                      call dest.balanceOf(address account) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)]\n                                      require ext_call.success\n                                      require ext_code.size(dest)\n                                      call dest.allowance(address owner, address spender) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)], this.address\n                                      require ext_call.success\n                                      if ext_call.return_data[0] >= 10^(stor6[address(dest)] - ext_call.return_data[0]) * ext_call.return_data[0] * srcQty / 10^18:\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                              else:\n                                  require ext_call.return_data[0] - stor6[address(dest)] <= 18\n                                  require 10^18 * 10^(ext_call.return_data[0] - stor6[address(dest)])\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                      if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(ext_call.return_data[0] - stor6[address(dest)]):\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                                  else:\n                                      require ext_code.size(dest)\n                                      call dest.balanceOf(address account) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)]\n                                      require ext_call.success\n                                      require ext_code.size(dest)\n                                      call dest.allowance(address owner, address spender) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)], this.address\n                                      require ext_call.success\n                                      if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(ext_call.return_data[0] - stor6[address(dest)]):\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                  else:\n                      require ext_code.size(dest)\n                      call dest.decimals() with:\n                           gas gas_remaining - 710 wei\n                      require ext_call.success\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == src:\n                          require srcQty <= 10000000000 * 10^18\n                          require ext_call.return_data[0] <= 1000000 * 10^18\n                          if ext_call.return_data[0] >= 18:\n                              require ext_call.return_data[0] - 18 <= 18\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= 10^(ext_call.return_data[0] - 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= 10^(ext_call.return_data[0] - 18) * ext_call.return_data[0] * srcQty / 10^18:\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                          else:\n                              require -ext_call.return_data[0] + 18 <= 18\n                              require 10^18 * 10^(-ext_call.return_data[0] + 18)\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                  if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(-ext_call.return_data[0] + 18):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                              else:\n                                  require ext_code.size(dest)\n                                  call dest.balanceOf(address account) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)]\n                                  require ext_call.success\n                                  require ext_code.size(dest)\n                                  call dest.allowance(address owner, address spender) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(dest)], this.address\n                                  require ext_call.success\n                                  if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(-ext_call.return_data[0] + 18):\n                                      if not sanityRatesContractAddress:\n                                          return ext_call.return_data[0]\n                                      require ext_code.size(sanityRatesContractAddress)\n                                      call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                           gas gas_remaining - 710 wei\n                                          args address(src), dest\n                                      require ext_call.success\n                                      if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                          return ext_call.return_data[0]\n                      else:\n                          if stor6[address(src)]:\n                              require srcQty <= 10000000000 * 10^18\n                              require ext_call.return_data[0] <= 1000000 * 10^18\n                              if ext_call.return_data[0] >= stor6[address(src)]:\n                                  require ext_call.return_data[0] - stor6[address(src)] <= 18\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                      if eth.balance(this.address) >= 10^(ext_call.return_data[0] - stor6[address(src)]) * ext_call.return_data[0] * srcQty / 10^18:\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                                  else:\n                                      require ext_code.size(dest)\n                                      call dest.balanceOf(address account) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)]\n                                      require ext_call.success\n                                      require ext_code.size(dest)\n                                      call dest.allowance(address owner, address spender) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)], this.address\n                                      require ext_call.success\n                                      if ext_call.return_data[0] >= 10^(ext_call.return_data[0] - stor6[address(src)]) * ext_call.return_data[0] * srcQty / 10^18:\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                              else:\n                                  require stor6[address(src)] - ext_call.return_data[0] <= 18\n                                  require 10^18 * 10^(stor6[address(src)] - ext_call.return_data[0])\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                      if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^(stor6[address(src)] - ext_call.return_data[0]):\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                                  else:\n                                      require ext_code.size(dest)\n                                      call dest.balanceOf(address account) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)]\n                                      require ext_call.success\n                                      require ext_code.size(dest)\n                                      call dest.allowance(address owner, address spender) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)], this.address\n                                      require ext_call.success\n                                      if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^(stor6[address(src)] - ext_call.return_data[0]):\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                          else:\n                              require ext_code.size(src)\n                              call src.decimals() with:\n                                   gas gas_remaining - 710 wei\n                              require ext_call.success\n                              require srcQty <= 10000000000 * 10^18\n                              require ext_call.return_data[0] <= 1000000 * 10^18\n                              if ext_call.return_data[0] < ext_call.return_data[0]:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                      if eth.balance(this.address) >= srcQty * ext_call.return_data[0] / 10^18 * 10^0:\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                                  else:\n                                      require ext_code.size(dest)\n                                      call dest.balanceOf(address account) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)]\n                                      require ext_call.success\n                                      require ext_code.size(dest)\n                                      call dest.allowance(address owner, address spender) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)], this.address\n                                      require ext_call.success\n                                      if ext_call.return_data[0] >= srcQty * ext_call.return_data[0] / 10^18 * 10^0:\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                              else:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == dest:\n                                      if eth.balance(this.address) >= 10^0 * ext_call.return_data[0] * srcQty / 10^18:\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n                                  else:\n                                      require ext_code.size(dest)\n                                      call dest.balanceOf(address account) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)]\n                                      require ext_call.success\n                                      require ext_code.size(dest)\n                                      call dest.allowance(address owner, address spender) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(dest)], this.address\n                                      require ext_call.success\n                                      if ext_call.return_data[0] >= 10^0 * ext_call.return_data[0] * srcQty / 10^18:\n                                          if not sanityRatesContractAddress:\n                                              return ext_call.return_data[0]\n                                          require ext_code.size(sanityRatesContractAddress)\n                                          call sanityRatesContractAddress.getSanityRate(address src, address dest) with:\n                                               gas gas_remaining - 710 wei\n                                              args address(src), dest\n                                          require ext_call.success\n                                          if ext_call.return_data[0] <= ext_call.return_data[0]:\n                                              return ext_call.return_data[0]\n      return 0\n  else:\n      return 0\n\ndef trade(address srcToken, uint256 srcAmount, address destToken, address destAddress, uint256 conversionRate, bool validate) payable: \n  require tradeEnabled\n  require kyberNetworkAddress == caller\n  if not validate:\n      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n              require srcAmount <= 10000000000 * 10^18\n              require conversionRate <= 1000000 * 10^18\n              require conversionRate * srcAmount / 10^18 > 0\n              require ext_code.size(conversionRatesContractAddress)\n              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                       gas gas_remaining - 710 wei\n                      args 0, 0, 0, 0, block.number\n              else:\n                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                       gas gas_remaining - 710 wei\n                      args 0, 0, conversionRate * srcAmount / 10^18, 0, block.number\n              require ext_call.success\n              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                      call destAddress with:\n                         value conversionRate * srcAmount / 10^18 wei\n                           gas 2300 * is_zero(value) wei\n                      require ext_call.success\n                      log TradeExecute(\n                            address origin=address(srcToken),\n                            address src=srcAmount,\n                            uint256 srcAmount=address(destToken),\n                            address destToken=conversionRate * srcAmount / 10^18,\n                            uint256 destAmount=destAddress,\n                            address destAddress=caller)\n                  else:\n                      require ext_code.size(destToken)\n                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args tokenWallet[address(destToken)], address(destAddress), conversionRate * srcAmount / 10^18\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                      log TradeExecute(\n                            address origin=srcToken,\n                            address src=0,\n                            uint256 srcAmount=address(destToken),\n                            address destToken=conversionRate * srcAmount / 10^18,\n                            uint256 destAmount=destAddress,\n                            address destAddress=caller)\n              else:\n                  require ext_code.size(srcToken)\n                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                       gas gas_remaining - 710 wei\n                      args caller, tokenWallet[address(srcToken)], srcAmount\n                  require ext_call.success\n                  require ext_call.return_data[0]\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                      call destAddress with:\n                         value conversionRate * srcAmount / 10^18 wei\n                           gas 2300 * is_zero(value) wei\n                      require ext_call.success\n                  else:\n                      require ext_code.size(destToken)\n                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args tokenWallet[address(destToken)], address(destAddress), conversionRate * srcAmount / 10^18\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                  log TradeExecute(\n                        address origin=srcToken,\n                        address src=0,\n                        uint256 srcAmount=address(destToken),\n                        address destToken=conversionRate * srcAmount / 10^18,\n                        uint256 destAmount=destAddress,\n                        address destAddress=caller)\n              return 1\n          if stor6[address(srcToken)]:\n              require srcAmount <= 10000000000 * 10^18\n              require conversionRate <= 1000000 * 10^18\n              if 18 >= stor6[address(srcToken)]:\n                  require -stor6[address(srcToken)] + 18 <= 18\n                  require 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18 > 0\n                  require ext_code.size(conversionRatesContractAddress)\n                  if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                      call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                           gas gas_remaining - 710 wei\n                          args 0, 0, 0, 0, block.number\n                  else:\n                      call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                           gas gas_remaining - 710 wei\n                          args 0, 0, 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18, 0, block.number\n                  require ext_call.success\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                          call destAddress with:\n                             value 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18 wei\n                               gas 2300 * is_zero(value) wei\n                          require ext_call.success\n                          log TradeExecute(\n                                address origin=address(srcToken),\n                                address src=srcAmount,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                      else:\n                          require ext_code.size(destToken)\n                          call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args tokenWallet[address(destToken)], address(destAddress), 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                  else:\n                      require ext_code.size(srcToken)\n                      call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args caller, tokenWallet[address(srcToken)], srcAmount\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                          call destAddress with:\n                             value 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18 wei\n                               gas 2300 * is_zero(value) wei\n                          require ext_call.success\n                      else:\n                          require ext_code.size(destToken)\n                          call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args tokenWallet[address(destToken)], address(destAddress), 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                      log TradeExecute(\n                            address origin=srcToken,\n                            address src=0,\n                            uint256 srcAmount=address(destToken),\n                            address destToken=10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18,\n                            uint256 destAmount=destAddress,\n                            address destAddress=caller)\n              else:\n                  require stor6[address(srcToken)] - 18 <= 18\n                  require 10^18 * 10^(stor6[address(srcToken)] - 18)\n                  require srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18) > 0\n                  require ext_code.size(conversionRatesContractAddress)\n                  if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                      call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                           gas gas_remaining - 710 wei\n                          args 0, 0, 0, 0, block.number\n                  else:\n                      call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                           gas gas_remaining - 710 wei\n                          args 0, 0, srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18), 0, block.number\n                  require ext_call.success\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                          call destAddress with:\n                             value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18) wei\n                               gas 2300 * is_zero(value) wei\n                          require ext_call.success\n                          log TradeExecute(\n                                address origin=address(srcToken),\n                                address src=srcAmount,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18),\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                      else:\n                          require ext_code.size(destToken)\n                          call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18)\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18),\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                  else:\n                      require ext_code.size(srcToken)\n                      call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args caller, tokenWallet[address(srcToken)], srcAmount\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                          call destAddress with:\n                             value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18) wei\n                               gas 2300 * is_zero(value) wei\n                          require ext_call.success\n                      else:\n                          require ext_code.size(destToken)\n                          call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18)\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                      log TradeExecute(\n                            address origin=srcToken,\n                            address src=0,\n                            uint256 srcAmount=address(destToken),\n                            address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18),\n                            uint256 destAmount=destAddress,\n                            address destAddress=caller)\n              return 1\n          require ext_code.size(srcToken)\n          call srcToken.decimals() with:\n               gas gas_remaining - 710 wei\n          require ext_call.success\n          require srcAmount <= 10000000000 * 10^18\n          require conversionRate <= 1000000 * 10^18\n          if 18 >= ext_call.return_data[0]:\n              require -ext_call.return_data[0] + 18 <= 18\n              require 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18 > 0\n              require ext_code.size(conversionRatesContractAddress)\n              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                       gas gas_remaining - 710 wei\n                      args 0, 0, 0, 0, block.number\n              else:\n                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                       gas gas_remaining - 710 wei\n                      args 0, 0, 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18, 0, block.number\n              require ext_call.success\n              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                      call destAddress with:\n                         value 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18 wei\n                           gas 2300 * is_zero(value) wei\n                      require ext_call.success\n                  else:\n                      require ext_code.size(destToken)\n                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args tokenWallet[address(destToken)], address(destAddress), 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                  log TradeExecute(\n                        address origin=srcToken,\n                        address src=0,\n                        uint256 srcAmount=address(destToken),\n                        address destToken=10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18,\n                        uint256 destAmount=destAddress,\n                        address destAddress=caller)\n                  return 1\n              require ext_code.size(srcToken)\n              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                   gas gas_remaining - 710 wei\n                  args caller, tokenWallet[address(srcToken)], srcAmount\n              require ext_call.success\n              require ext_call.return_data[0]\n              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                  call destAddress with:\n                     value 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18 wei\n                       gas 2300 * is_zero(value) wei\n                  require ext_call.success\n              else:\n                  require ext_code.size(destToken)\n                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                       gas gas_remaining - 710 wei\n                      args tokenWallet[address(destToken)], address(destAddress), 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18\n                  require ext_call.success\n                  require ext_call.return_data[0]\n              log TradeExecute(\n                    address origin=srcToken,\n                    address src=0,\n                    uint256 srcAmount=address(destToken),\n                    address destToken=10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18,\n                    uint256 destAmount=destAddress,\n                    address destAddress=caller)\n          else:\n              require ext_call.return_data[0] - 18 <= 18\n              require 10^18 * 10^(ext_call.return_data[0] - 18)\n              require srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18) > 0\n              require ext_code.size(conversionRatesContractAddress)\n              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                       gas gas_remaining - 710 wei\n                      args 0, 0, 0, 0, block.number\n              else:\n                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                       gas gas_remaining - 710 wei\n                      args 0, 0, srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18), 0, block.number\n              require ext_call.success\n              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                      call destAddress with:\n                         value srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18) wei\n                           gas 2300 * is_zero(value) wei\n                      require ext_call.success\n                  else:\n                      require ext_code.size(destToken)\n                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18)\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                  log TradeExecute(\n                        address origin=srcToken,\n                        address src=0,\n                        uint256 srcAmount=address(destToken),\n                        address destToken=srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18),\n                        uint256 destAmount=destAddress,\n                        address destAddress=caller)\n                  return 1\n              require ext_code.size(srcToken)\n              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                   gas gas_remaining - 710 wei\n                  args caller, tokenWallet[address(srcToken)], srcAmount\n              require ext_call.success\n              require ext_call.return_data[0]\n              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                  call destAddress with:\n                     value srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18) wei\n                       gas 2300 * is_zero(value) wei\n                  require ext_call.success\n              else:\n                  require ext_code.size(destToken)\n                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                       gas gas_remaining - 710 wei\n                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18)\n                  require ext_call.success\n                  require ext_call.return_data[0]\n              log TradeExecute(\n                    address origin=srcToken,\n                    address src=0,\n                    uint256 srcAmount=address(destToken),\n                    address destToken=srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18),\n                    uint256 destAmount=destAddress,\n                    address destAddress=caller)\n      else:\n          if stor6[address(destToken)]:\n              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                  require srcAmount <= 10000000000 * 10^18\n                  require conversionRate <= 1000000 * 10^18\n                  if stor6[address(destToken)] >= 18:\n                      require stor6[address(destToken)] - 18 <= 18\n                      require 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18 > 0\n                      require ext_code.size(conversionRatesContractAddress)\n                      if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, 0, 0, block.number\n                      else:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18, 0, block.number\n                      require ext_call.success\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18 wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                              log TradeExecute(\n                                    address origin=address(srcToken),\n                                    address src=srcAmount,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                      else:\n                          require ext_code.size(srcToken)\n                          call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args caller, tokenWallet[address(srcToken)], srcAmount\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18 wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                  else:\n                      require -stor6[address(destToken)] + 18 <= 18\n                      require 10^18 * 10^(-stor6[address(destToken)] + 18)\n                      require srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18) > 0\n                      require ext_code.size(conversionRatesContractAddress)\n                      if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, 0, 0, block.number\n                      else:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18), 0, block.number\n                      require ext_call.success\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18) wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                              log TradeExecute(\n                                    address origin=address(srcToken),\n                                    address src=srcAmount,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18),\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18)\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18),\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                      else:\n                          require ext_code.size(srcToken)\n                          call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args caller, tokenWallet[address(srcToken)], srcAmount\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18) wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18)\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18),\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                  return 1\n              if stor6[address(srcToken)]:\n                  require srcAmount <= 10000000000 * 10^18\n                  require conversionRate <= 1000000 * 10^18\n                  if stor6[address(destToken)] >= stor6[address(srcToken)]:\n                      require stor6[address(destToken)] - stor6[address(srcToken)] <= 18\n                      require 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 > 0\n                      require ext_code.size(conversionRatesContractAddress)\n                      if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, 0, 0, block.number\n                      else:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18, 0, block.number\n                      require ext_call.success\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                              log TradeExecute(\n                                    address origin=address(srcToken),\n                                    address src=srcAmount,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          return 1\n                      require ext_code.size(srcToken)\n                      call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args caller, tokenWallet[address(srcToken)], srcAmount\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                          call destAddress with:\n                             value 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 wei\n                               gas 2300 * is_zero(value) wei\n                          require ext_call.success\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                          return 1\n                      require ext_code.size(destToken)\n                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                      log TradeExecute(\n                            address origin=srcToken,\n                            address src=0,\n                            uint256 srcAmount=address(destToken),\n                            address destToken=10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                            uint256 destAmount=destAddress,\n                            address destAddress=caller)\n                  else:\n                      require stor6[address(srcToken)] - stor6[address(destToken)] <= 18\n                      require 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)])\n                      require srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]) > 0\n                      require ext_code.size(conversionRatesContractAddress)\n                      if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, 0, 0, block.number\n                      else:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]), 0, block.number\n                      require ext_call.success\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]) wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                              log TradeExecute(\n                                    address origin=address(srcToken),\n                                    address src=srcAmount,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]),\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)])\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]),\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          return 1\n                      require ext_code.size(srcToken)\n                      call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args caller, tokenWallet[address(srcToken)], srcAmount\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                          call destAddress with:\n                             value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]) wei\n                               gas 2300 * is_zero(value) wei\n                          require ext_call.success\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]),\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                          return 1\n                      require ext_code.size(destToken)\n                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)])\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                      log TradeExecute(\n                            address origin=srcToken,\n                            address src=0,\n                            uint256 srcAmount=address(destToken),\n                            address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]),\n                            uint256 destAmount=destAddress,\n                            address destAddress=caller)\n              else:\n                  require ext_code.size(srcToken)\n                  call srcToken.decimals() with:\n                       gas gas_remaining - 710 wei\n                  require ext_call.success\n                  require srcAmount <= 10000000000 * 10^18\n                  require conversionRate <= 1000000 * 10^18\n                  if stor6[address(destToken)] >= ext_call.return_data[0]:\n                      require stor6[address(destToken)] - ext_call.return_data[0] <= 18\n                      require 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18 > 0\n                      require ext_code.size(conversionRatesContractAddress)\n                      if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, 0, 0, block.number\n                      else:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18, 0, block.number\n                      require ext_call.success\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18 wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                          return 1\n                      require ext_code.size(srcToken)\n                      call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args caller, tokenWallet[address(srcToken)], srcAmount\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                          call destAddress with:\n                             value 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18 wei\n                               gas 2300 * is_zero(value) wei\n                          require ext_call.success\n                      else:\n                          require ext_code.size(destToken)\n                          call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                      log TradeExecute(\n                            address origin=srcToken,\n                            address src=0,\n                            uint256 srcAmount=address(destToken),\n                            address destToken=10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18,\n                            uint256 destAmount=destAddress,\n                            address destAddress=caller)\n                  else:\n                      require ext_call.return_data[0] - stor6[address(destToken)] <= 18\n                      require 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)])\n                      require srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]) > 0\n                      require ext_code.size(conversionRatesContractAddress)\n                      if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, 0, 0, block.number\n                      else:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]), 0, block.number\n                      require ext_call.success\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]) wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)])\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]),\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                          return 1\n                      require ext_code.size(srcToken)\n                      call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args caller, tokenWallet[address(srcToken)], srcAmount\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                          call destAddress with:\n                             value srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]) wei\n                               gas 2300 * is_zero(value) wei\n                          require ext_call.success\n                      else:\n                          require ext_code.size(destToken)\n                          call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)])\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                      log TradeExecute(\n                            address origin=srcToken,\n                            address src=0,\n                            uint256 srcAmount=address(destToken),\n                            address destToken=srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]),\n                            uint256 destAmount=destAddress,\n                            address destAddress=caller)\n          else:\n              require ext_code.size(destToken)\n              call destToken.decimals() with:\n                   gas gas_remaining - 710 wei\n              require ext_call.success\n              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                  require srcAmount <= 10000000000 * 10^18\n                  require conversionRate <= 1000000 * 10^18\n                  if ext_call.return_data[0] >= 18:\n                      require ext_call.return_data[0] - 18 <= 18\n                      require 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18 > 0\n                      require ext_code.size(conversionRatesContractAddress)\n                      if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, 0, 0, block.number\n                      else:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18, 0, block.number\n                      require ext_call.success\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18 wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                          return 1\n                      require ext_code.size(srcToken)\n                      call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args caller, tokenWallet[address(srcToken)], srcAmount\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                          call destAddress with:\n                             value 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18 wei\n                               gas 2300 * is_zero(value) wei\n                          require ext_call.success\n                      else:\n                          require ext_code.size(destToken)\n                          call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args tokenWallet[address(destToken)], address(destAddress), 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                      log TradeExecute(\n                            address origin=srcToken,\n                            address src=0,\n                            uint256 srcAmount=address(destToken),\n                            address destToken=10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18,\n                            uint256 destAmount=destAddress,\n                            address destAddress=caller)\n                  else:\n                      require -ext_call.return_data[0] + 18 <= 18\n                      require 10^18 * 10^(-ext_call.return_data[0] + 18)\n                      require srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18) > 0\n                      require ext_code.size(conversionRatesContractAddress)\n                      if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, 0, 0, block.number\n                      else:\n                          call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                               gas gas_remaining - 710 wei\n                              args 0, 0, srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18), 0, block.number\n                      require ext_call.success\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18) wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18)\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18),\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                          return 1\n                      require ext_code.size(srcToken)\n                      call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args caller, tokenWallet[address(srcToken)], srcAmount\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                          call destAddress with:\n                             value srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18) wei\n                               gas 2300 * is_zero(value) wei\n                          require ext_call.success\n                      else:\n                          require ext_code.size(destToken)\n                          call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18)\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                      log TradeExecute(\n                            address origin=srcToken,\n                            address src=0,\n                            uint256 srcAmount=address(destToken),\n                            address destToken=srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18),\n                            uint256 destAmount=destAddress,\n                            address destAddress=caller)\n              else:\n                  if not stor6[address(srcToken)]:\n                      require ext_code.size(srcToken)\n                      call srcToken.decimals() with:\n                           gas gas_remaining - 710 wei\n                      require ext_call.success\n                      require srcAmount <= 10000000000 * 10^18\n                      require conversionRate <= 1000000 * 10^18\n                      if ext_call.return_data[0] < ext_call.return_data[0]:\n                          require srcAmount * conversionRate / 10^18 * 10^0 > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, srcAmount * conversionRate / 10^18, 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^0 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=srcAmount * conversionRate / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^0 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18\n                      else:\n                          require 10^0 * conversionRate * srcAmount / 10^18 > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, conversionRate * srcAmount / 10^18, 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^0 * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), conversionRate * srcAmount / 10^18\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=conversionRate * srcAmount / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^0 * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), conversionRate * srcAmount / 10^18\n                  else:\n                      require srcAmount <= 10000000000 * 10^18\n                      require conversionRate <= 1000000 * 10^18\n                      if ext_call.return_data[0] >= stor6[address(srcToken)]:\n                          require ext_call.return_data[0] - stor6[address(srcToken)] <= 18\n                          require 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18, 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                              return 1\n                          require ext_code.size(srcToken)\n                          call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args caller, tokenWallet[address(srcToken)], srcAmount\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                      else:\n                          require stor6[address(srcToken)] - ext_call.return_data[0] <= 18\n                          require 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0])\n                          require srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]) > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]), 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0])\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]),\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                              return 1\n                          require ext_code.size(srcToken)\n                          call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args caller, tokenWallet[address(srcToken)], srcAmount\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]) wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0])\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]),\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n  else:\n      require conversionRate > 0\n      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n          require srcAmount == call.value\n          if destToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n              if stor6[address(destToken)]:\n                  if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                      if stor6[address(srcToken)]:\n                          require srcAmount <= 10000000000 * 10^18\n                          require conversionRate <= 1000000 * 10^18\n                          if stor6[address(destToken)] >= stor6[address(srcToken)]:\n                              require stor6[address(destToken)] - stor6[address(srcToken)] <= 18\n                              require 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18, 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                      log TradeExecute(\n                                            address origin=address(srcToken),\n                                            address src=srcAmount,\n                                            uint256 srcAmount=address(destToken),\n                                            address destToken=10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                                            uint256 destAmount=destAddress,\n                                            address destAddress=caller)\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18\n                                      require ext_call.success\n                                      require ext_call.return_data[0]\n                                      log TradeExecute(\n                                            address origin=srcToken,\n                                            address src=0,\n                                            uint256 srcAmount=address(destToken),\n                                            address destToken=10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                                            uint256 destAmount=destAddress,\n                                            address destAddress=caller)\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18\n                          else:\n                              require stor6[address(srcToken)] - stor6[address(destToken)] <= 18\n                              require 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)])\n                              require srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]) > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]), 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]) wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                      log TradeExecute(\n                                            address origin=address(srcToken),\n                                            address src=srcAmount,\n                                            uint256 srcAmount=address(destToken),\n                                            address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]),\n                                            uint256 destAmount=destAddress,\n                                            address destAddress=caller)\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)])\n                                      require ext_call.success\n                                      require ext_call.return_data[0]\n                                      log TradeExecute(\n                                            address origin=srcToken,\n                                            address src=0,\n                                            uint256 srcAmount=address(destToken),\n                                            address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]),\n                                            uint256 destAmount=destAddress,\n                                            address destAddress=caller)\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]) wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)])\n                      else:\n                          require ext_code.size(srcToken)\n                          call srcToken.decimals() with:\n                               gas gas_remaining - 710 wei\n                          require ext_call.success\n                          require srcAmount <= 10000000000 * 10^18\n                          require conversionRate <= 1000000 * 10^18\n                          if stor6[address(destToken)] >= ext_call.return_data[0]:\n                              require stor6[address(destToken)] - ext_call.return_data[0] <= 18\n                              require 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18 > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18, 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18 wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                      log TradeExecute(\n                                            address origin=srcToken,\n                                            address src=0,\n                                            uint256 srcAmount=address(destToken),\n                                            address destToken=10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18,\n                                            uint256 destAmount=destAddress,\n                                            address destAddress=caller)\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18\n                                      require ext_call.success\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                          else:\n                              require ext_call.return_data[0] - stor6[address(destToken)] <= 18\n                              require 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)])\n                              require srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]) > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]), 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]) wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                      log TradeExecute(\n                                            address origin=srcToken,\n                                            address src=0,\n                                            uint256 srcAmount=address(destToken),\n                                            address destToken=srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]),\n                                            uint256 destAmount=destAddress,\n                                            address destAddress=caller)\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)])\n                                      require ext_call.success\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                  else:\n                      require srcAmount <= 10000000000 * 10^18\n                      require conversionRate <= 1000000 * 10^18\n                      if stor6[address(destToken)] >= 18:\n                          require stor6[address(destToken)] - 18 <= 18\n                          require 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18 > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18, 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                                  log TradeExecute(\n                                        address origin=address(srcToken),\n                                        address src=srcAmount,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18,\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                                  return 1\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18,\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18\n                                  require ext_call.success\n                      else:\n                          require -stor6[address(destToken)] + 18 <= 18\n                          require 10^18 * 10^(-stor6[address(destToken)] + 18)\n                          require srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18) > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18), 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                                  log TradeExecute(\n                                        address origin=address(srcToken),\n                                        address src=srcAmount,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18),\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                                  return 1\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18)\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18),\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18),\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18)\n                                  require ext_call.success\n              else:\n                  require ext_code.size(destToken)\n                  call destToken.decimals() with:\n                       gas gas_remaining - 710 wei\n                  require ext_call.success\n                  if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                      if not stor6[address(srcToken)]:\n                          require ext_code.size(srcToken)\n                          call srcToken.decimals() with:\n                               gas gas_remaining - 710 wei\n                          require ext_call.success\n                          require srcAmount <= 10000000000 * 10^18\n                          require conversionRate <= 1000000 * 10^18\n                          if ext_call.return_data[0] < ext_call.return_data[0]:\n                              require srcAmount * conversionRate / 10^18 * 10^0 > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, srcAmount * conversionRate / 10^18, 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value srcAmount * conversionRate / 10^18 * 10^0 wei\n                                           gas 2300 * is_zero(value) wei\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                          else:\n                              require 10^0 * conversionRate * srcAmount / 10^18 > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, conversionRate * srcAmount / 10^18, 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value 10^0 * conversionRate * srcAmount / 10^18 wei\n                                           gas 2300 * is_zero(value) wei\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                      else:\n                          require srcAmount <= 10000000000 * 10^18\n                          require conversionRate <= 1000000 * 10^18\n                          if ext_call.return_data[0] >= stor6[address(srcToken)]:\n                              require ext_call.return_data[0] - stor6[address(srcToken)] <= 18\n                              require 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18, 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                      log TradeExecute(\n                                            address origin=srcToken,\n                                            address src=0,\n                                            uint256 srcAmount=address(destToken),\n                                            address destToken=10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                                            uint256 destAmount=destAddress,\n                                            address destAddress=caller)\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18\n                                      require ext_call.success\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                          else:\n                              require stor6[address(srcToken)] - ext_call.return_data[0] <= 18\n                              require 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0])\n                              require srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]) > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]), 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]) wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                      log TradeExecute(\n                                            address origin=srcToken,\n                                            address src=0,\n                                            uint256 srcAmount=address(destToken),\n                                            address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]),\n                                            uint256 destAmount=destAddress,\n                                            address destAddress=caller)\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0])\n                                      require ext_call.success\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                  else:\n                      require srcAmount <= 10000000000 * 10^18\n                      require conversionRate <= 1000000 * 10^18\n                      if ext_call.return_data[0] >= 18:\n                          require ext_call.return_data[0] - 18 <= 18\n                          require 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18 > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18, 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                      else:\n                          require -ext_call.return_data[0] + 18 <= 18\n                          require 10^18 * 10^(-ext_call.return_data[0] + 18)\n                          require srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18) > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18), 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18)\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18),\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18) wei\n                                       gas 2300 * is_zero(value) wei\n          else:\n              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                  require srcAmount <= 10000000000 * 10^18\n                  require conversionRate <= 1000000 * 10^18\n                  require conversionRate * srcAmount / 10^18 > 0\n                  require ext_code.size(conversionRatesContractAddress)\n                  if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                      call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                           gas gas_remaining - 710 wei\n                          args 0, 0, 0, 0, block.number\n                  else:\n                      call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                           gas gas_remaining - 710 wei\n                          args 0, 0, conversionRate * srcAmount / 10^18, 0, block.number\n                  require ext_call.success\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                          call destAddress with:\n                             value conversionRate * srcAmount / 10^18 wei\n                               gas 2300 * is_zero(value) wei\n                          require ext_call.success\n                          log TradeExecute(\n                                address origin=address(srcToken),\n                                address src=srcAmount,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                      else:\n                          require ext_code.size(destToken)\n                          call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args tokenWallet[address(destToken)], address(destAddress), conversionRate * srcAmount / 10^18\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                      return 1\n                  require ext_code.size(srcToken)\n                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                       gas gas_remaining - 710 wei\n                      args caller, tokenWallet[address(srcToken)], srcAmount\n                  require ext_call.success\n                  require ext_call.return_data[0]\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                      call destAddress with:\n                         value conversionRate * srcAmount / 10^18 wei\n                           gas 2300 * is_zero(value) wei\n                      require ext_call.success\n                  else:\n                      require ext_code.size(destToken)\n                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args tokenWallet[address(destToken)], address(destAddress), conversionRate * srcAmount / 10^18\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                  log TradeExecute(\n                        address origin=srcToken,\n                        address src=0,\n                        uint256 srcAmount=address(destToken),\n                        address destToken=conversionRate * srcAmount / 10^18,\n                        uint256 destAmount=destAddress,\n                        address destAddress=caller)\n              else:\n                  if stor6[address(srcToken)]:\n                      require srcAmount <= 10000000000 * 10^18\n                      require conversionRate <= 1000000 * 10^18\n                      if 18 >= stor6[address(srcToken)]:\n                          require -stor6[address(srcToken)] + 18 <= 18\n                          require 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18 > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18, 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                                  log TradeExecute(\n                                        address origin=address(srcToken),\n                                        address src=srcAmount,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18,\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                                  return 1\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18,\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18\n                                  require ext_call.success\n                      else:\n                          require stor6[address(srcToken)] - 18 <= 18\n                          require 10^18 * 10^(stor6[address(srcToken)] - 18)\n                          require srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18) > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18), 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                                  log TradeExecute(\n                                        address origin=address(srcToken),\n                                        address src=srcAmount,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18),\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                                  return 1\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18)\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18),\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18),\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18)\n                                  require ext_call.success\n                  else:\n                      require ext_code.size(srcToken)\n                      call srcToken.decimals() with:\n                           gas gas_remaining - 710 wei\n                      require ext_call.success\n                      require srcAmount <= 10000000000 * 10^18\n                      require conversionRate <= 1000000 * 10^18\n                      if 18 >= ext_call.return_data[0]:\n                          require -ext_call.return_data[0] + 18 <= 18\n                          require 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18 > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18, 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                      else:\n                          require ext_call.return_data[0] - 18 <= 18\n                          require 10^18 * 10^(ext_call.return_data[0] - 18)\n                          require srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18) > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18), 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18)\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18),\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18) wei\n                                       gas 2300 * is_zero(value) wei\n      else:\n          require not call.value\n          if destToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n              if stor6[address(destToken)]:\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                      require srcAmount <= 10000000000 * 10^18\n                      require conversionRate <= 1000000 * 10^18\n                      if stor6[address(destToken)] >= 18:\n                          require stor6[address(destToken)] - 18 <= 18\n                          require 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18 > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18, 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                                  log TradeExecute(\n                                        address origin=address(srcToken),\n                                        address src=srcAmount,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18,\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18,\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              return 1\n                          require ext_code.size(srcToken)\n                          call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args caller, tokenWallet[address(srcToken)], srcAmount\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18 wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=10^(stor6[address(destToken)] - 18) * conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                      else:\n                          require -stor6[address(destToken)] + 18 <= 18\n                          require 10^18 * 10^(-stor6[address(destToken)] + 18)\n                          require srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18) > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18), 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                                  log TradeExecute(\n                                        address origin=address(srcToken),\n                                        address src=srcAmount,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18),\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18)\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18),\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              return 1\n                          require ext_code.size(srcToken)\n                          call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args caller, tokenWallet[address(srcToken)], srcAmount\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18) wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18)\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=srcAmount * conversionRate / 10^18 * 10^(-stor6[address(destToken)] + 18),\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                  else:\n                      if stor6[address(srcToken)]:\n                          require srcAmount <= 10000000000 * 10^18\n                          require conversionRate <= 1000000 * 10^18\n                          if stor6[address(destToken)] >= stor6[address(srcToken)]:\n                              require stor6[address(destToken)] - stor6[address(srcToken)] <= 18\n                              require 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18, 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                      log TradeExecute(\n                                            address origin=address(srcToken),\n                                            address src=srcAmount,\n                                            uint256 srcAmount=address(destToken),\n                                            address destToken=10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                                            uint256 destAmount=destAddress,\n                                            address destAddress=caller)\n                                      return 1\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                      log TradeExecute(\n                                            address origin=srcToken,\n                                            address src=0,\n                                            uint256 srcAmount=address(destToken),\n                                            address destToken=10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                                            uint256 destAmount=destAddress,\n                                            address destAddress=caller)\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18\n                                      require ext_call.success\n                          else:\n                              require stor6[address(srcToken)] - stor6[address(destToken)] <= 18\n                              require 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)])\n                              require srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]) > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]), 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]) wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                      log TradeExecute(\n                                            address origin=address(srcToken),\n                                            address src=srcAmount,\n                                            uint256 srcAmount=address(destToken),\n                                            address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]),\n                                            uint256 destAmount=destAddress,\n                                            address destAddress=caller)\n                                      return 1\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)])\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]),\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]) wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                      log TradeExecute(\n                                            address origin=srcToken,\n                                            address src=0,\n                                            uint256 srcAmount=address(destToken),\n                                            address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)]),\n                                            uint256 destAmount=destAddress,\n                                            address destAddress=caller)\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - stor6[address(destToken)])\n                                      require ext_call.success\n                      else:\n                          require ext_code.size(srcToken)\n                          call srcToken.decimals() with:\n                               gas gas_remaining - 710 wei\n                          require ext_call.success\n                          require srcAmount <= 10000000000 * 10^18\n                          require conversionRate <= 1000000 * 10^18\n                          if stor6[address(destToken)] >= ext_call.return_data[0]:\n                              require stor6[address(destToken)] - ext_call.return_data[0] <= 18\n                              require 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18 > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18, 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18 wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18\n                                      require ext_call.success\n                                      require ext_call.return_data[0]\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18,\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value 10^(stor6[address(destToken)] - ext_call.return_data[0]) * conversionRate * srcAmount / 10^18 wei\n                                           gas 2300 * is_zero(value) wei\n                          else:\n                              require ext_call.return_data[0] - stor6[address(destToken)] <= 18\n                              require 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)])\n                              require srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]) > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]), 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]) wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)])\n                                      require ext_call.success\n                                      require ext_call.return_data[0]\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]),\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - stor6[address(destToken)]) wei\n                                           gas 2300 * is_zero(value) wei\n              else:\n                  require ext_code.size(destToken)\n                  call destToken.decimals() with:\n                       gas gas_remaining - 710 wei\n                  require ext_call.success\n                  if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                      if not stor6[address(srcToken)]:\n                          require ext_code.size(srcToken)\n                          call srcToken.decimals() with:\n                               gas gas_remaining - 710 wei\n                          require ext_call.success\n                          require srcAmount <= 10000000000 * 10^18\n                          require conversionRate <= 1000000 * 10^18\n                          if ext_call.return_data[0] < ext_call.return_data[0]:\n                              require srcAmount * conversionRate / 10^18 * 10^0 > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, srcAmount * conversionRate / 10^18, 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value srcAmount * conversionRate / 10^18 * 10^0 wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                          else:\n                              require 10^0 * conversionRate * srcAmount / 10^18 > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, conversionRate * srcAmount / 10^18, 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value 10^0 * conversionRate * srcAmount / 10^18 wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), conversionRate * srcAmount / 10^18\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                      else:\n                          require srcAmount <= 10000000000 * 10^18\n                          require conversionRate <= 1000000 * 10^18\n                          if ext_call.return_data[0] >= stor6[address(srcToken)]:\n                              require ext_call.return_data[0] - stor6[address(srcToken)] <= 18\n                              require 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18, 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18\n                                      require ext_call.success\n                                      require ext_call.return_data[0]\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18,\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value 10^(ext_call.return_data[0] - stor6[address(srcToken)]) * conversionRate * srcAmount / 10^18 wei\n                                           gas 2300 * is_zero(value) wei\n                          else:\n                              require stor6[address(srcToken)] - ext_call.return_data[0] <= 18\n                              require 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0])\n                              require srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]) > 0\n                              require ext_code.size(conversionRatesContractAddress)\n                              if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, 0, 0, block.number\n                              else:\n                                  call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                       gas gas_remaining - 710 wei\n                                      args 0, 0, srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]), 0, block.number\n                              require ext_call.success\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]) wei\n                                           gas 2300 * is_zero(value) wei\n                                      require ext_call.success\n                                  else:\n                                      require ext_code.size(destToken)\n                                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                           gas gas_remaining - 710 wei\n                                          args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0])\n                                      require ext_call.success\n                                      require ext_call.return_data[0]\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]),\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(srcToken)\n                                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args caller, tokenWallet[address(srcToken)], srcAmount\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                      call destAddress with:\n                                         value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - ext_call.return_data[0]) wei\n                                           gas 2300 * is_zero(value) wei\n                  else:\n                      require srcAmount <= 10000000000 * 10^18\n                      require conversionRate <= 1000000 * 10^18\n                      if ext_call.return_data[0] >= 18:\n                          require ext_call.return_data[0] - 18 <= 18\n                          require 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18 > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18, 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), 10^(ext_call.return_data[0] - 18) * conversionRate * srcAmount / 10^18\n                      else:\n                          require -ext_call.return_data[0] + 18 <= 18\n                          require 10^18 * 10^(-ext_call.return_data[0] + 18)\n                          require srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18) > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18), 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18)\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18),\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(-ext_call.return_data[0] + 18)\n          else:\n              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                  require srcAmount <= 10000000000 * 10^18\n                  require conversionRate <= 1000000 * 10^18\n                  require conversionRate * srcAmount / 10^18 > 0\n                  require ext_code.size(conversionRatesContractAddress)\n                  if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                      call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                           gas gas_remaining - 710 wei\n                          args 0, 0, 0, 0, block.number\n                  else:\n                      call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                           gas gas_remaining - 710 wei\n                          args 0, 0, conversionRate * srcAmount / 10^18, 0, block.number\n                  require ext_call.success\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                      if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                          call destAddress with:\n                             value conversionRate * srcAmount / 10^18 wei\n                               gas 2300 * is_zero(value) wei\n                          require ext_call.success\n                          log TradeExecute(\n                                address origin=address(srcToken),\n                                address src=srcAmount,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                      else:\n                          require ext_code.size(destToken)\n                          call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args tokenWallet[address(destToken)], address(destAddress), conversionRate * srcAmount / 10^18\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                      return 1\n                  require ext_code.size(srcToken)\n                  call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                       gas gas_remaining - 710 wei\n                      args caller, tokenWallet[address(srcToken)], srcAmount\n                  require ext_call.success\n                  require ext_call.return_data[0]\n                  if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                      call destAddress with:\n                         value conversionRate * srcAmount / 10^18 wei\n                           gas 2300 * is_zero(value) wei\n                      require ext_call.success\n                  else:\n                      require ext_code.size(destToken)\n                      call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                           gas gas_remaining - 710 wei\n                          args tokenWallet[address(destToken)], address(destAddress), conversionRate * srcAmount / 10^18\n                      require ext_call.success\n                      require ext_call.return_data[0]\n                  log TradeExecute(\n                        address origin=srcToken,\n                        address src=0,\n                        uint256 srcAmount=address(destToken),\n                        address destToken=conversionRate * srcAmount / 10^18,\n                        uint256 destAmount=destAddress,\n                        address destAddress=caller)\n              else:\n                  if stor6[address(srcToken)]:\n                      require srcAmount <= 10000000000 * 10^18\n                      require conversionRate <= 1000000 * 10^18\n                      if 18 >= stor6[address(srcToken)]:\n                          require -stor6[address(srcToken)] + 18 <= 18\n                          require 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18 > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18, 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                                  log TradeExecute(\n                                        address origin=address(srcToken),\n                                        address src=srcAmount,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18,\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18,\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              return 1\n                          require ext_code.size(srcToken)\n                          call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args caller, tokenWallet[address(srcToken)], srcAmount\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18 wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), 10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=10^(-stor6[address(srcToken)] + 18) * conversionRate * srcAmount / 10^18,\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                      else:\n                          require stor6[address(srcToken)] - 18 <= 18\n                          require 10^18 * 10^(stor6[address(srcToken)] - 18)\n                          require srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18) > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18), 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                                  log TradeExecute(\n                                        address origin=address(srcToken),\n                                        address src=srcAmount,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18),\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18)\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                                  log TradeExecute(\n                                        address origin=srcToken,\n                                        address src=0,\n                                        uint256 srcAmount=address(destToken),\n                                        address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18),\n                                        uint256 destAmount=destAddress,\n                                        address destAddress=caller)\n                              return 1\n                          require ext_code.size(srcToken)\n                          call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                               gas gas_remaining - 710 wei\n                              args caller, tokenWallet[address(srcToken)], srcAmount\n                          require ext_call.success\n                          require ext_call.return_data[0]\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                              call destAddress with:\n                                 value srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18) wei\n                                   gas 2300 * is_zero(value) wei\n                              require ext_call.success\n                          else:\n                              require ext_code.size(destToken)\n                              call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18)\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                          log TradeExecute(\n                                address origin=srcToken,\n                                address src=0,\n                                uint256 srcAmount=address(destToken),\n                                address destToken=srcAmount * conversionRate / 10^18 * 10^(stor6[address(srcToken)] - 18),\n                                uint256 destAmount=destAddress,\n                                address destAddress=caller)\n                  else:\n                      require ext_code.size(srcToken)\n                      call srcToken.decimals() with:\n                           gas gas_remaining - 710 wei\n                      require ext_call.success\n                      require srcAmount <= 10000000000 * 10^18\n                      require conversionRate <= 1000000 * 10^18\n                      if 18 >= ext_call.return_data[0]:\n                          require -ext_call.return_data[0] + 18 <= 18\n                          require 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18 > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18, 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18,\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18 wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), 10^(-ext_call.return_data[0] + 18) * conversionRate * srcAmount / 10^18\n                      else:\n                          require ext_call.return_data[0] - 18 <= 18\n                          require 10^18 * 10^(ext_call.return_data[0] - 18)\n                          require srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18) > 0\n                          require ext_code.size(conversionRatesContractAddress)\n                          if srcToken != 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, 0, 0, block.number\n                          else:\n                              call conversionRatesContractAddress.recordImbalance(address token, int256 buyAmount, uint256 rateUpdateBlock, uint256 currentBlock) with:\n                                   gas gas_remaining - 710 wei\n                                  args 0, 0, srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18), 0, block.number\n                          require ext_call.success\n                          if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == srcToken:\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18)\n                                  require ext_call.success\n                                  require ext_call.return_data[0]\n                              log TradeExecute(\n                                    address origin=srcToken,\n                                    address src=0,\n                                    uint256 srcAmount=address(destToken),\n                                    address destToken=srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18),\n                                    uint256 destAmount=destAddress,\n                                    address destAddress=caller)\n                          else:\n                              require ext_code.size(srcToken)\n                              call srcToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                   gas gas_remaining - 710 wei\n                                  args caller, tokenWallet[address(srcToken)], srcAmount\n                              require ext_call.success\n                              require ext_call.return_data[0]\n                              if 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee == destToken:\n                                  call destAddress with:\n                                     value srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18) wei\n                                       gas 2300 * is_zero(value) wei\n                                  require ext_call.success\n                              else:\n                                  require ext_code.size(destToken)\n                                  call destToken.transferFrom(address sender, address recipient, uint256 amount) with:\n                                       gas gas_remaining - 710 wei\n                                      args tokenWallet[address(destToken)], address(destAddress), srcAmount * conversionRate / 10^18 * 10^(ext_call.return_data[0] - 18)\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 60452 tokens. Please reduce the length of the messages."
}