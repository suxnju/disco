{
	"address": "0xe65f525ec48c7e95654b9824ecc358454ea9185e",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\nconst decimals = 18\nconst exitFee = 24\nconst totalEthereumBalance = eth.balance(this.address)\n\ndef storage:\n  owner is addr at storage 0\n  name is array of uint256 at storage 1\n  symbol is array of uint256 at storage 2\n  unknown92f8def2 is uint256 at storage 3\n  stakingRequirement is uint256 at storage 4\n  balanceOf is mapping of uint256 at storage 5\n  stor6 is mapping of uint256 at storage 6\n  stor7 is mapping of uint256 at storage 7\n  totalSupply is uint256 at storage 8\n  stor9 is uint256 at storage 9\n  stor10 is addr at storage 10\n\ndef name(): # not payable\n  return name[0 len name.length]\n\ndef totalSupply(): # not payable\n  return totalSupply\n\ndef stakingRequirement(): # not payable\n  return stakingRequirement\n\ndef balanceOf(address _owner): # not payable\n  return balanceOf[addr(_owner)]\n\ndef owner(): # not payable\n  return owner\n\ndef unknown92f8def2(): # not payable\n  return unknown92f8def2\n\ndef myTokens(): # not payable\n  return balanceOf[caller]\n\ndef symbol(): # not payable\n  return symbol[0 len symbol.length]\n\n#\n#  Regular functions\n#\n\ndef dividendsOf(address _customerAddress): # not payable\n  return (Mask(192, 64, (stor9 * balanceOf[addr(_customerAddress)]) - stor7[addr(_customerAddress)]) >> 64)\n\ndef myDividends(bool _includeReferralBonus): # not payable\n  if _includeReferralBonus:\n      return ((Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller])\n  return (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64)\n\ndef withdraw(): # not payable\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller] > 0\n  stor7[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller])\n  stor6[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller] wei\n       gas 2300 * is_zero(value) wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef transfer(address _to, uint256 _value): # not payable\n  require balanceOf[caller] > 0\n  require _value <= balanceOf[caller]\n  if (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller] > 0:\n      require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller] > 0\n      stor7[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller])\n      stor6[caller] = 0\n      call caller with:\n         value (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller] wei\n           gas 2300 * is_zero(value) wei\n      if not ext_call.success:\n          revert with ext_call.return_data[0 len return_data.size]\n      log onWithdraw(\n            address customerAddress=((Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]),\n            uint256 ethereumWithdrawn=caller)\n  require _value\n  require _value\n  require _value / _value == 1\n  require _value / 100 <= _value\n  require 10^10 * ((_value / 100) + 10^18)^2 + -(_value / 100) - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * _value / 100) + (10^10 * totalSupply + 10^18 / 10^18 * _value / 100)\n  require _value / 100 <= totalSupply\n  totalSupply -= _value / 100\n  require _value <= balanceOf[caller]\n  balanceOf[caller] -= _value\n  require balanceOf[addr(_to)] + _value - (_value / 100) >= balanceOf[addr(_to)]\n  balanceOf[addr(_to)] = balanceOf[addr(_to)] + _value - (_value / 100)\n  stor7[caller] += -1 * stor9 * _value\n  stor7[addr(_to)] = stor7[addr(_to)] + (_value * stor9) - (_value / 100 * stor9)\n  require totalSupply\n  require stor9 + ((25 * 10^6 * 3600 * _value / 100) + (10^10 * totalSupply + 10^18 / 10^18 * _value / 100) - (10^10 * ((_value / 100) + 10^18)^2 + -(_value / 100) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply) >= stor9\n  stor9 += (25 * 10^6 * 3600 * _value / 100) + (10^10 * totalSupply + 10^18 / 10^18 * _value / 100) - (10^10 * ((_value / 100) + 10^18)^2 + -(_value / 100) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply\n  log Transfer(\n        address from=(_value - (_value / 100)),\n        address to=caller,\n        uint256 tokens=_to)\n  return 1\n\ndef sellPrice(): # not payable\n  if not totalSupply:\n      return (25 * 10^6 * 3600)\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n      if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n          if 0 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n              return ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18)\n      else:\n          if (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n              if 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5:\n                  if 0 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      if 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                          return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) - (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100))\n  else:\n      if (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n          if 24 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 24:\n              if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                  if 24 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      if 0 <= ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) - (24 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100):\n                          return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) - (24 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100))\n              else:\n                  if (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      if 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5:\n                          if 24 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                              if 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 <= ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) - (24 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100):\n                                  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) - (24 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) - (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100))\n  revert\n\ndef buyPrice(): # not payable\n  if not totalSupply:\n      return 11 * 10^10\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n      if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n          if (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n              return ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18)\n      else:\n          if (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n              if 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5:\n                  if (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      if ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                          return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100))\n  else:\n      if (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n          if 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29:\n              if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                  if ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100))\n              else:\n                  if (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      if 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5:\n                          if ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                              if 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0:\n                                  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100))\n  revert\n\ndef calculateTokensReceived(uint256 _ethereumToSpend): # not payable\n  if not _ethereumToSpend:\n      if not _ethereumToSpend:\n          if 0 <= _ethereumToSpend:\n              s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n              t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n              while s < t:\n                  require s\n                  s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                  t = s\n                  continue \n              if 100000000000 * 10^18 <= t:\n                  return ((t - 100000000000 * 10^18 / 10^10) - totalSupply)\n      else:\n          if _ethereumToSpend:\n              if 5 * _ethereumToSpend / _ethereumToSpend == 5:\n                  if 0 <= _ethereumToSpend:\n                      if 5 * _ethereumToSpend / 100 <= _ethereumToSpend:\n                          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * 5 * _ethereumToSpend / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n                          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * 5 * _ethereumToSpend / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n                          while s < t:\n                              require s\n                              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * 5 * _ethereumToSpend / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                              t = s\n                              continue \n                          if 100000000000 * 10^18 <= t:\n                              return ((t - 100000000000 * 10^18 / 10^10) - totalSupply)\n  else:\n      if _ethereumToSpend:\n          if 29 * _ethereumToSpend / _ethereumToSpend == 29:\n              if not _ethereumToSpend:\n                  if 29 * _ethereumToSpend / 100 <= _ethereumToSpend:\n                      if 0 <= _ethereumToSpend - (29 * _ethereumToSpend / 100):\n                          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * 29 * _ethereumToSpend / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n                          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * 29 * _ethereumToSpend / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n                          while s < t:\n                              require s\n                              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * 29 * _ethereumToSpend / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                              t = s\n                              continue \n                          if 100000000000 * 10^18 <= t:\n                              return ((t - 100000000000 * 10^18 / 10^10) - totalSupply)\n              else:\n                  if _ethereumToSpend:\n                      if 5 * _ethereumToSpend / _ethereumToSpend == 5:\n                          if 29 * _ethereumToSpend / 100 <= _ethereumToSpend:\n                              if 5 * _ethereumToSpend / 100 <= _ethereumToSpend - (29 * _ethereumToSpend / 100):\n                                  s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * 29 * _ethereumToSpend / 100) + (-20000000000000000000000000000 * 10^18 * 5 * _ethereumToSpend / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n                                  t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * 29 * _ethereumToSpend / 100) + (-20000000000000000000000000000 * 10^18 * 5 * _ethereumToSpend / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n                                  while s < t:\n                                      require s\n                                      s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * 29 * _ethereumToSpend / 100) + (-20000000000000000000000000000 * 10^18 * 5 * _ethereumToSpend / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                                      t = s\n                                      continue \n                                  if 100000000000 * 10^18 <= t:\n                                      return ((t - 100000000000 * 10^18 / 10^10) - totalSupply)\n  revert\n\ndef calculateEthereumReceived(uint256 _tokensToSell): # not payable\n  require _tokensToSell <= totalSupply\n  require 10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell)\n  if not (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n      if not (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n          if 0 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n              return ((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18)\n      else:\n          if (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n              if 5 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 == 5:\n                  if 0 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n                      if 5 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n                          return (((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100))\n  else:\n      if (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n          if 24 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 == 24:\n              if not (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n                  if 24 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n                      if 0 <= ((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100):\n                          return (((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100))\n              else:\n                  if (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n                      if 5 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 == 5:\n                          if 24 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18:\n                              if 5 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100 <= ((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100):\n                                  return (((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 100))\n  revert\n\ndef buy(address _referredBy) payable: \n  if not call.value / 100:\n      call stor10 with:\n           gas 2300 wei\n      if not ext_call.success:\n          revert with ext_call.return_data[0 len return_data.size]\n      if not call.value / 100:\n          if not call.value:\n              if not call.value:\n                  if 0 <= call.value:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              else:\n                  if call.value:\n                      if 5 * call.value / call.value == 5:\n                          if 5 * call.value / 100 <= 0:\n                              if 0 <= call.value:\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          else:\n              if call.value:\n                  if 29 * call.value / call.value == 29:\n                      if not 29 * call.value / 100:\n                          if not call.value:\n                              if 0 <= 29 * call.value / 100:\n                                  if 29 * call.value / 100 <= call.value:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if call.value:\n                                  if 5 * call.value / call.value == 5:\n                                      if 0 <= 29 * call.value / 100:\n                                          if 5 * call.value / 100 <= 29 * call.value / 100:\n                                              if 29 * call.value / 100 <= call.value:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if 29 * call.value / 100:\n                              if 8 * 29 * call.value / 100 / 29 * call.value / 100 == 8:\n                                  if not call.value:\n                                      if 8 * 29 * call.value / 100 / 100 <= 29 * call.value / 100:\n                                          if 0 <= (29 * call.value / 100) - (8 * 29 * call.value / 100 / 100):\n                                              if 29 * call.value / 100 <= call.value:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  else:\n                                      if call.value:\n                                          if 5 * call.value / call.value == 5:\n                                              if 8 * 29 * call.value / 100 / 100 <= 29 * call.value / 100:\n                                                  if 5 * call.value / 100 <= (29 * call.value / 100) - (8 * 29 * call.value / 100 / 100):\n                                                      if 29 * call.value / 100 <= call.value:\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n      else:\n          if call.value / 100:\n              if 35 * call.value / 100 / call.value / 100 == 35:\n                  unknown92f8def2 += 35 * call.value / 100 / 10\n                  if not call.value:\n                      if not call.value:\n                          if 0 <= call.value:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if call.value:\n                              if 5 * call.value / call.value == 5:\n                                  if 5 * call.value / 100 <= 0:\n                                      if 0 <= call.value:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  else:\n                      if call.value:\n                          if 29 * call.value / call.value == 29:\n                              if not 29 * call.value / 100:\n                                  if not call.value:\n                                      if 0 <= 29 * call.value / 100:\n                                          if 29 * call.value / 100 <= call.value:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  else:\n                                      if call.value:\n                                          if 5 * call.value / call.value == 5:\n                                              if 0 <= 29 * call.value / 100:\n                                                  if 5 * call.value / 100 <= 29 * call.value / 100:\n                                                      if 29 * call.value / 100 <= call.value:\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              else:\n                                  if 29 * call.value / 100:\n                                      if 8 * 29 * call.value / 100 / 29 * call.value / 100 == 8:\n                                          if not call.value:\n                                              if 8 * 29 * call.value / 100 / 100 <= 29 * call.value / 100:\n                                                  if 0 <= (29 * call.value / 100) - (8 * 29 * call.value / 100 / 100):\n                                                      if 29 * call.value / 100 <= call.value:\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          else:\n                                              if call.value:\n                                                  if 5 * call.value / call.value == 5:\n                                                      if 8 * 29 * call.value / 100 / 100 <= 29 * call.value / 100:\n                                                          if 5 * call.value / 100 <= (29 * call.value / 100) - (8 * 29 * call.value / 100 / 100):\n                                                              if 29 * call.value / 100 <= call.value:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  else:\n      if call.value / 100:\n          if 15 * call.value / 100 / call.value / 100 == 15:\n              call stor10 with:\n                 value 15 * call.value / 100 / 10 wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              if not call.value / 100:\n                  if not call.value:\n                      if not call.value:\n                          if 0 <= call.value:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if call.value:\n                              if 5 * call.value / call.value == 5:\n                                  if 5 * call.value / 100 <= 0:\n                                      if 0 <= call.value:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  else:\n                      if call.value:\n                          if 29 * call.value / call.value == 29:\n                              if not 29 * call.value / 100:\n                                  if not call.value:\n                                      if 0 <= 29 * call.value / 100:\n                                          if 29 * call.value / 100 <= call.value:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  else:\n                                      if call.value:\n                                          if 5 * call.value / call.value == 5:\n                                              if 0 <= 29 * call.value / 100:\n                                                  if 5 * call.value / 100 <= 29 * call.value / 100:\n                                                      if 29 * call.value / 100 <= call.value:\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              else:\n                                  if 29 * call.value / 100:\n                                      if 8 * 29 * call.value / 100 / 29 * call.value / 100 == 8:\n                                          if not call.value:\n                                              if 8 * 29 * call.value / 100 / 100 <= 29 * call.value / 100:\n                                                  if 0 <= (29 * call.value / 100) - (8 * 29 * call.value / 100 / 100):\n                                                      if 29 * call.value / 100 <= call.value:\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          else:\n                                              if call.value:\n                                                  if 5 * call.value / call.value == 5:\n                                                      if 8 * 29 * call.value / 100 / 100 <= 29 * call.value / 100:\n                                                          if 5 * call.value / 100 <= (29 * call.value / 100) - (8 * 29 * call.value / 100 / 100):\n                                                              if 29 * call.value / 100 <= call.value:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              else:\n                  if call.value / 100:\n                      if 35 * call.value / 100 / call.value / 100 == 35:\n                          unknown92f8def2 += 35 * call.value / 100 / 10\n                          if not call.value:\n                              if not call.value:\n                                  if 0 <= call.value:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              else:\n                                  if call.value:\n                                      if 5 * call.value / call.value == 5:\n                                          if 5 * call.value / 100 <= 0:\n                                              if 0 <= call.value:\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if call.value:\n                                  if 29 * call.value / call.value == 29:\n                                      if not 29 * call.value / 100:\n                                          if not call.value:\n                                              if 0 <= 29 * call.value / 100:\n                                                  if 29 * call.value / 100 <= call.value:\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          else:\n                                              if call.value:\n                                                  if 5 * call.value / call.value == 5:\n                                                      if 0 <= 29 * call.value / 100:\n                                                          if 5 * call.value / 100 <= 29 * call.value / 100:\n                                                              if 29 * call.value / 100 <= call.value:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      else:\n                                          if 29 * call.value / 100:\n                                              if 8 * 29 * call.value / 100 / 29 * call.value / 100 == 8:\n                                                  if not call.value:\n                                                      if 8 * 29 * call.value / 100 / 100 <= 29 * call.value / 100:\n                                                          if 0 <= (29 * call.value / 100) - (8 * 29 * call.value / 100 / 100):\n                                                              if 29 * call.value / 100 <= call.value:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  else:\n                                                      if call.value:\n                                                          if 5 * call.value / call.value == 5:\n                                                              if 8 * 29 * call.value / 100 / 100 <= 29 * call.value / 100:\n                                                                  if 5 * call.value / 100 <= (29 * call.value / 100) - (8 * 29 * call.value / 100 / 100):\n                                                                      if 29 * call.value / 100 <= call.value:\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  revert\n\ndef unknown56d5938f() payable: \n  if not call.value:\n      require 0 <= call.value\n      s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n      require 100000000000 * 10^18 <= t\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply >= 0\n      require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      if totalSupply <= 0:\n          totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9)\n      else:\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          totalSupply = t - 100000000000 * 10^18 / 10^10\n          require totalSupply\n          stor9 += 0 / totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * 0 / totalSupply) + (totalSupply * 0 / totalSupply)\n  else:\n      require call.value\n      require 100 * call.value / call.value == 100\n      if not 100 * call.value / 100:\n          require 0 <= 100 * call.value / 100\n          require 100 * call.value / 100 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 100 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 100 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 100 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n          require 100000000000 * 10^18 <= t\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply >= 0\n          require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          require 100 * call.value / 100 >= 100 * call.value / 100\n      else:\n          require 100 * call.value / 100\n          require 8 * 100 * call.value / 100 / 100 * call.value / 100 == 8\n          require 8 * 100 * call.value / 100 / 100 <= 100 * call.value / 100\n          require 100 * call.value / 100 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 100 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 100 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 100 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n          require 100000000000 * 10^18 <= t\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply >= 0\n          require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          require 100 * call.value / 100 >= (100 * call.value / 100) - (8 * 100 * call.value / 100 / 100)\n      if totalSupply <= 0:\n          totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (100 * call.value / 100 << 64)\n      else:\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          totalSupply = t - 100000000000 * 10^18 / 10^10\n          require totalSupply\n          stor9 += 100 * call.value / 100 << 64 / totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * 100 * call.value / 100 << 64 / totalSupply) + (totalSupply * 100 * call.value / 100 << 64 / totalSupply)\n  if not totalSupply:\n      log onTokenPurchase(\n            address customerAddress=call.value,\n            uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n            uint256 tokensMinted=block.timestamp,\n            address referredBy=11 * 10^10,\n            uint256 timestamp=caller,\n            uint256 price=0)\n  else:\n      require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n      if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n          if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n              require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              log onTokenPurchase(\n                    address customerAddress=call.value,\n                    uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                    uint256 tokensMinted=block.timestamp,\n                    address referredBy=(10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18,\n                    uint256 timestamp=caller,\n                    uint256 price=0)\n          else:\n              require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n              require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              log onTokenPurchase(\n                    address customerAddress=call.value,\n                    uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                    uint256 tokensMinted=block.timestamp,\n                    address referredBy=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                    uint256 timestamp=caller,\n                    uint256 price=0)\n      else:\n          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n          require 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29\n          if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n              require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              log onTokenPurchase(\n                    address customerAddress=call.value,\n                    uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                    uint256 tokensMinted=block.timestamp,\n                    address referredBy=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                    uint256 timestamp=caller,\n                    uint256 price=0)\n          else:\n              require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n              require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0\n              log onTokenPurchase(\n                    address customerAddress=call.value,\n                    uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                    uint256 tokensMinted=block.timestamp,\n                    address referredBy=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                    uint256 timestamp=caller,\n                    uint256 price=0)\n  return 0\n\ndef _fallback() payable: # default function\n  if not call.value / 100:\n      call stor10 with:\n           gas 2300 wei\n  else:\n      require call.value / 100\n      require 15 * call.value / 100 / call.value / 100 == 15\n      call stor10 with:\n         value 15 * call.value / 100 / 10 wei\n           gas 2300 * is_zero(value) wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  if call.value / 100:\n      require call.value / 100\n      require 35 * call.value / 100 / call.value / 100 == 35\n      unknown92f8def2 += 35 * call.value / 100 / 10\n  if not call.value:\n      if not call.value:\n          require 0 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n          require 100000000000 * 10^18 <= t\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n          require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require t - 100000000000 * 10^18 / 10^10 > totalSupply\n          if totalSupply <= 0:\n              totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9)\n              if totalSupply:\n                  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              log onTokenPurchase(\n                    address customerAddress=call.value,\n                    uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                    uint256 tokensMinted=block.timestamp,\n                    address referredBy=11 * 10^10,\n                    uint256 timestamp=caller,\n                    uint256 price=0)\n              stop\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          totalSupply = t - 100000000000 * 10^18 / 10^10\n          require totalSupply\n          stor9 += 0 / totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * 0 / totalSupply) + (totalSupply * 0 / totalSupply)\n      else:\n          require call.value\n          require 5 * call.value / call.value == 5\n          require 5 * call.value / 100 <= 0\n          require 0 <= call.value\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n          require 100000000000 * 10^18 <= t\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n          require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require t - 100000000000 * 10^18 / 10^10 > totalSupply\n          require -5 * call.value / 100 >= -5 * call.value / 100\n          if totalSupply <= 0:\n              totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) + (5 * call.value / 100 << 64)\n              if totalSupply:\n                  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              log onTokenPurchase(\n                    address customerAddress=call.value,\n                    uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                    uint256 tokensMinted=block.timestamp,\n                    address referredBy=11 * 10^10,\n                    uint256 timestamp=caller,\n                    uint256 price=0)\n              stop\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          totalSupply = t - 100000000000 * 10^18 / 10^10\n          require totalSupply\n          stor9 += -5 * call.value / 100 << 64 / totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * -5 * call.value / 100 << 64 / totalSupply) + (totalSupply * -5 * call.value / 100 << 64 / totalSupply)\n  else:\n      require call.value\n      require 29 * call.value / call.value == 29\n      if not 29 * call.value / 100:\n          if not call.value:\n              require 0 <= 29 * call.value / 100\n              require 29 * call.value / 100 <= call.value\n              s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 29 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n              t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 29 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n              while s < t:\n                  require s\n                  s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 29 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                  t = s\n                  continue \n              require 100000000000 * 10^18 <= t\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n              require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require t - 100000000000 * 10^18 / 10^10 > totalSupply\n              require 29 * call.value / 100 >= 29 * call.value / 100\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (29 * call.value / 100 << 64)\n                  if totalSupply:\n                      require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  log onTokenPurchase(\n                        address customerAddress=call.value,\n                        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                        uint256 tokensMinted=block.timestamp,\n                        address referredBy=11 * 10^10,\n                        uint256 timestamp=caller,\n                        uint256 price=0)\n                  stop\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              stor9 += 29 * call.value / 100 << 64 / totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * 29 * call.value / 100 << 64 / totalSupply) + (totalSupply * 29 * call.value / 100 << 64 / totalSupply)\n          else:\n              require call.value\n              require 5 * call.value / call.value == 5\n              require 0 <= 29 * call.value / 100\n              require 5 * call.value / 100 <= 29 * call.value / 100\n              require 29 * call.value / 100 <= call.value\n              s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 29 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n              t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 29 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n              while s < t:\n                  require s\n                  s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 29 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                  t = s\n                  continue \n              require 100000000000 * 10^18 <= t\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n              require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require t - 100000000000 * 10^18 / 10^10 > totalSupply\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((29 * call.value / 100) - (5 * call.value / 100) << 64)\n                  if totalSupply:\n                      require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  log onTokenPurchase(\n                        address customerAddress=call.value,\n                        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                        uint256 tokensMinted=block.timestamp,\n                        address referredBy=11 * 10^10,\n                        uint256 timestamp=caller,\n                        uint256 price=0)\n                  stop\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              stor9 += (29 * call.value / 100) - (5 * call.value / 100) << 64 / totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (29 * call.value / 100) - (5 * call.value / 100) << 64 / totalSupply) + (totalSupply * (29 * call.value / 100) - (5 * call.value / 100) << 64 / totalSupply)\n      else:\n          require 29 * call.value / 100\n          require 8 * 29 * call.value / 100 / 29 * call.value / 100 == 8\n          if not call.value:\n              require 8 * 29 * call.value / 100 / 100 <= 29 * call.value / 100\n              require 0 <= (29 * call.value / 100) - (8 * 29 * call.value / 100 / 100)\n              require 29 * call.value / 100 <= call.value\n              s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 29 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n              t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 29 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n              while s < t:\n                  require s\n                  s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 29 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                  t = s\n                  continue \n              require 100000000000 * 10^18 <= t\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n              require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require t - 100000000000 * 10^18 / 10^10 > totalSupply\n              require 29 * call.value / 100 >= (29 * call.value / 100) - (8 * 29 * call.value / 100 / 100)\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (29 * call.value / 100 << 64)\n                  if totalSupply:\n                      require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  log onTokenPurchase(\n                        address customerAddress=call.value,\n                        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                        uint256 tokensMinted=block.timestamp,\n                        address referredBy=11 * 10^10,\n                        uint256 timestamp=caller,\n                        uint256 price=0)\n                  stop\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              stor9 += 29 * call.value / 100 << 64 / totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * 29 * call.value / 100 << 64 / totalSupply) + (totalSupply * 29 * call.value / 100 << 64 / totalSupply)\n          else:\n              require call.value\n              require 5 * call.value / call.value == 5\n              require 8 * 29 * call.value / 100 / 100 <= 29 * call.value / 100\n              require 5 * call.value / 100 <= (29 * call.value / 100) - (8 * 29 * call.value / 100 / 100)\n              require 29 * call.value / 100 <= call.value\n              s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 29 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n              t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 29 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n              while s < t:\n                  require s\n                  s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * 29 * call.value / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                  t = s\n                  continue \n              require 100000000000 * 10^18 <= t\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n              require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require t - 100000000000 * 10^18 / 10^10 > totalSupply\n              require 0 >= -8 * 29 * call.value / 100 / 100\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((29 * call.value / 100) - (5 * call.value / 100) << 64)\n                  if totalSupply:\n                      require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  log onTokenPurchase(\n                        address customerAddress=call.value,\n                        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                        uint256 tokensMinted=block.timestamp,\n                        address referredBy=11 * 10^10,\n                        uint256 timestamp=caller,\n                        uint256 price=0)\n                  stop\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              stor9 += (29 * call.value / 100) - (5 * call.value / 100) << 64 / totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (29 * call.value / 100) - (5 * call.value / 100) << 64 / totalSupply) + (totalSupply * (29 * call.value / 100) - (5 * call.value / 100) << 64 / totalSupply)\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef IDD(): # not payable\n  require caller == owner\n  require unknown92f8def2 <= eth.balance(this.address)\n  if not eth.balance(this.address) - unknown92f8def2:\n      s = (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n      require 100000000000 * 10^18 <= t\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply >= 0\n      require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      if totalSupply <= 0:\n          totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9)\n      else:\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          totalSupply = t - 100000000000 * 10^18 / 10^10\n          require totalSupply\n          stor9 += 0 / totalSupply\n          require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n          balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * 0 / totalSupply) + (totalSupply * 0 / totalSupply)\n      if not totalSupply:\n          log onTokenPurchase(\n                address customerAddress=0,\n                uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                uint256 tokensMinted=block.timestamp,\n                address referredBy=11 * 10^10,\n                uint256 timestamp=caller,\n                uint256 price=0)\n      else:\n          require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n          if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n              if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  log onTokenPurchase(\n                        address customerAddress=0,\n                        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                        uint256 tokensMinted=block.timestamp,\n                        address referredBy=(10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18,\n                        uint256 timestamp=caller,\n                        uint256 price=0)\n              else:\n                  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  log onTokenPurchase(\n                        address customerAddress=0,\n                        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                        uint256 tokensMinted=block.timestamp,\n                        address referredBy=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                        uint256 timestamp=caller,\n                        uint256 price=0)\n          else:\n              require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              require 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29\n              if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                  require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  log onTokenPurchase(\n                        address customerAddress=0,\n                        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                        uint256 tokensMinted=block.timestamp,\n                        address referredBy=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                        uint256 timestamp=caller,\n                        uint256 price=0)\n              else:\n                  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                  require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0\n                  log onTokenPurchase(\n                        address customerAddress=0,\n                        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                        uint256 tokensMinted=block.timestamp,\n                        address referredBy=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                        uint256 timestamp=caller,\n                        uint256 price=0)\n  else:\n      require eth.balance(this.address) - unknown92f8def2\n      require eth.balance(this.address) - unknown92f8def2 / eth.balance(this.address) - unknown92f8def2 == 1\n      unknown92f8def2 -= eth.balance(this.address) - unknown92f8def2 / 100 / 10\n      if not eth.balance(this.address) - unknown92f8def2 / 100 / 10:\n          require 0 <= eth.balance(this.address) - unknown92f8def2 / 100 / 10\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * eth.balance(this.address) - unknown92f8def2 / 100 / 10) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * eth.balance(this.address) - unknown92f8def2 / 100 / 10) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * eth.balance(this.address) - unknown92f8def2 / 100 / 10) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n          require 100000000000 * 10^18 <= t\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply >= 0\n          require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          if totalSupply <= 0:\n              totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9)\n          else:\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              stor9 += 0 / totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * 0 / totalSupply) + (totalSupply * 0 / totalSupply)\n      else:\n          require eth.balance(this.address) - unknown92f8def2 / 100 / 10\n          require 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / eth.balance(this.address) - unknown92f8def2 / 100 / 10 == 100\n          if not 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100:\n              require 0 <= 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100\n              require 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100 <= eth.balance(this.address) - unknown92f8def2 / 100 / 10\n              s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * eth.balance(this.address) - unknown92f8def2 / 100 / 10) + (-20000000000000000000000000000 * 10^18 * 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n              t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * eth.balance(this.address) - unknown92f8def2 / 100 / 10) + (-20000000000000000000000000000 * 10^18 * 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n              while s < t:\n                  require s\n                  s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * eth.balance(this.address) - unknown92f8def2 / 100 / 10) + (-20000000000000000000000000000 * 10^18 * 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                  t = s\n                  continue \n              require 100000000000 * 10^18 <= t\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply >= 0\n              require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              require 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100 >= 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100\n          else:\n              require 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100\n              require 8 * 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100 / 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100 == 8\n              require 8 * 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100 / 100 <= 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100\n              require 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100 <= eth.balance(this.address) - unknown92f8def2 / 100 / 10\n              s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * eth.balance(this.address) - unknown92f8def2 / 100 / 10) + (-20000000000000000000000000000 * 10^18 * 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n              t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * eth.balance(this.address) - unknown92f8def2 / 100 / 10) + (-20000000000000000000000000000 * 10^18 * 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n              while s < t:\n                  require s\n                  s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * eth.balance(this.address) - unknown92f8def2 / 100 / 10) + (-20000000000000000000000000000 * 10^18 * 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                  t = s\n                  continue \n              require 100000000000 * 10^18 <= t\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply >= 0\n              require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              require 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100 >= (100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100) - (8 * 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100 / 100)\n          if totalSupply <= 0:\n              totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100 << 64)\n          else:\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              stor9 += 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100 << 64 / totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100 << 64 / totalSupply) + (totalSupply * 100 * eth.balance(this.address) - unknown92f8def2 / 100 / 10 / 100 << 64 / totalSupply)\n      if not totalSupply:\n          log onTokenPurchase(\n                address customerAddress=eth.balance(this.address) - unknown92f8def2 / 100 / 10,\n                uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                uint256 tokensMinted=block.timestamp,\n                address referredBy=11 * 10^10,\n                uint256 timestamp=caller,\n                uint256 price=0)\n      else:\n          require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n          if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n              if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  log onTokenPurchase(\n                        address customerAddress=eth.balance(this.address) - unknown92f8def2 / 100 / 10,\n                        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                        uint256 tokensMinted=block.timestamp,\n                        address referredBy=(10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18,\n                        uint256 timestamp=caller,\n                        uint256 price=0)\n              else:\n                  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  log onTokenPurchase(\n                        address customerAddress=eth.balance(this.address) - unknown92f8def2 / 100 / 10,\n                        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                        uint256 tokensMinted=block.timestamp,\n                        address referredBy=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                        uint256 timestamp=caller,\n                        uint256 price=0)\n          else:\n              require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              require 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29\n              if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                  require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  log onTokenPurchase(\n                        address customerAddress=eth.balance(this.address) - unknown92f8def2 / 100 / 10,\n                        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                        uint256 tokensMinted=block.timestamp,\n                        address referredBy=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                        uint256 timestamp=caller,\n                        uint256 price=0)\n              else:\n                  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                  require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0\n                  log onTokenPurchase(\n                        address customerAddress=eth.balance(this.address) - unknown92f8def2 / 100 / 10,\n                        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                        uint256 tokensMinted=block.timestamp,\n                        address referredBy=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                        uint256 timestamp=caller,\n                        uint256 price=0)\n\ndef reinvest(): # not payable\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller] > 0\n  stor7[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller])\n  stor6[caller] = 0\n  if not (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]:\n      if not (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]:\n          require 0 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n          require 100000000000 * 10^18 <= t\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n          require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require t - 100000000000 * 10^18 / 10^10 > totalSupply\n          if totalSupply <= 0:\n              totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9)\n          else:\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              stor9 += 0 / totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * 0 / totalSupply) + (totalSupply * 0 / totalSupply)\n      else:\n          require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]\n          require (5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller] == 5\n          require (5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100 <= 0\n          require 0 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]\n          s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n          require 100000000000 * 10^18 <= t\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n          require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require t - 100000000000 * 10^18 / 10^10 > totalSupply\n          require -(5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100 >= -(5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100\n          if totalSupply <= 0:\n              totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) + ((5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100 << 64)\n          else:\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              stor9 += -(5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100 << 64 / totalSupply\n              require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n              balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * -(5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100 << 64 / totalSupply) + (totalSupply * -(5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100 << 64 / totalSupply)\n  else:\n      require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]\n      require (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller] == 29\n      if not (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100:\n          if not (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]:\n              require 0 <= (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100\n              require (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]\n              s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (-20000000000000000000000000000 * 10^18 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n              t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (-20000000000000000000000000000 * 10^18 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n              while s < t:\n                  require s\n                  s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (-20000000000000000000000000000 * 10^18 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                  t = s\n                  continue \n              require 100000000000 * 10^18 <= t\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n              require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require t - 100000000000 * 10^18 / 10^10 > totalSupply\n              require (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 >= (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  stor9 += (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 << 64 / totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 << 64 / totalSupply) + (totalSupply * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 << 64 / totalSupply)\n          else:\n              require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]\n              require (5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller] == 5\n              require 0 <= (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100\n              require (5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100 <= (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100\n              require (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]\n              s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (-20000000000000000000000000000 * 10^18 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n              t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (-20000000000000000000000000000 * 10^18 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n              while s < t:\n                  require s\n                  s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (-20000000000000000000000000000 * 10^18 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                  t = s\n                  continue \n              require 100000000000 * 10^18 <= t\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n              require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require t - 100000000000 * 10^18 / 10^10 > totalSupply\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) - ((5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100) << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  stor9 += ((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) - ((5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100) << 64 / totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * ((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) - ((5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100) << 64 / totalSupply) + (totalSupply * ((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) - ((5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100) << 64 / totalSupply)\n      else:\n          require (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100\n          require 8 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 / (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 == 8\n          if not (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]:\n              require 8 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 / 100 <= (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100\n              require 0 <= ((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) - (8 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 / 100)\n              require (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]\n              s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (-20000000000000000000000000000 * 10^18 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n              t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (-20000000000000000000000000000 * 10^18 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n              while s < t:\n                  require s\n                  s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (-20000000000000000000000000000 * 10^18 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                  t = s\n                  continue \n              require 100000000000 * 10^18 <= t\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n              require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require t - 100000000000 * 10^18 / 10^10 > totalSupply\n              require (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 >= ((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) - (8 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 / 100)\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  stor9 += (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 << 64 / totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 << 64 / totalSupply) + (totalSupply * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 << 64 / totalSupply)\n          else:\n              require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]\n              require (5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller] == 5\n              require 8 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 / 100 <= (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100\n              require (5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100 <= ((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) - (8 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 / 100)\n              require (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 <= (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]\n              s = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (-20000000000000000000000000000 * 10^18 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n              t = (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (-20000000000000000000000000000 * 10^18 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n              while s < t:\n                  require s\n                  s = ((0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor6[caller]) + (-20000000000000000000000000000 * 10^18 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) + (100 * 10^18 * totalSupply^2) + (2000000000000000000000 * 10^18 * totalSupply) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n                  t = s\n                  continue \n              require 100000000000 * 10^18 <= t\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n              require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require t - 100000000000 * 10^18 / 10^10 > totalSupply\n              require 0 >= -8 * (29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100 / 100\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) - ((5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100) << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  stor9 += ((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) - ((5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100) << 64 / totalSupply\n                  require balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply >= balanceOf[caller]\n                  balanceOf[caller] = balanceOf[caller] + (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  stor7[caller] = stor7[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * ((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) - ((5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100) << 64 / totalSupply) + (totalSupply * ((29 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (29 * stor6[caller]) / 100) - ((5 * Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + (5 * stor6[caller]) / 100) << 64 / totalSupply)\n  if not totalSupply:\n      log onTokenPurchase(\n            address customerAddress=(Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller],\n            uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n            uint256 tokensMinted=block.timestamp,\n            address referredBy=11 * 10^10,\n            uint256 timestamp=caller,\n            uint256 price=0)\n  else:\n      require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n      if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n          if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n              require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              log onTokenPurchase(\n                    address customerAddress=(Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller],\n                    uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                    uint256 tokensMinted=block.timestamp,\n                    address referredBy=(10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18,\n                    uint256 timestamp=caller,\n                    uint256 price=0)\n          else:\n              require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n              require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              log onTokenPurchase(\n                    address customerAddress=(Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller],\n                    uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                    uint256 tokensMinted=block.timestamp,\n                    address referredBy=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                    uint256 timestamp=caller,\n                    uint256 price=0)\n      else:\n          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n          require 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29\n          if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n              require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              log onTokenPurchase(\n                    address customerAddress=(Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller],\n                    uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                    uint256 tokensMinted=block.timestamp,\n                    address referredBy=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                    uint256 timestamp=caller,\n                    uint256 price=0)\n          else:\n              require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n              require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n              require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0\n              log onTokenPurchase(\n                    address customerAddress=(Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller],\n                    uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n                    uint256 tokensMinted=block.timestamp,\n                    address referredBy=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                    uint256 timestamp=caller,\n                    uint256 price=0)\n  log onReinvestment(\n        address customerAddress=(Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller],\n        uint256 ethereumReinvested=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller)\n\ndef sell(uint256 _amount): # not payable\n  require balanceOf[caller] > 0\n  require _amount <= balanceOf[caller]\n  require 10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount)\n  if not (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n      if not (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n          require 0 <= (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n          if not (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n              if (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n                  require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n                  require 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 35\n                  unknown92f8def2 += 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n              require _amount <= totalSupply\n              totalSupply -= _amount\n              require _amount <= balanceOf[caller]\n              balanceOf[caller] -= _amount\n              call stor10 with:\n                   gas 2300 wei\n          else:\n              require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n              require 15 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 15\n              if (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n                  require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n                  require 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 35\n                  unknown92f8def2 += 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n              require _amount <= totalSupply\n              totalSupply -= _amount\n              require _amount <= balanceOf[caller]\n              balanceOf[caller] -= _amount\n              call stor10 with:\n                 value 15 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 / 10 wei\n                   gas 2300 * is_zero(value) wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          stor7[caller] = stor7[caller] - (stor9 * _amount) - ((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 << 64)\n          if totalSupply > 0:\n              require totalSupply\n              require stor9 + (0 / totalSupply) >= stor9\n              stor9 += 0 / totalSupply\n          if not totalSupply:\n              log onTokenSell(\n                    address customerAddress=_amount,\n                    uint256 tokensBurned=(25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18,\n                    uint256 ethereumEarned=block.timestamp,\n                    uint256 timestamp=11 * 10^10,\n                    uint256 price=caller)\n          else:\n              require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n              if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=(25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18,\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=(10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18,\n                            uint256 price=caller)\n                  else:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=(25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18,\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                            uint256 price=caller)\n              else:\n                  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  require 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29\n                  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=(25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18,\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                            uint256 price=caller)\n                  else:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                      require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=(25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18,\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                            uint256 price=caller)\n      else:\n          require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n          require 5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 5\n          require 0 <= (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n          require 5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 <= (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n          if not (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n              if (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n                  require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n                  require 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 35\n                  unknown92f8def2 += 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n              require _amount <= totalSupply\n              totalSupply -= _amount\n              require _amount <= balanceOf[caller]\n              balanceOf[caller] -= _amount\n              call stor10 with:\n                   gas 2300 wei\n          else:\n              require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n              require 15 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 15\n              if (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n                  require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n                  require 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 35\n                  unknown92f8def2 += 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n              require _amount <= totalSupply\n              totalSupply -= _amount\n              require _amount <= balanceOf[caller]\n              balanceOf[caller] -= _amount\n              call stor10 with:\n                 value 15 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 / 10 wei\n                   gas 2300 * is_zero(value) wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          stor7[caller] = stor7[caller] - (stor9 * _amount) - (((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100) << 64)\n          if totalSupply > 0:\n              require totalSupply\n              require stor9 + (0 / totalSupply) >= stor9\n              stor9 += 0 / totalSupply\n          if not totalSupply:\n              log onTokenSell(\n                    address customerAddress=_amount,\n                    uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                    uint256 ethereumEarned=block.timestamp,\n                    uint256 timestamp=11 * 10^10,\n                    uint256 price=caller)\n          else:\n              require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n              if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=(10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18,\n                            uint256 price=caller)\n                  else:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                            uint256 price=caller)\n              else:\n                  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  require 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29\n                  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                            uint256 price=caller)\n                  else:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                      require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                            uint256 price=caller)\n  else:\n      require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n      require 24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 24\n      if not (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n          require 24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 <= (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n          require 0 <= ((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100)\n          if not (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n              if (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n                  require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n                  require 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 35\n                  unknown92f8def2 += 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n              require _amount <= totalSupply\n              totalSupply -= _amount\n              require _amount <= balanceOf[caller]\n              balanceOf[caller] -= _amount\n              call stor10 with:\n                   gas 2300 wei\n          else:\n              require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n              require 15 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 15\n              if (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n                  require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n                  require 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 35\n                  unknown92f8def2 += 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n              require _amount <= totalSupply\n              totalSupply -= _amount\n              require _amount <= balanceOf[caller]\n              balanceOf[caller] -= _amount\n              call stor10 with:\n                 value 15 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 / 10 wei\n                   gas 2300 * is_zero(value) wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          stor7[caller] = stor7[caller] - (stor9 * _amount) - (((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100) << 64)\n          if totalSupply > 0:\n              require totalSupply\n              require stor9 + (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply) >= stor9\n              stor9 += 24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply\n          if not totalSupply:\n              log onTokenSell(\n                    address customerAddress=_amount,\n                    uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                    uint256 ethereumEarned=block.timestamp,\n                    uint256 timestamp=11 * 10^10,\n                    uint256 price=caller)\n          else:\n              require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n              if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=(10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18,\n                            uint256 price=caller)\n                  else:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                            uint256 price=caller)\n              else:\n                  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  require 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29\n                  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                            uint256 price=caller)\n                  else:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                      require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                            uint256 price=caller)\n      else:\n          require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n          require 5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 5\n          require 24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 <= (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n          require 5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 <= ((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100)\n          if not (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n              if (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n                  require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n                  require 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 35\n                  unknown92f8def2 += 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n              require _amount <= totalSupply\n              totalSupply -= _amount\n              require _amount <= balanceOf[caller]\n              balanceOf[caller] -= _amount\n              call stor10 with:\n                   gas 2300 wei\n          else:\n              require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n              require 15 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 15\n              if (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18:\n                  require (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18\n                  require 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 == 35\n                  unknown92f8def2 += 35 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n              require _amount <= totalSupply\n              totalSupply -= _amount\n              require _amount <= balanceOf[caller]\n              balanceOf[caller] -= _amount\n              call stor10 with:\n                 value 15 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 / 10 wei\n                   gas 2300 * is_zero(value) wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          stor7[caller] = stor7[caller] - (stor9 * _amount) - (((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100) << 64)\n          if totalSupply > 0:\n              require totalSupply\n              require stor9 + (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply) >= stor9\n              stor9 += 24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply\n          if not totalSupply:\n              log onTokenSell(\n                    address customerAddress=_amount,\n                    uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                    uint256 ethereumEarned=block.timestamp,\n                    uint256 timestamp=11 * 10^10,\n                    uint256 price=caller)\n          else:\n              require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n              if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=(10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18,\n                            uint256 price=caller)\n                  else:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                            uint256 price=caller)\n              else:\n                  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                  require 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29\n                  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                            uint256 price=caller)\n                  else:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                      require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0\n                      log onTokenSell(\n                            address customerAddress=_amount,\n                            uint256 tokensBurned=((25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * _amount) + (10^10 * totalSupply + 10^18 / 10^18 * _amount) - (10^10 * (_amount + 10^18)^2 + -_amount - 10^18 / 10^18 / 2) / 10^18 / 100),\n                            uint256 ethereumEarned=block.timestamp,\n                            uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                            uint256 price=caller)\n\ndef exit(): # not payable\n  if balanceOf[caller] > 0:\n      require balanceOf[caller] > 0\n      require balanceOf[caller] <= balanceOf[caller]\n      require 10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller])\n      if not (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n          if not (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n              require 0 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n              if not (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n                  if (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n                      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n                      require 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 35\n                      unknown92f8def2 += 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n                  require balanceOf[caller] <= totalSupply\n                  totalSupply -= balanceOf[caller]\n                  require balanceOf[caller] <= balanceOf[caller]\n                  balanceOf[caller] = 0\n                  call stor10 with:\n                       gas 2300 wei\n              else:\n                  require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n                  require 15 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 15\n                  if (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n                      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n                      require 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 35\n                      unknown92f8def2 += 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n                  require balanceOf[caller] <= totalSupply\n                  totalSupply -= balanceOf[caller]\n                  require balanceOf[caller] <= balanceOf[caller]\n                  balanceOf[caller] = 0\n                  call stor10 with:\n                     value 15 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 / 10 wei\n                       gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              stor7[caller] = stor7[caller] - (stor9 * balanceOf[caller]) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 << 64)\n              if totalSupply > 0:\n                  require totalSupply\n                  require stor9 + (0 / totalSupply) >= stor9\n                  stor9 += 0 / totalSupply\n              if not totalSupply:\n                  log onTokenSell(\n                        address customerAddress=balanceOf[caller],\n                        uint256 tokensBurned=(25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18,\n                        uint256 ethereumEarned=block.timestamp,\n                        uint256 timestamp=11 * 10^10,\n                        uint256 price=caller)\n              else:\n                  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n                  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=(25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18,\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=(10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18,\n                                uint256 price=caller)\n                      else:\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=(25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18,\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                                uint256 price=caller)\n                  else:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29\n                      if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                          require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=(25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18,\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                                uint256 price=caller)\n                      else:\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                          require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=(25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18,\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                                uint256 price=caller)\n          else:\n              require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n              require 5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 5\n              require 0 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n              require 5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n              if not (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n                  if (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n                      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n                      require 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 35\n                      unknown92f8def2 += 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n                  require balanceOf[caller] <= totalSupply\n                  totalSupply -= balanceOf[caller]\n                  require balanceOf[caller] <= balanceOf[caller]\n                  balanceOf[caller] = 0\n                  call stor10 with:\n                       gas 2300 wei\n              else:\n                  require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n                  require 15 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 15\n                  if (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n                      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n                      require 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 35\n                      unknown92f8def2 += 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n                  require balanceOf[caller] <= totalSupply\n                  totalSupply -= balanceOf[caller]\n                  require balanceOf[caller] <= balanceOf[caller]\n                  balanceOf[caller] = 0\n                  call stor10 with:\n                     value 15 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 / 10 wei\n                       gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              stor7[caller] = stor7[caller] - (stor9 * balanceOf[caller]) - (((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) << 64)\n              if totalSupply > 0:\n                  require totalSupply\n                  require stor9 + (0 / totalSupply) >= stor9\n                  stor9 += 0 / totalSupply\n              if not totalSupply:\n                  log onTokenSell(\n                        address customerAddress=balanceOf[caller],\n                        uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                        uint256 ethereumEarned=block.timestamp,\n                        uint256 timestamp=11 * 10^10,\n                        uint256 price=caller)\n              else:\n                  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n                  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=(10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18,\n                                uint256 price=caller)\n                      else:\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                                uint256 price=caller)\n                  else:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29\n                      if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                          require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                                uint256 price=caller)\n                      else:\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                          require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                                uint256 price=caller)\n      else:\n          require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n          require 24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 24\n          if not (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n              require 24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n              require 0 <= ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100)\n              if not (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n                  if (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n                      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n                      require 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 35\n                      unknown92f8def2 += 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n                  require balanceOf[caller] <= totalSupply\n                  totalSupply -= balanceOf[caller]\n                  require balanceOf[caller] <= balanceOf[caller]\n                  balanceOf[caller] = 0\n                  call stor10 with:\n                       gas 2300 wei\n              else:\n                  require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n                  require 15 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 15\n                  if (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n                      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n                      require 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 35\n                      unknown92f8def2 += 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n                  require balanceOf[caller] <= totalSupply\n                  totalSupply -= balanceOf[caller]\n                  require balanceOf[caller] <= balanceOf[caller]\n                  balanceOf[caller] = 0\n                  call stor10 with:\n                     value 15 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 / 10 wei\n                       gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              stor7[caller] = stor7[caller] - (stor9 * balanceOf[caller]) - (((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) << 64)\n              if totalSupply > 0:\n                  require totalSupply\n                  require stor9 + (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply) >= stor9\n                  stor9 += 24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply\n              if not totalSupply:\n                  log onTokenSell(\n                        address customerAddress=balanceOf[caller],\n                        uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                        uint256 ethereumEarned=block.timestamp,\n                        uint256 timestamp=11 * 10^10,\n                        uint256 price=caller)\n              else:\n                  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n                  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=(10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18,\n                                uint256 price=caller)\n                      else:\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                                uint256 price=caller)\n                  else:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29\n                      if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                          require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                                uint256 price=caller)\n                      else:\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                          require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                                uint256 price=caller)\n          else:\n              require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n              require 5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 5\n              require 24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n              require 5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 <= ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100)\n              if not (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n                  if (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n                      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n                      require 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 35\n                      unknown92f8def2 += 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n                  require balanceOf[caller] <= totalSupply\n                  totalSupply -= balanceOf[caller]\n                  require balanceOf[caller] <= balanceOf[caller]\n                  balanceOf[caller] = 0\n                  call stor10 with:\n                       gas 2300 wei\n              else:\n                  require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n                  require 15 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 15\n                  if (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18:\n                      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n                      require 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 == 35\n                      unknown92f8def2 += 35 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 / 10\n                  require balanceOf[caller] <= totalSupply\n                  totalSupply -= balanceOf[caller]\n                  require balanceOf[caller] <= balanceOf[caller]\n                  balanceOf[caller] = 0\n                  call stor10 with:\n                     value 15 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 / 10 wei\n                       gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              stor7[caller] = stor7[caller] - (stor9 * balanceOf[caller]) - (((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) << 64)\n              if totalSupply > 0:\n                  require totalSupply\n                  require stor9 + (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply) >= stor9\n                  stor9 += 24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100 << 64 / totalSupply\n              if not totalSupply:\n                  log onTokenSell(\n                        address customerAddress=balanceOf[caller],\n                        uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                        uint256 ethereumEarned=block.timestamp,\n                        uint256 timestamp=11 * 10^10,\n                        uint256 price=caller)\n              else:\n                  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n                  if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                      if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=(10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18,\n                                uint256 price=caller)\n                      else:\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                                uint256 price=caller)\n                  else:\n                      require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                      require 29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 29\n                      if not (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18:\n                          require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                                uint256 price=caller)\n                      else:\n                          require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 == 5\n                          require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n                          require 5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100 >= 0\n                          log onTokenSell(\n                                address customerAddress=balanceOf[caller],\n                                uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - (24 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100) - (5 * (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 100),\n                                uint256 ethereumEarned=block.timestamp,\n                                uint256 timestamp=((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) + (29 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100) + (5 * (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 100),\n                                uint256 price=caller)\n  require (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller] > 0\n  stor7[caller] += Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller])\n  stor6[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller] wei\n       gas 2300 * is_zero(value) wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (stor9 * balanceOf[caller]) - stor7[caller]) >> 64) + stor6[caller]),\n        uint256 ethereumWithdrawn=caller)\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 84645 tokens. Please reduce the length of the messages."
}