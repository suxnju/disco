{
	"address": "0xe65f525ec48c7e95654b9824ecc358454ea9185e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity code for the given decompiled code:\n\n```solidity\npragma solidity ^0.4.19;\n\ncontract Contract {\n    mapping(address => uint256) internal balances;\n    address internal contractOwner;\n    uint256 internal totalSupply_;\n    string internal contractName;\n    \n    function Contract() public {\n        contractOwner = msg.sender;\n        totalSupply_ = 0;\n        contractName = \"Contract\";\n    }\n    \n    function totalSupply() public view returns(uint256) {\n        return totalSupply_;\n    }\n    \n    function balanceOf(address _owner) public view returns(uint256) {\n        return balances[_owner];\n    }\n    \n    function transfer(address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender] - _value;\n        balances[_to] = balances[_to] + _value;\n        return true;\n    }\n    \n    function buy(address _buyer) public payable returns(uint256) {\n        require(_buyer != address(0));\n        require(msg.value > 0);\n\n        uint256 tokens = msg.value * 10**18;\n        balances[_buyer] = balances[_buyer] + tokens;\n        totalSupply_ = totalSupply_ + tokens;\n        return tokens;\n    }\n    \n    function sell(address _seller, uint256 _value) public returns(bool) {\n        require(_seller != address(0));\n        require(_value > 0);\n        require(_value <= balances[_seller]);\n\n        uint256 eth = _value / 10**18;\n        _seller.transfer(eth);\n        balances[_seller] = balances[_seller] - _value;\n        totalSupply_ = totalSupply_ - _value;\n        return true;\n    }\n    \n    function dividendsOf(address _owner) public view returns(uint256) {\n        return balances[_owner] / 10;\n    }\n    \n    function name() public view returns(string) {\n        return contractName;\n    }\n    \n    function myTokens() public view returns(uint256) {\n        return balances[msg.sender];\n    }\n    \n    function myDividends(bool _includeReferralBonus) public view returns(uint256) {\n        return dividendsOf(msg.sender);\n    }\n}\n```\n\nPlease note that this is a simplified version of the original decompiled code. Some of the operations in the decompiled code are not entirely clear, such as the purpose of the `func_` functions, so these have been omitted. Also, there are many low-level operations in the decompiled code that are not necessary in higher-level Solidity, so these have been abstracted away.\n\nThe contract provides basic functionality for a token, including transferring tokens, buying tokens, selling tokens, and checking balances. It also provides a mechanism for calculating dividends, although the exact calculation is unclear from the decompiled code.\n\nPlease be aware that this code has not been tested and should be reviewed thoroughly before use.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472038,
	"id": "chatcmpl-8MukIrU809Do6geGixETgc4t3tntU",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0148:\n            var var0 = 0x00;\n            var var1 = var0;\n            var var2 = 0x00;\n            var var3 = var2;\n            var var4 = 0x0178;\n            var var5 = 0xff & 0x0f;\n            var var6 = 0x016a;\n            var var7 = msg.value;\n            var var8 = 0x64;\n            var6 = func_081A(var7, var8);\n            var4 = func_016A(var5, var6);\n            var temp0 = var4;\n            var0 = temp0;\n            var4 = 0x0185;\n            var5 = var0;\n            var6 = 0x0a;\n            var4 = func_081A(var5, var6);\n            var temp1 = var4;\n            var1 = temp1;\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x00] = address(storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var1 * 0x08fc).value(var1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n            var4 = !temp3;\n        \n            if (!var4) {\n                var4 = 0x021a;\n                var5 = 0xff & 0x23;\n                var6 = 0x020c;\n                var7 = msg.value;\n                var8 = 0x64;\n                var6 = func_081A(var7, var8);\n                var4 = func_020C(var5, var6);\n                var temp4 = var4;\n                var2 = temp4;\n                var4 = 0x0227;\n                var5 = var2;\n                var6 = 0x0a;\n                var4 = func_081A(var5, var6);\n                var3 = var4;\n                storage[0x03] = storage[0x03] + var3;\n                var4 = 0x0244;\n                var5 = msg.value;\n                var6 = 0x00;\n                var4 = func_0870(var5, var6);\n                stop();\n            } else {\n                var temp5 = returndata.length;\n                memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = dividendsOf(var2);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02b7;\n                var2 = name();\n                var temp8 = memory[0x40:0x60];\n                var3 = temp8;\n                var4 = var3;\n                var temp9 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp9 - var4;\n                var temp10 = var2;\n                memory[temp9:temp9 + 0x20] = memory[temp10:temp10 + 0x20];\n                var5 = temp9 + 0x20;\n                var6 = temp10 + 0x20;\n                var7 = memory[temp10:temp10 + 0x20];\n                var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_02F7:\n                    var temp11 = var7;\n                    var5 = temp11 + var5;\n                    var6 = temp11 & 0x1f;\n                \n                    if (!var6) {\n                        var temp12 = memory[0x40:0x60];\n                        return memory[temp12:temp12 + var5 - temp12];\n                    } else {\n                        var temp13 = var6;\n                        var temp14 = var5 - temp13;\n                        memory[temp14:temp14 + 0x20] = ~(0x0100 ** (0x20 - temp13) - 0x01) & memory[temp14:temp14 + 0x20];\n                        var temp15 = memory[0x40:0x60];\n                        return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n                    }\n                } else {\n                label_02E5:\n                    var temp16 = var11;\n                    memory[var9 + temp16:var9 + temp16 + 0x20] = memory[var10 + temp16:var10 + temp16 + 0x20];\n                    var11 = temp16 + 0x20;\n                \n                    if (var11 >= var8) { goto label_02F7; }\n                    else { goto label_02E5; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035d;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateTokensReceived(var2);\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var1;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0388;\n                var1 = totalSupply();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c9;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x2858507f) {\n                // Dispatch table entry for IDD()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f4;\n                IDD();\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040b;\n                var2 = decimals();\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2 & 0xff;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x043c;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0453;\n                var1 = sellPrice();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047e;\n                var2 = stakingRequirement();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x56d5938f) {\n                // Dispatch table entry for DivsAddon()\n                var1 = 0x049c;\n                var1 = DivsAddon();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var1;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x6284ae41) {\n                // Dispatch table entry for exitFee()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04c7;\n                var1 = exitFee();\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var1 & 0xff;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0510;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var1;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x053b;\n                var1 = totalEthereumBalance();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var1;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0592;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = var1;\n                var temp38 = memory[0x40:0x60];\n                return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05bd;\n                var1 = buyPrice();\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = var1;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05e8;\n                var2 = owner();\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0x92f8def2) {\n                // Dispatch table entry for InterestPool_()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x063f;\n                var2 = InterestPool_();\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = var2;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x066a;\n                var1 = myTokens();\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var1;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0695;\n                var2 = symbol();\n                var temp47 = memory[0x40:0x60];\n                var3 = temp47;\n                var4 = var3;\n                var temp48 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp48 - var4;\n                var temp49 = var2;\n                memory[temp48:temp48 + 0x20] = memory[temp49:temp49 + 0x20];\n                var5 = temp48 + 0x20;\n                var6 = temp49 + 0x20;\n                var7 = memory[temp49:temp49 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_06D5:\n                    var temp50 = var7;\n                    var5 = temp50 + var5;\n                    var6 = temp50 & 0x1f;\n                \n                    if (!var6) {\n                        var temp51 = memory[0x40:0x60];\n                        return memory[temp51:temp51 + var5 - temp51];\n                    } else {\n                        var temp52 = var6;\n                        var temp53 = var5 - temp52;\n                        memory[temp53:temp53 + 0x20] = ~(0x0100 ** (0x20 - temp52) - 0x01) & memory[temp53:temp53 + 0x20];\n                        var temp54 = memory[0x40:0x60];\n                        return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n                    }\n                } else {\n                label_06C3:\n                    var temp55 = var11;\n                    memory[var9 + temp55:var9 + temp55 + 0x20] = memory[var10 + temp55:var10 + temp55 + 0x20];\n                    var11 = temp55 + 0x20;\n                \n                    if (var11 >= var8) { goto label_06D5; }\n                    else { goto label_06C3; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x075b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp56 = memory[0x40:0x60];\n                memory[temp56:temp56 + 0x20] = !!var1;\n                var temp57 = memory[0x40:0x60];\n                return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07a0;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07b7;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x07ed;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = buy(var2);\n                var temp58 = memory[0x40:0x60];\n                memory[temp58:temp58 + 0x20] = var1;\n                var temp59 = memory[0x40:0x60];\n                return memory[temp59:temp59 + (temp58 + 0x20) - temp59];\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0818;\n                reinvest();\n                stop();\n            } else { goto label_0148; }\n        }\n    }\n    \n    function func_016A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_020C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_081A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0835(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 == 0x00) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = temp0 * arg1;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0870(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var1 = msg.sender;\n        var var11 = 0x089c;\n        var var12 = 0x0895;\n        var var13 = arg0;\n        var var14 = 0xff & 0x1d;\n        var12 = func_0835(var13, var14);\n        var11 = func_0895(var12);\n        var temp0 = var11;\n        var2 = temp0;\n        var11 = 0x08b6;\n        var12 = 0x08af;\n        var13 = var2;\n        var14 = 0xff & 0x08;\n        var12 = func_0835(var13, var14);\n        var11 = func_08AF(var12);\n        var3 = var11;\n        var11 = 0x08cd;\n        var12 = 0x08c6;\n        var13 = arg0;\n        var14 = 0x05;\n        var12 = func_0835(var13, var14);\n        var11 = func_08C6(var12);\n        var4 = var11;\n        var11 = 0x08d9;\n        var12 = var2;\n        var13 = var3;\n        var11 = func_1D7C(var12, var13);\n        var temp1 = var11;\n        var5 = temp1;\n        var11 = 0x08e5;\n        var12 = var5;\n        var13 = var4;\n        var11 = func_1D7C(var12, var13);\n        var6 = var11;\n        var11 = 0x08f1;\n        var12 = arg0;\n        var13 = var2;\n        var11 = func_1D7C(var12, var13);\n        var temp2 = var11;\n        var7 = temp2;\n        var11 = 0x08fc;\n        var12 = var7;\n        var11 = func_1D95(var12);\n        var8 = var11;\n        var9 = var6 * 0x010000000000000000;\n        var temp3 = var8 > 0x00;\n        var11 = temp3;\n    \n        if (!var11) {\n        label_0928:\n        \n            if (!var11) { revert(memory[0x00:0x00]); }\n        \n            var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        \n            if (var11) {\n                var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            \n                if (!var11) { goto label_09E9; }\n                else { goto label_09A3; }\n            } else if (!var11) {\n            label_09E9:\n            \n                if (!var11) {\n                label_0A7F:\n                    var11 = 0x0a89;\n                    var12 = var6;\n                    var13 = var3;\n                    var11 = func_1E22(var12, var13);\n                    var6 = var11;\n                    var9 = var6 * 0x010000000000000000;\n                \n                    if (storage[0x08] <= 0x00) {\n                    label_0B05:\n                        storage[0x08] = var8;\n                        var11 = 0x0b56;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var12 = storage[keccak256(memory[0x00:0x40])];\n                        var13 = var8;\n                        var11 = func_1E22(var12, var13);\n                    \n                    label_0B56:\n                        var temp4 = var1;\n                        memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40])] = var11;\n                        var10 = storage[0x09] * var8 - var9;\n                        memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x07;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] + var10;\n                        var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var12 = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var13 = 0x8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab;\n                        var14 = arg0;\n                        var var15 = var8;\n                        var var16 = block.timestamp;\n                        var var17 = 0x0c49;\n                        var17 = buyPrice();\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = var14;\n                        var temp7 = temp6 + 0x20;\n                        memory[temp7:temp7 + 0x20] = var15;\n                        var temp8 = temp7 + 0x20;\n                        memory[temp8:temp8 + 0x20] = var16;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = var17;\n                        var temp10 = memory[0x40:0x60];\n                        log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [stack[-5], stack[-6], stack[-7]]);\n                        return var8;\n                    } else {\n                    label_0AA6:\n                        var11 = 0x0ab1;\n                        var12 = storage[0x08];\n                        var13 = var8;\n                        var11 = func_1E22(var12, var13);\n                        storage[0x08] = var11;\n                        var11 = storage[0x08];\n                        var12 = var6 * 0x010000000000000000;\n                    \n                        if (!var11) { assert(); }\n                    \n                        storage[0x09] = storage[0x09] + var12 / var11;\n                        var11 = storage[0x08];\n                        var12 = var6 * 0x010000000000000000;\n                    \n                        if (!var11) { assert(); }\n                    \n                        var temp11 = var9;\n                        var9 = temp11 - (temp11 - var8 * (var12 / var11));\n                        var11 = 0x0b56;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var12 = storage[keccak256(memory[0x00:0x40])];\n                        var13 = var8;\n                        var11 = func_1E22(var12, var13);\n                        goto label_0B56;\n                    }\n                } else {\n                label_09EF:\n                    var11 = 0x0a37;\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x06;\n                    var12 = storage[keccak256(memory[0x00:0x40])];\n                    var13 = var3;\n                    var11 = func_1E22(var12, var13);\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x06;\n                    storage[keccak256(memory[0x00:0x40])] = var11;\n                \n                    if (storage[0x08] <= 0x00) { goto label_0B05; }\n                    else { goto label_0AA6; }\n                }\n            } else {\n            label_09A3:\n                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x05;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < storage[0x04]) { goto label_0A7F; }\n                else { goto label_09EF; }\n            }\n        } else {\n            var11 = storage[0x08];\n            var12 = 0x0926;\n            var13 = var8;\n            var14 = storage[0x08];\n            var12 = func_1E22(var13, var14);\n            var11 = var12 > var11;\n            goto label_0928;\n        }\n    }\n    \n    function func_0895(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_08AF(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_08C6(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x010000000000000000;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var var2 = storage[0x09] * storage[keccak256(memory[0x00:0x40])] - temp1;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0DBE:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0DB5; }\n        \n        label_0DA1:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0DA1; }\n        \n        label_0DB5:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0DBE;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0DBE;\n        }\n    }\n    \n    function calculateTokensReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0de7;\n        var var7 = 0x0de0;\n        var var8 = arg0;\n        var var9 = 0xff & 0x1d;\n        var7 = func_0835(var8, var9);\n        var6 = func_0DE0(var7);\n        var1 = var6;\n        var6 = 0x0dfe;\n        var7 = 0x0df7;\n        var8 = arg0;\n        var9 = 0x05;\n        var7 = func_0835(var8, var9);\n        var6 = func_0DF7(var7);\n        var2 = var6;\n        var6 = 0x0e0a;\n        var7 = arg0;\n        var8 = var1;\n        var6 = func_1D7C(var7, var8);\n        var temp0 = var6;\n        var3 = temp0;\n        var6 = 0x0e16;\n        var7 = var3;\n        var8 = var2;\n        var6 = func_1D7C(var7, var8);\n        var temp1 = var6;\n        var4 = temp1;\n        var6 = 0x0e21;\n        var7 = var4;\n        return func_1D95(var7);\n    }\n    \n    function func_0DE0(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0DF7(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x08]; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (arg0 > storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var var6 = 0x0e5d;\n        var var7 = arg0;\n        var6 = func_1E40(var7);\n        var temp0 = var6;\n        var1 = temp0;\n        var6 = 0x0e7d;\n        var7 = 0x0e76;\n        var var8 = var1;\n        var var9 = 0x0e6e;\n        var9 = exitFee();\n        var7 = func_0E6E(var8, var9);\n        var6 = func_0E76(var7);\n        var2 = var6;\n        var6 = 0x0e94;\n        var7 = 0x0e8d;\n        var8 = var1;\n        var9 = 0x05;\n        var7 = func_0835(var8, var9);\n        var6 = func_0E8D(var7);\n        var3 = var6;\n        var6 = 0x0ea0;\n        var7 = var1;\n        var8 = var2;\n        var6 = func_1D7C(var7, var8);\n        var temp1 = var6;\n        var4 = temp1;\n        var6 = 0x0eac;\n        var7 = var4;\n        var8 = var3;\n        return func_1D7C(var7, var8);\n    }\n    \n    function func_0E6E(var arg0, var arg1) returns (var r0) {\n        arg1 = arg1 & 0xff;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0E76(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0E8D(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function IDD() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (msg.sender != storage[var2] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var3 = 0x0f3e;\n        var var4 = address(this).balance;\n        var var5 = storage[0x03];\n        var3 = func_1D7C(var4, var5);\n        var temp0 = var3;\n        var0 = temp0;\n        var3 = 0x0f58;\n        var4 = 0x0f51;\n        var5 = var0;\n        var var6 = 0xff & 0x01;\n        var4 = func_0835(var5, var6);\n        var3 = func_0F51(var4);\n        var temp1 = var3;\n        var1 = temp1;\n        var3 = 0x0f65;\n        var4 = var1;\n        var5 = 0x0a;\n        var3 = func_081A(var4, var5);\n        var temp2 = var3;\n        var2 = temp2;\n        storage[0x03] = storage[0x03] - var2;\n        var3 = 0x0f82;\n        var4 = var2;\n        var5 = 0x00;\n        var3 = func_1EEB(var4, var5);\n    }\n    \n    function func_0F51(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x0f9c;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x0fb5;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var2;\n        var temp1 = var0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var1 = temp3;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(temp1 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var1 * 0x08fc).value(var1)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n        var2 = !temp5;\n    \n        if (!var2) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var1;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (storage[0x08] != 0x00) {\n            var var6 = 0x116a;\n            var var7 = 0x0de0b6b3a7640000;\n            var6 = func_1E40(var7);\n            var temp0 = var6;\n            var1 = temp0;\n            var6 = 0x118a;\n            var7 = 0x1183;\n            var var8 = var1;\n            var var9 = 0x117b;\n            var9 = exitFee();\n            var7 = func_117B(var8, var9);\n            var6 = func_1183(var7);\n            var2 = var6;\n            var6 = 0x11a1;\n            var7 = 0x119a;\n            var8 = var1;\n            var9 = 0x05;\n            var7 = func_0835(var8, var9);\n            var6 = func_119A(var7);\n            var3 = var6;\n            var6 = 0x11ad;\n            var7 = var1;\n            var8 = var2;\n            var6 = func_1D7C(var7, var8);\n            var temp1 = var6;\n            var4 = temp1;\n            var6 = 0x11b9;\n            var7 = var4;\n            var8 = var3;\n            var6 = func_1D7C(var7, var8);\n            var5 = var6;\n            var0 = var5;\n        \n        label_11BF:\n            return var0;\n        } else {\n            var0 = 0x174876e800 - 0x02540be400;\n            goto label_11BF;\n        }\n    }\n    \n    function func_117B(var arg0, var arg1) returns (var r0) {\n        arg1 = arg1 & 0xff;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1183(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_119A(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x04]; }\n    \n    function DivsAddon() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x11da;\n        var var2 = msg.value;\n        var var3 = 0x00;\n        var1 = func_1EEB(var2, var3);\n        return var0;\n    }\n    \n    function exitFee() returns (var r0) { return 0x18; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x1249;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x11fb;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (storage[0x08] != 0x00) {\n            var var6 = 0x12f4;\n            var var7 = 0x0de0b6b3a7640000;\n            var6 = func_1E40(var7);\n            var temp0 = var6;\n            var1 = temp0;\n            var6 = 0x130e;\n            var7 = 0x1307;\n            var var8 = var1;\n            var var9 = 0xff & 0x1d;\n            var7 = func_0835(var8, var9);\n            var6 = func_1307(var7);\n            var2 = var6;\n            var6 = 0x1325;\n            var7 = 0x131e;\n            var8 = var1;\n            var9 = 0x05;\n            var7 = func_0835(var8, var9);\n            var6 = func_131E(var7);\n            var3 = var6;\n            var6 = 0x1331;\n            var7 = var1;\n            var8 = var2;\n            var6 = func_1E22(var7, var8);\n            var temp1 = var6;\n            var4 = temp1;\n            var6 = 0x133d;\n            var7 = var4;\n            var8 = var3;\n            var6 = func_1E22(var7, var8);\n            var5 = var6;\n            var0 = var5;\n        \n        label_1343:\n            return var0;\n        } else {\n            var0 = 0x174876e800 + 0x02540be400;\n            goto label_1343;\n        }\n    }\n    \n    function func_1307(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_131E(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function InterestPool_() returns (var r0) { return storage[0x03]; }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x1385;\n        var var3 = var1;\n        return balanceOf(var3);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1421:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1418; }\n        \n        label_1404:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1404; }\n        \n        label_1418:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1421;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1421;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x143a;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var5 = 0x00;\n        var6 = 0x14a3;\n        var var7 = 0x01;\n        var6 = myDividends(var7);\n    \n        if (var6 <= var5) {\n        label_14B2:\n            var5 = 0x14ca;\n            var6 = 0x14c3;\n            var7 = arg1;\n            var var8 = 0xff & 0x01;\n            var6 = func_0835(var7, var8);\n            var5 = func_14C3(var6);\n            var temp0 = var5;\n            var2 = temp0;\n            var5 = 0x14d6;\n            var6 = arg1;\n            var7 = var2;\n            var5 = func_1D7C(var6, var7);\n            var3 = var5;\n            var5 = 0x14e1;\n            var6 = var2;\n            var5 = func_1E40(var6);\n            var4 = var5;\n            var5 = 0x14ef;\n            var6 = storage[0x08];\n            var7 = var2;\n            var5 = func_1D7C(var6, var7);\n            storage[0x08] = var5;\n            var5 = 0x153e;\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = arg1;\n            var5 = func_1D7C(var6, var7);\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            var5 = 0x15ca;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = var3;\n            var5 = func_1E22(var6, var7);\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = storage[temp2] - storage[0x09] * arg1;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] + storage[0x09] * var3;\n            var5 = 0x16d3;\n            var6 = storage[0x09];\n            var7 = storage[0x08];\n            var8 = var4 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_16CD(var6, var7, var8);\n            storage[0x09] = var5;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var3;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            var5 = 0x14b1;\n            withdraw();\n            goto label_14B2;\n        }\n    }\n    \n    function func_14C3(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_16CD(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1E22(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var11 = var10;\n        var var12 = 0x00;\n        var var13 = 0x1768;\n        var13 = myTokens();\n    \n        if (var13 <= var12) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var12 = 0x17d1;\n        var13 = var1;\n        var12 = func_1E40(var13);\n        var temp0 = var12;\n        var2 = temp0;\n        var12 = 0x17f1;\n        var13 = 0x17ea;\n        var var14 = var2;\n        var var15 = 0x17e2;\n        var15 = exitFee();\n        var13 = func_17E2(var14, var15);\n        var12 = func_17EA(var13);\n        var3 = var12;\n        var12 = 0x1808;\n        var13 = 0x1801;\n        var14 = var2;\n        var15 = 0x05;\n        var13 = func_0835(var14, var15);\n        var12 = func_1801(var13);\n        var4 = var12;\n        var12 = 0x1814;\n        var13 = var2;\n        var14 = var3;\n        var12 = func_1D7C(var13, var14);\n        var temp1 = var12;\n        var5 = temp1;\n        var12 = 0x1820;\n        var13 = var5;\n        var14 = var4;\n        var12 = func_1D7C(var13, var14);\n        var6 = var12;\n        var12 = 0x183a;\n        var13 = 0x1833;\n        var14 = var2;\n        var15 = 0xff & 0x0f;\n        var13 = func_0835(var14, var15);\n        var12 = func_1833(var13);\n        var temp2 = var12;\n        var7 = temp2;\n        var12 = 0x1847;\n        var13 = var7;\n        var14 = 0x0a;\n        var12 = func_081A(var13, var14);\n        var8 = var12;\n        var12 = 0x1861;\n        var13 = 0x185a;\n        var14 = var2;\n        var15 = 0xff & 0x23;\n        var13 = func_0835(var14, var15);\n        var12 = func_185A(var13);\n        var temp3 = var12;\n        var9 = temp3;\n        var12 = 0x186e;\n        var13 = var9;\n        var14 = 0x0a;\n        var12 = func_081A(var13, var14);\n        var10 = var12;\n        storage[0x03] = storage[0x03] + var10;\n        var12 = 0x188c;\n        var13 = storage[0x08];\n        var14 = var1;\n        var12 = func_1D7C(var13, var14);\n        storage[0x08] = var12;\n        var12 = 0x18db;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var13 = storage[keccak256(memory[0x00:0x40])];\n        var14 = var1;\n        var12 = func_1D7C(var13, var14);\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var12;\n        var temp4 = var8;\n        var temp5 = memory[0x40:0x60];\n        var temp6;\n        temp6, memory[temp5:temp5 + 0x00] = address(storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp5:temp5 + memory[0x40:0x60] - temp5]);\n        var12 = !temp6;\n    \n        if (!var12) {\n            var11 = storage[0x09] * var1 + var6 * 0x010000000000000000;\n            memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            storage[temp7] = storage[temp7] - var11;\n        \n            if (storage[0x08] <= 0x00) {\n            label_1A1E:\n                var12 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var13 = 0x8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e;\n                var14 = var1;\n                var15 = var6;\n                var var16 = block.timestamp;\n                var var17 = 0x1a61;\n                var17 = buyPrice();\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var14;\n                var temp9 = temp8 + 0x20;\n                memory[temp9:temp9 + 0x20] = var15;\n                var temp10 = temp9 + 0x20;\n                memory[temp10:temp10 + 0x20] = var16;\n                var temp11 = temp10 + 0x20;\n                memory[temp11:temp11 + 0x20] = var17;\n                var temp12 = memory[0x40:0x60];\n                log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [stack[-5], stack[-6]]);\n                return;\n            } else {\n                var12 = 0x1a17;\n                var13 = storage[0x09];\n                var14 = storage[0x08];\n                var15 = var3 * 0x010000000000000000;\n            \n                if (!var14) { assert(); }\n            \n                var12 = func_1A11(var13, var14, var15);\n                storage[0x09] = var12;\n                goto label_1A1E;\n            }\n        } else {\n            var temp13 = returndata.length;\n            memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_17E2(var arg0, var arg1) returns (var r0) {\n        arg1 = arg1 & 0xff;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_17EA(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1801(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1833(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_185A(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1A11(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1E22(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_1AF5:\n            var var2 = 0x1afd;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x1af4;\n            var var3 = var1;\n            sell(var3);\n            goto label_1AF5;\n        }\n    }\n    \n    function buy(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x1b33;\n        var var6 = 0xff & 0x0f;\n        var var7 = 0x1b25;\n        var var8 = msg.value;\n        var var9 = 0x64;\n        var7 = func_081A(var8, var9);\n        var5 = func_1B25(var6, var7);\n        var temp0 = var5;\n        var1 = temp0;\n        var5 = 0x1b40;\n        var6 = var1;\n        var7 = 0x0a;\n        var5 = func_081A(var6, var7);\n        var temp1 = var5;\n        var2 = temp1;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var2 * 0x08fc).value(var2)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        var5 = !temp3;\n    \n        if (!var5) {\n            var5 = 0x1bd5;\n            var6 = 0xff & 0x23;\n            var7 = 0x1bc7;\n            var8 = msg.value;\n            var9 = 0x64;\n            var7 = func_081A(var8, var9);\n            var5 = func_1BC7(var6, var7);\n            var temp4 = var5;\n            var3 = temp4;\n            var5 = 0x1be2;\n            var6 = var3;\n            var7 = 0x0a;\n            var5 = func_081A(var6, var7);\n            var4 = var5;\n            storage[0x03] = storage[0x03] + var4;\n            var5 = 0x1bfe;\n            var6 = msg.value;\n            var7 = arg0;\n            var5 = func_0870(var6, var7);\n            return var0;\n        } else {\n            var temp5 = returndata.length;\n            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_1B25(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1BC7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x1c18;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x1c2e;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        var temp0 = var3;\n        var temp1 = msg.sender;\n        var1 = temp1;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var0 = temp3;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var3 = 0x1d1f;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_0870(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1D7C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1D95(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var temp0 = 0x174876e800 * 0x0de0b6b3a7640000;\n        var var1 = temp0;\n        var var3 = storage[0x08];\n        var var4 = 0x02540be400;\n        var var5 = 0x1e0b;\n        var var6 = 0x1e05;\n        var var7 = var1 ** 0x02 + arg0 * 0x0de0b6b3a7640000 * 0x02 * 0x02540be400 * 0x0de0b6b3a7640000 + storage[0x08] ** 0x02 * 0x02540be400 ** 0x02 + var1 * 0x02 * 0x02540be400 * storage[0x08];\n        var6 = func_22D8(var7);\n        var5 = func_1E05(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_1E05(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1D7C(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E22(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1E40(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var3 = 0x00;\n        var var1 = arg0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x08] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x1ed4;\n        var var6 = var1 - 0x0de0b6b3a7640000;\n        var var7 = 0x02540be400;\n        var var8 = 0x0de0b6b3a7640000;\n        var var9 = var2;\n    \n        if (!var8) { assert(); }\n    \n        var5 = func_1E92(var1, var6, var7, var8, var9);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_1E92(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        arg1 = (arg4 / arg3 * 0x02540be400 + 0x174876e800) - arg2 * arg1;\n        arg2 = 0x02;\n        arg3 = 0x0de0b6b3a7640000;\n        var temp0 = arg0;\n        arg4 = temp0 ** 0x02 - temp0;\n    \n        if (!arg3) { assert(); }\n    \n        arg3 = arg4 / arg3 * 0x02540be400;\n    \n        if (!arg2) { assert(); }\n    \n        arg2 = arg3 / arg2;\n        r0 = func_1D7C(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1EEB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var1 = msg.sender;\n        var var9 = 0x1f11;\n        var var10 = 0x1f0a;\n        var var11 = arg0;\n        var var12 = 0x64;\n        var10 = func_0835(var11, var12);\n        var9 = func_1F0A(var10);\n        var temp0 = var9;\n        var2 = temp0;\n        var9 = 0x1f2b;\n        var10 = 0x1f24;\n        var11 = var2;\n        var12 = 0xff & 0x08;\n        var10 = func_0835(var11, var12);\n        var9 = func_1F24(var10);\n        var temp1 = var9;\n        var3 = temp1;\n        var9 = 0x1f37;\n        var10 = var2;\n        var11 = var3;\n        var9 = func_1D7C(var10, var11);\n        var4 = var9;\n        var9 = 0x1f43;\n        var10 = arg0;\n        var11 = var2;\n        var9 = func_1D7C(var10, var11);\n        var temp2 = var9;\n        var5 = temp2;\n        var9 = 0x1f4e;\n        var10 = var5;\n        var9 = func_1D95(var10);\n        var6 = var9;\n        var7 = var4 * 0x010000000000000000;\n        var temp3 = var6 >= 0x00;\n        var9 = temp3;\n    \n        if (!var9) {\n        label_1F7C:\n        \n            if (!var9) { revert(memory[0x00:0x00]); }\n        \n            var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        \n            if (var9) {\n                var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            \n                if (!var9) { goto label_203D; }\n                else { goto label_1FF7; }\n            } else if (!var9) {\n            label_203D:\n            \n                if (!var9) {\n                label_20D3:\n                    var9 = 0x20dd;\n                    var10 = var4;\n                    var11 = var3;\n                    var9 = func_1E22(var10, var11);\n                    var4 = var9;\n                    var7 = var4 * 0x010000000000000000;\n                \n                    if (storage[0x08] <= 0x00) {\n                    label_2159:\n                        storage[0x08] = var6;\n                        var9 = 0x21aa;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = var6;\n                        var9 = func_1E22(var10, var11);\n                    \n                    label_21AA:\n                        var temp4 = var1;\n                        memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                        var8 = storage[0x09] * var6 - var7;\n                        memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x07;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] + var8;\n                        var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var10 = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var11 = 0x8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab;\n                        var12 = arg0;\n                        var var13 = var6;\n                        var var14 = block.timestamp;\n                        var var15 = 0x229d;\n                        var15 = buyPrice();\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = var12;\n                        var temp7 = temp6 + 0x20;\n                        memory[temp7:temp7 + 0x20] = var13;\n                        var temp8 = temp7 + 0x20;\n                        memory[temp8:temp8 + 0x20] = var14;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = var15;\n                        var temp10 = memory[0x40:0x60];\n                        log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [stack[-5], stack[-6], stack[-7]]);\n                        return var6;\n                    } else {\n                    label_20FA:\n                        var9 = 0x2105;\n                        var10 = storage[0x08];\n                        var11 = var6;\n                        var9 = func_1E22(var10, var11);\n                        storage[0x08] = var9;\n                        var9 = storage[0x08];\n                        var10 = var4 * 0x010000000000000000;\n                    \n                        if (!var9) { assert(); }\n                    \n                        storage[0x09] = storage[0x09] + var10 / var9;\n                        var9 = storage[0x08];\n                        var10 = var4 * 0x010000000000000000;\n                    \n                        if (!var9) { assert(); }\n                    \n                        var temp11 = var7;\n                        var7 = temp11 - (temp11 - var6 * (var10 / var9));\n                        var9 = 0x21aa;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = var6;\n                        var9 = func_1E22(var10, var11);\n                        goto label_21AA;\n                    }\n                } else {\n                label_2043:\n                    var9 = 0x208b;\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x06;\n                    var10 = storage[keccak256(memory[0x00:0x40])];\n                    var11 = var3;\n                    var9 = func_1E22(var10, var11);\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x06;\n                    storage[keccak256(memory[0x00:0x40])] = var9;\n                \n                    if (storage[0x08] <= 0x00) { goto label_2159; }\n                    else { goto label_20FA; }\n                }\n            } else {\n            label_1FF7:\n                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x05;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < storage[0x04]) { goto label_20D3; }\n                else { goto label_2043; }\n            }\n        } else {\n            var9 = storage[0x08];\n            var10 = 0x1f79;\n            var11 = var6;\n            var12 = storage[0x08];\n            var10 = func_1E22(var11, var12);\n            var9 = var10 >= var9;\n            goto label_1F7C;\n        }\n    }\n    \n    function func_1F0A(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1F24(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_22D8(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = arg0 + 0x01;\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_231D:\n            return var0;\n        } else {\n        label_22FA:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_231D; }\n            else { goto label_22FA; }\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0148:\n            var var0 = 0x00;\n            var var1 = var0;\n            var var2 = 0x00;\n            var var3 = var2;\n            var var4 = 0x0178;\n            var var5 = 0xff & 0x0f;\n            var var6 = 0x016a;\n            var var7 = msg.value;\n            var var8 = 0x64;\n            var6 = func_081A(var7, var8);\n            var4 = func_016A(var5, var6);\n            var temp0 = var4;\n            var0 = temp0;\n            var4 = 0x0185;\n            var5 = var0;\n            var6 = 0x0a;\n            var4 = func_081A(var5, var6);\n            var temp1 = var4;\n            var1 = temp1;\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x00] = address(storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var1 * 0x08fc).value(var1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n            var4 = !temp3;\n        \n            if (!var4) {\n                var4 = 0x021a;\n                var5 = 0xff & 0x23;\n                var6 = 0x020c;\n                var7 = msg.value;\n                var8 = 0x64;\n                var6 = func_081A(var7, var8);\n                var4 = func_020C(var5, var6);\n                var temp4 = var4;\n                var2 = temp4;\n                var4 = 0x0227;\n                var5 = var2;\n                var6 = 0x0a;\n                var4 = func_081A(var5, var6);\n                var3 = var4;\n                storage[0x03] = storage[0x03] + var3;\n                var4 = 0x0244;\n                var5 = msg.value;\n                var6 = 0x00;\n                var4 = func_0870(var5, var6);\n                stop();\n            } else {\n                var temp5 = returndata.length;\n                memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = dividendsOf(var2);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02b7;\n                var2 = name();\n                var temp8 = memory[0x40:0x60];\n                var3 = temp8;\n                var4 = var3;\n                var temp9 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp9 - var4;\n                var temp10 = var2;\n                memory[temp9:temp9 + 0x20] = memory[temp10:temp10 + 0x20];\n                var5 = temp9 + 0x20;\n                var6 = temp10 + 0x20;\n                var7 = memory[temp10:temp10 + 0x20];\n                var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_02F7:\n                    var temp11 = var7;\n                    var5 = temp11 + var5;\n                    var6 = temp11 & 0x1f;\n                \n                    if (!var6) {\n                        var temp12 = memory[0x40:0x60];\n                        return memory[temp12:temp12 + var5 - temp12];\n                    } else {\n                        var temp13 = var6;\n                        var temp14 = var5 - temp13;\n                        memory[temp14:temp14 + 0x20] = ~(0x0100 ** (0x20 - temp13) - 0x01) & memory[temp14:temp14 + 0x20];\n                        var temp15 = memory[0x40:0x60];\n                        return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n                    }\n                } else {\n                label_02E5:\n                    var temp16 = var11;\n                    memory[var9 + temp16:var9 + temp16 + 0x20] = memory[var10 + temp16:var10 + temp16 + 0x20];\n                    var11 = temp16 + 0x20;\n                \n                    if (var11 >= var8) { goto label_02F7; }\n                    else { goto label_02E5; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035d;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateTokensReceived(var2);\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var1;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0388;\n                var1 = totalSupply();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c9;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x2858507f) {\n                // Dispatch table entry for IDD()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f4;\n                IDD();\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040b;\n                var2 = decimals();\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2 & 0xff;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x043c;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0453;\n                var1 = sellPrice();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047e;\n                var2 = stakingRequirement();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x56d5938f) {\n                // Dispatch table entry for DivsAddon()\n                var1 = 0x049c;\n                var1 = DivsAddon();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var1;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x6284ae41) {\n                // Dispatch table entry for exitFee()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04c7;\n                var1 = exitFee();\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var1 & 0xff;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0510;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var1;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x053b;\n                var1 = totalEthereumBalance();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var1;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0592;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = var1;\n                var temp38 = memory[0x40:0x60];\n                return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05bd;\n                var1 = buyPrice();\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = var1;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05e8;\n                var2 = owner();\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0x92f8def2) {\n                // Dispatch table entry for InterestPool_()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x063f;\n                var2 = InterestPool_();\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = var2;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x066a;\n                var1 = myTokens();\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var1;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0695;\n                var2 = symbol();\n                var temp47 = memory[0x40:0x60];\n                var3 = temp47;\n                var4 = var3;\n                var temp48 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp48 - var4;\n                var temp49 = var2;\n                memory[temp48:temp48 + 0x20] = memory[temp49:temp49 + 0x20];\n                var5 = temp48 + 0x20;\n                var6 = temp49 + 0x20;\n                var7 = memory[temp49:temp49 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_06D5:\n                    var temp50 = var7;\n                    var5 = temp50 + var5;\n                    var6 = temp50 & 0x1f;\n                \n                    if (!var6) {\n                        var temp51 = memory[0x40:0x60];\n                        return memory[temp51:temp51 + var5 - temp51];\n                    } else {\n                        var temp52 = var6;\n                        var temp53 = var5 - temp52;\n                        memory[temp53:temp53 + 0x20] = ~(0x0100 ** (0x20 - temp52) - 0x01) & memory[temp53:temp53 + 0x20];\n                        var temp54 = memory[0x40:0x60];\n                        return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n                    }\n                } else {\n                label_06C3:\n                    var temp55 = var11;\n                    memory[var9 + temp55:var9 + temp55 + 0x20] = memory[var10 + temp55:var10 + temp55 + 0x20];\n                    var11 = temp55 + 0x20;\n                \n                    if (var11 >= var8) { goto label_06D5; }\n                    else { goto label_06C3; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x075b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp56 = memory[0x40:0x60];\n                memory[temp56:temp56 + 0x20] = !!var1;\n                var temp57 = memory[0x40:0x60];\n                return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07a0;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07b7;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x07ed;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = buy(var2);\n                var temp58 = memory[0x40:0x60];\n                memory[temp58:temp58 + 0x20] = var1;\n                var temp59 = memory[0x40:0x60];\n                return memory[temp59:temp59 + (temp58 + 0x20) - temp59];\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0818;\n                reinvest();\n                stop();\n            } else { goto label_0148; }\n        }\n    }\n    \n    function func_016A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_020C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_081A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0835(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 == 0x00) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = temp0 * arg1;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0870(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var1 = msg.sender;\n        var var11 = 0x089c;\n        var var12 = 0x0895;\n        var var13 = arg0;\n        var var14 = 0xff & 0x1d;\n        var12 = func_0835(var13, var14);\n        var11 = func_0895(var12);\n        var temp0 = var11;\n        var2 = temp0;\n        var11 = 0x08b6;\n        var12 = 0x08af;\n        var13 = var2;\n        var14 = 0xff & 0x08;\n        var12 = func_0835(var13, var14);\n        var11 = func_08AF(var12);\n        var3 = var11;\n        var11 = 0x08cd;\n        var12 = 0x08c6;\n        var13 = arg0;\n        var14 = 0x05;\n        var12 = func_0835(var13, var14);\n        var11 = func_08C6(var12);\n        var4 = var11;\n        var11 = 0x08d9;\n        var12 = var2;\n        var13 = var3;\n        var11 = func_1D7C(var12, var13);\n        var temp1 = var11;\n        var5 = temp1;\n        var11 = 0x08e5;\n        var12 = var5;\n        var13 = var4;\n        var11 = func_1D7C(var12, var13);\n        var6 = var11;\n        var11 = 0x08f1;\n        var12 = arg0;\n        var13 = var2;\n        var11 = func_1D7C(var12, var13);\n        var temp2 = var11;\n        var7 = temp2;\n        var11 = 0x08fc;\n        var12 = var7;\n        var11 = func_1D95(var12);\n        var8 = var11;\n        var9 = var6 * 0x010000000000000000;\n        var temp3 = var8 > 0x00;\n        var11 = temp3;\n    \n        if (!var11) {\n        label_0928:\n        \n            if (!var11) { revert(memory[0x00:0x00]); }\n        \n            var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        \n            if (var11) {\n                var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            \n                if (!var11) { goto label_09E9; }\n                else { goto label_09A3; }\n            } else if (!var11) {\n            label_09E9:\n            \n                if (!var11) {\n                label_0A7F:\n                    var11 = 0x0a89;\n                    var12 = var6;\n                    var13 = var3;\n                    var11 = func_1E22(var12, var13);\n                    var6 = var11;\n                    var9 = var6 * 0x010000000000000000;\n                \n                    if (storage[0x08] <= 0x00) {\n                    label_0B05:\n                        storage[0x08] = var8;\n                        var11 = 0x0b56;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var12 = storage[keccak256(memory[0x00:0x40])];\n                        var13 = var8;\n                        var11 = func_1E22(var12, var13);\n                    \n                    label_0B56:\n                        var temp4 = var1;\n                        memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40])] = var11;\n                        var10 = storage[0x09] * var8 - var9;\n                        memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x07;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] + var10;\n                        var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var12 = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var13 = 0x8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab;\n                        var14 = arg0;\n                        var var15 = var8;\n                        var var16 = block.timestamp;\n                        var var17 = 0x0c49;\n                        var17 = buyPrice();\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = var14;\n                        var temp7 = temp6 + 0x20;\n                        memory[temp7:temp7 + 0x20] = var15;\n                        var temp8 = temp7 + 0x20;\n                        memory[temp8:temp8 + 0x20] = var16;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = var17;\n                        var temp10 = memory[0x40:0x60];\n                        log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [stack[-5], stack[-6], stack[-7]]);\n                        return var8;\n                    } else {\n                    label_0AA6:\n                        var11 = 0x0ab1;\n                        var12 = storage[0x08];\n                        var13 = var8;\n                        var11 = func_1E22(var12, var13);\n                        storage[0x08] = var11;\n                        var11 = storage[0x08];\n                        var12 = var6 * 0x010000000000000000;\n                    \n                        if (!var11) { assert(); }\n                    \n                        storage[0x09] = storage[0x09] + var12 / var11;\n                        var11 = storage[0x08];\n                        var12 = var6 * 0x010000000000000000;\n                    \n                        if (!var11) { assert(); }\n                    \n                        var temp11 = var9;\n                        var9 = temp11 - (temp11 - var8 * (var12 / var11));\n                        var11 = 0x0b56;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var12 = storage[keccak256(memory[0x00:0x40])];\n                        var13 = var8;\n                        var11 = func_1E22(var12, var13);\n                        goto label_0B56;\n                    }\n                } else {\n                label_09EF:\n                    var11 = 0x0a37;\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x06;\n                    var12 = storage[keccak256(memory[0x00:0x40])];\n                    var13 = var3;\n                    var11 = func_1E22(var12, var13);\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x06;\n                    storage[keccak256(memory[0x00:0x40])] = var11;\n                \n                    if (storage[0x08] <= 0x00) { goto label_0B05; }\n                    else { goto label_0AA6; }\n                }\n            } else {\n            label_09A3:\n                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x05;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < storage[0x04]) { goto label_0A7F; }\n                else { goto label_09EF; }\n            }\n        } else {\n            var11 = storage[0x08];\n            var12 = 0x0926;\n            var13 = var8;\n            var14 = storage[0x08];\n            var12 = func_1E22(var13, var14);\n            var11 = var12 > var11;\n            goto label_0928;\n        }\n    }\n    \n    function func_0895(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_08AF(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_08C6(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x010000000000000000;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var var2 = storage[0x09] * storage[keccak256(memory[0x00:0x40])] - temp1;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0DBE:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0DB5; }\n        \n        label_0DA1:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0DA1; }\n        \n        label_0DB5:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0DBE;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0DBE;\n        }\n    }\n    \n    function calculateTokensReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0de7;\n        var var7 = 0x0de0;\n        var var8 = arg0;\n        var var9 = 0xff & 0x1d;\n        var7 = func_0835(var8, var9);\n        var6 = func_0DE0(var7);\n        var1 = var6;\n        var6 = 0x0dfe;\n        var7 = 0x0df7;\n        var8 = arg0;\n        var9 = 0x05;\n        var7 = func_0835(var8, var9);\n        var6 = func_0DF7(var7);\n        var2 = var6;\n        var6 = 0x0e0a;\n        var7 = arg0;\n        var8 = var1;\n        var6 = func_1D7C(var7, var8);\n        var temp0 = var6;\n        var3 = temp0;\n        var6 = 0x0e16;\n        var7 = var3;\n        var8 = var2;\n        var6 = func_1D7C(var7, var8);\n        var temp1 = var6;\n        var4 = temp1;\n        var6 = 0x0e21;\n        var7 = var4;\n        return func_1D95(var7);\n    }\n    \n    function func_0DE0(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0DF7(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x08]; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (arg0 > storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var var6 = 0x0e5d;\n        var var7 = arg0;\n        var6 = func_1E40(var7);\n        var temp0 = var6;\n        var1 = temp0;\n        var6 = 0x0e7d;\n        var7 = 0x0e76;\n        var var8 = var1;\n        var var9 = 0x0e6e;\n        var9 = exitFee();\n        var7 = func_0E6E(var8, var9);\n        var6 = func_0E76(var7);\n        var2 = var6;\n        var6 = 0x0e94;\n        var7 = 0x0e8d;\n        var8 = var1;\n        var9 = 0x05;\n        var7 = func_0835(var8, var9);\n        var6 = func_0E8D(var7);\n        var3 = var6;\n        var6 = 0x0ea0;\n        var7 = var1;\n        var8 = var2;\n        var6 = func_1D7C(var7, var8);\n        var temp1 = var6;\n        var4 = temp1;\n        var6 = 0x0eac;\n        var7 = var4;\n        var8 = var3;\n        return func_1D7C(var7, var8);\n    }\n    \n    function func_0E6E(var arg0, var arg1) returns (var r0) {\n        arg1 = arg1 & 0xff;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0E76(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0E8D(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function IDD() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (msg.sender != storage[var2] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var3 = 0x0f3e;\n        var var4 = address(this).balance;\n        var var5 = storage[0x03];\n        var3 = func_1D7C(var4, var5);\n        var temp0 = var3;\n        var0 = temp0;\n        var3 = 0x0f58;\n        var4 = 0x0f51;\n        var5 = var0;\n        var var6 = 0xff & 0x01;\n        var4 = func_0835(var5, var6);\n        var3 = func_0F51(var4);\n        var temp1 = var3;\n        var1 = temp1;\n        var3 = 0x0f65;\n        var4 = var1;\n        var5 = 0x0a;\n        var3 = func_081A(var4, var5);\n        var temp2 = var3;\n        var2 = temp2;\n        storage[0x03] = storage[0x03] - var2;\n        var3 = 0x0f82;\n        var4 = var2;\n        var5 = 0x00;\n        var3 = func_1EEB(var4, var5);\n    }\n    \n    function func_0F51(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x0f9c;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x0fb5;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var2;\n        var temp1 = var0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var1 = temp3;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(temp1 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var1 * 0x08fc).value(var1)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n        var2 = !temp5;\n    \n        if (!var2) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var1;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (storage[0x08] != 0x00) {\n            var var6 = 0x116a;\n            var var7 = 0x0de0b6b3a7640000;\n            var6 = func_1E40(var7);\n            var temp0 = var6;\n            var1 = temp0;\n            var6 = 0x118a;\n            var7 = 0x1183;\n            var var8 = var1;\n            var var9 = 0x117b;\n            var9 = exitFee();\n            var7 = func_117B(var8, var9);\n            var6 = func_1183(var7);\n            var2 = var6;\n            var6 = 0x11a1;\n            var7 = 0x119a;\n            var8 = var1;\n            var9 = 0x05;\n            var7 = func_0835(var8, var9);\n            var6 = func_119A(var7);\n            var3 = var6;\n            var6 = 0x11ad;\n            var7 = var1;\n            var8 = var2;\n            var6 = func_1D7C(var7, var8);\n            var temp1 = var6;\n            var4 = temp1;\n            var6 = 0x11b9;\n            var7 = var4;\n            var8 = var3;\n            var6 = func_1D7C(var7, var8);\n            var5 = var6;\n            var0 = var5;\n        \n        label_11BF:\n            return var0;\n        } else {\n            var0 = 0x174876e800 - 0x02540be400;\n            goto label_11BF;\n        }\n    }\n    \n    function func_117B(var arg0, var arg1) returns (var r0) {\n        arg1 = arg1 & 0xff;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1183(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_119A(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x04]; }\n    \n    function DivsAddon() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x11da;\n        var var2 = msg.value;\n        var var3 = 0x00;\n        var1 = func_1EEB(var2, var3);\n        return var0;\n    }\n    \n    function exitFee() returns (var r0) { return 0x18; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x1249;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x11fb;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (storage[0x08] != 0x00) {\n            var var6 = 0x12f4;\n            var var7 = 0x0de0b6b3a7640000;\n            var6 = func_1E40(var7);\n            var temp0 = var6;\n            var1 = temp0;\n            var6 = 0x130e;\n            var7 = 0x1307;\n            var var8 = var1;\n            var var9 = 0xff & 0x1d;\n            var7 = func_0835(var8, var9);\n            var6 = func_1307(var7);\n            var2 = var6;\n            var6 = 0x1325;\n            var7 = 0x131e;\n            var8 = var1;\n            var9 = 0x05;\n            var7 = func_0835(var8, var9);\n            var6 = func_131E(var7);\n            var3 = var6;\n            var6 = 0x1331;\n            var7 = var1;\n            var8 = var2;\n            var6 = func_1E22(var7, var8);\n            var temp1 = var6;\n            var4 = temp1;\n            var6 = 0x133d;\n            var7 = var4;\n            var8 = var3;\n            var6 = func_1E22(var7, var8);\n            var5 = var6;\n            var0 = var5;\n        \n        label_1343:\n            return var0;\n        } else {\n            var0 = 0x174876e800 + 0x02540be400;\n            goto label_1343;\n        }\n    }\n    \n    function func_1307(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_131E(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function InterestPool_() returns (var r0) { return storage[0x03]; }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x1385;\n        var var3 = var1;\n        return balanceOf(var3);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1421:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1418; }\n        \n        label_1404:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1404; }\n        \n        label_1418:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1421;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1421;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x143a;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var5 = 0x00;\n        var6 = 0x14a3;\n        var var7 = 0x01;\n        var6 = myDividends(var7);\n    \n        if (var6 <= var5) {\n        label_14B2:\n            var5 = 0x14ca;\n            var6 = 0x14c3;\n            var7 = arg1;\n            var var8 = 0xff & 0x01;\n            var6 = func_0835(var7, var8);\n            var5 = func_14C3(var6);\n            var temp0 = var5;\n            var2 = temp0;\n            var5 = 0x14d6;\n            var6 = arg1;\n            var7 = var2;\n            var5 = func_1D7C(var6, var7);\n            var3 = var5;\n            var5 = 0x14e1;\n            var6 = var2;\n            var5 = func_1E40(var6);\n            var4 = var5;\n            var5 = 0x14ef;\n            var6 = storage[0x08];\n            var7 = var2;\n            var5 = func_1D7C(var6, var7);\n            storage[0x08] = var5;\n            var5 = 0x153e;\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = arg1;\n            var5 = func_1D7C(var6, var7);\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            var5 = 0x15ca;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = var3;\n            var5 = func_1E22(var6, var7);\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = storage[temp2] - storage[0x09] * arg1;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] + storage[0x09] * var3;\n            var5 = 0x16d3;\n            var6 = storage[0x09];\n            var7 = storage[0x08];\n            var8 = var4 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_16CD(var6, var7, var8);\n            storage[0x09] = var5;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var3;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            var5 = 0x14b1;\n            withdraw();\n            goto label_14B2;\n        }\n    }\n    \n    function func_14C3(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_16CD(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1E22(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var11 = var10;\n        var var12 = 0x00;\n        var var13 = 0x1768;\n        var13 = myTokens();\n    \n        if (var13 <= var12) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var12 = 0x17d1;\n        var13 = var1;\n        var12 = func_1E40(var13);\n        var temp0 = var12;\n        var2 = temp0;\n        var12 = 0x17f1;\n        var13 = 0x17ea;\n        var var14 = var2;\n        var var15 = 0x17e2;\n        var15 = exitFee();\n        var13 = func_17E2(var14, var15);\n        var12 = func_17EA(var13);\n        var3 = var12;\n        var12 = 0x1808;\n        var13 = 0x1801;\n        var14 = var2;\n        var15 = 0x05;\n        var13 = func_0835(var14, var15);\n        var12 = func_1801(var13);\n        var4 = var12;\n        var12 = 0x1814;\n        var13 = var2;\n        var14 = var3;\n        var12 = func_1D7C(var13, var14);\n        var temp1 = var12;\n        var5 = temp1;\n        var12 = 0x1820;\n        var13 = var5;\n        var14 = var4;\n        var12 = func_1D7C(var13, var14);\n        var6 = var12;\n        var12 = 0x183a;\n        var13 = 0x1833;\n        var14 = var2;\n        var15 = 0xff & 0x0f;\n        var13 = func_0835(var14, var15);\n        var12 = func_1833(var13);\n        var temp2 = var12;\n        var7 = temp2;\n        var12 = 0x1847;\n        var13 = var7;\n        var14 = 0x0a;\n        var12 = func_081A(var13, var14);\n        var8 = var12;\n        var12 = 0x1861;\n        var13 = 0x185a;\n        var14 = var2;\n        var15 = 0xff & 0x23;\n        var13 = func_0835(var14, var15);\n        var12 = func_185A(var13);\n        var temp3 = var12;\n        var9 = temp3;\n        var12 = 0x186e;\n        var13 = var9;\n        var14 = 0x0a;\n        var12 = func_081A(var13, var14);\n        var10 = var12;\n        storage[0x03] = storage[0x03] + var10;\n        var12 = 0x188c;\n        var13 = storage[0x08];\n        var14 = var1;\n        var12 = func_1D7C(var13, var14);\n        storage[0x08] = var12;\n        var12 = 0x18db;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var13 = storage[keccak256(memory[0x00:0x40])];\n        var14 = var1;\n        var12 = func_1D7C(var13, var14);\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var12;\n        var temp4 = var8;\n        var temp5 = memory[0x40:0x60];\n        var temp6;\n        temp6, memory[temp5:temp5 + 0x00] = address(storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp5:temp5 + memory[0x40:0x60] - temp5]);\n        var12 = !temp6;\n    \n        if (!var12) {\n            var11 = storage[0x09] * var1 + var6 * 0x010000000000000000;\n            memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            storage[temp7] = storage[temp7] - var11;\n        \n            if (storage[0x08] <= 0x00) {\n            label_1A1E:\n                var12 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var13 = 0x8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e;\n                var14 = var1;\n                var15 = var6;\n                var var16 = block.timestamp;\n                var var17 = 0x1a61;\n                var17 = buyPrice();\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var14;\n                var temp9 = temp8 + 0x20;\n                memory[temp9:temp9 + 0x20] = var15;\n                var temp10 = temp9 + 0x20;\n                memory[temp10:temp10 + 0x20] = var16;\n                var temp11 = temp10 + 0x20;\n                memory[temp11:temp11 + 0x20] = var17;\n                var temp12 = memory[0x40:0x60];\n                log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [stack[-5], stack[-6]]);\n                return;\n            } else {\n                var12 = 0x1a17;\n                var13 = storage[0x09];\n                var14 = storage[0x08];\n                var15 = var3 * 0x010000000000000000;\n            \n                if (!var14) { assert(); }\n            \n                var12 = func_1A11(var13, var14, var15);\n                storage[0x09] = var12;\n                goto label_1A1E;\n            }\n        } else {\n            var temp13 = returndata.length;\n            memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_17E2(var arg0, var arg1) returns (var r0) {\n        arg1 = arg1 & 0xff;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_17EA(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1801(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1833(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_185A(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1A11(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1E22(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_1AF5:\n            var var2 = 0x1afd;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x1af4;\n            var var3 = var1;\n            sell(var3);\n            goto label_1AF5;\n        }\n    }\n    \n    function buy(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x1b33;\n        var var6 = 0xff & 0x0f;\n        var var7 = 0x1b25;\n        var var8 = msg.value;\n        var var9 = 0x64;\n        var7 = func_081A(var8, var9);\n        var5 = func_1B25(var6, var7);\n        var temp0 = var5;\n        var1 = temp0;\n        var5 = 0x1b40;\n        var6 = var1;\n        var7 = 0x0a;\n        var5 = func_081A(var6, var7);\n        var temp1 = var5;\n        var2 = temp1;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var2 * 0x08fc).value(var2)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        var5 = !temp3;\n    \n        if (!var5) {\n            var5 = 0x1bd5;\n            var6 = 0xff & 0x23;\n            var7 = 0x1bc7;\n            var8 = msg.value;\n            var9 = 0x64;\n            var7 = func_081A(var8, var9);\n            var5 = func_1BC7(var6, var7);\n            var temp4 = var5;\n            var3 = temp4;\n            var5 = 0x1be2;\n            var6 = var3;\n            var7 = 0x0a;\n            var5 = func_081A(var6, var7);\n            var4 = var5;\n            storage[0x03] = storage[0x03] + var4;\n            var5 = 0x1bfe;\n            var6 = msg.value;\n            var7 = arg0;\n            var5 = func_0870(var6, var7);\n            return var0;\n        } else {\n            var temp5 = returndata.length;\n            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_1B25(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1BC7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x1c18;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x1c2e;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        var temp0 = var3;\n        var temp1 = msg.sender;\n        var1 = temp1;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var0 = temp3;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var3 = 0x1d1f;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_0870(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1D7C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1D95(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var temp0 = 0x174876e800 * 0x0de0b6b3a7640000;\n        var var1 = temp0;\n        var var3 = storage[0x08];\n        var var4 = 0x02540be400;\n        var var5 = 0x1e0b;\n        var var6 = 0x1e05;\n        var var7 = var1 ** 0x02 + arg0 * 0x0de0b6b3a7640000 * 0x02 * 0x02540be400 * 0x0de0b6b3a7640000 + storage[0x08] ** 0x02 * 0x02540be400 ** 0x02 + var1 * 0x02 * 0x02540be400 * storage[0x08];\n        var6 = func_22D8(var7);\n        var5 = func_1E05(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_1E05(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1D7C(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E22(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1E40(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var3 = 0x00;\n        var var1 = arg0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x08] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x1ed4;\n        var var6 = var1 - 0x0de0b6b3a7640000;\n        var var7 = 0x02540be400;\n        var var8 = 0x0de0b6b3a7640000;\n        var var9 = var2;\n    \n        if (!var8) { assert(); }\n    \n        var5 = func_1E92(var1, var6, var7, var8, var9);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_1E92(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        arg1 = (arg4 / arg3 * 0x02540be400 + 0x174876e800) - arg2 * arg1;\n        arg2 = 0x02;\n        arg3 = 0x0de0b6b3a7640000;\n        var temp0 = arg0;\n        arg4 = temp0 ** 0x02 - temp0;\n    \n        if (!arg3) { assert(); }\n    \n        arg3 = arg4 / arg3 * 0x02540be400;\n    \n        if (!arg2) { assert(); }\n    \n        arg2 = arg3 / arg2;\n        r0 = func_1D7C(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1EEB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var1 = msg.sender;\n        var var9 = 0x1f11;\n        var var10 = 0x1f0a;\n        var var11 = arg0;\n        var var12 = 0x64;\n        var10 = func_0835(var11, var12);\n        var9 = func_1F0A(var10);\n        var temp0 = var9;\n        var2 = temp0;\n        var9 = 0x1f2b;\n        var10 = 0x1f24;\n        var11 = var2;\n        var12 = 0xff & 0x08;\n        var10 = func_0835(var11, var12);\n        var9 = func_1F24(var10);\n        var temp1 = var9;\n        var3 = temp1;\n        var9 = 0x1f37;\n        var10 = var2;\n        var11 = var3;\n        var9 = func_1D7C(var10, var11);\n        var4 = var9;\n        var9 = 0x1f43;\n        var10 = arg0;\n        var11 = var2;\n        var9 = func_1D7C(var10, var11);\n        var temp2 = var9;\n        var5 = temp2;\n        var9 = 0x1f4e;\n        var10 = var5;\n        var9 = func_1D95(var10);\n        var6 = var9;\n        var7 = var4 * 0x010000000000000000;\n        var temp3 = var6 >= 0x00;\n        var9 = temp3;\n    \n        if (!var9) {\n        label_1F7C:\n        \n            if (!var9) { revert(memory[0x00:0x00]); }\n        \n            var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        \n            if (var9) {\n                var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            \n                if (!var9) { goto label_203D; }\n                else { goto label_1FF7; }\n            } else if (!var9) {\n            label_203D:\n            \n                if (!var9) {\n                label_20D3:\n                    var9 = 0x20dd;\n                    var10 = var4;\n                    var11 = var3;\n                    var9 = func_1E22(var10, var11);\n                    var4 = var9;\n                    var7 = var4 * 0x010000000000000000;\n                \n                    if (storage[0x08] <= 0x00) {\n                    label_2159:\n                        storage[0x08] = var6;\n                        var9 = 0x21aa;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = var6;\n                        var9 = func_1E22(var10, var11);\n                    \n                    label_21AA:\n                        var temp4 = var1;\n                        memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                        var8 = storage[0x09] * var6 - var7;\n                        memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x07;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] + var8;\n                        var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var10 = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var11 = 0x8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab;\n                        var12 = arg0;\n                        var var13 = var6;\n                        var var14 = block.timestamp;\n                        var var15 = 0x229d;\n                        var15 = buyPrice();\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = var12;\n                        var temp7 = temp6 + 0x20;\n                        memory[temp7:temp7 + 0x20] = var13;\n                        var temp8 = temp7 + 0x20;\n                        memory[temp8:temp8 + 0x20] = var14;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = var15;\n                        var temp10 = memory[0x40:0x60];\n                        log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [stack[-5], stack[-6], stack[-7]]);\n                        return var6;\n                    } else {\n                    label_20FA:\n                        var9 = 0x2105;\n                        var10 = storage[0x08];\n                        var11 = var6;\n                        var9 = func_1E22(var10, var11);\n                        storage[0x08] = var9;\n                        var9 = storage[0x08];\n                        var10 = var4 * 0x010000000000000000;\n                    \n                        if (!var9) { assert(); }\n                    \n                        storage[0x09] = storage[0x09] + var10 / var9;\n                        var9 = storage[0x08];\n                        var10 = var4 * 0x010000000000000000;\n                    \n                        if (!var9) { assert(); }\n                    \n                        var temp11 = var7;\n                        var7 = temp11 - (temp11 - var6 * (var10 / var9));\n                        var9 = 0x21aa;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = var6;\n                        var9 = func_1E22(var10, var11);\n                        goto label_21AA;\n                    }\n                } else {\n                label_2043:\n                    var9 = 0x208b;\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x06;\n                    var10 = storage[keccak256(memory[0x00:0x40])];\n                    var11 = var3;\n                    var9 = func_1E22(var10, var11);\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x06;\n                    storage[keccak256(memory[0x00:0x40])] = var9;\n                \n                    if (storage[0x08] <= 0x00) { goto label_2159; }\n                    else { goto label_20FA; }\n                }\n            } else {\n            label_1FF7:\n                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x05;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < storage[0x04]) { goto label_20D3; }\n                else { goto label_2043; }\n            }\n        } else {\n            var9 = storage[0x08];\n            var10 = 0x1f79;\n            var11 = var6;\n            var12 = storage[0x08];\n            var10 = func_1E22(var11, var12);\n            var9 = var10 >= var9;\n            goto label_1F7C;\n        }\n    }\n    \n    function func_1F0A(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1F24(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_22D8(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = arg0 + 0x01;\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_231D:\n            return var0;\n        } else {\n        label_22FA:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_231D; }\n            else { goto label_22FA; }\n        }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0148:\n            var var0 = 0x00;\n            var var1 = var0;\n            var var2 = 0x00;\n            var var3 = var2;\n            var var4 = 0x0178;\n            var var5 = 0xff & 0x0f;\n            var var6 = 0x016a;\n            var var7 = msg.value;\n            var var8 = 0x64;\n            var6 = func_081A(var7, var8);\n            var4 = func_016A(var5, var6);\n            var temp0 = var4;\n            var0 = temp0;\n            var4 = 0x0185;\n            var5 = var0;\n            var6 = 0x0a;\n            var4 = func_081A(var5, var6);\n            var temp1 = var4;\n            var1 = temp1;\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x00] = address(storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var1 * 0x08fc).value(var1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n            var4 = !temp3;\n        \n            if (!var4) {\n                var4 = 0x021a;\n                var5 = 0xff & 0x23;\n                var6 = 0x020c;\n                var7 = msg.value;\n                var8 = 0x64;\n                var6 = func_081A(var7, var8);\n                var4 = func_020C(var5, var6);\n                var temp4 = var4;\n                var2 = temp4;\n                var4 = 0x0227;\n                var5 = var2;\n                var6 = 0x0a;\n                var4 = func_081A(var5, var6);\n                var3 = var4;\n                storage[0x03] = storage[0x03] + var3;\n                var4 = 0x0244;\n                var5 = msg.value;\n                var6 = 0x00;\n                var4 = func_0870(var5, var6);\n                stop();\n            } else {\n                var temp5 = returndata.length;\n                memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = dividendsOf(var2);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02b7;\n                var2 = name();\n                var temp8 = memory[0x40:0x60];\n                var3 = temp8;\n                var4 = var3;\n                var temp9 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp9 - var4;\n                var temp10 = var2;\n                memory[temp9:temp9 + 0x20] = memory[temp10:temp10 + 0x20];\n                var5 = temp9 + 0x20;\n                var6 = temp10 + 0x20;\n                var7 = memory[temp10:temp10 + 0x20];\n                var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_02F7:\n                    var temp11 = var7;\n                    var5 = temp11 + var5;\n                    var6 = temp11 & 0x1f;\n                \n                    if (!var6) {\n                        var temp12 = memory[0x40:0x60];\n                        return memory[temp12:temp12 + var5 - temp12];\n                    } else {\n                        var temp13 = var6;\n                        var temp14 = var5 - temp13;\n                        memory[temp14:temp14 + 0x20] = ~(0x0100 ** (0x20 - temp13) - 0x01) & memory[temp14:temp14 + 0x20];\n                        var temp15 = memory[0x40:0x60];\n                        return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n                    }\n                } else {\n                label_02E5:\n                    var temp16 = var11;\n                    memory[var9 + temp16:var9 + temp16 + 0x20] = memory[var10 + temp16:var10 + temp16 + 0x20];\n                    var11 = temp16 + 0x20;\n                \n                    if (var11 >= var8) { goto label_02F7; }\n                    else { goto label_02E5; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035d;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateTokensReceived(var2);\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var1;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0388;\n                var1 = totalSupply();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c9;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x2858507f) {\n                // Dispatch table entry for IDD()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f4;\n                IDD();\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040b;\n                var2 = decimals();\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2 & 0xff;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x043c;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0453;\n                var1 = sellPrice();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047e;\n                var2 = stakingRequirement();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x56d5938f) {\n                // Dispatch table entry for DivsAddon()\n                var1 = 0x049c;\n                var1 = DivsAddon();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var1;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x6284ae41) {\n                // Dispatch table entry for exitFee()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04c7;\n                var1 = exitFee();\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var1 & 0xff;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0510;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var1;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x053b;\n                var1 = totalEthereumBalance();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var1;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0592;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = var1;\n                var temp38 = memory[0x40:0x60];\n                return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05bd;\n                var1 = buyPrice();\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = var1;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05e8;\n                var2 = owner();\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0x92f8def2) {\n                // Dispatch table entry for InterestPool_()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x063f;\n                var2 = InterestPool_();\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = var2;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x066a;\n                var1 = myTokens();\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var1;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0695;\n                var2 = symbol();\n                var temp47 = memory[0x40:0x60];\n                var3 = temp47;\n                var4 = var3;\n                var temp48 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp48 - var4;\n                var temp49 = var2;\n                memory[temp48:temp48 + 0x20] = memory[temp49:temp49 + 0x20];\n                var5 = temp48 + 0x20;\n                var6 = temp49 + 0x20;\n                var7 = memory[temp49:temp49 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_06D5:\n                    var temp50 = var7;\n                    var5 = temp50 + var5;\n                    var6 = temp50 & 0x1f;\n                \n                    if (!var6) {\n                        var temp51 = memory[0x40:0x60];\n                        return memory[temp51:temp51 + var5 - temp51];\n                    } else {\n                        var temp52 = var6;\n                        var temp53 = var5 - temp52;\n                        memory[temp53:temp53 + 0x20] = ~(0x0100 ** (0x20 - temp52) - 0x01) & memory[temp53:temp53 + 0x20];\n                        var temp54 = memory[0x40:0x60];\n                        return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n                    }\n                } else {\n                label_06C3:\n                    var temp55 = var11;\n                    memory[var9 + temp55:var9 + temp55 + 0x20] = memory[var10 + temp55:var10 + temp55 + 0x20];\n                    var11 = temp55 + 0x20;\n                \n                    if (var11 >= var8) { goto label_06D5; }\n                    else { goto label_06C3; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x075b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp56 = memory[0x40:0x60];\n                memory[temp56:temp56 + 0x20] = !!var1;\n                var temp57 = memory[0x40:0x60];\n                return memory[temp57:temp57 + (temp56 + 0x20) - temp57];\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07a0;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07b7;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x07ed;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = buy(var2);\n                var temp58 = memory[0x40:0x60];\n                memory[temp58:temp58 + 0x20] = var1;\n                var temp59 = memory[0x40:0x60];\n                return memory[temp59:temp59 + (temp58 + 0x20) - temp59];\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0818;\n                reinvest();\n                stop();\n            } else { goto label_0148; }\n        }\n    }\n    \n    function func_016A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_020C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_081A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0835(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 == 0x00) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = temp0 * arg1;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0870(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var1 = msg.sender;\n        var var11 = 0x089c;\n        var var12 = 0x0895;\n        var var13 = arg0;\n        var var14 = 0xff & 0x1d;\n        var12 = func_0835(var13, var14);\n        var11 = func_0895(var12);\n        var temp0 = var11;\n        var2 = temp0;\n        var11 = 0x08b6;\n        var12 = 0x08af;\n        var13 = var2;\n        var14 = 0xff & 0x08;\n        var12 = func_0835(var13, var14);\n        var11 = func_08AF(var12);\n        var3 = var11;\n        var11 = 0x08cd;\n        var12 = 0x08c6;\n        var13 = arg0;\n        var14 = 0x05;\n        var12 = func_0835(var13, var14);\n        var11 = func_08C6(var12);\n        var4 = var11;\n        var11 = 0x08d9;\n        var12 = var2;\n        var13 = var3;\n        var11 = func_1D7C(var12, var13);\n        var temp1 = var11;\n        var5 = temp1;\n        var11 = 0x08e5;\n        var12 = var5;\n        var13 = var4;\n        var11 = func_1D7C(var12, var13);\n        var6 = var11;\n        var11 = 0x08f1;\n        var12 = arg0;\n        var13 = var2;\n        var11 = func_1D7C(var12, var13);\n        var temp2 = var11;\n        var7 = temp2;\n        var11 = 0x08fc;\n        var12 = var7;\n        var11 = func_1D95(var12);\n        var8 = var11;\n        var9 = var6 * 0x010000000000000000;\n        var temp3 = var8 > 0x00;\n        var11 = temp3;\n    \n        if (!var11) {\n        label_0928:\n        \n            if (!var11) { revert(memory[0x00:0x00]); }\n        \n            var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        \n            if (var11) {\n                var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            \n                if (!var11) { goto label_09E9; }\n                else { goto label_09A3; }\n            } else if (!var11) {\n            label_09E9:\n            \n                if (!var11) {\n                label_0A7F:\n                    var11 = 0x0a89;\n                    var12 = var6;\n                    var13 = var3;\n                    var11 = func_1E22(var12, var13);\n                    var6 = var11;\n                    var9 = var6 * 0x010000000000000000;\n                \n                    if (storage[0x08] <= 0x00) {\n                    label_0B05:\n                        storage[0x08] = var8;\n                        var11 = 0x0b56;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var12 = storage[keccak256(memory[0x00:0x40])];\n                        var13 = var8;\n                        var11 = func_1E22(var12, var13);\n                    \n                    label_0B56:\n                        var temp4 = var1;\n                        memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40])] = var11;\n                        var10 = storage[0x09] * var8 - var9;\n                        memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x07;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] + var10;\n                        var11 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var12 = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var13 = 0x8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab;\n                        var14 = arg0;\n                        var var15 = var8;\n                        var var16 = block.timestamp;\n                        var var17 = 0x0c49;\n                        var17 = buyPrice();\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = var14;\n                        var temp7 = temp6 + 0x20;\n                        memory[temp7:temp7 + 0x20] = var15;\n                        var temp8 = temp7 + 0x20;\n                        memory[temp8:temp8 + 0x20] = var16;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = var17;\n                        var temp10 = memory[0x40:0x60];\n                        log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [stack[-5], stack[-6], stack[-7]]);\n                        return var8;\n                    } else {\n                    label_0AA6:\n                        var11 = 0x0ab1;\n                        var12 = storage[0x08];\n                        var13 = var8;\n                        var11 = func_1E22(var12, var13);\n                        storage[0x08] = var11;\n                        var11 = storage[0x08];\n                        var12 = var6 * 0x010000000000000000;\n                    \n                        if (!var11) { assert(); }\n                    \n                        storage[0x09] = storage[0x09] + var12 / var11;\n                        var11 = storage[0x08];\n                        var12 = var6 * 0x010000000000000000;\n                    \n                        if (!var11) { assert(); }\n                    \n                        var temp11 = var9;\n                        var9 = temp11 - (temp11 - var8 * (var12 / var11));\n                        var11 = 0x0b56;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var12 = storage[keccak256(memory[0x00:0x40])];\n                        var13 = var8;\n                        var11 = func_1E22(var12, var13);\n                        goto label_0B56;\n                    }\n                } else {\n                label_09EF:\n                    var11 = 0x0a37;\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x06;\n                    var12 = storage[keccak256(memory[0x00:0x40])];\n                    var13 = var3;\n                    var11 = func_1E22(var12, var13);\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x06;\n                    storage[keccak256(memory[0x00:0x40])] = var11;\n                \n                    if (storage[0x08] <= 0x00) { goto label_0B05; }\n                    else { goto label_0AA6; }\n                }\n            } else {\n            label_09A3:\n                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x05;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < storage[0x04]) { goto label_0A7F; }\n                else { goto label_09EF; }\n            }\n        } else {\n            var11 = storage[0x08];\n            var12 = 0x0926;\n            var13 = var8;\n            var14 = storage[0x08];\n            var12 = func_1E22(var13, var14);\n            var11 = var12 > var11;\n            goto label_0928;\n        }\n    }\n    \n    function func_0895(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_08AF(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_08C6(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x010000000000000000;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var var2 = storage[0x09] * storage[keccak256(memory[0x00:0x40])] - temp1;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0DBE:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0DB5; }\n        \n        label_0DA1:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0DA1; }\n        \n        label_0DB5:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0DBE;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0DBE;\n        }\n    }\n    \n    function calculateTokensReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0de7;\n        var var7 = 0x0de0;\n        var var8 = arg0;\n        var var9 = 0xff & 0x1d;\n        var7 = func_0835(var8, var9);\n        var6 = func_0DE0(var7);\n        var1 = var6;\n        var6 = 0x0dfe;\n        var7 = 0x0df7;\n        var8 = arg0;\n        var9 = 0x05;\n        var7 = func_0835(var8, var9);\n        var6 = func_0DF7(var7);\n        var2 = var6;\n        var6 = 0x0e0a;\n        var7 = arg0;\n        var8 = var1;\n        var6 = func_1D7C(var7, var8);\n        var temp0 = var6;\n        var3 = temp0;\n        var6 = 0x0e16;\n        var7 = var3;\n        var8 = var2;\n        var6 = func_1D7C(var7, var8);\n        var temp1 = var6;\n        var4 = temp1;\n        var6 = 0x0e21;\n        var7 = var4;\n        return func_1D95(var7);\n    }\n    \n    function func_0DE0(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0DF7(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x08]; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (arg0 > storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var var6 = 0x0e5d;\n        var var7 = arg0;\n        var6 = func_1E40(var7);\n        var temp0 = var6;\n        var1 = temp0;\n        var6 = 0x0e7d;\n        var7 = 0x0e76;\n        var var8 = var1;\n        var var9 = 0x0e6e;\n        var9 = exitFee();\n        var7 = func_0E6E(var8, var9);\n        var6 = func_0E76(var7);\n        var2 = var6;\n        var6 = 0x0e94;\n        var7 = 0x0e8d;\n        var8 = var1;\n        var9 = 0x05;\n        var7 = func_0835(var8, var9);\n        var6 = func_0E8D(var7);\n        var3 = var6;\n        var6 = 0x0ea0;\n        var7 = var1;\n        var8 = var2;\n        var6 = func_1D7C(var7, var8);\n        var temp1 = var6;\n        var4 = temp1;\n        var6 = 0x0eac;\n        var7 = var4;\n        var8 = var3;\n        return func_1D7C(var7, var8);\n    }\n    \n    function func_0E6E(var arg0, var arg1) returns (var r0) {\n        arg1 = arg1 & 0xff;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0E76(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0E8D(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function IDD() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (msg.sender != storage[var2] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var3 = 0x0f3e;\n        var var4 = address(this).balance;\n        var var5 = storage[0x03];\n        var3 = func_1D7C(var4, var5);\n        var temp0 = var3;\n        var0 = temp0;\n        var3 = 0x0f58;\n        var4 = 0x0f51;\n        var5 = var0;\n        var var6 = 0xff & 0x01;\n        var4 = func_0835(var5, var6);\n        var3 = func_0F51(var4);\n        var temp1 = var3;\n        var1 = temp1;\n        var3 = 0x0f65;\n        var4 = var1;\n        var5 = 0x0a;\n        var3 = func_081A(var4, var5);\n        var temp2 = var3;\n        var2 = temp2;\n        storage[0x03] = storage[0x03] - var2;\n        var3 = 0x0f82;\n        var4 = var2;\n        var5 = 0x00;\n        var3 = func_1EEB(var4, var5);\n    }\n    \n    function func_0F51(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x0f9c;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x0fb5;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var2;\n        var temp1 = var0;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var1 = temp3;\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(temp1 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var1 * 0x08fc).value(var1)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n        var2 = !temp5;\n    \n        if (!var2) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var1;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (storage[0x08] != 0x00) {\n            var var6 = 0x116a;\n            var var7 = 0x0de0b6b3a7640000;\n            var6 = func_1E40(var7);\n            var temp0 = var6;\n            var1 = temp0;\n            var6 = 0x118a;\n            var7 = 0x1183;\n            var var8 = var1;\n            var var9 = 0x117b;\n            var9 = exitFee();\n            var7 = func_117B(var8, var9);\n            var6 = func_1183(var7);\n            var2 = var6;\n            var6 = 0x11a1;\n            var7 = 0x119a;\n            var8 = var1;\n            var9 = 0x05;\n            var7 = func_0835(var8, var9);\n            var6 = func_119A(var7);\n            var3 = var6;\n            var6 = 0x11ad;\n            var7 = var1;\n            var8 = var2;\n            var6 = func_1D7C(var7, var8);\n            var temp1 = var6;\n            var4 = temp1;\n            var6 = 0x11b9;\n            var7 = var4;\n            var8 = var3;\n            var6 = func_1D7C(var7, var8);\n            var5 = var6;\n            var0 = var5;\n        \n        label_11BF:\n            return var0;\n        } else {\n            var0 = 0x174876e800 - 0x02540be400;\n            goto label_11BF;\n        }\n    }\n    \n    function func_117B(var arg0, var arg1) returns (var r0) {\n        arg1 = arg1 & 0xff;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1183(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_119A(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x04]; }\n    \n    function DivsAddon() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x11da;\n        var var2 = msg.value;\n        var var3 = 0x00;\n        var1 = func_1EEB(var2, var3);\n        return var0;\n    }\n    \n    function exitFee() returns (var r0) { return 0x18; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x1249;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x11fb;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (storage[0x08] != 0x00) {\n            var var6 = 0x12f4;\n            var var7 = 0x0de0b6b3a7640000;\n            var6 = func_1E40(var7);\n            var temp0 = var6;\n            var1 = temp0;\n            var6 = 0x130e;\n            var7 = 0x1307;\n            var var8 = var1;\n            var var9 = 0xff & 0x1d;\n            var7 = func_0835(var8, var9);\n            var6 = func_1307(var7);\n            var2 = var6;\n            var6 = 0x1325;\n            var7 = 0x131e;\n            var8 = var1;\n            var9 = 0x05;\n            var7 = func_0835(var8, var9);\n            var6 = func_131E(var7);\n            var3 = var6;\n            var6 = 0x1331;\n            var7 = var1;\n            var8 = var2;\n            var6 = func_1E22(var7, var8);\n            var temp1 = var6;\n            var4 = temp1;\n            var6 = 0x133d;\n            var7 = var4;\n            var8 = var3;\n            var6 = func_1E22(var7, var8);\n            var5 = var6;\n            var0 = var5;\n        \n        label_1343:\n            return var0;\n        } else {\n            var0 = 0x174876e800 + 0x02540be400;\n            goto label_1343;\n        }\n    }\n    \n    function func_1307(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_131E(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function InterestPool_() returns (var r0) { return storage[0x03]; }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x1385;\n        var var3 = var1;\n        return balanceOf(var3);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1421:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1418; }\n        \n        label_1404:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1404; }\n        \n        label_1418:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1421;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1421;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x143a;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var5 = 0x00;\n        var6 = 0x14a3;\n        var var7 = 0x01;\n        var6 = myDividends(var7);\n    \n        if (var6 <= var5) {\n        label_14B2:\n            var5 = 0x14ca;\n            var6 = 0x14c3;\n            var7 = arg1;\n            var var8 = 0xff & 0x01;\n            var6 = func_0835(var7, var8);\n            var5 = func_14C3(var6);\n            var temp0 = var5;\n            var2 = temp0;\n            var5 = 0x14d6;\n            var6 = arg1;\n            var7 = var2;\n            var5 = func_1D7C(var6, var7);\n            var3 = var5;\n            var5 = 0x14e1;\n            var6 = var2;\n            var5 = func_1E40(var6);\n            var4 = var5;\n            var5 = 0x14ef;\n            var6 = storage[0x08];\n            var7 = var2;\n            var5 = func_1D7C(var6, var7);\n            storage[0x08] = var5;\n            var5 = 0x153e;\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = arg1;\n            var5 = func_1D7C(var6, var7);\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            var5 = 0x15ca;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = var3;\n            var5 = func_1E22(var6, var7);\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = storage[temp2] - storage[0x09] * arg1;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] + storage[0x09] * var3;\n            var5 = 0x16d3;\n            var6 = storage[0x09];\n            var7 = storage[0x08];\n            var8 = var4 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_16CD(var6, var7, var8);\n            storage[0x09] = var5;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var3;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            var5 = 0x14b1;\n            withdraw();\n            goto label_14B2;\n        }\n    }\n    \n    function func_14C3(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_16CD(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1E22(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var11 = var10;\n        var var12 = 0x00;\n        var var13 = 0x1768;\n        var13 = myTokens();\n    \n        if (var13 <= var12) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var12 = 0x17d1;\n        var13 = var1;\n        var12 = func_1E40(var13);\n        var temp0 = var12;\n        var2 = temp0;\n        var12 = 0x17f1;\n        var13 = 0x17ea;\n        var var14 = var2;\n        var var15 = 0x17e2;\n        var15 = exitFee();\n        var13 = func_17E2(var14, var15);\n        var12 = func_17EA(var13);\n        var3 = var12;\n        var12 = 0x1808;\n        var13 = 0x1801;\n        var14 = var2;\n        var15 = 0x05;\n        var13 = func_0835(var14, var15);\n        var12 = func_1801(var13);\n        var4 = var12;\n        var12 = 0x1814;\n        var13 = var2;\n        var14 = var3;\n        var12 = func_1D7C(var13, var14);\n        var temp1 = var12;\n        var5 = temp1;\n        var12 = 0x1820;\n        var13 = var5;\n        var14 = var4;\n        var12 = func_1D7C(var13, var14);\n        var6 = var12;\n        var12 = 0x183a;\n        var13 = 0x1833;\n        var14 = var2;\n        var15 = 0xff & 0x0f;\n        var13 = func_0835(var14, var15);\n        var12 = func_1833(var13);\n        var temp2 = var12;\n        var7 = temp2;\n        var12 = 0x1847;\n        var13 = var7;\n        var14 = 0x0a;\n        var12 = func_081A(var13, var14);\n        var8 = var12;\n        var12 = 0x1861;\n        var13 = 0x185a;\n        var14 = var2;\n        var15 = 0xff & 0x23;\n        var13 = func_0835(var14, var15);\n        var12 = func_185A(var13);\n        var temp3 = var12;\n        var9 = temp3;\n        var12 = 0x186e;\n        var13 = var9;\n        var14 = 0x0a;\n        var12 = func_081A(var13, var14);\n        var10 = var12;\n        storage[0x03] = storage[0x03] + var10;\n        var12 = 0x188c;\n        var13 = storage[0x08];\n        var14 = var1;\n        var12 = func_1D7C(var13, var14);\n        storage[0x08] = var12;\n        var12 = 0x18db;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var13 = storage[keccak256(memory[0x00:0x40])];\n        var14 = var1;\n        var12 = func_1D7C(var13, var14);\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var12;\n        var temp4 = var8;\n        var temp5 = memory[0x40:0x60];\n        var temp6;\n        temp6, memory[temp5:temp5 + 0x00] = address(storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp5:temp5 + memory[0x40:0x60] - temp5]);\n        var12 = !temp6;\n    \n        if (!var12) {\n            var11 = storage[0x09] * var1 + var6 * 0x010000000000000000;\n            memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            storage[temp7] = storage[temp7] - var11;\n        \n            if (storage[0x08] <= 0x00) {\n            label_1A1E:\n                var12 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var13 = 0x8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e;\n                var14 = var1;\n                var15 = var6;\n                var var16 = block.timestamp;\n                var var17 = 0x1a61;\n                var17 = buyPrice();\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var14;\n                var temp9 = temp8 + 0x20;\n                memory[temp9:temp9 + 0x20] = var15;\n                var temp10 = temp9 + 0x20;\n                memory[temp10:temp10 + 0x20] = var16;\n                var temp11 = temp10 + 0x20;\n                memory[temp11:temp11 + 0x20] = var17;\n                var temp12 = memory[0x40:0x60];\n                log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [stack[-5], stack[-6]]);\n                return;\n            } else {\n                var12 = 0x1a17;\n                var13 = storage[0x09];\n                var14 = storage[0x08];\n                var15 = var3 * 0x010000000000000000;\n            \n                if (!var14) { assert(); }\n            \n                var12 = func_1A11(var13, var14, var15);\n                storage[0x09] = var12;\n                goto label_1A1E;\n            }\n        } else {\n            var temp13 = returndata.length;\n            memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_17E2(var arg0, var arg1) returns (var r0) {\n        arg1 = arg1 & 0xff;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_17EA(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1801(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1833(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_185A(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1A11(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1E22(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x05;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_1AF5:\n            var var2 = 0x1afd;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x1af4;\n            var var3 = var1;\n            sell(var3);\n            goto label_1AF5;\n        }\n    }\n    \n    function buy(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x1b33;\n        var var6 = 0xff & 0x0f;\n        var var7 = 0x1b25;\n        var var8 = msg.value;\n        var var9 = 0x64;\n        var7 = func_081A(var8, var9);\n        var5 = func_1B25(var6, var7);\n        var temp0 = var5;\n        var1 = temp0;\n        var5 = 0x1b40;\n        var6 = var1;\n        var7 = 0x0a;\n        var5 = func_081A(var6, var7);\n        var temp1 = var5;\n        var2 = temp1;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(storage[0x0a] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var2 * 0x08fc).value(var2)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        var5 = !temp3;\n    \n        if (!var5) {\n            var5 = 0x1bd5;\n            var6 = 0xff & 0x23;\n            var7 = 0x1bc7;\n            var8 = msg.value;\n            var9 = 0x64;\n            var7 = func_081A(var8, var9);\n            var5 = func_1BC7(var6, var7);\n            var temp4 = var5;\n            var3 = temp4;\n            var5 = 0x1be2;\n            var6 = var3;\n            var7 = 0x0a;\n            var5 = func_081A(var6, var7);\n            var4 = var5;\n            storage[0x03] = storage[0x03] + var4;\n            var5 = 0x1bfe;\n            var6 = msg.value;\n            var7 = arg0;\n            var5 = func_0870(var6, var7);\n            return var0;\n        } else {\n            var temp5 = returndata.length;\n            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_1B25(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1BC7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0835(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x1c18;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x1c2e;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        var temp0 = var3;\n        var temp1 = msg.sender;\n        var1 = temp1;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] + temp0 * 0x010000000000000000;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = temp0 + storage[keccak256(memory[0x00:0x40])];\n        var0 = temp3;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var3 = 0x1d1f;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_0870(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_1D7C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1D95(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var temp0 = 0x174876e800 * 0x0de0b6b3a7640000;\n        var var1 = temp0;\n        var var3 = storage[0x08];\n        var var4 = 0x02540be400;\n        var var5 = 0x1e0b;\n        var var6 = 0x1e05;\n        var var7 = var1 ** 0x02 + arg0 * 0x0de0b6b3a7640000 * 0x02 * 0x02540be400 * 0x0de0b6b3a7640000 + storage[0x08] ** 0x02 * 0x02540be400 ** 0x02 + var1 * 0x02 * 0x02540be400 * storage[0x08];\n        var6 = func_22D8(var7);\n        var5 = func_1E05(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_1E05(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1D7C(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E22(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1E40(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var3 = 0x00;\n        var var1 = arg0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x08] + 0x0de0b6b3a7640000;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x1ed4;\n        var var6 = var1 - 0x0de0b6b3a7640000;\n        var var7 = 0x02540be400;\n        var var8 = 0x0de0b6b3a7640000;\n        var var9 = var2;\n    \n        if (!var8) { assert(); }\n    \n        var5 = func_1E92(var1, var6, var7, var8, var9);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_1E92(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        arg1 = (arg4 / arg3 * 0x02540be400 + 0x174876e800) - arg2 * arg1;\n        arg2 = 0x02;\n        arg3 = 0x0de0b6b3a7640000;\n        var temp0 = arg0;\n        arg4 = temp0 ** 0x02 - temp0;\n    \n        if (!arg3) { assert(); }\n    \n        arg3 = arg4 / arg3 * 0x02540be400;\n    \n        if (!arg2) { assert(); }\n    \n        arg2 = arg3 / arg2;\n        r0 = func_1D7C(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1EEB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var1 = msg.sender;\n        var var9 = 0x1f11;\n        var var10 = 0x1f0a;\n        var var11 = arg0;\n        var var12 = 0x64;\n        var10 = func_0835(var11, var12);\n        var9 = func_1F0A(var10);\n        var temp0 = var9;\n        var2 = temp0;\n        var9 = 0x1f2b;\n        var10 = 0x1f24;\n        var11 = var2;\n        var12 = 0xff & 0x08;\n        var10 = func_0835(var11, var12);\n        var9 = func_1F24(var10);\n        var temp1 = var9;\n        var3 = temp1;\n        var9 = 0x1f37;\n        var10 = var2;\n        var11 = var3;\n        var9 = func_1D7C(var10, var11);\n        var4 = var9;\n        var9 = 0x1f43;\n        var10 = arg0;\n        var11 = var2;\n        var9 = func_1D7C(var10, var11);\n        var temp2 = var9;\n        var5 = temp2;\n        var9 = 0x1f4e;\n        var10 = var5;\n        var9 = func_1D95(var10);\n        var6 = var9;\n        var7 = var4 * 0x010000000000000000;\n        var temp3 = var6 >= 0x00;\n        var9 = temp3;\n    \n        if (!var9) {\n        label_1F7C:\n        \n            if (!var9) { revert(memory[0x00:0x00]); }\n        \n            var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        \n            if (var9) {\n                var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff != var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            \n                if (!var9) { goto label_203D; }\n                else { goto label_1FF7; }\n            } else if (!var9) {\n            label_203D:\n            \n                if (!var9) {\n                label_20D3:\n                    var9 = 0x20dd;\n                    var10 = var4;\n                    var11 = var3;\n                    var9 = func_1E22(var10, var11);\n                    var4 = var9;\n                    var7 = var4 * 0x010000000000000000;\n                \n                    if (storage[0x08] <= 0x00) {\n                    label_2159:\n                        storage[0x08] = var6;\n                        var9 = 0x21aa;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = var6;\n                        var9 = func_1E22(var10, var11);\n                    \n                    label_21AA:\n                        var temp4 = var1;\n                        memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40])] = var9;\n                        var8 = storage[0x09] * var6 - var7;\n                        memory[0x00:0x20] = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x07;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] + var8;\n                        var9 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var10 = temp4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var11 = 0x8032875b28d82ddbd303a9e4e5529d047a14ecb6290f80012a81b7e6227ff1ab;\n                        var12 = arg0;\n                        var var13 = var6;\n                        var var14 = block.timestamp;\n                        var var15 = 0x229d;\n                        var15 = buyPrice();\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = var12;\n                        var temp7 = temp6 + 0x20;\n                        memory[temp7:temp7 + 0x20] = var13;\n                        var temp8 = temp7 + 0x20;\n                        memory[temp8:temp8 + 0x20] = var14;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = var15;\n                        var temp10 = memory[0x40:0x60];\n                        log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [stack[-5], stack[-6], stack[-7]]);\n                        return var6;\n                    } else {\n                    label_20FA:\n                        var9 = 0x2105;\n                        var10 = storage[0x08];\n                        var11 = var6;\n                        var9 = func_1E22(var10, var11);\n                        storage[0x08] = var9;\n                        var9 = storage[0x08];\n                        var10 = var4 * 0x010000000000000000;\n                    \n                        if (!var9) { assert(); }\n                    \n                        storage[0x09] = storage[0x09] + var10 / var9;\n                        var9 = storage[0x08];\n                        var10 = var4 * 0x010000000000000000;\n                    \n                        if (!var9) { assert(); }\n                    \n                        var temp11 = var7;\n                        var7 = temp11 - (temp11 - var6 * (var10 / var9));\n                        var9 = 0x21aa;\n                        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        memory[0x20:0x40] = 0x05;\n                        var10 = storage[keccak256(memory[0x00:0x40])];\n                        var11 = var6;\n                        var9 = func_1E22(var10, var11);\n                        goto label_21AA;\n                    }\n                } else {\n                label_2043:\n                    var9 = 0x208b;\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x06;\n                    var10 = storage[keccak256(memory[0x00:0x40])];\n                    var11 = var3;\n                    var9 = func_1E22(var10, var11);\n                    memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    memory[0x20:0x40] = 0x06;\n                    storage[keccak256(memory[0x00:0x40])] = var9;\n                \n                    if (storage[0x08] <= 0x00) { goto label_2159; }\n                    else { goto label_20FA; }\n                }\n            } else {\n            label_1FF7:\n                memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x05;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < storage[0x04]) { goto label_20D3; }\n                else { goto label_2043; }\n            }\n        } else {\n            var9 = storage[0x08];\n            var10 = 0x1f79;\n            var11 = var6;\n            var12 = storage[0x08];\n            var10 = func_1E22(var11, var12);\n            var9 = var10 >= var9;\n            goto label_1F7C;\n        }\n    }\n    \n    function func_1F0A(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1F24(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        r0 = func_081A(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_22D8(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = arg0 + 0x01;\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_231D:\n            return var0;\n        } else {\n        label_22FA:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_231D; }\n            else { goto label_22FA; }\n        }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 72.00846886634827,
	"usage": {
		"completion_tokens": 614,
		"prompt_tokens": 20721,
		"total_tokens": 21335
	}
}