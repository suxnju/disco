{
	"address": "0xf2740c75f221788cf78c716b953a7f1c769d49b9",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, based on the decompiled code, I will create a Solidity contract. Please be aware that I had to make certain assumptions since the decompiled code lacked some specificity:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Token {\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n    string private _name;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowances[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(_balances[from] >= value, \"Insufficient balance.\");\n        require(_allowances[from][msg.sender] >= value, \"Insufficient allowance.\");\n\n        _balances[from] -= value;\n        _balances[to] += value;\n        _allowances[from][msg.sender] -= value;\n\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function withdraw(uint256 value) public {\n        require(_balances[msg.sender] >= value, \"Insufficient balance.\");\n\n        _balances[msg.sender] -= value;\n        _totalSupply -= value;\n\n        payable(msg.sender).transfer(value);\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function createToken() public payable {\n        require(msg.value > 0, \"No ether provided.\");\n        _balances[msg.sender] += msg.value;\n        _totalSupply += msg.value;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(_balances[msg.sender] >= value, \"Insufficient balance.\");\n\n        _balances[msg.sender] -= value;\n        _balances[to] += value;\n\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    fallback() external payable {\n        revert();\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n}\n```\n\nPlease note that the `name` function usually refers to the name of the token. Also, the `__function_selector__` function was omitted because function selectors don't need to be explicitly handled in Solidity.",
				"role": "assistant"
			}
		}
	],
	"created": 1701459311,
	"id": "chatcmpl-8R3a3rv51RqeeZ47p3konj9kVjbGx",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.26 10:07 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256 _total_supply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _total_supply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (v1) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v0) {\n        v4 = v5 = 0;\n    } else {\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        _allowance[varg1] = _allowance[varg1] + varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v4 = 1;\n    }\n    return v4;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _total_supply);\n    _total_supply = _total_supply - varg0;\n    v0 = msg.sender.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction total_supply() public nonPayable { \n    return _total_supply;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction createToken() public payable { \n    require(msg.value > 0);\n    assert(_balanceOf[msg.sender] + msg.value >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    assert(_total_supply + msg.value >= _total_supply);\n    _total_supply = _total_supply + msg.value;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v3 = 1;\n    }\n    return v3;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x3940e9ee == function_selector) {\n            total_supply();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x9cbf9e36 == function_selector) {\n            createToken();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 10:07 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256 _total_supply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _total_supply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (v1) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v0) {\n        v4 = v5 = 0;\n    } else {\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        _allowance[varg1] = _allowance[varg1] + varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v4 = 1;\n    }\n    return v4;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _total_supply);\n    _total_supply = _total_supply - varg0;\n    v0 = msg.sender.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction total_supply() public nonPayable { \n    return _total_supply;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction createToken() public payable { \n    require(msg.value > 0);\n    assert(_balanceOf[msg.sender] + msg.value >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    assert(_total_supply + msg.value >= _total_supply);\n    _total_supply = _total_supply + msg.value;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v3 = 1;\n    }\n    return v3;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x3940e9ee == function_selector) {\n            total_supply();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x9cbf9e36 == function_selector) {\n            createToken();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 10:07 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256 _total_supply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _total_supply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (v1) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v0) {\n        v4 = v5 = 0;\n    } else {\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        _allowance[varg1] = _allowance[varg1] + varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v4 = 1;\n    }\n    return v4;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _total_supply);\n    _total_supply = _total_supply - varg0;\n    v0 = msg.sender.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction total_supply() public nonPayable { \n    return _total_supply;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction createToken() public payable { \n    require(msg.value > 0);\n    assert(_balanceOf[msg.sender] + msg.value >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    assert(_total_supply + msg.value >= _total_supply);\n    _total_supply = _total_supply + msg.value;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v3 = 1;\n    }\n    return v3;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x3940e9ee == function_selector) {\n            total_supply();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x9cbf9e36 == function_selector) {\n            createToken();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 29.50516676902771,
	"usage": {
		"completion_tokens": 566,
		"prompt_tokens": 1476,
		"total_tokens": 2042
	}
}