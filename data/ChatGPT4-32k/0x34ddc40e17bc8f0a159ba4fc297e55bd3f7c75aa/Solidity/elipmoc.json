{
	"address": "0x34ddc40e17bc8f0a159ba4fc297e55bd3f7c75aa",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity implementation for the given decompiled code:\n\n```solidity\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping (uint256 => uint256) private _balanceOf;\n    mapping (uint256 => uint256) private _allowance;\n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol;\n    uint256 private _lockedAmount;\n    address private _owner;\n    uint8 private _decimals;\n\n    event Withdraw(address indexed user, uint256 ethAmount, uint256 tokenAmount);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Provide(address indexed user, uint256 ethAmount, uint256 tokenAmount);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        _owner = msg.sender;\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n    \n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        uint256 currentAllowance = _allowance[sender];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, msg.sender, currentAllowance - amount);\n        }\n        _transfer(sender, recipient, amount);\n        return true;\n    }\n    \n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowance[spender] + addedValue);\n        return true;\n    }\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        uint256 currentAllowance = _allowance[spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(msg.sender, spender, currentAllowance - subtractedValue);\n        }\n        return true;\n    }\n    \n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[spender];\n    }\n    \n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n    \n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 senderBalance = _balanceOf[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balanceOf[sender] = senderBalance - amount;\n        }\n        _balanceOf[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowance[spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}\n```\nPlease note that this is a simplified implementation of the decompiled code. Some functions are not implemented such as `withdraw`, `provide`, `lockedAmount`, `totalBalance`, etc. You may want to tailor this contract to your specific needs. Also, for security purposes, this contract should be thoroughly tested before use.",
				"role": "assistant"
			}
		}
	],
	"created": 1701455932,
	"id": "chatcmpl-8R2hYStQs8wunAT8GLU7up3TuRReO",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 12:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x3]\nuint256[] _name; // STORAGE[0x4]\nuint256[] _symbol; // STORAGE[0x5]\nuint256 _lockedAmount; // STORAGE[0x7]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x6] bytes 0 to 0\n\n// Events\nWithdraw(address, uint256, uint256);\nOwnershipTransferred(address, address);\nProvide(address, uint256, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction 0x117d(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), 'ERC20: approve from the zero address');\n    require(address(varg1), 'ERC20: approve to the zero address');\n    v0 = address(varg2);\n    v1 = address(varg1);\n    _allowance[v1] = varg0;\n    emit Approval(v0, v1, varg0);\n    return ;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        require(v0 / varg1 == varg0, 'SafeMath: multiplication overflow');\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    if (varg0) {\n        assert(varg0);\n        return varg1 / varg0;\n    } else {\n        v0 = new array[](v1.length);\n        if (v1.length) {\n            v2 = v1.data;\n            v3 = v4 = 32;\n            while (v3 < v1.length) {\n                MEM[v3 + v0.data] = MEM[v3 + v1.data];\n                v3 += 32;\n            }\n        }\n        if (26) {\n            MEM[v0.data] = ~0xffffffffffff & 'SafeMath: division by zero';\n        }\n        revert(v0);\n    }\n}\n\nfunction 0x130b(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), 'ERC20: transfer from the zero address');\n    require(address(varg1), 'ERC20: transfer to the zero address');\n    v0 = address(varg2);\n    v1 = _SafeSub('ERC20: transfer amount exceeds balance', varg0, _balanceOf[v0]);\n    v2 = address(varg2);\n    _balanceOf[v2] = v1;\n    v3 = address(varg1);\n    v4 = varg0 + _balanceOf[v3];\n    require(v4 >= _balanceOf[v3], 'SafeMath: addition overflow');\n    v5 = address(varg1);\n    _balanceOf[v5] = v4;\n    emit Transfer(address(varg2), v5, varg0);\n    return ;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    if (varg1 <= varg2) {\n        return varg2 - varg1;\n    } else {\n        v0 = new array[](varg0.length);\n        v1 = v2 = 0;\n        while (v1 < varg0.length) {\n            MEM[v1 + v0.data] = MEM[v1 + varg0.data];\n            v1 += 32;\n        }\n        v3 = v4 = varg0.length + v0.data;\n        if (0x1f & varg0.length) {\n            MEM[v4 - (0x1f & varg0.length)] = ~(256 ** (32 - (0x1f & varg0.length)) - 1) & MEM[v4 - (0x1f & varg0.length)];\n        }\n        revert(v0);\n    }\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction fallback() public payable { \n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x117d(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction shareOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    if (this.balance > v1) {\n        v2 = _SafeMul(_balanceOf[varg0], this.balance);\n        v0 = v3 = _SafeDiv(_totalSupply, v2);\n    }\n    return v0;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    0x130b(varg2, varg1, varg0);\n    v0 = _SafeSub('ERC20: transfer amount exceeds allowance', varg2, STORAGE[keccak256(msg.sender, keccak256(varg0, 2))]);\n    0x117d(v0, msg.sender, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0xcd0();\n    require(varg0 <= v0, 'Pool: Insufficient unlocked funds');\n    v1 = _SafeMul(_totalSupply, varg0);\n    v2 = _SafeDiv(this.balance, v1);\n    require(v2 <= _balanceOf[msg.sender], 'Pool: Amount is too large');\n    require(v2 > 0, 'Pool: Amount is too small');\n    require(msg.sender, 'ERC20: burn from the zero address');\n    v3 = _SafeSub('ERC20: burn amount exceeds balance', v2, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v3;\n    v4 = _SafeSub('SafeMath: subtraction overflow', v2, _totalSupply);\n    _totalSupply = v4;\n    MEM[MEM[64]] = v2;\n    emit Transfer(msg.sender, 0, v2);\n    MEM[MEM[64]] = varg0;\n    emit Withdraw(msg.sender, varg0, v2);\n    v5 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v5); // checks call status, propagates error data on error\n    MEM[MEM[64]] = v2;\n    return v2;\n}\n\nfunction provide(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0xcf5();\n    require(v0 >= varg0, 'Pool: Mint limit is too large');\n    return v0;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 + _allowance[varg0] >= _allowance[varg0], 'SafeMath: addition overflow');\n    0x117d(varg1 + _allowance[varg0], varg0, msg.sender);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    v0 = 0xcd0();\n    require(varg0 <= v0, 'Pool: Insufficient unlocked funds');\n    v1 = _SafeMul(_totalSupply, varg0);\n    v2 = _SafeDiv(this.balance, v1);\n    require(v2 <= _balanceOf[msg.sender], 'Pool: Amount is too large');\n    require(v2 > 0, 'Pool: Amount is too small');\n    require(msg.sender, 'ERC20: burn from the zero address');\n    v3 = _SafeSub('ERC20: burn amount exceeds balance', v2, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v3;\n    v4 = _SafeSub(0x536166654d6174683a207375627472616374696f6e206f766572666c6f7700008c379a000000000000000000000000000000000000000000000000000000000, v2, _totalSupply);\n    _totalSupply = v4;\n    MEM[MEM[64]] = v2;\n    emit Transfer(msg.sender, 0, v2);\n    MEM[MEM[64]] = varg0;\n    emit Withdraw(msg.sender, varg0, v2);\n    v5 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v5); // checks call status, propagates error data on error\n    if (v2 <= varg1) {\n        MEM[MEM[64]] = v2;\n        return v2;\n    } else {\n        MEM[MEM[64] + 4] = 32;\n        revert('Pool: Burn limit is too small');\n    }\n}\n\nfunction unlock(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    require(_lockedAmount >= varg0, 'Pool: Insufficient locked funds');\n    v0 = _SafeSub('SafeMath: subtraction overflow', varg0, _lockedAmount);\n    _lockedAmount = v0;\n}\n\nfunction lockedAmount() public nonPayable { \n    return _lockedAmount;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    emit OwnershipTransferred(_owner, 0);\n    _owner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    v0 = _SafeSub('ERC20: decreased allowance below zero', varg1, _allowance[varg0]);\n    0x117d(v0, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x130b(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction availableBalance() public nonPayable { \n    v0 = 0xcd0();\n    return v0;\n}\n\nfunction totalBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction provide() public payable { \n    v0 = 0xcf5();\n    return v0;\n}\n\nfunction send(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    require(_lockedAmount >= varg1, 'Pool: Insufficient locked funds');\n    _lockedAmount = _lockedAmount - varg1;\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction lock(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    require(varg0 + _lockedAmount >= _lockedAmount, 'SafeMath: addition overflow');\n    v0 = _SafeMul(10, varg0 + _lockedAmount);\n    v1 = _SafeDiv(this.balance, v0);\n    require(v1 < 8, 'Pool: Insufficient unlocked funds');\n    require(varg0 + _lockedAmount >= _lockedAmount, 'SafeMath: addition overflow');\n    _lockedAmount += varg0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    require(varg0, 'Ownable: new owner is the zero address');\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction 0xcd0() private { \n    v0 = _SafeSub('SafeMath: subtraction overflow', _lockedAmount, this.balance);\n    return v0;\n}\n\nfunction 0xcf5() private { \n    require(_owner.code.size);\n    v0, v1 = _owner.highSpreadLockEnabled().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    v2 = 'SafeMath: subtraction overflow';\n    require(RETURNDATASIZE() >= 32);\n    v1 = v2.length;\n    require(!v1, 'Pool: Locked');\n    v3 = _SafeMul(this.balance, _totalSupply);\n    if (v3) {\n        v4 = _SafeSub(MEM[64], msg.value, this.balance);\n        v5 = _SafeMul(_totalSupply, msg.value);\n        v6 = v7 = _SafeDiv(v4, v5);\n    } else {\n        v6 = v8 = _SafeMul(1000, msg.value);\n    }\n    require(v6 > 0, 'Pool: Amount is too small');\n    emit Provide(msg.sender, msg.value, v6);\n    require(msg.sender, 'ERC20: mint to the zero address');\n    require(v6 + _totalSupply >= _totalSupply, 'SafeMath: addition overflow');\n    _totalSupply += v6;\n    require(v6 + _balanceOf[msg.sender] >= _balanceOf[msg.sender], 'SafeMath: addition overflow');\n    _balanceOf[msg.sender] += v6;\n    emit Transfer(0, msg.sender, v6);\n    return v6;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length < 4) {\n        if (!msg.data.length) {\n            fallback();\n        }\n    } else if (0x70a08231 > function_selector >> 224) {\n        if (0x2e2ebe06 > function_selector >> 224) {\n            if (0x6fdde03 == function_selector >> 224) {\n                name();\n            } else if (0x95ea7b3 == function_selector >> 224) {\n                approve(address,uint256);\n            } else if (0x18160ddd == function_selector >> 224) {\n                totalSupply();\n            } else if (0x21e5e2c4 == function_selector >> 224) {\n                shareOf(address);\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x2e1a7d4d == function_selector >> 224) {\n                withdraw(uint256);\n            }\n        } else if (0x2e2ebe06 == function_selector >> 224) {\n            provide(uint256);\n        } else if (0x313ce567 == function_selector >> 224) {\n            decimals();\n        } else if (0x39509351 == function_selector >> 224) {\n            increaseAllowance(address,uint256);\n        } else if (0x441a3e70 == function_selector >> 224) {\n            withdraw(uint256,uint256);\n        } else if (0x6198e339 == function_selector >> 224) {\n            unlock(uint256);\n        } else if (0x6ab28bc8 == function_selector >> 224) {\n            lockedAmount();\n        }\n    } else if (0xab2f0e51 > function_selector >> 224) {\n        if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x715018a6 == function_selector >> 224) {\n            renounceOwnership();\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa457c2d7 == function_selector >> 224) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        }\n    } else if (0xd0679d34 > function_selector >> 224) {\n        if (0xab2f0e51 == function_selector >> 224) {\n            availableBalance();\n        } else if (0xad7a672f == function_selector >> 224) {\n            totalBalance();\n        } else if (0xb9472535 == function_selector >> 224) {\n            provide();\n        }\n    } else if (0xd0679d34 == function_selector >> 224) {\n        send(address,uint256);\n    } else if (0xdd467064 == function_selector >> 224) {\n        lock(uint256);\n    } else if (0xdd62ed3e == function_selector >> 224) {\n        allowance(address,address);\n    } else if (0xf2fde38b == function_selector >> 224) {\n        transferOwnership(address);\n    }\n    revert();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 12:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x3]\nuint256[] _name; // STORAGE[0x4]\nuint256[] _symbol; // STORAGE[0x5]\nuint256 _lockedAmount; // STORAGE[0x7]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x6] bytes 0 to 0\n\n// Events\nWithdraw(address, uint256, uint256);\nOwnershipTransferred(address, address);\nProvide(address, uint256, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction 0x117d(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), 'ERC20: approve from the zero address');\n    require(address(varg1), 'ERC20: approve to the zero address');\n    v0 = address(varg2);\n    v1 = address(varg1);\n    _allowance[v1] = varg0;\n    emit Approval(v0, v1, varg0);\n    return ;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        require(v0 / varg1 == varg0, 'SafeMath: multiplication overflow');\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    if (varg0) {\n        assert(varg0);\n        return varg1 / varg0;\n    } else {\n        v0 = new array[](v1.length);\n        if (v1.length) {\n            v2 = v1.data;\n            v3 = v4 = 32;\n            while (v3 < v1.length) {\n                MEM[v3 + v0.data] = MEM[v3 + v1.data];\n                v3 += 32;\n            }\n        }\n        if (26) {\n            MEM[v0.data] = ~0xffffffffffff & 'SafeMath: division by zero';\n        }\n        revert(v0);\n    }\n}\n\nfunction 0x130b(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), 'ERC20: transfer from the zero address');\n    require(address(varg1), 'ERC20: transfer to the zero address');\n    v0 = address(varg2);\n    v1 = _SafeSub('ERC20: transfer amount exceeds balance', varg0, _balanceOf[v0]);\n    v2 = address(varg2);\n    _balanceOf[v2] = v1;\n    v3 = address(varg1);\n    v4 = varg0 + _balanceOf[v3];\n    require(v4 >= _balanceOf[v3], 'SafeMath: addition overflow');\n    v5 = address(varg1);\n    _balanceOf[v5] = v4;\n    emit Transfer(address(varg2), v5, varg0);\n    return ;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    if (varg1 <= varg2) {\n        return varg2 - varg1;\n    } else {\n        v0 = new array[](varg0.length);\n        v1 = v2 = 0;\n        while (v1 < varg0.length) {\n            MEM[v1 + v0.data] = MEM[v1 + varg0.data];\n            v1 += 32;\n        }\n        v3 = v4 = varg0.length + v0.data;\n        if (0x1f & varg0.length) {\n            MEM[v4 - (0x1f & varg0.length)] = ~(256 ** (32 - (0x1f & varg0.length)) - 1) & MEM[v4 - (0x1f & varg0.length)];\n        }\n        revert(v0);\n    }\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction fallback() public payable { \n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x117d(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction shareOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    if (this.balance > v1) {\n        v2 = _SafeMul(_balanceOf[varg0], this.balance);\n        v0 = v3 = _SafeDiv(_totalSupply, v2);\n    }\n    return v0;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    0x130b(varg2, varg1, varg0);\n    v0 = _SafeSub('ERC20: transfer amount exceeds allowance', varg2, STORAGE[keccak256(msg.sender, keccak256(varg0, 2))]);\n    0x117d(v0, msg.sender, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0xcd0();\n    require(varg0 <= v0, 'Pool: Insufficient unlocked funds');\n    v1 = _SafeMul(_totalSupply, varg0);\n    v2 = _SafeDiv(this.balance, v1);\n    require(v2 <= _balanceOf[msg.sender], 'Pool: Amount is too large');\n    require(v2 > 0, 'Pool: Amount is too small');\n    require(msg.sender, 'ERC20: burn from the zero address');\n    v3 = _SafeSub('ERC20: burn amount exceeds balance', v2, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v3;\n    v4 = _SafeSub('SafeMath: subtraction overflow', v2, _totalSupply);\n    _totalSupply = v4;\n    MEM[MEM[64]] = v2;\n    emit Transfer(msg.sender, 0, v2);\n    MEM[MEM[64]] = varg0;\n    emit Withdraw(msg.sender, varg0, v2);\n    v5 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v5); // checks call status, propagates error data on error\n    MEM[MEM[64]] = v2;\n    return v2;\n}\n\nfunction provide(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0xcf5();\n    require(v0 >= varg0, 'Pool: Mint limit is too large');\n    return v0;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 + _allowance[varg0] >= _allowance[varg0], 'SafeMath: addition overflow');\n    0x117d(varg1 + _allowance[varg0], varg0, msg.sender);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    v0 = 0xcd0();\n    require(varg0 <= v0, 'Pool: Insufficient unlocked funds');\n    v1 = _SafeMul(_totalSupply, varg0);\n    v2 = _SafeDiv(this.balance, v1);\n    require(v2 <= _balanceOf[msg.sender], 'Pool: Amount is too large');\n    require(v2 > 0, 'Pool: Amount is too small');\n    require(msg.sender, 'ERC20: burn from the zero address');\n    v3 = _SafeSub('ERC20: burn amount exceeds balance', v2, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v3;\n    v4 = _SafeSub(0x536166654d6174683a207375627472616374696f6e206f766572666c6f7700008c379a000000000000000000000000000000000000000000000000000000000, v2, _totalSupply);\n    _totalSupply = v4;\n    MEM[MEM[64]] = v2;\n    emit Transfer(msg.sender, 0, v2);\n    MEM[MEM[64]] = varg0;\n    emit Withdraw(msg.sender, varg0, v2);\n    v5 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v5); // checks call status, propagates error data on error\n    if (v2 <= varg1) {\n        MEM[MEM[64]] = v2;\n        return v2;\n    } else {\n        MEM[MEM[64] + 4] = 32;\n        revert('Pool: Burn limit is too small');\n    }\n}\n\nfunction unlock(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    require(_lockedAmount >= varg0, 'Pool: Insufficient locked funds');\n    v0 = _SafeSub('SafeMath: subtraction overflow', varg0, _lockedAmount);\n    _lockedAmount = v0;\n}\n\nfunction lockedAmount() public nonPayable { \n    return _lockedAmount;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    emit OwnershipTransferred(_owner, 0);\n    _owner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    v0 = _SafeSub('ERC20: decreased allowance below zero', varg1, _allowance[varg0]);\n    0x117d(v0, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x130b(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction availableBalance() public nonPayable { \n    v0 = 0xcd0();\n    return v0;\n}\n\nfunction totalBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction provide() public payable { \n    v0 = 0xcf5();\n    return v0;\n}\n\nfunction send(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    require(_lockedAmount >= varg1, 'Pool: Insufficient locked funds');\n    _lockedAmount = _lockedAmount - varg1;\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction lock(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    require(varg0 + _lockedAmount >= _lockedAmount, 'SafeMath: addition overflow');\n    v0 = _SafeMul(10, varg0 + _lockedAmount);\n    v1 = _SafeDiv(this.balance, v0);\n    require(v1 < 8, 'Pool: Insufficient unlocked funds');\n    require(varg0 + _lockedAmount >= _lockedAmount, 'SafeMath: addition overflow');\n    _lockedAmount += varg0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    require(varg0, 'Ownable: new owner is the zero address');\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction 0xcd0() private { \n    v0 = _SafeSub('SafeMath: subtraction overflow', _lockedAmount, this.balance);\n    return v0;\n}\n\nfunction 0xcf5() private { \n    require(_owner.code.size);\n    v0, v1 = _owner.highSpreadLockEnabled().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    v2 = 'SafeMath: subtraction overflow';\n    require(RETURNDATASIZE() >= 32);\n    v1 = v2.length;\n    require(!v1, 'Pool: Locked');\n    v3 = _SafeMul(this.balance, _totalSupply);\n    if (v3) {\n        v4 = _SafeSub(MEM[64], msg.value, this.balance);\n        v5 = _SafeMul(_totalSupply, msg.value);\n        v6 = v7 = _SafeDiv(v4, v5);\n    } else {\n        v6 = v8 = _SafeMul(1000, msg.value);\n    }\n    require(v6 > 0, 'Pool: Amount is too small');\n    emit Provide(msg.sender, msg.value, v6);\n    require(msg.sender, 'ERC20: mint to the zero address');\n    require(v6 + _totalSupply >= _totalSupply, 'SafeMath: addition overflow');\n    _totalSupply += v6;\n    require(v6 + _balanceOf[msg.sender] >= _balanceOf[msg.sender], 'SafeMath: addition overflow');\n    _balanceOf[msg.sender] += v6;\n    emit Transfer(0, msg.sender, v6);\n    return v6;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length < 4) {\n        if (!msg.data.length) {\n            fallback();\n        }\n    } else if (0x70a08231 > function_selector >> 224) {\n        if (0x2e2ebe06 > function_selector >> 224) {\n            if (0x6fdde03 == function_selector >> 224) {\n                name();\n            } else if (0x95ea7b3 == function_selector >> 224) {\n                approve(address,uint256);\n            } else if (0x18160ddd == function_selector >> 224) {\n                totalSupply();\n            } else if (0x21e5e2c4 == function_selector >> 224) {\n                shareOf(address);\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x2e1a7d4d == function_selector >> 224) {\n                withdraw(uint256);\n            }\n        } else if (0x2e2ebe06 == function_selector >> 224) {\n            provide(uint256);\n        } else if (0x313ce567 == function_selector >> 224) {\n            decimals();\n        } else if (0x39509351 == function_selector >> 224) {\n            increaseAllowance(address,uint256);\n        } else if (0x441a3e70 == function_selector >> 224) {\n            withdraw(uint256,uint256);\n        } else if (0x6198e339 == function_selector >> 224) {\n            unlock(uint256);\n        } else if (0x6ab28bc8 == function_selector >> 224) {\n            lockedAmount();\n        }\n    } else if (0xab2f0e51 > function_selector >> 224) {\n        if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x715018a6 == function_selector >> 224) {\n            renounceOwnership();\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa457c2d7 == function_selector >> 224) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        }\n    } else if (0xd0679d34 > function_selector >> 224) {\n        if (0xab2f0e51 == function_selector >> 224) {\n            availableBalance();\n        } else if (0xad7a672f == function_selector >> 224) {\n            totalBalance();\n        } else if (0xb9472535 == function_selector >> 224) {\n            provide();\n        }\n    } else if (0xd0679d34 == function_selector >> 224) {\n        send(address,uint256);\n    } else if (0xdd467064 == function_selector >> 224) {\n        lock(uint256);\n    } else if (0xdd62ed3e == function_selector >> 224) {\n        allowance(address,address);\n    } else if (0xf2fde38b == function_selector >> 224) {\n        transferOwnership(address);\n    }\n    revert();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 12:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x3]\nuint256[] _name; // STORAGE[0x4]\nuint256[] _symbol; // STORAGE[0x5]\nuint256 _lockedAmount; // STORAGE[0x7]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x6] bytes 0 to 0\n\n// Events\nWithdraw(address, uint256, uint256);\nOwnershipTransferred(address, address);\nProvide(address, uint256, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction 0x117d(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), 'ERC20: approve from the zero address');\n    require(address(varg1), 'ERC20: approve to the zero address');\n    v0 = address(varg2);\n    v1 = address(varg1);\n    _allowance[v1] = varg0;\n    emit Approval(v0, v1, varg0);\n    return ;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        require(v0 / varg1 == varg0, 'SafeMath: multiplication overflow');\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    if (varg0) {\n        assert(varg0);\n        return varg1 / varg0;\n    } else {\n        v0 = new array[](v1.length);\n        if (v1.length) {\n            v2 = v1.data;\n            v3 = v4 = 32;\n            while (v3 < v1.length) {\n                MEM[v3 + v0.data] = MEM[v3 + v1.data];\n                v3 += 32;\n            }\n        }\n        if (26) {\n            MEM[v0.data] = ~0xffffffffffff & 'SafeMath: division by zero';\n        }\n        revert(v0);\n    }\n}\n\nfunction 0x130b(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), 'ERC20: transfer from the zero address');\n    require(address(varg1), 'ERC20: transfer to the zero address');\n    v0 = address(varg2);\n    v1 = _SafeSub('ERC20: transfer amount exceeds balance', varg0, _balanceOf[v0]);\n    v2 = address(varg2);\n    _balanceOf[v2] = v1;\n    v3 = address(varg1);\n    v4 = varg0 + _balanceOf[v3];\n    require(v4 >= _balanceOf[v3], 'SafeMath: addition overflow');\n    v5 = address(varg1);\n    _balanceOf[v5] = v4;\n    emit Transfer(address(varg2), v5, varg0);\n    return ;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    if (varg1 <= varg2) {\n        return varg2 - varg1;\n    } else {\n        v0 = new array[](varg0.length);\n        v1 = v2 = 0;\n        while (v1 < varg0.length) {\n            MEM[v1 + v0.data] = MEM[v1 + varg0.data];\n            v1 += 32;\n        }\n        v3 = v4 = varg0.length + v0.data;\n        if (0x1f & varg0.length) {\n            MEM[v4 - (0x1f & varg0.length)] = ~(256 ** (32 - (0x1f & varg0.length)) - 1) & MEM[v4 - (0x1f & varg0.length)];\n        }\n        revert(v0);\n    }\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction fallback() public payable { \n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x117d(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction shareOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    if (this.balance > v1) {\n        v2 = _SafeMul(_balanceOf[varg0], this.balance);\n        v0 = v3 = _SafeDiv(_totalSupply, v2);\n    }\n    return v0;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    0x130b(varg2, varg1, varg0);\n    v0 = _SafeSub('ERC20: transfer amount exceeds allowance', varg2, STORAGE[keccak256(msg.sender, keccak256(varg0, 2))]);\n    0x117d(v0, msg.sender, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0xcd0();\n    require(varg0 <= v0, 'Pool: Insufficient unlocked funds');\n    v1 = _SafeMul(_totalSupply, varg0);\n    v2 = _SafeDiv(this.balance, v1);\n    require(v2 <= _balanceOf[msg.sender], 'Pool: Amount is too large');\n    require(v2 > 0, 'Pool: Amount is too small');\n    require(msg.sender, 'ERC20: burn from the zero address');\n    v3 = _SafeSub('ERC20: burn amount exceeds balance', v2, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v3;\n    v4 = _SafeSub('SafeMath: subtraction overflow', v2, _totalSupply);\n    _totalSupply = v4;\n    MEM[MEM[64]] = v2;\n    emit Transfer(msg.sender, 0, v2);\n    MEM[MEM[64]] = varg0;\n    emit Withdraw(msg.sender, varg0, v2);\n    v5 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v5); // checks call status, propagates error data on error\n    MEM[MEM[64]] = v2;\n    return v2;\n}\n\nfunction provide(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0xcf5();\n    require(v0 >= varg0, 'Pool: Mint limit is too large');\n    return v0;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 + _allowance[varg0] >= _allowance[varg0], 'SafeMath: addition overflow');\n    0x117d(varg1 + _allowance[varg0], varg0, msg.sender);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    v0 = 0xcd0();\n    require(varg0 <= v0, 'Pool: Insufficient unlocked funds');\n    v1 = _SafeMul(_totalSupply, varg0);\n    v2 = _SafeDiv(this.balance, v1);\n    require(v2 <= _balanceOf[msg.sender], 'Pool: Amount is too large');\n    require(v2 > 0, 'Pool: Amount is too small');\n    require(msg.sender, 'ERC20: burn from the zero address');\n    v3 = _SafeSub('ERC20: burn amount exceeds balance', v2, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v3;\n    v4 = _SafeSub(0x536166654d6174683a207375627472616374696f6e206f766572666c6f7700008c379a000000000000000000000000000000000000000000000000000000000, v2, _totalSupply);\n    _totalSupply = v4;\n    MEM[MEM[64]] = v2;\n    emit Transfer(msg.sender, 0, v2);\n    MEM[MEM[64]] = varg0;\n    emit Withdraw(msg.sender, varg0, v2);\n    v5 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    require(v5); // checks call status, propagates error data on error\n    if (v2 <= varg1) {\n        MEM[MEM[64]] = v2;\n        return v2;\n    } else {\n        MEM[MEM[64] + 4] = 32;\n        revert('Pool: Burn limit is too small');\n    }\n}\n\nfunction unlock(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    require(_lockedAmount >= varg0, 'Pool: Insufficient locked funds');\n    v0 = _SafeSub('SafeMath: subtraction overflow', varg0, _lockedAmount);\n    _lockedAmount = v0;\n}\n\nfunction lockedAmount() public nonPayable { \n    return _lockedAmount;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    emit OwnershipTransferred(_owner, 0);\n    _owner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    v0 = _SafeSub('ERC20: decreased allowance below zero', varg1, _allowance[varg0]);\n    0x117d(v0, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x130b(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction availableBalance() public nonPayable { \n    v0 = 0xcd0();\n    return v0;\n}\n\nfunction totalBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction provide() public payable { \n    v0 = 0xcf5();\n    return v0;\n}\n\nfunction send(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    require(_lockedAmount >= varg1, 'Pool: Insufficient locked funds');\n    _lockedAmount = _lockedAmount - varg1;\n    v0 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction lock(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    require(varg0 + _lockedAmount >= _lockedAmount, 'SafeMath: addition overflow');\n    v0 = _SafeMul(10, varg0 + _lockedAmount);\n    v1 = _SafeDiv(this.balance, v0);\n    require(v1 < 8, 'Pool: Insufficient unlocked funds');\n    require(varg0 + _lockedAmount >= _lockedAmount, 'SafeMath: addition overflow');\n    _lockedAmount += varg0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'Ownable: caller is not the owner');\n    require(varg0, 'Ownable: new owner is the zero address');\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction 0xcd0() private { \n    v0 = _SafeSub('SafeMath: subtraction overflow', _lockedAmount, this.balance);\n    return v0;\n}\n\nfunction 0xcf5() private { \n    require(_owner.code.size);\n    v0, v1 = _owner.highSpreadLockEnabled().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    v2 = 'SafeMath: subtraction overflow';\n    require(RETURNDATASIZE() >= 32);\n    v1 = v2.length;\n    require(!v1, 'Pool: Locked');\n    v3 = _SafeMul(this.balance, _totalSupply);\n    if (v3) {\n        v4 = _SafeSub(MEM[64], msg.value, this.balance);\n        v5 = _SafeMul(_totalSupply, msg.value);\n        v6 = v7 = _SafeDiv(v4, v5);\n    } else {\n        v6 = v8 = _SafeMul(1000, msg.value);\n    }\n    require(v6 > 0, 'Pool: Amount is too small');\n    emit Provide(msg.sender, msg.value, v6);\n    require(msg.sender, 'ERC20: mint to the zero address');\n    require(v6 + _totalSupply >= _totalSupply, 'SafeMath: addition overflow');\n    _totalSupply += v6;\n    require(v6 + _balanceOf[msg.sender] >= _balanceOf[msg.sender], 'SafeMath: addition overflow');\n    _balanceOf[msg.sender] += v6;\n    emit Transfer(0, msg.sender, v6);\n    return v6;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length < 4) {\n        if (!msg.data.length) {\n            fallback();\n        }\n    } else if (0x70a08231 > function_selector >> 224) {\n        if (0x2e2ebe06 > function_selector >> 224) {\n            if (0x6fdde03 == function_selector >> 224) {\n                name();\n            } else if (0x95ea7b3 == function_selector >> 224) {\n                approve(address,uint256);\n            } else if (0x18160ddd == function_selector >> 224) {\n                totalSupply();\n            } else if (0x21e5e2c4 == function_selector >> 224) {\n                shareOf(address);\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x2e1a7d4d == function_selector >> 224) {\n                withdraw(uint256);\n            }\n        } else if (0x2e2ebe06 == function_selector >> 224) {\n            provide(uint256);\n        } else if (0x313ce567 == function_selector >> 224) {\n            decimals();\n        } else if (0x39509351 == function_selector >> 224) {\n            increaseAllowance(address,uint256);\n        } else if (0x441a3e70 == function_selector >> 224) {\n            withdraw(uint256,uint256);\n        } else if (0x6198e339 == function_selector >> 224) {\n            unlock(uint256);\n        } else if (0x6ab28bc8 == function_selector >> 224) {\n            lockedAmount();\n        }\n    } else if (0xab2f0e51 > function_selector >> 224) {\n        if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x715018a6 == function_selector >> 224) {\n            renounceOwnership();\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa457c2d7 == function_selector >> 224) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        }\n    } else if (0xd0679d34 > function_selector >> 224) {\n        if (0xab2f0e51 == function_selector >> 224) {\n            availableBalance();\n        } else if (0xad7a672f == function_selector >> 224) {\n            totalBalance();\n        } else if (0xb9472535 == function_selector >> 224) {\n            provide();\n        }\n    } else if (0xd0679d34 == function_selector >> 224) {\n        send(address,uint256);\n    } else if (0xdd467064 == function_selector >> 224) {\n        lock(uint256);\n    } else if (0xdd62ed3e == function_selector >> 224) {\n        allowance(address,address);\n    } else if (0xf2fde38b == function_selector >> 224) {\n        transferOwnership(address);\n    }\n    revert();\n}\n.",
	"status": "1",
	"time_cost": 47.772311210632324,
	"usage": {
		"completion_tokens": 922,
		"prompt_tokens": 4771,
		"total_tokens": 5693
	}
}