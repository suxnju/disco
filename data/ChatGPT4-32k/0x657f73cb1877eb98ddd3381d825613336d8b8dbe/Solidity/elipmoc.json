{
	"address": "0x657f73cb1877eb98ddd3381d825613336d8b8dbe",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the provided decompiled code, the Solidity smart contract looks like this:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    uint256[] private _name; \n    uint256[] private _symbol;\n    mapping (uint256 => uint256[]) private _myTokens;\n    mapping (uint256 => uint256[]) private _myEthBank;\n    uint256 private _totalSupply;\n    uint256 private _coinMC;\n    uint256 private _tokenPrice;\n    uint256 private _ethJackpot;\n    uint256 private _jpTimer;\n    uint256 private _jpRound;\n    address private _leader;\n\n    event BuyEvent(address indexed buyer, uint256 amount);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event SellEvent(address indexed seller, uint256 amount);\n\n    function buy() public payable { \n        // logic for the buy function\n    }\n\n    function name() public view returns (uint256[] memory) { \n        // logic for the name function\n    }\n\n    function coinMC() public view returns (uint256) { \n        // logic for the coinMC function\n    }\n\n    function sellingPrice() public view returns (uint256) { \n        // logic for the sellingPrice function\n    }\n\n    function sellAll() public { \n        // logic for the sellAll function\n    }\n\n    function totalSupply() public view returns (uint256) { \n        // logic for the totalSupply function\n    }\n\n    function jpRound() public view returns (uint256) { \n        // logic for the jpRound function\n    }\n\n    function decimals() public pure returns (uint8) { \n        return 18;\n    }\n\n    function buyingPrice() public view returns (uint256) { \n        // logic for the buyingPrice function\n    }\n\n    function withdraw() public { \n        // logic for the withdraw function\n    }\n\n    function leader() public view returns (address) { \n        // logic for the leader function\n    }\n\n    function panic() public { \n        // logic for the panic function\n    }\n\n    function totalEthereumBalance() public view returns (uint256) { \n        // logic for the totalEthereumBalance function\n    }\n\n    function balanceOf(address account) public view returns (uint256) { \n        // logic for the balanceOf function\n    }\n\n    function tokenPrice() public view returns (uint256) { \n        // logic for the tokenPrice function\n    }\n\n    function jpTimer() public view returns (uint256) { \n        // logic for the jpTimer function\n    }\n\n    function myTokens() public view returns (uint256[]) { \n        // logic for the myTokens function\n    }\n\n    function symbol() public view returns (uint256[] memory) { \n        // logic for the symbol function\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) { \n        // logic for the transfer function\n    }\n\n    function ethBank(address account) public view returns (uint256[]) { \n        // logic for the ethBank function\n    }\n\n    function sell(uint256 amount) public { \n        // logic for the sell function\n    }\n\n    function myEthBank() public view returns (uint256[]) { \n        // logic for the myEthBank function\n    }\n\n    function ethJackpot() public view returns (uint256) { \n        // logic for the ethJackpot function\n    }\n\n    function reinvest() public { \n        // logic for the reinvest function\n    }\n}\n```\nThe actual function bodies are not included as the provided decompiled code does not provide the necessary information to accurately reconstruct them.",
				"role": "assistant"
			}
		}
	],
	"created": 1701459133,
	"id": "chatcmpl-8R3XBvSM9qPgE3Da52uBBgdbYWgNF",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 20:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _myTokens; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _myEthBank; // STORAGE[0x3]\nuint256 _totalSupply; // STORAGE[0x4]\nuint256 _coinMC; // STORAGE[0x5]\nuint256 _tokenPrice; // STORAGE[0x6]\nuint256 _ethJackpot; // STORAGE[0x7]\nuint256 _jpTimer; // STORAGE[0x9]\nuint256 _jpRound; // STORAGE[0xa]\naddress _leader; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nonBuyEvent(address, uint256);\nonTransfer(address, address, uint256);\nonSellEvent(address, uint256);\n\nfunction buy() public payable { \n    if (block.timestamp >= _jpTimer) {\n        _ethJackpot = 0;\n        require((_ethJackpot >> 1) + _myEthBank[_leader] >= _myEthBank[_leader]);\n        _myEthBank[_leader] += _ethJackpot >> 1;\n        _jpRound += 1;\n    }\n    v0 = 0x74c();\n    v1 = 0xdf3(0xde0b6b3a7640000, msg.value);\n    assert(v0);\n    require(v1 / v0 + _myTokens[msg.sender] >= _myTokens[msg.sender]);\n    _myTokens[msg.sender] += v1 / v0;\n    require(v1 / v0 + _totalSupply >= _totalSupply);\n    _totalSupply += v1 / v0;\n    emit onBuyEvent(msg.sender, v1 / v0);\n    require((msg.value / 10 >> 1) + _ethJackpot >= _ethJackpot);\n    _ethJackpot += msg.value / 10 >> 1;\n    require(msg.value / 10 >> 1 <= msg.value);\n    require(msg.value - (msg.value / 10 >> 1) + _coinMC >= _coinMC);\n    _coinMC += msg.value - (msg.value / 10 >> 1);\n    v2 = 0x74c();\n    if (msg.value >= v2) {\n        _jpTimer = 0x15180 + block.timestamp;\n        _leader = msg.sender;\n    }\n    assert(_totalSupply / 0xde0b6b3a7640000);\n    _tokenPrice = _coinMC / (_totalSupply / 0xde0b6b3a7640000);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction coinMC() public nonPayable { \n    return _coinMC;\n}\n\nfunction sellingPrice() public nonPayable { \n    require(_tokenPrice / 10 <= _tokenPrice);\n    return _tokenPrice - _tokenPrice / 10;\n}\n\nfunction sellAll() public nonPayable { \n    0x70c();\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction jpRound() public nonPayable { \n    return _jpRound;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction buyingPrice() public nonPayable { \n    v0 = 0x74c();\n    return v0;\n}\n\nfunction withdraw() public payable { \n    0x775();\n}\n\nfunction leader() public nonPayable { \n    return _leader;\n}\n\nfunction panic() public payable { \n    if (_myTokens[msg.sender] > 0) {\n        0x70c();\n    }\n    0x775();\n}\n\nfunction totalEthereumBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _myTokens[varg0];\n}\n\nfunction tokenPrice() public nonPayable { \n    return _tokenPrice;\n}\n\nfunction jpTimer() public nonPayable { \n    return _jpTimer;\n}\n\nfunction myTokens() public nonPayable { \n    return _myTokens[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _myTokens[msg.sender]);\n    if (varg1 > 0) {\n        require(varg1 <= _myTokens[msg.sender]);\n        _myTokens[msg.sender] = _myTokens[msg.sender] - varg1;\n        require(varg1 + _myTokens[varg0] >= _myTokens[varg0]);\n        _myTokens[varg0] += varg1;\n    }\n    emit onTransfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction ethBank(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _myEthBank[varg0];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(_myTokens[msg.sender] > 0);\n    require(varg0 <= _myTokens[msg.sender]);\n    v0 = 0xdf3(_tokenPrice, varg0);\n    require(v0 / 0xde0b6b3a7640000 / 10 <= v0 / 0xde0b6b3a7640000);\n    require(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    require(varg0 <= _myTokens[msg.sender]);\n    _myTokens[msg.sender] = _myTokens[msg.sender] - varg0;\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1) + _ethJackpot >= _ethJackpot);\n    _ethJackpot += v0 / 0xde0b6b3a7640000 / 10 >> 1;\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1) + _myEthBank[_leader] >= _myEthBank[_leader]);\n    _myEthBank[_leader] += v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1;\n    emit onSellEvent(msg.sender, varg0);\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1) + (v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10) + (v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1) <= _coinMC);\n    _coinMC = _coinMC - ((v0 / 0xde0b6b3a7640000 / 10 >> 1) + (v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10) + (v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1));\n    if (0 >= _totalSupply) {\n        v1 = 0x74c();\n        require(_coinMC + v1 >= v1);\n        _tokenPrice = _coinMC + v1;\n    } else {\n        v2 = 0xdf3(0xde0b6b3a7640000, _coinMC);\n        assert(_totalSupply);\n        _tokenPrice = v2 / _totalSupply;\n    }\n    require(v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10 + _myEthBank[msg.sender] >= _myEthBank[msg.sender]);\n    _myEthBank[msg.sender] += v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10;\n}\n\nfunction myEthBank() public nonPayable { \n    return _myEthBank[msg.sender];\n}\n\nfunction ethJackpot() public nonPayable { \n    return _ethJackpot;\n}\n\nfunction reinvest() public nonPayable { \n    require(_myEthBank[msg.sender] > 0);\n    _myEthBank[msg.sender] = 0;\n    v0 = 0x74c();\n    require(_myEthBank[msg.sender] >= v0);\n    if (block.timestamp >= _jpTimer) {\n        v1 = 0x74c();\n        assert(v1);\n        _ethJackpot = 0;\n        require((_ethJackpot >> 1) / v1 + _myEthBank[_leader] >= _myEthBank[_leader]);\n        _myEthBank[_leader] += (_ethJackpot >> 1) / v1;\n    }\n    v2 = 0x74c();\n    v3 = 0xdf3(0xde0b6b3a7640000, _myEthBank[msg.sender]);\n    assert(v2);\n    require(v3 / v2 + _myTokens[msg.sender] >= _myTokens[msg.sender]);\n    _myTokens[msg.sender] += v3 / v2;\n    require(v3 / v2 + _totalSupply >= _totalSupply);\n    _totalSupply += v3 / v2;\n    emit onBuyEvent(msg.sender, v3 / v2);\n    require((_myEthBank[msg.sender] / 10 >> 1) + _ethJackpot >= _ethJackpot);\n    _ethJackpot += _myEthBank[msg.sender] / 10 >> 1;\n    require(_myEthBank[msg.sender] / 10 >> 1 <= _myEthBank[msg.sender]);\n    require(_myEthBank[msg.sender] - (_myEthBank[msg.sender] / 10 >> 1) + _coinMC >= _coinMC);\n    _coinMC += _myEthBank[msg.sender] - (_myEthBank[msg.sender] / 10 >> 1);\n    assert(_totalSupply / 0xde0b6b3a7640000);\n    _tokenPrice = _coinMC / (_totalSupply / 0xde0b6b3a7640000);\n    _jpTimer = 0x15180 + block.timestamp;\n    _leader = msg.sender;\n}\n\nfunction 0x70c() private { \n    require(_myTokens[msg.sender] > 0);\n    require(_myTokens[msg.sender] > 0);\n    require(_myTokens[msg.sender] <= _myTokens[msg.sender]);\n    v0 = 0xdf3(_tokenPrice, _myTokens[msg.sender]);\n    require(v0 / 0xde0b6b3a7640000 / 10 <= v0 / 0xde0b6b3a7640000);\n    require(_myTokens[msg.sender] <= _totalSupply);\n    _totalSupply = _totalSupply - _myTokens[msg.sender];\n    require(_myTokens[msg.sender] <= _myTokens[msg.sender]);\n    _myTokens[msg.sender] = _myTokens[msg.sender] - _myTokens[msg.sender];\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1) + _ethJackpot >= _ethJackpot);\n    _ethJackpot += v0 / 0xde0b6b3a7640000 / 10 >> 1;\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1) + _myEthBank[_leader] >= _myEthBank[_leader]);\n    _myEthBank[_leader] += v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1;\n    emit onSellEvent(msg.sender, _myTokens[msg.sender]);\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1) + (v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10) + (v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1) <= _coinMC);\n    _coinMC = _coinMC - ((v0 / 0xde0b6b3a7640000 / 10 >> 1) + (v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10) + (v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1));\n    if (0 >= _totalSupply) {\n        v1 = 0x74c();\n        require(_coinMC + v1 >= v1);\n        _tokenPrice = _coinMC + v1;\n    } else {\n        v2 = 0xdf3(0xde0b6b3a7640000, _coinMC);\n        assert(_totalSupply);\n        _tokenPrice = v2 / _totalSupply;\n    }\n    require(v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10 + _myEthBank[msg.sender] >= _myEthBank[msg.sender]);\n    _myEthBank[msg.sender] += v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10;\n    return ;\n}\n\nfunction 0x74c() private { \n    require(_tokenPrice / 10 + _tokenPrice >= _tokenPrice);\n    return _tokenPrice / 10 + _tokenPrice;\n}\n\nfunction 0x775() private { \n    require(_myEthBank[msg.sender] > 0);\n    _myEthBank[msg.sender] = 0;\n    v0 = msg.sender.call().value(_myEthBank[msg.sender]).gas(2300 * !_myEthBank[msg.sender]);\n    require(v0); // checks call status, propagates error data on error\n    return ;\n}\n\nfunction 0xdf3(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        require(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x70a08231 > function_selector) {\n            if (0x313ce567 > function_selector) {\n                if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0xf036533 == function_selector) {\n                    coinMC();\n                } else if (0x12821b5e == function_selector) {\n                    sellingPrice();\n                } else if (0x16e457f0 == function_selector) {\n                    sellAll();\n                } else if (0x18160ddd == function_selector) {\n                    totalSupply();\n                } else if (0x233f69b7 == function_selector) {\n                    jpRound();\n                }\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x399c0425 == function_selector) {\n                buyingPrice();\n            } else if (0x3ccfd60b == function_selector) {\n                withdraw();\n            } else if (0x40eedabb == function_selector) {\n                leader();\n            } else if (0x4700d305 == function_selector) {\n                panic();\n            } else if (0x6b2f4632 == function_selector) {\n                totalEthereumBalance();\n            }\n        } else if (0xa9059cbb > function_selector) {\n            if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            } else if (0x7ff9b596 == function_selector) {\n                tokenPrice();\n            } else if (0x8442978e == function_selector) {\n                jpTimer();\n            } else if (0x949e8acd == function_selector) {\n                myTokens();\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0xa6f2ae3a != function_selector) {\n            }\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xbf308045 == function_selector) {\n            ethBank(address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe87b3756 == function_selector) {\n            myEthBank();\n        } else if (0xf6e1fe45 == function_selector) {\n            ethJackpot();\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    buy();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 20:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _myTokens; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _myEthBank; // STORAGE[0x3]\nuint256 _totalSupply; // STORAGE[0x4]\nuint256 _coinMC; // STORAGE[0x5]\nuint256 _tokenPrice; // STORAGE[0x6]\nuint256 _ethJackpot; // STORAGE[0x7]\nuint256 _jpTimer; // STORAGE[0x9]\nuint256 _jpRound; // STORAGE[0xa]\naddress _leader; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nonBuyEvent(address, uint256);\nonTransfer(address, address, uint256);\nonSellEvent(address, uint256);\n\nfunction buy() public payable { \n    if (block.timestamp >= _jpTimer) {\n        _ethJackpot = 0;\n        require((_ethJackpot >> 1) + _myEthBank[_leader] >= _myEthBank[_leader]);\n        _myEthBank[_leader] += _ethJackpot >> 1;\n        _jpRound += 1;\n    }\n    v0 = 0x74c();\n    v1 = 0xdf3(0xde0b6b3a7640000, msg.value);\n    assert(v0);\n    require(v1 / v0 + _myTokens[msg.sender] >= _myTokens[msg.sender]);\n    _myTokens[msg.sender] += v1 / v0;\n    require(v1 / v0 + _totalSupply >= _totalSupply);\n    _totalSupply += v1 / v0;\n    emit onBuyEvent(msg.sender, v1 / v0);\n    require((msg.value / 10 >> 1) + _ethJackpot >= _ethJackpot);\n    _ethJackpot += msg.value / 10 >> 1;\n    require(msg.value / 10 >> 1 <= msg.value);\n    require(msg.value - (msg.value / 10 >> 1) + _coinMC >= _coinMC);\n    _coinMC += msg.value - (msg.value / 10 >> 1);\n    v2 = 0x74c();\n    if (msg.value >= v2) {\n        _jpTimer = 0x15180 + block.timestamp;\n        _leader = msg.sender;\n    }\n    assert(_totalSupply / 0xde0b6b3a7640000);\n    _tokenPrice = _coinMC / (_totalSupply / 0xde0b6b3a7640000);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction coinMC() public nonPayable { \n    return _coinMC;\n}\n\nfunction sellingPrice() public nonPayable { \n    require(_tokenPrice / 10 <= _tokenPrice);\n    return _tokenPrice - _tokenPrice / 10;\n}\n\nfunction sellAll() public nonPayable { \n    0x70c();\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction jpRound() public nonPayable { \n    return _jpRound;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction buyingPrice() public nonPayable { \n    v0 = 0x74c();\n    return v0;\n}\n\nfunction withdraw() public payable { \n    0x775();\n}\n\nfunction leader() public nonPayable { \n    return _leader;\n}\n\nfunction panic() public payable { \n    if (_myTokens[msg.sender] > 0) {\n        0x70c();\n    }\n    0x775();\n}\n\nfunction totalEthereumBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _myTokens[varg0];\n}\n\nfunction tokenPrice() public nonPayable { \n    return _tokenPrice;\n}\n\nfunction jpTimer() public nonPayable { \n    return _jpTimer;\n}\n\nfunction myTokens() public nonPayable { \n    return _myTokens[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _myTokens[msg.sender]);\n    if (varg1 > 0) {\n        require(varg1 <= _myTokens[msg.sender]);\n        _myTokens[msg.sender] = _myTokens[msg.sender] - varg1;\n        require(varg1 + _myTokens[varg0] >= _myTokens[varg0]);\n        _myTokens[varg0] += varg1;\n    }\n    emit onTransfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction ethBank(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _myEthBank[varg0];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(_myTokens[msg.sender] > 0);\n    require(varg0 <= _myTokens[msg.sender]);\n    v0 = 0xdf3(_tokenPrice, varg0);\n    require(v0 / 0xde0b6b3a7640000 / 10 <= v0 / 0xde0b6b3a7640000);\n    require(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    require(varg0 <= _myTokens[msg.sender]);\n    _myTokens[msg.sender] = _myTokens[msg.sender] - varg0;\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1) + _ethJackpot >= _ethJackpot);\n    _ethJackpot += v0 / 0xde0b6b3a7640000 / 10 >> 1;\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1) + _myEthBank[_leader] >= _myEthBank[_leader]);\n    _myEthBank[_leader] += v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1;\n    emit onSellEvent(msg.sender, varg0);\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1) + (v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10) + (v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1) <= _coinMC);\n    _coinMC = _coinMC - ((v0 / 0xde0b6b3a7640000 / 10 >> 1) + (v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10) + (v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1));\n    if (0 >= _totalSupply) {\n        v1 = 0x74c();\n        require(_coinMC + v1 >= v1);\n        _tokenPrice = _coinMC + v1;\n    } else {\n        v2 = 0xdf3(0xde0b6b3a7640000, _coinMC);\n        assert(_totalSupply);\n        _tokenPrice = v2 / _totalSupply;\n    }\n    require(v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10 + _myEthBank[msg.sender] >= _myEthBank[msg.sender]);\n    _myEthBank[msg.sender] += v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10;\n}\n\nfunction myEthBank() public nonPayable { \n    return _myEthBank[msg.sender];\n}\n\nfunction ethJackpot() public nonPayable { \n    return _ethJackpot;\n}\n\nfunction reinvest() public nonPayable { \n    require(_myEthBank[msg.sender] > 0);\n    _myEthBank[msg.sender] = 0;\n    v0 = 0x74c();\n    require(_myEthBank[msg.sender] >= v0);\n    if (block.timestamp >= _jpTimer) {\n        v1 = 0x74c();\n        assert(v1);\n        _ethJackpot = 0;\n        require((_ethJackpot >> 1) / v1 + _myEthBank[_leader] >= _myEthBank[_leader]);\n        _myEthBank[_leader] += (_ethJackpot >> 1) / v1;\n    }\n    v2 = 0x74c();\n    v3 = 0xdf3(0xde0b6b3a7640000, _myEthBank[msg.sender]);\n    assert(v2);\n    require(v3 / v2 + _myTokens[msg.sender] >= _myTokens[msg.sender]);\n    _myTokens[msg.sender] += v3 / v2;\n    require(v3 / v2 + _totalSupply >= _totalSupply);\n    _totalSupply += v3 / v2;\n    emit onBuyEvent(msg.sender, v3 / v2);\n    require((_myEthBank[msg.sender] / 10 >> 1) + _ethJackpot >= _ethJackpot);\n    _ethJackpot += _myEthBank[msg.sender] / 10 >> 1;\n    require(_myEthBank[msg.sender] / 10 >> 1 <= _myEthBank[msg.sender]);\n    require(_myEthBank[msg.sender] - (_myEthBank[msg.sender] / 10 >> 1) + _coinMC >= _coinMC);\n    _coinMC += _myEthBank[msg.sender] - (_myEthBank[msg.sender] / 10 >> 1);\n    assert(_totalSupply / 0xde0b6b3a7640000);\n    _tokenPrice = _coinMC / (_totalSupply / 0xde0b6b3a7640000);\n    _jpTimer = 0x15180 + block.timestamp;\n    _leader = msg.sender;\n}\n\nfunction 0x70c() private { \n    require(_myTokens[msg.sender] > 0);\n    require(_myTokens[msg.sender] > 0);\n    require(_myTokens[msg.sender] <= _myTokens[msg.sender]);\n    v0 = 0xdf3(_tokenPrice, _myTokens[msg.sender]);\n    require(v0 / 0xde0b6b3a7640000 / 10 <= v0 / 0xde0b6b3a7640000);\n    require(_myTokens[msg.sender] <= _totalSupply);\n    _totalSupply = _totalSupply - _myTokens[msg.sender];\n    require(_myTokens[msg.sender] <= _myTokens[msg.sender]);\n    _myTokens[msg.sender] = _myTokens[msg.sender] - _myTokens[msg.sender];\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1) + _ethJackpot >= _ethJackpot);\n    _ethJackpot += v0 / 0xde0b6b3a7640000 / 10 >> 1;\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1) + _myEthBank[_leader] >= _myEthBank[_leader]);\n    _myEthBank[_leader] += v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1;\n    emit onSellEvent(msg.sender, _myTokens[msg.sender]);\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1) + (v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10) + (v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1) <= _coinMC);\n    _coinMC = _coinMC - ((v0 / 0xde0b6b3a7640000 / 10 >> 1) + (v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10) + (v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1));\n    if (0 >= _totalSupply) {\n        v1 = 0x74c();\n        require(_coinMC + v1 >= v1);\n        _tokenPrice = _coinMC + v1;\n    } else {\n        v2 = 0xdf3(0xde0b6b3a7640000, _coinMC);\n        assert(_totalSupply);\n        _tokenPrice = v2 / _totalSupply;\n    }\n    require(v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10 + _myEthBank[msg.sender] >= _myEthBank[msg.sender]);\n    _myEthBank[msg.sender] += v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10;\n    return ;\n}\n\nfunction 0x74c() private { \n    require(_tokenPrice / 10 + _tokenPrice >= _tokenPrice);\n    return _tokenPrice / 10 + _tokenPrice;\n}\n\nfunction 0x775() private { \n    require(_myEthBank[msg.sender] > 0);\n    _myEthBank[msg.sender] = 0;\n    v0 = msg.sender.call().value(_myEthBank[msg.sender]).gas(2300 * !_myEthBank[msg.sender]);\n    require(v0); // checks call status, propagates error data on error\n    return ;\n}\n\nfunction 0xdf3(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        require(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x70a08231 > function_selector) {\n            if (0x313ce567 > function_selector) {\n                if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0xf036533 == function_selector) {\n                    coinMC();\n                } else if (0x12821b5e == function_selector) {\n                    sellingPrice();\n                } else if (0x16e457f0 == function_selector) {\n                    sellAll();\n                } else if (0x18160ddd == function_selector) {\n                    totalSupply();\n                } else if (0x233f69b7 == function_selector) {\n                    jpRound();\n                }\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x399c0425 == function_selector) {\n                buyingPrice();\n            } else if (0x3ccfd60b == function_selector) {\n                withdraw();\n            } else if (0x40eedabb == function_selector) {\n                leader();\n            } else if (0x4700d305 == function_selector) {\n                panic();\n            } else if (0x6b2f4632 == function_selector) {\n                totalEthereumBalance();\n            }\n        } else if (0xa9059cbb > function_selector) {\n            if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            } else if (0x7ff9b596 == function_selector) {\n                tokenPrice();\n            } else if (0x8442978e == function_selector) {\n                jpTimer();\n            } else if (0x949e8acd == function_selector) {\n                myTokens();\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0xa6f2ae3a != function_selector) {\n            }\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xbf308045 == function_selector) {\n            ethBank(address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe87b3756 == function_selector) {\n            myEthBank();\n        } else if (0xf6e1fe45 == function_selector) {\n            ethJackpot();\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    buy();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 20:27 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _myTokens; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _myEthBank; // STORAGE[0x3]\nuint256 _totalSupply; // STORAGE[0x4]\nuint256 _coinMC; // STORAGE[0x5]\nuint256 _tokenPrice; // STORAGE[0x6]\nuint256 _ethJackpot; // STORAGE[0x7]\nuint256 _jpTimer; // STORAGE[0x9]\nuint256 _jpRound; // STORAGE[0xa]\naddress _leader; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nonBuyEvent(address, uint256);\nonTransfer(address, address, uint256);\nonSellEvent(address, uint256);\n\nfunction buy() public payable { \n    if (block.timestamp >= _jpTimer) {\n        _ethJackpot = 0;\n        require((_ethJackpot >> 1) + _myEthBank[_leader] >= _myEthBank[_leader]);\n        _myEthBank[_leader] += _ethJackpot >> 1;\n        _jpRound += 1;\n    }\n    v0 = 0x74c();\n    v1 = 0xdf3(0xde0b6b3a7640000, msg.value);\n    assert(v0);\n    require(v1 / v0 + _myTokens[msg.sender] >= _myTokens[msg.sender]);\n    _myTokens[msg.sender] += v1 / v0;\n    require(v1 / v0 + _totalSupply >= _totalSupply);\n    _totalSupply += v1 / v0;\n    emit onBuyEvent(msg.sender, v1 / v0);\n    require((msg.value / 10 >> 1) + _ethJackpot >= _ethJackpot);\n    _ethJackpot += msg.value / 10 >> 1;\n    require(msg.value / 10 >> 1 <= msg.value);\n    require(msg.value - (msg.value / 10 >> 1) + _coinMC >= _coinMC);\n    _coinMC += msg.value - (msg.value / 10 >> 1);\n    v2 = 0x74c();\n    if (msg.value >= v2) {\n        _jpTimer = 0x15180 + block.timestamp;\n        _leader = msg.sender;\n    }\n    assert(_totalSupply / 0xde0b6b3a7640000);\n    _tokenPrice = _coinMC / (_totalSupply / 0xde0b6b3a7640000);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction coinMC() public nonPayable { \n    return _coinMC;\n}\n\nfunction sellingPrice() public nonPayable { \n    require(_tokenPrice / 10 <= _tokenPrice);\n    return _tokenPrice - _tokenPrice / 10;\n}\n\nfunction sellAll() public nonPayable { \n    0x70c();\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction jpRound() public nonPayable { \n    return _jpRound;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction buyingPrice() public nonPayable { \n    v0 = 0x74c();\n    return v0;\n}\n\nfunction withdraw() public payable { \n    0x775();\n}\n\nfunction leader() public nonPayable { \n    return _leader;\n}\n\nfunction panic() public payable { \n    if (_myTokens[msg.sender] > 0) {\n        0x70c();\n    }\n    0x775();\n}\n\nfunction totalEthereumBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _myTokens[varg0];\n}\n\nfunction tokenPrice() public nonPayable { \n    return _tokenPrice;\n}\n\nfunction jpTimer() public nonPayable { \n    return _jpTimer;\n}\n\nfunction myTokens() public nonPayable { \n    return _myTokens[msg.sender];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(0x1 & _symbol.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _myTokens[msg.sender]);\n    if (varg1 > 0) {\n        require(varg1 <= _myTokens[msg.sender]);\n        _myTokens[msg.sender] = _myTokens[msg.sender] - varg1;\n        require(varg1 + _myTokens[varg0] >= _myTokens[varg0]);\n        _myTokens[varg0] += varg1;\n    }\n    emit onTransfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction ethBank(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _myEthBank[varg0];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(_myTokens[msg.sender] > 0);\n    require(varg0 <= _myTokens[msg.sender]);\n    v0 = 0xdf3(_tokenPrice, varg0);\n    require(v0 / 0xde0b6b3a7640000 / 10 <= v0 / 0xde0b6b3a7640000);\n    require(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    require(varg0 <= _myTokens[msg.sender]);\n    _myTokens[msg.sender] = _myTokens[msg.sender] - varg0;\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1) + _ethJackpot >= _ethJackpot);\n    _ethJackpot += v0 / 0xde0b6b3a7640000 / 10 >> 1;\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1) + _myEthBank[_leader] >= _myEthBank[_leader]);\n    _myEthBank[_leader] += v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1;\n    emit onSellEvent(msg.sender, varg0);\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1) + (v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10) + (v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1) <= _coinMC);\n    _coinMC = _coinMC - ((v0 / 0xde0b6b3a7640000 / 10 >> 1) + (v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10) + (v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1));\n    if (0 >= _totalSupply) {\n        v1 = 0x74c();\n        require(_coinMC + v1 >= v1);\n        _tokenPrice = _coinMC + v1;\n    } else {\n        v2 = 0xdf3(0xde0b6b3a7640000, _coinMC);\n        assert(_totalSupply);\n        _tokenPrice = v2 / _totalSupply;\n    }\n    require(v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10 + _myEthBank[msg.sender] >= _myEthBank[msg.sender]);\n    _myEthBank[msg.sender] += v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10;\n}\n\nfunction myEthBank() public nonPayable { \n    return _myEthBank[msg.sender];\n}\n\nfunction ethJackpot() public nonPayable { \n    return _ethJackpot;\n}\n\nfunction reinvest() public nonPayable { \n    require(_myEthBank[msg.sender] > 0);\n    _myEthBank[msg.sender] = 0;\n    v0 = 0x74c();\n    require(_myEthBank[msg.sender] >= v0);\n    if (block.timestamp >= _jpTimer) {\n        v1 = 0x74c();\n        assert(v1);\n        _ethJackpot = 0;\n        require((_ethJackpot >> 1) / v1 + _myEthBank[_leader] >= _myEthBank[_leader]);\n        _myEthBank[_leader] += (_ethJackpot >> 1) / v1;\n    }\n    v2 = 0x74c();\n    v3 = 0xdf3(0xde0b6b3a7640000, _myEthBank[msg.sender]);\n    assert(v2);\n    require(v3 / v2 + _myTokens[msg.sender] >= _myTokens[msg.sender]);\n    _myTokens[msg.sender] += v3 / v2;\n    require(v3 / v2 + _totalSupply >= _totalSupply);\n    _totalSupply += v3 / v2;\n    emit onBuyEvent(msg.sender, v3 / v2);\n    require((_myEthBank[msg.sender] / 10 >> 1) + _ethJackpot >= _ethJackpot);\n    _ethJackpot += _myEthBank[msg.sender] / 10 >> 1;\n    require(_myEthBank[msg.sender] / 10 >> 1 <= _myEthBank[msg.sender]);\n    require(_myEthBank[msg.sender] - (_myEthBank[msg.sender] / 10 >> 1) + _coinMC >= _coinMC);\n    _coinMC += _myEthBank[msg.sender] - (_myEthBank[msg.sender] / 10 >> 1);\n    assert(_totalSupply / 0xde0b6b3a7640000);\n    _tokenPrice = _coinMC / (_totalSupply / 0xde0b6b3a7640000);\n    _jpTimer = 0x15180 + block.timestamp;\n    _leader = msg.sender;\n}\n\nfunction 0x70c() private { \n    require(_myTokens[msg.sender] > 0);\n    require(_myTokens[msg.sender] > 0);\n    require(_myTokens[msg.sender] <= _myTokens[msg.sender]);\n    v0 = 0xdf3(_tokenPrice, _myTokens[msg.sender]);\n    require(v0 / 0xde0b6b3a7640000 / 10 <= v0 / 0xde0b6b3a7640000);\n    require(_myTokens[msg.sender] <= _totalSupply);\n    _totalSupply = _totalSupply - _myTokens[msg.sender];\n    require(_myTokens[msg.sender] <= _myTokens[msg.sender]);\n    _myTokens[msg.sender] = _myTokens[msg.sender] - _myTokens[msg.sender];\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1) + _ethJackpot >= _ethJackpot);\n    _ethJackpot += v0 / 0xde0b6b3a7640000 / 10 >> 1;\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1) + _myEthBank[_leader] >= _myEthBank[_leader]);\n    _myEthBank[_leader] += v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1;\n    emit onSellEvent(msg.sender, _myTokens[msg.sender]);\n    require((v0 / 0xde0b6b3a7640000 / 10 >> 1) + (v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10) + (v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1) <= _coinMC);\n    _coinMC = _coinMC - ((v0 / 0xde0b6b3a7640000 / 10 >> 1) + (v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10) + (v0 / 0xde0b6b3a7640000 / 10 >> 1 >> 1));\n    if (0 >= _totalSupply) {\n        v1 = 0x74c();\n        require(_coinMC + v1 >= v1);\n        _tokenPrice = _coinMC + v1;\n    } else {\n        v2 = 0xdf3(0xde0b6b3a7640000, _coinMC);\n        assert(_totalSupply);\n        _tokenPrice = v2 / _totalSupply;\n    }\n    require(v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10 + _myEthBank[msg.sender] >= _myEthBank[msg.sender]);\n    _myEthBank[msg.sender] += v0 / 0xde0b6b3a7640000 - v0 / 0xde0b6b3a7640000 / 10;\n    return ;\n}\n\nfunction 0x74c() private { \n    require(_tokenPrice / 10 + _tokenPrice >= _tokenPrice);\n    return _tokenPrice / 10 + _tokenPrice;\n}\n\nfunction 0x775() private { \n    require(_myEthBank[msg.sender] > 0);\n    _myEthBank[msg.sender] = 0;\n    v0 = msg.sender.call().value(_myEthBank[msg.sender]).gas(2300 * !_myEthBank[msg.sender]);\n    require(v0); // checks call status, propagates error data on error\n    return ;\n}\n\nfunction 0xdf3(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        require(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x70a08231 > function_selector) {\n            if (0x313ce567 > function_selector) {\n                if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0xf036533 == function_selector) {\n                    coinMC();\n                } else if (0x12821b5e == function_selector) {\n                    sellingPrice();\n                } else if (0x16e457f0 == function_selector) {\n                    sellAll();\n                } else if (0x18160ddd == function_selector) {\n                    totalSupply();\n                } else if (0x233f69b7 == function_selector) {\n                    jpRound();\n                }\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x399c0425 == function_selector) {\n                buyingPrice();\n            } else if (0x3ccfd60b == function_selector) {\n                withdraw();\n            } else if (0x40eedabb == function_selector) {\n                leader();\n            } else if (0x4700d305 == function_selector) {\n                panic();\n            } else if (0x6b2f4632 == function_selector) {\n                totalEthereumBalance();\n            }\n        } else if (0xa9059cbb > function_selector) {\n            if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            } else if (0x7ff9b596 == function_selector) {\n                tokenPrice();\n            } else if (0x8442978e == function_selector) {\n                jpTimer();\n            } else if (0x949e8acd == function_selector) {\n                myTokens();\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0xa6f2ae3a != function_selector) {\n            }\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xbf308045 == function_selector) {\n            ethBank(address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe87b3756 == function_selector) {\n            myEthBank();\n        } else if (0xf6e1fe45 == function_selector) {\n            ethJackpot();\n        } else if (0xfdb5a03e == function_selector) {\n            reinvest();\n        }\n    }\n    buy();\n}\n.",
	"status": "1",
	"time_cost": 42.35076951980591,
	"usage": {
		"completion_tokens": 769,
		"prompt_tokens": 4547,
		"total_tokens": 5316
	}
}