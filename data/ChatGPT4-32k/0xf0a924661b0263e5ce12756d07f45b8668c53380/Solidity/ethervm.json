{
	"address": "0xf0a924661b0263e5ce12756d07f45b8668c53380",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a solidity contract interpretation of the decompiled EVM bytecode. Note that some parts of the decompiled code are not clear and so the Solidity contract may have some inaccuracies.\n\n```solidity\npragma solidity ^0.6.0;\n\ncontract Contract {\n    mapping (address => uint256) public investedAmountOf;\n    mapping (address => uint256) public tokenAmountOf;\n    mapping (uint256 => Investment) public investments;\n    uint256 public weiRaised;\n    uint256 public weiRefunded;\n    uint256 public loadedRefund;\n    uint256 public startsAt;\n    uint256 public maxGoalReachedAt;\n    address public owner;\n    bool public finalized;\n    bool public halted;\n\n    struct Investment {\n        address investor;\n        uint256 weiAmount;\n    }\n\n    function invest(address investor) public payable {\n        require(investor != address(0));\n        require(msg.value > 0);\n        investedAmountOf[investor] += msg.value;\n        weiRaised += msg.value;\n    }\n\n    function refund() public {\n        require(investedAmountOf[msg.sender] > 0);\n        uint256 amount = investedAmountOf[msg.sender];\n        investedAmountOf[msg.sender] = 0;\n        weiRefunded += amount;\n        msg.sender.transfer(amount);\n    }\n\n    function halt() public {\n        require(msg.sender == owner);\n        halted = true;\n    }\n\n    function unhalt() public {\n        require(msg.sender == owner);\n        halted = false;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == owner);\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n\n    function getState() public view returns (uint256) {\n        // Implementation depends on business logic\n    }\n\n    function isCrowdsaleFull() public view returns (bool) {\n        // Implementation depends on business logic\n    }\n\n    function isMinimumGoalReached() public view returns (bool) {\n        // Implementation depends on business logic\n    }\n\n    function kill() public {\n        require(msg.sender == owner);\n        selfdestruct(msg.sender);\n    }\n\n    // Other getter functions and business logic\n}\n```\nThis contract includes fundamental functionalities like `invest`, `refund`, `halt`, `unhalt`, `transferOwnership` and `kill`. It also implements some common patterns in ICO contracts such as checking whether the minimum goal was reached and whether the crowdsale is full. The actual implementation of these functions will depend on the specific business logic of the contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473359,
	"id": "chatcmpl-8Mv5boNAkT3SDIDguLGfeg4rZG2tZ",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_016F:\n            var var0 = 0x017e;\n            var var1 = 0x017b;\n        \n        label_05AA:\n            var var2 = 0x017b;\n            var var3 = msg.sender;\n        \n        label_05B6:\n            var var4 = 0x05bf;\n            var var5 = var3;\n            var var6 = 0x00;\n            var var7 = var6;\n        \n            if (storage[var7] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            var var8 = 0x0b49;\n            var8 = getState();\n            var temp0 = var8;\n            var6 = temp0;\n            var8 = 0x02;\n            var var9 = var6;\n        \n            if (var9 > 0x06) { assert(); }\n        \n            if (var9 != var8) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x08;\n            var7 = msg.value;\n            var8 = 0x0b97;\n            var9 = storage[keccak256(memory[0x00:0x40])];\n            var var10 = var7;\n            var8 = func_0EB4(var9, var10);\n            memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x08;\n            storage[keccak256(memory[0x00:0x40])] = var8;\n            var8 = 0x0a;\n            var9 = storage[var8];\n            var10 = var9 + 0x01;\n            var var11 = 0x0bc2;\n            var var12 = var8;\n            var var13 = var10;\n            func_0FCC(var12, var13);\n            memory[0x00:0x20] = var8;\n            var temp1 = var9 * 0x02 + keccak256(memory[0x00:0x20]);\n            var temp2 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp2 + 0x40;\n            memory[temp2:temp2 + 0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var7;\n            storage[temp1] = (memory[temp2:temp2 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            storage[temp1 + 0x01] = memory[temp2 + 0x20:temp2 + 0x20 + 0x20];\n            var8 = 0x0c36;\n            var9 = storage[0x04];\n            var10 = var7;\n            var8 = func_0EB4(var9, var10);\n            storage[0x04] = var8;\n            var8 = !storage[0x01];\n        \n            if (!var8) {\n                if (!var8) {\n                label_0C5F:\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var7;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x40) - temp4], [0xc3f75dfc78f6efac88ad5abb5e606276b903647d97b2a62a1ef89840a658bbc3]);\n                \n                label_0CA4:\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_0C5B:\n                    storage[0x01] = block.timestamp;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var7;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + (temp5 + 0x40) - temp6], [0xc3f75dfc78f6efac88ad5abb5e606276b903647d97b2a62a1ef89840a658bbc3]);\n                    goto label_0CA4;\n                }\n            } else if (storage[0x04] < 0x0a968163f0a57b400000) { goto label_0C5F; }\n            else { goto label_0C5B; }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x03f9c793) {\n                // Dispatch table entry for invest(address)\n                var1 = 0x017e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                goto label_05B6;\n            } else if (var0 == 0x0f6a1734) {\n                // Dispatch table entry for Crowdsale(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                Crowdsale(var2, var3);\n                stop();\n            } else if (var0 == 0x1865c57d) {\n                // Dispatch table entry for getState()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cd;\n                var1 = getState();\n                var2 = memory[0x40:0x60];\n                var3 = var2;\n                var4 = var1;\n            \n                if (var4 > 0x06) { assert(); }\n            \n                var temp7 = var3;\n                memory[temp7:temp7 + 0x20] = var4 & 0xff;\n                var temp8 = memory[0x40:0x60];\n                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n            } else if (var0 == 0x1aae3460) {\n                // Dispatch table entry for investedAmountOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = investedAmountOf(var2);\n            \n            label_0210:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4042b66f) {\n                // Dispatch table entry for weiRaised()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = weiRaised();\n                goto label_0210;\n            } else if (var0 == 0x41c0e1b5) {\n                // Dispatch table entry for kill()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                var temp11 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x00] & temp11 == temp11 & msg.sender) { selfdestruct(storage[0x00] & 0x02 ** 0xa0 - 0x01); }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x442e1079) {\n                // Dispatch table entry for MIN_ICO_GOAL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = MIN_ICO_GOAL();\n                goto label_0210;\n            } else if (var0 == 0x4bb278f3) {\n                // Dispatch table entry for finalize()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                var2 = 0x03;\n                var3 = var2;\n                var4 = 0x0797;\n                var4 = getState();\n            \n                if (var4 > 0x06) { assert(); }\n            \n                if (var4 != var3) { revert(memory[0x00:0x00]); }\n            \n                var temp12 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x00] & temp12 != temp12 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                if (storage[0x00] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n            \n                if (storage[0x07] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                storage[0x07] = (storage[0x07] & ~0xff) | 0x01;\n                var3 = 0x05bf;\n                var4 = 0x00;\n                var5 = var4;\n                var6 = var5;\n                var7 = var6;\n                var8 = var7;\n            \n                if (var8 >= storage[0x0a]) {\n                label_0CF7:\n                    var9 = storage[0x02] & 0x02 ** 0xa0 - 0x01;\n                    var10 = 0x313ce567;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp13 = memory[0x40:0x60];\n                    memory[temp13:temp13 + 0x20] = (var10 & 0xffffffff) * 0x02 ** 0xe0;\n                    var11 = temp13 + 0x04;\n                    var12 = 0x20;\n                    var13 = memory[0x40:0x60];\n                    var var14 = var11 - var13;\n                    var var15 = var13;\n                    var var16 = 0x00;\n                    var var17 = var9;\n                \n                    if (!address(var17).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp14;\n                    temp14, memory[var13:var13 + var12] = address(var17).call.gas(msg.gas - 0x02c6).value(var16)(memory[var15:var15 + var14]);\n                \n                    if (!temp14) { revert(memory[0x00:0x00]); }\n                \n                    var6 = 0x0a ** memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                    var9 = 0x0d76;\n                    var10 = 0x0d70;\n                    var11 = 0x05f5e100;\n                    var12 = var6;\n                    var10 = func_0EDC(var11, var12);\n                    var11 = var4;\n                    var12 = 0x00;\n                    var13 = var12;\n                    var14 = 0x0f1a;\n                    var15 = var11 > 0x00;\n                    func_0FBC(var15);\n                    var14 = var11;\n                    var15 = var10;\n                \n                    if (!var14) { assert(); }\n                \n                    var13 = var15 / var14;\n                    var14 = 0x0ed1;\n                    var15 = var11;\n                    var16 = var10;\n                \n                    if (!var15) { assert(); }\n                \n                    func_0F36(var10, var11, var13, var15, var16);\n                    var9 = var13;\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_0CBC:\n                    var9 = 0x0ce9;\n                    var10 = var4;\n                    var11 = 0x0a;\n                    var12 = var5;\n                \n                    if (var12 >= storage[var11]) { assert(); }\n                \n                    var9 = func_0CCE(var10, var11, var12);\n                    var4 = var9;\n                    var5 = var5 + 0x01;\n                    var8 = var8;\n                \n                    if (var5 >= storage[0x0a]) { goto label_0CF7; }\n                    else { goto label_0CBC; }\n                }\n            } else if (var0 == 0x5256a36e) {\n                // Dispatch table entry for MAX_ICO_GOAL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = MAX_ICO_GOAL();\n                goto label_0210;\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                refund();\n                stop();\n            } else if (var0 == 0x5da89ac0) {\n                // Dispatch table entry for weiRefunded()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = weiRefunded();\n                goto label_0210;\n            } else if (var0 == 0x5ed7ca5b) {\n                // Dispatch table entry for halt()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                halt();\n                stop();\n            } else if (var0 == 0x797d9437) {\n                // Dispatch table entry for loadedRefund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = loadedRefund();\n                goto label_0210;\n            } else if (var0 == 0x7c2e08a3) {\n                // Dispatch table entry for isMinimumGoalReached()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0357;\n                var1 = isMinimumGoalReached();\n            \n            label_0357:\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = !!var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x87612102) {\n                // Dispatch table entry for loadRefund()\n                var1 = 0x017e;\n                loadRefund();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0388;\n                var2 = owner();\n            \n            label_0388:\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x97b150ca) {\n                // Dispatch table entry for tokenAmountOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = tokenAmountOf(var2);\n                goto label_0210;\n            } else if (var0 == 0xa6f2ae3a) {\n                // Dispatch table entry for buy()\n                var1 = 0x017e;\n                goto label_05AA;\n            } else if (var0 == 0xaf468682) {\n                // Dispatch table entry for startsAt()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = startsAt();\n                goto label_0210;\n            } else if (var0 == 0xb3f05b97) {\n                // Dispatch table entry for finalized()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0357;\n                var2 = finalized();\n                goto label_0357;\n            } else if (var0 == 0xb9b8af0b) {\n                // Dispatch table entry for halted()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0357;\n                var2 = halted();\n                goto label_0357;\n            } else if (var0 == 0xbd611c73) {\n                // Dispatch table entry for TOTAL_ICO_TOKENS()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = TOTAL_ICO_TOKENS();\n                goto label_0210;\n            } else if (var0 == 0xc4f1215c) {\n                // Dispatch table entry for maxGoalReachedAt()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = maxGoalReachedAt();\n                goto label_0210;\n            } else if (var0 == 0xc9d82c96) {\n                // Dispatch table entry for ICO_DURATION()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = ICO_DURATION();\n                goto label_0210;\n            } else if (var0 == 0xcb3e64fd) {\n                // Dispatch table entry for unhalt()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                unhalt();\n                stop();\n            } else if (var0 == 0xd5d09021) {\n                // Dispatch table entry for isCrowdsaleFull()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0357;\n                var1 = isCrowdsaleFull();\n                goto label_0357;\n            } else if (var0 == 0xf071ecc5) {\n                // Dispatch table entry for AFTER_MAX_GOAL_DURATION()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = AFTER_MAX_GOAL_DURATION();\n                goto label_0210;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xfc0c546a) {\n                // Dispatch table entry for token()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0388;\n                var2 = token();\n                goto label_0388;\n            } else if (var0 == 0xfd345c8a) {\n                // Dispatch table entry for investments(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0588;\n                var2 = msg.data[0x04:0x24];\n                var2, var3 = investments(var2);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp19 + 0x20:temp19 + 0x20 + 0x20] = var3;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x40) - temp20];\n            } else { goto label_016F; }\n        }\n    }\n    \n    function Crowdsale(var arg0, var arg1) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[0x00] = (temp1 & storage[0x00]) | (temp0 & msg.sender);\n        storage[0x02] = (temp1 & storage[0x02]) | (arg0 & temp0);\n        storage[0x03] = arg1;\n    }\n    \n    function getState() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x07] & 0xff) {\n            var0 = 0x05;\n            goto label_06DE;\n        } else if (storage[0x02] & 0x02 ** 0xa0 - 0x01) {\n            var var1 = block.timestamp >= storage[0x03];\n        \n            if (var1) {\n                var1 = block.timestamp < storage[0x03] + 0x0d2f00;\n            \n                if (!var1) { goto label_0684; }\n                else { goto label_067A; }\n            } else if (!var1) {\n            label_0684:\n            \n                if (!var1) {\n                    var1 = 0x0699;\n                    var1 = isCrowdsaleFull();\n                \n                    if (!var1) {\n                        var1 = 0x06ae;\n                        var1 = isMinimumGoalReached();\n                        var temp0 = !var1;\n                        var1 = temp0;\n                    \n                        if (var1) {\n                            var1 = storage[0x04] > 0x00;\n                        \n                            if (!var1) { goto label_06CD; }\n                            else { goto label_06C4; }\n                        } else if (!var1) {\n                        label_06CD:\n                        \n                            if (!var1) {\n                            label_06DA:\n                                var0 = 0x04;\n                            \n                            label_06DE:\n                                return var0;\n                            } else {\n                            label_06D3:\n                                var0 = 0x06;\n                                goto label_06DE;\n                            }\n                        } else {\n                        label_06C4:\n                        \n                            if (storage[0x05] < storage[0x04]) { goto label_06DA; }\n                            else { goto label_06D3; }\n                        }\n                    } else {\n                        var0 = 0x03;\n                        goto label_06DE;\n                    }\n                } else {\n                    var0 = 0x02;\n                    goto label_06DE;\n                }\n            } else {\n            label_067A:\n                var1 = 0x0682;\n                var1 = isCrowdsaleFull();\n                var1 = !var1;\n                goto label_0684;\n            }\n        } else {\n            var0 = 0x01;\n            goto label_06DE;\n        }\n    }\n    \n    function investedAmountOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function withdraw() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = address(address(this) & temp1).balance;\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp1 & storage[0x00]).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n    \n        if (temp4) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function weiRaised() returns (var r0) { return storage[0x04]; }\n    \n    function MIN_ICO_GOAL() returns (var r0) { return 0x010f0cf064dd59200000; }\n    \n    function MAX_ICO_GOAL() returns (var r0) { return 0x0a968163f0a57b400000; }\n    \n    function refund() {\n        var var0 = 0x00;\n        var var1 = 0x06;\n        var var2 = var1;\n        var var3 = 0x0826;\n        var3 = getState();\n    \n        if (var3 > 0x06) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (!var0) { goto label_0627; }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var2 = 0x0888;\n        var3 = storage[0x06];\n        var var4 = var0;\n        var2 = func_0EB4(var3, var4);\n        storage[0x06] = var2;\n        var temp0 = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = msg.sender;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x40) - temp2], [0xbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d]);\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n    \n        if (!temp4) { revert(memory[0x00:0x00]); }\n    \n    label_0627:\n    }\n    \n    function weiRefunded() returns (var r0) { return storage[0x06]; }\n    \n    function halt() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n    }\n    \n    function loadedRefund() returns (var r0) { return storage[0x05]; }\n    \n    function isMinimumGoalReached() returns (var r0) { return storage[0x04] >= 0x010f0cf064dd59200000; }\n    \n    function loadRefund() {\n        var var0 = 0x04;\n        var var1 = var0;\n        var var2 = 0x0976;\n        var2 = getState();\n    \n        if (var2 > 0x06) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x09a4;\n        var2 = storage[0x05];\n        var var3 = msg.value;\n        var1 = func_0EB4(var2, var3);\n        storage[0x05] = var1;\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function tokenAmountOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function startsAt() returns (var r0) { return storage[0x03]; }\n    \n    function finalized() returns (var r0) { return storage[0x07] & 0xff; }\n    \n    function halted() returns (var r0) { return storage[0x00] / 0x02 ** 0xa0 & 0xff; }\n    \n    function TOTAL_ICO_TOKENS() returns (var r0) { return 0x05f5e100; }\n    \n    function maxGoalReachedAt() returns (var r0) { return storage[0x01]; }\n    \n    function ICO_DURATION() returns (var r0) { return 0x0d2f00; }\n    \n    function unhalt() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x00] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff0000000000000000000000000000000000000000;\n    }\n    \n    function isCrowdsaleFull() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x04] >= 0x0a968163f0a57b400000;\n    \n        if (!var1) { return var1; }\n        else { return block.timestamp > storage[0x01] + 0x015180; }\n    }\n    \n    function AFTER_MAX_GOAL_DURATION() returns (var r0) { return 0x015180; }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { return; }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function token() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function investments(var arg0) returns (var arg0, var r1) {\n        r1 = 0x0a;\n        var var1 = arg0;\n    \n        if (var1 >= storage[r1]) { assert(); }\n    \n        memory[0x00:0x20] = r1;\n        var temp0 = var1 * 0x02 + keccak256(memory[0x00:0x20]);\n        r1 = storage[temp0 + 0x01];\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        return arg0, r1;\n    }\n    \n    function func_0CCE(var arg0, var arg1, var arg2) returns (var r0) {\n        memory[0x00:0x20] = arg1;\n        arg1 = storage[arg2 * 0x02 + keccak256(memory[0x00:0x20]) + 0x01];\n        r0 = func_0EB4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0EB4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n        var var2 = 0x0ed1;\n        var var3 = var1 >= temp0;\n    \n        if (var1 >= temp0) {\n            func_0FBC(var3);\n            // Error: Could not resolve method call return address!\n        } else {\n            func_0EC7(arg1, var1, var3);\n            return var1;\n        }\n    }\n    \n    function func_0EC7(var arg0, var arg1, var arg2) {\n        arg2 = arg1 >= arg0;\n        func_0FBC(arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0EDC(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = 0x0ed1;\n        var var3 = !temp0;\n    \n        if (var3) {\n            func_0FBC(var3);\n            // Error: Could not resolve method call return address!\n        } else {\n            func_0EEC(arg0, arg1, var1, var3);\n            return var1;\n        }\n    }\n    \n    function func_0EEC(var arg0, var arg1, var arg2, var arg3) {\n        arg3 = arg1;\n        var var0 = arg0;\n        var var1 = arg2;\n    \n        if (!var0) { assert(); }\n    \n        arg3 = var1 / var0 == arg3;\n        func_0FBC(arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0F36(var arg0, var arg1, var arg2, var arg3, var arg4) {\n        arg3 = arg0 == arg1 * arg2 + arg4 % arg3;\n        func_0FBC(arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0FBC(var arg0) {\n        if (arg0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0FCC(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        var temp3 = keccak256(memory[0x00:0x20]);\n        var temp4 = temp3 + var0 * 0x02;\n        var0 = 0x0ca4;\n        var var2 = temp3 + arg1 * 0x02;\n        var var1 = temp4;\n        var temp5 = var1;\n        var1 = 0x06de;\n        var temp6 = var2;\n        var2 = temp5;\n        var var3 = temp6;\n    \n        if (var2 <= var3) {\n            var1 = func_1036(var2, var3);\n            var0 = var1;\n            // Error: Could not resolve jump destination!\n        } else {\n        label_100D:\n            var temp7 = var3;\n            storage[temp7] = storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff;\n            storage[temp7 + 0x01] = 0x00;\n            var3 = temp7 + 0x02;\n        \n            if (var2 > var3) { goto label_100D; }\n        \n            var1 = func_1036(var2, var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_1036(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_016F:\n            var var0 = 0x017e;\n            var var1 = 0x017b;\n        \n        label_05AA:\n            var var2 = 0x017b;\n            var var3 = msg.sender;\n        \n        label_05B6:\n            var var4 = 0x05bf;\n            var var5 = var3;\n            var var6 = 0x00;\n            var var7 = var6;\n        \n            if (storage[var7] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            var var8 = 0x0b49;\n            var8 = getState();\n            var temp0 = var8;\n            var6 = temp0;\n            var8 = 0x02;\n            var var9 = var6;\n        \n            if (var9 > 0x06) { assert(); }\n        \n            if (var9 != var8) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x08;\n            var7 = msg.value;\n            var8 = 0x0b97;\n            var9 = storage[keccak256(memory[0x00:0x40])];\n            var var10 = var7;\n            var8 = func_0EB4(var9, var10);\n            memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x08;\n            storage[keccak256(memory[0x00:0x40])] = var8;\n            var8 = 0x0a;\n            var9 = storage[var8];\n            var10 = var9 + 0x01;\n            var var11 = 0x0bc2;\n            var var12 = var8;\n            var var13 = var10;\n            func_0FCC(var12, var13);\n            memory[0x00:0x20] = var8;\n            var temp1 = var9 * 0x02 + keccak256(memory[0x00:0x20]);\n            var temp2 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp2 + 0x40;\n            memory[temp2:temp2 + 0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var7;\n            storage[temp1] = (memory[temp2:temp2 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            storage[temp1 + 0x01] = memory[temp2 + 0x20:temp2 + 0x20 + 0x20];\n            var8 = 0x0c36;\n            var9 = storage[0x04];\n            var10 = var7;\n            var8 = func_0EB4(var9, var10);\n            storage[0x04] = var8;\n            var8 = !storage[0x01];\n        \n            if (!var8) {\n                if (!var8) {\n                label_0C5F:\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var7;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x40) - temp4], [0xc3f75dfc78f6efac88ad5abb5e606276b903647d97b2a62a1ef89840a658bbc3]);\n                \n                label_0CA4:\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_0C5B:\n                    storage[0x01] = block.timestamp;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var7;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + (temp5 + 0x40) - temp6], [0xc3f75dfc78f6efac88ad5abb5e606276b903647d97b2a62a1ef89840a658bbc3]);\n                    goto label_0CA4;\n                }\n            } else if (storage[0x04] < 0x0a968163f0a57b400000) { goto label_0C5F; }\n            else { goto label_0C5B; }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x03f9c793) {\n                // Dispatch table entry for invest(address)\n                var1 = 0x017e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                goto label_05B6;\n            } else if (var0 == 0x0f6a1734) {\n                // Dispatch table entry for Crowdsale(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                Crowdsale(var2, var3);\n                stop();\n            } else if (var0 == 0x1865c57d) {\n                // Dispatch table entry for getState()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cd;\n                var1 = getState();\n                var2 = memory[0x40:0x60];\n                var3 = var2;\n                var4 = var1;\n            \n                if (var4 > 0x06) { assert(); }\n            \n                var temp7 = var3;\n                memory[temp7:temp7 + 0x20] = var4 & 0xff;\n                var temp8 = memory[0x40:0x60];\n                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n            } else if (var0 == 0x1aae3460) {\n                // Dispatch table entry for investedAmountOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = investedAmountOf(var2);\n            \n            label_0210:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4042b66f) {\n                // Dispatch table entry for weiRaised()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = weiRaised();\n                goto label_0210;\n            } else if (var0 == 0x41c0e1b5) {\n                // Dispatch table entry for kill()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                var temp11 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x00] & temp11 == temp11 & msg.sender) { selfdestruct(storage[0x00] & 0x02 ** 0xa0 - 0x01); }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x442e1079) {\n                // Dispatch table entry for MIN_ICO_GOAL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = MIN_ICO_GOAL();\n                goto label_0210;\n            } else if (var0 == 0x4bb278f3) {\n                // Dispatch table entry for finalize()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                var2 = 0x03;\n                var3 = var2;\n                var4 = 0x0797;\n                var4 = getState();\n            \n                if (var4 > 0x06) { assert(); }\n            \n                if (var4 != var3) { revert(memory[0x00:0x00]); }\n            \n                var temp12 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x00] & temp12 != temp12 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                if (storage[0x00] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n            \n                if (storage[0x07] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                storage[0x07] = (storage[0x07] & ~0xff) | 0x01;\n                var3 = 0x05bf;\n                var4 = 0x00;\n                var5 = var4;\n                var6 = var5;\n                var7 = var6;\n                var8 = var7;\n            \n                if (var8 >= storage[0x0a]) {\n                label_0CF7:\n                    var9 = storage[0x02] & 0x02 ** 0xa0 - 0x01;\n                    var10 = 0x313ce567;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp13 = memory[0x40:0x60];\n                    memory[temp13:temp13 + 0x20] = (var10 & 0xffffffff) * 0x02 ** 0xe0;\n                    var11 = temp13 + 0x04;\n                    var12 = 0x20;\n                    var13 = memory[0x40:0x60];\n                    var var14 = var11 - var13;\n                    var var15 = var13;\n                    var var16 = 0x00;\n                    var var17 = var9;\n                \n                    if (!address(var17).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp14;\n                    temp14, memory[var13:var13 + var12] = address(var17).call.gas(msg.gas - 0x02c6).value(var16)(memory[var15:var15 + var14]);\n                \n                    if (!temp14) { revert(memory[0x00:0x00]); }\n                \n                    var6 = 0x0a ** memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                    var9 = 0x0d76;\n                    var10 = 0x0d70;\n                    var11 = 0x05f5e100;\n                    var12 = var6;\n                    var10 = func_0EDC(var11, var12);\n                    var11 = var4;\n                    var12 = 0x00;\n                    var13 = var12;\n                    var14 = 0x0f1a;\n                    var15 = var11 > 0x00;\n                    func_0FBC(var15);\n                    var14 = var11;\n                    var15 = var10;\n                \n                    if (!var14) { assert(); }\n                \n                    var13 = var15 / var14;\n                    var14 = 0x0ed1;\n                    var15 = var11;\n                    var16 = var10;\n                \n                    if (!var15) { assert(); }\n                \n                    func_0F36(var10, var11, var13, var15, var16);\n                    var9 = var13;\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_0CBC:\n                    var9 = 0x0ce9;\n                    var10 = var4;\n                    var11 = 0x0a;\n                    var12 = var5;\n                \n                    if (var12 >= storage[var11]) { assert(); }\n                \n                    var9 = func_0CCE(var10, var11, var12);\n                    var4 = var9;\n                    var5 = var5 + 0x01;\n                    var8 = var8;\n                \n                    if (var5 >= storage[0x0a]) { goto label_0CF7; }\n                    else { goto label_0CBC; }\n                }\n            } else if (var0 == 0x5256a36e) {\n                // Dispatch table entry for MAX_ICO_GOAL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = MAX_ICO_GOAL();\n                goto label_0210;\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                refund();\n                stop();\n            } else if (var0 == 0x5da89ac0) {\n                // Dispatch table entry for weiRefunded()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = weiRefunded();\n                goto label_0210;\n            } else if (var0 == 0x5ed7ca5b) {\n                // Dispatch table entry for halt()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                halt();\n                stop();\n            } else if (var0 == 0x797d9437) {\n                // Dispatch table entry for loadedRefund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = loadedRefund();\n                goto label_0210;\n            } else if (var0 == 0x7c2e08a3) {\n                // Dispatch table entry for isMinimumGoalReached()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0357;\n                var1 = isMinimumGoalReached();\n            \n            label_0357:\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = !!var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x87612102) {\n                // Dispatch table entry for loadRefund()\n                var1 = 0x017e;\n                loadRefund();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0388;\n                var2 = owner();\n            \n            label_0388:\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x97b150ca) {\n                // Dispatch table entry for tokenAmountOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = tokenAmountOf(var2);\n                goto label_0210;\n            } else if (var0 == 0xa6f2ae3a) {\n                // Dispatch table entry for buy()\n                var1 = 0x017e;\n                goto label_05AA;\n            } else if (var0 == 0xaf468682) {\n                // Dispatch table entry for startsAt()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = startsAt();\n                goto label_0210;\n            } else if (var0 == 0xb3f05b97) {\n                // Dispatch table entry for finalized()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0357;\n                var2 = finalized();\n                goto label_0357;\n            } else if (var0 == 0xb9b8af0b) {\n                // Dispatch table entry for halted()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0357;\n                var2 = halted();\n                goto label_0357;\n            } else if (var0 == 0xbd611c73) {\n                // Dispatch table entry for TOTAL_ICO_TOKENS()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = TOTAL_ICO_TOKENS();\n                goto label_0210;\n            } else if (var0 == 0xc4f1215c) {\n                // Dispatch table entry for maxGoalReachedAt()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = maxGoalReachedAt();\n                goto label_0210;\n            } else if (var0 == 0xc9d82c96) {\n                // Dispatch table entry for ICO_DURATION()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = ICO_DURATION();\n                goto label_0210;\n            } else if (var0 == 0xcb3e64fd) {\n                // Dispatch table entry for unhalt()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                unhalt();\n                stop();\n            } else if (var0 == 0xd5d09021) {\n                // Dispatch table entry for isCrowdsaleFull()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0357;\n                var1 = isCrowdsaleFull();\n                goto label_0357;\n            } else if (var0 == 0xf071ecc5) {\n                // Dispatch table entry for AFTER_MAX_GOAL_DURATION()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = AFTER_MAX_GOAL_DURATION();\n                goto label_0210;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xfc0c546a) {\n                // Dispatch table entry for token()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0388;\n                var2 = token();\n                goto label_0388;\n            } else if (var0 == 0xfd345c8a) {\n                // Dispatch table entry for investments(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0588;\n                var2 = msg.data[0x04:0x24];\n                var2, var3 = investments(var2);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp19 + 0x20:temp19 + 0x20 + 0x20] = var3;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x40) - temp20];\n            } else { goto label_016F; }\n        }\n    }\n    \n    function Crowdsale(var arg0, var arg1) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[0x00] = (temp1 & storage[0x00]) | (temp0 & msg.sender);\n        storage[0x02] = (temp1 & storage[0x02]) | (arg0 & temp0);\n        storage[0x03] = arg1;\n    }\n    \n    function getState() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x07] & 0xff) {\n            var0 = 0x05;\n            goto label_06DE;\n        } else if (storage[0x02] & 0x02 ** 0xa0 - 0x01) {\n            var var1 = block.timestamp >= storage[0x03];\n        \n            if (var1) {\n                var1 = block.timestamp < storage[0x03] + 0x0d2f00;\n            \n                if (!var1) { goto label_0684; }\n                else { goto label_067A; }\n            } else if (!var1) {\n            label_0684:\n            \n                if (!var1) {\n                    var1 = 0x0699;\n                    var1 = isCrowdsaleFull();\n                \n                    if (!var1) {\n                        var1 = 0x06ae;\n                        var1 = isMinimumGoalReached();\n                        var temp0 = !var1;\n                        var1 = temp0;\n                    \n                        if (var1) {\n                            var1 = storage[0x04] > 0x00;\n                        \n                            if (!var1) { goto label_06CD; }\n                            else { goto label_06C4; }\n                        } else if (!var1) {\n                        label_06CD:\n                        \n                            if (!var1) {\n                            label_06DA:\n                                var0 = 0x04;\n                            \n                            label_06DE:\n                                return var0;\n                            } else {\n                            label_06D3:\n                                var0 = 0x06;\n                                goto label_06DE;\n                            }\n                        } else {\n                        label_06C4:\n                        \n                            if (storage[0x05] < storage[0x04]) { goto label_06DA; }\n                            else { goto label_06D3; }\n                        }\n                    } else {\n                        var0 = 0x03;\n                        goto label_06DE;\n                    }\n                } else {\n                    var0 = 0x02;\n                    goto label_06DE;\n                }\n            } else {\n            label_067A:\n                var1 = 0x0682;\n                var1 = isCrowdsaleFull();\n                var1 = !var1;\n                goto label_0684;\n            }\n        } else {\n            var0 = 0x01;\n            goto label_06DE;\n        }\n    }\n    \n    function investedAmountOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function withdraw() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = address(address(this) & temp1).balance;\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp1 & storage[0x00]).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n    \n        if (temp4) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function weiRaised() returns (var r0) { return storage[0x04]; }\n    \n    function MIN_ICO_GOAL() returns (var r0) { return 0x010f0cf064dd59200000; }\n    \n    function MAX_ICO_GOAL() returns (var r0) { return 0x0a968163f0a57b400000; }\n    \n    function refund() {\n        var var0 = 0x00;\n        var var1 = 0x06;\n        var var2 = var1;\n        var var3 = 0x0826;\n        var3 = getState();\n    \n        if (var3 > 0x06) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (!var0) { goto label_0627; }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var2 = 0x0888;\n        var3 = storage[0x06];\n        var var4 = var0;\n        var2 = func_0EB4(var3, var4);\n        storage[0x06] = var2;\n        var temp0 = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = msg.sender;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x40) - temp2], [0xbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d]);\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n    \n        if (!temp4) { revert(memory[0x00:0x00]); }\n    \n    label_0627:\n    }\n    \n    function weiRefunded() returns (var r0) { return storage[0x06]; }\n    \n    function halt() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n    }\n    \n    function loadedRefund() returns (var r0) { return storage[0x05]; }\n    \n    function isMinimumGoalReached() returns (var r0) { return storage[0x04] >= 0x010f0cf064dd59200000; }\n    \n    function loadRefund() {\n        var var0 = 0x04;\n        var var1 = var0;\n        var var2 = 0x0976;\n        var2 = getState();\n    \n        if (var2 > 0x06) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x09a4;\n        var2 = storage[0x05];\n        var var3 = msg.value;\n        var1 = func_0EB4(var2, var3);\n        storage[0x05] = var1;\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function tokenAmountOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function startsAt() returns (var r0) { return storage[0x03]; }\n    \n    function finalized() returns (var r0) { return storage[0x07] & 0xff; }\n    \n    function halted() returns (var r0) { return storage[0x00] / 0x02 ** 0xa0 & 0xff; }\n    \n    function TOTAL_ICO_TOKENS() returns (var r0) { return 0x05f5e100; }\n    \n    function maxGoalReachedAt() returns (var r0) { return storage[0x01]; }\n    \n    function ICO_DURATION() returns (var r0) { return 0x0d2f00; }\n    \n    function unhalt() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x00] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff0000000000000000000000000000000000000000;\n    }\n    \n    function isCrowdsaleFull() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x04] >= 0x0a968163f0a57b400000;\n    \n        if (!var1) { return var1; }\n        else { return block.timestamp > storage[0x01] + 0x015180; }\n    }\n    \n    function AFTER_MAX_GOAL_DURATION() returns (var r0) { return 0x015180; }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { return; }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function token() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function investments(var arg0) returns (var arg0, var r1) {\n        r1 = 0x0a;\n        var var1 = arg0;\n    \n        if (var1 >= storage[r1]) { assert(); }\n    \n        memory[0x00:0x20] = r1;\n        var temp0 = var1 * 0x02 + keccak256(memory[0x00:0x20]);\n        r1 = storage[temp0 + 0x01];\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        return arg0, r1;\n    }\n    \n    function func_0CCE(var arg0, var arg1, var arg2) returns (var r0) {\n        memory[0x00:0x20] = arg1;\n        arg1 = storage[arg2 * 0x02 + keccak256(memory[0x00:0x20]) + 0x01];\n        r0 = func_0EB4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0EB4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n        var var2 = 0x0ed1;\n        var var3 = var1 >= temp0;\n    \n        if (var1 >= temp0) {\n            func_0FBC(var3);\n            // Error: Could not resolve method call return address!\n        } else {\n            func_0EC7(arg1, var1, var3);\n            return var1;\n        }\n    }\n    \n    function func_0EC7(var arg0, var arg1, var arg2) {\n        arg2 = arg1 >= arg0;\n        func_0FBC(arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0EDC(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = 0x0ed1;\n        var var3 = !temp0;\n    \n        if (var3) {\n            func_0FBC(var3);\n            // Error: Could not resolve method call return address!\n        } else {\n            func_0EEC(arg0, arg1, var1, var3);\n            return var1;\n        }\n    }\n    \n    function func_0EEC(var arg0, var arg1, var arg2, var arg3) {\n        arg3 = arg1;\n        var var0 = arg0;\n        var var1 = arg2;\n    \n        if (!var0) { assert(); }\n    \n        arg3 = var1 / var0 == arg3;\n        func_0FBC(arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0F36(var arg0, var arg1, var arg2, var arg3, var arg4) {\n        arg3 = arg0 == arg1 * arg2 + arg4 % arg3;\n        func_0FBC(arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0FBC(var arg0) {\n        if (arg0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0FCC(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        var temp3 = keccak256(memory[0x00:0x20]);\n        var temp4 = temp3 + var0 * 0x02;\n        var0 = 0x0ca4;\n        var var2 = temp3 + arg1 * 0x02;\n        var var1 = temp4;\n        var temp5 = var1;\n        var1 = 0x06de;\n        var temp6 = var2;\n        var2 = temp5;\n        var var3 = temp6;\n    \n        if (var2 <= var3) {\n            var1 = func_1036(var2, var3);\n            var0 = var1;\n            // Error: Could not resolve jump destination!\n        } else {\n        label_100D:\n            var temp7 = var3;\n            storage[temp7] = storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff;\n            storage[temp7 + 0x01] = 0x00;\n            var3 = temp7 + 0x02;\n        \n            if (var2 > var3) { goto label_100D; }\n        \n            var1 = func_1036(var2, var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_1036(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_016F:\n            var var0 = 0x017e;\n            var var1 = 0x017b;\n        \n        label_05AA:\n            var var2 = 0x017b;\n            var var3 = msg.sender;\n        \n        label_05B6:\n            var var4 = 0x05bf;\n            var var5 = var3;\n            var var6 = 0x00;\n            var var7 = var6;\n        \n            if (storage[var7] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            var var8 = 0x0b49;\n            var8 = getState();\n            var temp0 = var8;\n            var6 = temp0;\n            var8 = 0x02;\n            var var9 = var6;\n        \n            if (var9 > 0x06) { assert(); }\n        \n            if (var9 != var8) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x08;\n            var7 = msg.value;\n            var8 = 0x0b97;\n            var9 = storage[keccak256(memory[0x00:0x40])];\n            var var10 = var7;\n            var8 = func_0EB4(var9, var10);\n            memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x08;\n            storage[keccak256(memory[0x00:0x40])] = var8;\n            var8 = 0x0a;\n            var9 = storage[var8];\n            var10 = var9 + 0x01;\n            var var11 = 0x0bc2;\n            var var12 = var8;\n            var var13 = var10;\n            func_0FCC(var12, var13);\n            memory[0x00:0x20] = var8;\n            var temp1 = var9 * 0x02 + keccak256(memory[0x00:0x20]);\n            var temp2 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp2 + 0x40;\n            memory[temp2:temp2 + 0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var7;\n            storage[temp1] = (memory[temp2:temp2 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            storage[temp1 + 0x01] = memory[temp2 + 0x20:temp2 + 0x20 + 0x20];\n            var8 = 0x0c36;\n            var9 = storage[0x04];\n            var10 = var7;\n            var8 = func_0EB4(var9, var10);\n            storage[0x04] = var8;\n            var8 = !storage[0x01];\n        \n            if (!var8) {\n                if (!var8) {\n                label_0C5F:\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var7;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x40) - temp4], [0xc3f75dfc78f6efac88ad5abb5e606276b903647d97b2a62a1ef89840a658bbc3]);\n                \n                label_0CA4:\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_0C5B:\n                    storage[0x01] = block.timestamp;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var7;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + (temp5 + 0x40) - temp6], [0xc3f75dfc78f6efac88ad5abb5e606276b903647d97b2a62a1ef89840a658bbc3]);\n                    goto label_0CA4;\n                }\n            } else if (storage[0x04] < 0x0a968163f0a57b400000) { goto label_0C5F; }\n            else { goto label_0C5B; }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x03f9c793) {\n                // Dispatch table entry for invest(address)\n                var1 = 0x017e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                goto label_05B6;\n            } else if (var0 == 0x0f6a1734) {\n                // Dispatch table entry for Crowdsale(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                Crowdsale(var2, var3);\n                stop();\n            } else if (var0 == 0x1865c57d) {\n                // Dispatch table entry for getState()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cd;\n                var1 = getState();\n                var2 = memory[0x40:0x60];\n                var3 = var2;\n                var4 = var1;\n            \n                if (var4 > 0x06) { assert(); }\n            \n                var temp7 = var3;\n                memory[temp7:temp7 + 0x20] = var4 & 0xff;\n                var temp8 = memory[0x40:0x60];\n                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n            } else if (var0 == 0x1aae3460) {\n                // Dispatch table entry for investedAmountOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = investedAmountOf(var2);\n            \n            label_0210:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4042b66f) {\n                // Dispatch table entry for weiRaised()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = weiRaised();\n                goto label_0210;\n            } else if (var0 == 0x41c0e1b5) {\n                // Dispatch table entry for kill()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                var temp11 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x00] & temp11 == temp11 & msg.sender) { selfdestruct(storage[0x00] & 0x02 ** 0xa0 - 0x01); }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x442e1079) {\n                // Dispatch table entry for MIN_ICO_GOAL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = MIN_ICO_GOAL();\n                goto label_0210;\n            } else if (var0 == 0x4bb278f3) {\n                // Dispatch table entry for finalize()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                var2 = 0x03;\n                var3 = var2;\n                var4 = 0x0797;\n                var4 = getState();\n            \n                if (var4 > 0x06) { assert(); }\n            \n                if (var4 != var3) { revert(memory[0x00:0x00]); }\n            \n                var temp12 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x00] & temp12 != temp12 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                if (storage[0x00] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n            \n                if (storage[0x07] & 0xff) { revert(memory[0x00:0x00]); }\n            \n                storage[0x07] = (storage[0x07] & ~0xff) | 0x01;\n                var3 = 0x05bf;\n                var4 = 0x00;\n                var5 = var4;\n                var6 = var5;\n                var7 = var6;\n                var8 = var7;\n            \n                if (var8 >= storage[0x0a]) {\n                label_0CF7:\n                    var9 = storage[0x02] & 0x02 ** 0xa0 - 0x01;\n                    var10 = 0x313ce567;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp13 = memory[0x40:0x60];\n                    memory[temp13:temp13 + 0x20] = (var10 & 0xffffffff) * 0x02 ** 0xe0;\n                    var11 = temp13 + 0x04;\n                    var12 = 0x20;\n                    var13 = memory[0x40:0x60];\n                    var var14 = var11 - var13;\n                    var var15 = var13;\n                    var var16 = 0x00;\n                    var var17 = var9;\n                \n                    if (!address(var17).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp14;\n                    temp14, memory[var13:var13 + var12] = address(var17).call.gas(msg.gas - 0x02c6).value(var16)(memory[var15:var15 + var14]);\n                \n                    if (!temp14) { revert(memory[0x00:0x00]); }\n                \n                    var6 = 0x0a ** memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                    var9 = 0x0d76;\n                    var10 = 0x0d70;\n                    var11 = 0x05f5e100;\n                    var12 = var6;\n                    var10 = func_0EDC(var11, var12);\n                    var11 = var4;\n                    var12 = 0x00;\n                    var13 = var12;\n                    var14 = 0x0f1a;\n                    var15 = var11 > 0x00;\n                    func_0FBC(var15);\n                    var14 = var11;\n                    var15 = var10;\n                \n                    if (!var14) { assert(); }\n                \n                    var13 = var15 / var14;\n                    var14 = 0x0ed1;\n                    var15 = var11;\n                    var16 = var10;\n                \n                    if (!var15) { assert(); }\n                \n                    func_0F36(var10, var11, var13, var15, var16);\n                    var9 = var13;\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_0CBC:\n                    var9 = 0x0ce9;\n                    var10 = var4;\n                    var11 = 0x0a;\n                    var12 = var5;\n                \n                    if (var12 >= storage[var11]) { assert(); }\n                \n                    var9 = func_0CCE(var10, var11, var12);\n                    var4 = var9;\n                    var5 = var5 + 0x01;\n                    var8 = var8;\n                \n                    if (var5 >= storage[0x0a]) { goto label_0CF7; }\n                    else { goto label_0CBC; }\n                }\n            } else if (var0 == 0x5256a36e) {\n                // Dispatch table entry for MAX_ICO_GOAL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = MAX_ICO_GOAL();\n                goto label_0210;\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                refund();\n                stop();\n            } else if (var0 == 0x5da89ac0) {\n                // Dispatch table entry for weiRefunded()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = weiRefunded();\n                goto label_0210;\n            } else if (var0 == 0x5ed7ca5b) {\n                // Dispatch table entry for halt()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                halt();\n                stop();\n            } else if (var0 == 0x797d9437) {\n                // Dispatch table entry for loadedRefund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = loadedRefund();\n                goto label_0210;\n            } else if (var0 == 0x7c2e08a3) {\n                // Dispatch table entry for isMinimumGoalReached()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0357;\n                var1 = isMinimumGoalReached();\n            \n            label_0357:\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = !!var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x87612102) {\n                // Dispatch table entry for loadRefund()\n                var1 = 0x017e;\n                loadRefund();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0388;\n                var2 = owner();\n            \n            label_0388:\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x97b150ca) {\n                // Dispatch table entry for tokenAmountOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = tokenAmountOf(var2);\n                goto label_0210;\n            } else if (var0 == 0xa6f2ae3a) {\n                // Dispatch table entry for buy()\n                var1 = 0x017e;\n                goto label_05AA;\n            } else if (var0 == 0xaf468682) {\n                // Dispatch table entry for startsAt()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = startsAt();\n                goto label_0210;\n            } else if (var0 == 0xb3f05b97) {\n                // Dispatch table entry for finalized()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0357;\n                var2 = finalized();\n                goto label_0357;\n            } else if (var0 == 0xb9b8af0b) {\n                // Dispatch table entry for halted()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0357;\n                var2 = halted();\n                goto label_0357;\n            } else if (var0 == 0xbd611c73) {\n                // Dispatch table entry for TOTAL_ICO_TOKENS()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = TOTAL_ICO_TOKENS();\n                goto label_0210;\n            } else if (var0 == 0xc4f1215c) {\n                // Dispatch table entry for maxGoalReachedAt()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = maxGoalReachedAt();\n                goto label_0210;\n            } else if (var0 == 0xc9d82c96) {\n                // Dispatch table entry for ICO_DURATION()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = ICO_DURATION();\n                goto label_0210;\n            } else if (var0 == 0xcb3e64fd) {\n                // Dispatch table entry for unhalt()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                unhalt();\n                stop();\n            } else if (var0 == 0xd5d09021) {\n                // Dispatch table entry for isCrowdsaleFull()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0357;\n                var1 = isCrowdsaleFull();\n                goto label_0357;\n            } else if (var0 == 0xf071ecc5) {\n                // Dispatch table entry for AFTER_MAX_GOAL_DURATION()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0210;\n                var2 = AFTER_MAX_GOAL_DURATION();\n                goto label_0210;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x017e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xfc0c546a) {\n                // Dispatch table entry for token()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0388;\n                var2 = token();\n                goto label_0388;\n            } else if (var0 == 0xfd345c8a) {\n                // Dispatch table entry for investments(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0588;\n                var2 = msg.data[0x04:0x24];\n                var2, var3 = investments(var2);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[temp19 + 0x20:temp19 + 0x20 + 0x20] = var3;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x40) - temp20];\n            } else { goto label_016F; }\n        }\n    }\n    \n    function Crowdsale(var arg0, var arg1) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[0x00] = (temp1 & storage[0x00]) | (temp0 & msg.sender);\n        storage[0x02] = (temp1 & storage[0x02]) | (arg0 & temp0);\n        storage[0x03] = arg1;\n    }\n    \n    function getState() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x07] & 0xff) {\n            var0 = 0x05;\n            goto label_06DE;\n        } else if (storage[0x02] & 0x02 ** 0xa0 - 0x01) {\n            var var1 = block.timestamp >= storage[0x03];\n        \n            if (var1) {\n                var1 = block.timestamp < storage[0x03] + 0x0d2f00;\n            \n                if (!var1) { goto label_0684; }\n                else { goto label_067A; }\n            } else if (!var1) {\n            label_0684:\n            \n                if (!var1) {\n                    var1 = 0x0699;\n                    var1 = isCrowdsaleFull();\n                \n                    if (!var1) {\n                        var1 = 0x06ae;\n                        var1 = isMinimumGoalReached();\n                        var temp0 = !var1;\n                        var1 = temp0;\n                    \n                        if (var1) {\n                            var1 = storage[0x04] > 0x00;\n                        \n                            if (!var1) { goto label_06CD; }\n                            else { goto label_06C4; }\n                        } else if (!var1) {\n                        label_06CD:\n                        \n                            if (!var1) {\n                            label_06DA:\n                                var0 = 0x04;\n                            \n                            label_06DE:\n                                return var0;\n                            } else {\n                            label_06D3:\n                                var0 = 0x06;\n                                goto label_06DE;\n                            }\n                        } else {\n                        label_06C4:\n                        \n                            if (storage[0x05] < storage[0x04]) { goto label_06DA; }\n                            else { goto label_06D3; }\n                        }\n                    } else {\n                        var0 = 0x03;\n                        goto label_06DE;\n                    }\n                } else {\n                    var0 = 0x02;\n                    goto label_06DE;\n                }\n            } else {\n            label_067A:\n                var1 = 0x0682;\n                var1 = isCrowdsaleFull();\n                var1 = !var1;\n                goto label_0684;\n            }\n        } else {\n            var0 = 0x01;\n            goto label_06DE;\n        }\n    }\n    \n    function investedAmountOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function withdraw() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = address(address(this) & temp1).balance;\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp1 & storage[0x00]).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n    \n        if (temp4) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function weiRaised() returns (var r0) { return storage[0x04]; }\n    \n    function MIN_ICO_GOAL() returns (var r0) { return 0x010f0cf064dd59200000; }\n    \n    function MAX_ICO_GOAL() returns (var r0) { return 0x0a968163f0a57b400000; }\n    \n    function refund() {\n        var var0 = 0x00;\n        var var1 = 0x06;\n        var var2 = var1;\n        var var3 = 0x0826;\n        var3 = getState();\n    \n        if (var3 > 0x06) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (!var0) { goto label_0627; }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n        var2 = 0x0888;\n        var3 = storage[0x06];\n        var var4 = var0;\n        var2 = func_0EB4(var3, var4);\n        storage[0x06] = var2;\n        var temp0 = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = msg.sender;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x40) - temp2], [0xbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d]);\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n    \n        if (!temp4) { revert(memory[0x00:0x00]); }\n    \n    label_0627:\n    }\n    \n    function weiRefunded() returns (var r0) { return storage[0x06]; }\n    \n    function halt() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n    }\n    \n    function loadedRefund() returns (var r0) { return storage[0x05]; }\n    \n    function isMinimumGoalReached() returns (var r0) { return storage[0x04] >= 0x010f0cf064dd59200000; }\n    \n    function loadRefund() {\n        var var0 = 0x04;\n        var var1 = var0;\n        var var2 = 0x0976;\n        var2 = getState();\n    \n        if (var2 > 0x06) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x09a4;\n        var2 = storage[0x05];\n        var var3 = msg.value;\n        var1 = func_0EB4(var2, var3);\n        storage[0x05] = var1;\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function tokenAmountOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function startsAt() returns (var r0) { return storage[0x03]; }\n    \n    function finalized() returns (var r0) { return storage[0x07] & 0xff; }\n    \n    function halted() returns (var r0) { return storage[0x00] / 0x02 ** 0xa0 & 0xff; }\n    \n    function TOTAL_ICO_TOKENS() returns (var r0) { return 0x05f5e100; }\n    \n    function maxGoalReachedAt() returns (var r0) { return storage[0x01]; }\n    \n    function ICO_DURATION() returns (var r0) { return 0x0d2f00; }\n    \n    function unhalt() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x00] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff0000000000000000000000000000000000000000;\n    }\n    \n    function isCrowdsaleFull() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x04] >= 0x0a968163f0a57b400000;\n    \n        if (!var1) { return var1; }\n        else { return block.timestamp > storage[0x01] + 0x015180; }\n    }\n    \n    function AFTER_MAX_GOAL_DURATION() returns (var r0) { return 0x015180; }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { return; }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function token() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function investments(var arg0) returns (var arg0, var r1) {\n        r1 = 0x0a;\n        var var1 = arg0;\n    \n        if (var1 >= storage[r1]) { assert(); }\n    \n        memory[0x00:0x20] = r1;\n        var temp0 = var1 * 0x02 + keccak256(memory[0x00:0x20]);\n        r1 = storage[temp0 + 0x01];\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        return arg0, r1;\n    }\n    \n    function func_0CCE(var arg0, var arg1, var arg2) returns (var r0) {\n        memory[0x00:0x20] = arg1;\n        arg1 = storage[arg2 * 0x02 + keccak256(memory[0x00:0x20]) + 0x01];\n        r0 = func_0EB4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0EB4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n        var var2 = 0x0ed1;\n        var var3 = var1 >= temp0;\n    \n        if (var1 >= temp0) {\n            func_0FBC(var3);\n            // Error: Could not resolve method call return address!\n        } else {\n            func_0EC7(arg1, var1, var3);\n            return var1;\n        }\n    }\n    \n    function func_0EC7(var arg0, var arg1, var arg2) {\n        arg2 = arg1 >= arg0;\n        func_0FBC(arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0EDC(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = 0x0ed1;\n        var var3 = !temp0;\n    \n        if (var3) {\n            func_0FBC(var3);\n            // Error: Could not resolve method call return address!\n        } else {\n            func_0EEC(arg0, arg1, var1, var3);\n            return var1;\n        }\n    }\n    \n    function func_0EEC(var arg0, var arg1, var arg2, var arg3) {\n        arg3 = arg1;\n        var var0 = arg0;\n        var var1 = arg2;\n    \n        if (!var0) { assert(); }\n    \n        arg3 = var1 / var0 == arg3;\n        func_0FBC(arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0F36(var arg0, var arg1, var arg2, var arg3, var arg4) {\n        arg3 = arg0 == arg1 * arg2 + arg4 % arg3;\n        func_0FBC(arg3);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0FBC(var arg0) {\n        if (arg0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0FCC(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        var temp3 = keccak256(memory[0x00:0x20]);\n        var temp4 = temp3 + var0 * 0x02;\n        var0 = 0x0ca4;\n        var var2 = temp3 + arg1 * 0x02;\n        var var1 = temp4;\n        var temp5 = var1;\n        var1 = 0x06de;\n        var temp6 = var2;\n        var2 = temp5;\n        var var3 = temp6;\n    \n        if (var2 <= var3) {\n            var1 = func_1036(var2, var3);\n            var0 = var1;\n            // Error: Could not resolve jump destination!\n        } else {\n        label_100D:\n            var temp7 = var3;\n            storage[temp7] = storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff;\n            storage[temp7 + 0x01] = 0x00;\n            var3 = temp7 + 0x02;\n        \n            if (var2 > var3) { goto label_100D; }\n        \n            var1 = func_1036(var2, var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_1036(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 35.224135398864746,
	"usage": {
		"completion_tokens": 515,
		"prompt_tokens": 8894,
		"total_tokens": 9409
	}
}