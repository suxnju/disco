{
	"address": "0x2b78a837c37549539c62ab54a235a8e19fea812f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity contract code corresponding to the provided decompiled EVM Bytecode:\n\n```solidity\npragma solidity ^0.5.1;\n\ncontract Contract {\n    mapping(bytes32 => uint256) storage;\n    mapping(address => bool) admins;\n\n    function settle(bytes32[] memory arg0, uint256[] memory arg1, uint256[] memory arg2) public onlyAdmin {\n        // implementation of settle function\n    }\n\n    function admins(uint256 arg0) public view returns (address) {\n        // implementation of admins function\n    }\n\n    function removeAdmin(address adminToRemove) public onlyAdmin {\n        // implementation of removeAdmin function\n    }\n\n    function debit(bytes32[] memory arg0, uint256[] memory arg1, uint256[] memory arg2, uint64[] memory arg3, uint8[] memory arg4, bytes32[] memory arg5) public onlyAdmin {\n        // implementation of debit function\n    }\n\n    function getMessageSigner(bytes32 arg0, uint8 arg1, bytes32 arg2, bytes32 arg3) public view returns (address) {\n        // implementation of getMessageSigner function\n    }\n\n    function getLinkDigest(bytes32 arg0, address arg1) public view returns (bytes32) {\n        // implementation of getLinkDigest function\n    }\n\n    function withdraw(bytes32[] memory arg0, address[] memory arg1, uint256[] memory arg2, uint64[] memory arg3, uint8[] memory arg4, bytes32[] memory arg5, bytes32[] memory arg6) public onlyAdmin {\n        // implementation of withdraw function\n    }\n\n    function getNameDigest(string memory arg0) public view returns (bytes32) {\n        // implementation of getNameDigest function\n    }\n\n    function changeRootAdmin(address newAdmin) public onlyAdmin {\n        // implementation of changeRootAdmin function\n    }\n\n    function getWithdrawDigest(bytes32 arg0, address arg1, uint256 arg2, uint64 arg3) public view returns (bytes32) {\n        // implementation of getWithdrawDigest function\n    }\n\n    function addAdmin(address newAdmin) public onlyAdmin {\n        // implementation of addAdmin function\n    }\n\n    function getDebitDigest(bytes32 arg0, uint256 arg1, uint64 arg2) public view returns (bytes32) {\n        // implementation of getDebitDigest function\n    }\n\n    function getBalance(bytes32 arg0) public view returns (uint256) {\n        // implementation of getBalance function\n    }\n\n    function deposit(bytes32 arg0) public payable {\n        // implementation of deposit function\n    }\n\n    function link(bytes32[] memory arg0, bytes32[] memory arg1, address[] memory arg2, uint8[] memory arg3, bytes32[] memory arg4, bytes32[] memory arg5) public onlyAdmin {\n        // implementation of link function\n    }\n\n    function getDebitNonce(bytes32 arg0) public view returns (uint64) {\n        // implementation of getDebitNonce function\n    }\n\n    function getEscrowBalance() public view returns (uint256) {\n        // implementation of getEscrowBalance function\n    }\n\n    function getWithdrawNonce(bytes32 arg0) public view returns (uint64) {\n        // implementation of getWithdrawNonce function\n    }\n\n    function getLinkStatus(bytes32 arg0, address arg1) public view returns (bool) {\n        // implementation of getLinkStatus function\n    }\n\n    modifier onlyAdmin {\n        require(admins[msg.sender], \"Only admin can call this function.\");\n        _;\n    }\n}\n```\n\nNote: The provided decompiled code doesn't have the actual implementation of the functions, so the functions are declared without any specific implementation. You would need to replace the comments with the actual implementation based on your requirements.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472362,
	"id": "chatcmpl-8MupWfQiVfUJU1BiCbd2pGvRrt1Ay",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x03612cb5) {\n            // Dispatch table entry for settle(bytes32[],uint256[],uint256[])\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = memory[0x40:0x60];\n            var temp1 = msg.data[0x04:0x24];\n            var temp2 = msg.data[temp1 + 0x04:temp1 + 0x04 + 0x20];\n            var temp3 = temp2 * 0x20;\n            memory[0x40:0x60] = temp0 + temp3 + 0x20;\n            memory[temp0:temp0 + 0x20] = temp2;\n            var1 = 0x01dd;\n            memory[temp0 + 0x20:temp0 + 0x20 + temp3] = msg.data[temp1 + 0x24:temp1 + 0x24 + temp3];\n            var temp4 = memory[0x40:0x60];\n            var temp5 = msg.data[0x24:0x44] + 0x04;\n            var temp6 = msg.data[temp5:temp5 + 0x20];\n            var temp7 = temp6 * 0x20;\n            memory[0x40:0x60] = temp7 + temp4 + 0x20;\n            memory[temp4:temp4 + 0x20] = temp6;\n            var var2 = temp0;\n            memory[temp4 + 0x20:temp4 + 0x20 + temp7] = msg.data[temp5 + 0x20:temp5 + 0x20 + temp7];\n            var temp8 = memory[0x40:0x60];\n            var temp9 = msg.data[0x44:0x64] + 0x04;\n            var temp10 = msg.data[temp9:temp9 + 0x20];\n            var temp11 = temp10 * 0x20;\n            memory[0x40:0x60] = temp11 + temp8 + 0x20;\n            memory[temp8:temp8 + 0x20] = temp10;\n            var var3 = temp4;\n            memory[temp8 + 0x20:temp8 + 0x20 + temp11] = msg.data[temp9 + 0x20:temp9 + 0x20 + temp11];\n            var var4 = temp8;\n            settle(var2, var3, var4);\n            stop();\n        } else if (var0 == 0x14bfd6d0) {\n            // Dispatch table entry for admins(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01f7;\n            var2 = msg.data[0x04:0x24];\n            var2 = admins(var2);\n        \n        label_01F7:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x1785f53c) {\n            // Dispatch table entry for removeAdmin(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01dd;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            removeAdmin(var2);\n            stop();\n        } else if (var0 == 0x2a856fcf) {\n            // Dispatch table entry for debit(bytes32[],uint256[],uint64[],uint8[],bytes32[],bytes32[])\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp14 = memory[0x40:0x60];\n            var temp15 = msg.data[0x04:0x24];\n            var temp16 = msg.data[temp15 + 0x04:temp15 + 0x04 + 0x20];\n            var temp17 = temp16 * 0x20;\n            memory[0x40:0x60] = temp14 + temp17 + 0x20;\n            memory[temp14:temp14 + 0x20] = temp16;\n            var1 = 0x01dd;\n            memory[temp14 + 0x20:temp14 + 0x20 + temp17] = msg.data[temp15 + 0x24:temp15 + 0x24 + temp17];\n            var temp18 = memory[0x40:0x60];\n            var temp19 = msg.data[0x24:0x44] + 0x04;\n            var temp20 = msg.data[temp19:temp19 + 0x20];\n            var temp21 = temp20 * 0x20;\n            memory[0x40:0x60] = temp21 + temp18 + 0x20;\n            memory[temp18:temp18 + 0x20] = temp20;\n            var2 = temp14;\n            memory[temp18 + 0x20:temp18 + 0x20 + temp21] = msg.data[temp19 + 0x20:temp19 + 0x20 + temp21];\n            var temp22 = memory[0x40:0x60];\n            var temp23 = msg.data[0x44:0x64] + 0x04;\n            var temp24 = msg.data[temp23:temp23 + 0x20];\n            var temp25 = temp24 * 0x20;\n            memory[0x40:0x60] = temp25 + temp22 + 0x20;\n            memory[temp22:temp22 + 0x20] = temp24;\n            var3 = temp18;\n            memory[temp22 + 0x20:temp22 + 0x20 + temp25] = msg.data[temp23 + 0x20:temp23 + 0x20 + temp25];\n            var temp26 = memory[0x40:0x60];\n            var temp27 = msg.data[0x64:0x84] + 0x04;\n            var temp28 = msg.data[temp27:temp27 + 0x20];\n            var temp29 = temp28 * 0x20;\n            memory[0x40:0x60] = temp29 + temp26 + 0x20;\n            memory[temp26:temp26 + 0x20] = temp28;\n            var4 = temp22;\n            memory[temp26 + 0x20:temp26 + 0x20 + temp29] = msg.data[temp27 + 0x20:temp27 + 0x20 + temp29];\n            var temp30 = memory[0x40:0x60];\n            var temp31 = msg.data[0x84:0xa4] + 0x04;\n            var temp32 = msg.data[temp31:temp31 + 0x20];\n            var temp33 = temp32 * 0x20;\n            memory[0x40:0x60] = temp33 + temp30 + 0x20;\n            memory[temp30:temp30 + 0x20] = temp32;\n            var var5 = temp26;\n            memory[temp30 + 0x20:temp30 + 0x20 + temp33] = msg.data[temp31 + 0x20:temp31 + 0x20 + temp33];\n            var temp34 = memory[0x40:0x60];\n            var temp35 = msg.data[0xa4:0xc4] + 0x04;\n            var temp36 = msg.data[temp35:temp35 + 0x20];\n            var temp37 = temp36 * 0x20;\n            memory[0x40:0x60] = temp37 + temp34 + 0x20;\n            memory[temp34:temp34 + 0x20] = temp36;\n            var var6 = temp30;\n            memory[temp34 + 0x20:temp34 + 0x20 + temp37] = msg.data[temp35 + 0x20:temp35 + 0x20 + temp37];\n            var var7 = temp34;\n            debit(var2, var3, var4, var5, var6, var7);\n            stop();\n        } else if (var0 == 0x2bfd91d4) {\n            // Dispatch table entry for getMessageSigner(bytes32,uint8,bytes32,bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01f7;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0xff;\n            var4 = msg.data[0x44:0x64];\n            var5 = msg.data[0x64:0x84];\n            var1 = getMessageSigner(var2, var3, var4, var5);\n            goto label_01F7;\n        } else if (var0 == 0x3d44c476) {\n            // Dispatch table entry for getLinkDigest(bytes32,address)\n        label_03CA:\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n            var1 = getLinkDigest(var2, var3);\n        \n        label_03EE:\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = var1;\n            var temp39 = memory[0x40:0x60];\n            return memory[temp39:temp39 + temp38 - temp39 + 0x20];\n        } else if (var0 == 0x4eb933bf) {\n            // Dispatch table entry for withdraw(bytes32[],address[],uint256[],uint64[],uint8[],bytes32[],bytes32[])\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp40 = memory[0x40:0x60];\n            var temp41 = msg.data[0x04:0x24];\n            var temp42 = msg.data[temp41 + 0x04:temp41 + 0x04 + 0x20];\n            var temp43 = temp42 * 0x20;\n            memory[0x40:0x60] = temp40 + temp43 + 0x20;\n            memory[temp40:temp40 + 0x20] = temp42;\n            var1 = 0x01dd;\n            memory[temp40 + 0x20:temp40 + 0x20 + temp43] = msg.data[temp41 + 0x24:temp41 + 0x24 + temp43];\n            var temp44 = memory[0x40:0x60];\n            var temp45 = msg.data[0x24:0x44] + 0x04;\n            var temp46 = msg.data[temp45:temp45 + 0x20];\n            var temp47 = temp46 * 0x20;\n            memory[0x40:0x60] = temp47 + temp44 + 0x20;\n            memory[temp44:temp44 + 0x20] = temp46;\n            var2 = temp40;\n            memory[temp44 + 0x20:temp44 + 0x20 + temp47] = msg.data[temp45 + 0x20:temp45 + 0x20 + temp47];\n            var temp48 = memory[0x40:0x60];\n            var temp49 = msg.data[0x44:0x64] + 0x04;\n            var temp50 = msg.data[temp49:temp49 + 0x20];\n            var temp51 = temp50 * 0x20;\n            memory[0x40:0x60] = temp51 + temp48 + 0x20;\n            memory[temp48:temp48 + 0x20] = temp50;\n            var3 = temp44;\n            memory[temp48 + 0x20:temp48 + 0x20 + temp51] = msg.data[temp49 + 0x20:temp49 + 0x20 + temp51];\n            var temp52 = memory[0x40:0x60];\n            var temp53 = msg.data[0x64:0x84] + 0x04;\n            var temp54 = msg.data[temp53:temp53 + 0x20];\n            var temp55 = temp54 * 0x20;\n            memory[0x40:0x60] = temp55 + temp52 + 0x20;\n            memory[temp52:temp52 + 0x20] = temp54;\n            var4 = temp48;\n            memory[temp52 + 0x20:temp52 + 0x20 + temp55] = msg.data[temp53 + 0x20:temp53 + 0x20 + temp55];\n            var temp56 = memory[0x40:0x60];\n            var temp57 = msg.data[0x84:0xa4] + 0x04;\n            var temp58 = msg.data[temp57:temp57 + 0x20];\n            var temp59 = temp58 * 0x20;\n            memory[0x40:0x60] = temp59 + temp56 + 0x20;\n            memory[temp56:temp56 + 0x20] = temp58;\n            var5 = temp52;\n            memory[temp56 + 0x20:temp56 + 0x20 + temp59] = msg.data[temp57 + 0x20:temp57 + 0x20 + temp59];\n            var temp60 = memory[0x40:0x60];\n            var temp61 = msg.data[0xa4:0xc4] + 0x04;\n            var temp62 = msg.data[temp61:temp61 + 0x20];\n            var temp63 = temp62 * 0x20;\n            memory[0x40:0x60] = temp63 + temp60 + 0x20;\n            memory[temp60:temp60 + 0x20] = temp62;\n            var6 = temp56;\n            memory[temp60 + 0x20:temp60 + 0x20 + temp63] = msg.data[temp61 + 0x20:temp61 + 0x20 + temp63];\n            var temp64 = memory[0x40:0x60];\n            var temp65 = msg.data[0xc4:0xe4] + 0x04;\n            var temp66 = msg.data[temp65:temp65 + 0x20];\n            var temp67 = temp66 * 0x20;\n            memory[0x40:0x60] = temp67 + temp64 + 0x20;\n            memory[temp64:temp64 + 0x20] = temp66;\n            var7 = temp60;\n            memory[temp64 + 0x20:temp64 + 0x20 + temp67] = msg.data[temp65 + 0x20:temp65 + 0x20 + temp67];\n            var var8 = temp64;\n            withdraw(var2, var3, var4, var5, var6, var7, var8);\n            stop();\n        } else if (var0 == 0x62502fe7) {\n            // Dispatch table entry for getNameDigest(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp68 = memory[0x40:0x60];\n            var temp69 = msg.data[0x04:0x24];\n            var temp70 = msg.data[temp69 + 0x04:temp69 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp68 + (temp70 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp68:temp68 + 0x20] = temp70;\n            var1 = 0x03ee;\n            memory[temp68 + 0x20:temp68 + 0x20 + temp70] = msg.data[temp69 + 0x24:temp69 + 0x24 + temp70];\n            var2 = temp68;\n            var1 = getNameDigest(var2);\n            goto label_03EE;\n        } else if (var0 == 0x66eb463f) {\n            // Dispatch table entry for changeRootAdmin(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01dd;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            changeRootAdmin(var2);\n            stop();\n        } else if (var0 == 0x6e7c1c2b) {\n            // Dispatch table entry for getWithdrawDigest(bytes32,address,uint256,uint64)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n            var4 = msg.data[0x44:0x64];\n            var5 = msg.data[0x64:0x84] & 0xffffffffffffffff;\n            var1 = getWithdrawDigest(var2, var3, var4, var5);\n            goto label_03EE;\n        } else if (var0 == 0x70480275) {\n            // Dispatch table entry for addAdmin(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01dd;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            addAdmin(var2);\n            stop();\n        } else if (var0 == 0x71eb9710) {\n            // Dispatch table entry for getDebitDigest(bytes32,uint256,uint64)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64] & 0xffffffffffffffff;\n            var1 = getDebitDigest(var2, var3, var4);\n            goto label_03EE;\n        } else if (var0 == 0x8e739461) {\n            // Dispatch table entry for getBalance(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var1 = getBalance(var2);\n            goto label_03EE;\n        } else if (var0 == 0x9dc4ca42) { goto label_03CA; }\n            // Dispatch table entry for getWalletDigest(bytes32,address)\n        else if (var0 == 0xb214faa5) {\n            // Dispatch table entry for deposit(bytes32)\n            var1 = 0x01dd;\n            var2 = msg.data[0x04:0x24];\n            deposit(var2);\n            stop();\n        } else if (var0 == 0xb5a030d8) {\n            // Dispatch table entry for link(bytes32[],bytes32[],address[],uint8[],bytes32[],bytes32[])\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp71 = memory[0x40:0x60];\n            var temp72 = msg.data[0x04:0x24];\n            var temp73 = msg.data[temp72 + 0x04:temp72 + 0x04 + 0x20];\n            var temp74 = temp73 * 0x20;\n            memory[0x40:0x60] = temp71 + temp74 + 0x20;\n            memory[temp71:temp71 + 0x20] = temp73;\n            var1 = 0x01dd;\n            memory[temp71 + 0x20:temp71 + 0x20 + temp74] = msg.data[temp72 + 0x24:temp72 + 0x24 + temp74];\n            var temp75 = memory[0x40:0x60];\n            var temp76 = msg.data[0x24:0x44] + 0x04;\n            var temp77 = msg.data[temp76:temp76 + 0x20];\n            var temp78 = temp77 * 0x20;\n            memory[0x40:0x60] = temp78 + temp75 + 0x20;\n            memory[temp75:temp75 + 0x20] = temp77;\n            var2 = temp71;\n            memory[temp75 + 0x20:temp75 + 0x20 + temp78] = msg.data[temp76 + 0x20:temp76 + 0x20 + temp78];\n            var temp79 = memory[0x40:0x60];\n            var temp80 = msg.data[0x44:0x64] + 0x04;\n            var temp81 = msg.data[temp80:temp80 + 0x20];\n            var temp82 = temp81 * 0x20;\n            memory[0x40:0x60] = temp82 + temp79 + 0x20;\n            memory[temp79:temp79 + 0x20] = temp81;\n            var3 = temp75;\n            memory[temp79 + 0x20:temp79 + 0x20 + temp82] = msg.data[temp80 + 0x20:temp80 + 0x20 + temp82];\n            var temp83 = memory[0x40:0x60];\n            var temp84 = msg.data[0x64:0x84] + 0x04;\n            var temp85 = msg.data[temp84:temp84 + 0x20];\n            var temp86 = temp85 * 0x20;\n            memory[0x40:0x60] = temp86 + temp83 + 0x20;\n            memory[temp83:temp83 + 0x20] = temp85;\n            var4 = temp79;\n            memory[temp83 + 0x20:temp83 + 0x20 + temp86] = msg.data[temp84 + 0x20:temp84 + 0x20 + temp86];\n            var temp87 = memory[0x40:0x60];\n            var temp88 = msg.data[0x84:0xa4] + 0x04;\n            var temp89 = msg.data[temp88:temp88 + 0x20];\n            var temp90 = temp89 * 0x20;\n            memory[0x40:0x60] = temp90 + temp87 + 0x20;\n            memory[temp87:temp87 + 0x20] = temp89;\n            var5 = temp83;\n            memory[temp87 + 0x20:temp87 + 0x20 + temp90] = msg.data[temp88 + 0x20:temp88 + 0x20 + temp90];\n            var temp91 = memory[0x40:0x60];\n            var temp92 = msg.data[0xa4:0xc4] + 0x04;\n            var temp93 = msg.data[temp92:temp92 + 0x20];\n            var temp94 = temp93 * 0x20;\n            memory[0x40:0x60] = temp94 + temp91 + 0x20;\n            memory[temp91:temp91 + 0x20] = temp93;\n            var6 = temp87;\n            memory[temp91 + 0x20:temp91 + 0x20 + temp94] = msg.data[temp92 + 0x20:temp92 + 0x20 + temp94];\n            var7 = temp91;\n            link(var2, var3, var4, var5, var6, var7);\n            stop();\n        } else if (var0 == 0xbb0c08b6) {\n            // Dispatch table entry for getDebitNonce(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var1 = getDebitNonce(var2);\n            goto label_03EE;\n        } else if (var0 == 0xc56e610e) {\n            // Dispatch table entry for getEscrowBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var1 = getEscrowBalance();\n            goto label_03EE;\n        } else if (var0 == 0xde9b33f9) {\n            // Dispatch table entry for getWithdrawNonce(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var1 = getWithdrawNonce(var2);\n            goto label_03EE;\n        } else if (var0 == 0xf8dcc3e0) {\n            // Dispatch table entry for getLinkStatus(bytes32,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08a0;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n            var1 = getLinkStatus(var2, var3);\n            var temp95 = memory[0x40:0x60];\n            memory[temp95:temp95 + 0x20] = !!var1;\n            var temp96 = memory[0x40:0x60];\n            return memory[temp96:temp96 + temp95 - temp96 + 0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function settle(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (!(storage[keccak256(memory[var3:var3 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var4 = memory[arg0:arg0 + 0x20] == memory[arg1:arg1 + 0x20];\n    \n        if (!var4) {\n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_08F5:\n            var0 = storage[0x03];\n            var1 = 0x00;\n        \n            if (var1 >= memory[arg0:arg0 + 0x20]) {\n            label_09B2:\n                storage[0x03] = var0;\n                return;\n            } else {\n            label_0909:\n                var4 = arg0;\n                var var5 = var1;\n            \n                if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n            \n                var2 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                var4 = arg2;\n                var5 = var1;\n            \n                if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n            \n                var3 = memory[var4 + var5 * 0x20 + 0x20:var4 + var5 * 0x20 + 0x20 + 0x20];\n            \n                if (var3 > var0) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x01;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                var temp1 = var3;\n                storage[temp0] = temp1 + storage[temp0];\n                var0 = var0 - temp1;\n                var4 = temp1;\n                var5 = arg1;\n                var var6 = var1;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x0cd738c9c0bbe501d6da72544aaef2b26bfdcbffa10507ff2755918321897c56, stack[-5], memory[stack[-2] + stack[-1] * 0x20 + 0x20:stack[-2] + stack[-1] * 0x20 + 0x20 + 0x20], stack[-3]]);\n                var1 = var1 + 0x01;\n                var3 = var3;\n            \n                if (var1 >= memory[arg0:arg0 + 0x20]) { goto label_09B2; }\n                else { goto label_0909; }\n            }\n        } else if (memory[arg0:arg0 + 0x20] == memory[arg2:arg2 + 0x20]) { goto label_08F5; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function admins(var arg0) returns (var arg0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeAdmin(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (var3 >= storage[var3]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n    \n        if (msg.sender != storage[keccak256(memory[0x00:0x20]) + var3] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var2 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (!var2) {\n        label_0A6B:\n        \n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x00;\n            var1 = 0x01;\n        \n            if (var1 >= storage[0x00] + ~0x00) {\n            label_0B41:\n                var2 = storage[0x00];\n                var3 = 0x0b54;\n                var var4 = 0x00;\n                var var5 = var2 + ~0x00;\n                func_189B(var4, var5);\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = storage[temp0] & ~0xff;\n                return;\n            } else {\n            label_0A8D:\n                var2 = !var0;\n            \n                if (!var2) {\n                label_0AC5:\n                \n                    if (var2) {\n                        var0 = 0x01;\n                    \n                        if (!var0) { goto label_0B39; }\n                        else { goto label_0AD6; }\n                    } else if (!var0) {\n                    label_0B39:\n                        var1 = var1 + 0x01;\n                    \n                        if (var1 >= storage[0x00] + ~0x00) { goto label_0B41; }\n                        else { goto label_0A8D; }\n                    } else {\n                    label_0AD6:\n                        var2 = 0x00;\n                        var3 = var1 + 0x01;\n                    \n                        if (var3 >= storage[var2]) { assert(); }\n                    \n                        memory[0x00:0x20] = var2;\n                        var2 = storage[keccak256(memory[0x00:0x20]) + var3] & 0x02 ** 0xa0 - 0x01;\n                        var3 = 0x00;\n                        var4 = var1;\n                    \n                        if (var4 >= storage[var3]) { assert(); }\n                    \n                        memory[0x00:0x20] = var3;\n                        var temp1 = keccak256(memory[0x00:0x20]) + var4;\n                        storage[temp1] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp1] & ~(0x02 ** 0xa0 - 0x01));\n                        goto label_0B39;\n                    }\n                } else {\n                    var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n                    var3 = 0x00;\n                    var4 = var1;\n                \n                    if (var4 >= storage[var3]) { assert(); }\n                \n                    memory[0x00:0x20] = var3;\n                    var2 = storage[keccak256(memory[0x00:0x20]) + var4] & 0x02 ** 0xa0 - 0x01 == var2;\n                    goto label_0AC5;\n                }\n            }\n        } else {\n            var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x00;\n            var4 = var3;\n        \n            if (var4 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            var2 = storage[keccak256(memory[0x00:0x20]) + var4] & 0x02 ** 0xa0 - 0x01 != var2;\n            goto label_0A6B;\n        }\n    }\n    \n    function debit(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n    \n        if (!(storage[keccak256(memory[var6:var6 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var7 = memory[arg0:arg0 + 0x20] == memory[arg1:arg1 + 0x20];\n    \n        if (var7) {\n            var7 = memory[arg0:arg0 + 0x20] == memory[arg2:arg2 + 0x20];\n        \n            if (!var7) { goto label_0BC1; }\n            else { goto label_0BBB; }\n        } else if (!var7) {\n        label_0BC1:\n        \n            if (!var7) {\n            label_0BCE:\n            \n                if (!var7) {\n                label_0BDB:\n                \n                    if (!var7) { revert(memory[0x00:0x00]); }\n                \n                label_0BE6:\n                    var0 = 0x00;\n                    var1 = 0x00;\n                \n                    if (var1 >= memory[arg0:arg0 + 0x20]) {\n                    label_0D67:\n                        storage[0x03] = var0 + storage[0x03];\n                        return;\n                    } else {\n                    label_0BF9:\n                        var7 = arg0;\n                        var var8 = var1;\n                    \n                        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                    \n                        var2 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                        var7 = arg1;\n                        var8 = var1;\n                    \n                        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                    \n                        var3 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                        var7 = arg2;\n                        var8 = var1;\n                    \n                        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                    \n                        var temp0 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                        var4 = temp0;\n                        var7 = 0x0ca1;\n                        var8 = 0x0c54;\n                        var var9 = var2;\n                        var var10 = var3;\n                        var var11 = var4;\n                        var8 = getDebitDigest(var9, var10, var11);\n                        var7 = func_0C54(arg3, arg4, arg5, var1, var8);\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x01;\n                        var5 = var7;\n                        var6 = keccak256(memory[0x00:0x40]);\n                        var7 = storage[var6 + 0x02] & 0xffffffffffffffff < var4 & 0xffffffffffffffff;\n                    \n                        if (var7) {\n                            var7 = var3 <= storage[var6];\n                        \n                            if (!var7) { goto label_0CFB; }\n                            else { goto label_0CDC; }\n                        } else if (!var7) {\n                        label_0CFB:\n                        \n                            if (!var7) {\n                            label_0D5C:\n                                var6 = var6;\n                                var1 = var1 + 0x01;\n                            \n                            label_0BEF:\n                            \n                                if (var1 >= memory[arg0:arg0 + 0x20]) { goto label_0D67; }\n                                else { goto label_0BF9; }\n                            } else {\n                            label_0D01:\n                                var temp1 = var6;\n                                var temp2 = temp1 + 0x02;\n                                var temp3 = var4 & 0xffffffffffffffff;\n                                storage[temp2] = temp3 | (storage[temp2] & ~0xffffffffffffffff);\n                                var temp4 = var3;\n                                storage[temp1] = storage[temp1] - temp4;\n                                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x7268e507839e4153e67d3077766172d7413186c098053936a070dc179ad79382, stack[-5], stack[-3] & 0xffffffffffffffff, stack[-4]]);\n                                var0 = temp4 + var0;\n                                var6 = temp1;\n                                var1 = var1 + 0x01;\n                                goto label_0BEF;\n                            }\n                        } else {\n                        label_0CDC:\n                            memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = var6 + 0x01;\n                        \n                            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { goto label_0D5C; }\n                            else { goto label_0D01; }\n                        }\n                    }\n                } else {\n                label_0BD5:\n                \n                    if (memory[arg0:arg0 + 0x20] == memory[arg5:arg5 + 0x20]) { goto label_0BE6; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_0BC8:\n                var7 = memory[arg0:arg0 + 0x20] == memory[arg4:arg4 + 0x20];\n            \n                if (!var7) { goto label_0BDB; }\n                else { goto label_0BD5; }\n            }\n        } else {\n        label_0BBB:\n            var7 = memory[arg0:arg0 + 0x20] == memory[arg3:arg3 + 0x20];\n        \n            if (!var7) { goto label_0BCE; }\n            else { goto label_0BC8; }\n        }\n    }\n    \n    function func_0C54(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg3;\n    \n        if (var1 >= memory[var0:var0 + 0x20]) { assert(); }\n    \n        var0 = memory[var1 * 0x20 + var0 + 0x20:var1 * 0x20 + var0 + 0x20 + 0x20];\n        var1 = arg1;\n        var var2 = arg3;\n    \n        if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n    \n        var1 = memory[var2 * 0x20 + var1 + 0x20:var2 * 0x20 + var1 + 0x20 + 0x20];\n        var2 = arg2;\n        var var3 = arg3;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        r0 = getMessageSigner(arg4, var0, var1, var2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getMessageSigner(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        var var1 = temp0;\n        memory[0x40:0x60] = var1 + 0x40;\n        memory[var1:var1 + 0x20] = 0x1c;\n        memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        var var0 = 0x00;\n        var var2 = var0;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = memory[0x40:0x60] + 0x20;\n        var var7 = var1 + 0x20;\n        var var6 = var5;\n        var var8 = 0x1c;\n        var var9 = var8;\n        var var10 = var6;\n        var var11 = var7;\n    \n        if (var9 < 0x20) {\n        label_0DEA:\n            var temp1 = var10;\n            var temp2 = 0x0100 ** (0x20 - var9) + ~0x00;\n            memory[temp1:temp1 + 0x20] = (temp2 & memory[temp1:temp1 + 0x20]) | (memory[var11:var11 + 0x20] & ~temp2);\n            var temp3 = var6 + var8;\n            memory[temp3:temp3 + 0x20] = var4;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp3 - temp4;\n            memory[0x40:0x60] = temp3 + 0x20;\n            var3 = temp4;\n            var4 = temp3 + 0x20;\n            var5 = var4;\n            var6 = var3 + 0x20;\n            var7 = memory[var3:var3 + 0x20];\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n        \n            if (var8 < 0x20) {\n            label_0E4A:\n                var temp5 = var9;\n                var temp6 = 0x0100 ** (0x20 - var8) + ~0x00;\n                memory[temp5:temp5 + 0x20] = (temp6 & memory[temp5:temp5 + 0x20]) | (memory[var10:var10 + 0x20] & ~temp6);\n                var temp7 = memory[0x40:0x60];\n                var temp8 = keccak256(memory[temp7:temp7 + (var5 + var7) - temp7]);\n                memory[temp7:temp7 + 0x20] = 0x00;\n                var temp9 = temp7 + 0x20;\n                memory[0x40:0x60] = temp9;\n                memory[temp9:temp9 + 0x20] = temp8;\n                memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = arg1 & 0xff;\n                memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = arg2;\n                memory[temp7 + 0x80:temp7 + 0x80 + 0x20] = arg3;\n                var temp10 = memory[0x40:0x60];\n                var2 = temp8;\n                var3 = 0x01;\n                var4 = temp7 + 0xa0;\n                var temp11;\n                temp11, memory[temp10 + ~0x1f:temp10 + ~0x1f + 0x20] = address(var3).call.gas(msg.gas)(memory[temp10:temp10 + temp7 - temp10 + 0xa0]);\n                var5 = !temp11;\n            \n                if (!var5) { return memory[memory[0x40:0x60] + ~0x1f:memory[0x40:0x60] + ~0x1f + 0x20]; }\n            \n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n            label_0E34:\n                var temp13 = var10;\n                var temp14 = var9;\n                memory[temp14:temp14 + 0x20] = memory[temp13:temp13 + 0x20];\n                var8 = var8 + ~0x1f;\n                var9 = temp14 + 0x20;\n                var10 = temp13 + 0x20;\n            \n                if (var8 < 0x20) { goto label_0E4A; }\n                else { goto label_0E34; }\n            }\n        } else {\n        label_0DD4:\n            var temp15 = var11;\n            var temp16 = var10;\n            memory[temp16:temp16 + 0x20] = memory[temp15:temp15 + 0x20];\n            var9 = var9 + ~0x1f;\n            var10 = temp16 + 0x20;\n            var11 = temp15 + 0x20;\n        \n            if (var9 < 0x20) { goto label_0DEA; }\n            else { goto label_0DD4; }\n        }\n    }\n    \n    function getLinkDigest(var arg0, var arg1) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = (arg1 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x34;\n        var var1 = temp1;\n        memory[0x40:0x60] = temp0 + 0x54;\n        var var0 = 0x00;\n        var var2 = temp0 + 0x54;\n        var var3 = var2;\n        var var5 = memory[var1:var1 + 0x20];\n        var var4 = var1 + 0x20;\n        var var6 = var5;\n        var var7 = var3;\n        var var8 = var4;\n    \n        if (var6 < 0x20) {\n        label_0F4B:\n            var temp2 = var7;\n            var temp3 = 0x0100 ** (0x20 - var6) + ~0x00;\n            memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp3) | (memory[var8:var8 + 0x20] & ~temp3);\n            var temp4 = memory[0x40:0x60];\n            return keccak256(memory[temp4:temp4 + (var3 + var5) - temp4]);\n        } else {\n        label_0F35:\n            var temp5 = var8;\n            var temp6 = var7;\n            memory[temp6:temp6 + 0x20] = memory[temp5:temp5 + 0x20];\n            var6 = var6 + ~0x1f;\n            var7 = temp6 + 0x20;\n            var8 = temp5 + 0x20;\n        \n            if (var6 < 0x20) { goto label_0F4B; }\n            else { goto label_0F35; }\n        }\n    }\n    \n    function withdraw(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n    \n        if (!(storage[keccak256(memory[var6:var6 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var7 = memory[arg0:arg0 + 0x20] == memory[arg1:arg1 + 0x20];\n    \n        if (var7) {\n            var7 = memory[arg0:arg0 + 0x20] == memory[arg2:arg2 + 0x20];\n        \n            if (!var7) { goto label_0FC7; }\n            else { goto label_0FC1; }\n        } else if (!var7) {\n        label_0FC7:\n        \n            if (!var7) {\n            label_0FD4:\n            \n                if (!var7) {\n                label_0FE1:\n                \n                    if (!var7) {\n                    label_0FEE:\n                    \n                        if (!var7) { revert(memory[0x00:0x00]); }\n                    \n                    label_0FF9:\n                        var0 = 0x00;\n                    \n                        if (var0 >= memory[arg0:arg0 + 0x20]) {\n                        label_11E1:\n                            return;\n                        } else {\n                        label_1008:\n                            var7 = arg0;\n                            var var8 = var0;\n                        \n                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                        \n                            var1 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                            var7 = arg1;\n                            var8 = var0;\n                        \n                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                        \n                            var2 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                            var7 = arg2;\n                            var8 = var0;\n                        \n                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                        \n                            var3 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                            var7 = arg3;\n                            var8 = var0;\n                        \n                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                        \n                            var temp0 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                            var4 = temp0;\n                            var7 = 0x10bc;\n                            var8 = 0x107e;\n                            var var9 = var1;\n                            var var10 = var2;\n                            var var11 = var3;\n                            var var12 = var4;\n                            var8 = getWithdrawDigest(var9, var10, var11, var12);\n                            var7 = func_107E(arg4, arg5, arg6, var0, var8);\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x01;\n                            var5 = var7;\n                            var6 = keccak256(memory[0x00:0x40]);\n                            var7 = storage[var6 + 0x02] / 0x010000000000000000 & 0xffffffffffffffff < var4 & 0xffffffffffffffff;\n                        \n                            if (var7) {\n                                var7 = var3 <= storage[var6];\n                            \n                                if (!var7) { goto label_1122; }\n                                else { goto label_1103; }\n                            } else if (!var7) {\n                            label_1122:\n                            \n                                if (!var7) {\n                                label_114F:\n                                \n                                    if (!var7) {\n                                    label_11D6:\n                                        var6 = var6;\n                                        var0 = var0 + 0x01;\n                                    \n                                    label_0FFE:\n                                    \n                                        if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_11E1; }\n                                        else { goto label_1008; }\n                                    } else {\n                                    label_1155:\n                                        var temp1 = var6;\n                                        var temp2 = temp1 + 0x02;\n                                        var temp3 = var4 & 0xffffffffffffffff;\n                                        storage[temp2] = (storage[temp2] & ~0xffffffffffffffff0000000000000000) | temp3 * 0x010000000000000000;\n                                        var temp4 = var3;\n                                        storage[temp1] = storage[temp1] - temp4;\n                                        var temp5 = memory[0x40:0x60];\n                                        memory[temp5:temp5 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                                        var temp6 = memory[0x40:0x60];\n                                        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x7b840614242a6f8bab9f3a654f6ce3aa212f8a4e3f3d3a9845a91bb891394cbc, stack[-6], stack[-3] & 0xffffffffffffffff, stack[-4]]);\n                                        var0 = var0 + 0x01;\n                                        var6 = temp1;\n                                        goto label_0FFE;\n                                    }\n                                } else {\n                                label_1129:\n                                    var temp7 = memory[0x40:0x60];\n                                    var temp8 = var3;\n                                    var temp9;\n                                    temp9, memory[temp7:temp7 + 0x00] = address(var2 & 0x02 ** 0xa0 - 0x01).call.gas(!temp8 * 0x08fc).value(temp8)(memory[temp7:temp7 + 0x00]);\n                                \n                                    if (!temp9) { goto label_11D6; }\n                                    else { goto label_1155; }\n                                }\n                            } else {\n                            label_1103:\n                                memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = var6 + 0x01;\n                                var7 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                            \n                                if (!var7) { goto label_114F; }\n                                else { goto label_1129; }\n                            }\n                        }\n                    } else {\n                    label_0FE8:\n                    \n                        if (memory[arg0:arg0 + 0x20] == memory[arg6:arg6 + 0x20]) { goto label_0FF9; }\n                        else { revert(memory[0x00:0x00]); }\n                    }\n                } else {\n                label_0FDB:\n                    var7 = memory[arg0:arg0 + 0x20] == memory[arg5:arg5 + 0x20];\n                \n                    if (!var7) { goto label_0FEE; }\n                    else { goto label_0FE8; }\n                }\n            } else {\n            label_0FCE:\n                var7 = memory[arg0:arg0 + 0x20] == memory[arg4:arg4 + 0x20];\n            \n                if (!var7) { goto label_0FE1; }\n                else { goto label_0FDB; }\n            }\n        } else {\n        label_0FC1:\n            var7 = memory[arg0:arg0 + 0x20] == memory[arg3:arg3 + 0x20];\n        \n            if (!var7) { goto label_0FD4; }\n            else { goto label_0FCE; }\n        }\n    }\n    \n    function func_107E(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg3;\n    \n        if (var1 >= memory[var0:var0 + 0x20]) { assert(); }\n    \n        var0 = memory[var1 * 0x20 + var0 + 0x20:var1 * 0x20 + var0 + 0x20 + 0x20];\n        var1 = arg1;\n        var var2 = arg3;\n    \n        if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n    \n        var1 = memory[var2 * 0x20 + var1 + 0x20:var2 * 0x20 + var1 + 0x20 + 0x20];\n        var2 = arg2;\n        var var3 = arg3;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        r0 = getMessageSigner(arg4, var0, var1, var2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getNameDigest(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0;\n        var var2 = memory[0x40:0x60] + 0x20;\n        var var3 = var2;\n        var var4 = var1 + 0x20;\n        var var5 = memory[var1:var1 + 0x20];\n        var var6 = var5;\n        var var7 = var3;\n        var var8 = var4;\n    \n        if (var6 < 0x20) {\n        label_1226:\n            var temp1 = 0x0100 ** (0x20 - var6) - 0x01;\n            var temp2 = var7;\n            memory[temp2:temp2 + 0x20] = (memory[var8:var8 + 0x20] & ~temp1) | (memory[temp2:temp2 + 0x20] & temp1);\n            var temp3 = var5 + var3;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp3 - temp4 - 0x20;\n            var1 = temp4;\n            memory[0x40:0x60] = temp3;\n            var2 = memory[0x40:0x60];\n            var3 = var2;\n            var4 = var1 + 0x20;\n            var5 = memory[var1:var1 + 0x20];\n            var6 = var5;\n            var7 = var3;\n            var8 = var4;\n        \n            if (var6 < 0x20) {\n            label_1289:\n                var temp5 = var7;\n                var temp6 = 0x0100 ** (0x20 - var6) + ~0x00;\n                memory[temp5:temp5 + 0x20] = (memory[temp5:temp5 + 0x20] & temp6) | (memory[var8:var8 + 0x20] & ~temp6);\n                var temp7 = memory[0x40:0x60];\n                return keccak256(memory[temp7:temp7 + (var3 + var5) - temp7]);\n            } else {\n            label_1273:\n                var temp8 = var8;\n                var temp9 = var7;\n                memory[temp9:temp9 + 0x20] = memory[temp8:temp8 + 0x20];\n                var6 = var6 + ~0x1f;\n                var7 = temp9 + 0x20;\n                var8 = temp8 + 0x20;\n            \n                if (var6 < 0x20) { goto label_1289; }\n                else { goto label_1273; }\n            }\n        } else {\n        label_1210:\n            var temp10 = var8;\n            var temp11 = var7;\n            memory[temp11:temp11 + 0x20] = memory[temp10:temp10 + 0x20];\n            var6 = var6 + ~0x1f;\n            var7 = temp11 + 0x20;\n            var8 = temp10 + 0x20;\n        \n            if (var6 < 0x20) { goto label_1226; }\n            else { goto label_1210; }\n        }\n    }\n    \n    function changeRootAdmin(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n    \n        if (msg.sender != storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var0 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (!var0) {\n        label_133D:\n        \n            if (!var0) {\n            label_134B:\n                var0 = arg0;\n                var1 = 0x00;\n                var var2 = var1;\n            \n                if (var2 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var1;\n                var temp0 = keccak256(memory[0x00:0x20]) + var2;\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                storage[temp0] = (temp1 & var0) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                memory[0x00:0x20] = temp1 & arg0;\n                memory[0x20:0x40] = 0x02;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n                return;\n            } else {\n                var0 = 0x134b;\n                var1 = arg0;\n                removeAdmin(var1);\n                goto label_134B;\n            }\n        } else {\n            var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var1 = 0x00;\n            var2 = var1;\n        \n            if (var2 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var1;\n            var0 = storage[keccak256(memory[0x00:0x20]) + var2] & 0x02 ** 0xa0 - 0x01 != var0;\n            goto label_133D;\n        }\n    }\n    \n    function getWithdrawDigest(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = (arg1 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        memory[temp0 + 0x54:temp0 + 0x54 + 0x20] = arg2;\n        memory[temp0 + 0x74:temp0 + 0x74 + 0x20] = (arg3 & 0xffffffffffffffff) * 0x01000000000000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x5c;\n        var var1 = temp1;\n        memory[0x40:0x60] = temp0 + 0x7c;\n        var var0 = 0x00;\n        var var2 = temp0 + 0x7c;\n        var var3 = var2;\n        var var5 = memory[var1:var1 + 0x20];\n        var var4 = var1 + 0x20;\n        var var6 = var5;\n        var var7 = var3;\n        var var8 = var4;\n    \n        if (var6 < 0x20) {\n        label_1449:\n            var temp2 = var7;\n            var temp3 = 0x0100 ** (0x20 - var6) + ~0x00;\n            memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp3) | (memory[var8:var8 + 0x20] & ~temp3);\n            var temp4 = memory[0x40:0x60];\n            return keccak256(memory[temp4:temp4 + (var3 + var5) - temp4]);\n        } else {\n        label_1433:\n            var temp5 = var8;\n            var temp6 = var7;\n            memory[temp6:temp6 + 0x20] = memory[temp5:temp5 + 0x20];\n            var6 = var6 + ~0x1f;\n            var7 = temp6 + 0x20;\n            var8 = temp5 + 0x20;\n        \n            if (var6 < 0x20) { goto label_1449; }\n            else { goto label_1433; }\n        }\n    }\n    \n    function addAdmin(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n    \n        if (msg.sender != storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = (storage[temp1] & ~0xff) | 0x01;\n        var temp2 = storage[0x00];\n        storage[0x00] = temp2 + 0x01;\n        memory[0x00:0x20] = 0x00;\n        var temp3 = temp2 + 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n        storage[temp3] = temp0 | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function getDebitDigest(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = arg1;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = (arg2 & 0xffffffffffffffff) * 0x01000000000000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x48;\n        var var1 = temp1;\n        memory[0x40:0x60] = temp0 + 0x68;\n        var var0 = 0x00;\n        var var2 = temp0 + 0x68;\n        var var3 = var2;\n        var var5 = memory[var1:var1 + 0x20];\n        var var4 = var1 + 0x20;\n        var var6 = var5;\n        var var7 = var3;\n        var var8 = var4;\n    \n        if (var6 < 0x20) {\n        label_15C2:\n            var temp2 = var7;\n            var temp3 = 0x0100 ** (0x20 - var6) + ~0x00;\n            memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp3) | (memory[var8:var8 + 0x20] & ~temp3);\n            var temp4 = memory[0x40:0x60];\n            return keccak256(memory[temp4:temp4 + (var3 + var5) - temp4]);\n        } else {\n        label_15AC:\n            var temp5 = var8;\n            var temp6 = var7;\n            memory[temp6:temp6 + 0x20] = memory[temp5:temp5 + 0x20];\n            var6 = var6 + ~0x1f;\n            var7 = temp6 + 0x20;\n            var8 = temp5 + 0x20;\n        \n            if (var6 < 0x20) { goto label_15C2; }\n            else { goto label_15AC; }\n        }\n    }\n    \n    function getBalance(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function deposit(var arg0) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = msg.value;\n        storage[temp1] = temp2 + storage[temp1];\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x182fa52899142d44ff5c45a6354d3b3e868d5b07db6a65580b39bd321bdaf8ac, stack[-1], msg.sender, msg.value]);\n    }\n    \n    function link(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (!(storage[keccak256(memory[var4:var4 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var5 = memory[arg0:arg0 + 0x20] == memory[arg1:arg1 + 0x20];\n    \n        if (var5) {\n            var5 = memory[arg0:arg0 + 0x20] == memory[arg2:arg2 + 0x20];\n        \n            if (!var5) { goto label_1693; }\n            else { goto label_168D; }\n        } else if (!var5) {\n        label_1693:\n        \n            if (!var5) {\n            label_16A0:\n            \n                if (!var5) {\n                label_16AD:\n                \n                    if (!var5) { revert(memory[0x00:0x00]); }\n                \n                label_16B8:\n                    var0 = 0x00;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) {\n                    label_17FD:\n                        return;\n                    } else {\n                    label_16C7:\n                        var5 = arg0;\n                        var var6 = var0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        var1 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20];\n                        var5 = arg2;\n                        var6 = var0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        var temp0 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20];\n                        var2 = temp0;\n                        var5 = 0x1745;\n                        var6 = 0x1707;\n                        var var7 = var1;\n                        var var8 = var2;\n                        var6 = getLinkDigest(var7, var8);\n                        var5 = func_1707(arg3, arg4, arg5, var0, var6);\n                        memory[0x00:0x20] = var1;\n                        memory[0x20:0x40] = 0x01;\n                        var temp1 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = temp1 + 0x01;\n                        var3 = var5;\n                        var4 = temp1;\n                        var5 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                    \n                        if (var5) {\n                        label_179E:\n                        \n                            if (!var5) {\n                                var4 = var4;\n                                var0 = var0 + 0x01;\n                            \n                            label_16BD:\n                            \n                                if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_17FD; }\n                                else { goto label_16C7; }\n                            } else {\n                                var temp2 = var2 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x00:0x20] = temp2;\n                                memory[0x20:0x40] = var4 + 0x01;\n                                var temp3 = keccak256(memory[0x00:0x40]);\n                                storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n                                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xe96896758b540353b26660205100e2756a7e5495f07920d72859afc60e5f9136, stack[-4], stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                                var0 = var0 + 0x01;\n                                var4 = var4;\n                                goto label_16BD;\n                            }\n                        } else {\n                            var5 = 0x179b;\n                            var6 = arg1;\n                            var7 = var0;\n                        \n                            if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                        \n                            var5 = func_178B(var3, var6, var7);\n                            var5 = var1 == var5;\n                            goto label_179E;\n                        }\n                    }\n                } else {\n                label_16A7:\n                \n                    if (memory[arg0:arg0 + 0x20] == memory[arg5:arg5 + 0x20]) { goto label_16B8; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_169A:\n                var5 = memory[arg0:arg0 + 0x20] == memory[arg4:arg4 + 0x20];\n            \n                if (!var5) { goto label_16AD; }\n                else { goto label_16A7; }\n            }\n        } else {\n        label_168D:\n            var5 = memory[arg0:arg0 + 0x20] == memory[arg3:arg3 + 0x20];\n        \n            if (!var5) { goto label_16A0; }\n            else { goto label_169A; }\n        }\n    }\n    \n    function func_1707(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg3;\n    \n        if (var1 >= memory[var0:var0 + 0x20]) { assert(); }\n    \n        var0 = memory[var1 * 0x20 + var0 + 0x20:var1 * 0x20 + var0 + 0x20 + 0x20];\n        var1 = arg1;\n        var var2 = arg3;\n    \n        if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n    \n        var1 = memory[var2 * 0x20 + var1 + 0x20:var2 * 0x20 + var1 + 0x20 + 0x20];\n        var2 = arg2;\n        var var3 = arg3;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        r0 = getMessageSigner(arg4, var0, var1, var2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_178B(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = memory[arg2 * 0x20 + arg1 + 0x20:arg2 * 0x20 + arg1 + 0x20 + 0x20];\n        arg2 = arg0;\n        r0 = getLinkDigest(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getDebitNonce(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffff) + 0x01 & 0xffffffffffffffff;\n    }\n    \n    function getEscrowBalance() returns (var r0) { return storage[0x03]; }\n    \n    function getWithdrawNonce(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return (storage[keccak256(memory[0x00:0x40]) + 0x02] / 0x010000000000000000 & 0xffffffffffffffff) + 0x01 & 0xffffffffffffffff;\n    }\n    \n    function getLinkStatus(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = temp0 + 0x01;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_189B(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_18BF:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x18bf;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_18C4(var1, var2);\n            goto label_18BF;\n        }\n    }\n    \n    function func_18C4(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1836;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_18DE(arg1, var0); }\n    \n    label_18D3:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_18D3; }\n    \n        arg0 = func_18DE(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_18DE(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x03612cb5) {\n            // Dispatch table entry for settle(bytes32[],uint256[],uint256[])\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = memory[0x40:0x60];\n            var temp1 = msg.data[0x04:0x24];\n            var temp2 = msg.data[temp1 + 0x04:temp1 + 0x04 + 0x20];\n            var temp3 = temp2 * 0x20;\n            memory[0x40:0x60] = temp0 + temp3 + 0x20;\n            memory[temp0:temp0 + 0x20] = temp2;\n            var1 = 0x01dd;\n            memory[temp0 + 0x20:temp0 + 0x20 + temp3] = msg.data[temp1 + 0x24:temp1 + 0x24 + temp3];\n            var temp4 = memory[0x40:0x60];\n            var temp5 = msg.data[0x24:0x44] + 0x04;\n            var temp6 = msg.data[temp5:temp5 + 0x20];\n            var temp7 = temp6 * 0x20;\n            memory[0x40:0x60] = temp7 + temp4 + 0x20;\n            memory[temp4:temp4 + 0x20] = temp6;\n            var var2 = temp0;\n            memory[temp4 + 0x20:temp4 + 0x20 + temp7] = msg.data[temp5 + 0x20:temp5 + 0x20 + temp7];\n            var temp8 = memory[0x40:0x60];\n            var temp9 = msg.data[0x44:0x64] + 0x04;\n            var temp10 = msg.data[temp9:temp9 + 0x20];\n            var temp11 = temp10 * 0x20;\n            memory[0x40:0x60] = temp11 + temp8 + 0x20;\n            memory[temp8:temp8 + 0x20] = temp10;\n            var var3 = temp4;\n            memory[temp8 + 0x20:temp8 + 0x20 + temp11] = msg.data[temp9 + 0x20:temp9 + 0x20 + temp11];\n            var var4 = temp8;\n            settle(var2, var3, var4);\n            stop();\n        } else if (var0 == 0x14bfd6d0) {\n            // Dispatch table entry for admins(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01f7;\n            var2 = msg.data[0x04:0x24];\n            var2 = admins(var2);\n        \n        label_01F7:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x1785f53c) {\n            // Dispatch table entry for removeAdmin(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01dd;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            removeAdmin(var2);\n            stop();\n        } else if (var0 == 0x2a856fcf) {\n            // Dispatch table entry for debit(bytes32[],uint256[],uint64[],uint8[],bytes32[],bytes32[])\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp14 = memory[0x40:0x60];\n            var temp15 = msg.data[0x04:0x24];\n            var temp16 = msg.data[temp15 + 0x04:temp15 + 0x04 + 0x20];\n            var temp17 = temp16 * 0x20;\n            memory[0x40:0x60] = temp14 + temp17 + 0x20;\n            memory[temp14:temp14 + 0x20] = temp16;\n            var1 = 0x01dd;\n            memory[temp14 + 0x20:temp14 + 0x20 + temp17] = msg.data[temp15 + 0x24:temp15 + 0x24 + temp17];\n            var temp18 = memory[0x40:0x60];\n            var temp19 = msg.data[0x24:0x44] + 0x04;\n            var temp20 = msg.data[temp19:temp19 + 0x20];\n            var temp21 = temp20 * 0x20;\n            memory[0x40:0x60] = temp21 + temp18 + 0x20;\n            memory[temp18:temp18 + 0x20] = temp20;\n            var2 = temp14;\n            memory[temp18 + 0x20:temp18 + 0x20 + temp21] = msg.data[temp19 + 0x20:temp19 + 0x20 + temp21];\n            var temp22 = memory[0x40:0x60];\n            var temp23 = msg.data[0x44:0x64] + 0x04;\n            var temp24 = msg.data[temp23:temp23 + 0x20];\n            var temp25 = temp24 * 0x20;\n            memory[0x40:0x60] = temp25 + temp22 + 0x20;\n            memory[temp22:temp22 + 0x20] = temp24;\n            var3 = temp18;\n            memory[temp22 + 0x20:temp22 + 0x20 + temp25] = msg.data[temp23 + 0x20:temp23 + 0x20 + temp25];\n            var temp26 = memory[0x40:0x60];\n            var temp27 = msg.data[0x64:0x84] + 0x04;\n            var temp28 = msg.data[temp27:temp27 + 0x20];\n            var temp29 = temp28 * 0x20;\n            memory[0x40:0x60] = temp29 + temp26 + 0x20;\n            memory[temp26:temp26 + 0x20] = temp28;\n            var4 = temp22;\n            memory[temp26 + 0x20:temp26 + 0x20 + temp29] = msg.data[temp27 + 0x20:temp27 + 0x20 + temp29];\n            var temp30 = memory[0x40:0x60];\n            var temp31 = msg.data[0x84:0xa4] + 0x04;\n            var temp32 = msg.data[temp31:temp31 + 0x20];\n            var temp33 = temp32 * 0x20;\n            memory[0x40:0x60] = temp33 + temp30 + 0x20;\n            memory[temp30:temp30 + 0x20] = temp32;\n            var var5 = temp26;\n            memory[temp30 + 0x20:temp30 + 0x20 + temp33] = msg.data[temp31 + 0x20:temp31 + 0x20 + temp33];\n            var temp34 = memory[0x40:0x60];\n            var temp35 = msg.data[0xa4:0xc4] + 0x04;\n            var temp36 = msg.data[temp35:temp35 + 0x20];\n            var temp37 = temp36 * 0x20;\n            memory[0x40:0x60] = temp37 + temp34 + 0x20;\n            memory[temp34:temp34 + 0x20] = temp36;\n            var var6 = temp30;\n            memory[temp34 + 0x20:temp34 + 0x20 + temp37] = msg.data[temp35 + 0x20:temp35 + 0x20 + temp37];\n            var var7 = temp34;\n            debit(var2, var3, var4, var5, var6, var7);\n            stop();\n        } else if (var0 == 0x2bfd91d4) {\n            // Dispatch table entry for getMessageSigner(bytes32,uint8,bytes32,bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01f7;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0xff;\n            var4 = msg.data[0x44:0x64];\n            var5 = msg.data[0x64:0x84];\n            var1 = getMessageSigner(var2, var3, var4, var5);\n            goto label_01F7;\n        } else if (var0 == 0x3d44c476) {\n            // Dispatch table entry for getLinkDigest(bytes32,address)\n        label_03CA:\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n            var1 = getLinkDigest(var2, var3);\n        \n        label_03EE:\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = var1;\n            var temp39 = memory[0x40:0x60];\n            return memory[temp39:temp39 + temp38 - temp39 + 0x20];\n        } else if (var0 == 0x4eb933bf) {\n            // Dispatch table entry for withdraw(bytes32[],address[],uint256[],uint64[],uint8[],bytes32[],bytes32[])\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp40 = memory[0x40:0x60];\n            var temp41 = msg.data[0x04:0x24];\n            var temp42 = msg.data[temp41 + 0x04:temp41 + 0x04 + 0x20];\n            var temp43 = temp42 * 0x20;\n            memory[0x40:0x60] = temp40 + temp43 + 0x20;\n            memory[temp40:temp40 + 0x20] = temp42;\n            var1 = 0x01dd;\n            memory[temp40 + 0x20:temp40 + 0x20 + temp43] = msg.data[temp41 + 0x24:temp41 + 0x24 + temp43];\n            var temp44 = memory[0x40:0x60];\n            var temp45 = msg.data[0x24:0x44] + 0x04;\n            var temp46 = msg.data[temp45:temp45 + 0x20];\n            var temp47 = temp46 * 0x20;\n            memory[0x40:0x60] = temp47 + temp44 + 0x20;\n            memory[temp44:temp44 + 0x20] = temp46;\n            var2 = temp40;\n            memory[temp44 + 0x20:temp44 + 0x20 + temp47] = msg.data[temp45 + 0x20:temp45 + 0x20 + temp47];\n            var temp48 = memory[0x40:0x60];\n            var temp49 = msg.data[0x44:0x64] + 0x04;\n            var temp50 = msg.data[temp49:temp49 + 0x20];\n            var temp51 = temp50 * 0x20;\n            memory[0x40:0x60] = temp51 + temp48 + 0x20;\n            memory[temp48:temp48 + 0x20] = temp50;\n            var3 = temp44;\n            memory[temp48 + 0x20:temp48 + 0x20 + temp51] = msg.data[temp49 + 0x20:temp49 + 0x20 + temp51];\n            var temp52 = memory[0x40:0x60];\n            var temp53 = msg.data[0x64:0x84] + 0x04;\n            var temp54 = msg.data[temp53:temp53 + 0x20];\n            var temp55 = temp54 * 0x20;\n            memory[0x40:0x60] = temp55 + temp52 + 0x20;\n            memory[temp52:temp52 + 0x20] = temp54;\n            var4 = temp48;\n            memory[temp52 + 0x20:temp52 + 0x20 + temp55] = msg.data[temp53 + 0x20:temp53 + 0x20 + temp55];\n            var temp56 = memory[0x40:0x60];\n            var temp57 = msg.data[0x84:0xa4] + 0x04;\n            var temp58 = msg.data[temp57:temp57 + 0x20];\n            var temp59 = temp58 * 0x20;\n            memory[0x40:0x60] = temp59 + temp56 + 0x20;\n            memory[temp56:temp56 + 0x20] = temp58;\n            var5 = temp52;\n            memory[temp56 + 0x20:temp56 + 0x20 + temp59] = msg.data[temp57 + 0x20:temp57 + 0x20 + temp59];\n            var temp60 = memory[0x40:0x60];\n            var temp61 = msg.data[0xa4:0xc4] + 0x04;\n            var temp62 = msg.data[temp61:temp61 + 0x20];\n            var temp63 = temp62 * 0x20;\n            memory[0x40:0x60] = temp63 + temp60 + 0x20;\n            memory[temp60:temp60 + 0x20] = temp62;\n            var6 = temp56;\n            memory[temp60 + 0x20:temp60 + 0x20 + temp63] = msg.data[temp61 + 0x20:temp61 + 0x20 + temp63];\n            var temp64 = memory[0x40:0x60];\n            var temp65 = msg.data[0xc4:0xe4] + 0x04;\n            var temp66 = msg.data[temp65:temp65 + 0x20];\n            var temp67 = temp66 * 0x20;\n            memory[0x40:0x60] = temp67 + temp64 + 0x20;\n            memory[temp64:temp64 + 0x20] = temp66;\n            var7 = temp60;\n            memory[temp64 + 0x20:temp64 + 0x20 + temp67] = msg.data[temp65 + 0x20:temp65 + 0x20 + temp67];\n            var var8 = temp64;\n            withdraw(var2, var3, var4, var5, var6, var7, var8);\n            stop();\n        } else if (var0 == 0x62502fe7) {\n            // Dispatch table entry for getNameDigest(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp68 = memory[0x40:0x60];\n            var temp69 = msg.data[0x04:0x24];\n            var temp70 = msg.data[temp69 + 0x04:temp69 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp68 + (temp70 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp68:temp68 + 0x20] = temp70;\n            var1 = 0x03ee;\n            memory[temp68 + 0x20:temp68 + 0x20 + temp70] = msg.data[temp69 + 0x24:temp69 + 0x24 + temp70];\n            var2 = temp68;\n            var1 = getNameDigest(var2);\n            goto label_03EE;\n        } else if (var0 == 0x66eb463f) {\n            // Dispatch table entry for changeRootAdmin(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01dd;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            changeRootAdmin(var2);\n            stop();\n        } else if (var0 == 0x6e7c1c2b) {\n            // Dispatch table entry for getWithdrawDigest(bytes32,address,uint256,uint64)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n            var4 = msg.data[0x44:0x64];\n            var5 = msg.data[0x64:0x84] & 0xffffffffffffffff;\n            var1 = getWithdrawDigest(var2, var3, var4, var5);\n            goto label_03EE;\n        } else if (var0 == 0x70480275) {\n            // Dispatch table entry for addAdmin(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01dd;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            addAdmin(var2);\n            stop();\n        } else if (var0 == 0x71eb9710) {\n            // Dispatch table entry for getDebitDigest(bytes32,uint256,uint64)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64] & 0xffffffffffffffff;\n            var1 = getDebitDigest(var2, var3, var4);\n            goto label_03EE;\n        } else if (var0 == 0x8e739461) {\n            // Dispatch table entry for getBalance(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var1 = getBalance(var2);\n            goto label_03EE;\n        } else if (var0 == 0x9dc4ca42) { goto label_03CA; }\n            // Dispatch table entry for getWalletDigest(bytes32,address)\n        else if (var0 == 0xb214faa5) {\n            // Dispatch table entry for deposit(bytes32)\n            var1 = 0x01dd;\n            var2 = msg.data[0x04:0x24];\n            deposit(var2);\n            stop();\n        } else if (var0 == 0xb5a030d8) {\n            // Dispatch table entry for link(bytes32[],bytes32[],address[],uint8[],bytes32[],bytes32[])\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp71 = memory[0x40:0x60];\n            var temp72 = msg.data[0x04:0x24];\n            var temp73 = msg.data[temp72 + 0x04:temp72 + 0x04 + 0x20];\n            var temp74 = temp73 * 0x20;\n            memory[0x40:0x60] = temp71 + temp74 + 0x20;\n            memory[temp71:temp71 + 0x20] = temp73;\n            var1 = 0x01dd;\n            memory[temp71 + 0x20:temp71 + 0x20 + temp74] = msg.data[temp72 + 0x24:temp72 + 0x24 + temp74];\n            var temp75 = memory[0x40:0x60];\n            var temp76 = msg.data[0x24:0x44] + 0x04;\n            var temp77 = msg.data[temp76:temp76 + 0x20];\n            var temp78 = temp77 * 0x20;\n            memory[0x40:0x60] = temp78 + temp75 + 0x20;\n            memory[temp75:temp75 + 0x20] = temp77;\n            var2 = temp71;\n            memory[temp75 + 0x20:temp75 + 0x20 + temp78] = msg.data[temp76 + 0x20:temp76 + 0x20 + temp78];\n            var temp79 = memory[0x40:0x60];\n            var temp80 = msg.data[0x44:0x64] + 0x04;\n            var temp81 = msg.data[temp80:temp80 + 0x20];\n            var temp82 = temp81 * 0x20;\n            memory[0x40:0x60] = temp82 + temp79 + 0x20;\n            memory[temp79:temp79 + 0x20] = temp81;\n            var3 = temp75;\n            memory[temp79 + 0x20:temp79 + 0x20 + temp82] = msg.data[temp80 + 0x20:temp80 + 0x20 + temp82];\n            var temp83 = memory[0x40:0x60];\n            var temp84 = msg.data[0x64:0x84] + 0x04;\n            var temp85 = msg.data[temp84:temp84 + 0x20];\n            var temp86 = temp85 * 0x20;\n            memory[0x40:0x60] = temp86 + temp83 + 0x20;\n            memory[temp83:temp83 + 0x20] = temp85;\n            var4 = temp79;\n            memory[temp83 + 0x20:temp83 + 0x20 + temp86] = msg.data[temp84 + 0x20:temp84 + 0x20 + temp86];\n            var temp87 = memory[0x40:0x60];\n            var temp88 = msg.data[0x84:0xa4] + 0x04;\n            var temp89 = msg.data[temp88:temp88 + 0x20];\n            var temp90 = temp89 * 0x20;\n            memory[0x40:0x60] = temp90 + temp87 + 0x20;\n            memory[temp87:temp87 + 0x20] = temp89;\n            var5 = temp83;\n            memory[temp87 + 0x20:temp87 + 0x20 + temp90] = msg.data[temp88 + 0x20:temp88 + 0x20 + temp90];\n            var temp91 = memory[0x40:0x60];\n            var temp92 = msg.data[0xa4:0xc4] + 0x04;\n            var temp93 = msg.data[temp92:temp92 + 0x20];\n            var temp94 = temp93 * 0x20;\n            memory[0x40:0x60] = temp94 + temp91 + 0x20;\n            memory[temp91:temp91 + 0x20] = temp93;\n            var6 = temp87;\n            memory[temp91 + 0x20:temp91 + 0x20 + temp94] = msg.data[temp92 + 0x20:temp92 + 0x20 + temp94];\n            var7 = temp91;\n            link(var2, var3, var4, var5, var6, var7);\n            stop();\n        } else if (var0 == 0xbb0c08b6) {\n            // Dispatch table entry for getDebitNonce(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var1 = getDebitNonce(var2);\n            goto label_03EE;\n        } else if (var0 == 0xc56e610e) {\n            // Dispatch table entry for getEscrowBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var1 = getEscrowBalance();\n            goto label_03EE;\n        } else if (var0 == 0xde9b33f9) {\n            // Dispatch table entry for getWithdrawNonce(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var1 = getWithdrawNonce(var2);\n            goto label_03EE;\n        } else if (var0 == 0xf8dcc3e0) {\n            // Dispatch table entry for getLinkStatus(bytes32,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08a0;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n            var1 = getLinkStatus(var2, var3);\n            var temp95 = memory[0x40:0x60];\n            memory[temp95:temp95 + 0x20] = !!var1;\n            var temp96 = memory[0x40:0x60];\n            return memory[temp96:temp96 + temp95 - temp96 + 0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function settle(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (!(storage[keccak256(memory[var3:var3 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var4 = memory[arg0:arg0 + 0x20] == memory[arg1:arg1 + 0x20];\n    \n        if (!var4) {\n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_08F5:\n            var0 = storage[0x03];\n            var1 = 0x00;\n        \n            if (var1 >= memory[arg0:arg0 + 0x20]) {\n            label_09B2:\n                storage[0x03] = var0;\n                return;\n            } else {\n            label_0909:\n                var4 = arg0;\n                var var5 = var1;\n            \n                if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n            \n                var2 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                var4 = arg2;\n                var5 = var1;\n            \n                if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n            \n                var3 = memory[var4 + var5 * 0x20 + 0x20:var4 + var5 * 0x20 + 0x20 + 0x20];\n            \n                if (var3 > var0) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x01;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                var temp1 = var3;\n                storage[temp0] = temp1 + storage[temp0];\n                var0 = var0 - temp1;\n                var4 = temp1;\n                var5 = arg1;\n                var var6 = var1;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x0cd738c9c0bbe501d6da72544aaef2b26bfdcbffa10507ff2755918321897c56, stack[-5], memory[stack[-2] + stack[-1] * 0x20 + 0x20:stack[-2] + stack[-1] * 0x20 + 0x20 + 0x20], stack[-3]]);\n                var1 = var1 + 0x01;\n                var3 = var3;\n            \n                if (var1 >= memory[arg0:arg0 + 0x20]) { goto label_09B2; }\n                else { goto label_0909; }\n            }\n        } else if (memory[arg0:arg0 + 0x20] == memory[arg2:arg2 + 0x20]) { goto label_08F5; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function admins(var arg0) returns (var arg0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeAdmin(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (var3 >= storage[var3]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n    \n        if (msg.sender != storage[keccak256(memory[0x00:0x20]) + var3] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var2 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (!var2) {\n        label_0A6B:\n        \n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x00;\n            var1 = 0x01;\n        \n            if (var1 >= storage[0x00] + ~0x00) {\n            label_0B41:\n                var2 = storage[0x00];\n                var3 = 0x0b54;\n                var var4 = 0x00;\n                var var5 = var2 + ~0x00;\n                func_189B(var4, var5);\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = storage[temp0] & ~0xff;\n                return;\n            } else {\n            label_0A8D:\n                var2 = !var0;\n            \n                if (!var2) {\n                label_0AC5:\n                \n                    if (var2) {\n                        var0 = 0x01;\n                    \n                        if (!var0) { goto label_0B39; }\n                        else { goto label_0AD6; }\n                    } else if (!var0) {\n                    label_0B39:\n                        var1 = var1 + 0x01;\n                    \n                        if (var1 >= storage[0x00] + ~0x00) { goto label_0B41; }\n                        else { goto label_0A8D; }\n                    } else {\n                    label_0AD6:\n                        var2 = 0x00;\n                        var3 = var1 + 0x01;\n                    \n                        if (var3 >= storage[var2]) { assert(); }\n                    \n                        memory[0x00:0x20] = var2;\n                        var2 = storage[keccak256(memory[0x00:0x20]) + var3] & 0x02 ** 0xa0 - 0x01;\n                        var3 = 0x00;\n                        var4 = var1;\n                    \n                        if (var4 >= storage[var3]) { assert(); }\n                    \n                        memory[0x00:0x20] = var3;\n                        var temp1 = keccak256(memory[0x00:0x20]) + var4;\n                        storage[temp1] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp1] & ~(0x02 ** 0xa0 - 0x01));\n                        goto label_0B39;\n                    }\n                } else {\n                    var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n                    var3 = 0x00;\n                    var4 = var1;\n                \n                    if (var4 >= storage[var3]) { assert(); }\n                \n                    memory[0x00:0x20] = var3;\n                    var2 = storage[keccak256(memory[0x00:0x20]) + var4] & 0x02 ** 0xa0 - 0x01 == var2;\n                    goto label_0AC5;\n                }\n            }\n        } else {\n            var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x00;\n            var4 = var3;\n        \n            if (var4 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            var2 = storage[keccak256(memory[0x00:0x20]) + var4] & 0x02 ** 0xa0 - 0x01 != var2;\n            goto label_0A6B;\n        }\n    }\n    \n    function debit(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n    \n        if (!(storage[keccak256(memory[var6:var6 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var7 = memory[arg0:arg0 + 0x20] == memory[arg1:arg1 + 0x20];\n    \n        if (var7) {\n            var7 = memory[arg0:arg0 + 0x20] == memory[arg2:arg2 + 0x20];\n        \n            if (!var7) { goto label_0BC1; }\n            else { goto label_0BBB; }\n        } else if (!var7) {\n        label_0BC1:\n        \n            if (!var7) {\n            label_0BCE:\n            \n                if (!var7) {\n                label_0BDB:\n                \n                    if (!var7) { revert(memory[0x00:0x00]); }\n                \n                label_0BE6:\n                    var0 = 0x00;\n                    var1 = 0x00;\n                \n                    if (var1 >= memory[arg0:arg0 + 0x20]) {\n                    label_0D67:\n                        storage[0x03] = var0 + storage[0x03];\n                        return;\n                    } else {\n                    label_0BF9:\n                        var7 = arg0;\n                        var var8 = var1;\n                    \n                        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                    \n                        var2 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                        var7 = arg1;\n                        var8 = var1;\n                    \n                        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                    \n                        var3 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                        var7 = arg2;\n                        var8 = var1;\n                    \n                        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                    \n                        var temp0 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                        var4 = temp0;\n                        var7 = 0x0ca1;\n                        var8 = 0x0c54;\n                        var var9 = var2;\n                        var var10 = var3;\n                        var var11 = var4;\n                        var8 = getDebitDigest(var9, var10, var11);\n                        var7 = func_0C54(arg3, arg4, arg5, var1, var8);\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x01;\n                        var5 = var7;\n                        var6 = keccak256(memory[0x00:0x40]);\n                        var7 = storage[var6 + 0x02] & 0xffffffffffffffff < var4 & 0xffffffffffffffff;\n                    \n                        if (var7) {\n                            var7 = var3 <= storage[var6];\n                        \n                            if (!var7) { goto label_0CFB; }\n                            else { goto label_0CDC; }\n                        } else if (!var7) {\n                        label_0CFB:\n                        \n                            if (!var7) {\n                            label_0D5C:\n                                var6 = var6;\n                                var1 = var1 + 0x01;\n                            \n                            label_0BEF:\n                            \n                                if (var1 >= memory[arg0:arg0 + 0x20]) { goto label_0D67; }\n                                else { goto label_0BF9; }\n                            } else {\n                            label_0D01:\n                                var temp1 = var6;\n                                var temp2 = temp1 + 0x02;\n                                var temp3 = var4 & 0xffffffffffffffff;\n                                storage[temp2] = temp3 | (storage[temp2] & ~0xffffffffffffffff);\n                                var temp4 = var3;\n                                storage[temp1] = storage[temp1] - temp4;\n                                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x7268e507839e4153e67d3077766172d7413186c098053936a070dc179ad79382, stack[-5], stack[-3] & 0xffffffffffffffff, stack[-4]]);\n                                var0 = temp4 + var0;\n                                var6 = temp1;\n                                var1 = var1 + 0x01;\n                                goto label_0BEF;\n                            }\n                        } else {\n                        label_0CDC:\n                            memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = var6 + 0x01;\n                        \n                            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { goto label_0D5C; }\n                            else { goto label_0D01; }\n                        }\n                    }\n                } else {\n                label_0BD5:\n                \n                    if (memory[arg0:arg0 + 0x20] == memory[arg5:arg5 + 0x20]) { goto label_0BE6; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_0BC8:\n                var7 = memory[arg0:arg0 + 0x20] == memory[arg4:arg4 + 0x20];\n            \n                if (!var7) { goto label_0BDB; }\n                else { goto label_0BD5; }\n            }\n        } else {\n        label_0BBB:\n            var7 = memory[arg0:arg0 + 0x20] == memory[arg3:arg3 + 0x20];\n        \n            if (!var7) { goto label_0BCE; }\n            else { goto label_0BC8; }\n        }\n    }\n    \n    function func_0C54(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg3;\n    \n        if (var1 >= memory[var0:var0 + 0x20]) { assert(); }\n    \n        var0 = memory[var1 * 0x20 + var0 + 0x20:var1 * 0x20 + var0 + 0x20 + 0x20];\n        var1 = arg1;\n        var var2 = arg3;\n    \n        if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n    \n        var1 = memory[var2 * 0x20 + var1 + 0x20:var2 * 0x20 + var1 + 0x20 + 0x20];\n        var2 = arg2;\n        var var3 = arg3;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        r0 = getMessageSigner(arg4, var0, var1, var2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getMessageSigner(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        var var1 = temp0;\n        memory[0x40:0x60] = var1 + 0x40;\n        memory[var1:var1 + 0x20] = 0x1c;\n        memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        var var0 = 0x00;\n        var var2 = var0;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = memory[0x40:0x60] + 0x20;\n        var var7 = var1 + 0x20;\n        var var6 = var5;\n        var var8 = 0x1c;\n        var var9 = var8;\n        var var10 = var6;\n        var var11 = var7;\n    \n        if (var9 < 0x20) {\n        label_0DEA:\n            var temp1 = var10;\n            var temp2 = 0x0100 ** (0x20 - var9) + ~0x00;\n            memory[temp1:temp1 + 0x20] = (temp2 & memory[temp1:temp1 + 0x20]) | (memory[var11:var11 + 0x20] & ~temp2);\n            var temp3 = var6 + var8;\n            memory[temp3:temp3 + 0x20] = var4;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp3 - temp4;\n            memory[0x40:0x60] = temp3 + 0x20;\n            var3 = temp4;\n            var4 = temp3 + 0x20;\n            var5 = var4;\n            var6 = var3 + 0x20;\n            var7 = memory[var3:var3 + 0x20];\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n        \n            if (var8 < 0x20) {\n            label_0E4A:\n                var temp5 = var9;\n                var temp6 = 0x0100 ** (0x20 - var8) + ~0x00;\n                memory[temp5:temp5 + 0x20] = (temp6 & memory[temp5:temp5 + 0x20]) | (memory[var10:var10 + 0x20] & ~temp6);\n                var temp7 = memory[0x40:0x60];\n                var temp8 = keccak256(memory[temp7:temp7 + (var5 + var7) - temp7]);\n                memory[temp7:temp7 + 0x20] = 0x00;\n                var temp9 = temp7 + 0x20;\n                memory[0x40:0x60] = temp9;\n                memory[temp9:temp9 + 0x20] = temp8;\n                memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = arg1 & 0xff;\n                memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = arg2;\n                memory[temp7 + 0x80:temp7 + 0x80 + 0x20] = arg3;\n                var temp10 = memory[0x40:0x60];\n                var2 = temp8;\n                var3 = 0x01;\n                var4 = temp7 + 0xa0;\n                var temp11;\n                temp11, memory[temp10 + ~0x1f:temp10 + ~0x1f + 0x20] = address(var3).call.gas(msg.gas)(memory[temp10:temp10 + temp7 - temp10 + 0xa0]);\n                var5 = !temp11;\n            \n                if (!var5) { return memory[memory[0x40:0x60] + ~0x1f:memory[0x40:0x60] + ~0x1f + 0x20]; }\n            \n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n            label_0E34:\n                var temp13 = var10;\n                var temp14 = var9;\n                memory[temp14:temp14 + 0x20] = memory[temp13:temp13 + 0x20];\n                var8 = var8 + ~0x1f;\n                var9 = temp14 + 0x20;\n                var10 = temp13 + 0x20;\n            \n                if (var8 < 0x20) { goto label_0E4A; }\n                else { goto label_0E34; }\n            }\n        } else {\n        label_0DD4:\n            var temp15 = var11;\n            var temp16 = var10;\n            memory[temp16:temp16 + 0x20] = memory[temp15:temp15 + 0x20];\n            var9 = var9 + ~0x1f;\n            var10 = temp16 + 0x20;\n            var11 = temp15 + 0x20;\n        \n            if (var9 < 0x20) { goto label_0DEA; }\n            else { goto label_0DD4; }\n        }\n    }\n    \n    function getLinkDigest(var arg0, var arg1) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = (arg1 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x34;\n        var var1 = temp1;\n        memory[0x40:0x60] = temp0 + 0x54;\n        var var0 = 0x00;\n        var var2 = temp0 + 0x54;\n        var var3 = var2;\n        var var5 = memory[var1:var1 + 0x20];\n        var var4 = var1 + 0x20;\n        var var6 = var5;\n        var var7 = var3;\n        var var8 = var4;\n    \n        if (var6 < 0x20) {\n        label_0F4B:\n            var temp2 = var7;\n            var temp3 = 0x0100 ** (0x20 - var6) + ~0x00;\n            memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp3) | (memory[var8:var8 + 0x20] & ~temp3);\n            var temp4 = memory[0x40:0x60];\n            return keccak256(memory[temp4:temp4 + (var3 + var5) - temp4]);\n        } else {\n        label_0F35:\n            var temp5 = var8;\n            var temp6 = var7;\n            memory[temp6:temp6 + 0x20] = memory[temp5:temp5 + 0x20];\n            var6 = var6 + ~0x1f;\n            var7 = temp6 + 0x20;\n            var8 = temp5 + 0x20;\n        \n            if (var6 < 0x20) { goto label_0F4B; }\n            else { goto label_0F35; }\n        }\n    }\n    \n    function withdraw(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n    \n        if (!(storage[keccak256(memory[var6:var6 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var7 = memory[arg0:arg0 + 0x20] == memory[arg1:arg1 + 0x20];\n    \n        if (var7) {\n            var7 = memory[arg0:arg0 + 0x20] == memory[arg2:arg2 + 0x20];\n        \n            if (!var7) { goto label_0FC7; }\n            else { goto label_0FC1; }\n        } else if (!var7) {\n        label_0FC7:\n        \n            if (!var7) {\n            label_0FD4:\n            \n                if (!var7) {\n                label_0FE1:\n                \n                    if (!var7) {\n                    label_0FEE:\n                    \n                        if (!var7) { revert(memory[0x00:0x00]); }\n                    \n                    label_0FF9:\n                        var0 = 0x00;\n                    \n                        if (var0 >= memory[arg0:arg0 + 0x20]) {\n                        label_11E1:\n                            return;\n                        } else {\n                        label_1008:\n                            var7 = arg0;\n                            var var8 = var0;\n                        \n                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                        \n                            var1 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                            var7 = arg1;\n                            var8 = var0;\n                        \n                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                        \n                            var2 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                            var7 = arg2;\n                            var8 = var0;\n                        \n                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                        \n                            var3 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                            var7 = arg3;\n                            var8 = var0;\n                        \n                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                        \n                            var temp0 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                            var4 = temp0;\n                            var7 = 0x10bc;\n                            var8 = 0x107e;\n                            var var9 = var1;\n                            var var10 = var2;\n                            var var11 = var3;\n                            var var12 = var4;\n                            var8 = getWithdrawDigest(var9, var10, var11, var12);\n                            var7 = func_107E(arg4, arg5, arg6, var0, var8);\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x01;\n                            var5 = var7;\n                            var6 = keccak256(memory[0x00:0x40]);\n                            var7 = storage[var6 + 0x02] / 0x010000000000000000 & 0xffffffffffffffff < var4 & 0xffffffffffffffff;\n                        \n                            if (var7) {\n                                var7 = var3 <= storage[var6];\n                            \n                                if (!var7) { goto label_1122; }\n                                else { goto label_1103; }\n                            } else if (!var7) {\n                            label_1122:\n                            \n                                if (!var7) {\n                                label_114F:\n                                \n                                    if (!var7) {\n                                    label_11D6:\n                                        var6 = var6;\n                                        var0 = var0 + 0x01;\n                                    \n                                    label_0FFE:\n                                    \n                                        if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_11E1; }\n                                        else { goto label_1008; }\n                                    } else {\n                                    label_1155:\n                                        var temp1 = var6;\n                                        var temp2 = temp1 + 0x02;\n                                        var temp3 = var4 & 0xffffffffffffffff;\n                                        storage[temp2] = (storage[temp2] & ~0xffffffffffffffff0000000000000000) | temp3 * 0x010000000000000000;\n                                        var temp4 = var3;\n                                        storage[temp1] = storage[temp1] - temp4;\n                                        var temp5 = memory[0x40:0x60];\n                                        memory[temp5:temp5 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                                        var temp6 = memory[0x40:0x60];\n                                        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x7b840614242a6f8bab9f3a654f6ce3aa212f8a4e3f3d3a9845a91bb891394cbc, stack[-6], stack[-3] & 0xffffffffffffffff, stack[-4]]);\n                                        var0 = var0 + 0x01;\n                                        var6 = temp1;\n                                        goto label_0FFE;\n                                    }\n                                } else {\n                                label_1129:\n                                    var temp7 = memory[0x40:0x60];\n                                    var temp8 = var3;\n                                    var temp9;\n                                    temp9, memory[temp7:temp7 + 0x00] = address(var2 & 0x02 ** 0xa0 - 0x01).call.gas(!temp8 * 0x08fc).value(temp8)(memory[temp7:temp7 + 0x00]);\n                                \n                                    if (!temp9) { goto label_11D6; }\n                                    else { goto label_1155; }\n                                }\n                            } else {\n                            label_1103:\n                                memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = var6 + 0x01;\n                                var7 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                            \n                                if (!var7) { goto label_114F; }\n                                else { goto label_1129; }\n                            }\n                        }\n                    } else {\n                    label_0FE8:\n                    \n                        if (memory[arg0:arg0 + 0x20] == memory[arg6:arg6 + 0x20]) { goto label_0FF9; }\n                        else { revert(memory[0x00:0x00]); }\n                    }\n                } else {\n                label_0FDB:\n                    var7 = memory[arg0:arg0 + 0x20] == memory[arg5:arg5 + 0x20];\n                \n                    if (!var7) { goto label_0FEE; }\n                    else { goto label_0FE8; }\n                }\n            } else {\n            label_0FCE:\n                var7 = memory[arg0:arg0 + 0x20] == memory[arg4:arg4 + 0x20];\n            \n                if (!var7) { goto label_0FE1; }\n                else { goto label_0FDB; }\n            }\n        } else {\n        label_0FC1:\n            var7 = memory[arg0:arg0 + 0x20] == memory[arg3:arg3 + 0x20];\n        \n            if (!var7) { goto label_0FD4; }\n            else { goto label_0FCE; }\n        }\n    }\n    \n    function func_107E(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg3;\n    \n        if (var1 >= memory[var0:var0 + 0x20]) { assert(); }\n    \n        var0 = memory[var1 * 0x20 + var0 + 0x20:var1 * 0x20 + var0 + 0x20 + 0x20];\n        var1 = arg1;\n        var var2 = arg3;\n    \n        if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n    \n        var1 = memory[var2 * 0x20 + var1 + 0x20:var2 * 0x20 + var1 + 0x20 + 0x20];\n        var2 = arg2;\n        var var3 = arg3;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        r0 = getMessageSigner(arg4, var0, var1, var2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getNameDigest(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0;\n        var var2 = memory[0x40:0x60] + 0x20;\n        var var3 = var2;\n        var var4 = var1 + 0x20;\n        var var5 = memory[var1:var1 + 0x20];\n        var var6 = var5;\n        var var7 = var3;\n        var var8 = var4;\n    \n        if (var6 < 0x20) {\n        label_1226:\n            var temp1 = 0x0100 ** (0x20 - var6) - 0x01;\n            var temp2 = var7;\n            memory[temp2:temp2 + 0x20] = (memory[var8:var8 + 0x20] & ~temp1) | (memory[temp2:temp2 + 0x20] & temp1);\n            var temp3 = var5 + var3;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp3 - temp4 - 0x20;\n            var1 = temp4;\n            memory[0x40:0x60] = temp3;\n            var2 = memory[0x40:0x60];\n            var3 = var2;\n            var4 = var1 + 0x20;\n            var5 = memory[var1:var1 + 0x20];\n            var6 = var5;\n            var7 = var3;\n            var8 = var4;\n        \n            if (var6 < 0x20) {\n            label_1289:\n                var temp5 = var7;\n                var temp6 = 0x0100 ** (0x20 - var6) + ~0x00;\n                memory[temp5:temp5 + 0x20] = (memory[temp5:temp5 + 0x20] & temp6) | (memory[var8:var8 + 0x20] & ~temp6);\n                var temp7 = memory[0x40:0x60];\n                return keccak256(memory[temp7:temp7 + (var3 + var5) - temp7]);\n            } else {\n            label_1273:\n                var temp8 = var8;\n                var temp9 = var7;\n                memory[temp9:temp9 + 0x20] = memory[temp8:temp8 + 0x20];\n                var6 = var6 + ~0x1f;\n                var7 = temp9 + 0x20;\n                var8 = temp8 + 0x20;\n            \n                if (var6 < 0x20) { goto label_1289; }\n                else { goto label_1273; }\n            }\n        } else {\n        label_1210:\n            var temp10 = var8;\n            var temp11 = var7;\n            memory[temp11:temp11 + 0x20] = memory[temp10:temp10 + 0x20];\n            var6 = var6 + ~0x1f;\n            var7 = temp11 + 0x20;\n            var8 = temp10 + 0x20;\n        \n            if (var6 < 0x20) { goto label_1226; }\n            else { goto label_1210; }\n        }\n    }\n    \n    function changeRootAdmin(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n    \n        if (msg.sender != storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var0 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (!var0) {\n        label_133D:\n        \n            if (!var0) {\n            label_134B:\n                var0 = arg0;\n                var1 = 0x00;\n                var var2 = var1;\n            \n                if (var2 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var1;\n                var temp0 = keccak256(memory[0x00:0x20]) + var2;\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                storage[temp0] = (temp1 & var0) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                memory[0x00:0x20] = temp1 & arg0;\n                memory[0x20:0x40] = 0x02;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n                return;\n            } else {\n                var0 = 0x134b;\n                var1 = arg0;\n                removeAdmin(var1);\n                goto label_134B;\n            }\n        } else {\n            var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var1 = 0x00;\n            var2 = var1;\n        \n            if (var2 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var1;\n            var0 = storage[keccak256(memory[0x00:0x20]) + var2] & 0x02 ** 0xa0 - 0x01 != var0;\n            goto label_133D;\n        }\n    }\n    \n    function getWithdrawDigest(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = (arg1 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        memory[temp0 + 0x54:temp0 + 0x54 + 0x20] = arg2;\n        memory[temp0 + 0x74:temp0 + 0x74 + 0x20] = (arg3 & 0xffffffffffffffff) * 0x01000000000000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x5c;\n        var var1 = temp1;\n        memory[0x40:0x60] = temp0 + 0x7c;\n        var var0 = 0x00;\n        var var2 = temp0 + 0x7c;\n        var var3 = var2;\n        var var5 = memory[var1:var1 + 0x20];\n        var var4 = var1 + 0x20;\n        var var6 = var5;\n        var var7 = var3;\n        var var8 = var4;\n    \n        if (var6 < 0x20) {\n        label_1449:\n            var temp2 = var7;\n            var temp3 = 0x0100 ** (0x20 - var6) + ~0x00;\n            memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp3) | (memory[var8:var8 + 0x20] & ~temp3);\n            var temp4 = memory[0x40:0x60];\n            return keccak256(memory[temp4:temp4 + (var3 + var5) - temp4]);\n        } else {\n        label_1433:\n            var temp5 = var8;\n            var temp6 = var7;\n            memory[temp6:temp6 + 0x20] = memory[temp5:temp5 + 0x20];\n            var6 = var6 + ~0x1f;\n            var7 = temp6 + 0x20;\n            var8 = temp5 + 0x20;\n        \n            if (var6 < 0x20) { goto label_1449; }\n            else { goto label_1433; }\n        }\n    }\n    \n    function addAdmin(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n    \n        if (msg.sender != storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = (storage[temp1] & ~0xff) | 0x01;\n        var temp2 = storage[0x00];\n        storage[0x00] = temp2 + 0x01;\n        memory[0x00:0x20] = 0x00;\n        var temp3 = temp2 + 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n        storage[temp3] = temp0 | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function getDebitDigest(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = arg1;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = (arg2 & 0xffffffffffffffff) * 0x01000000000000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x48;\n        var var1 = temp1;\n        memory[0x40:0x60] = temp0 + 0x68;\n        var var0 = 0x00;\n        var var2 = temp0 + 0x68;\n        var var3 = var2;\n        var var5 = memory[var1:var1 + 0x20];\n        var var4 = var1 + 0x20;\n        var var6 = var5;\n        var var7 = var3;\n        var var8 = var4;\n    \n        if (var6 < 0x20) {\n        label_15C2:\n            var temp2 = var7;\n            var temp3 = 0x0100 ** (0x20 - var6) + ~0x00;\n            memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp3) | (memory[var8:var8 + 0x20] & ~temp3);\n            var temp4 = memory[0x40:0x60];\n            return keccak256(memory[temp4:temp4 + (var3 + var5) - temp4]);\n        } else {\n        label_15AC:\n            var temp5 = var8;\n            var temp6 = var7;\n            memory[temp6:temp6 + 0x20] = memory[temp5:temp5 + 0x20];\n            var6 = var6 + ~0x1f;\n            var7 = temp6 + 0x20;\n            var8 = temp5 + 0x20;\n        \n            if (var6 < 0x20) { goto label_15C2; }\n            else { goto label_15AC; }\n        }\n    }\n    \n    function getBalance(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function deposit(var arg0) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = msg.value;\n        storage[temp1] = temp2 + storage[temp1];\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x182fa52899142d44ff5c45a6354d3b3e868d5b07db6a65580b39bd321bdaf8ac, stack[-1], msg.sender, msg.value]);\n    }\n    \n    function link(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (!(storage[keccak256(memory[var4:var4 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var5 = memory[arg0:arg0 + 0x20] == memory[arg1:arg1 + 0x20];\n    \n        if (var5) {\n            var5 = memory[arg0:arg0 + 0x20] == memory[arg2:arg2 + 0x20];\n        \n            if (!var5) { goto label_1693; }\n            else { goto label_168D; }\n        } else if (!var5) {\n        label_1693:\n        \n            if (!var5) {\n            label_16A0:\n            \n                if (!var5) {\n                label_16AD:\n                \n                    if (!var5) { revert(memory[0x00:0x00]); }\n                \n                label_16B8:\n                    var0 = 0x00;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) {\n                    label_17FD:\n                        return;\n                    } else {\n                    label_16C7:\n                        var5 = arg0;\n                        var var6 = var0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        var1 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20];\n                        var5 = arg2;\n                        var6 = var0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        var temp0 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20];\n                        var2 = temp0;\n                        var5 = 0x1745;\n                        var6 = 0x1707;\n                        var var7 = var1;\n                        var var8 = var2;\n                        var6 = getLinkDigest(var7, var8);\n                        var5 = func_1707(arg3, arg4, arg5, var0, var6);\n                        memory[0x00:0x20] = var1;\n                        memory[0x20:0x40] = 0x01;\n                        var temp1 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = temp1 + 0x01;\n                        var3 = var5;\n                        var4 = temp1;\n                        var5 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                    \n                        if (var5) {\n                        label_179E:\n                        \n                            if (!var5) {\n                                var4 = var4;\n                                var0 = var0 + 0x01;\n                            \n                            label_16BD:\n                            \n                                if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_17FD; }\n                                else { goto label_16C7; }\n                            } else {\n                                var temp2 = var2 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x00:0x20] = temp2;\n                                memory[0x20:0x40] = var4 + 0x01;\n                                var temp3 = keccak256(memory[0x00:0x40]);\n                                storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n                                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xe96896758b540353b26660205100e2756a7e5495f07920d72859afc60e5f9136, stack[-4], stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                                var0 = var0 + 0x01;\n                                var4 = var4;\n                                goto label_16BD;\n                            }\n                        } else {\n                            var5 = 0x179b;\n                            var6 = arg1;\n                            var7 = var0;\n                        \n                            if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                        \n                            var5 = func_178B(var3, var6, var7);\n                            var5 = var1 == var5;\n                            goto label_179E;\n                        }\n                    }\n                } else {\n                label_16A7:\n                \n                    if (memory[arg0:arg0 + 0x20] == memory[arg5:arg5 + 0x20]) { goto label_16B8; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_169A:\n                var5 = memory[arg0:arg0 + 0x20] == memory[arg4:arg4 + 0x20];\n            \n                if (!var5) { goto label_16AD; }\n                else { goto label_16A7; }\n            }\n        } else {\n        label_168D:\n            var5 = memory[arg0:arg0 + 0x20] == memory[arg3:arg3 + 0x20];\n        \n            if (!var5) { goto label_16A0; }\n            else { goto label_169A; }\n        }\n    }\n    \n    function func_1707(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg3;\n    \n        if (var1 >= memory[var0:var0 + 0x20]) { assert(); }\n    \n        var0 = memory[var1 * 0x20 + var0 + 0x20:var1 * 0x20 + var0 + 0x20 + 0x20];\n        var1 = arg1;\n        var var2 = arg3;\n    \n        if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n    \n        var1 = memory[var2 * 0x20 + var1 + 0x20:var2 * 0x20 + var1 + 0x20 + 0x20];\n        var2 = arg2;\n        var var3 = arg3;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        r0 = getMessageSigner(arg4, var0, var1, var2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_178B(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = memory[arg2 * 0x20 + arg1 + 0x20:arg2 * 0x20 + arg1 + 0x20 + 0x20];\n        arg2 = arg0;\n        r0 = getLinkDigest(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getDebitNonce(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffff) + 0x01 & 0xffffffffffffffff;\n    }\n    \n    function getEscrowBalance() returns (var r0) { return storage[0x03]; }\n    \n    function getWithdrawNonce(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return (storage[keccak256(memory[0x00:0x40]) + 0x02] / 0x010000000000000000 & 0xffffffffffffffff) + 0x01 & 0xffffffffffffffff;\n    }\n    \n    function getLinkStatus(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = temp0 + 0x01;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_189B(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_18BF:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x18bf;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_18C4(var1, var2);\n            goto label_18BF;\n        }\n    }\n    \n    function func_18C4(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1836;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_18DE(arg1, var0); }\n    \n    label_18D3:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_18D3; }\n    \n        arg0 = func_18DE(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_18DE(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x03612cb5) {\n            // Dispatch table entry for settle(bytes32[],uint256[],uint256[])\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = memory[0x40:0x60];\n            var temp1 = msg.data[0x04:0x24];\n            var temp2 = msg.data[temp1 + 0x04:temp1 + 0x04 + 0x20];\n            var temp3 = temp2 * 0x20;\n            memory[0x40:0x60] = temp0 + temp3 + 0x20;\n            memory[temp0:temp0 + 0x20] = temp2;\n            var1 = 0x01dd;\n            memory[temp0 + 0x20:temp0 + 0x20 + temp3] = msg.data[temp1 + 0x24:temp1 + 0x24 + temp3];\n            var temp4 = memory[0x40:0x60];\n            var temp5 = msg.data[0x24:0x44] + 0x04;\n            var temp6 = msg.data[temp5:temp5 + 0x20];\n            var temp7 = temp6 * 0x20;\n            memory[0x40:0x60] = temp7 + temp4 + 0x20;\n            memory[temp4:temp4 + 0x20] = temp6;\n            var var2 = temp0;\n            memory[temp4 + 0x20:temp4 + 0x20 + temp7] = msg.data[temp5 + 0x20:temp5 + 0x20 + temp7];\n            var temp8 = memory[0x40:0x60];\n            var temp9 = msg.data[0x44:0x64] + 0x04;\n            var temp10 = msg.data[temp9:temp9 + 0x20];\n            var temp11 = temp10 * 0x20;\n            memory[0x40:0x60] = temp11 + temp8 + 0x20;\n            memory[temp8:temp8 + 0x20] = temp10;\n            var var3 = temp4;\n            memory[temp8 + 0x20:temp8 + 0x20 + temp11] = msg.data[temp9 + 0x20:temp9 + 0x20 + temp11];\n            var var4 = temp8;\n            settle(var2, var3, var4);\n            stop();\n        } else if (var0 == 0x14bfd6d0) {\n            // Dispatch table entry for admins(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01f7;\n            var2 = msg.data[0x04:0x24];\n            var2 = admins(var2);\n        \n        label_01F7:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x1785f53c) {\n            // Dispatch table entry for removeAdmin(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01dd;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            removeAdmin(var2);\n            stop();\n        } else if (var0 == 0x2a856fcf) {\n            // Dispatch table entry for debit(bytes32[],uint256[],uint64[],uint8[],bytes32[],bytes32[])\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp14 = memory[0x40:0x60];\n            var temp15 = msg.data[0x04:0x24];\n            var temp16 = msg.data[temp15 + 0x04:temp15 + 0x04 + 0x20];\n            var temp17 = temp16 * 0x20;\n            memory[0x40:0x60] = temp14 + temp17 + 0x20;\n            memory[temp14:temp14 + 0x20] = temp16;\n            var1 = 0x01dd;\n            memory[temp14 + 0x20:temp14 + 0x20 + temp17] = msg.data[temp15 + 0x24:temp15 + 0x24 + temp17];\n            var temp18 = memory[0x40:0x60];\n            var temp19 = msg.data[0x24:0x44] + 0x04;\n            var temp20 = msg.data[temp19:temp19 + 0x20];\n            var temp21 = temp20 * 0x20;\n            memory[0x40:0x60] = temp21 + temp18 + 0x20;\n            memory[temp18:temp18 + 0x20] = temp20;\n            var2 = temp14;\n            memory[temp18 + 0x20:temp18 + 0x20 + temp21] = msg.data[temp19 + 0x20:temp19 + 0x20 + temp21];\n            var temp22 = memory[0x40:0x60];\n            var temp23 = msg.data[0x44:0x64] + 0x04;\n            var temp24 = msg.data[temp23:temp23 + 0x20];\n            var temp25 = temp24 * 0x20;\n            memory[0x40:0x60] = temp25 + temp22 + 0x20;\n            memory[temp22:temp22 + 0x20] = temp24;\n            var3 = temp18;\n            memory[temp22 + 0x20:temp22 + 0x20 + temp25] = msg.data[temp23 + 0x20:temp23 + 0x20 + temp25];\n            var temp26 = memory[0x40:0x60];\n            var temp27 = msg.data[0x64:0x84] + 0x04;\n            var temp28 = msg.data[temp27:temp27 + 0x20];\n            var temp29 = temp28 * 0x20;\n            memory[0x40:0x60] = temp29 + temp26 + 0x20;\n            memory[temp26:temp26 + 0x20] = temp28;\n            var4 = temp22;\n            memory[temp26 + 0x20:temp26 + 0x20 + temp29] = msg.data[temp27 + 0x20:temp27 + 0x20 + temp29];\n            var temp30 = memory[0x40:0x60];\n            var temp31 = msg.data[0x84:0xa4] + 0x04;\n            var temp32 = msg.data[temp31:temp31 + 0x20];\n            var temp33 = temp32 * 0x20;\n            memory[0x40:0x60] = temp33 + temp30 + 0x20;\n            memory[temp30:temp30 + 0x20] = temp32;\n            var var5 = temp26;\n            memory[temp30 + 0x20:temp30 + 0x20 + temp33] = msg.data[temp31 + 0x20:temp31 + 0x20 + temp33];\n            var temp34 = memory[0x40:0x60];\n            var temp35 = msg.data[0xa4:0xc4] + 0x04;\n            var temp36 = msg.data[temp35:temp35 + 0x20];\n            var temp37 = temp36 * 0x20;\n            memory[0x40:0x60] = temp37 + temp34 + 0x20;\n            memory[temp34:temp34 + 0x20] = temp36;\n            var var6 = temp30;\n            memory[temp34 + 0x20:temp34 + 0x20 + temp37] = msg.data[temp35 + 0x20:temp35 + 0x20 + temp37];\n            var var7 = temp34;\n            debit(var2, var3, var4, var5, var6, var7);\n            stop();\n        } else if (var0 == 0x2bfd91d4) {\n            // Dispatch table entry for getMessageSigner(bytes32,uint8,bytes32,bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01f7;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0xff;\n            var4 = msg.data[0x44:0x64];\n            var5 = msg.data[0x64:0x84];\n            var1 = getMessageSigner(var2, var3, var4, var5);\n            goto label_01F7;\n        } else if (var0 == 0x3d44c476) {\n            // Dispatch table entry for getLinkDigest(bytes32,address)\n        label_03CA:\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n            var1 = getLinkDigest(var2, var3);\n        \n        label_03EE:\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = var1;\n            var temp39 = memory[0x40:0x60];\n            return memory[temp39:temp39 + temp38 - temp39 + 0x20];\n        } else if (var0 == 0x4eb933bf) {\n            // Dispatch table entry for withdraw(bytes32[],address[],uint256[],uint64[],uint8[],bytes32[],bytes32[])\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp40 = memory[0x40:0x60];\n            var temp41 = msg.data[0x04:0x24];\n            var temp42 = msg.data[temp41 + 0x04:temp41 + 0x04 + 0x20];\n            var temp43 = temp42 * 0x20;\n            memory[0x40:0x60] = temp40 + temp43 + 0x20;\n            memory[temp40:temp40 + 0x20] = temp42;\n            var1 = 0x01dd;\n            memory[temp40 + 0x20:temp40 + 0x20 + temp43] = msg.data[temp41 + 0x24:temp41 + 0x24 + temp43];\n            var temp44 = memory[0x40:0x60];\n            var temp45 = msg.data[0x24:0x44] + 0x04;\n            var temp46 = msg.data[temp45:temp45 + 0x20];\n            var temp47 = temp46 * 0x20;\n            memory[0x40:0x60] = temp47 + temp44 + 0x20;\n            memory[temp44:temp44 + 0x20] = temp46;\n            var2 = temp40;\n            memory[temp44 + 0x20:temp44 + 0x20 + temp47] = msg.data[temp45 + 0x20:temp45 + 0x20 + temp47];\n            var temp48 = memory[0x40:0x60];\n            var temp49 = msg.data[0x44:0x64] + 0x04;\n            var temp50 = msg.data[temp49:temp49 + 0x20];\n            var temp51 = temp50 * 0x20;\n            memory[0x40:0x60] = temp51 + temp48 + 0x20;\n            memory[temp48:temp48 + 0x20] = temp50;\n            var3 = temp44;\n            memory[temp48 + 0x20:temp48 + 0x20 + temp51] = msg.data[temp49 + 0x20:temp49 + 0x20 + temp51];\n            var temp52 = memory[0x40:0x60];\n            var temp53 = msg.data[0x64:0x84] + 0x04;\n            var temp54 = msg.data[temp53:temp53 + 0x20];\n            var temp55 = temp54 * 0x20;\n            memory[0x40:0x60] = temp55 + temp52 + 0x20;\n            memory[temp52:temp52 + 0x20] = temp54;\n            var4 = temp48;\n            memory[temp52 + 0x20:temp52 + 0x20 + temp55] = msg.data[temp53 + 0x20:temp53 + 0x20 + temp55];\n            var temp56 = memory[0x40:0x60];\n            var temp57 = msg.data[0x84:0xa4] + 0x04;\n            var temp58 = msg.data[temp57:temp57 + 0x20];\n            var temp59 = temp58 * 0x20;\n            memory[0x40:0x60] = temp59 + temp56 + 0x20;\n            memory[temp56:temp56 + 0x20] = temp58;\n            var5 = temp52;\n            memory[temp56 + 0x20:temp56 + 0x20 + temp59] = msg.data[temp57 + 0x20:temp57 + 0x20 + temp59];\n            var temp60 = memory[0x40:0x60];\n            var temp61 = msg.data[0xa4:0xc4] + 0x04;\n            var temp62 = msg.data[temp61:temp61 + 0x20];\n            var temp63 = temp62 * 0x20;\n            memory[0x40:0x60] = temp63 + temp60 + 0x20;\n            memory[temp60:temp60 + 0x20] = temp62;\n            var6 = temp56;\n            memory[temp60 + 0x20:temp60 + 0x20 + temp63] = msg.data[temp61 + 0x20:temp61 + 0x20 + temp63];\n            var temp64 = memory[0x40:0x60];\n            var temp65 = msg.data[0xc4:0xe4] + 0x04;\n            var temp66 = msg.data[temp65:temp65 + 0x20];\n            var temp67 = temp66 * 0x20;\n            memory[0x40:0x60] = temp67 + temp64 + 0x20;\n            memory[temp64:temp64 + 0x20] = temp66;\n            var7 = temp60;\n            memory[temp64 + 0x20:temp64 + 0x20 + temp67] = msg.data[temp65 + 0x20:temp65 + 0x20 + temp67];\n            var var8 = temp64;\n            withdraw(var2, var3, var4, var5, var6, var7, var8);\n            stop();\n        } else if (var0 == 0x62502fe7) {\n            // Dispatch table entry for getNameDigest(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp68 = memory[0x40:0x60];\n            var temp69 = msg.data[0x04:0x24];\n            var temp70 = msg.data[temp69 + 0x04:temp69 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp68 + (temp70 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp68:temp68 + 0x20] = temp70;\n            var1 = 0x03ee;\n            memory[temp68 + 0x20:temp68 + 0x20 + temp70] = msg.data[temp69 + 0x24:temp69 + 0x24 + temp70];\n            var2 = temp68;\n            var1 = getNameDigest(var2);\n            goto label_03EE;\n        } else if (var0 == 0x66eb463f) {\n            // Dispatch table entry for changeRootAdmin(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01dd;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            changeRootAdmin(var2);\n            stop();\n        } else if (var0 == 0x6e7c1c2b) {\n            // Dispatch table entry for getWithdrawDigest(bytes32,address,uint256,uint64)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n            var4 = msg.data[0x44:0x64];\n            var5 = msg.data[0x64:0x84] & 0xffffffffffffffff;\n            var1 = getWithdrawDigest(var2, var3, var4, var5);\n            goto label_03EE;\n        } else if (var0 == 0x70480275) {\n            // Dispatch table entry for addAdmin(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01dd;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            addAdmin(var2);\n            stop();\n        } else if (var0 == 0x71eb9710) {\n            // Dispatch table entry for getDebitDigest(bytes32,uint256,uint64)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64] & 0xffffffffffffffff;\n            var1 = getDebitDigest(var2, var3, var4);\n            goto label_03EE;\n        } else if (var0 == 0x8e739461) {\n            // Dispatch table entry for getBalance(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var1 = getBalance(var2);\n            goto label_03EE;\n        } else if (var0 == 0x9dc4ca42) { goto label_03CA; }\n            // Dispatch table entry for getWalletDigest(bytes32,address)\n        else if (var0 == 0xb214faa5) {\n            // Dispatch table entry for deposit(bytes32)\n            var1 = 0x01dd;\n            var2 = msg.data[0x04:0x24];\n            deposit(var2);\n            stop();\n        } else if (var0 == 0xb5a030d8) {\n            // Dispatch table entry for link(bytes32[],bytes32[],address[],uint8[],bytes32[],bytes32[])\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp71 = memory[0x40:0x60];\n            var temp72 = msg.data[0x04:0x24];\n            var temp73 = msg.data[temp72 + 0x04:temp72 + 0x04 + 0x20];\n            var temp74 = temp73 * 0x20;\n            memory[0x40:0x60] = temp71 + temp74 + 0x20;\n            memory[temp71:temp71 + 0x20] = temp73;\n            var1 = 0x01dd;\n            memory[temp71 + 0x20:temp71 + 0x20 + temp74] = msg.data[temp72 + 0x24:temp72 + 0x24 + temp74];\n            var temp75 = memory[0x40:0x60];\n            var temp76 = msg.data[0x24:0x44] + 0x04;\n            var temp77 = msg.data[temp76:temp76 + 0x20];\n            var temp78 = temp77 * 0x20;\n            memory[0x40:0x60] = temp78 + temp75 + 0x20;\n            memory[temp75:temp75 + 0x20] = temp77;\n            var2 = temp71;\n            memory[temp75 + 0x20:temp75 + 0x20 + temp78] = msg.data[temp76 + 0x20:temp76 + 0x20 + temp78];\n            var temp79 = memory[0x40:0x60];\n            var temp80 = msg.data[0x44:0x64] + 0x04;\n            var temp81 = msg.data[temp80:temp80 + 0x20];\n            var temp82 = temp81 * 0x20;\n            memory[0x40:0x60] = temp82 + temp79 + 0x20;\n            memory[temp79:temp79 + 0x20] = temp81;\n            var3 = temp75;\n            memory[temp79 + 0x20:temp79 + 0x20 + temp82] = msg.data[temp80 + 0x20:temp80 + 0x20 + temp82];\n            var temp83 = memory[0x40:0x60];\n            var temp84 = msg.data[0x64:0x84] + 0x04;\n            var temp85 = msg.data[temp84:temp84 + 0x20];\n            var temp86 = temp85 * 0x20;\n            memory[0x40:0x60] = temp86 + temp83 + 0x20;\n            memory[temp83:temp83 + 0x20] = temp85;\n            var4 = temp79;\n            memory[temp83 + 0x20:temp83 + 0x20 + temp86] = msg.data[temp84 + 0x20:temp84 + 0x20 + temp86];\n            var temp87 = memory[0x40:0x60];\n            var temp88 = msg.data[0x84:0xa4] + 0x04;\n            var temp89 = msg.data[temp88:temp88 + 0x20];\n            var temp90 = temp89 * 0x20;\n            memory[0x40:0x60] = temp90 + temp87 + 0x20;\n            memory[temp87:temp87 + 0x20] = temp89;\n            var5 = temp83;\n            memory[temp87 + 0x20:temp87 + 0x20 + temp90] = msg.data[temp88 + 0x20:temp88 + 0x20 + temp90];\n            var temp91 = memory[0x40:0x60];\n            var temp92 = msg.data[0xa4:0xc4] + 0x04;\n            var temp93 = msg.data[temp92:temp92 + 0x20];\n            var temp94 = temp93 * 0x20;\n            memory[0x40:0x60] = temp94 + temp91 + 0x20;\n            memory[temp91:temp91 + 0x20] = temp93;\n            var6 = temp87;\n            memory[temp91 + 0x20:temp91 + 0x20 + temp94] = msg.data[temp92 + 0x20:temp92 + 0x20 + temp94];\n            var7 = temp91;\n            link(var2, var3, var4, var5, var6, var7);\n            stop();\n        } else if (var0 == 0xbb0c08b6) {\n            // Dispatch table entry for getDebitNonce(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var1 = getDebitNonce(var2);\n            goto label_03EE;\n        } else if (var0 == 0xc56e610e) {\n            // Dispatch table entry for getEscrowBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var1 = getEscrowBalance();\n            goto label_03EE;\n        } else if (var0 == 0xde9b33f9) {\n            // Dispatch table entry for getWithdrawNonce(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ee;\n            var2 = msg.data[0x04:0x24];\n            var1 = getWithdrawNonce(var2);\n            goto label_03EE;\n        } else if (var0 == 0xf8dcc3e0) {\n            // Dispatch table entry for getLinkStatus(bytes32,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x08a0;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n            var1 = getLinkStatus(var2, var3);\n            var temp95 = memory[0x40:0x60];\n            memory[temp95:temp95 + 0x20] = !!var1;\n            var temp96 = memory[0x40:0x60];\n            return memory[temp96:temp96 + temp95 - temp96 + 0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function settle(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (!(storage[keccak256(memory[var3:var3 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var4 = memory[arg0:arg0 + 0x20] == memory[arg1:arg1 + 0x20];\n    \n        if (!var4) {\n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_08F5:\n            var0 = storage[0x03];\n            var1 = 0x00;\n        \n            if (var1 >= memory[arg0:arg0 + 0x20]) {\n            label_09B2:\n                storage[0x03] = var0;\n                return;\n            } else {\n            label_0909:\n                var4 = arg0;\n                var var5 = var1;\n            \n                if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n            \n                var2 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                var4 = arg2;\n                var5 = var1;\n            \n                if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n            \n                var3 = memory[var4 + var5 * 0x20 + 0x20:var4 + var5 * 0x20 + 0x20 + 0x20];\n            \n                if (var3 > var0) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = var2;\n                memory[0x20:0x40] = 0x01;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                var temp1 = var3;\n                storage[temp0] = temp1 + storage[temp0];\n                var0 = var0 - temp1;\n                var4 = temp1;\n                var5 = arg1;\n                var var6 = var1;\n            \n                if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n            \n                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x0cd738c9c0bbe501d6da72544aaef2b26bfdcbffa10507ff2755918321897c56, stack[-5], memory[stack[-2] + stack[-1] * 0x20 + 0x20:stack[-2] + stack[-1] * 0x20 + 0x20 + 0x20], stack[-3]]);\n                var1 = var1 + 0x01;\n                var3 = var3;\n            \n                if (var1 >= memory[arg0:arg0 + 0x20]) { goto label_09B2; }\n                else { goto label_0909; }\n            }\n        } else if (memory[arg0:arg0 + 0x20] == memory[arg2:arg2 + 0x20]) { goto label_08F5; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function admins(var arg0) returns (var arg0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeAdmin(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (var3 >= storage[var3]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n    \n        if (msg.sender != storage[keccak256(memory[0x00:0x20]) + var3] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var2 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (!var2) {\n        label_0A6B:\n        \n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x00;\n            var1 = 0x01;\n        \n            if (var1 >= storage[0x00] + ~0x00) {\n            label_0B41:\n                var2 = storage[0x00];\n                var3 = 0x0b54;\n                var var4 = 0x00;\n                var var5 = var2 + ~0x00;\n                func_189B(var4, var5);\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = storage[temp0] & ~0xff;\n                return;\n            } else {\n            label_0A8D:\n                var2 = !var0;\n            \n                if (!var2) {\n                label_0AC5:\n                \n                    if (var2) {\n                        var0 = 0x01;\n                    \n                        if (!var0) { goto label_0B39; }\n                        else { goto label_0AD6; }\n                    } else if (!var0) {\n                    label_0B39:\n                        var1 = var1 + 0x01;\n                    \n                        if (var1 >= storage[0x00] + ~0x00) { goto label_0B41; }\n                        else { goto label_0A8D; }\n                    } else {\n                    label_0AD6:\n                        var2 = 0x00;\n                        var3 = var1 + 0x01;\n                    \n                        if (var3 >= storage[var2]) { assert(); }\n                    \n                        memory[0x00:0x20] = var2;\n                        var2 = storage[keccak256(memory[0x00:0x20]) + var3] & 0x02 ** 0xa0 - 0x01;\n                        var3 = 0x00;\n                        var4 = var1;\n                    \n                        if (var4 >= storage[var3]) { assert(); }\n                    \n                        memory[0x00:0x20] = var3;\n                        var temp1 = keccak256(memory[0x00:0x20]) + var4;\n                        storage[temp1] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp1] & ~(0x02 ** 0xa0 - 0x01));\n                        goto label_0B39;\n                    }\n                } else {\n                    var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n                    var3 = 0x00;\n                    var4 = var1;\n                \n                    if (var4 >= storage[var3]) { assert(); }\n                \n                    memory[0x00:0x20] = var3;\n                    var2 = storage[keccak256(memory[0x00:0x20]) + var4] & 0x02 ** 0xa0 - 0x01 == var2;\n                    goto label_0AC5;\n                }\n            }\n        } else {\n            var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x00;\n            var4 = var3;\n        \n            if (var4 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            var2 = storage[keccak256(memory[0x00:0x20]) + var4] & 0x02 ** 0xa0 - 0x01 != var2;\n            goto label_0A6B;\n        }\n    }\n    \n    function debit(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n    \n        if (!(storage[keccak256(memory[var6:var6 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var7 = memory[arg0:arg0 + 0x20] == memory[arg1:arg1 + 0x20];\n    \n        if (var7) {\n            var7 = memory[arg0:arg0 + 0x20] == memory[arg2:arg2 + 0x20];\n        \n            if (!var7) { goto label_0BC1; }\n            else { goto label_0BBB; }\n        } else if (!var7) {\n        label_0BC1:\n        \n            if (!var7) {\n            label_0BCE:\n            \n                if (!var7) {\n                label_0BDB:\n                \n                    if (!var7) { revert(memory[0x00:0x00]); }\n                \n                label_0BE6:\n                    var0 = 0x00;\n                    var1 = 0x00;\n                \n                    if (var1 >= memory[arg0:arg0 + 0x20]) {\n                    label_0D67:\n                        storage[0x03] = var0 + storage[0x03];\n                        return;\n                    } else {\n                    label_0BF9:\n                        var7 = arg0;\n                        var var8 = var1;\n                    \n                        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                    \n                        var2 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                        var7 = arg1;\n                        var8 = var1;\n                    \n                        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                    \n                        var3 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                        var7 = arg2;\n                        var8 = var1;\n                    \n                        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                    \n                        var temp0 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                        var4 = temp0;\n                        var7 = 0x0ca1;\n                        var8 = 0x0c54;\n                        var var9 = var2;\n                        var var10 = var3;\n                        var var11 = var4;\n                        var8 = getDebitDigest(var9, var10, var11);\n                        var7 = func_0C54(arg3, arg4, arg5, var1, var8);\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x01;\n                        var5 = var7;\n                        var6 = keccak256(memory[0x00:0x40]);\n                        var7 = storage[var6 + 0x02] & 0xffffffffffffffff < var4 & 0xffffffffffffffff;\n                    \n                        if (var7) {\n                            var7 = var3 <= storage[var6];\n                        \n                            if (!var7) { goto label_0CFB; }\n                            else { goto label_0CDC; }\n                        } else if (!var7) {\n                        label_0CFB:\n                        \n                            if (!var7) {\n                            label_0D5C:\n                                var6 = var6;\n                                var1 = var1 + 0x01;\n                            \n                            label_0BEF:\n                            \n                                if (var1 >= memory[arg0:arg0 + 0x20]) { goto label_0D67; }\n                                else { goto label_0BF9; }\n                            } else {\n                            label_0D01:\n                                var temp1 = var6;\n                                var temp2 = temp1 + 0x02;\n                                var temp3 = var4 & 0xffffffffffffffff;\n                                storage[temp2] = temp3 | (storage[temp2] & ~0xffffffffffffffff);\n                                var temp4 = var3;\n                                storage[temp1] = storage[temp1] - temp4;\n                                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x7268e507839e4153e67d3077766172d7413186c098053936a070dc179ad79382, stack[-5], stack[-3] & 0xffffffffffffffff, stack[-4]]);\n                                var0 = temp4 + var0;\n                                var6 = temp1;\n                                var1 = var1 + 0x01;\n                                goto label_0BEF;\n                            }\n                        } else {\n                        label_0CDC:\n                            memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = var6 + 0x01;\n                        \n                            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { goto label_0D5C; }\n                            else { goto label_0D01; }\n                        }\n                    }\n                } else {\n                label_0BD5:\n                \n                    if (memory[arg0:arg0 + 0x20] == memory[arg5:arg5 + 0x20]) { goto label_0BE6; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_0BC8:\n                var7 = memory[arg0:arg0 + 0x20] == memory[arg4:arg4 + 0x20];\n            \n                if (!var7) { goto label_0BDB; }\n                else { goto label_0BD5; }\n            }\n        } else {\n        label_0BBB:\n            var7 = memory[arg0:arg0 + 0x20] == memory[arg3:arg3 + 0x20];\n        \n            if (!var7) { goto label_0BCE; }\n            else { goto label_0BC8; }\n        }\n    }\n    \n    function func_0C54(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg3;\n    \n        if (var1 >= memory[var0:var0 + 0x20]) { assert(); }\n    \n        var0 = memory[var1 * 0x20 + var0 + 0x20:var1 * 0x20 + var0 + 0x20 + 0x20];\n        var1 = arg1;\n        var var2 = arg3;\n    \n        if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n    \n        var1 = memory[var2 * 0x20 + var1 + 0x20:var2 * 0x20 + var1 + 0x20 + 0x20];\n        var2 = arg2;\n        var var3 = arg3;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        r0 = getMessageSigner(arg4, var0, var1, var2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getMessageSigner(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        var var1 = temp0;\n        memory[0x40:0x60] = var1 + 0x40;\n        memory[var1:var1 + 0x20] = 0x1c;\n        memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        var var0 = 0x00;\n        var var2 = var0;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = memory[0x40:0x60] + 0x20;\n        var var7 = var1 + 0x20;\n        var var6 = var5;\n        var var8 = 0x1c;\n        var var9 = var8;\n        var var10 = var6;\n        var var11 = var7;\n    \n        if (var9 < 0x20) {\n        label_0DEA:\n            var temp1 = var10;\n            var temp2 = 0x0100 ** (0x20 - var9) + ~0x00;\n            memory[temp1:temp1 + 0x20] = (temp2 & memory[temp1:temp1 + 0x20]) | (memory[var11:var11 + 0x20] & ~temp2);\n            var temp3 = var6 + var8;\n            memory[temp3:temp3 + 0x20] = var4;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp3 - temp4;\n            memory[0x40:0x60] = temp3 + 0x20;\n            var3 = temp4;\n            var4 = temp3 + 0x20;\n            var5 = var4;\n            var6 = var3 + 0x20;\n            var7 = memory[var3:var3 + 0x20];\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n        \n            if (var8 < 0x20) {\n            label_0E4A:\n                var temp5 = var9;\n                var temp6 = 0x0100 ** (0x20 - var8) + ~0x00;\n                memory[temp5:temp5 + 0x20] = (temp6 & memory[temp5:temp5 + 0x20]) | (memory[var10:var10 + 0x20] & ~temp6);\n                var temp7 = memory[0x40:0x60];\n                var temp8 = keccak256(memory[temp7:temp7 + (var5 + var7) - temp7]);\n                memory[temp7:temp7 + 0x20] = 0x00;\n                var temp9 = temp7 + 0x20;\n                memory[0x40:0x60] = temp9;\n                memory[temp9:temp9 + 0x20] = temp8;\n                memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = arg1 & 0xff;\n                memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = arg2;\n                memory[temp7 + 0x80:temp7 + 0x80 + 0x20] = arg3;\n                var temp10 = memory[0x40:0x60];\n                var2 = temp8;\n                var3 = 0x01;\n                var4 = temp7 + 0xa0;\n                var temp11;\n                temp11, memory[temp10 + ~0x1f:temp10 + ~0x1f + 0x20] = address(var3).call.gas(msg.gas)(memory[temp10:temp10 + temp7 - temp10 + 0xa0]);\n                var5 = !temp11;\n            \n                if (!var5) { return memory[memory[0x40:0x60] + ~0x1f:memory[0x40:0x60] + ~0x1f + 0x20]; }\n            \n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n            label_0E34:\n                var temp13 = var10;\n                var temp14 = var9;\n                memory[temp14:temp14 + 0x20] = memory[temp13:temp13 + 0x20];\n                var8 = var8 + ~0x1f;\n                var9 = temp14 + 0x20;\n                var10 = temp13 + 0x20;\n            \n                if (var8 < 0x20) { goto label_0E4A; }\n                else { goto label_0E34; }\n            }\n        } else {\n        label_0DD4:\n            var temp15 = var11;\n            var temp16 = var10;\n            memory[temp16:temp16 + 0x20] = memory[temp15:temp15 + 0x20];\n            var9 = var9 + ~0x1f;\n            var10 = temp16 + 0x20;\n            var11 = temp15 + 0x20;\n        \n            if (var9 < 0x20) { goto label_0DEA; }\n            else { goto label_0DD4; }\n        }\n    }\n    \n    function getLinkDigest(var arg0, var arg1) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = (arg1 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x34;\n        var var1 = temp1;\n        memory[0x40:0x60] = temp0 + 0x54;\n        var var0 = 0x00;\n        var var2 = temp0 + 0x54;\n        var var3 = var2;\n        var var5 = memory[var1:var1 + 0x20];\n        var var4 = var1 + 0x20;\n        var var6 = var5;\n        var var7 = var3;\n        var var8 = var4;\n    \n        if (var6 < 0x20) {\n        label_0F4B:\n            var temp2 = var7;\n            var temp3 = 0x0100 ** (0x20 - var6) + ~0x00;\n            memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp3) | (memory[var8:var8 + 0x20] & ~temp3);\n            var temp4 = memory[0x40:0x60];\n            return keccak256(memory[temp4:temp4 + (var3 + var5) - temp4]);\n        } else {\n        label_0F35:\n            var temp5 = var8;\n            var temp6 = var7;\n            memory[temp6:temp6 + 0x20] = memory[temp5:temp5 + 0x20];\n            var6 = var6 + ~0x1f;\n            var7 = temp6 + 0x20;\n            var8 = temp5 + 0x20;\n        \n            if (var6 < 0x20) { goto label_0F4B; }\n            else { goto label_0F35; }\n        }\n    }\n    \n    function withdraw(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n    \n        if (!(storage[keccak256(memory[var6:var6 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var7 = memory[arg0:arg0 + 0x20] == memory[arg1:arg1 + 0x20];\n    \n        if (var7) {\n            var7 = memory[arg0:arg0 + 0x20] == memory[arg2:arg2 + 0x20];\n        \n            if (!var7) { goto label_0FC7; }\n            else { goto label_0FC1; }\n        } else if (!var7) {\n        label_0FC7:\n        \n            if (!var7) {\n            label_0FD4:\n            \n                if (!var7) {\n                label_0FE1:\n                \n                    if (!var7) {\n                    label_0FEE:\n                    \n                        if (!var7) { revert(memory[0x00:0x00]); }\n                    \n                    label_0FF9:\n                        var0 = 0x00;\n                    \n                        if (var0 >= memory[arg0:arg0 + 0x20]) {\n                        label_11E1:\n                            return;\n                        } else {\n                        label_1008:\n                            var7 = arg0;\n                            var var8 = var0;\n                        \n                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                        \n                            var1 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                            var7 = arg1;\n                            var8 = var0;\n                        \n                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                        \n                            var2 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                            var7 = arg2;\n                            var8 = var0;\n                        \n                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                        \n                            var3 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                            var7 = arg3;\n                            var8 = var0;\n                        \n                            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n                        \n                            var temp0 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n                            var4 = temp0;\n                            var7 = 0x10bc;\n                            var8 = 0x107e;\n                            var var9 = var1;\n                            var var10 = var2;\n                            var var11 = var3;\n                            var var12 = var4;\n                            var8 = getWithdrawDigest(var9, var10, var11, var12);\n                            var7 = func_107E(arg4, arg5, arg6, var0, var8);\n                            memory[0x00:0x20] = var1;\n                            memory[0x20:0x40] = 0x01;\n                            var5 = var7;\n                            var6 = keccak256(memory[0x00:0x40]);\n                            var7 = storage[var6 + 0x02] / 0x010000000000000000 & 0xffffffffffffffff < var4 & 0xffffffffffffffff;\n                        \n                            if (var7) {\n                                var7 = var3 <= storage[var6];\n                            \n                                if (!var7) { goto label_1122; }\n                                else { goto label_1103; }\n                            } else if (!var7) {\n                            label_1122:\n                            \n                                if (!var7) {\n                                label_114F:\n                                \n                                    if (!var7) {\n                                    label_11D6:\n                                        var6 = var6;\n                                        var0 = var0 + 0x01;\n                                    \n                                    label_0FFE:\n                                    \n                                        if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_11E1; }\n                                        else { goto label_1008; }\n                                    } else {\n                                    label_1155:\n                                        var temp1 = var6;\n                                        var temp2 = temp1 + 0x02;\n                                        var temp3 = var4 & 0xffffffffffffffff;\n                                        storage[temp2] = (storage[temp2] & ~0xffffffffffffffff0000000000000000) | temp3 * 0x010000000000000000;\n                                        var temp4 = var3;\n                                        storage[temp1] = storage[temp1] - temp4;\n                                        var temp5 = memory[0x40:0x60];\n                                        memory[temp5:temp5 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                                        var temp6 = memory[0x40:0x60];\n                                        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x7b840614242a6f8bab9f3a654f6ce3aa212f8a4e3f3d3a9845a91bb891394cbc, stack[-6], stack[-3] & 0xffffffffffffffff, stack[-4]]);\n                                        var0 = var0 + 0x01;\n                                        var6 = temp1;\n                                        goto label_0FFE;\n                                    }\n                                } else {\n                                label_1129:\n                                    var temp7 = memory[0x40:0x60];\n                                    var temp8 = var3;\n                                    var temp9;\n                                    temp9, memory[temp7:temp7 + 0x00] = address(var2 & 0x02 ** 0xa0 - 0x01).call.gas(!temp8 * 0x08fc).value(temp8)(memory[temp7:temp7 + 0x00]);\n                                \n                                    if (!temp9) { goto label_11D6; }\n                                    else { goto label_1155; }\n                                }\n                            } else {\n                            label_1103:\n                                memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = var6 + 0x01;\n                                var7 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                            \n                                if (!var7) { goto label_114F; }\n                                else { goto label_1129; }\n                            }\n                        }\n                    } else {\n                    label_0FE8:\n                    \n                        if (memory[arg0:arg0 + 0x20] == memory[arg6:arg6 + 0x20]) { goto label_0FF9; }\n                        else { revert(memory[0x00:0x00]); }\n                    }\n                } else {\n                label_0FDB:\n                    var7 = memory[arg0:arg0 + 0x20] == memory[arg5:arg5 + 0x20];\n                \n                    if (!var7) { goto label_0FEE; }\n                    else { goto label_0FE8; }\n                }\n            } else {\n            label_0FCE:\n                var7 = memory[arg0:arg0 + 0x20] == memory[arg4:arg4 + 0x20];\n            \n                if (!var7) { goto label_0FE1; }\n                else { goto label_0FDB; }\n            }\n        } else {\n        label_0FC1:\n            var7 = memory[arg0:arg0 + 0x20] == memory[arg3:arg3 + 0x20];\n        \n            if (!var7) { goto label_0FD4; }\n            else { goto label_0FCE; }\n        }\n    }\n    \n    function func_107E(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg3;\n    \n        if (var1 >= memory[var0:var0 + 0x20]) { assert(); }\n    \n        var0 = memory[var1 * 0x20 + var0 + 0x20:var1 * 0x20 + var0 + 0x20 + 0x20];\n        var1 = arg1;\n        var var2 = arg3;\n    \n        if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n    \n        var1 = memory[var2 * 0x20 + var1 + 0x20:var2 * 0x20 + var1 + 0x20 + 0x20];\n        var2 = arg2;\n        var var3 = arg3;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        r0 = getMessageSigner(arg4, var0, var1, var2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getNameDigest(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0;\n        var var2 = memory[0x40:0x60] + 0x20;\n        var var3 = var2;\n        var var4 = var1 + 0x20;\n        var var5 = memory[var1:var1 + 0x20];\n        var var6 = var5;\n        var var7 = var3;\n        var var8 = var4;\n    \n        if (var6 < 0x20) {\n        label_1226:\n            var temp1 = 0x0100 ** (0x20 - var6) - 0x01;\n            var temp2 = var7;\n            memory[temp2:temp2 + 0x20] = (memory[var8:var8 + 0x20] & ~temp1) | (memory[temp2:temp2 + 0x20] & temp1);\n            var temp3 = var5 + var3;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp3 - temp4 - 0x20;\n            var1 = temp4;\n            memory[0x40:0x60] = temp3;\n            var2 = memory[0x40:0x60];\n            var3 = var2;\n            var4 = var1 + 0x20;\n            var5 = memory[var1:var1 + 0x20];\n            var6 = var5;\n            var7 = var3;\n            var8 = var4;\n        \n            if (var6 < 0x20) {\n            label_1289:\n                var temp5 = var7;\n                var temp6 = 0x0100 ** (0x20 - var6) + ~0x00;\n                memory[temp5:temp5 + 0x20] = (memory[temp5:temp5 + 0x20] & temp6) | (memory[var8:var8 + 0x20] & ~temp6);\n                var temp7 = memory[0x40:0x60];\n                return keccak256(memory[temp7:temp7 + (var3 + var5) - temp7]);\n            } else {\n            label_1273:\n                var temp8 = var8;\n                var temp9 = var7;\n                memory[temp9:temp9 + 0x20] = memory[temp8:temp8 + 0x20];\n                var6 = var6 + ~0x1f;\n                var7 = temp9 + 0x20;\n                var8 = temp8 + 0x20;\n            \n                if (var6 < 0x20) { goto label_1289; }\n                else { goto label_1273; }\n            }\n        } else {\n        label_1210:\n            var temp10 = var8;\n            var temp11 = var7;\n            memory[temp11:temp11 + 0x20] = memory[temp10:temp10 + 0x20];\n            var6 = var6 + ~0x1f;\n            var7 = temp11 + 0x20;\n            var8 = temp10 + 0x20;\n        \n            if (var6 < 0x20) { goto label_1226; }\n            else { goto label_1210; }\n        }\n    }\n    \n    function changeRootAdmin(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n    \n        if (msg.sender != storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var0 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (!var0) {\n        label_133D:\n        \n            if (!var0) {\n            label_134B:\n                var0 = arg0;\n                var1 = 0x00;\n                var var2 = var1;\n            \n                if (var2 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var1;\n                var temp0 = keccak256(memory[0x00:0x20]) + var2;\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                storage[temp0] = (temp1 & var0) | (storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                memory[0x00:0x20] = temp1 & arg0;\n                memory[0x20:0x40] = 0x02;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n                return;\n            } else {\n                var0 = 0x134b;\n                var1 = arg0;\n                removeAdmin(var1);\n                goto label_134B;\n            }\n        } else {\n            var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var1 = 0x00;\n            var2 = var1;\n        \n            if (var2 >= storage[var2]) { assert(); }\n        \n            memory[0x00:0x20] = var1;\n            var0 = storage[keccak256(memory[0x00:0x20]) + var2] & 0x02 ** 0xa0 - 0x01 != var0;\n            goto label_133D;\n        }\n    }\n    \n    function getWithdrawDigest(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = (arg1 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        memory[temp0 + 0x54:temp0 + 0x54 + 0x20] = arg2;\n        memory[temp0 + 0x74:temp0 + 0x74 + 0x20] = (arg3 & 0xffffffffffffffff) * 0x01000000000000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x5c;\n        var var1 = temp1;\n        memory[0x40:0x60] = temp0 + 0x7c;\n        var var0 = 0x00;\n        var var2 = temp0 + 0x7c;\n        var var3 = var2;\n        var var5 = memory[var1:var1 + 0x20];\n        var var4 = var1 + 0x20;\n        var var6 = var5;\n        var var7 = var3;\n        var var8 = var4;\n    \n        if (var6 < 0x20) {\n        label_1449:\n            var temp2 = var7;\n            var temp3 = 0x0100 ** (0x20 - var6) + ~0x00;\n            memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp3) | (memory[var8:var8 + 0x20] & ~temp3);\n            var temp4 = memory[0x40:0x60];\n            return keccak256(memory[temp4:temp4 + (var3 + var5) - temp4]);\n        } else {\n        label_1433:\n            var temp5 = var8;\n            var temp6 = var7;\n            memory[temp6:temp6 + 0x20] = memory[temp5:temp5 + 0x20];\n            var6 = var6 + ~0x1f;\n            var7 = temp6 + 0x20;\n            var8 = temp5 + 0x20;\n        \n            if (var6 < 0x20) { goto label_1449; }\n            else { goto label_1433; }\n        }\n    }\n    \n    function addAdmin(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n    \n        if (msg.sender != storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = (storage[temp1] & ~0xff) | 0x01;\n        var temp2 = storage[0x00];\n        storage[0x00] = temp2 + 0x01;\n        memory[0x00:0x20] = 0x00;\n        var temp3 = temp2 + 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\n        storage[temp3] = temp0 | (storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function getDebitDigest(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = arg1;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = (arg2 & 0xffffffffffffffff) * 0x01000000000000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x48;\n        var var1 = temp1;\n        memory[0x40:0x60] = temp0 + 0x68;\n        var var0 = 0x00;\n        var var2 = temp0 + 0x68;\n        var var3 = var2;\n        var var5 = memory[var1:var1 + 0x20];\n        var var4 = var1 + 0x20;\n        var var6 = var5;\n        var var7 = var3;\n        var var8 = var4;\n    \n        if (var6 < 0x20) {\n        label_15C2:\n            var temp2 = var7;\n            var temp3 = 0x0100 ** (0x20 - var6) + ~0x00;\n            memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp3) | (memory[var8:var8 + 0x20] & ~temp3);\n            var temp4 = memory[0x40:0x60];\n            return keccak256(memory[temp4:temp4 + (var3 + var5) - temp4]);\n        } else {\n        label_15AC:\n            var temp5 = var8;\n            var temp6 = var7;\n            memory[temp6:temp6 + 0x20] = memory[temp5:temp5 + 0x20];\n            var6 = var6 + ~0x1f;\n            var7 = temp6 + 0x20;\n            var8 = temp5 + 0x20;\n        \n            if (var6 < 0x20) { goto label_15C2; }\n            else { goto label_15AC; }\n        }\n    }\n    \n    function getBalance(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function deposit(var arg0) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = msg.value;\n        storage[temp1] = temp2 + storage[temp1];\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x182fa52899142d44ff5c45a6354d3b3e868d5b07db6a65580b39bd321bdaf8ac, stack[-1], msg.sender, msg.value]);\n    }\n    \n    function link(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (!(storage[keccak256(memory[var4:var4 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var5 = memory[arg0:arg0 + 0x20] == memory[arg1:arg1 + 0x20];\n    \n        if (var5) {\n            var5 = memory[arg0:arg0 + 0x20] == memory[arg2:arg2 + 0x20];\n        \n            if (!var5) { goto label_1693; }\n            else { goto label_168D; }\n        } else if (!var5) {\n        label_1693:\n        \n            if (!var5) {\n            label_16A0:\n            \n                if (!var5) {\n                label_16AD:\n                \n                    if (!var5) { revert(memory[0x00:0x00]); }\n                \n                label_16B8:\n                    var0 = 0x00;\n                \n                    if (var0 >= memory[arg0:arg0 + 0x20]) {\n                    label_17FD:\n                        return;\n                    } else {\n                    label_16C7:\n                        var5 = arg0;\n                        var var6 = var0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        var1 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20];\n                        var5 = arg2;\n                        var6 = var0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        var temp0 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20];\n                        var2 = temp0;\n                        var5 = 0x1745;\n                        var6 = 0x1707;\n                        var var7 = var1;\n                        var var8 = var2;\n                        var6 = getLinkDigest(var7, var8);\n                        var5 = func_1707(arg3, arg4, arg5, var0, var6);\n                        memory[0x00:0x20] = var1;\n                        memory[0x20:0x40] = 0x01;\n                        var temp1 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = var5 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = temp1 + 0x01;\n                        var3 = var5;\n                        var4 = temp1;\n                        var5 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                    \n                        if (var5) {\n                        label_179E:\n                        \n                            if (!var5) {\n                                var4 = var4;\n                                var0 = var0 + 0x01;\n                            \n                            label_16BD:\n                            \n                                if (var0 >= memory[arg0:arg0 + 0x20]) { goto label_17FD; }\n                                else { goto label_16C7; }\n                            } else {\n                                var temp2 = var2 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x00:0x20] = temp2;\n                                memory[0x20:0x40] = var4 + 0x01;\n                                var temp3 = keccak256(memory[0x00:0x40]);\n                                storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n                                log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xe96896758b540353b26660205100e2756a7e5495f07920d72859afc60e5f9136, stack[-4], stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                                var0 = var0 + 0x01;\n                                var4 = var4;\n                                goto label_16BD;\n                            }\n                        } else {\n                            var5 = 0x179b;\n                            var6 = arg1;\n                            var7 = var0;\n                        \n                            if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                        \n                            var5 = func_178B(var3, var6, var7);\n                            var5 = var1 == var5;\n                            goto label_179E;\n                        }\n                    }\n                } else {\n                label_16A7:\n                \n                    if (memory[arg0:arg0 + 0x20] == memory[arg5:arg5 + 0x20]) { goto label_16B8; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_169A:\n                var5 = memory[arg0:arg0 + 0x20] == memory[arg4:arg4 + 0x20];\n            \n                if (!var5) { goto label_16AD; }\n                else { goto label_16A7; }\n            }\n        } else {\n        label_168D:\n            var5 = memory[arg0:arg0 + 0x20] == memory[arg3:arg3 + 0x20];\n        \n            if (!var5) { goto label_16A0; }\n            else { goto label_169A; }\n        }\n    }\n    \n    function func_1707(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = arg0;\n        var var1 = arg3;\n    \n        if (var1 >= memory[var0:var0 + 0x20]) { assert(); }\n    \n        var0 = memory[var1 * 0x20 + var0 + 0x20:var1 * 0x20 + var0 + 0x20 + 0x20];\n        var1 = arg1;\n        var var2 = arg3;\n    \n        if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n    \n        var1 = memory[var2 * 0x20 + var1 + 0x20:var2 * 0x20 + var1 + 0x20 + 0x20];\n        var2 = arg2;\n        var var3 = arg3;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        r0 = getMessageSigner(arg4, var0, var1, var2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_178B(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = memory[arg2 * 0x20 + arg1 + 0x20:arg2 * 0x20 + arg1 + 0x20 + 0x20];\n        arg2 = arg0;\n        r0 = getLinkDigest(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getDebitNonce(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return (storage[keccak256(memory[0x00:0x40]) + 0x02] & 0xffffffffffffffff) + 0x01 & 0xffffffffffffffff;\n    }\n    \n    function getEscrowBalance() returns (var r0) { return storage[0x03]; }\n    \n    function getWithdrawNonce(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        return (storage[keccak256(memory[0x00:0x40]) + 0x02] / 0x010000000000000000 & 0xffffffffffffffff) + 0x01 & 0xffffffffffffffff;\n    }\n    \n    function getLinkStatus(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = temp0 + 0x01;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_189B(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_18BF:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x18bf;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_18C4(var1, var2);\n            goto label_18BF;\n        }\n    }\n    \n    function func_18C4(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1836;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_18DE(arg1, var0); }\n    \n    label_18D3:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_18D3; }\n    \n        arg0 = func_18DE(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_18DE(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 56.96432542800903,
	"usage": {
		"completion_tokens": 784,
		"prompt_tokens": 19633,
		"total_tokens": 20417
	}
}