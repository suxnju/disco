{
	"address": "0xd48b633045af65ff636f3c6edd744748351e020d",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_02DE:\n            var var0 = 0x00;\n        \n            if (!(storage[0x15] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.sender;\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x09;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n                var var1 = 0x0363;\n                var var2 = 0x00;\n                var var3 = 0x14;\n                var temp0 = memory[0x40:0x60];\n                var var4 = temp0;\n                memory[0x40:0x60] = var4 + 0x40;\n                memory[var4:var4 + 0x20] = 0x03;\n                memory[var4 + 0x20:var4 + 0x20 + 0x20] = 0x3078300000000000000000000000000000000000000000000000000000000000;\n                var1 = buyAndSetDivPercentage(var2, var3, var4);\n                stop();\n            } else {\n                var1 = 0x031b;\n                var2 = msg.value;\n                var3 = 0x00;\n                var1 = func_0BCB(var2, var3);\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividendsOf(var2);\n            \n            label_0389:\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var1;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + temp1 - temp2 + 0x20];\n            } else if (var0 == 0x03d499ef) {\n                // Dispatch table entry for totalEthereumICOReceived()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var1 = totalEthereumICOReceived();\n                goto label_0389;\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c5;\n                var2 = name();\n            \n            label_03C5:\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x20;\n                var temp4 = var2;\n                memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = memory[temp4:temp4 + 0x20];\n                var3 = temp3;\n                var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var6 = temp4 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_03FF:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_03F0:\n                    var temp10 = var11;\n                    memory[temp10 + var9:temp10 + var9 + 0x20] = memory[temp10 + var10:temp10 + var10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_03FF; }\n                    else { goto label_03F0; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x045e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_045E:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = !!var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + temp11 - temp12 + 0x20];\n            } else if (var0 == 0x0c3c450e) {\n                // Dispatch table entry for icoHashedPass()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = icoHashedPass();\n                goto label_0389;\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x00;\n                memory[var3:var3 + 0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0a;\n                var4 = var3;\n                var5 = var4;\n                var6 = var5;\n                var7 = 0x14d5;\n                var8 = 0x64;\n                var9 = 0x0cf2;\n                var10 = var2;\n                var11 = storage[keccak256(memory[var6:var6 + 0x40])] & 0xff;\n                var9 = func_2740(var10, var11);\n                var7 = func_0CF2(var8, var9);\n                var temp13 = var7;\n                var4 = temp13;\n                var7 = 0x14e7;\n                var8 = var2;\n                var9 = var4;\n                var7 = func_272E(var8, var9);\n                var temp14 = var7;\n                var5 = temp14;\n                var7 = 0x14f2;\n                var8 = var5;\n                var7 = ethereumToTokens_(var8);\n                var1 = var7;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n            label_049F:\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var1 = totalSupply();\n                goto label_0389;\n            } else if (var0 == 0x19fb361f) {\n                // Dispatch table entry for transferTo(address,address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var temp15 = memory[0x40:0x60];\n                var temp16 = msg.data[0x64:0x84];\n                var temp17 = msg.data[temp16 + 0x04:temp16 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp15 + (temp17 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp15:temp15 + 0x20] = temp17;\n                var1 = 0x0523;\n                var temp18 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp18 & msg.data[0x04:0x24];\n                var3 = temp18 & msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64];\n                memory[temp15 + 0x20:temp15 + 0x20 + temp17] = msg.data[temp16 + 0x24:temp16 + 0x24 + temp17];\n                var5 = temp15;\n                transferTo(var2, var3, var4, var5);\n                stop();\n            } else if (var0 == 0x1b1686b6) {\n                // Dispatch table entry for currentEthInvested()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = currentEthInvested();\n                goto label_0389;\n            } else if (var0 == 0x214dda84) {\n                // Dispatch table entry for regularPhase()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x045e;\n                var2 = regularPhase();\n                goto label_045E;\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                goto label_0389;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x045e;\n                var temp19 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp19 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp19;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_045E;\n            } else if (var0 == 0x269a7c3f) {\n                // Dispatch table entry for buyAndTransfer(address,address)\n                var1 = 0x0523;\n                var temp20 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp20 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp20;\n                buyAndTransfer(var2, var3);\n                stop();\n            } else if (var0 == 0x27dffba6) {\n                // Dispatch table entry for startRegularPhase()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                startRegularPhase();\n                stop();\n            } else if (var0 == 0x2a9121c7) {\n                // Dispatch table entry for ethereumToTokens_(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24];\n                var1 = ethereumToTokens_(var2);\n                goto label_0389;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ed;\n                var2 = decimals();\n            \n            label_05ED:\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var2 & 0xff;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + temp21 - temp22 + 0x20];\n            } else if (var0 == 0x3c7d6f30) {\n                // Dispatch table entry for publicStartRegularPhase()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                publicStartRegularPhase();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var1 = sellPrice();\n                goto label_0389;\n            } else if (var0 == 0x4c146f38) {\n                // Dispatch table entry for getFrontEndTokenBalanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = getFrontEndTokenBalanceOf(var2);\n                goto label_0389;\n            } else if (var0 == 0x51392041) {\n                // Dispatch table entry for getDividendTokenBalanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = getDividendTokenBalanceOf(var2);\n                goto label_0389;\n            } else if (var0 == 0x51cff8d9) {\n                // Dispatch table entry for withdraw(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = stakingRequirement();\n                goto label_0389;\n            } else if (var0 == 0x5c658165) {\n                // Dispatch table entry for allowed(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var temp23 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp23 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp23;\n                var2 = allowed(var2, var3);\n                goto label_0389;\n            } else if (var0 == 0x5ccb5460) {\n                // Dispatch table entry for ethInvestedDuringICO()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = ethInvestedDuringICO();\n                goto label_0389;\n            } else if (var0 == 0x6135e084) {\n                // Dispatch table entry for myDividendTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var1 = myDividendTokens();\n                goto label_0389;\n            } else if (var0 == 0x627aa6d2) {\n                // Dispatch table entry for buyAndTransfer(address,address,bytes,uint8)\n                var temp24 = memory[0x40:0x60];\n                var temp25 = msg.data[0x44:0x64];\n                var temp26 = msg.data[temp25 + 0x04:temp25 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp24 + (temp26 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp24:temp24 + 0x20] = temp26;\n                var1 = 0x0523;\n                var temp27 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp27 & msg.data[0x04:0x24];\n                var3 = temp27 & msg.data[0x24:0x44];\n                memory[temp24 + 0x20:temp24 + 0x20 + temp26] = msg.data[temp25 + 0x24:temp25 + 0x24 + temp26];\n                var4 = temp24;\n                var5 = msg.data[0x64:0x84] & 0xff;\n                buyAndTransfer(var2, var3, var4, var5);\n                stop();\n            } else if (var0 == 0x677342ce) {\n                // Dispatch table entry for sqrt(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24];\n                var1 = sqrt(var2);\n                goto label_0389;\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                goto label_0389;\n            } else if (var0 == 0x68955fb1) {\n                // Dispatch table entry for icoPhase()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x045e;\n                var2 = icoPhase();\n                goto label_045E;\n            } else if (var0 == 0x6a3a2119) {\n                // Dispatch table entry for injectEther()\n                var1 = 0x0523;\n                injectEther();\n                stop();\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var1 = totalEthereumBalance();\n                goto label_0389;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_0389;\n            } else if (var0 == 0x724fcd4c) {\n                // Dispatch table entry for buyAndSetDivPercentage(address,uint8,string)\n                var temp28 = memory[0x40:0x60];\n                var temp29 = msg.data[0x44:0x64];\n                var temp30 = msg.data[temp29 + 0x04:temp29 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp28 + (temp30 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp28:temp28 + 0x20] = temp30;\n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44] & 0xff;\n                memory[temp28 + 0x20:temp28 + 0x20 + temp30] = msg.data[temp29 + 0x24:temp29 + 0x24 + temp30];\n                var4 = temp28;\n                var1 = buyAndSetDivPercentage(var2, var3, var4);\n                goto label_0389;\n            } else if (var0 == 0x76be1585) {\n                // Dispatch table entry for administrators(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x045e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = administrators(var2);\n                goto label_045E;\n            } else if (var0 == 0x7b89eef2) {\n                // Dispatch table entry for getMyAverageDividendRate()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var1 = getMyAverageDividendRate();\n                goto label_0389;\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x87c95058) {\n                // Dispatch table entry for setAdministrator(address,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03c5;\n                var2 = symbol();\n                goto label_03C5;\n            } else if (var0 == 0x96242f41) { goto label_049F; }\n                // Dispatch table entry for getFrontEndTokenSupply()\n            else if (var0 == 0x965447d9) {\n                // Dispatch table entry for toPowerOfTwoThirds(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24];\n                var1 = toPowerOfTwoThirds(var2);\n                goto label_0389;\n            } else if (var0 == 0xa3a06c54) {\n                // Dispatch table entry for endICOPhase()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                endICOPhase();\n                stop();\n            } else if (var0 == 0xa6d87f7d) {\n                // Dispatch table entry for myReferralDividends()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var1 = myReferralDividends();\n                goto label_0389;\n            } else if (var0 == 0xa78bcf6e) {\n                // Dispatch table entry for changeBankroll(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeBankroll(var2);\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x045e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_045E;\n            } else if (var0 == 0xb1f253f6) {\n                // Dispatch table entry for theDividendsOf(bool,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1 = theDividendsOf(var2, var3);\n                goto label_0389;\n            } else if (var0 == 0xb607068c) {\n                // Dispatch table entry for getMyDividendRate()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ed;\n                var1 = getMyDividendRate();\n                goto label_05ED;\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = memory[0x40:0x60];\n                var temp32 = msg.data[0x04:0x24];\n                var temp33 = msg.data[temp32 + 0x04:temp32 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp31 + (temp33 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp31:temp31 + 0x20] = temp33;\n                var1 = 0x0523;\n                memory[temp31 + 0x20:temp31 + 0x20 + temp33] = msg.data[temp32 + 0x24:temp32 + 0x24 + temp33];\n                var2 = temp31;\n                var3 = msg.sender;\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = 0x14;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp34 = var2;\n                var4 = 0x16d9;\n                var5 = 0x02;\n                var7 = memory[temp34:temp34 + 0x20];\n                var6 = temp34 + 0x20;\n            \n            label_2BDE:\n                var temp35 = var5;\n                var temp36 = storage[temp35];\n                memory[0x00:0x20] = temp35;\n                var8 = keccak256(memory[0x00:0x20]);\n                var9 = var6;\n                var6 = var8 + ((!(temp36 & 0x01) * 0x0100 - 0x01 & temp36) / 0x02 + 0x1f) / 0x20;\n            \n                if (0x1f < var7) {\n                    var temp37 = var7;\n                    storage[var5] = temp37 + temp37 + 0x01;\n                \n                    if (!temp37) {\n                    label_2C4C:\n                        var temp38 = var6;\n                        var6 = 0x1bc6;\n                        var7 = 0x1383;\n                        var temp39 = var8;\n                        var9 = temp39;\n                        var8 = temp38;\n                    \n                        if (var8 <= var9) {\n                            var7 = func_1BC6(var8, var9);\n                            var6 = func_1383(var7);\n                            var4 = func_1BC6(var5, var6);\n                            // Error: Could not resolve method call return address!\n                        } else {\n                        label_2C61:\n                            var temp40 = var9;\n                            storage[temp40] = 0x00;\n                            var9 = temp40 + 0x01;\n                        \n                            if (var8 > var9) { goto label_2C61; }\n                        \n                            var7 = func_1BC6(var8, var9);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp41 = var7;\n                        var temp42 = var9;\n                        var7 = temp42;\n                        var9 = var7 + temp41;\n                    \n                        if (var9 <= var7) { goto label_2C4C; }\n                    \n                    label_2C3A:\n                        var temp43 = var7;\n                        var temp44 = var8;\n                        storage[temp44] = memory[temp43:temp43 + 0x20];\n                        var7 = temp43 + 0x20;\n                        var8 = temp44 + 0x01;\n                        var9 = var9;\n                    \n                        if (var9 <= var7) { goto label_2C4C; }\n                        else { goto label_2C3A; }\n                    }\n                } else {\n                    var temp45 = var7;\n                    storage[var5] = temp45 + temp45 | (memory[var9:var9 + 0x20] & ~0xff);\n                    goto label_2C4C;\n                }\n            } else if (var0 == 0xbcaa218e) {\n                // Dispatch table entry for myFrontEndTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var1 = myFrontEndTokens();\n                goto label_0389;\n            } else if (var0 == 0xbf3b397b) {\n                // Dispatch table entry for tokensToEthereum_(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24];\n                var1 = tokensToEthereum_(var2);\n                goto label_0389;\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var temp46 = memory[0x40:0x60];\n                var temp47 = msg.data[0x04:0x24];\n                var temp48 = msg.data[temp47 + 0x04:temp47 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp46 + (temp48 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp46:temp46 + 0x20] = temp48;\n                var1 = 0x0523;\n                memory[temp46 + 0x20:temp46 + 0x20 + temp48] = msg.data[temp47 + 0x24:temp47 + 0x24 + temp48];\n                var2 = temp46;\n                var3 = msg.sender;\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = 0x14;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp49 = var2;\n                var4 = 0x16d9;\n                var5 = 0x01;\n                var6 = temp49 + 0x20;\n                var7 = memory[temp49:temp49 + 0x20];\n                goto label_2BDE;\n            } else if (var0 == 0xc4dbf622) {\n                // Dispatch table entry for buyPrice(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24];\n                var1 = buyPrice(var2);\n                goto label_0389;\n            } else if (var0 == 0xccb53365) {\n                // Dispatch table entry for startICOPhase()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                startICOPhase();\n                stop();\n            } else if (var0 == 0xd161b56a) {\n                // Dispatch table entry for tokensMintedDuringICO()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = tokensMintedDuringICO();\n                goto label_0389;\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = buy(var2);\n                goto label_0389;\n            } else if (var0 == 0xf2f8569f) {\n                // Dispatch table entry for buyAndTransfer(address,address,bytes)\n                var temp50 = memory[0x40:0x60];\n                var temp51 = msg.data[0x44:0x64];\n                var temp52 = msg.data[temp51 + 0x04:temp51 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp50 + (temp52 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp50:temp50 + 0x20] = temp52;\n                var1 = 0x0523;\n                var temp53 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp53 & msg.data[0x04:0x24];\n                var3 = temp53 & msg.data[0x24:0x44];\n                memory[temp50 + 0x20:temp50 + 0x20 + temp52] = msg.data[temp51 + 0x24:temp51 + 0x24 + temp52];\n                var4 = temp50;\n                buyAndTransfer(var2, var3, var4);\n                stop();\n            } else if (var0 == 0xf42c56c2) {\n                // Dispatch table entry for cbrt(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24];\n                var1 = cbrt(var2);\n                goto label_0389;\n            } else if (var0 == 0xf8ead7cf) {\n                // Dispatch table entry for getUserAverageDividendRate(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = getUserAverageDividendRate(var2);\n                goto label_0389;\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0523;\n                reinvest();\n                stop();\n            } else if (var0 == 0xfdc89f73) {\n                // Dispatch table entry for toPowerOfThreeHalves(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24];\n                var1 = toPowerOfThreeHalves(var2);\n                goto label_0389;\n            } else if (var0 == 0xffcb1edb) {\n                // Dispatch table entry for getDividendTokenSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var1 = getDividendTokenSupply();\n                goto label_0389;\n            } else { goto label_02DE; }\n        }\n    }\n    \n    function func_0BCB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var11 = var10;\n        var var12 = arg0 >= 0x5af3107a4000;\n    \n        if (var12) {\n            if (var12) {\n            label_0C8F:\n                var8 = arg0;\n            \n                if (!(storage[0x15] / 0x0100 & 0xff)) {\n                label_0CC8:\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0a;\n                    var10 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                    var12 = 0x0cfe;\n                    var var13 = 0x64;\n                    var var14 = 0x0cf2;\n                    var var15 = var8;\n                    var var16 = var10;\n                    var14 = func_2740(var15, var16);\n                    var12 = func_0CF2(var13, var14);\n                    var temp0 = var12;\n                    var5 = temp0;\n                    var12 = 0x0d10;\n                    var13 = var8;\n                    var14 = var5;\n                    var12 = func_272E(var13, var14);\n                    var8 = var12;\n                    var12 = storage[0x15] & 0xff;\n                \n                    if (!var12) {\n                        if (!var12) {\n                        label_0D39:\n                            var12 = 0x0d42;\n                            var13 = var8;\n                            var12 = ethereumToTokens_(var13);\n                        \n                        label_0D42:\n                            var temp1 = var12;\n                            var6 = temp1;\n                            var12 = 0x0d54;\n                            var13 = var6;\n                            var14 = var10;\n                            var12 = func_2740(var13, var14);\n                            var7 = var12;\n                            var12 = 0x0d6a;\n                            var13 = storage[0x11];\n                            var14 = var6;\n                            var12 = func_276B(var13, var14);\n                            storage[0x11] = var12;\n                            var13 = storage[0x12];\n                            var12 = 0x0d80;\n                            var14 = var7;\n                            var12 = func_276B(var13, var14);\n                            storage[0x12] = var12;\n                            storage[0x10] = var8 + storage[0x10];\n                        \n                            if (!(storage[0x15] & 0xff)) {\n                                var12 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                            \n                                if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                                    var12 = msg.sender != arg1 & 0x02 ** 0xa0 - 0x01;\n                                \n                                    if (!var12) { goto label_0EAF; }\n                                    else { goto label_0E91; }\n                                } else if (!var12) {\n                                label_0EAF:\n                                \n                                    if (!var12) {\n                                    label_0F25:\n                                        var12 = 0x0f35;\n                                        var13 = var5;\n                                        var14 = var2;\n                                        var12 = func_272E(var13, var14);\n                                        var temp2 = var12;\n                                        var12 = storage[0x12];\n                                        var3 = temp2;\n                                        var9 = var3 * 0x010000000000000000;\n                                        var13 = var9;\n                                    \n                                        if (!var12) { assert(); }\n                                    \n                                        var temp3 = var9;\n                                        var9 = temp3 - (temp3 - var7 * (var13 / var12));\n                                        var12 = 0x0f90;\n                                        var13 = 0x0f81;\n                                        var14 = storage[0x12];\n                                        var15 = 0x0cf2;\n                                        var16 = var3;\n                                        var var17 = 0x010000000000000000;\n                                        var15 = func_2740(var16, var17);\n                                        var13 = func_0CF2(var14, var15);\n                                        var12 = func_0F81(var13);\n                                        var temp4 = var12;\n                                        storage[0x13] = temp4;\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x0c;\n                                        var temp5 = keccak256(memory[0x00:0x40]);\n                                        storage[temp5] = storage[temp5] + (var7 * temp4 - var9);\n                                    \n                                    label_0FB2:\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x05;\n                                        var12 = 0x0fd2;\n                                        var13 = storage[keccak256(memory[0x00:0x40])];\n                                        var14 = var6;\n                                        var12 = func_276B(var13, var14);\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x05;\n                                        storage[keccak256(memory[0x00:0x40])] = var12;\n                                        memory[0x20:0x40] = 0x06;\n                                        var13 = storage[keccak256(memory[0x00:0x40])];\n                                        var12 = 0x0ffe;\n                                        var14 = var7;\n                                        var12 = func_276B(var13, var14);\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x06;\n                                        storage[keccak256(memory[0x00:0x40])] = var12;\n                                    \n                                        if (!var1) {\n                                        label_109A:\n                                        \n                                            if (!(storage[0x15] / 0x0100 & 0xff)) {\n                                            label_112B:\n                                                var temp6 = memory[0x40:0x60];\n                                                var temp7 = var1;\n                                                memory[temp6:temp6 + 0x20] = temp7;\n                                                var temp8 = var2;\n                                                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp8;\n                                                var temp9 = var3;\n                                                memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = temp9;\n                                                var temp10 = var4;\n                                                memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = temp10;\n                                                var temp11 = var8;\n                                                memory[temp6 + 0x80:temp6 + 0x80 + 0x20] = temp11;\n                                                var temp12 = memory[0x40:0x60];\n                                                log(memory[temp12:temp12 + temp6 - temp12 + 0xa0], [0x7dcbb47dfce2f719d7e1984fd3345bbf7923b236005b64931d95b9205100de82]);\n                                                var11 = (temp11 + temp10 + temp9 + temp8 + temp7) - arg0;\n                                            \n                                                if (!var11) { return var0; }\n                                                else { assert(); }\n                                            } else {\n                                                var temp13 = memory[0x40:0x60];\n                                                memory[temp13:temp13 + 0x20] = 0xf2c7d33100000000000000000000000000000000000000000000000000000000;\n                                                memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = var10;\n                                                var12 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n                                                var13 = 0xf2c7d331;\n                                                var14 = var4;\n                                                var15 = temp13 + 0x24;\n                                                var16 = 0x00;\n                                                var17 = memory[0x40:0x60];\n                                                var var18 = temp13 - var17 + 0x24;\n                                                var var19 = var17;\n                                                var var20 = var14;\n                                                var var21 = var12;\n                                                var var22 = !address(var21).code.length;\n                                            \n                                                if (var22) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp14;\n                                                temp14, memory[var17:var17 + var16] = address(var21).call.gas(msg.gas).value(var20)(memory[var19:var19 + var18]);\n                                                var16 = !temp14;\n                                            \n                                                if (!var16) { goto label_112B; }\n                                            \n                                                var temp15 = returndata.length;\n                                                memory[0x00:0x00 + temp15] = returndata[0x00:0x00 + temp15];\n                                                revert(memory[0x00:0x00 + returndata.length]);\n                                            }\n                                        } else {\n                                            var12 = storage[0x03] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                            var13 = 0x79fc4687;\n                                            var14 = var1;\n                                            var temp16 = memory[0x40:0x60];\n                                            memory[temp16:temp16 + 0x20] = (var13 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                                            var15 = temp16 + 0x04;\n                                            var16 = 0x00;\n                                            var17 = memory[0x40:0x60];\n                                            var18 = var15 - var17;\n                                            var19 = var17;\n                                            var20 = var14;\n                                            var21 = var12;\n                                            var22 = !address(var21).code.length;\n                                        \n                                            if (var22) { revert(memory[0x00:0x00]); }\n                                        \n                                            var temp17;\n                                            temp17, memory[var17:var17 + var16] = address(var21).call.gas(msg.gas).value(var20)(memory[var19:var19 + var18]);\n                                            var16 = !temp17;\n                                        \n                                            if (!var16) { goto label_109A; }\n                                        \n                                            var temp18 = returndata.length;\n                                            memory[0x00:0x00 + temp18] = returndata[0x00:0x00 + temp18];\n                                            revert(memory[0x00:0x00 + returndata.length]);\n                                        }\n                                    } else {\n                                    label_0EB5:\n                                        var12 = 0x0eca;\n                                        var13 = 0x64;\n                                        var14 = 0x0cf2;\n                                        var15 = var5;\n                                        var16 = 0x19;\n                                        var14 = func_2740(var15, var16);\n                                        var12 = func_0CF2(var13, var14);\n                                        var temp19 = arg1 & 0x02 ** 0xa0 - 0x01;\n                                        memory[0x00:0x20] = temp19;\n                                        memory[0x20:0x40] = 0x0b;\n                                        var temp20 = keccak256(memory[0x00:0x40]);\n                                        var temp21 = var12;\n                                        storage[temp20] = temp21 + storage[temp20];\n                                        var temp22 = memory[0x40:0x60];\n                                        memory[temp22:temp22 + 0x20] = temp19;\n                                        memory[temp22 + 0x20:temp22 + 0x20 + 0x20] = temp21;\n                                        var temp23 = memory[0x40:0x60];\n                                        var2 = temp21;\n                                        log(memory[temp23:temp23 + temp22 - temp23 + 0x40], [0x5db31c63b6c985d138b0b2896458c45ecf94b259da29b7623bdef92b5853d0cd]);\n                                        goto label_0F25;\n                                    }\n                                } else {\n                                label_0E91:\n                                    memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x05;\n                                \n                                    if (storage[keccak256(memory[0x00:0x40])] < storage[0x00]) { goto label_0F25; }\n                                    else { goto label_0EB5; }\n                                }\n                            } else {\n                                var1 = var5;\n                                var5 = var1;\n                            \n                                if (msg.sender != storage[0x03] & 0x02 ** 0xa0 - 0x01) {\n                                    var temp24 = var8 + storage[0x0f];\n                                    storage[0x0f] = temp24;\n                                    storage[0x0e] = var6 + storage[0x0e];\n                                    var2 = 0x00;\n                                    var3 = var2;\n                                \n                                    if (0x0d8d726b7177a80000 < temp24) { revert(memory[0x00:0x00]); }\n                                \n                                label_0DE1:\n                                    var12 = msg.sender == tx.origin;\n                                \n                                    if (var12) {\n                                        if (!var12) { revert(memory[0x00:0x00]); }\n                                    \n                                    label_0E04:\n                                        memory[0x00:0x20] = msg.sender;\n                                        memory[0x20:0x40] = 0x0d;\n                                        var temp25 = keccak256(memory[0x00:0x40]);\n                                        var temp26 = var8 + storage[temp25];\n                                        storage[temp25] = temp26;\n                                        var12 = 0x0de0b6b3a7640000 >= temp26;\n                                    \n                                        if (var12) {\n                                            if (!var12) { revert(memory[0x00:0x00]); }\n                                        \n                                        label_0E46:\n                                        \n                                            if (storage[0x0f] != 0x0d8d726b7177a80000) { goto label_0FB2; }\n                                        \n                                            storage[0x15] = storage[0x15] & ~0xff;\n                                            goto label_0FB2;\n                                        } else if (msg.sender == storage[0x03] & 0x02 ** 0xa0 - 0x01) { goto label_0E46; }\n                                        else { revert(memory[0x00:0x00]); }\n                                    } else if (msg.sender == storage[0x03] & 0x02 ** 0xa0 - 0x01) { goto label_0E04; }\n                                    else { revert(memory[0x00:0x00]); }\n                                } else {\n                                    var1 = 0x00;\n                                    var temp27 = var8 + storage[0x0f];\n                                    storage[0x0f] = temp27;\n                                    storage[0x0e] = var6 + storage[0x0e];\n                                    var2 = 0x00;\n                                    var3 = var2;\n                                \n                                    if (0x0d8d726b7177a80000 >= temp27) { goto label_0DE1; }\n                                    else { revert(memory[0x00:0x00]); }\n                                }\n                            }\n                        } else {\n                        label_0D35:\n                            var temp28 = var5 + var8;\n                            var8 = temp28;\n                            var11 = var11;\n                            var12 = 0x0d42;\n                            var13 = var8;\n                            var12 = ethereumToTokens_(var13);\n                            goto label_0D42;\n                        }\n                    } else if (msg.sender != storage[0x03] & 0x02 ** 0xa0 - 0x01) { goto label_0D39; }\n                    else { goto label_0D35; }\n                } else {\n                    var12 = 0x0cb3;\n                    var13 = arg0;\n                    var14 = 0x64;\n                    var12 = func_2717(var13, var14);\n                    var temp29 = var12;\n                    var4 = temp29;\n                    var12 = 0x0cc5;\n                    var13 = var8;\n                    var14 = var4;\n                    var12 = func_272E(var13, var14);\n                    var8 = var12;\n                    goto label_0CC8;\n                }\n            } else {\n            label_0C03:\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                memory[temp30 + 0x04:temp30 + 0x04 + 0x20] = 0x20;\n                memory[temp30 + 0x24:temp30 + 0x24 + 0x20] = 0x2f;\n                memory[temp30 + 0x44:temp30 + 0x44 + 0x20] = 0x547269656420746f206275792062656c6f7720746865206d696e206574682062;\n                memory[temp30 + 0x64:temp30 + 0x64 + 0x20] = 0x7579696e207468726573686f6c642e0000000000000000000000000000000000;\n                var temp31 = memory[0x40:0x60];\n                revert(memory[temp31:temp31 + temp30 - temp31 + 0x84]);\n            }\n        } else if (msg.sender == storage[0x03] & 0x02 ** 0xa0 - 0x01) { goto label_0C8F; }\n        else { goto label_0C03; }\n    }\n    \n    function func_0CF2(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_2717(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0F81(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x13];\n        var var0 = temp0;\n        r0 = func_276B(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function buyAndSetDivPercentage(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = storage[0x15] & 0xff;\n    \n        if (var3) {\n            if (!var3) { revert(memory[0x00:0x00]); }\n        \n        label_11C9:\n        \n            if (!(storage[0x15] & 0xff)) {\n            label_12A4:\n                memory[0x00:0x20] = arg1 & 0xff;\n                memory[0x20:0x40] = 0x08;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp0 = msg.sender;\n                memory[0x00:0x20] = temp0;\n                memory[0x20:0x40] = 0x09;\n                var temp1 = keccak256(memory[0x00:0x40]);\n                var temp2 = ~0xff;\n                storage[temp1] = (temp2 & storage[temp1]) | 0x01;\n                memory[0x20:0x40] = 0x0a;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                var temp4 = arg1 & 0xff;\n                storage[temp3] = temp4 | (temp2 & storage[temp3]);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = temp0;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp4;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + temp5 - temp6 + 0x40], [0xc95fc9f67beb97905ada724494d1acfcaa30a3c96b432a0eac1824899f9f97c2]);\n                var3 = 0x133a;\n                var var4 = msg.value;\n                var var5 = arg0;\n                var3 = func_0BCB(var4, var5);\n                return var0;\n            } else {\n                var temp7 = arg2;\n                var3 = temp7;\n                var4 = memory[0x40:0x60];\n                var5 = var4;\n                var var7 = memory[var3:var3 + 0x20];\n                var var6 = var3 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n            \n                if (var8 < 0x20) {\n                label_1204:\n                    var temp8 = var9;\n                    var temp9 = 0x0100 ** (0x20 - var8) + ~0x00;\n                    memory[temp8:temp8 + 0x20] = (memory[temp8:temp8 + 0x20] & temp9) | (memory[var10:var10 + 0x20] & ~temp9);\n                    var temp10 = memory[0x40:0x60];\n                    var1 = keccak256(memory[temp10:temp10 + (var5 + var7) - temp10]);\n                    var3 = var1 == 0x5ddcde33b94b19bdef79dd9ea75be591942b9ec78286d64b44a356280fb6a262;\n                \n                    if (var3) {\n                        if (!var3) { revert(memory[0x00:0x00]); }\n                    \n                    label_1277:\n                        var2 = tx.gasprice;\n                        var3 = var2 <= 0x0ba43b7400;\n                    \n                        if (var2 <= 0x0ba43b7400) {\n                            if (var3) { goto label_12A4; }\n                            else { revert(memory[0x00:0x00]); }\n                        } else if (storage[0x0f] <= 0x0d8d726b7177a80000) { goto label_12A4; }\n                        else { revert(memory[0x00:0x00]); }\n                    } else if (msg.sender == storage[0x03] & 0x02 ** 0xa0 - 0x01) { goto label_1277; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                label_11EE:\n                    var temp11 = var10;\n                    var temp12 = var9;\n                    memory[temp12:temp12 + 0x20] = memory[temp11:temp11 + 0x20];\n                    var8 = var8 + ~0x1f;\n                    var9 = temp12 + 0x20;\n                    var10 = temp11 + 0x20;\n                \n                    if (var8 < 0x20) { goto label_1204; }\n                    else { goto label_11EE; }\n                }\n            }\n        } else if (storage[0x15] / 0x0100 & 0xff) { goto label_11C9; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x13] - temp0 / 0x010000000000000000;\n    }\n    \n    function totalEthereumICOReceived() returns (var r0) { return storage[0x0f]; }\n    \n    function func_1383(var arg0) returns (var r0) { return arg0; }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_140B:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_1402; }\n        \n        label_13EE:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_13EE; }\n        \n        label_1402:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_140B;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_140B;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = temp1;\n        var temp3 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function icoHashedPass() returns (var r0) { return 0x5ddcde33b94b19bdef79dd9ea75be591942b9ec78286d64b44a356280fb6a262; }\n    \n    function totalSupply() returns (var r0) { return storage[0x11]; }\n    \n    function transferTo(var arg0, var arg1, var arg2, var arg3) {\n        if (msg.sender == arg0 & 0x02 ** 0xa0 - 0x01) {\n            var var0 = arg2 >= 0x02540be400;\n        \n            if (var0) {\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x05;\n            \n                if (arg2 <= storage[keccak256(memory[0x00:0x40])]) { goto label_15B5; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0) {\n            label_15B5:\n                var0 = 0x15c1;\n                var var1 = arg0;\n                var var2 = arg1;\n                var var3 = arg2;\n                var var4 = arg3;\n                func_277A(var1, var2, var3, var4);\n                return;\n            } else { revert(memory[0x00:0x00]); }\n        } else {\n            var0 = arg2 >= 0x02540be400;\n        \n            if (var0) {\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x05;\n                var0 = arg2 <= storage[keccak256(memory[0x00:0x40])];\n            \n                if (!var0) { goto label_156D; }\n                else { goto label_1545; }\n            } else if (!var0) {\n            label_156D:\n            \n                if (!var0) { revert(memory[0x00:0x00]); }\n            \n            label_1578:\n                goto label_15B5;\n            } else {\n            label_1545:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp0;\n            \n                if (arg2 <= storage[keccak256(memory[0x00:0x40])]) { goto label_1578; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        }\n    }\n    \n    function currentEthInvested() returns (var r0) { return storage[0x10]; }\n    \n    function regularPhase() returns (var r0) { return storage[0x15] / 0x0100 & 0xff; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n    \n        if (arg0 > storage[0x11]) { revert(memory[0x00:0x00]); }\n    \n        var var5 = 0x15fd;\n        var var6 = arg0;\n        var5 = tokensToEthereum_(var6);\n        var1 = var5;\n        var5 = 0x1608;\n        var6 = msg.sender;\n        var5 = getUserAverageDividendRate(var6);\n        var temp0 = var5;\n        var2 = temp0;\n        var5 = 0x162a;\n        var6 = 0x010000000000000000;\n        var var7 = 0x0cf2;\n        var var8 = 0x64;\n        var var9 = var7;\n        var var10 = var1;\n        var var11 = var2;\n        var9 = func_2740(var10, var11);\n        var7 = func_0CF2(var8, var9);\n        var5 = func_0CF2(var6, var7);\n        var temp1 = var5;\n        var3 = temp1;\n        var5 = 0x163c;\n        var6 = var1;\n        var7 = var3;\n        return func_272E(var6, var7);\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = 0x60;\n        var var3 = arg2 < 0x02540be400;\n    \n        if (arg2 < 0x02540be400) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x05;\n            var3 = arg2 <= storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var3) { goto label_16A7; }\n            else { goto label_167F; }\n        } else if (!var3) {\n        label_16A7:\n        \n            if (!var3) { revert(memory[0x00:0x00]); }\n        \n        label_16B2:\n            var3 = 0x16be;\n            var var4 = arg0;\n            var var5 = arg1;\n            var var6 = arg2;\n            var var7 = var2;\n            func_277A(var4, var5, var6, var7);\n            return 0x01;\n        } else {\n        label_167F:\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp0;\n        \n            if (arg2 <= storage[keccak256(memory[0x00:0x40])]) { goto label_16B2; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function buyAndTransfer(var arg0, var arg1) {\n        var var0 = 0x60;\n        var var1 = 0x16d9;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = var0;\n        var var5 = 0x14;\n        buyAndTransfer(var2, var3, var4, var5);\n    }\n    \n    function startRegularPhase() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x14;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x15] = (storage[0x15] & ~0xffff) | 0x0100;\n    }\n    \n    function ethereumToTokens_(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = var7;\n        var var9 = var8;\n    \n        if (arg0 <= 0x5af3107a4000) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x28;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x547269656420746f2062757920746f6b656e73207769746820746f6f206c6974;\n            memory[temp3 + 0x64:temp3 + 0x64 + 0x20] = 0x746c65206574682e000000000000000000000000000000000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x84]);\n        } else if (!(storage[0x15] & 0xff)) {\n            var1 = 0x00;\n            var2 = var1;\n        \n            if (storage[0x10] < storage[0x0f]) {\n                var var10 = storage[0x10] < storage[0x0f];\n            \n                if (!var10) {\n                    if (!var10) {\n                    label_1826:\n                        var10 = storage[0x10] < storage[0x0f];\n                    \n                        if (!var10) {\n                            if (!var10) { revert(memory[0x00:0x00]); }\n                        \n                        label_1844:\n                            var var11 = storage[0x0f];\n                            var var12 = storage[0x10];\n                            var10 = 0x1858;\n                            var10 = func_272E(var11, var12);\n                            var temp0 = var10;\n                            var1 = temp0;\n                            var10 = 0x186a;\n                            var11 = arg0;\n                            var12 = var1;\n                            var10 = func_272E(var11, var12);\n                            var2 = var10;\n                        \n                        label_1876:\n                        \n                            if (arg0 != var2 + var1) { assert(); }\n                        \n                            var3 = 0x00;\n                            var4 = var3;\n                        \n                            if (!var1) {\n                            label_18B4:\n                            \n                                if (!var2) {\n                                label_195C:\n                                    var9 = var4 + var3;\n                                \n                                    if (var9 > 0x00) { return var9; }\n                                    else { assert(); }\n                                } else {\n                                    var10 = var1;\n                                    var11 = 0x18f5;\n                                    var12 = 0x03;\n                                    var var13 = 0x0cf2;\n                                    var var14 = 0x02;\n                                    var var15 = 0x18e9;\n                                    var var16 = 0x18e4;\n                                    var var17 = storage[0x11];\n                                    var var18 = 0x0f4240 * 0x258f;\n                                    var16 = func_2717(var17, var18);\n                                    var15 = func_18E4(var16);\n                                    var13 = func_18E9(var14, var15);\n                                    var11 = func_0CF2(var12, var13);\n                                    var temp1 = var11 + var10;\n                                    var5 = temp1;\n                                    var6 = var5 + var2;\n                                    var10 = 0x1921;\n                                    var11 = 0x258f;\n                                    var12 = 0x18e9;\n                                    var13 = 0x191c;\n                                    var14 = 0x02;\n                                    var15 = 0x0cf2;\n                                    var16 = var5;\n                                    var17 = 0x03;\n                                    var15 = func_2740(var16, var17);\n                                    var13 = func_0CF2(var14, var15);\n                                    var12 = func_191C(var13);\n                                    var10 = func_18E9(var11, var12);\n                                    var7 = var10;\n                                    var10 = 0x1942;\n                                    var11 = 0x258f;\n                                    var12 = 0x18e9;\n                                    var13 = 0x191c;\n                                    var14 = 0x02;\n                                    var15 = 0x0cf2;\n                                    var16 = var6;\n                                    var17 = 0x03;\n                                    var15 = func_2740(var16, var17);\n                                    var13 = func_0CF2(var14, var15);\n                                    var12 = func_191C(var13);\n                                    var10 = func_18E9(var11, var12);\n                                    var temp2 = var10;\n                                    var8 = temp2;\n                                    var10 = 0x1954;\n                                    var11 = var8;\n                                    var12 = var7;\n                                    var10 = func_272E(var11, var12);\n                                    var4 = var10 * 0x0f4240;\n                                    goto label_195C;\n                                }\n                            } else {\n                                var10 = 0x18b1;\n                                var11 = 0x0251e66909d000;\n                                var12 = 0x0cf2;\n                                var13 = var1;\n                                var14 = 0x0de0b6b3a7640000;\n                                var12 = func_2740(var13, var14);\n                                var10 = func_0CF2(var11, var12);\n                                var3 = var10;\n                                goto label_18B4;\n                            }\n                        } else if (storage[0x10] + arg0 <= storage[0x0f]) { revert(memory[0x00:0x00]); }\n                        else { goto label_1844; }\n                    } else {\n                    label_181F:\n                        var1 = arg0;\n                        goto label_1876;\n                    }\n                } else if (storage[0x10] + arg0 > storage[0x0f]) { goto label_1826; }\n                else { goto label_181F; }\n            } else {\n                var2 = arg0;\n                goto label_1876;\n            }\n        } else {\n            var10 = 0x17d5;\n            var11 = arg0;\n            var12 = 0x0251e66909d000;\n            var10 = func_2717(var11, var12);\n            return var10 * 0x0de0b6b3a7640000;\n        }\n    }\n    \n    function func_18E4(var arg0) returns (var r0) {\n        r0 = toPowerOfThreeHalves(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_18E9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_2740(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_191C(var arg0) returns (var r0) {\n        r0 = toPowerOfTwoThirds(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function publicStartRegularPhase() {\n        var var0 = block.timestamp > storage[0x16] + 0x127500;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_19A3:\n            storage[0x15] = (storage[0x15] & ~0xffff) | 0x0100;\n            return;\n        } else if (storage[0x16]) { goto label_19A3; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = storage[0x15] & 0xff;\n    \n        if (var4) {\n            if (!var4) {\n            label_19E5:\n                var4 = 0x19f5;\n                var var5 = 0x038d7ea4c68000;\n                var4 = ethereumToTokens_(var5);\n            \n            label_19F5:\n                var temp0 = var4;\n                var2 = temp0;\n                var4 = var2;\n                var5 = 0x314dc6448d9338c15b0a00000000;\n            \n                if (!var4) { assert(); }\n            \n                var1 = var5 / var4;\n            \n            label_1A14:\n                var4 = 0x1a4f;\n                var5 = 0x1a42;\n                var var6 = 0x010000000000000000;\n                var var7 = 0x0cf2;\n                var var8 = 0x64;\n                var var9 = 0x0cf2;\n                var var10 = 0x1a35;\n                var var11 = msg.sender;\n                var10 = getUserAverageDividendRate(var11);\n                var9 = func_1A35(var1, var10);\n                var7 = func_0CF2(var8, var9);\n                var5 = func_0CF2(var6, var7);\n                return func_1A42(var1, var5);\n            } else {\n            label_19D7:\n                var1 = 0x0251e66909d000;\n                goto label_1A14;\n            }\n        } else if (storage[0x10] >= storage[0x0f]) { goto label_19E5; }\n        else { goto label_19D7; }\n    }\n    \n    function func_1A35(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_2740(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1A42(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_272E(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getFrontEndTokenBalanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x05;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function getDividendTokenBalanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function withdraw(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x1a9c;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x15] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x1ac9;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = var0 & temp0;\n        memory[0x20:0x40] = 0x0c;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2;\n        storage[temp1] = temp2 * 0x010000000000000000 + storage[temp1];\n        memory[0x20:0x40] = 0x0b;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var1 = temp2 + temp4;\n    \n        if (arg0 & temp0) {\n            var temp5 = memory[0x40:0x60];\n            var temp6 = var1;\n            var temp7;\n            temp7, memory[temp5:temp5 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp5:temp5 + 0x00]);\n            var2 = !temp7;\n        \n            if (!var2) {\n            label_1B49:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var1;\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_1B40:\n                var temp10 = returndata.length;\n                memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            arg0 = msg.sender;\n            var temp11 = memory[0x40:0x60];\n            var temp12 = var1;\n            var temp13;\n            temp13, memory[temp11:temp11 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp12 * 0x08fc).value(temp12)(memory[temp11:temp11 + 0x00]);\n            var2 = !temp13;\n        \n            if (!var2) { goto label_1B49; }\n            else { goto label_1B40; }\n        }\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x00]; }\n    \n    function allowed(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function ethInvestedDuringICO() returns (var r0) { return storage[0x0f]; }\n    \n    function myDividendTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x1bc3;\n        var var3 = var1;\n        var2 = getDividendTokenBalanceOf(var3);\n        var0 = var2;\n        r0 = func_1BC6(var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1BC6(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function buyAndTransfer(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (!(storage[0x15] / 0x0100 ** 0x01 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x09;\n        var0 = msg.sender;\n        var1 = temp0;\n        var var3 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (!var3) {\n            if (!var3) {\n            label_1C30:\n                var3 = 0x1c70;\n                var var4 = arg0;\n                var var5 = arg3;\n                var temp1 = memory[0x40:0x60];\n                var var6 = temp1;\n                memory[0x40:0x60] = var6 + 0x40;\n                memory[var6:var6 + 0x20] = 0x03;\n                memory[var6 + 0x20:var6 + 0x20 + 0x20] = 0x3078300000000000000000000000000000000000000000000000000000000000;\n                var3 = buyAndSetDivPercentage(var4, var5, var6);\n            \n            label_1C72:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x05;\n                var4 = storage[keccak256(memory[0x00:0x40])];\n                var3 = 0x1c8c;\n                var5 = var1;\n                var3 = func_272E(var4, var5);\n                var temp2 = var3;\n                var2 = temp2;\n                var3 = 0x1c9a;\n                var4 = msg.sender;\n                var5 = arg1;\n                var6 = var2;\n                var var7 = arg2;\n                transferTo(var4, var5, var6, var7);\n                return;\n            } else {\n            label_1C21:\n                var3 = 0x1c2a;\n                var4 = msg.value;\n                var5 = arg0;\n                var3 = func_0BCB(var4, var5);\n                goto label_1C72;\n            }\n        } else if (arg3 & 0xff) { goto label_1C30; }\n        else { goto label_1C21; }\n    }\n    \n    function sqrt(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_1CD8:\n            return var0;\n        } else {\n        label_1CB5:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_1CD8; }\n            else { goto label_1CB5; }\n        }\n    }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0b;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x1d16;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            var2 = var3 + var2;\n        \n        label_1D18:\n            return var2;\n        } else {\n            var2 = 0x1cef;\n            var3 = var1;\n            var2 = dividendsOf(var3);\n            goto label_1D18;\n        }\n    }\n    \n    function icoPhase() returns (var r0) { return storage[0x15] & 0xff; }\n    \n    function injectEther() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x14;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1d59;\n        var var2 = arg0;\n        return getFrontEndTokenBalanceOf(var2);\n    }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x14;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getMyAverageDividendRate() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1d7f;\n        var var2 = msg.sender;\n        return getUserAverageDividendRate(var2);\n    }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x14;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 < 0x056bc75e2d63100000) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = arg0;\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x14;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x14;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = !!arg1 | (storage[temp0] & ~0xff);\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_140B:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_1402; }\n        \n        label_13EE:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_13EE; }\n        \n        label_1402:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_140B;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_140B;\n        }\n    }\n    \n    function toPowerOfTwoThirds(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1d59;\n        var var2 = arg0 ** 0x02;\n        return cbrt(var2);\n    }\n    \n    function endICOPhase() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x14;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x15] = storage[0x15] & ~0xff;\n    }\n    \n    function myReferralDividends() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1ea5;\n        var var2 = 0x00;\n        var1 = myDividends(var2);\n        var2 = 0x1eaf;\n        var var3 = 0x01;\n        var2 = myDividends(var3);\n        return var2 - var1;\n    }\n    \n    function changeBankroll(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x14;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x60;\n        var var2 = 0x00;\n        var var3 = 0x1f11;\n        var3 = myFrontEndTokens();\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = arg1 >= 0x02540be400;\n    \n        if (var2) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x05;\n        \n            if (arg1 <= storage[keccak256(memory[0x00:0x40])]) { goto label_1F4A; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var2) {\n        label_1F4A:\n            var2 = 0x1f56;\n            var3 = msg.sender;\n            var var4 = arg0;\n            var var5 = arg1;\n            var var6 = var1;\n            func_277A(var3, var4, var5, var6);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function theDividendsOf(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) {\n            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0b;\n            var var1 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = 0x1d16;\n            var var3 = arg1;\n            var2 = dividendsOf(var3);\n            var1 = var2 + var1;\n        \n        label_1D18:\n            return var1;\n        } else {\n            var1 = 0x1cef;\n            var2 = arg1;\n            var1 = dividendsOf(var2);\n            goto label_1D18;\n        }\n    }\n    \n    function getMyDividendRate() returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (!(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0a;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function myFrontEndTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x1bc3;\n        var var3 = var1;\n        var2 = getFrontEndTokenBalanceOf(var3);\n        var0 = var2;\n        r0 = func_1BC6(var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function tokensToEthereum_(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n    \n        if (arg0 >= 0x5af3107a4000) {\n            var1 = 0x00;\n            var2 = var1;\n        \n            if (storage[0x11] > storage[0x0e]) {\n                var var8 = storage[0x11] > storage[0x0e];\n            \n                if (!var8) {\n                    if (!var8) {\n                    label_20CE:\n                        var8 = storage[0x11] > storage[0x0e];\n                    \n                        if (!var8) {\n                            if (!var8) { revert(memory[0x00:0x00]); }\n                        \n                        label_20EC:\n                            var var9 = storage[0x11];\n                            var var10 = storage[0x0e];\n                            var8 = 0x2100;\n                            var8 = func_272E(var9, var10);\n                            var temp0 = var8;\n                            var2 = temp0;\n                            var8 = 0x2112;\n                            var9 = arg0;\n                            var10 = var2;\n                            var8 = func_272E(var9, var10);\n                            var1 = var8;\n                        \n                        label_2115:\n                        \n                            if (arg0 != var1 + var2) { assert(); }\n                        \n                            if (!var1) {\n                            label_214C:\n                            \n                                if (!var2) {\n                                label_21BD:\n                                    var7 = var3 + var4;\n                                \n                                    if (var7 > 0x00) { return var7; }\n                                    else { assert(); }\n                                } else {\n                                    var8 = 0x217b;\n                                    var9 = 0x03;\n                                    var10 = 0x0cf2;\n                                    var var11 = 0x02;\n                                    var var12 = 0x18e9;\n                                    var var13 = 0x18e4;\n                                    var var14 = storage[0x11];\n                                    var var15 = 0x0f4240 * 0x258f;\n                                    var13 = func_2717(var14, var15);\n                                    var12 = func_18E4(var13);\n                                    var10 = func_18E9(var11, var12);\n                                    var8 = func_0CF2(var9, var10);\n                                    var5 = var8;\n                                    var8 = 0x21a8;\n                                    var9 = 0x03;\n                                    var10 = 0x0cf2;\n                                    var11 = 0x02;\n                                    var12 = 0x18e9;\n                                    var13 = 0x18e4;\n                                    var14 = storage[0x11] - var2;\n                                    var15 = 0x0f4240 * 0x258f;\n                                    var13 = func_2717(var14, var15);\n                                    var12 = func_18E4(var13);\n                                    var10 = func_18E9(var11, var12);\n                                    var8 = func_0CF2(var9, var10);\n                                    var temp1 = var8;\n                                    var6 = temp1;\n                                    var8 = 0x21ba;\n                                    var9 = var5;\n                                    var10 = var6;\n                                    var8 = func_272E(var9, var10);\n                                    var4 = var8;\n                                    goto label_21BD;\n                                }\n                            } else {\n                                var8 = 0x2149;\n                                var9 = 0x0de0b6b3a7640000;\n                                var10 = 0x0cf2;\n                                var11 = var1;\n                                var12 = 0x0251e66909d000;\n                                var10 = func_2740(var11, var12);\n                                var8 = func_0CF2(var9, var10);\n                                var3 = var8;\n                                goto label_214C;\n                            }\n                        } else if (storage[0x11] - arg0 >= storage[0x0e]) { revert(memory[0x00:0x00]); }\n                        else { goto label_20EC; }\n                    } else {\n                    label_20C7:\n                        var2 = arg0;\n                        goto label_2115;\n                    }\n                } else if (storage[0x11] - arg0 < storage[0x0e]) { goto label_20CE; }\n                else { goto label_20C7; }\n            } else {\n                var1 = arg0;\n                goto label_2115;\n            }\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x1d;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x547269656420746f2073656c6c20746f6f2066657720746f6b656e732e000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        }\n    }\n    \n    function buyPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = storage[0x15] & 0xff;\n    \n        if (var4) {\n            if (!var4) {\n            label_2239:\n                var4 = 0x2249;\n                var var5 = 0x038d7ea4c68000;\n                var4 = ethereumToTokens_(var5);\n            \n            label_2249:\n                var temp0 = var4;\n                var2 = temp0;\n                var4 = var2;\n                var5 = 0x314dc6448d9338c15b0a00000000;\n            \n                if (!var4) { assert(); }\n            \n                var1 = var5 / var4;\n            \n            label_2268:\n                var4 = 0x14f2;\n                var5 = var1;\n                var var6 = 0x2281;\n                var var7 = 0x64;\n                var var8 = 0x0cf2;\n                var var9 = var5;\n                var var10 = arg0;\n                var8 = func_2740(var9, var10);\n                var6 = func_0CF2(var7, var8);\n                return func_2281(var5, var6);\n            } else {\n            label_222B:\n                var1 = 0x0251e66909d000;\n                goto label_2268;\n            }\n        } else if (storage[0x10] >= storage[0x0f]) { goto label_2239; }\n        else { goto label_222B; }\n    }\n    \n    function func_2281(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_276B(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function startICOPhase() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x14;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x16]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x15] = (storage[0x15] & ~0xff) | 0x01;\n        storage[0x16] = block.timestamp;\n    }\n    \n    function tokensMintedDuringICO() returns (var r0) { return storage[0x0e]; }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x22e6;\n        var8 = myFrontEndTokens();\n    \n        if (var8 <= var7) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x15] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x15] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var0 = arg0;\n        var7 = 0x233e;\n        var8 = msg.sender;\n        var7 = getUserAverageDividendRate(var8);\n        var1 = var7;\n        var7 = var1 >= 0x020000000000000000;\n    \n        if (var1 >= 0x020000000000000000) {\n            if (!var7) { revert(memory[0x00:0x00]); }\n        \n        label_236D:\n            var7 = 0x238a;\n            var8 = 0x010000000000000000;\n            var var9 = 0x0cf2;\n            var var10 = var0;\n            var var11 = var1;\n            var9 = func_2740(var10, var11);\n            var7 = func_0CF2(var8, var9);\n            var2 = var7;\n            var7 = 0x2395;\n            var8 = var0;\n            var7 = tokensToEthereum_(var8);\n            var3 = var7;\n        \n            if (var3 <= storage[0x10]) {\n                storage[0x10] = storage[0x10] - var3;\n                var7 = 0x23d3;\n                var8 = 0x010000000000000000;\n                var9 = 0x0cf2;\n                var10 = 0x64;\n                var11 = 0x0cf2;\n                var var12 = 0x1a35;\n                var var13 = msg.sender;\n                var12 = getUserAverageDividendRate(var13);\n                var11 = func_1A35(var3, var12);\n                var9 = func_0CF2(var10, var11);\n                var7 = func_0CF2(var8, var9);\n            \n            label_23D3:\n                var temp0 = var7;\n                var4 = temp0;\n                var7 = 0x23e5;\n                var8 = var3;\n                var9 = var4;\n                var7 = func_272E(var8, var9);\n                var5 = var7;\n                var8 = storage[0x11];\n                var7 = 0x23fb;\n                var9 = var0;\n                var7 = func_272E(var8, var9);\n                storage[0x11] = var7;\n                var8 = storage[0x12];\n                var7 = 0x2411;\n                var9 = var2;\n                var7 = func_272E(var8, var9);\n                storage[0x12] = var7;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x05;\n                var8 = storage[keccak256(memory[0x00:0x40])];\n                var7 = 0x2434;\n                var9 = var0;\n                var7 = func_272E(var8, var9);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x05;\n                storage[keccak256(memory[0x00:0x40])] = var7;\n                memory[0x20:0x40] = 0x06;\n                var8 = storage[keccak256(memory[0x00:0x40])];\n                var7 = 0x2460;\n                var9 = var2;\n                var7 = func_272E(var8, var9);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x06;\n                storage[keccak256(memory[0x00:0x40])] = var7;\n                memory[0x20:0x40] = 0x0c;\n                var temp1 = keccak256(memory[0x00:0x40]);\n                var temp2 = var5 * 0x010000000000000000 + var2 * storage[0x13];\n                storage[temp1] = storage[temp1] - temp2;\n                var6 = temp2;\n            \n                if (0x00 >= storage[0x12]) {\n                label_24D5:\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var0;\n                    memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var5;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, msg.sender]);\n                    return;\n                } else {\n                    var7 = 0x24d1;\n                    var8 = storage[0x12];\n                    var9 = var4 * 0x010000000000000000;\n                \n                    if (!var8) { assert(); }\n                \n                    var7 = func_24C0(var8, var9);\n                    storage[0x13] = var7;\n                    goto label_24D5;\n                }\n            } else {\n                storage[0x10] = 0x00;\n                var7 = 0x23d3;\n                var8 = 0x010000000000000000;\n                var9 = 0x0cf2;\n                var10 = 0x64;\n                var11 = 0x0cf2;\n                var12 = 0x1a35;\n                var13 = msg.sender;\n                var12 = getUserAverageDividendRate(var13);\n                var11 = func_1A35(var3, var12);\n                var9 = func_0CF2(var10, var11);\n                var7 = func_0CF2(var8, var9);\n                goto label_23D3;\n            }\n        } else if (var1 <= 0x320000000000000000) { goto label_236D; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_24C0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x13];\n        arg1 = arg1 / temp0;\n        r0 = func_276B(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function exit() {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(storage[0x15] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x05;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_2557:\n            var var2 = 0x2560;\n            var var3 = var0;\n            withdraw(var3);\n            return;\n        } else {\n            var2 = 0x2557;\n            var3 = var1;\n            sell(var3);\n            goto label_2557;\n        }\n    }\n    \n    function buy(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(storage[0x15] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x09;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x25a8;\n        var var3 = msg.value;\n        var var4 = arg0;\n        var2 = func_0BCB(var3, var4);\n        return var0;\n    }\n    \n    function buyAndTransfer(var arg0, var arg1, var arg2) {\n        var var0 = 0x16d9;\n        var var1 = arg0;\n        var var2 = arg1;\n        var var3 = arg2;\n        var var4 = 0x14;\n        buyAndTransfer(var1, var2, var3, var4);\n    }\n    \n    function cbrt(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x03;\n    \n        if (var1 >= var0) {\n        label_1CD8:\n            return var0;\n        } else {\n        label_25CE:\n            var temp1 = var1;\n            var0 = temp1;\n            var var2 = 0x03;\n            var var3 = var0 * 0x02;\n            var var4 = var0 * var0;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_1CD8; }\n            else { goto label_25CE; }\n        }\n    }\n    \n    function getUserAverageDividendRate(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp0 = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x06;\n        var var1 = 0x1d59;\n        var var3 = temp0;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])] * 0x010000000000000000;\n        return func_2717(var2, var3);\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x2647;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x15] / 0x0100 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x2671;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0c;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var3;\n        storage[temp0] = temp1 * 0x010000000000000000 + storage[temp0];\n        memory[0x20:0x40] = 0x0b;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = storage[temp2];\n        storage[temp2] = 0x00;\n        var0 = temp1 + temp3;\n        var1 = msg.sender;\n        var3 = 0x26b3;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = func_0BCB(var4, var5);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = var3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function toPowerOfThreeHalves(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1d59;\n        var var2 = arg0 ** 0x03;\n        return sqrt(var2);\n    }\n    \n    function getDividendTokenSupply() returns (var r0) { return storage[0x12]; }\n    \n    function func_2717(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_272E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_2740(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_276B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_277A(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n    \n        if (!(storage[0x15] / 0x0100 ** 0x01 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var0 = arg0;\n        var1 = arg2;\n        var var5 = 0x00;\n        var var6 = 0x27c5;\n        var var7 = 0x01;\n        var var8 = var0;\n        var6 = theDividendsOf(var7, var8);\n    \n        if (var6 <= var5) {\n        label_27D4:\n            var5 = 0x27fa;\n            var6 = 0x010000000000000000;\n            var7 = 0x0cf2;\n            var8 = 0x27ed;\n            var var9 = var0;\n            var8 = getUserAverageDividendRate(var9);\n            var7 = func_27ED(var1, var8);\n            var5 = func_0CF2(var6, var7);\n            var2 = var5;\n        \n            if (msg.sender == var0 & 0x02 ** 0xa0 - 0x01) {\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x05;\n                var5 = 0x2860;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = var1;\n                var5 = func_272E(var6, var7);\n            \n            label_2860:\n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = var0 & temp0;\n                memory[0x20:0x40] = 0x05;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = arg1 & temp0;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x2895;\n                var7 = var1;\n                var5 = func_276B(var6, var7);\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg1 & temp1;\n                memory[0x20:0x40] = 0x05;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = var0 & temp1;\n                memory[0x20:0x40] = 0x06;\n                var5 = 0x28d1;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var7 = var2;\n                var5 = func_272E(var6, var7);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = var0 & temp2;\n                memory[0x20:0x40] = 0x06;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = arg1 & temp2;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x2906;\n                var7 = var2;\n                var5 = func_276B(var6, var7);\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x06;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x20:0x40] = 0x09;\n            \n                if (storage[keccak256(memory[0x00:0x40])] & 0xff) {\n                    var temp3 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp3 & var0;\n                    memory[0x20:0x40] = 0x0c;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    var temp5 = var2;\n                    storage[temp4] = storage[temp4] - temp5 * storage[0x13];\n                    var temp6 = arg1;\n                    memory[0x00:0x20] = temp6 & temp3;\n                    var temp7 = keccak256(memory[0x00:0x40]);\n                    storage[temp7] = storage[temp7] + temp5 * storage[0x13];\n                    var3 = address(temp6).code.length;\n                \n                    if (var3 <= 0x00) {\n                    label_2ACE:\n                        var temp8 = memory[0x40:0x60];\n                        memory[temp8:temp8 + 0x20] = var1;\n                        var temp9 = memory[0x40:0x60];\n                        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                        return;\n                    } else {\n                    label_29C9:\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = 0xc0ee0b8a00000000000000000000000000000000000000000000000000000000;\n                        var temp11 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = temp11 & arg0;\n                        memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = arg2;\n                        memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = 0x60;\n                        var temp12 = arg3;\n                        memory[temp10 + 0x64:temp10 + 0x64 + 0x20] = memory[temp12:temp12 + 0x20];\n                        var4 = arg1;\n                        var5 = var4 & temp11;\n                        var6 = 0xc0ee0b8a;\n                        var var10 = temp10 + 0x04;\n                        var var11 = temp10 + 0x44;\n                        var7 = arg0;\n                        var8 = arg2;\n                        var9 = temp12;\n                        var var12 = temp10 + 0x84;\n                        var var13 = var9 + 0x20;\n                        var var14 = memory[var9:var9 + 0x20];\n                        var var15 = var14;\n                        var var16 = var12;\n                        var var17 = var13;\n                        var var18 = 0x00;\n                    \n                        if (var18 >= var15) {\n                        label_2A53:\n                            var temp13 = var14;\n                            var12 = temp13 + var12;\n                            var13 = temp13 & 0x1f;\n                        \n                            if (!var13) {\n                                var7 = var12;\n                                var8 = 0x20;\n                                var9 = memory[0x40:0x60];\n                                var10 = var7 - var9;\n                                var11 = var9;\n                                var12 = 0x00;\n                                var13 = var5;\n                                var14 = !address(var13).code.length;\n                            \n                                if (var14) { revert(memory[0x00:0x00]); }\n                            \n                            label_2AA1:\n                                var temp14;\n                                temp14, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n                                var8 = !temp14;\n                            \n                                if (!var8) {\n                                    var5 = memory[0x40:0x60];\n                                    var6 = returndata.length;\n                                \n                                    if (var6 >= 0x20) { goto label_2ACE; }\n                                    else { revert(memory[0x00:0x00]); }\n                                } else {\n                                    var temp15 = returndata.length;\n                                    memory[0x00:0x00 + temp15] = returndata[0x00:0x00 + temp15];\n                                    revert(memory[0x00:0x00 + returndata.length]);\n                                }\n                            } else {\n                                var temp16 = var13;\n                                var temp17 = var12 - temp16;\n                                memory[temp17:temp17 + 0x20] = ~(0x0100 ** (0x20 - temp16) - 0x01) & memory[temp17:temp17 + 0x20];\n                                var7 = temp17 + 0x20;\n                                var8 = 0x20;\n                                var9 = memory[0x40:0x60];\n                                var10 = var7 - var9;\n                                var11 = var9;\n                                var12 = 0x00;\n                                var13 = var5;\n                                var14 = !address(var13).code.length;\n                            \n                                if (!var14) { goto label_2AA1; }\n                                else { revert(memory[0x00:0x00]); }\n                            }\n                        } else {\n                        label_2A44:\n                            var temp18 = var18;\n                            memory[temp18 + var16:temp18 + var16 + 0x20] = memory[temp18 + var17:temp18 + var17 + 0x20];\n                            var18 = temp18 + 0x20;\n                        \n                            if (var18 >= var15) { goto label_2A53; }\n                            else { goto label_2A44; }\n                        }\n                    }\n                } else {\n                    var temp19 = 0x02 ** 0xa0 - 0x01;\n                    var temp20 = arg1;\n                    var temp21 = temp20 & temp19;\n                    memory[0x00:0x20] = temp21;\n                    memory[0x20:0x40] = 0x09;\n                    var temp22 = keccak256(memory[0x00:0x40]);\n                    var temp23 = ~0xff;\n                    storage[temp22] = (temp23 & storage[temp22]) | 0x01;\n                    var temp24 = var0;\n                    memory[0x00:0x20] = temp24 & temp19;\n                    memory[0x20:0x40] = 0x0a;\n                    var temp25 = storage[keccak256(memory[0x00:0x40])];\n                    memory[0x00:0x20] = temp21;\n                    var temp26 = keccak256(memory[0x00:0x40]);\n                    storage[temp26] = (temp25 & 0xff) | (temp23 & storage[temp26]);\n                    var temp27 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp27 & temp24;\n                    memory[0x20:0x40] = 0x0c;\n                    var temp28 = keccak256(memory[0x00:0x40]);\n                    var temp29 = var2;\n                    storage[temp28] = storage[temp28] - temp29 * storage[0x13];\n                    memory[0x00:0x20] = temp20 & temp27;\n                    var temp30 = keccak256(memory[0x00:0x40]);\n                    storage[temp30] = storage[temp30] + temp29 * storage[0x13];\n                    var3 = address(temp20).code.length;\n                \n                    if (var3 <= 0x00) { goto label_2ACE; }\n                    else { goto label_29C9; }\n                }\n            } else {\n                var temp31 = var0;\n                memory[0x00:0x20] = temp31 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n                var temp32 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp32;\n                var temp33 = keccak256(memory[0x00:0x40]);\n                storage[temp33] = storage[temp33] - arg2;\n                memory[0x00:0x20] = temp31 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x05;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x2860;\n                var7 = var1;\n                var5 = func_272E(var6, var7);\n                goto label_2860;\n            }\n        } else {\n            var5 = 0x27d4;\n            var6 = var0;\n            func_2B24(var6);\n            goto label_27D4;\n        }\n    }\n    \n    function func_27ED(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_2740(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2B24(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x2b31;\n        var var2 = 0x00;\n        var var3 = arg0;\n        var1 = theDividendsOf(var2, var3);\n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0c;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var1;\n        storage[temp1] = temp2 * 0x010000000000000000 + storage[temp1];\n        memory[0x20:0x40] = 0x0b;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var temp5 = memory[0x40:0x60];\n        var temp6 = temp2 + temp4;\n        var0 = temp6;\n        var temp7;\n        temp7, memory[temp5:temp5 + 0x00] = address(temp0).call.gas(!var0 * 0x08fc).value(var0)(memory[temp5:temp5 + 0x00]);\n        var1 = !temp7;\n    \n        if (!var1) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = var0;\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var temp10 = returndata.length;\n            memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 33787 tokens. Please reduce the length of the messages."
}