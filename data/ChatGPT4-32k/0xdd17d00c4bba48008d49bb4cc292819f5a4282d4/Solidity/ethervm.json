{
	"address": "0xdd17d00c4bba48008d49bb4cc292819f5a4282d4",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity code corresponding to the decompiled EVM bytecode provided:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    \n    function dividendsOf(address _address) public view returns (uint256 dividends) {\n        return balances[_address];\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require (_value <= balances[_from]);\n        require (_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from] - _value;\n        balances[_to] = balances[_to] + _value;\n        allowed[_from][msg.sender] = allowed[_from][msg.sender] - _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function calculateResult(uint256 _value, bool _buy, bool _reinvest) public view returns (uint256 result) {\n        // Implementation left out as it's not clear from the decompiled code\n    }\n    \n    function transferAndCall(address _to, uint256 _value, bytes _data) public returns (bool success) {\n        require(transfer(_to, _value));\n        require(_to.call(_data));\n        return true;\n    }\n    \n    function allInfoFor(address _address) public view returns (uint256 balance, uint256 dividends) {\n        balance = balances[_address];\n        dividends = dividendsOf(_address);\n    }\n    \n    function balanceOf(address _address) public view returns (uint256 balance) {\n        return balances[_address];\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require (_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender] - _value;\n        balances[_to] = balances[_to] + _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    function sell(uint256 _value) public returns (uint256 revenue) {\n        require(_value <= balances[msg.sender]);\n        revenue = calculateResult(_value, false, false);\n        balances[msg.sender] -= _value;\n        msg.sender.transfer(revenue);\n        emit Transfer(msg.sender, address(0), _value);\n        return revenue;\n    }\n    \n    function reinvest() public returns (uint256 newTokens) {\n        uint256 dividends = dividendsOf(msg.sender);\n        require(dividends > 0);\n        balances[msg.sender] += dividends;\n        emit Transfer(address(0), msg.sender, dividends);\n        return dividends;\n    }\n    \n    function buy() public payable returns (uint256 newTokens) {\n        newTokens = calculateResult(msg.value, true, false);\n        balances[msg.sender] += newTokens;\n        emit Transfer(address(0), msg.sender, newTokens);\n        return newTokens;\n    }\n}\n```\n\nNote: This code is a simplification of the given decompiled code, it includes assumptions and might not work exactly as the original contract. Please adjust according to your needs.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474305,
	"id": "chatcmpl-8MvKrB3N8REOA0jwpbKwxkq0ApoK2",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x4000aea0 > var0) {\n            if (0x23b872dd > var0) {\n                if (var0 == 0x65318b) {\n                    // Dispatch table entry for dividendsOf(address)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0140;\n                    var var2 = 0x04;\n                    var var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = dividendsOf(var2, var3);\n                \n                label_0140:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = var1;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n                } else if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0167;\n                    var2 = name();\n                \n                label_0167:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = 0x20;\n                    var temp3 = var2;\n                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n                    var3 = temp2;\n                    var var4 = var3;\n                    var var5 = var4 + 0x40;\n                    var var6 = temp3 + 0x20;\n                    var var7 = memory[temp3:temp3 + 0x20];\n                    var var8 = var7;\n                    var var9 = var5;\n                    var var10 = var6;\n                    var var11 = 0x00;\n                \n                    if (var11 >= var8) {\n                    label_01A1:\n                        var temp4 = var7;\n                        var5 = temp4 + var5;\n                        var6 = temp4 & 0x1f;\n                    \n                        if (!var6) {\n                            var temp5 = memory[0x40:0x60];\n                            return memory[temp5:temp5 + var5 - temp5];\n                        } else {\n                            var temp6 = var6;\n                            var temp7 = var5 - temp6;\n                            memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                            var temp8 = memory[0x40:0x60];\n                            return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                        }\n                    } else {\n                    label_0192:\n                        var temp9 = var11;\n                        memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                        var11 = temp9 + 0x20;\n                    \n                        if (var11 >= var8) { goto label_01A1; }\n                        else { goto label_0192; }\n                    }\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0215;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = approve(var2, var3);\n                \n                label_0215:\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = !!var1;\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0140;\n                    var1 = totalSupply();\n                    goto label_0140;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0215;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = transferFrom(var2, var3);\n                goto label_0215;\n            } else if (var0 == 0x259bfdd7) {\n                // Dispatch table entry for currentPrices()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0296;\n                var1, var2, var3 = currentPrices();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1;\n                memory[temp12 + 0x20:temp12 + 0x20 + 0x20] = var2;\n                memory[temp12 + 0x40:temp12 + 0x40 + 0x20] = var3;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x60];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = decimals();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n            } else if (var0 == 0x3472956c) {\n                // Dispatch table entry for calculateResult(uint256,bool,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0140;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = calculateResult(var2, var3);\n                goto label_0140;\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0140;\n                var1 = withdraw();\n                goto label_0140;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa6f2ae3a > var0) {\n            if (var0 == 0x4000aea0) {\n                // Dispatch table entry for transferAndCall(address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0215;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = transferAndCall(var2, var3);\n                goto label_0215;\n            } else if (var0 == 0x57f6b812) {\n                // Dispatch table entry for allInfoFor(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f3;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1, var2, var3, var4, var5, var6, var7, var8 = allInfoFor(var2);\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var1;\n                memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = var2;\n                memory[temp16 + 0x40:temp16 + 0x40 + 0x20] = var3;\n                memory[temp16 + 0x60:temp16 + 0x60 + 0x20] = var4;\n                memory[temp16 + 0x80:temp16 + 0x80 + 0x20] = var5;\n                memory[temp16 + 0xa0:temp16 + 0xa0 + 0x20] = var6;\n                memory[temp16 + 0xc0:temp16 + 0xc0 + 0x20] = var7;\n                memory[temp16 + 0xe0:temp16 + 0xe0 + 0x20] = var8;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + temp16 - temp17 + 0x0100];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0140;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = balanceOf(var2, var3);\n                goto label_0140;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0167;\n                var2 = symbol();\n                goto label_0167;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa6f2ae3a) {\n            // Dispatch table entry for buy()\n            var1 = 0x0140;\n            var1 = buy();\n            goto label_0140;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0215;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = transfer(var2, var3);\n            goto label_0215;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0140;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = allowance(var2, var3);\n            goto label_0140;\n        } else if (var0 == 0xe4849b32) {\n            // Dispatch table entry for sell(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0140;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = sell(var2, var3);\n            goto label_0140;\n        } else if (var0 == 0xfdb5a03e) {\n            // Dispatch table entry for reinvest()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0140;\n            var1 = reinvest();\n            goto label_0140;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function dividendsOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        r0 = func_0537(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2 + 0x01;\n        var temp4 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp4;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & (0x01 << 0xa0) - 0x01]);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var1 = 0x00;\n        memory[var1:var1 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[var1:var1 + 0x40]);\n        memory[var1:var1 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp2 + 0x01;\n    \n        if (var0 > storage[keccak256(memory[var1:var1 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp3 + 0x01;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] - var0;\n        var var2 = 0x067a;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = var0;\n        return func_0AFF(var3, var4, var5);\n    }\n    \n    function calculateResult(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = !!msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = !!msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        r0 = func_06D0(arg0, arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function transferAndCall(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = temp0 + temp1;\n        var var1 = temp0;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1 + var3;\n        var3 = temp2;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var3;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var3 = temp4;\n        var var4 = var2;\n        var2 = temp3 + 0x20;\n    \n        if ((var3 > 0x0100000000) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var0 = var2;\n        var1 = var3;\n        var2 = 0x00;\n        var3 = 0x08af;\n        var4 = msg.sender;\n        var var5 = arg0;\n        var var6 = arg1;\n        var3 = func_0AFF(var4, var5, var6);\n        var3 = address(arg0).code.length;\n    \n        if (!(var3 & 0xffffffff)) {\n        label_097A:\n            return 0x01;\n        } else {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x6be32e73 << 0xe0;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = msg.sender;\n            memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = arg1;\n            memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x60;\n            var temp6 = var1;\n            memory[temp5 + 0x64:temp5 + 0x64 + 0x20] = temp6;\n            var4 = arg0 & (0x01 << 0xa0) - 0x01;\n            var5 = 0x6be32e73;\n            var temp7 = temp5 + 0x84;\n            memory[temp7:temp7 + temp6] = msg.data[var0:var0 + temp6];\n            memory[temp7 + temp6:temp7 + temp6 + 0x20] = 0x00;\n            var6 = temp7 + (temp6 + 0x1f & ~0x1f);\n            var var7 = 0x20;\n            var var8 = memory[0x40:0x60];\n            var var9 = var6 - var8;\n            var var10 = var8;\n            var var11 = 0x00;\n            var var12 = var4;\n            var var13 = !address(var12).code.length;\n        \n            if (var13) { revert(memory[0x00:0x00]); }\n        \n            var temp8;\n            temp8, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n            var7 = !temp8;\n        \n            if (!var7) {\n                var4 = memory[0x40:0x60];\n                var5 = returndata.length;\n            \n                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (memory[var4:var4 + 0x20]) { goto label_097A; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var temp9 = returndata.length;\n                memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function allInfoFor(var arg0) returns (var r0, var arg0, var r2, var r3, var r4, var r5, var r6, var r7) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        r2 = address(this).balance;\n        r3 = 0x00;\n        r4 = r3;\n        r5 = r4;\n        r6 = r5;\n        r7 = r6;\n        var var5 = r7;\n        var var6 = var5;\n        var var7 = 0x0998;\n        var7 = totalSupply();\n        r3 = var7;\n        var7 = 0x09a2;\n        var var8;\n        var var9;\n        var7, var8, var9 = currentPrices();\n        r4 = var7;\n        r5 = var8;\n        r6 = var9;\n        var7 = 0x09b2;\n        var8 = arg0;\n        var7 = func_09DA(var8);\n        r7 = var7;\n        var7 = 0x09bd;\n        var8 = arg0;\n        var7 = func_0537(var8);\n        var5 = var7;\n        var7 = var5;\n        var8 = 0x09cc;\n        var9 = r7;\n        var var10 = 0x00;\n        var var11 = var10;\n        var8 = func_06D0(var9, var10, var11);\n        var temp0 = r7;\n        r7 = var8 + var7;\n        var temp1 = r5;\n        r5 = temp0;\n        var temp2 = r3;\n        r3 = temp1;\n        arg0 = temp2;\n        var temp3 = r6;\n        r6 = var5;\n        var temp4 = r4;\n        r4 = temp3;\n        var temp5 = r2;\n        r2 = temp4;\n        r0 = temp5;\n        return r0, arg0, r2, r3, r4, r5, r6, r7;\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        r0 = func_09DA(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x067d;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        return func_0AFF(var2, var3, var4);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;\n        var temp2 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp2 & arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & arg1;\n        memory[0x20:0x40] = temp3 + 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function sell(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = arg0;\n        var var1 = 0x0a75;\n        var var2 = msg.sender;\n        var1 = func_09DA(var2);\n    \n        if (var1 < var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x0a89;\n        var1 = arg0;\n        return func_0CC4(var1);\n    }\n    \n    function func_0537(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var var1 = 0x01 << 0x40;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40]) + 0x02];\n        var var3 = 0x0562;\n        var var4 = arg0;\n        var3 = func_09DA(var4);\n        var2 = storage[0x02] * var3 - var2;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x12;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4461696c792044697673204e6574776f726b << 0x70;\n        return r0;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function currentPrices() returns (var r0, var r1, var r2) {\n        r1 = 0x00;\n        r2 = r1;\n        var var2 = 0x00;\n        var var3 = 0x0de0b6b3a7640000;\n        var var4 = 0x069a;\n        var4 = totalSupply();\n        var4 = var4 * 0x02540be400;\n    \n        if (!var3) { assert(); }\n    \n        var temp0 = var4 / var3 + 0x038d7ea4c68000;\n        r2 = (temp0 * 0x5f) / 0x64;\n        r1 = (temp0 * 0x64) / 0x50;\n        r0 = temp0;\n        return r0, r1, r2;\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function func_06D0(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x06dd;\n        var var4;\n        var var5;\n        var3, var4, var5 = currentPrices();\n        var1 = var4;\n        var2 = var5;\n        var3 = 0x00;\n    \n        if (arg1) {\n            var3 = var1;\n            var4 = 0x00;\n        \n            if (arg1) {\n            label_0703:\n                var5 = 0x50;\n            \n                if (arg1) {\n                label_0712:\n                    var var6 = 0x02540be400 * 0x64;\n                \n                    if (!var5) { assert(); }\n                \n                label_0723:\n                    var4 = var6 / var5;\n                    var5 = arg1;\n                \n                    if (var5) {\n                        var5 = !arg2;\n                    \n                        if (var5) { goto label_0742; }\n                        else { goto label_0737; }\n                    } else if (var5) {\n                    label_0742:\n                    \n                        if (!var5) {\n                            if (!arg2) {\n                                var5 = 0x0de0b6b3a7640000;\n                                var temp0 = arg0;\n                                var6 = temp0 * var3 - temp0 * ((var4 * (var5 + temp0)) / 0x1bc16d674ec80000);\n                            \n                            label_0789:\n                                return var6 / var5;\n                            } else {\n                                var5 = 0x0de0b6b3a7640000;\n                                var temp1 = arg0;\n                                var6 = temp1 * ((var4 * (var5 + temp1)) / 0x1bc16d674ec80000) + temp1 * var3;\n                                goto label_0789;\n                            }\n                        } else if (!arg2) {\n                            var temp2 = var4;\n                            var5 = temp2 * 0x02;\n                            var6 = var3 * 0x02;\n                            var var7 = temp2;\n                            var var8 = 0x07b2;\n                            var temp3 = var7 + var6;\n                            var var9 = var7 * arg0 * 0x08 + temp3 * temp3;\n                            var8 = func_0BB6(var9);\n                            var6 = var8 - var7 - var6 * 0x0de0b6b3a7640000;\n                        \n                            if (var5) { goto label_0789; }\n                            else { assert(); }\n                        } else {\n                            var temp4 = var4;\n                            var5 = temp4 * 0x02;\n                            var6 = temp4;\n                            var7 = 0x0772;\n                            var temp5 = var3;\n                            var8 = (temp5 * 0x04 * temp5 + var6 * var6) - temp5 * 0x04 * var6 - arg0 * 0x08 * var6;\n                            var7 = func_0BB6(var8);\n                            var6 = var3 * 0x02 - var7 - var6 * 0x0de0b6b3a7640000;\n                        \n                            if (var5) { goto label_0789; }\n                            else { assert(); }\n                        }\n                    } else {\n                    label_0737:\n                        var5 = !arg1;\n                    \n                        if (!var5) { goto label_0742; }\n                    \n                        var5 = arg2;\n                        goto label_0742;\n                    }\n                } else {\n                label_070C:\n                    var6 = 0x5f;\n                    var6 = var6 * 0x02540be400;\n                \n                    if (var5) { goto label_0723; }\n                    else { assert(); }\n                }\n            } else {\n            label_06FD:\n                var5 = 0x64;\n            \n                if (arg1) { goto label_0712; }\n                else { goto label_070C; }\n            }\n        } else {\n            var4 = var2;\n            var3 = var4;\n            var4 = 0x00;\n        \n            if (arg1) { goto label_0703; }\n            else { goto label_06FD; }\n        }\n    }\n    \n    function withdraw() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x081d;\n        var var3 = msg.sender;\n        var2 = func_0537(var3);\n        var temp0 = var2;\n        var1 = temp0;\n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]) + 0x02;\n        storage[temp2] = var1 * (0x01 << 0x40) + storage[temp2];\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp1).call.gas(!var1 * 0x08fc).value(var1)(memory[temp3:temp3 + 0x00]);\n        var2 = !temp4;\n    \n        if (!var2) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = var1;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364, msg.sender]);\n            return var1;\n        } else {\n            var temp7 = returndata.length;\n            memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_09DA(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x222227 << 0xe9;\n        return r0;\n    }\n    \n    function buy() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.value <= var0) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0a2b;\n        var var2 = msg.value;\n        return func_0BED(var2);\n    }\n    \n    function reinvest() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0a9b;\n        var var3 = msg.sender;\n        var2 = func_0537(var3);\n        var temp0 = var2;\n        var1 = temp0;\n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]) + 0x02;\n        storage[temp2] = var1 * (0x01 << 0x40) + storage[temp2];\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = var1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xbd654390d0d973e8c8376ed6053be8658870df892687852cc5c914d700291b87, msg.sender]);\n        var2 = 0x0af9;\n        var3 = var1;\n        return func_0BED(var3);\n    }\n    \n    function func_0AFF(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = temp0 & arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg2;\n        storage[temp2] = storage[temp2] - temp3;\n        var temp4 = temp2 + 0x02;\n        storage[temp4] = storage[temp4] - temp3 * storage[0x02];\n        var temp5 = arg1 & temp0;\n        memory[0x00:0x20] = temp5;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        storage[temp6] = temp3 + storage[temp6];\n        var temp7 = temp6 + 0x02;\n        storage[temp7] = storage[temp7] + temp3 * storage[0x02];\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = temp3;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & (0x01 << 0xa0) - 0x01, stack[-3] & (0x01 << 0xa0) - 0x01]);\n        return 0x01;\n    }\n    \n    function func_0BB6(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_0BE7:\n            return var0;\n        } else {\n        label_0BC8:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_0BE7; }\n            else { goto label_0BC8; }\n        }\n    }\n    \n    function func_0BED(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = (arg0 * 0x14) / 0x64;\n        var var2 = 0x0c02;\n        var var3 = arg0;\n        var var4 = 0x01;\n        var var5 = var0;\n        var2 = func_06D0(var3, var4, var5);\n        var temp0 = var2;\n        storage[0x00] = temp0 + storage[0x00];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = temp0 + storage[temp1];\n        var temp2 = temp1 + 0x02;\n        storage[temp2] = storage[temp2] + temp0 * storage[0x02];\n        var2 = storage[0x00];\n        var0 = temp0;\n        var3 = var1 * (0x01 << 0x40);\n    \n        if (!var2) { assert(); }\n    \n        storage[0x02] = var3 / var2 + storage[0x02];\n        var temp3 = memory[0x40:0x60];\n        var temp4 = var0;\n        memory[temp3:temp3 + 0x20] = temp4;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp3 - temp5 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, msg.sender]);\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = arg0;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp4;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + temp6 - temp7 + 0x40], [0x1cbc5ab135991bd2b6a4b034a04aa2aa086dac1371cb9b16b8b5e2ed6b036bed, msg.sender]);\n        return temp4;\n    }\n    \n    function func_0CC4(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg0 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0cec;\n        var var2 = arg0;\n        var var3 = 0x00;\n        var var4 = var3;\n        var1 = func_06D0(var2, var3, var4);\n        var temp0 = arg0;\n        storage[0x00] = storage[0x00] - temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] - temp0;\n        var temp2 = temp1 + 0x02;\n        storage[temp2] = storage[temp2] - temp0 * storage[0x02];\n        var0 = var1;\n        var temp3 = (var0 * 0x05) / 0x5f;\n        var2 = storage[0x00];\n        var1 = temp3;\n        var3 = var1 * (0x01 << 0x40);\n    \n        if (!var2) { assert(); }\n    \n        storage[0x02] = storage[0x02] + var3 / var2;\n        var temp4 = memory[0x40:0x60];\n        var temp5 = var0;\n        var temp6;\n        temp6, memory[temp4:temp4 + 0x00] = address(msg.sender).call.gas(!temp5 * 0x08fc).value(temp5)(memory[temp4:temp4 + 0x00]);\n        var2 = !temp6;\n    \n        if (!var2) {\n            var temp7 = memory[0x40:0x60];\n            var temp8 = arg0;\n            memory[temp7:temp7 + 0x20] = temp8;\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + temp7 - temp9 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0x00]);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = temp8;\n            memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = var0;\n            var temp11 = memory[0x40:0x60];\n            log(memory[temp11:temp11 + temp10 - temp11 + 0x40], [0xed7a144fad14804d5c249145e3e0e2b63a9eb455b76aee5bc92d711e9bba3e4a, msg.sender]);\n            return var0;\n        } else {\n            var temp12 = returndata.length;\n            memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x4000aea0 > var0) {\n            if (0x23b872dd > var0) {\n                if (var0 == 0x65318b) {\n                    // Dispatch table entry for dividendsOf(address)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0140;\n                    var var2 = 0x04;\n                    var var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = dividendsOf(var2, var3);\n                \n                label_0140:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = var1;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n                } else if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0167;\n                    var2 = name();\n                \n                label_0167:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = 0x20;\n                    var temp3 = var2;\n                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n                    var3 = temp2;\n                    var var4 = var3;\n                    var var5 = var4 + 0x40;\n                    var var6 = temp3 + 0x20;\n                    var var7 = memory[temp3:temp3 + 0x20];\n                    var var8 = var7;\n                    var var9 = var5;\n                    var var10 = var6;\n                    var var11 = 0x00;\n                \n                    if (var11 >= var8) {\n                    label_01A1:\n                        var temp4 = var7;\n                        var5 = temp4 + var5;\n                        var6 = temp4 & 0x1f;\n                    \n                        if (!var6) {\n                            var temp5 = memory[0x40:0x60];\n                            return memory[temp5:temp5 + var5 - temp5];\n                        } else {\n                            var temp6 = var6;\n                            var temp7 = var5 - temp6;\n                            memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                            var temp8 = memory[0x40:0x60];\n                            return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                        }\n                    } else {\n                    label_0192:\n                        var temp9 = var11;\n                        memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                        var11 = temp9 + 0x20;\n                    \n                        if (var11 >= var8) { goto label_01A1; }\n                        else { goto label_0192; }\n                    }\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0215;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = approve(var2, var3);\n                \n                label_0215:\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = !!var1;\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0140;\n                    var1 = totalSupply();\n                    goto label_0140;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0215;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = transferFrom(var2, var3);\n                goto label_0215;\n            } else if (var0 == 0x259bfdd7) {\n                // Dispatch table entry for currentPrices()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0296;\n                var1, var2, var3 = currentPrices();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1;\n                memory[temp12 + 0x20:temp12 + 0x20 + 0x20] = var2;\n                memory[temp12 + 0x40:temp12 + 0x40 + 0x20] = var3;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x60];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = decimals();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n            } else if (var0 == 0x3472956c) {\n                // Dispatch table entry for calculateResult(uint256,bool,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0140;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = calculateResult(var2, var3);\n                goto label_0140;\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0140;\n                var1 = withdraw();\n                goto label_0140;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa6f2ae3a > var0) {\n            if (var0 == 0x4000aea0) {\n                // Dispatch table entry for transferAndCall(address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0215;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = transferAndCall(var2, var3);\n                goto label_0215;\n            } else if (var0 == 0x57f6b812) {\n                // Dispatch table entry for allInfoFor(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f3;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1, var2, var3, var4, var5, var6, var7, var8 = allInfoFor(var2);\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var1;\n                memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = var2;\n                memory[temp16 + 0x40:temp16 + 0x40 + 0x20] = var3;\n                memory[temp16 + 0x60:temp16 + 0x60 + 0x20] = var4;\n                memory[temp16 + 0x80:temp16 + 0x80 + 0x20] = var5;\n                memory[temp16 + 0xa0:temp16 + 0xa0 + 0x20] = var6;\n                memory[temp16 + 0xc0:temp16 + 0xc0 + 0x20] = var7;\n                memory[temp16 + 0xe0:temp16 + 0xe0 + 0x20] = var8;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + temp16 - temp17 + 0x0100];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0140;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = balanceOf(var2, var3);\n                goto label_0140;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0167;\n                var2 = symbol();\n                goto label_0167;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa6f2ae3a) {\n            // Dispatch table entry for buy()\n            var1 = 0x0140;\n            var1 = buy();\n            goto label_0140;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0215;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = transfer(var2, var3);\n            goto label_0215;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0140;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = allowance(var2, var3);\n            goto label_0140;\n        } else if (var0 == 0xe4849b32) {\n            // Dispatch table entry for sell(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0140;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = sell(var2, var3);\n            goto label_0140;\n        } else if (var0 == 0xfdb5a03e) {\n            // Dispatch table entry for reinvest()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0140;\n            var1 = reinvest();\n            goto label_0140;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function dividendsOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        r0 = func_0537(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2 + 0x01;\n        var temp4 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp4;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & (0x01 << 0xa0) - 0x01]);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var1 = 0x00;\n        memory[var1:var1 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[var1:var1 + 0x40]);\n        memory[var1:var1 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp2 + 0x01;\n    \n        if (var0 > storage[keccak256(memory[var1:var1 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp3 + 0x01;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] - var0;\n        var var2 = 0x067a;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = var0;\n        return func_0AFF(var3, var4, var5);\n    }\n    \n    function calculateResult(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = !!msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = !!msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        r0 = func_06D0(arg0, arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function transferAndCall(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = temp0 + temp1;\n        var var1 = temp0;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1 + var3;\n        var3 = temp2;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var3;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var3 = temp4;\n        var var4 = var2;\n        var2 = temp3 + 0x20;\n    \n        if ((var3 > 0x0100000000) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var0 = var2;\n        var1 = var3;\n        var2 = 0x00;\n        var3 = 0x08af;\n        var4 = msg.sender;\n        var var5 = arg0;\n        var var6 = arg1;\n        var3 = func_0AFF(var4, var5, var6);\n        var3 = address(arg0).code.length;\n    \n        if (!(var3 & 0xffffffff)) {\n        label_097A:\n            return 0x01;\n        } else {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x6be32e73 << 0xe0;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = msg.sender;\n            memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = arg1;\n            memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x60;\n            var temp6 = var1;\n            memory[temp5 + 0x64:temp5 + 0x64 + 0x20] = temp6;\n            var4 = arg0 & (0x01 << 0xa0) - 0x01;\n            var5 = 0x6be32e73;\n            var temp7 = temp5 + 0x84;\n            memory[temp7:temp7 + temp6] = msg.data[var0:var0 + temp6];\n            memory[temp7 + temp6:temp7 + temp6 + 0x20] = 0x00;\n            var6 = temp7 + (temp6 + 0x1f & ~0x1f);\n            var var7 = 0x20;\n            var var8 = memory[0x40:0x60];\n            var var9 = var6 - var8;\n            var var10 = var8;\n            var var11 = 0x00;\n            var var12 = var4;\n            var var13 = !address(var12).code.length;\n        \n            if (var13) { revert(memory[0x00:0x00]); }\n        \n            var temp8;\n            temp8, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n            var7 = !temp8;\n        \n            if (!var7) {\n                var4 = memory[0x40:0x60];\n                var5 = returndata.length;\n            \n                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (memory[var4:var4 + 0x20]) { goto label_097A; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var temp9 = returndata.length;\n                memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function allInfoFor(var arg0) returns (var r0, var arg0, var r2, var r3, var r4, var r5, var r6, var r7) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        r2 = address(this).balance;\n        r3 = 0x00;\n        r4 = r3;\n        r5 = r4;\n        r6 = r5;\n        r7 = r6;\n        var var5 = r7;\n        var var6 = var5;\n        var var7 = 0x0998;\n        var7 = totalSupply();\n        r3 = var7;\n        var7 = 0x09a2;\n        var var8;\n        var var9;\n        var7, var8, var9 = currentPrices();\n        r4 = var7;\n        r5 = var8;\n        r6 = var9;\n        var7 = 0x09b2;\n        var8 = arg0;\n        var7 = func_09DA(var8);\n        r7 = var7;\n        var7 = 0x09bd;\n        var8 = arg0;\n        var7 = func_0537(var8);\n        var5 = var7;\n        var7 = var5;\n        var8 = 0x09cc;\n        var9 = r7;\n        var var10 = 0x00;\n        var var11 = var10;\n        var8 = func_06D0(var9, var10, var11);\n        var temp0 = r7;\n        r7 = var8 + var7;\n        var temp1 = r5;\n        r5 = temp0;\n        var temp2 = r3;\n        r3 = temp1;\n        arg0 = temp2;\n        var temp3 = r6;\n        r6 = var5;\n        var temp4 = r4;\n        r4 = temp3;\n        var temp5 = r2;\n        r2 = temp4;\n        r0 = temp5;\n        return r0, arg0, r2, r3, r4, r5, r6, r7;\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        r0 = func_09DA(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x067d;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        return func_0AFF(var2, var3, var4);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;\n        var temp2 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp2 & arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & arg1;\n        memory[0x20:0x40] = temp3 + 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function sell(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = arg0;\n        var var1 = 0x0a75;\n        var var2 = msg.sender;\n        var1 = func_09DA(var2);\n    \n        if (var1 < var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x0a89;\n        var1 = arg0;\n        return func_0CC4(var1);\n    }\n    \n    function func_0537(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var var1 = 0x01 << 0x40;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40]) + 0x02];\n        var var3 = 0x0562;\n        var var4 = arg0;\n        var3 = func_09DA(var4);\n        var2 = storage[0x02] * var3 - var2;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x12;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4461696c792044697673204e6574776f726b << 0x70;\n        return r0;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function currentPrices() returns (var r0, var r1, var r2) {\n        r1 = 0x00;\n        r2 = r1;\n        var var2 = 0x00;\n        var var3 = 0x0de0b6b3a7640000;\n        var var4 = 0x069a;\n        var4 = totalSupply();\n        var4 = var4 * 0x02540be400;\n    \n        if (!var3) { assert(); }\n    \n        var temp0 = var4 / var3 + 0x038d7ea4c68000;\n        r2 = (temp0 * 0x5f) / 0x64;\n        r1 = (temp0 * 0x64) / 0x50;\n        r0 = temp0;\n        return r0, r1, r2;\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function func_06D0(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x06dd;\n        var var4;\n        var var5;\n        var3, var4, var5 = currentPrices();\n        var1 = var4;\n        var2 = var5;\n        var3 = 0x00;\n    \n        if (arg1) {\n            var3 = var1;\n            var4 = 0x00;\n        \n            if (arg1) {\n            label_0703:\n                var5 = 0x50;\n            \n                if (arg1) {\n                label_0712:\n                    var var6 = 0x02540be400 * 0x64;\n                \n                    if (!var5) { assert(); }\n                \n                label_0723:\n                    var4 = var6 / var5;\n                    var5 = arg1;\n                \n                    if (var5) {\n                        var5 = !arg2;\n                    \n                        if (var5) { goto label_0742; }\n                        else { goto label_0737; }\n                    } else if (var5) {\n                    label_0742:\n                    \n                        if (!var5) {\n                            if (!arg2) {\n                                var5 = 0x0de0b6b3a7640000;\n                                var temp0 = arg0;\n                                var6 = temp0 * var3 - temp0 * ((var4 * (var5 + temp0)) / 0x1bc16d674ec80000);\n                            \n                            label_0789:\n                                return var6 / var5;\n                            } else {\n                                var5 = 0x0de0b6b3a7640000;\n                                var temp1 = arg0;\n                                var6 = temp1 * ((var4 * (var5 + temp1)) / 0x1bc16d674ec80000) + temp1 * var3;\n                                goto label_0789;\n                            }\n                        } else if (!arg2) {\n                            var temp2 = var4;\n                            var5 = temp2 * 0x02;\n                            var6 = var3 * 0x02;\n                            var var7 = temp2;\n                            var var8 = 0x07b2;\n                            var temp3 = var7 + var6;\n                            var var9 = var7 * arg0 * 0x08 + temp3 * temp3;\n                            var8 = func_0BB6(var9);\n                            var6 = var8 - var7 - var6 * 0x0de0b6b3a7640000;\n                        \n                            if (var5) { goto label_0789; }\n                            else { assert(); }\n                        } else {\n                            var temp4 = var4;\n                            var5 = temp4 * 0x02;\n                            var6 = temp4;\n                            var7 = 0x0772;\n                            var temp5 = var3;\n                            var8 = (temp5 * 0x04 * temp5 + var6 * var6) - temp5 * 0x04 * var6 - arg0 * 0x08 * var6;\n                            var7 = func_0BB6(var8);\n                            var6 = var3 * 0x02 - var7 - var6 * 0x0de0b6b3a7640000;\n                        \n                            if (var5) { goto label_0789; }\n                            else { assert(); }\n                        }\n                    } else {\n                    label_0737:\n                        var5 = !arg1;\n                    \n                        if (!var5) { goto label_0742; }\n                    \n                        var5 = arg2;\n                        goto label_0742;\n                    }\n                } else {\n                label_070C:\n                    var6 = 0x5f;\n                    var6 = var6 * 0x02540be400;\n                \n                    if (var5) { goto label_0723; }\n                    else { assert(); }\n                }\n            } else {\n            label_06FD:\n                var5 = 0x64;\n            \n                if (arg1) { goto label_0712; }\n                else { goto label_070C; }\n            }\n        } else {\n            var4 = var2;\n            var3 = var4;\n            var4 = 0x00;\n        \n            if (arg1) { goto label_0703; }\n            else { goto label_06FD; }\n        }\n    }\n    \n    function withdraw() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x081d;\n        var var3 = msg.sender;\n        var2 = func_0537(var3);\n        var temp0 = var2;\n        var1 = temp0;\n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]) + 0x02;\n        storage[temp2] = var1 * (0x01 << 0x40) + storage[temp2];\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp1).call.gas(!var1 * 0x08fc).value(var1)(memory[temp3:temp3 + 0x00]);\n        var2 = !temp4;\n    \n        if (!var2) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = var1;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364, msg.sender]);\n            return var1;\n        } else {\n            var temp7 = returndata.length;\n            memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_09DA(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x222227 << 0xe9;\n        return r0;\n    }\n    \n    function buy() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.value <= var0) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0a2b;\n        var var2 = msg.value;\n        return func_0BED(var2);\n    }\n    \n    function reinvest() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0a9b;\n        var var3 = msg.sender;\n        var2 = func_0537(var3);\n        var temp0 = var2;\n        var1 = temp0;\n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]) + 0x02;\n        storage[temp2] = var1 * (0x01 << 0x40) + storage[temp2];\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = var1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xbd654390d0d973e8c8376ed6053be8658870df892687852cc5c914d700291b87, msg.sender]);\n        var2 = 0x0af9;\n        var3 = var1;\n        return func_0BED(var3);\n    }\n    \n    function func_0AFF(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = temp0 & arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg2;\n        storage[temp2] = storage[temp2] - temp3;\n        var temp4 = temp2 + 0x02;\n        storage[temp4] = storage[temp4] - temp3 * storage[0x02];\n        var temp5 = arg1 & temp0;\n        memory[0x00:0x20] = temp5;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        storage[temp6] = temp3 + storage[temp6];\n        var temp7 = temp6 + 0x02;\n        storage[temp7] = storage[temp7] + temp3 * storage[0x02];\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = temp3;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & (0x01 << 0xa0) - 0x01, stack[-3] & (0x01 << 0xa0) - 0x01]);\n        return 0x01;\n    }\n    \n    function func_0BB6(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_0BE7:\n            return var0;\n        } else {\n        label_0BC8:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_0BE7; }\n            else { goto label_0BC8; }\n        }\n    }\n    \n    function func_0BED(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = (arg0 * 0x14) / 0x64;\n        var var2 = 0x0c02;\n        var var3 = arg0;\n        var var4 = 0x01;\n        var var5 = var0;\n        var2 = func_06D0(var3, var4, var5);\n        var temp0 = var2;\n        storage[0x00] = temp0 + storage[0x00];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = temp0 + storage[temp1];\n        var temp2 = temp1 + 0x02;\n        storage[temp2] = storage[temp2] + temp0 * storage[0x02];\n        var2 = storage[0x00];\n        var0 = temp0;\n        var3 = var1 * (0x01 << 0x40);\n    \n        if (!var2) { assert(); }\n    \n        storage[0x02] = var3 / var2 + storage[0x02];\n        var temp3 = memory[0x40:0x60];\n        var temp4 = var0;\n        memory[temp3:temp3 + 0x20] = temp4;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp3 - temp5 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, msg.sender]);\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = arg0;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp4;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + temp6 - temp7 + 0x40], [0x1cbc5ab135991bd2b6a4b034a04aa2aa086dac1371cb9b16b8b5e2ed6b036bed, msg.sender]);\n        return temp4;\n    }\n    \n    function func_0CC4(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg0 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0cec;\n        var var2 = arg0;\n        var var3 = 0x00;\n        var var4 = var3;\n        var1 = func_06D0(var2, var3, var4);\n        var temp0 = arg0;\n        storage[0x00] = storage[0x00] - temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] - temp0;\n        var temp2 = temp1 + 0x02;\n        storage[temp2] = storage[temp2] - temp0 * storage[0x02];\n        var0 = var1;\n        var temp3 = (var0 * 0x05) / 0x5f;\n        var2 = storage[0x00];\n        var1 = temp3;\n        var3 = var1 * (0x01 << 0x40);\n    \n        if (!var2) { assert(); }\n    \n        storage[0x02] = storage[0x02] + var3 / var2;\n        var temp4 = memory[0x40:0x60];\n        var temp5 = var0;\n        var temp6;\n        temp6, memory[temp4:temp4 + 0x00] = address(msg.sender).call.gas(!temp5 * 0x08fc).value(temp5)(memory[temp4:temp4 + 0x00]);\n        var2 = !temp6;\n    \n        if (!var2) {\n            var temp7 = memory[0x40:0x60];\n            var temp8 = arg0;\n            memory[temp7:temp7 + 0x20] = temp8;\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + temp7 - temp9 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0x00]);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = temp8;\n            memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = var0;\n            var temp11 = memory[0x40:0x60];\n            log(memory[temp11:temp11 + temp10 - temp11 + 0x40], [0xed7a144fad14804d5c249145e3e0e2b63a9eb455b76aee5bc92d711e9bba3e4a, msg.sender]);\n            return var0;\n        } else {\n            var temp12 = returndata.length;\n            memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x4000aea0 > var0) {\n            if (0x23b872dd > var0) {\n                if (var0 == 0x65318b) {\n                    // Dispatch table entry for dividendsOf(address)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0140;\n                    var var2 = 0x04;\n                    var var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = dividendsOf(var2, var3);\n                \n                label_0140:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = var1;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n                } else if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0167;\n                    var2 = name();\n                \n                label_0167:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = 0x20;\n                    var temp3 = var2;\n                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n                    var3 = temp2;\n                    var var4 = var3;\n                    var var5 = var4 + 0x40;\n                    var var6 = temp3 + 0x20;\n                    var var7 = memory[temp3:temp3 + 0x20];\n                    var var8 = var7;\n                    var var9 = var5;\n                    var var10 = var6;\n                    var var11 = 0x00;\n                \n                    if (var11 >= var8) {\n                    label_01A1:\n                        var temp4 = var7;\n                        var5 = temp4 + var5;\n                        var6 = temp4 & 0x1f;\n                    \n                        if (!var6) {\n                            var temp5 = memory[0x40:0x60];\n                            return memory[temp5:temp5 + var5 - temp5];\n                        } else {\n                            var temp6 = var6;\n                            var temp7 = var5 - temp6;\n                            memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                            var temp8 = memory[0x40:0x60];\n                            return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                        }\n                    } else {\n                    label_0192:\n                        var temp9 = var11;\n                        memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                        var11 = temp9 + 0x20;\n                    \n                        if (var11 >= var8) { goto label_01A1; }\n                        else { goto label_0192; }\n                    }\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0215;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = approve(var2, var3);\n                \n                label_0215:\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = !!var1;\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0140;\n                    var1 = totalSupply();\n                    goto label_0140;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0215;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = transferFrom(var2, var3);\n                goto label_0215;\n            } else if (var0 == 0x259bfdd7) {\n                // Dispatch table entry for currentPrices()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0296;\n                var1, var2, var3 = currentPrices();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var1;\n                memory[temp12 + 0x20:temp12 + 0x20 + 0x20] = var2;\n                memory[temp12 + 0x40:temp12 + 0x40 + 0x20] = var3;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x60];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = decimals();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n            } else if (var0 == 0x3472956c) {\n                // Dispatch table entry for calculateResult(uint256,bool,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0140;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = calculateResult(var2, var3);\n                goto label_0140;\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0140;\n                var1 = withdraw();\n                goto label_0140;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa6f2ae3a > var0) {\n            if (var0 == 0x4000aea0) {\n                // Dispatch table entry for transferAndCall(address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0215;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = transferAndCall(var2, var3);\n                goto label_0215;\n            } else if (var0 == 0x57f6b812) {\n                // Dispatch table entry for allInfoFor(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f3;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1, var2, var3, var4, var5, var6, var7, var8 = allInfoFor(var2);\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var1;\n                memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = var2;\n                memory[temp16 + 0x40:temp16 + 0x40 + 0x20] = var3;\n                memory[temp16 + 0x60:temp16 + 0x60 + 0x20] = var4;\n                memory[temp16 + 0x80:temp16 + 0x80 + 0x20] = var5;\n                memory[temp16 + 0xa0:temp16 + 0xa0 + 0x20] = var6;\n                memory[temp16 + 0xc0:temp16 + 0xc0 + 0x20] = var7;\n                memory[temp16 + 0xe0:temp16 + 0xe0 + 0x20] = var8;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + temp16 - temp17 + 0x0100];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0140;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = balanceOf(var2, var3);\n                goto label_0140;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0167;\n                var2 = symbol();\n                goto label_0167;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa6f2ae3a) {\n            // Dispatch table entry for buy()\n            var1 = 0x0140;\n            var1 = buy();\n            goto label_0140;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0215;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = transfer(var2, var3);\n            goto label_0215;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0140;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = allowance(var2, var3);\n            goto label_0140;\n        } else if (var0 == 0xe4849b32) {\n            // Dispatch table entry for sell(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0140;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = sell(var2, var3);\n            goto label_0140;\n        } else if (var0 == 0xfdb5a03e) {\n            // Dispatch table entry for reinvest()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0140;\n            var1 = reinvest();\n            goto label_0140;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function dividendsOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        r0 = func_0537(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2 + 0x01;\n        var temp4 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp4;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & (0x01 << 0xa0) - 0x01]);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = temp0 & msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        var var0 = msg.data[temp1 + 0x40:temp1 + 0x40 + 0x20];\n        var var1 = 0x00;\n        memory[var1:var1 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[var1:var1 + 0x40]);\n        memory[var1:var1 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp2 + 0x01;\n    \n        if (var0 > storage[keccak256(memory[var1:var1 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp3 + 0x01;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] - var0;\n        var var2 = 0x067a;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = var0;\n        return func_0AFF(var3, var4, var5);\n    }\n    \n    function calculateResult(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = !!msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = !!msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        r0 = func_06D0(arg0, arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function transferAndCall(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = temp0 + temp1;\n        var var1 = temp0;\n        var var2 = var1 + 0x60;\n        var var3 = msg.data[var1 + 0x40:var1 + 0x40 + 0x20];\n    \n        if (var3 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1 + var3;\n        var3 = temp2;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var3;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var3 = temp4;\n        var var4 = var2;\n        var2 = temp3 + 0x20;\n    \n        if ((var3 > 0x0100000000) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var0 = var2;\n        var1 = var3;\n        var2 = 0x00;\n        var3 = 0x08af;\n        var4 = msg.sender;\n        var var5 = arg0;\n        var var6 = arg1;\n        var3 = func_0AFF(var4, var5, var6);\n        var3 = address(arg0).code.length;\n    \n        if (!(var3 & 0xffffffff)) {\n        label_097A:\n            return 0x01;\n        } else {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x6be32e73 << 0xe0;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = msg.sender;\n            memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = arg1;\n            memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x60;\n            var temp6 = var1;\n            memory[temp5 + 0x64:temp5 + 0x64 + 0x20] = temp6;\n            var4 = arg0 & (0x01 << 0xa0) - 0x01;\n            var5 = 0x6be32e73;\n            var temp7 = temp5 + 0x84;\n            memory[temp7:temp7 + temp6] = msg.data[var0:var0 + temp6];\n            memory[temp7 + temp6:temp7 + temp6 + 0x20] = 0x00;\n            var6 = temp7 + (temp6 + 0x1f & ~0x1f);\n            var var7 = 0x20;\n            var var8 = memory[0x40:0x60];\n            var var9 = var6 - var8;\n            var var10 = var8;\n            var var11 = 0x00;\n            var var12 = var4;\n            var var13 = !address(var12).code.length;\n        \n            if (var13) { revert(memory[0x00:0x00]); }\n        \n            var temp8;\n            temp8, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n            var7 = !temp8;\n        \n            if (!var7) {\n                var4 = memory[0x40:0x60];\n                var5 = returndata.length;\n            \n                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (memory[var4:var4 + 0x20]) { goto label_097A; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var temp9 = returndata.length;\n                memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function allInfoFor(var arg0) returns (var r0, var arg0, var r2, var r3, var r4, var r5, var r6, var r7) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        r2 = address(this).balance;\n        r3 = 0x00;\n        r4 = r3;\n        r5 = r4;\n        r6 = r5;\n        r7 = r6;\n        var var5 = r7;\n        var var6 = var5;\n        var var7 = 0x0998;\n        var7 = totalSupply();\n        r3 = var7;\n        var7 = 0x09a2;\n        var var8;\n        var var9;\n        var7, var8, var9 = currentPrices();\n        r4 = var7;\n        r5 = var8;\n        r6 = var9;\n        var7 = 0x09b2;\n        var8 = arg0;\n        var7 = func_09DA(var8);\n        r7 = var7;\n        var7 = 0x09bd;\n        var8 = arg0;\n        var7 = func_0537(var8);\n        var5 = var7;\n        var7 = var5;\n        var8 = 0x09cc;\n        var9 = r7;\n        var var10 = 0x00;\n        var var11 = var10;\n        var8 = func_06D0(var9, var10, var11);\n        var temp0 = r7;\n        r7 = var8 + var7;\n        var temp1 = r5;\n        r5 = temp0;\n        var temp2 = r3;\n        r3 = temp1;\n        arg0 = temp2;\n        var temp3 = r6;\n        r6 = var5;\n        var temp4 = r4;\n        r4 = temp3;\n        var temp5 = r2;\n        r2 = temp4;\n        r0 = temp5;\n        return r0, arg0, r2, r3, r4, r5, r6, r7;\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        r0 = func_09DA(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x067d;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        return func_0AFF(var2, var3, var4);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg0;\n        arg0 = temp0 & msg.data[temp1:temp1 + 0x20];\n        arg1 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20] & temp0;\n        var temp2 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp2 & arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & arg1;\n        memory[0x20:0x40] = temp3 + 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function sell(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x00;\n        var var0 = arg0;\n        var var1 = 0x0a75;\n        var var2 = msg.sender;\n        var1 = func_09DA(var2);\n    \n        if (var1 < var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x0a89;\n        var1 = arg0;\n        return func_0CC4(var1);\n    }\n    \n    function func_0537(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var var1 = 0x01 << 0x40;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40]) + 0x02];\n        var var3 = 0x0562;\n        var var4 = arg0;\n        var3 = func_09DA(var4);\n        var2 = storage[0x02] * var3 - var2;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x12;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4461696c792044697673204e6574776f726b << 0x70;\n        return r0;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function currentPrices() returns (var r0, var r1, var r2) {\n        r1 = 0x00;\n        r2 = r1;\n        var var2 = 0x00;\n        var var3 = 0x0de0b6b3a7640000;\n        var var4 = 0x069a;\n        var4 = totalSupply();\n        var4 = var4 * 0x02540be400;\n    \n        if (!var3) { assert(); }\n    \n        var temp0 = var4 / var3 + 0x038d7ea4c68000;\n        r2 = (temp0 * 0x5f) / 0x64;\n        r1 = (temp0 * 0x64) / 0x50;\n        r0 = temp0;\n        return r0, r1, r2;\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function func_06D0(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x06dd;\n        var var4;\n        var var5;\n        var3, var4, var5 = currentPrices();\n        var1 = var4;\n        var2 = var5;\n        var3 = 0x00;\n    \n        if (arg1) {\n            var3 = var1;\n            var4 = 0x00;\n        \n            if (arg1) {\n            label_0703:\n                var5 = 0x50;\n            \n                if (arg1) {\n                label_0712:\n                    var var6 = 0x02540be400 * 0x64;\n                \n                    if (!var5) { assert(); }\n                \n                label_0723:\n                    var4 = var6 / var5;\n                    var5 = arg1;\n                \n                    if (var5) {\n                        var5 = !arg2;\n                    \n                        if (var5) { goto label_0742; }\n                        else { goto label_0737; }\n                    } else if (var5) {\n                    label_0742:\n                    \n                        if (!var5) {\n                            if (!arg2) {\n                                var5 = 0x0de0b6b3a7640000;\n                                var temp0 = arg0;\n                                var6 = temp0 * var3 - temp0 * ((var4 * (var5 + temp0)) / 0x1bc16d674ec80000);\n                            \n                            label_0789:\n                                return var6 / var5;\n                            } else {\n                                var5 = 0x0de0b6b3a7640000;\n                                var temp1 = arg0;\n                                var6 = temp1 * ((var4 * (var5 + temp1)) / 0x1bc16d674ec80000) + temp1 * var3;\n                                goto label_0789;\n                            }\n                        } else if (!arg2) {\n                            var temp2 = var4;\n                            var5 = temp2 * 0x02;\n                            var6 = var3 * 0x02;\n                            var var7 = temp2;\n                            var var8 = 0x07b2;\n                            var temp3 = var7 + var6;\n                            var var9 = var7 * arg0 * 0x08 + temp3 * temp3;\n                            var8 = func_0BB6(var9);\n                            var6 = var8 - var7 - var6 * 0x0de0b6b3a7640000;\n                        \n                            if (var5) { goto label_0789; }\n                            else { assert(); }\n                        } else {\n                            var temp4 = var4;\n                            var5 = temp4 * 0x02;\n                            var6 = temp4;\n                            var7 = 0x0772;\n                            var temp5 = var3;\n                            var8 = (temp5 * 0x04 * temp5 + var6 * var6) - temp5 * 0x04 * var6 - arg0 * 0x08 * var6;\n                            var7 = func_0BB6(var8);\n                            var6 = var3 * 0x02 - var7 - var6 * 0x0de0b6b3a7640000;\n                        \n                            if (var5) { goto label_0789; }\n                            else { assert(); }\n                        }\n                    } else {\n                    label_0737:\n                        var5 = !arg1;\n                    \n                        if (!var5) { goto label_0742; }\n                    \n                        var5 = arg2;\n                        goto label_0742;\n                    }\n                } else {\n                label_070C:\n                    var6 = 0x5f;\n                    var6 = var6 * 0x02540be400;\n                \n                    if (var5) { goto label_0723; }\n                    else { assert(); }\n                }\n            } else {\n            label_06FD:\n                var5 = 0x64;\n            \n                if (arg1) { goto label_0712; }\n                else { goto label_070C; }\n            }\n        } else {\n            var4 = var2;\n            var3 = var4;\n            var4 = 0x00;\n        \n            if (arg1) { goto label_0703; }\n            else { goto label_06FD; }\n        }\n    }\n    \n    function withdraw() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x081d;\n        var var3 = msg.sender;\n        var2 = func_0537(var3);\n        var temp0 = var2;\n        var1 = temp0;\n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]) + 0x02;\n        storage[temp2] = var1 * (0x01 << 0x40) + storage[temp2];\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp1).call.gas(!var1 * 0x08fc).value(var1)(memory[temp3:temp3 + 0x00]);\n        var2 = !temp4;\n    \n        if (!var2) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = var1;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364, msg.sender]);\n            return var1;\n        } else {\n            var temp7 = returndata.length;\n            memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_09DA(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x222227 << 0xe9;\n        return r0;\n    }\n    \n    function buy() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.value <= var0) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0a2b;\n        var var2 = msg.value;\n        return func_0BED(var2);\n    }\n    \n    function reinvest() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0a9b;\n        var var3 = msg.sender;\n        var2 = func_0537(var3);\n        var temp0 = var2;\n        var1 = temp0;\n        var temp1 = msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]) + 0x02;\n        storage[temp2] = var1 * (0x01 << 0x40) + storage[temp2];\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = var1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xbd654390d0d973e8c8376ed6053be8658870df892687852cc5c914d700291b87, msg.sender]);\n        var2 = 0x0af9;\n        var3 = var1;\n        return func_0BED(var3);\n    }\n    \n    function func_0AFF(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = temp0 & arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg2;\n        storage[temp2] = storage[temp2] - temp3;\n        var temp4 = temp2 + 0x02;\n        storage[temp4] = storage[temp4] - temp3 * storage[0x02];\n        var temp5 = arg1 & temp0;\n        memory[0x00:0x20] = temp5;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        storage[temp6] = temp3 + storage[temp6];\n        var temp7 = temp6 + 0x02;\n        storage[temp7] = storage[temp7] + temp3 * storage[0x02];\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = temp3;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & (0x01 << 0xa0) - 0x01, stack[-3] & (0x01 << 0xa0) - 0x01]);\n        return 0x01;\n    }\n    \n    function func_0BB6(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_0BE7:\n            return var0;\n        } else {\n        label_0BC8:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_0BE7; }\n            else { goto label_0BC8; }\n        }\n    }\n    \n    function func_0BED(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = (arg0 * 0x14) / 0x64;\n        var var2 = 0x0c02;\n        var var3 = arg0;\n        var var4 = 0x01;\n        var var5 = var0;\n        var2 = func_06D0(var3, var4, var5);\n        var temp0 = var2;\n        storage[0x00] = temp0 + storage[0x00];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = temp0 + storage[temp1];\n        var temp2 = temp1 + 0x02;\n        storage[temp2] = storage[temp2] + temp0 * storage[0x02];\n        var2 = storage[0x00];\n        var0 = temp0;\n        var3 = var1 * (0x01 << 0x40);\n    \n        if (!var2) { assert(); }\n    \n        storage[0x02] = var3 / var2 + storage[0x02];\n        var temp3 = memory[0x40:0x60];\n        var temp4 = var0;\n        memory[temp3:temp3 + 0x20] = temp4;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp3 - temp5 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, msg.sender]);\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = arg0;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp4;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + temp6 - temp7 + 0x40], [0x1cbc5ab135991bd2b6a4b034a04aa2aa086dac1371cb9b16b8b5e2ed6b036bed, msg.sender]);\n        return temp4;\n    }\n    \n    function func_0CC4(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg0 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0cec;\n        var var2 = arg0;\n        var var3 = 0x00;\n        var var4 = var3;\n        var1 = func_06D0(var2, var3, var4);\n        var temp0 = arg0;\n        storage[0x00] = storage[0x00] - temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] - temp0;\n        var temp2 = temp1 + 0x02;\n        storage[temp2] = storage[temp2] - temp0 * storage[0x02];\n        var0 = var1;\n        var temp3 = (var0 * 0x05) / 0x5f;\n        var2 = storage[0x00];\n        var1 = temp3;\n        var3 = var1 * (0x01 << 0x40);\n    \n        if (!var2) { assert(); }\n    \n        storage[0x02] = storage[0x02] + var3 / var2;\n        var temp4 = memory[0x40:0x60];\n        var temp5 = var0;\n        var temp6;\n        temp6, memory[temp4:temp4 + 0x00] = address(msg.sender).call.gas(!temp5 * 0x08fc).value(temp5)(memory[temp4:temp4 + 0x00]);\n        var2 = !temp6;\n    \n        if (!var2) {\n            var temp7 = memory[0x40:0x60];\n            var temp8 = arg0;\n            memory[temp7:temp7 + 0x20] = temp8;\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + temp7 - temp9 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0x00]);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = temp8;\n            memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = var0;\n            var temp11 = memory[0x40:0x60];\n            log(memory[temp11:temp11 + temp10 - temp11 + 0x40], [0xed7a144fad14804d5c249145e3e0e2b63a9eb455b76aee5bc92d711e9bba3e4a, msg.sender]);\n            return var0;\n        } else {\n            var temp12 = returndata.length;\n            memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 54.455952882766724,
	"usage": {
		"completion_tokens": 774,
		"prompt_tokens": 11001,
		"total_tokens": 11775
	}
}