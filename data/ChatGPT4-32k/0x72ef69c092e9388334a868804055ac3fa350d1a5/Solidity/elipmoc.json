{
	"address": "0x72ef69c092e9388334a868804055ac3fa350d1a5",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a simplified Solidity implementation of the given pseudo-code:\n\n```solidity\npragma solidity >=0.5.0 <0.9.0;\n\ncontract ERC20Token {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _totalSupply;\n    address payable private _getPrice;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(_balanceOf[msg.sender] >= value, \"ERC20: transfer amount exceeds balance\");\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= _balanceOf[from], \"ERC20: transfer amount exceeds balance\");\n        require(value <= _allowance[from][msg.sender], \"ERC20: transfer amount exceeds allowance\");\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        _allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balanceOf[owner];\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _allowance[msg.sender][spender] += addedValue;\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _allowance[msg.sender][spender] -= subtractedValue;\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\n        return true;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"CONM\";\n    }\n\n    function name() public pure returns (string memory) {\n        return \"Coinerium\";\n    }\n}\n```\n\nPlease note that the code above is a simplification of the pseudo-code provided, and doesn't take into account the `_getPrice` address and related operations; also, the `_SafeDiv` function is replaced by the standard Solidity division operator `/`, and the `flush`, `withdraw` and `donate` functions are not included. For a full implementation, these elements should be considered and implemented accordingly.",
				"role": "assistant"
			}
		}
	],
	"created": 1701464658,
	"id": "chatcmpl-8R4yIsxq7J6UqDKwpBXkP6pmz62Fq",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 09:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\naddress _getPrice; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction 0x1032(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0, 'ERC20: transfer to the zero address');\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0], 'SafeMath: subtraction overflow');\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    v2 = address(varg1);\n    v3 = _balanceOf[v2] + varg0;\n    require(v3 >= _balanceOf[v2], 'SafeMath: addition overflow');\n    v4 = address(varg1);\n    _balanceOf[v4] = v3;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'Coinerium';\n    }\n    return v0;\n}\n\nfunction 0x12d5(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = varg1 * varg0;\n        assert(varg1);\n        require(v0 / varg1 == varg0, 'SafeMath: multiplication overflow');\n    } else {\n        v0 = v1 = 0;\n    }\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0, 'SafeMath: division by zero');\n    assert(varg0);\n    return varg1 / varg0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0xe37(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    0x1032(varg2, varg1, varg0);\n    require(varg2 <= _allowance[msg.sender], 'SafeMath: subtraction overflow');\n    0xe37(_allowance[msg.sender] - varg2, msg.sender, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _balanceOf[msg.sender]);\n    require(_getPrice.code.size);\n    v0, v1 = _getPrice.price().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    v2 = 0x12d5(0xde0b6b3a7640000, varg0);\n    require(v1 > 0, 'SafeMath: division by zero');\n    assert(v1);\n    v3 = v2 / v1;\n    if (_balanceOf[msg.sender] <= v3) {\n        v4 = 0x12d5(_balanceOf[msg.sender], v3);\n        require(_getPrice.code.size);\n        v5, v6 = _getPrice.price().gas(msg.gas);\n        require(v5); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        if (v4 != 0) {\n            v7 = v4 * v6;\n            assert(v4);\n            require(v7 / v4 == v6, 'SafeMath: multiplication overflow');\n        } else {\n            v7 = v8 = 0;\n        }\n        v9 = _SafeDiv(0xde0b6b3a7640000, v7);\n        v3 = v10 = 0x12d5(_totalSupply, v9);\n    }\n    require(msg.sender != 0, 'ERC20: burn from the zero address');\n    require(varg0 <= _totalSupply, 'SafeMath: subtraction overflow');\n    _totalSupply = _totalSupply - varg0;\n    require(varg0 <= _balanceOf[msg.sender], 'SafeMath: subtraction overflow');\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    emit Transfer(msg.sender, 0, varg0);\n    v11 = msg.sender.call().value(v3).gas(!v3 * 2300);\n    require(v11); // checks call status, propagates error data on error\n    return v3;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(_allowance[varg0] + varg1 >= _allowance[varg0], 'SafeMath: addition overflow');\n    0xe37(_allowance[varg0] + varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction flush() public payable { \n    require(_getPrice.code.size);\n    v0, v1 = _getPrice.price().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (msg.value != 0) {\n        v2 = msg.value * v1;\n        assert(msg.value);\n        require(v2 / msg.value == v1, 'SafeMath: multiplication overflow');\n    } else {\n        v2 = v3 = 0;\n    }\n    v4 = _SafeDiv(0xde0b6b3a7640000, v2);\n    require(msg.sender != 0, 'ERC20: mint to the zero address');\n    require(_totalSupply + v4 >= _totalSupply, 'SafeMath: addition overflow');\n    _totalSupply = _totalSupply + v4;\n    require(_balanceOf[msg.sender] + v4 >= _balanceOf[msg.sender], 'SafeMath: addition overflow');\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + v4;\n    emit Transfer(0, msg.sender, v4);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x434f4e4d00000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction getPrice() public nonPayable { \n    require(_getPrice.code.size);\n    v0, v1 = _getPrice.price().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _allowance[varg0], 'SafeMath: subtraction overflow');\n    0xe37(_allowance[varg0] - varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x1032(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction donate() public payable { \n}\n\nfunction 0xe37(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2) != 0, 'ERC20: approve from the zero address');\n    require(address(varg1) != 0, 'ERC20: approve to the zero address');\n    v0 = address(varg2);\n    v1 = address(varg1);\n    _allowance[v1] = varg0;\n    emit Approval(address(varg2), address(varg1), varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6b9f96ea > function_selector) {\n            if (0x23b872dd > function_selector) {\n                if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0x95ea7b3 == function_selector) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x2e1a7d4d == function_selector) {\n                withdraw(uint256);\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x39509351 == function_selector) {\n                increaseAllowance(address,uint256);\n            }\n        } else if (0xa457c2d7 > function_selector) {\n            if (0x6b9f96ea == function_selector) {\n                flush();\n            } else if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0x98d5fdca == function_selector) {\n                getPrice();\n            }\n        } else if (0xa457c2d7 == function_selector) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xed88c68e == function_selector) {\n            donate();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 09:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\naddress _getPrice; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction 0x1032(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0, 'ERC20: transfer to the zero address');\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0], 'SafeMath: subtraction overflow');\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    v2 = address(varg1);\n    v3 = _balanceOf[v2] + varg0;\n    require(v3 >= _balanceOf[v2], 'SafeMath: addition overflow');\n    v4 = address(varg1);\n    _balanceOf[v4] = v3;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'Coinerium';\n    }\n    return v0;\n}\n\nfunction 0x12d5(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = varg1 * varg0;\n        assert(varg1);\n        require(v0 / varg1 == varg0, 'SafeMath: multiplication overflow');\n    } else {\n        v0 = v1 = 0;\n    }\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0, 'SafeMath: division by zero');\n    assert(varg0);\n    return varg1 / varg0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0xe37(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    0x1032(varg2, varg1, varg0);\n    require(varg2 <= _allowance[msg.sender], 'SafeMath: subtraction overflow');\n    0xe37(_allowance[msg.sender] - varg2, msg.sender, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _balanceOf[msg.sender]);\n    require(_getPrice.code.size);\n    v0, v1 = _getPrice.price().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    v2 = 0x12d5(0xde0b6b3a7640000, varg0);\n    require(v1 > 0, 'SafeMath: division by zero');\n    assert(v1);\n    v3 = v2 / v1;\n    if (_balanceOf[msg.sender] <= v3) {\n        v4 = 0x12d5(_balanceOf[msg.sender], v3);\n        require(_getPrice.code.size);\n        v5, v6 = _getPrice.price().gas(msg.gas);\n        require(v5); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        if (v4 != 0) {\n            v7 = v4 * v6;\n            assert(v4);\n            require(v7 / v4 == v6, 'SafeMath: multiplication overflow');\n        } else {\n            v7 = v8 = 0;\n        }\n        v9 = _SafeDiv(0xde0b6b3a7640000, v7);\n        v3 = v10 = 0x12d5(_totalSupply, v9);\n    }\n    require(msg.sender != 0, 'ERC20: burn from the zero address');\n    require(varg0 <= _totalSupply, 'SafeMath: subtraction overflow');\n    _totalSupply = _totalSupply - varg0;\n    require(varg0 <= _balanceOf[msg.sender], 'SafeMath: subtraction overflow');\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    emit Transfer(msg.sender, 0, varg0);\n    v11 = msg.sender.call().value(v3).gas(!v3 * 2300);\n    require(v11); // checks call status, propagates error data on error\n    return v3;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(_allowance[varg0] + varg1 >= _allowance[varg0], 'SafeMath: addition overflow');\n    0xe37(_allowance[varg0] + varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction flush() public payable { \n    require(_getPrice.code.size);\n    v0, v1 = _getPrice.price().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (msg.value != 0) {\n        v2 = msg.value * v1;\n        assert(msg.value);\n        require(v2 / msg.value == v1, 'SafeMath: multiplication overflow');\n    } else {\n        v2 = v3 = 0;\n    }\n    v4 = _SafeDiv(0xde0b6b3a7640000, v2);\n    require(msg.sender != 0, 'ERC20: mint to the zero address');\n    require(_totalSupply + v4 >= _totalSupply, 'SafeMath: addition overflow');\n    _totalSupply = _totalSupply + v4;\n    require(_balanceOf[msg.sender] + v4 >= _balanceOf[msg.sender], 'SafeMath: addition overflow');\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + v4;\n    emit Transfer(0, msg.sender, v4);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x434f4e4d00000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction getPrice() public nonPayable { \n    require(_getPrice.code.size);\n    v0, v1 = _getPrice.price().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _allowance[varg0], 'SafeMath: subtraction overflow');\n    0xe37(_allowance[varg0] - varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x1032(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction donate() public payable { \n}\n\nfunction 0xe37(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2) != 0, 'ERC20: approve from the zero address');\n    require(address(varg1) != 0, 'ERC20: approve to the zero address');\n    v0 = address(varg2);\n    v1 = address(varg1);\n    _allowance[v1] = varg0;\n    emit Approval(address(varg2), address(varg1), varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6b9f96ea > function_selector) {\n            if (0x23b872dd > function_selector) {\n                if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0x95ea7b3 == function_selector) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x2e1a7d4d == function_selector) {\n                withdraw(uint256);\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x39509351 == function_selector) {\n                increaseAllowance(address,uint256);\n            }\n        } else if (0xa457c2d7 > function_selector) {\n            if (0x6b9f96ea == function_selector) {\n                flush();\n            } else if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0x98d5fdca == function_selector) {\n                getPrice();\n            }\n        } else if (0xa457c2d7 == function_selector) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xed88c68e == function_selector) {\n            donate();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 09:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\naddress _getPrice; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction 0x1032(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0, 'ERC20: transfer to the zero address');\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0], 'SafeMath: subtraction overflow');\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    v2 = address(varg1);\n    v3 = _balanceOf[v2] + varg0;\n    require(v3 >= _balanceOf[v2], 'SafeMath: addition overflow');\n    v4 = address(varg1);\n    _balanceOf[v4] = v3;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'Coinerium';\n    }\n    return v0;\n}\n\nfunction 0x12d5(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = varg1 * varg0;\n        assert(varg1);\n        require(v0 / varg1 == varg0, 'SafeMath: multiplication overflow');\n    } else {\n        v0 = v1 = 0;\n    }\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0, 'SafeMath: division by zero');\n    assert(varg0);\n    return varg1 / varg0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0xe37(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    0x1032(varg2, varg1, varg0);\n    require(varg2 <= _allowance[msg.sender], 'SafeMath: subtraction overflow');\n    0xe37(_allowance[msg.sender] - varg2, msg.sender, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _balanceOf[msg.sender]);\n    require(_getPrice.code.size);\n    v0, v1 = _getPrice.price().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    v2 = 0x12d5(0xde0b6b3a7640000, varg0);\n    require(v1 > 0, 'SafeMath: division by zero');\n    assert(v1);\n    v3 = v2 / v1;\n    if (_balanceOf[msg.sender] <= v3) {\n        v4 = 0x12d5(_balanceOf[msg.sender], v3);\n        require(_getPrice.code.size);\n        v5, v6 = _getPrice.price().gas(msg.gas);\n        require(v5); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        if (v4 != 0) {\n            v7 = v4 * v6;\n            assert(v4);\n            require(v7 / v4 == v6, 'SafeMath: multiplication overflow');\n        } else {\n            v7 = v8 = 0;\n        }\n        v9 = _SafeDiv(0xde0b6b3a7640000, v7);\n        v3 = v10 = 0x12d5(_totalSupply, v9);\n    }\n    require(msg.sender != 0, 'ERC20: burn from the zero address');\n    require(varg0 <= _totalSupply, 'SafeMath: subtraction overflow');\n    _totalSupply = _totalSupply - varg0;\n    require(varg0 <= _balanceOf[msg.sender], 'SafeMath: subtraction overflow');\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    emit Transfer(msg.sender, 0, varg0);\n    v11 = msg.sender.call().value(v3).gas(!v3 * 2300);\n    require(v11); // checks call status, propagates error data on error\n    return v3;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(_allowance[varg0] + varg1 >= _allowance[varg0], 'SafeMath: addition overflow');\n    0xe37(_allowance[varg0] + varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction flush() public payable { \n    require(_getPrice.code.size);\n    v0, v1 = _getPrice.price().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (msg.value != 0) {\n        v2 = msg.value * v1;\n        assert(msg.value);\n        require(v2 / msg.value == v1, 'SafeMath: multiplication overflow');\n    } else {\n        v2 = v3 = 0;\n    }\n    v4 = _SafeDiv(0xde0b6b3a7640000, v2);\n    require(msg.sender != 0, 'ERC20: mint to the zero address');\n    require(_totalSupply + v4 >= _totalSupply, 'SafeMath: addition overflow');\n    _totalSupply = _totalSupply + v4;\n    require(_balanceOf[msg.sender] + v4 >= _balanceOf[msg.sender], 'SafeMath: addition overflow');\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + v4;\n    emit Transfer(0, msg.sender, v4);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x434f4e4d00000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction getPrice() public nonPayable { \n    require(_getPrice.code.size);\n    v0, v1 = _getPrice.price().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _allowance[varg0], 'SafeMath: subtraction overflow');\n    0xe37(_allowance[varg0] - varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x1032(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction donate() public payable { \n}\n\nfunction 0xe37(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2) != 0, 'ERC20: approve from the zero address');\n    require(address(varg1) != 0, 'ERC20: approve to the zero address');\n    v0 = address(varg2);\n    v1 = address(varg1);\n    _allowance[v1] = varg0;\n    emit Approval(address(varg2), address(varg1), varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6b9f96ea > function_selector) {\n            if (0x23b872dd > function_selector) {\n                if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0x95ea7b3 == function_selector) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x2e1a7d4d == function_selector) {\n                withdraw(uint256);\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x39509351 == function_selector) {\n                increaseAllowance(address,uint256);\n            }\n        } else if (0xa457c2d7 > function_selector) {\n            if (0x6b9f96ea == function_selector) {\n                flush();\n            } else if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0x98d5fdca == function_selector) {\n                getPrice();\n            }\n        } else if (0xa457c2d7 == function_selector) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xed88c68e == function_selector) {\n            donate();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 36.14442586898804,
	"usage": {
		"completion_tokens": 663,
		"prompt_tokens": 2617,
		"total_tokens": 3280
	}
}