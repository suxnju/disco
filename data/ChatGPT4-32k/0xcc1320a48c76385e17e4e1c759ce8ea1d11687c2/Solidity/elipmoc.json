{
	"address": "0xcc1320a48c76385e17e4e1c759ce8ea1d11687c2",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity smart contract equivalent to the decompiled code:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n\ncontract MyContract {\n    uint256 private _erc20mUSDPrice;\n    address private _owner;\n    address private _fallback;\n    ERC20 private token;\n\n    event Swapped(address sender, uint256 amount, uint256 value);\n\n    constructor(address tokenAddress) {\n        _owner = msg.sender;\n        token = ERC20(tokenAddress);\n    }\n\n    function setOwner(address newOwner) public {\n        require(msg.sender == _owner, \"no permission\");\n        _owner = newOwner;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function withdrawErc20To(address recipient) public {\n        require(msg.sender == _owner, \"no permission\");\n        uint256 balance = token.balanceOf(address(this));\n        require(token.transfer(recipient, balance));\n    }\n\n    function setPriceInmUSD(uint256 price) public {\n        require(msg.sender == _owner, \"no permission\");\n        require(price > 0);\n        _erc20mUSDPrice = price;\n    }\n\n    function withdrawEthTo(address payable recipient) public {\n        require(msg.sender == _owner, \"no permission\");\n        (bool success, ) = recipient.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    function erc20mUSDPrice() public view returns (uint256) {\n        return _erc20mUSDPrice;\n    }\n\n    fallback() external payable {\n        uint256 amount = msg.value * 1e18 / _erc20mUSDPrice;\n        require(token.transfer(msg.sender, amount));\n        emit Swapped(msg.sender, msg.value, amount);\n    }\n}\n```\nPlease note that this Solidity code aims to reflect the functionality of the decompiled code you provided. However, the original contract might contain additional constraints, checks and events that are not visible in the decompiled version.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457072,
	"id": "chatcmpl-8R2zwNQ3RRUjc4doOV0v5P1cXjOle",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 03:42 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _erc20mUSDPrice; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _fallback; // STORAGE[0x2] bytes 0 to 19\naddress stor_3_0_19; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nSwapped(address, uint256, uint256);\n\nfunction setOwner(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    _owner = varg0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction withdrawErc20To(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    require(stor_3_0_19.code.size);\n    v0, v1 = stor_3_0_19.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(stor_3_0_19.code.size);\n    v2, v3 = stor_3_0_19.transfer(varg0, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n}\n\nfunction setPriceInmUSD(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    require(varg0 > 0);\n    _erc20mUSDPrice = varg0;\n}\n\nfunction withdrawEthTo(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    v0 = varg0.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction erc20mUSDPrice() public nonPayable { \n    return _erc20mUSDPrice;\n}\n\nfunction fallback() public payable { \n    require(_fallback.code.size);\n    v0, v1 = _fallback.read().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    assert(0x38d7ea4c68000);\n    assert(_erc20mUSDPrice);\n    require(stor_3_0_19.code.size);\n    v2, v3 = stor_3_0_19.transfer(msg.sender, msg.value * (v1 / 0x38d7ea4c68000) / _erc20mUSDPrice).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    emit Swapped(msg.sender, msg.value, msg.value * (v1 / 0x38d7ea4c68000) / _erc20mUSDPrice);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x13af4035 == function_selector >> 224) {\n            setOwner(address);\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x8f59eda5 == function_selector >> 224) {\n            withdrawErc20To(address);\n        } else if (0xc57ac7b6 == function_selector >> 224) {\n            setPriceInmUSD(uint256);\n        } else if (0xc8daa402 == function_selector >> 224) {\n            withdrawEthTo(address);\n        } else if (0xfb167003 == function_selector >> 224) {\n            erc20mUSDPrice();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 03:42 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _erc20mUSDPrice; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _fallback; // STORAGE[0x2] bytes 0 to 19\naddress stor_3_0_19; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nSwapped(address, uint256, uint256);\n\nfunction setOwner(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    _owner = varg0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction withdrawErc20To(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    require(stor_3_0_19.code.size);\n    v0, v1 = stor_3_0_19.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(stor_3_0_19.code.size);\n    v2, v3 = stor_3_0_19.transfer(varg0, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n}\n\nfunction setPriceInmUSD(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    require(varg0 > 0);\n    _erc20mUSDPrice = varg0;\n}\n\nfunction withdrawEthTo(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    v0 = varg0.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction erc20mUSDPrice() public nonPayable { \n    return _erc20mUSDPrice;\n}\n\nfunction fallback() public payable { \n    require(_fallback.code.size);\n    v0, v1 = _fallback.read().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    assert(0x38d7ea4c68000);\n    assert(_erc20mUSDPrice);\n    require(stor_3_0_19.code.size);\n    v2, v3 = stor_3_0_19.transfer(msg.sender, msg.value * (v1 / 0x38d7ea4c68000) / _erc20mUSDPrice).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    emit Swapped(msg.sender, msg.value, msg.value * (v1 / 0x38d7ea4c68000) / _erc20mUSDPrice);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x13af4035 == function_selector >> 224) {\n            setOwner(address);\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x8f59eda5 == function_selector >> 224) {\n            withdrawErc20To(address);\n        } else if (0xc57ac7b6 == function_selector >> 224) {\n            setPriceInmUSD(uint256);\n        } else if (0xc8daa402 == function_selector >> 224) {\n            withdrawEthTo(address);\n        } else if (0xfb167003 == function_selector >> 224) {\n            erc20mUSDPrice();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 03:42 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _erc20mUSDPrice; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _fallback; // STORAGE[0x2] bytes 0 to 19\naddress stor_3_0_19; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nSwapped(address, uint256, uint256);\n\nfunction setOwner(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    _owner = varg0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction withdrawErc20To(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    require(stor_3_0_19.code.size);\n    v0, v1 = stor_3_0_19.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(stor_3_0_19.code.size);\n    v2, v3 = stor_3_0_19.transfer(varg0, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n}\n\nfunction setPriceInmUSD(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    require(varg0 > 0);\n    _erc20mUSDPrice = varg0;\n}\n\nfunction withdrawEthTo(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    v0 = varg0.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction erc20mUSDPrice() public nonPayable { \n    return _erc20mUSDPrice;\n}\n\nfunction fallback() public payable { \n    require(_fallback.code.size);\n    v0, v1 = _fallback.read().gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    assert(0x38d7ea4c68000);\n    assert(_erc20mUSDPrice);\n    require(stor_3_0_19.code.size);\n    v2, v3 = stor_3_0_19.transfer(msg.sender, msg.value * (v1 / 0x38d7ea4c68000) / _erc20mUSDPrice).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    emit Swapped(msg.sender, msg.value, msg.value * (v1 / 0x38d7ea4c68000) / _erc20mUSDPrice);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x13af4035 == function_selector >> 224) {\n            setOwner(address);\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x8f59eda5 == function_selector >> 224) {\n            withdrawErc20To(address);\n        } else if (0xc57ac7b6 == function_selector >> 224) {\n            setPriceInmUSD(uint256);\n        } else if (0xc8daa402 == function_selector >> 224) {\n            withdrawEthTo(address);\n        } else if (0xfb167003 == function_selector >> 224) {\n            erc20mUSDPrice();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 30.39948272705078,
	"usage": {
		"completion_tokens": 449,
		"prompt_tokens": 1030,
		"total_tokens": 1479
	}
}