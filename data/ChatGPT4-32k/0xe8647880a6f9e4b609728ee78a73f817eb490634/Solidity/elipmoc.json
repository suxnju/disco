{
	"address": "0xe8647880a6f9e4b609728ee78a73f817eb490634",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Assuming the contract is meant to be an ERC20 token, here's a Solidity implementation of the decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract MyContract {\n  mapping(address => uint256) private _fallback;\n  uint256 private _party;\n  address private _owner;\n  event Hodl(address indexed sender, uint256 value);\n\n  constructor() {\n    _owner = msg.sender;\n  }\n\n  function withdrawForeignTokens(IERC20 token) public {\n    require(msg.sender == _owner, \"Not authorized\");\n    require(block.timestamp > _party, \"Not time yet\");\n    uint256 balance = token.balanceOf(address(this));\n    require(balance > 0, \"No balance to transfer\");\n    uint256 amount = balance / 100;\n    require(token.transfer(_owner, amount), \"Transfer failed\");\n  }\n\n  receive() external payable {\n    _fallback[msg.sender] += msg.value;\n    emit Hodl(msg.sender, msg.value);\n  }\n\n  function party() public {\n    require(block.timestamp > _party, \"Not time yet\");\n    require(_fallback[msg.sender] > 0, \"No balance to withdraw\");\n    _fallback[msg.sender] = 0;\n    (bool success, ) = msg.sender.call{value: _fallback[msg.sender] / 100}(\"\");\n    require(success, \"Transfer failed\");\n    _party += 120;\n  }\n\n  function hodlers(address account) public view returns (uint256) {\n    return _fallback[account];\n  }\n}\n```\n\nPlease note that this is a rough translation of the decompiled code into Solidity. Some assumptions were made because the decompiled code didn't offer enough context.",
				"role": "assistant"
			}
		}
	],
	"created": 1701466631,
	"id": "chatcmpl-8R5U7XWx86xDfgrd6uKFKqjEHg1ig",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 10:34 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _fallback; // STORAGE[0x0]\nuint256 _party; // STORAGE[0x1]\n\n// Events\nHodl(address, uint256);\n\nfunction withdrawForeignTokens(address varg0) public nonPayable { \n    require(msg.sender == 0x239c09c910ea910994b320ebdc6bb159e71d0b30);\n    require(block.timestamp > _party);\n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas);\n    require(v0);\n    assert(100);\n    require(varg0.code.size);\n    v2, v3 = varg0.transfer(0x239c09c910ea910994b320ebdc6bb159e71d0b30, v1 / 100).gas(msg.gas);\n    require(v2);\n    return v3;\n}\n\nfunction fallback() public payable { \n    _fallback[msg.sender] = _fallback[msg.sender] + msg.value;\n    emit Hodl(msg.sender, msg.value);\n}\n\nfunction party() public nonPayable { \n    v0 = v1 = block.timestamp > _party;\n    if (v1) {\n        v0 = v2 = _fallback[msg.sender] > 0;\n    }\n    require(v0);\n    _fallback[msg.sender] = 0;\n    v3 = msg.sender.call().value(_fallback[msg.sender] / 100).gas(!(_fallback[msg.sender] / 100) * 2300);\n    require(v3);\n    emit 0xdc8f43545dbeec87c6f54e44dac2d8889f2a4b3bf0f62683cd7e1c6346128e7(msg.sender, _fallback[msg.sender] / 100);\n    _party = _party + 120;\n}\n\nfunction hodlers(address varg0) public nonPayable { \n    return _fallback[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x354284f2 == function_selector) {\n            party();\n        } else if (0x4a3f17e7 == function_selector) {\n            hodlers(address);\n        } else if (0xe58fc54c == function_selector) {\n            withdrawForeignTokens(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 10:34 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _fallback; // STORAGE[0x0]\nuint256 _party; // STORAGE[0x1]\n\n// Events\nHodl(address, uint256);\n\nfunction withdrawForeignTokens(address varg0) public nonPayable { \n    require(msg.sender == 0x239c09c910ea910994b320ebdc6bb159e71d0b30);\n    require(block.timestamp > _party);\n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas);\n    require(v0);\n    assert(100);\n    require(varg0.code.size);\n    v2, v3 = varg0.transfer(0x239c09c910ea910994b320ebdc6bb159e71d0b30, v1 / 100).gas(msg.gas);\n    require(v2);\n    return v3;\n}\n\nfunction fallback() public payable { \n    _fallback[msg.sender] = _fallback[msg.sender] + msg.value;\n    emit Hodl(msg.sender, msg.value);\n}\n\nfunction party() public nonPayable { \n    v0 = v1 = block.timestamp > _party;\n    if (v1) {\n        v0 = v2 = _fallback[msg.sender] > 0;\n    }\n    require(v0);\n    _fallback[msg.sender] = 0;\n    v3 = msg.sender.call().value(_fallback[msg.sender] / 100).gas(!(_fallback[msg.sender] / 100) * 2300);\n    require(v3);\n    emit 0xdc8f43545dbeec87c6f54e44dac2d8889f2a4b3bf0f62683cd7e1c6346128e7(msg.sender, _fallback[msg.sender] / 100);\n    _party = _party + 120;\n}\n\nfunction hodlers(address varg0) public nonPayable { \n    return _fallback[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x354284f2 == function_selector) {\n            party();\n        } else if (0x4a3f17e7 == function_selector) {\n            hodlers(address);\n        } else if (0xe58fc54c == function_selector) {\n            withdrawForeignTokens(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 10:34 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _fallback; // STORAGE[0x0]\nuint256 _party; // STORAGE[0x1]\n\n// Events\nHodl(address, uint256);\n\nfunction withdrawForeignTokens(address varg0) public nonPayable { \n    require(msg.sender == 0x239c09c910ea910994b320ebdc6bb159e71d0b30);\n    require(block.timestamp > _party);\n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas);\n    require(v0);\n    assert(100);\n    require(varg0.code.size);\n    v2, v3 = varg0.transfer(0x239c09c910ea910994b320ebdc6bb159e71d0b30, v1 / 100).gas(msg.gas);\n    require(v2);\n    return v3;\n}\n\nfunction fallback() public payable { \n    _fallback[msg.sender] = _fallback[msg.sender] + msg.value;\n    emit Hodl(msg.sender, msg.value);\n}\n\nfunction party() public nonPayable { \n    v0 = v1 = block.timestamp > _party;\n    if (v1) {\n        v0 = v2 = _fallback[msg.sender] > 0;\n    }\n    require(v0);\n    _fallback[msg.sender] = 0;\n    v3 = msg.sender.call().value(_fallback[msg.sender] / 100).gas(!(_fallback[msg.sender] / 100) * 2300);\n    require(v3);\n    emit 0xdc8f43545dbeec87c6f54e44dac2d8889f2a4b3bf0f62683cd7e1c6346128e7(msg.sender, _fallback[msg.sender] / 100);\n    _party = _party + 120;\n}\n\nfunction hodlers(address varg0) public nonPayable { \n    return _fallback[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x354284f2 == function_selector) {\n            party();\n        } else if (0x4a3f17e7 == function_selector) {\n            hodlers(address);\n        } else if (0xe58fc54c == function_selector) {\n            withdrawForeignTokens(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 21.02224087715149,
	"usage": {
		"completion_tokens": 367,
		"prompt_tokens": 645,
		"total_tokens": 1012
	}
}