{
	"address": "0x61ab321758fe7a302026b8831d1532c7c9cebe21",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled EVM Bytecode, here's the Solidity smart contract:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract ExampleContract {\n    mapping (address => uint) private _expirations;\n    uint256 private _weiPerBlock;\n    uint256 private _minBlockPurchase;\n    address private _setMinBlockPurchase;\n\n    constructor() {\n        _setMinBlockPurchase = msg.sender; // contract deployer can change parameters\n    }\n\n    function withdraw(uint256 amount) public {\n        require(_setMinBlockPurchase == msg.sender, \"Only authorized sender can withdraw\");\n        payable(_setMinBlockPurchase).transfer(amount);\n    }\n\n    function setMinBlockPurchase(uint256 newMinBlockPurchase) public {\n        require(_setMinBlockPurchase == msg.sender, \"Only authorized sender can set minimum block purchase\");\n        _minBlockPurchase = newMinBlockPurchase;\n    }\n\n    function expirations(address user) public view returns (uint256) {\n        return _expirations[user];\n    }\n\n    function weiPerBlock() public view returns (uint256) {\n        return _weiPerBlock;\n    }\n\n    function setWeiPerBlock(uint256 newWeiPerBlock) public {\n        require(_setMinBlockPurchase == msg.sender, \"Only authorized sender can set wei per block\");\n        _weiPerBlock = newWeiPerBlock;\n    }\n\n    function minBlockPurchase() public view returns (uint256) {\n        return _minBlockPurchase;\n    }\n\n    function blocksForWei(uint256 weiAmount) public view returns (uint256) {\n        return calculateBlocks(weiAmount);\n    }\n\n    function calculateBlocks(uint256 weiAmount) private view returns (uint256) {\n        require(weiAmount >= _minBlockPurchase * _weiPerBlock, \"Wei amount is less than the minimum purchase requirement\");\n        require(_weiPerBlock > 0, \"Wei per block is not set\");\n        return weiAmount / _weiPerBlock;\n    }\n\n    // This function is not included in the decompiled code but it would be needed to update _expirations mapping\n    function updateExpiration(uint256 weiAmount) public {\n        uint256 blocks = calculateBlocks(weiAmount);\n        if(_expirations[msg.sender] == 0 || _expirations[msg.sender] < block.number) {\n            _expirations[msg.sender] = block.number + blocks;\n        } else {\n            _expirations[msg.sender] += blocks;\n        }\n    }\n}\n```\n\nPlease note that the original decompiled code seems to have been generated by a different type of decompiler and might not be entirely accurate. The provided Solidity code is based on the decompiled EVM Bytecode provided and some assumptions had to be made.",
				"role": "assistant"
			}
		}
	],
	"created": 1701465068,
	"id": "chatcmpl-8R54uUZyL1Eq4iN6sxu4kDte6PIyW",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.14 02:54 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _expirations; // STORAGE[0x1]\nuint256 _weiPerBlock; // STORAGE[0x2]\nuint256 _minBlockPurchase; // STORAGE[0x3]\naddress _setMinBlockPurchase; // STORAGE[0x0] bytes 0 to 19\n\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    if (_setMinBlockPurchase == msg.sender) {\n        v0 = _setMinBlockPurchase.call().value(varg0).gas(2300 * !varg0);\n        require(v0);\n    }\n}\n\nfunction setMinBlockPurchase(uint256 varg0) public nonPayable { \n    if (_setMinBlockPurchase == msg.sender) {\n        _minBlockPurchase = varg0;\n        goto 0x1080x122;\n    }\n}\n\nfunction expirations(address varg0) public nonPayable { \n    return _expirations[varg0];\n}\n\nfunction weiPerBlock() public nonPayable { \n    return _weiPerBlock;\n}\n\nfunction setWeiPerBlock(uint256 varg0) public nonPayable { \n    if (_setMinBlockPurchase == msg.sender) {\n        _weiPerBlock = varg0;\n        goto 0x1080x190;\n    }\n}\n\nfunction minBlockPurchase() public nonPayable { \n    return _minBlockPurchase;\n}\n\nfunction blocksForWei(uint256 varg0) public nonPayable { \n    v0 = 0x1f5(varg0);\n    return v0;\n}\n\nfunction 0x1f5(uint256 varg0) private { \n    assert(varg0 >= _minBlockPurchase * _weiPerBlock);\n    assert(_weiPerBlock);\n    return varg0 / _weiPerBlock;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    if (msg.data.length) {\n        if (function_selector == 0x2e1a7d4d) {\n            withdraw(uint256);\n        } else if (0x339f890d == function_selector) {\n            setMinBlockPurchase(uint256);\n        } else if (0x3c74db0f == function_selector) {\n            expirations(address);\n        } else if (0x44c73459 == function_selector) {\n            weiPerBlock();\n        } else if (0x52c05ca5 == function_selector) {\n            setWeiPerBlock(uint256);\n        } else if (0x7bce366f == function_selector) {\n            minBlockPurchase();\n        } else if (0xc8ce30b0 == function_selector) {\n            blocksForWei(uint256);\n        }\n    }\n    v0 = v1 = _expirations[msg.sender] > 0;\n    if (v1) {\n        v0 = v2 = _expirations[msg.sender] < block.number;\n    }\n    if (!v0) {\n        v3 = 0x1f5(msg.value);\n        _expirations[msg.sender] = block.number + v3;\n    } else {\n        v4 = 0x1f5(msg.value);\n        _expirations[msg.sender] = _expirations[msg.sender] + v4;\n    }\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 02:54 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _expirations; // STORAGE[0x1]\nuint256 _weiPerBlock; // STORAGE[0x2]\nuint256 _minBlockPurchase; // STORAGE[0x3]\naddress _setMinBlockPurchase; // STORAGE[0x0] bytes 0 to 19\n\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    if (_setMinBlockPurchase == msg.sender) {\n        v0 = _setMinBlockPurchase.call().value(varg0).gas(2300 * !varg0);\n        require(v0);\n    }\n}\n\nfunction setMinBlockPurchase(uint256 varg0) public nonPayable { \n    if (_setMinBlockPurchase == msg.sender) {\n        _minBlockPurchase = varg0;\n        goto 0x1080x122;\n    }\n}\n\nfunction expirations(address varg0) public nonPayable { \n    return _expirations[varg0];\n}\n\nfunction weiPerBlock() public nonPayable { \n    return _weiPerBlock;\n}\n\nfunction setWeiPerBlock(uint256 varg0) public nonPayable { \n    if (_setMinBlockPurchase == msg.sender) {\n        _weiPerBlock = varg0;\n        goto 0x1080x190;\n    }\n}\n\nfunction minBlockPurchase() public nonPayable { \n    return _minBlockPurchase;\n}\n\nfunction blocksForWei(uint256 varg0) public nonPayable { \n    v0 = 0x1f5(varg0);\n    return v0;\n}\n\nfunction 0x1f5(uint256 varg0) private { \n    assert(varg0 >= _minBlockPurchase * _weiPerBlock);\n    assert(_weiPerBlock);\n    return varg0 / _weiPerBlock;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    if (msg.data.length) {\n        if (function_selector == 0x2e1a7d4d) {\n            withdraw(uint256);\n        } else if (0x339f890d == function_selector) {\n            setMinBlockPurchase(uint256);\n        } else if (0x3c74db0f == function_selector) {\n            expirations(address);\n        } else if (0x44c73459 == function_selector) {\n            weiPerBlock();\n        } else if (0x52c05ca5 == function_selector) {\n            setWeiPerBlock(uint256);\n        } else if (0x7bce366f == function_selector) {\n            minBlockPurchase();\n        } else if (0xc8ce30b0 == function_selector) {\n            blocksForWei(uint256);\n        }\n    }\n    v0 = v1 = _expirations[msg.sender] > 0;\n    if (v1) {\n        v0 = v2 = _expirations[msg.sender] < block.number;\n    }\n    if (!v0) {\n        v3 = 0x1f5(msg.value);\n        _expirations[msg.sender] = block.number + v3;\n    } else {\n        v4 = 0x1f5(msg.value);\n        _expirations[msg.sender] = _expirations[msg.sender] + v4;\n    }\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 02:54 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _expirations; // STORAGE[0x1]\nuint256 _weiPerBlock; // STORAGE[0x2]\nuint256 _minBlockPurchase; // STORAGE[0x3]\naddress _setMinBlockPurchase; // STORAGE[0x0] bytes 0 to 19\n\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    if (_setMinBlockPurchase == msg.sender) {\n        v0 = _setMinBlockPurchase.call().value(varg0).gas(2300 * !varg0);\n        require(v0);\n    }\n}\n\nfunction setMinBlockPurchase(uint256 varg0) public nonPayable { \n    if (_setMinBlockPurchase == msg.sender) {\n        _minBlockPurchase = varg0;\n        goto 0x1080x122;\n    }\n}\n\nfunction expirations(address varg0) public nonPayable { \n    return _expirations[varg0];\n}\n\nfunction weiPerBlock() public nonPayable { \n    return _weiPerBlock;\n}\n\nfunction setWeiPerBlock(uint256 varg0) public nonPayable { \n    if (_setMinBlockPurchase == msg.sender) {\n        _weiPerBlock = varg0;\n        goto 0x1080x190;\n    }\n}\n\nfunction minBlockPurchase() public nonPayable { \n    return _minBlockPurchase;\n}\n\nfunction blocksForWei(uint256 varg0) public nonPayable { \n    v0 = 0x1f5(varg0);\n    return v0;\n}\n\nfunction 0x1f5(uint256 varg0) private { \n    assert(varg0 >= _minBlockPurchase * _weiPerBlock);\n    assert(_weiPerBlock);\n    return varg0 / _weiPerBlock;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    if (msg.data.length) {\n        if (function_selector == 0x2e1a7d4d) {\n            withdraw(uint256);\n        } else if (0x339f890d == function_selector) {\n            setMinBlockPurchase(uint256);\n        } else if (0x3c74db0f == function_selector) {\n            expirations(address);\n        } else if (0x44c73459 == function_selector) {\n            weiPerBlock();\n        } else if (0x52c05ca5 == function_selector) {\n            setWeiPerBlock(uint256);\n        } else if (0x7bce366f == function_selector) {\n            minBlockPurchase();\n        } else if (0xc8ce30b0 == function_selector) {\n            blocksForWei(uint256);\n        }\n    }\n    v0 = v1 = _expirations[msg.sender] > 0;\n    if (v1) {\n        v0 = v2 = _expirations[msg.sender] < block.number;\n    }\n    if (!v0) {\n        v3 = 0x1f5(msg.value);\n        _expirations[msg.sender] = block.number + v3;\n    } else {\n        v4 = 0x1f5(msg.value);\n        _expirations[msg.sender] = _expirations[msg.sender] + v4;\n    }\n}\n.",
	"status": "1",
	"time_cost": 26.58419108390808,
	"usage": {
		"completion_tokens": 570,
		"prompt_tokens": 811,
		"total_tokens": 1381
	}
}