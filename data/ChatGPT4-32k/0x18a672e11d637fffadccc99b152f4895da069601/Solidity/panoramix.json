{
	"address": "0x18a672e11d637fffadccc99b152f4895da069601",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\ndef storage:\n  stor0 is uint8 at storage 0 offset 160\n  stor0 is uint8 at storage 0 offset 168\n  stor0 is uint128 at storage 0 offset 168\n  stor0 is uint128 at storage 0 offset 160\n  stor0 is address at storage 0\n  stor0 is uint256 at storage 0\n  stor1 is uint256 at storage 1\n  stor2 is uint256 at storage 2\n  stor3 is uint256 at storage 3\n  stor4 is uint256 at storage 4\n  stor5 is uint256 at storage 5\n  stor6 is uint256 at storage 6\n  stor7 is array of struct at storage 7\n  totalGambles is uint256 at storage 8\n  stor9 is mapping of uint256 at storage 9\n  stor10 is mapping of uint8 at storage 10\n  stor11 is uint8 at storage 11\n  nickname is array of uint256 at storage 12\n  stor13 is array of uint256 at storage 13\n  payroll is uint256 at storage 31\n  stor32 is uint256 at storage 32\n  stor33 is uint256 at storage 33\n  stor34 is array of address at storage 34\n  stor35 is array of uint256 at storage 35\n  stor634 is uint16 at storage 0x634\n  stor634 is uint256 at storage 0x634\n  checkInvestorBalance is mapping of uint256 at storage 0x635\n  stor636 is uint256 at storage 0x636\n  stor637 is uint256 at storage 0x637\n  stor638 is uint256 at storage 0x638\n  stor1593 is mapping of struct at storage 0x639\n  stor63A is uint256 at storage 0x63a\n  stor63B is uint256 at storage 0x63b\n  stor63C is uint256 at storage 0x63c\n  stor39192952402756187425302384862487251540968225014669488259582314013099748177601 is array of uint256 at storage 0x56a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c1\n  stor39192952402756187425302384862487251540968225014669488259582314013099748177606 is array of uint256 at storage 0x56a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n  stor75276140696391174450305814049576319106646922510300487059720162673006384432777 is array of uint256 at storage 0xa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c689\n  stor75276140696391174450305814049576319106646922510300487059720162673006384432779 is array of uint256 at storage 0xa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b\n  stor75276140696391174450305814049576319106646922510300487059720162673006384432780 is array of struct at storage 0xa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68c\n\ndef getTotalGambles() payable: \n  return totalGambles\n\ndef getPayroll() payable: \n  return payroll\n\ndef getNickname(address _address) payable: \n  return nickname[address(_address)][0 len nickname[address(_address)].length]\n\ndef checkInvestorBalance(address investor) payable: \n  return checkInvestorBalance[address(investor)]\n\n#\n#  Regular functions\n#\n\ndef checkProfitLossSinceInvestorChange() payable: \n  return stor32, stor33, stor63C\n\ndef getSettings() payable: \n  return stor6, uint8(stor0.field_160)\n\ndef investmentEntryInfos() payable: \n  return uint16(stor634), stor636, stor63B\n\ndef enableBetting_only_Dev() payable: \n  require call.value <= 0\n  require caller == address(stor0.field_0)\n  stor11 = 0\n\ndef disableBetting_only_Dev() payable: \n  require call.value <= 0\n  require caller == address(stor0.field_0)\n  stor11 = 1\n\ndef getInvestorList(uint256 index) payable: \n  require index < 777\n  return address(stor34[index]), stor35[index] + stor636\n\ndef setNickname(string name) payable: \n  require call.value <= 0\n  if name.length >= 2:\n      if name.length <= 30:\n          nickname[caller][] = Array(len=name.length, data=name[all])\n\ndef changeDeveloper_only_Dev(address new_dev) payable: \n  require call.value <= 0\n  require caller == address(stor0.field_0)\n  uint256(stor0.field_0) = new_dev or Mask(96, 160, uint256(stor0.field_0))\n\ndef voteOnNewEntryFees_only_VIP(uint8 extraInvestFeesRate_0_to_99) payable: \n  require call.value <= 0\n  require extraInvestFeesRate_0_to_99 >= 1\n  require extraInvestFeesRate_0_to_99 <= 99\n  uint8(stor639[caller].field_0) = uint8(-extraInvestFeesRate_0_to_99 + 100)\n  Mask(248, 0, stor639[caller].field_8) = 0\n\ndef getGamblesList(uint256 index) payable: \n  require index < stor7.length\n  return address(stor[code.data[10480 len 32] + (5 * index)].field_0), \n         uint8(stor7[index].field_0),\n         uint8(stor7[index].field_0),\n         uint256(stor7[index].field_256),\n         uint8(stor7[index].field_1024),\n         bool(uint8(stor7[index].field_160)),\n         bool(uint8(stor7[index].field_168)),\n         uint256(stor7[index].field_512),\n         storA66C[index]\n\ndef transferInvestorAccount(address newInvestorAccountOwner, address newInvestorAccountOwner_confirm) payable: \n  require call.value <= 0\n  require newInvestorAccountOwner_confirm == newInvestorAccountOwner\n  require newInvestorAccountOwner\n  idx = 0\n  s = 999\n  while uint16(idx) < uint16(stor634):\n      require uint16(idx) < 777\n      require address(stor34[2 * uint16(idx)]) != newInvestorAccountOwner\n      require uint16(idx) < 777\n      if address(stor34[2 * uint16(idx)]) != caller:\n          idx = idx + 1\n          s = s\n          continue \n      idx = idx + 1\n      s = idx\n      continue \n  require uint16(s) != 999\n  checkInvestorBalance[newInvestorAccountOwner] = checkInvestorBalance[caller]\n  checkInvestorBalance[caller] = 0\n  require uint16(s) < 777\n  uint256(stor34[2 * uint16(s)]) = newInvestorAccountOwner or Mask(96, 160, uint256(stor34[2 * uint16(s)]))\n\ndef checkMyBet(address player) payable: \n  require stor9[address(player)] < stor7.length\n  return stor10[address(player)], \n         uint8(stor[code.data[10480 len 32] + (5 * stor9[address(player)])].field_0),\n         uint8(stor[code.data[10480 len 32] + (5 * stor9[address(player)])].field_0),\n         storA66C[stor9[address(player)]],\n         uint8(storA66C[stor9[address(player)]].field_0),\n         bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[address(player)])].field_160)),\n         bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[address(player)])].field_168)),\n         stor56A6[stor9[address(player)]],\n         storA66C[stor9[address(player)]],\n         stor9[address(player)]\n\ndef splitProfitVIP_only_Dev() payable: \n  require call.value <= 0\n  require caller == address(stor0.field_0)\n  stor63A = 0\n  idx = 0\n  while uint8(idx) < 77:\n      require uint8(idx) < 777\n      if address(stor34[2 * uint8(idx)]):\n          require uint8(idx) < 777\n          mem[0] = address(stor34[2 * uint8(idx)])\n          mem[32] = 1589\n          stor63A += checkInvestorBalance[address(stor34[2 * uint8(idx)])]\n      idx = idx + 1\n      continue \n  idx = 0\n  while uint8(idx) < 77:\n      require uint8(idx) < 777\n      if address(stor34[2 * uint8(idx)]):\n          require uint8(idx) < 777\n          mem[32] = 1589\n          mem[0] = address(stor34[2 * uint8(idx)])\n          checkInvestorBalance[address(stor34[2 * uint8(idx)])] += checkInvestorBalance[address(stor34[2 * uint8(idx)])] * stor63C / stor63A\n      idx = idx + 1\n      continue \n  checkInvestorBalance[address(stor0.field_0)] += stor63C\n  payroll += stor63C\n  stor63C = 0\n\ndef changeSettings_only_Dev(uint256 newCasinoStatLimit, uint256 newMaxBetsBlock, uint256 newMinGamble, uint256 newMaxGamble, uint16 newMaxInvestor, uint256 newMinInvestment, uint256 newMaxInvestment, uint256 newLockPeriod, uint8 newBlockDelay, uint8 newBlockExpiration) payable: \n  require call.value <= 0\n  require caller == address(stor0.field_0)\n  require newCasinoStatLimit >= 100\n  stor5 = newCasinoStatLimit\n  stor3 = newMaxBetsBlock\n  require newMaxGamble >= newMinGamble\n  stor1 = newMaxGamble\n  require newMinGamble >= 0\n  stor2 = newMinGamble\n  if uint16(stor634) != newMaxInvestor:\n      require stor7.length >= 25000\n  require newMaxInvestor >= uint16(stor634)\n  require newMaxInvestor <= 777\n  uint256(stor634) = newMaxInvestor or Mask(240, 16, uint256(stor634))\n  stor63A = 0\n  stor63B = 0\n  idx = 0\n  while uint8(idx) < 77:\n      require uint8(idx) < 777\n      if address(stor34[2 * uint8(idx)]):\n          require uint8(idx) < 777\n          mem[0] = address(stor34[2 * uint8(idx)])\n          mem[32] = 1593\n          if uint256(stor639[address(stor34[2 * uint8(idx)])].field_0):\n              require uint8(idx) < 777\n              stor63A += checkInvestorBalance[address(stor34[2 * uint8(idx)])]\n              mem[0] = address(stor34[2 * uint8(idx)])\n              mem[32] = 1593\n              stor63B += checkInvestorBalance[address(stor34[2 * uint8(idx)])] * uint256(stor639[address(stor34[2 * uint8(idx)])].field_0)\n      idx = idx + 1\n      continue \n  if stor63A:\n      stor63B = -(stor63B / stor63A) + 100\n  require newMaxInvestment >= newMinInvestment\n  stor637 = newMinInvestment\n  stor638 = newMaxInvestment\n  require stor636 <= 8640 * 24 * 3600\n  stor636 = newLockPeriod\n  Mask(96, 0, stor0.field_160) = Mask(96, 0, newBlockDelay)\n  require newBlockExpiration >= uint8(newBlockDelay + 20)\n  Mask(88, 0, stor0.field_168) = Mask(88, 0, newBlockExpiration)\n  if payroll / 35 * stor5 <= stor1:\n      stor6 = payroll / 35 * stor5\n  else:\n      stor6 = stor1\n\ndef manualUpdateBalances_only_Dev() payable: \n  require call.value <= 0\n  require caller == address(stor0.field_0)\n  if stor32:\n      if stor32 <= stor33:\n          s = 0\n          idx = 0\n          while uint16(idx) < uint16(stor634):\n              require uint16(idx) < 777\n              if address(stor34[2 * uint16(idx)]):\n                  if stor33 - stor32:\n                      mem[0] = address(stor34[2 * uint16(idx)])\n                      mem[32] = 1589\n                      checkInvestorBalance[address(stor34[2 * uint16(idx)])] -= (stor33 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - (stor32 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) / payroll\n              s = address(stor34[2 * uint16(idx)])\n              idx = idx + 1\n              continue \n          if stor33 - stor32:\n              payroll = payroll - stor33 + stor32\n              checkInvestorBalance[address(stor0.field_0)] = checkInvestorBalance[address(stor0.field_0)] - stor33 + stor32\n      else:\n          call address(stor0.field_0) with:\n             value (20 * stor32) - (20 * stor33) / 100 wei\n               gas 0 wei\n          require ext_call.success\n          s = 0\n          idx = 0\n          while uint16(idx) < uint16(stor634):\n              require uint16(idx) < 777\n              if address(stor34[2 * uint16(idx)]):\n                  if stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100):\n                      mem[0] = address(stor34[2 * uint16(idx)])\n                      mem[32] = 1589\n                      checkInvestorBalance[address(stor34[2 * uint16(idx)])] += (stor32 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - (stor33 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - ((20 * stor32) - (20 * stor33) / 100 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) / payroll\n              s = address(stor34[2 * uint16(idx)])\n              idx = idx + 1\n              continue \n          if stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100):\n              payroll = stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100) + payroll\n              checkInvestorBalance[address(stor0.field_0)] = stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100) + checkInvestorBalance[address(stor0.field_0)]\n      stor32 = 0\n      stor33 = 0\n  else:\n      if stor33:\n          if stor32 <= stor33:\n              s = 0\n              idx = 0\n              while uint16(idx) < uint16(stor634):\n                  require uint16(idx) < 777\n                  if address(stor34[2 * uint16(idx)]):\n                      if stor33 - stor32:\n                          mem[0] = address(stor34[2 * uint16(idx)])\n                          mem[32] = 1589\n                          checkInvestorBalance[address(stor34[2 * uint16(idx)])] -= (stor33 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - (stor32 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) / payroll\n                  s = address(stor34[2 * uint16(idx)])\n                  idx = idx + 1\n                  continue \n              if stor33 - stor32:\n                  payroll = payroll - stor33 + stor32\n                  checkInvestorBalance[address(stor0.field_0)] = checkInvestorBalance[address(stor0.field_0)] - stor33 + stor32\n          else:\n              call address(stor0.field_0) with:\n                 value (20 * stor32) - (20 * stor33) / 100 wei\n                   gas 0 wei\n              require ext_call.success\n              s = 0\n              idx = 0\n              while uint16(idx) < uint16(stor634):\n                  require uint16(idx) < 777\n                  if address(stor34[2 * uint16(idx)]):\n                      if stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100):\n                          mem[0] = address(stor34[2 * uint16(idx)])\n                          mem[32] = 1589\n                          checkInvestorBalance[address(stor34[2 * uint16(idx)])] += (stor32 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - (stor33 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - ((20 * stor32) - (20 * stor33) / 100 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) / payroll\n                  s = address(stor34[2 * uint16(idx)])\n                  idx = idx + 1\n                  continue \n              if stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100):\n                  payroll = stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100) + payroll\n                  checkInvestorBalance[address(stor0.field_0)] = stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100) + checkInvestorBalance[address(stor0.field_0)]\n          stor32 = 0\n          stor33 = 0\n\ndef withdrawInvestment(uint256 amountToWithdrawInWei) payable: \n  require call.value <= 0\n  if amountToWithdrawInWei:\n      require amountToWithdrawInWei >= stor637 / 10\n  if stor32:\n      if stor32 <= stor33:\n          s = 0\n          idx = 0\n          while uint16(idx) < uint16(stor634):\n              require uint16(idx) < 777\n              if address(stor34[2 * uint16(idx)]):\n                  if stor33 - stor32:\n                      mem[0] = address(stor34[2 * uint16(idx)])\n                      mem[32] = 1589\n                      checkInvestorBalance[address(stor34[2 * uint16(idx)])] -= (stor33 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - (stor32 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) / payroll\n              s = address(stor34[2 * uint16(idx)])\n              idx = idx + 1\n              continue \n          if stor33 - stor32:\n              payroll = payroll - stor33 + stor32\n              checkInvestorBalance[address(stor0.field_0)] = checkInvestorBalance[address(stor0.field_0)] - stor33 + stor32\n      else:\n          call address(stor0.field_0) with:\n             value (20 * stor32) - (20 * stor33) / 100 wei\n               gas 0 wei\n          require ext_call.success\n          s = 0\n          idx = 0\n          while uint16(idx) < uint16(stor634):\n              require uint16(idx) < 777\n              if address(stor34[2 * uint16(idx)]):\n                  if stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100):\n                      mem[0] = address(stor34[2 * uint16(idx)])\n                      mem[32] = 1589\n                      checkInvestorBalance[address(stor34[2 * uint16(idx)])] += (stor32 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - (stor33 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - ((20 * stor32) - (20 * stor33) / 100 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) / payroll\n              s = address(stor34[2 * uint16(idx)])\n              idx = idx + 1\n              continue \n          if stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100):\n              payroll = stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100) + payroll\n              checkInvestorBalance[address(stor0.field_0)] = stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100) + checkInvestorBalance[address(stor0.field_0)]\n      stor32 = 0\n      stor33 = 0\n  else:\n      if stor33:\n          if stor32 <= stor33:\n              s = 0\n              idx = 0\n              while uint16(idx) < uint16(stor634):\n                  require uint16(idx) < 777\n                  if address(stor34[2 * uint16(idx)]):\n                      if stor33 - stor32:\n                          mem[0] = address(stor34[2 * uint16(idx)])\n                          mem[32] = 1589\n                          checkInvestorBalance[address(stor34[2 * uint16(idx)])] -= (stor33 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - (stor32 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) / payroll\n                  s = address(stor34[2 * uint16(idx)])\n                  idx = idx + 1\n                  continue \n              if stor33 - stor32:\n                  payroll = payroll - stor33 + stor32\n                  checkInvestorBalance[address(stor0.field_0)] = checkInvestorBalance[address(stor0.field_0)] - stor33 + stor32\n          else:\n              call address(stor0.field_0) with:\n                 value (20 * stor32) - (20 * stor33) / 100 wei\n                   gas 0 wei\n              require ext_call.success\n              s = 0\n              idx = 0\n              while uint16(idx) < uint16(stor634):\n                  require uint16(idx) < 777\n                  if address(stor34[2 * uint16(idx)]):\n                      if stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100):\n                          mem[0] = address(stor34[2 * uint16(idx)])\n                          mem[32] = 1589\n                          checkInvestorBalance[address(stor34[2 * uint16(idx)])] += (stor32 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - (stor33 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - ((20 * stor32) - (20 * stor33) / 100 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) / payroll\n                  s = address(stor34[2 * uint16(idx)])\n                  idx = idx + 1\n                  continue \n              if stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100):\n                  payroll = stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100) + payroll\n                  checkInvestorBalance[address(stor0.field_0)] = stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100) + checkInvestorBalance[address(stor0.field_0)]\n          stor32 = 0\n          stor33 = 0\n  require amountToWithdrawInWei <= checkInvestorBalance[caller]\n  require 0 < uint16(stor634)\n  require 0 < 777\n  idx = 0\n  while address(stor34[2 * uint16(idx)]) != caller:\n      require uint16(idx + 1) < uint16(stor634)\n      require uint16(idx + 1) < 777\n      idx = idx + 1\n      continue \n  require uint16(None + 2) != 999\n  require uint16(None + 2) < 777\n  require stor35[2 * uint16(None + 2)] + stor636 <= block.timestamp\n  if checkInvestorBalance[caller] - amountToWithdrawInWei < stor637:\n      payroll -= checkInvestorBalance[caller]\n      checkInvestorBalance[caller] = 0\n      require uint16(None + 2) < 777\n      address(stor34[2 * uint16(None + 2)]) = 0\n      stor35[2 * uint16(None + 2)] = 0\n      call caller with:\n         value checkInvestorBalance[caller] wei\n           gas 0 wei\n      require ext_call.success\n      log withdraw(\n            address _token=caller,\n            uint256 _amount=checkInvestorBalance[caller])\n  else:\n      if amountToWithdrawInWei:\n          checkInvestorBalance[caller] -= amountToWithdrawInWei\n          payroll -= amountToWithdrawInWei\n          call caller with:\n             value amountToWithdrawInWei wei\n               gas 0 wei\n          require ext_call.success\n          log withdraw(\n                address _token=caller,\n                uint256 _amount=amountToWithdrawInWei)\n      else:\n          payroll -= checkInvestorBalance[caller]\n          checkInvestorBalance[caller] = 0\n          require uint16(None + 2) < 777\n          address(stor34[2 * uint16(None + 2)]) = 0\n          stor35[2 * uint16(None + 2)] = 0\n          call caller with:\n             value checkInvestorBalance[caller] wei\n               gas 0 wei\n          require ext_call.success\n          log withdraw(\n                address _token=caller,\n                uint256 _amount=checkInvestorBalance[caller])\n  if payroll / 35 * stor5 <= stor1:\n      stor6 = payroll / 35 * stor5\n  else:\n      stor6 = stor1\n\ndef invest() payable: \n  if stor32:\n      if stor32 <= stor33:\n          s = 0\n          idx = 0\n          while uint16(idx) < uint16(stor634):\n              require uint16(idx) < 777\n              if address(stor34[2 * uint16(idx)]):\n                  if stor33 - stor32:\n                      mem[0] = address(stor34[2 * uint16(idx)])\n                      mem[32] = 1589\n                      checkInvestorBalance[address(stor34[2 * uint16(idx)])] -= (stor33 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - (stor32 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) / payroll\n              s = address(stor34[2 * uint16(idx)])\n              idx = idx + 1\n              continue \n          if stor33 - stor32:\n              payroll = payroll - stor33 + stor32\n              checkInvestorBalance[address(stor0.field_0)] = checkInvestorBalance[address(stor0.field_0)] - stor33 + stor32\n          stor32 = 0\n          stor33 = 0\n          idx = 0\n          s = 999\n          while uint16(idx) < uint16(stor634):\n              require uint16(idx) < 777\n              if not address(stor34[2 * uint16(idx)]):\n                  idx = idx + 1\n                  s = idx\n                  continue \n              require uint16(idx) < 777\n              if address(stor34[2 * uint16(idx)]) != caller:\n                  idx = idx + 1\n                  s = s\n                  continue \n              require call.value + checkInvestorBalance[caller] <= stor638\n              require call.value >= stor637 / 5\n              call address(stor0.field_0) with:\n                 value 10 * call.value / 100 wei\n                   gas 0 wei\n              require ext_call.success\n              if uint16(stor634) <= 77:\n                  log newInvest(\n                        address player=caller,\n                        uint256 invest_v=call.value,\n                        uint256 net_invest_v=call.value - (10 * call.value / 100))\n                  checkInvestorBalance[caller] = call.value - (10 * call.value / 100) + checkInvestorBalance[caller]\n                  payroll = call.value - (10 * call.value / 100) + payroll\n              else:\n                  stor63C += (call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100\n                  log newInvest(\n                        address player=caller,\n                        uint256 invest_v=call.value,\n                        uint256 net_invest_v=call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100))\n                  checkInvestorBalance[caller] = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                  payroll = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + payroll\n              if payroll / 35 * stor5 <= stor1:\n                  stor6 = payroll / 35 * stor5\n              else:\n                  stor6 = stor1\n              stop\n          if call.value >= stor637:\n              if call.value <= stor638:\n                  if uint16(stor634) > 77:\n                      require uint16(s) >= 77\n                  require uint16(s) != 999\n                  require uint16(s) < 777\n                  address(stor34[2 * uint16(s)]) = caller\n                  stor35[2 * uint16(s)] = block.timestamp\n                  call address(stor0.field_0) with:\n                     value 10 * call.value / 100 wei\n                       gas 0 wei\n                  require ext_call.success\n                  if uint16(stor634) <= 77:\n                      log newInvest(\n                            address player=caller,\n                            uint256 invest_v=call.value,\n                            uint256 net_invest_v=call.value - (10 * call.value / 100))\n                      checkInvestorBalance[caller] = call.value - (10 * call.value / 100) + checkInvestorBalance[caller]\n                      payroll = call.value - (10 * call.value / 100) + payroll\n                  else:\n                      stor63C += (call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100\n                      log newInvest(\n                            address player=caller,\n                            uint256 invest_v=call.value,\n                            uint256 net_invest_v=call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100))\n                      checkInvestorBalance[caller] = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                      payroll = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + payroll\n                  if payroll / 35 * stor5 <= stor1:\n                      stor6 = payroll / 35 * stor5\n                  else:\n                      stor6 = stor1\n                  stop\n              if uint16(stor634) <= 77:\n                  if uint16(s) != 999:\n                      if uint16(s) < 777:\n                          address(stor34[2 * uint16(s)]) = caller\n                          stor35[2 * uint16(s)] = block.timestamp\n                          call address(stor0.field_0) with:\n                             value 10 * stor638 / 100 wei\n                               gas 0 wei\n                          if ext_call.success:\n                              if uint16(stor634) <= 77:\n                                  log newInvest(\n                                        address player=caller,\n                                        uint256 invest_v=call.value,\n                                        uint256 net_invest_v=stor638 - (10 * stor638 / 100))\n                                  checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) + checkInvestorBalance[caller]\n                                  payroll = stor638 - (10 * stor638 / 100) + payroll\n                              else:\n                                  stor63C += (stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100\n                                  log newInvest(\n                                        address player=caller,\n                                        uint256 invest_v=call.value,\n                                        uint256 net_invest_v=stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100))\n                                  checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                                  payroll = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + payroll\n                              if payroll / 35 * stor5 <= stor1:\n                                  stor6 = payroll / 35 * stor5\n                              else:\n                                  stor6 = stor1\n                              if call.value - stor638 <= 0:\n                                  stop\n                              call caller with:\n                                 value call.value - stor638 wei\n                                   gas 0 wei\n                              if ext_call.success:\n                                  stop\n              else:\n                  if uint16(s) >= 77:\n                      if uint16(s) != 999:\n                          if uint16(s) < 777:\n                              address(stor34[2 * uint16(s)]) = caller\n                              stor35[2 * uint16(s)] = block.timestamp\n                              call address(stor0.field_0) with:\n                                 value 10 * stor638 / 100 wei\n                                   gas 0 wei\n                              if ext_call.success:\n                                  if uint16(stor634) <= 77:\n                                      log newInvest(\n                                            address player=caller,\n                                            uint256 invest_v=call.value,\n                                            uint256 net_invest_v=stor638 - (10 * stor638 / 100))\n                                      checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) + checkInvestorBalance[caller]\n                                      payroll = stor638 - (10 * stor638 / 100) + payroll\n                                  else:\n                                      stor63C += (stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100\n                                      log newInvest(\n                                            address player=caller,\n                                            uint256 invest_v=call.value,\n                                            uint256 net_invest_v=stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100))\n                                      checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                                      payroll = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + payroll\n                                  if payroll / 35 * stor5 <= stor1:\n                                      stor6 = payroll / 35 * stor5\n                                  else:\n                                      stor6 = stor1\n                                  if call.value - stor638 <= 0:\n                                      stop\n                                  call caller with:\n                                     value call.value - stor638 wei\n                                       gas 0 wei\n                                  if ext_call.success:\n                                      stop\n      else:\n          call address(stor0.field_0) with:\n             value (20 * stor32) - (20 * stor33) / 100 wei\n               gas 0 wei\n          if ext_call.success:\n              s = 0\n              idx = 0\n              while uint16(idx) < uint16(stor634):\n                  require uint16(idx) < 777\n                  if address(stor34[2 * uint16(idx)]):\n                      if stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100):\n                          mem[0] = address(stor34[2 * uint16(idx)])\n                          mem[32] = 1589\n                          checkInvestorBalance[address(stor34[2 * uint16(idx)])] += (stor32 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - (stor33 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - ((20 * stor32) - (20 * stor33) / 100 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) / payroll\n                  s = address(stor34[2 * uint16(idx)])\n                  idx = idx + 1\n                  continue \n              if stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100):\n                  payroll = stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100) + payroll\n                  checkInvestorBalance[address(stor0.field_0)] = stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100) + checkInvestorBalance[address(stor0.field_0)]\n              stor32 = 0\n              stor33 = 0\n              idx = 0\n              s = 999\n              while uint16(idx) < uint16(stor634):\n                  require uint16(idx) < 777\n                  if not address(stor34[2 * uint16(idx)]):\n                      idx = idx + 1\n                      s = idx\n                      continue \n                  require uint16(idx) < 777\n                  if address(stor34[2 * uint16(idx)]) != caller:\n                      idx = idx + 1\n                      s = s\n                      continue \n                  require call.value + checkInvestorBalance[caller] <= stor638\n                  require call.value >= stor637 / 5\n                  call address(stor0.field_0) with:\n                     value 10 * call.value / 100 wei\n                       gas 0 wei\n                  require ext_call.success\n                  if uint16(stor634) <= 77:\n                      log newInvest(\n                            address player=caller,\n                            uint256 invest_v=call.value,\n                            uint256 net_invest_v=call.value - (10 * call.value / 100))\n                      checkInvestorBalance[caller] = call.value - (10 * call.value / 100) + checkInvestorBalance[caller]\n                      payroll = call.value - (10 * call.value / 100) + payroll\n                  else:\n                      stor63C += (call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100\n                      log newInvest(\n                            address player=caller,\n                            uint256 invest_v=call.value,\n                            uint256 net_invest_v=call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100))\n                      checkInvestorBalance[caller] = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                      payroll = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + payroll\n                  if payroll / 35 * stor5 <= stor1:\n                      stor6 = payroll / 35 * stor5\n                  else:\n                      stor6 = stor1\n                  stop\n              if call.value >= stor637:\n                  if call.value <= stor638:\n                      if uint16(stor634) > 77:\n                          require uint16(s) >= 77\n                      require uint16(s) != 999\n                      require uint16(s) < 777\n                      address(stor34[2 * uint16(s)]) = caller\n                      stor35[2 * uint16(s)] = block.timestamp\n                      call address(stor0.field_0) with:\n                         value 10 * call.value / 100 wei\n                           gas 0 wei\n                      require ext_call.success\n                      if uint16(stor634) <= 77:\n                          log newInvest(\n                                address player=caller,\n                                uint256 invest_v=call.value,\n                                uint256 net_invest_v=call.value - (10 * call.value / 100))\n                          checkInvestorBalance[caller] = call.value - (10 * call.value / 100) + checkInvestorBalance[caller]\n                          payroll = call.value - (10 * call.value / 100) + payroll\n                      else:\n                          stor63C += (call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100\n                          log newInvest(\n                                address player=caller,\n                                uint256 invest_v=call.value,\n                                uint256 net_invest_v=call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100))\n                          checkInvestorBalance[caller] = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                          payroll = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + payroll\n                      if payroll / 35 * stor5 <= stor1:\n                          stor6 = payroll / 35 * stor5\n                      else:\n                          stor6 = stor1\n                      stop\n                  if uint16(stor634) <= 77:\n                      if uint16(s) != 999:\n                          if uint16(s) < 777:\n                              address(stor34[2 * uint16(s)]) = caller\n                              stor35[2 * uint16(s)] = block.timestamp\n                              call address(stor0.field_0) with:\n                                 value 10 * stor638 / 100 wei\n                                   gas 0 wei\n                              if ext_call.success:\n                                  if uint16(stor634) <= 77:\n                                      log newInvest(\n                                            address player=caller,\n                                            uint256 invest_v=call.value,\n                                            uint256 net_invest_v=stor638 - (10 * stor638 / 100))\n                                      checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) + checkInvestorBalance[caller]\n                                      payroll = stor638 - (10 * stor638 / 100) + payroll\n                                  else:\n                                      stor63C += (stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100\n                                      log newInvest(\n                                            address player=caller,\n                                            uint256 invest_v=call.value,\n                                            uint256 net_invest_v=stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100))\n                                      checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                                      payroll = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + payroll\n                                  if payroll / 35 * stor5 <= stor1:\n                                      stor6 = payroll / 35 * stor5\n                                  else:\n                                      stor6 = stor1\n                                  if call.value - stor638 <= 0:\n                                      stop\n                                  call caller with:\n                                     value call.value - stor638 wei\n                                       gas 0 wei\n                                  if ext_call.success:\n                                      stop\n                  else:\n                      if uint16(s) >= 77:\n                          if uint16(s) != 999:\n                              if uint16(s) < 777:\n                                  address(stor34[2 * uint16(s)]) = caller\n                                  stor35[2 * uint16(s)] = block.timestamp\n                                  call address(stor0.field_0) with:\n                                     value 10 * stor638 / 100 wei\n                                       gas 0 wei\n                                  if ext_call.success:\n                                      if uint16(stor634) <= 77:\n                                          log newInvest(\n                                                address player=caller,\n                                                uint256 invest_v=call.value,\n                                                uint256 net_invest_v=stor638 - (10 * stor638 / 100))\n                                          checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) + checkInvestorBalance[caller]\n                                          payroll = stor638 - (10 * stor638 / 100) + payroll\n                                      else:\n                                          stor63C += (stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100\n                                          log newInvest(\n                                                address player=caller,\n                                                uint256 invest_v=call.value,\n                                                uint256 net_invest_v=stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100))\n                                          checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                                          payroll = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + payroll\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                      if call.value - stor638 <= 0:\n                                          stop\n                                      call caller with:\n                                         value call.value - stor638 wei\n                                           gas 0 wei\n                                      if ext_call.success:\n                                          stop\n  else:\n      if not stor33:\n          idx = 0\n          s = 999\n          while uint16(idx) < uint16(stor634):\n              require uint16(idx) < 777\n              if not address(stor34[2 * uint16(idx)]):\n                  idx = idx + 1\n                  s = idx\n                  continue \n              require uint16(idx) < 777\n              if address(stor34[2 * uint16(idx)]) != caller:\n                  idx = idx + 1\n                  s = s\n                  continue \n              require call.value + checkInvestorBalance[caller] <= stor638\n              require call.value >= stor637 / 5\n              call address(stor0.field_0) with:\n                 value 10 * call.value / 100 wei\n                   gas 0 wei\n              require ext_call.success\n              if uint16(stor634) <= 77:\n                  log newInvest(\n                        address player=caller,\n                        uint256 invest_v=call.value,\n                        uint256 net_invest_v=call.value - (10 * call.value / 100))\n                  checkInvestorBalance[caller] = call.value - (10 * call.value / 100) + checkInvestorBalance[caller]\n                  payroll = call.value - (10 * call.value / 100) + payroll\n              else:\n                  stor63C += (call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100\n                  log newInvest(\n                        address player=caller,\n                        uint256 invest_v=call.value,\n                        uint256 net_invest_v=call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100))\n                  checkInvestorBalance[caller] = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                  payroll = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + payroll\n              if payroll / 35 * stor5 <= stor1:\n                  stor6 = payroll / 35 * stor5\n              else:\n                  stor6 = stor1\n              stop\n          if call.value >= stor637:\n              if call.value <= stor638:\n                  if uint16(stor634) > 77:\n                      require uint16(s) >= 77\n                  require uint16(s) != 999\n                  require uint16(s) < 777\n                  address(stor34[2 * uint16(s)]) = caller\n                  stor35[2 * uint16(s)] = block.timestamp\n                  call address(stor0.field_0) with:\n                     value 10 * call.value / 100 wei\n                       gas 0 wei\n                  require ext_call.success\n                  if uint16(stor634) <= 77:\n                      log newInvest(\n                            address player=caller,\n                            uint256 invest_v=call.value,\n                            uint256 net_invest_v=call.value - (10 * call.value / 100))\n                      checkInvestorBalance[caller] = call.value - (10 * call.value / 100) + checkInvestorBalance[caller]\n                      payroll = call.value - (10 * call.value / 100) + payroll\n                  else:\n                      stor63C += (call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100\n                      log newInvest(\n                            address player=caller,\n                            uint256 invest_v=call.value,\n                            uint256 net_invest_v=call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100))\n                      checkInvestorBalance[caller] = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                      payroll = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + payroll\n                  if payroll / 35 * stor5 <= stor1:\n                      stor6 = payroll / 35 * stor5\n                  else:\n                      stor6 = stor1\n                  stop\n              if uint16(stor634) <= 77:\n                  if uint16(s) != 999:\n                      if uint16(s) < 777:\n                          address(stor34[2 * uint16(s)]) = caller\n                          stor35[2 * uint16(s)] = block.timestamp\n                          call address(stor0.field_0) with:\n                             value 10 * stor638 / 100 wei\n                               gas 0 wei\n                          if ext_call.success:\n                              if uint16(stor634) <= 77:\n                                  log newInvest(\n                                        address player=caller,\n                                        uint256 invest_v=call.value,\n                                        uint256 net_invest_v=stor638 - (10 * stor638 / 100))\n                                  checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) + checkInvestorBalance[caller]\n                                  payroll = stor638 - (10 * stor638 / 100) + payroll\n                              else:\n                                  stor63C += (stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100\n                                  log newInvest(\n                                        address player=caller,\n                                        uint256 invest_v=call.value,\n                                        uint256 net_invest_v=stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100))\n                                  checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                                  payroll = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + payroll\n                              if payroll / 35 * stor5 <= stor1:\n                                  stor6 = payroll / 35 * stor5\n                              else:\n                                  stor6 = stor1\n                              if call.value - stor638 <= 0:\n                                  stop\n                              call caller with:\n                                 value call.value - stor638 wei\n                                   gas 0 wei\n                              if ext_call.success:\n                                  stop\n              else:\n                  if uint16(s) >= 77:\n                      if uint16(s) != 999:\n                          if uint16(s) < 777:\n                              address(stor34[2 * uint16(s)]) = caller\n                              stor35[2 * uint16(s)] = block.timestamp\n                              call address(stor0.field_0) with:\n                                 value 10 * stor638 / 100 wei\n                                   gas 0 wei\n                              if ext_call.success:\n                                  if uint16(stor634) <= 77:\n                                      log newInvest(\n                                            address player=caller,\n                                            uint256 invest_v=call.value,\n                                            uint256 net_invest_v=stor638 - (10 * stor638 / 100))\n                                      checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) + checkInvestorBalance[caller]\n                                      payroll = stor638 - (10 * stor638 / 100) + payroll\n                                  else:\n                                      stor63C += (stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100\n                                      log newInvest(\n                                            address player=caller,\n                                            uint256 invest_v=call.value,\n                                            uint256 net_invest_v=stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100))\n                                      checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                                      payroll = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + payroll\n                                  if payroll / 35 * stor5 <= stor1:\n                                      stor6 = payroll / 35 * stor5\n                                  else:\n                                      stor6 = stor1\n                                  if call.value - stor638 <= 0:\n                                      stop\n                                  call caller with:\n                                     value call.value - stor638 wei\n                                       gas 0 wei\n                                  if ext_call.success:\n                                      stop\n      else:\n          if stor32 <= stor33:\n              s = 0\n              idx = 0\n              while uint16(idx) < uint16(stor634):\n                  require uint16(idx) < 777\n                  if address(stor34[2 * uint16(idx)]):\n                      if stor33 - stor32:\n                          mem[0] = address(stor34[2 * uint16(idx)])\n                          mem[32] = 1589\n                          checkInvestorBalance[address(stor34[2 * uint16(idx)])] -= (stor33 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - (stor32 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) / payroll\n                  s = address(stor34[2 * uint16(idx)])\n                  idx = idx + 1\n                  continue \n              if stor33 - stor32:\n                  payroll = payroll - stor33 + stor32\n                  checkInvestorBalance[address(stor0.field_0)] = checkInvestorBalance[address(stor0.field_0)] - stor33 + stor32\n              stor32 = 0\n              stor33 = 0\n              idx = 0\n              s = 999\n              while uint16(idx) < uint16(stor634):\n                  require uint16(idx) < 777\n                  if not address(stor34[2 * uint16(idx)]):\n                      idx = idx + 1\n                      s = idx\n                      continue \n                  require uint16(idx) < 777\n                  if address(stor34[2 * uint16(idx)]) != caller:\n                      idx = idx + 1\n                      s = s\n                      continue \n                  require call.value + checkInvestorBalance[caller] <= stor638\n                  require call.value >= stor637 / 5\n                  call address(stor0.field_0) with:\n                     value 10 * call.value / 100 wei\n                       gas 0 wei\n                  require ext_call.success\n                  if uint16(stor634) <= 77:\n                      log newInvest(\n                            address player=caller,\n                            uint256 invest_v=call.value,\n                            uint256 net_invest_v=call.value - (10 * call.value / 100))\n                      checkInvestorBalance[caller] = call.value - (10 * call.value / 100) + checkInvestorBalance[caller]\n                      payroll = call.value - (10 * call.value / 100) + payroll\n                  else:\n                      stor63C += (call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100\n                      log newInvest(\n                            address player=caller,\n                            uint256 invest_v=call.value,\n                            uint256 net_invest_v=call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100))\n                      checkInvestorBalance[caller] = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                      payroll = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + payroll\n                  if payroll / 35 * stor5 <= stor1:\n                      stor6 = payroll / 35 * stor5\n                  else:\n                      stor6 = stor1\n                  stop\n              if call.value >= stor637:\n                  if call.value <= stor638:\n                      if uint16(stor634) > 77:\n                          require uint16(s) >= 77\n                      require uint16(s) != 999\n                      require uint16(s) < 777\n                      address(stor34[2 * uint16(s)]) = caller\n                      stor35[2 * uint16(s)] = block.timestamp\n                      call address(stor0.field_0) with:\n                         value 10 * call.value / 100 wei\n                           gas 0 wei\n                      require ext_call.success\n                      if uint16(stor634) <= 77:\n                          log newInvest(\n                                address player=caller,\n                                uint256 invest_v=call.value,\n                                uint256 net_invest_v=call.value - (10 * call.value / 100))\n                          checkInvestorBalance[caller] = call.value - (10 * call.value / 100) + checkInvestorBalance[caller]\n                          payroll = call.value - (10 * call.value / 100) + payroll\n                      else:\n                          stor63C += (call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100\n                          log newInvest(\n                                address player=caller,\n                                uint256 invest_v=call.value,\n                                uint256 net_invest_v=call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100))\n                          checkInvestorBalance[caller] = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                          payroll = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + payroll\n                      if payroll / 35 * stor5 <= stor1:\n                          stor6 = payroll / 35 * stor5\n                      else:\n                          stor6 = stor1\n                      stop\n                  if uint16(stor634) <= 77:\n                      if uint16(s) != 999:\n                          if uint16(s) < 777:\n                              address(stor34[2 * uint16(s)]) = caller\n                              stor35[2 * uint16(s)] = block.timestamp\n                              call address(stor0.field_0) with:\n                                 value 10 * stor638 / 100 wei\n                                   gas 0 wei\n                              if ext_call.success:\n                                  if uint16(stor634) <= 77:\n                                      log newInvest(\n                                            address player=caller,\n                                            uint256 invest_v=call.value,\n                                            uint256 net_invest_v=stor638 - (10 * stor638 / 100))\n                                      checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) + checkInvestorBalance[caller]\n                                      payroll = stor638 - (10 * stor638 / 100) + payroll\n                                  else:\n                                      stor63C += (stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100\n                                      log newInvest(\n                                            address player=caller,\n                                            uint256 invest_v=call.value,\n                                            uint256 net_invest_v=stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100))\n                                      checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                                      payroll = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + payroll\n                                  if payroll / 35 * stor5 <= stor1:\n                                      stor6 = payroll / 35 * stor5\n                                  else:\n                                      stor6 = stor1\n                                  if call.value - stor638 <= 0:\n                                      stop\n                                  call caller with:\n                                     value call.value - stor638 wei\n                                       gas 0 wei\n                                  if ext_call.success:\n                                      stop\n                  else:\n                      if uint16(s) >= 77:\n                          if uint16(s) != 999:\n                              if uint16(s) < 777:\n                                  address(stor34[2 * uint16(s)]) = caller\n                                  stor35[2 * uint16(s)] = block.timestamp\n                                  call address(stor0.field_0) with:\n                                     value 10 * stor638 / 100 wei\n                                       gas 0 wei\n                                  if ext_call.success:\n                                      if uint16(stor634) <= 77:\n                                          log newInvest(\n                                                address player=caller,\n                                                uint256 invest_v=call.value,\n                                                uint256 net_invest_v=stor638 - (10 * stor638 / 100))\n                                          checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) + checkInvestorBalance[caller]\n                                          payroll = stor638 - (10 * stor638 / 100) + payroll\n                                      else:\n                                          stor63C += (stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100\n                                          log newInvest(\n                                                address player=caller,\n                                                uint256 invest_v=call.value,\n                                                uint256 net_invest_v=stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100))\n                                          checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                                          payroll = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + payroll\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                      if call.value - stor638 <= 0:\n                                          stop\n                                      call caller with:\n                                         value call.value - stor638 wei\n                                           gas 0 wei\n                                      if ext_call.success:\n                                          stop\n          else:\n              call address(stor0.field_0) with:\n                 value (20 * stor32) - (20 * stor33) / 100 wei\n                   gas 0 wei\n              if ext_call.success:\n                  s = 0\n                  idx = 0\n                  while uint16(idx) < uint16(stor634):\n                      require uint16(idx) < 777\n                      if address(stor34[2 * uint16(idx)]):\n                          if stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100):\n                              mem[0] = address(stor34[2 * uint16(idx)])\n                              mem[32] = 1589\n                              checkInvestorBalance[address(stor34[2 * uint16(idx)])] += (stor32 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - (stor33 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) - ((20 * stor32) - (20 * stor33) / 100 * checkInvestorBalance[address(stor34[2 * uint16(idx)])]) / payroll\n                      s = address(stor34[2 * uint16(idx)])\n                      idx = idx + 1\n                      continue \n                  if stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100):\n                      payroll = stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100) + payroll\n                      checkInvestorBalance[address(stor0.field_0)] = stor32 - stor33 - ((20 * stor32) - (20 * stor33) / 100) + checkInvestorBalance[address(stor0.field_0)]\n                  stor32 = 0\n                  stor33 = 0\n                  idx = 0\n                  s = 999\n                  while uint16(idx) < uint16(stor634):\n                      require uint16(idx) < 777\n                      if not address(stor34[2 * uint16(idx)]):\n                          idx = idx + 1\n                          s = idx\n                          continue \n                      require uint16(idx) < 777\n                      if address(stor34[2 * uint16(idx)]) != caller:\n                          idx = idx + 1\n                          s = s\n                          continue \n                      require call.value + checkInvestorBalance[caller] <= stor638\n                      require call.value >= stor637 / 5\n                      call address(stor0.field_0) with:\n                         value 10 * call.value / 100 wei\n                           gas 0 wei\n                      require ext_call.success\n                      if uint16(stor634) <= 77:\n                          log newInvest(\n                                address player=caller,\n                                uint256 invest_v=call.value,\n                                uint256 net_invest_v=call.value - (10 * call.value / 100))\n                          checkInvestorBalance[caller] = call.value - (10 * call.value / 100) + checkInvestorBalance[caller]\n                          payroll = call.value - (10 * call.value / 100) + payroll\n                      else:\n                          stor63C += (call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100\n                          log newInvest(\n                                address player=caller,\n                                uint256 invest_v=call.value,\n                                uint256 net_invest_v=call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100))\n                          checkInvestorBalance[caller] = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                          payroll = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + payroll\n                      if payroll / 35 * stor5 <= stor1:\n                          stor6 = payroll / 35 * stor5\n                      else:\n                          stor6 = stor1\n                      stop\n                  if call.value >= stor637:\n                      if call.value <= stor638:\n                          if uint16(stor634) > 77:\n                              require uint16(s) >= 77\n                          require uint16(s) != 999\n                          require uint16(s) < 777\n                          address(stor34[2 * uint16(s)]) = caller\n                          stor35[2 * uint16(s)] = block.timestamp\n                          call address(stor0.field_0) with:\n                             value 10 * call.value / 100 wei\n                               gas 0 wei\n                          require ext_call.success\n                          if uint16(stor634) <= 77:\n                              log newInvest(\n                                    address player=caller,\n                                    uint256 invest_v=call.value,\n                                    uint256 net_invest_v=call.value - (10 * call.value / 100))\n                              checkInvestorBalance[caller] = call.value - (10 * call.value / 100) + checkInvestorBalance[caller]\n                              payroll = call.value - (10 * call.value / 100) + payroll\n                          else:\n                              stor63C += (call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100\n                              log newInvest(\n                                    address player=caller,\n                                    uint256 invest_v=call.value,\n                                    uint256 net_invest_v=call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100))\n                              checkInvestorBalance[caller] = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                              payroll = call.value - (10 * call.value / 100) - ((call.value * stor63B) - (10 * call.value / 100 * stor63B) / 100) + payroll\n                          if payroll / 35 * stor5 <= stor1:\n                              stor6 = payroll / 35 * stor5\n                          else:\n                              stor6 = stor1\n                          stop\n                      if uint16(stor634) <= 77:\n                          if uint16(s) != 999:\n                              if uint16(s) < 777:\n                                  address(stor34[2 * uint16(s)]) = caller\n                                  stor35[2 * uint16(s)] = block.timestamp\n                                  call address(stor0.field_0) with:\n                                     value 10 * stor638 / 100 wei\n                                       gas 0 wei\n                                  if ext_call.success:\n                                      if uint16(stor634) <= 77:\n                                          log newInvest(\n                                                address player=caller,\n                                                uint256 invest_v=call.value,\n                                                uint256 net_invest_v=stor638 - (10 * stor638 / 100))\n                                          checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) + checkInvestorBalance[caller]\n                                          payroll = stor638 - (10 * stor638 / 100) + payroll\n                                      else:\n                                          stor63C += (stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100\n                                          log newInvest(\n                                                address player=caller,\n                                                uint256 invest_v=call.value,\n                                                uint256 net_invest_v=stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100))\n                                          checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                                          payroll = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + payroll\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                      if call.value - stor638 <= 0:\n                                          stop\n                                      call caller with:\n                                         value call.value - stor638 wei\n                                           gas 0 wei\n                                      if ext_call.success:\n                                          stop\n                      else:\n                          if uint16(s) >= 77:\n                              if uint16(s) != 999:\n                                  if uint16(s) < 777:\n                                      address(stor34[2 * uint16(s)]) = caller\n                                      stor35[2 * uint16(s)] = block.timestamp\n                                      call address(stor0.field_0) with:\n                                         value 10 * stor638 / 100 wei\n                                           gas 0 wei\n                                      if ext_call.success:\n                                          if uint16(stor634) <= 77:\n                                              log newInvest(\n                                                    address player=caller,\n                                                    uint256 invest_v=call.value,\n                                                    uint256 net_invest_v=stor638 - (10 * stor638 / 100))\n                                              checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) + checkInvestorBalance[caller]\n                                              payroll = stor638 - (10 * stor638 / 100) + payroll\n                                          else:\n                                              stor63C += (stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100\n                                              log newInvest(\n                                                    address player=caller,\n                                                    uint256 invest_v=call.value,\n                                                    uint256 net_invest_v=stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100))\n                                              checkInvestorBalance[caller] = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + checkInvestorBalance[caller]\n                                              payroll = stor638 - (10 * stor638 / 100) - ((stor638 * stor63B) - (10 * stor638 / 100 * stor63B) / 100) + payroll\n                                          if payroll / 35 * stor5 <= stor1:\n                                              stor6 = payroll / 35 * stor5\n                                          else:\n                                              stor6 = stor1\n                                          if call.value - stor638 <= 0:\n                                              stop\n                                          call caller with:\n                                             value call.value - stor638 wei\n                                               gas 0 wei\n                                          if ext_call.success:\n                                              stop\n  revert \n\ndef betOnDozen(bool First, bool Second, bool Third) payable: \n  require stor11 != 1\n  if not stor7.length:\n      stor4 = 0\n      require stor4 < stor3\n      if not First:\n          if not Second:\n              require Third\n              if not stor10[caller]:\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if not stor7.length <= stor7.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  address(stor7[stor7.length].field_0) = caller\n                  uint16(stor7[stor7.length].field_160) = 0\n                  uint8(stor7[stor7.length].field_176) = 3\n                  uint8(stor7[stor7.length].field_184) = 2\n                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                  stor7[stor7.length].field_256 % 1 = 0\n                  if call.value <= stor6:\n                      uint256(stor7[stor7.length].field_256) = call.value\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if call.value >= call.value:\n                          stop\n                      call caller with:\n                           gas 0 wei\n                  else:\n                      uint256(stor7[stor7.length].field_256) = stor6\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if stor6 >= call.value:\n                          stop\n                      call caller with:\n                         value call.value - stor6 wei\n                           gas 0 wei\n                  require ext_call.success\n                  stop\n          else:\n              require not Third\n              if not stor10[caller]:\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if not stor7.length <= stor7.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  address(stor7[stor7.length].field_0) = caller\n                  uint16(stor7[stor7.length].field_160) = 0\n                  uint8(stor7[stor7.length].field_176) = 3\n                  uint8(stor7[stor7.length].field_184) = 1\n                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                  stor7[stor7.length].field_256 % 1 = 0\n                  if call.value <= stor6:\n                      uint256(stor7[stor7.length].field_256) = call.value\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if call.value >= call.value:\n                          stop\n                      call caller with:\n                           gas 0 wei\n                  else:\n                      uint256(stor7[stor7.length].field_256) = stor6\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if stor6 >= call.value:\n                          stop\n                      call caller with:\n                         value call.value - stor6 wei\n                           gas 0 wei\n                  require ext_call.success\n                  stop\n      else:\n          require not Second\n          require not Third\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 3\n              uint8(stor7[stor7.length].field_184) = 0\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n      ('bool', ('stor', ('map', ('mask_shl', 160, 0, 0, 'caller'), ('name', 'stor10', 10))))\n      require 1 == stor10[caller]\n      require stor9[caller] < stor7.length\n      require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n      require stor9[caller] < stor7.length\n      require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n      if caller:\n          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 5:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 > stor1:\n                                          stor6 = stor1\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                      else:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          if call.value >= stor2:\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          else:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                      require stor9[caller] < stor7.length\n                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          stor10[caller] = 0\n                                      else:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                              stor10[caller] = 0\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                      else:\n                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          else:\n                              log Loss(\n                                    address player=caller,\n                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                    uint256 gambleId=stor9[caller])\n                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                              call caller with:\n                                 value 1 wei\n                                   gas 0 wei\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                  stor33 += 35 * storA66C[stor9[caller]]\n                  log Win(\n                        address player=caller,\n                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                        uint256 value_won=35 * storA66C[stor9[caller]],\n                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                        uint256 gambleId=stor9[caller])\n                  call caller with:\n                     value 36 * storA66C[stor9[caller]] wei\n                       gas 0 wei\n          else:\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n      else:\n          if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n          else:\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 18:\n                                              require stor9[caller] < stor7.length\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 > stor1:\n                                          stor6 = stor1\n                                      else:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                              require stor9[caller] < stor7.length\n                          else:\n                      else:\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                  stor33 += 35 * storA66C[stor9[caller]]\n                  log Win(\n                        address player=caller,\n                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                        uint256 value_won=35 * storA66C[stor9[caller]],\n                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                        uint256 gambleId=stor9[caller])\n                  call caller with:\n                     value 36 * storA66C[stor9[caller]] wei\n                       gas 0 wei\n  else:\n      require stor7.length - 1 < stor7.length\n      if stor56A6[stor7.length] != block.number:\n          stor4 = 0\n      else:\n          stor4++\n      require stor4 < stor3\n      if not First:\n          if not Second:\n              require Third\n              if not stor10[caller]:\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if not stor7.length <= stor7.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  address(stor7[stor7.length].field_0) = caller\n                  uint16(stor7[stor7.length].field_160) = 0\n                  uint8(stor7[stor7.length].field_176) = 3\n                  uint8(stor7[stor7.length].field_184) = 2\n                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                  stor7[stor7.length].field_256 % 1 = 0\n                  if call.value <= stor6:\n                      uint256(stor7[stor7.length].field_256) = call.value\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if call.value >= call.value:\n                          stop\n                      call caller with:\n                           gas 0 wei\n                  else:\n                      uint256(stor7[stor7.length].field_256) = stor6\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if stor6 >= call.value:\n                          stop\n                      call caller with:\n                         value call.value - stor6 wei\n                           gas 0 wei\n                  require ext_call.success\n                  stop\n          else:\n              require not Third\n              if not stor10[caller]:\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if not stor7.length <= stor7.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  address(stor7[stor7.length].field_0) = caller\n                  uint16(stor7[stor7.length].field_160) = 0\n                  uint8(stor7[stor7.length].field_176) = 3\n                  uint8(stor7[stor7.length].field_184) = 1\n                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                  stor7[stor7.length].field_256 % 1 = 0\n                  if call.value <= stor6:\n                      uint256(stor7[stor7.length].field_256) = call.value\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if call.value >= call.value:\n                          stop\n                      call caller with:\n                           gas 0 wei\n                  else:\n                      uint256(stor7[stor7.length].field_256) = stor6\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if stor6 >= call.value:\n                          stop\n                      call caller with:\n                         value call.value - stor6 wei\n                           gas 0 wei\n                  require ext_call.success\n                  stop\n      else:\n          require not Second\n          require not Third\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 3\n              uint8(stor7[stor7.length].field_184) = 0\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n      ('bool', ('stor', ('map', ('mask_shl', 160, 0, 0, 'caller'), ('name', 'stor10', 10))))\n      require 1 == stor10[caller]\n      require stor9[caller] < stor7.length\n      require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n      require stor9[caller] < stor7.length\n      require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n      if caller:\n          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 5:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          else:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 18:\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                      else:\n                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          else:\n                              require stor9[caller] < stor7.length\n                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                  else:\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n          else:\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n      else:\n          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 5:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                  else:\n                                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          stor10[caller] = 0\n                                      else:\n                                          require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 13:\n                                          require stor9[caller] < stor7.length\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          else:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 18:\n                                          require stor9[caller] < stor7.length\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          else:\n                              require stor9[caller] < stor7.length\n                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      else:\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                  else:\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n          else:\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef betOnColumn(bool First, bool Second, bool Third) payable: \n  require stor11 != 1\n  if not stor7.length:\n      stor4 = 0\n      require stor4 < stor3\n      if not First:\n          if not Second:\n              require Third\n              if not stor10[caller]:\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if not stor7.length <= stor7.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  address(stor7[stor7.length].field_0) = caller\n                  uint16(stor7[stor7.length].field_160) = 0\n                  uint8(stor7[stor7.length].field_176) = 4\n                  uint8(stor7[stor7.length].field_184) = 2\n                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                  stor7[stor7.length].field_256 % 1 = 0\n                  if call.value <= stor6:\n                      uint256(stor7[stor7.length].field_256) = call.value\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if call.value >= call.value:\n                          stop\n                      call caller with:\n                           gas 0 wei\n                  else:\n                      uint256(stor7[stor7.length].field_256) = stor6\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if stor6 >= call.value:\n                          stop\n                      call caller with:\n                         value call.value - stor6 wei\n                           gas 0 wei\n                  require ext_call.success\n                  stop\n          else:\n              require not Third\n              if not stor10[caller]:\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if not stor7.length <= stor7.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  address(stor7[stor7.length].field_0) = caller\n                  uint16(stor7[stor7.length].field_160) = 0\n                  uint8(stor7[stor7.length].field_176) = 4\n                  uint8(stor7[stor7.length].field_184) = 1\n                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                  stor7[stor7.length].field_256 % 1 = 0\n                  if call.value <= stor6:\n                      uint256(stor7[stor7.length].field_256) = call.value\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if call.value >= call.value:\n                          stop\n                      call caller with:\n                           gas 0 wei\n                  else:\n                      uint256(stor7[stor7.length].field_256) = stor6\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if stor6 >= call.value:\n                          stop\n                      call caller with:\n                         value call.value - stor6 wei\n                           gas 0 wei\n                  require ext_call.success\n                  stop\n      else:\n          require not Second\n          require not Third\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 4\n              uint8(stor7[stor7.length].field_184) = 0\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n      ('bool', ('stor', ('map', ('mask_shl', 160, 0, 0, 'caller'), ('name', 'stor10', 10))))\n      require 1 == stor10[caller]\n      require stor9[caller] < stor7.length\n      require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n      require stor9[caller] < stor7.length\n      require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n      if caller:\n          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 5:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 > stor1:\n                                          stor6 = stor1\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                      else:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          if call.value >= stor2:\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          else:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                      require stor9[caller] < stor7.length\n                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          stor10[caller] = 0\n                                      else:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                              stor10[caller] = 0\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                      else:\n                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          else:\n                              log Loss(\n                                    address player=caller,\n                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                    uint256 gambleId=stor9[caller])\n                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                              call caller with:\n                                 value 1 wei\n                                   gas 0 wei\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                  stor33 += 35 * storA66C[stor9[caller]]\n                  log Win(\n                        address player=caller,\n                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                        uint256 value_won=35 * storA66C[stor9[caller]],\n                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                        uint256 gambleId=stor9[caller])\n                  call caller with:\n                     value 36 * storA66C[stor9[caller]] wei\n                       gas 0 wei\n          else:\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n      else:\n          if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n          else:\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 18:\n                                              require stor9[caller] < stor7.length\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 > stor1:\n                                          stor6 = stor1\n                                      else:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                              require stor9[caller] < stor7.length\n                          else:\n                      else:\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                  stor33 += 35 * storA66C[stor9[caller]]\n                  log Win(\n                        address player=caller,\n                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                        uint256 value_won=35 * storA66C[stor9[caller]],\n                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                        uint256 gambleId=stor9[caller])\n                  call caller with:\n                     value 36 * storA66C[stor9[caller]] wei\n                       gas 0 wei\n  else:\n      require stor7.length - 1 < stor7.length\n      if stor56A6[stor7.length] != block.number:\n          stor4 = 0\n      else:\n          stor4++\n      require stor4 < stor3\n      if not First:\n          if not Second:\n              require Third\n              if not stor10[caller]:\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if not stor7.length <= stor7.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  address(stor7[stor7.length].field_0) = caller\n                  uint16(stor7[stor7.length].field_160) = 0\n                  uint8(stor7[stor7.length].field_176) = 4\n                  uint8(stor7[stor7.length].field_184) = 2\n                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                  stor7[stor7.length].field_256 % 1 = 0\n                  if call.value <= stor6:\n                      uint256(stor7[stor7.length].field_256) = call.value\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if call.value >= call.value:\n                          stop\n                      call caller with:\n                           gas 0 wei\n                  else:\n                      uint256(stor7[stor7.length].field_256) = stor6\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if stor6 >= call.value:\n                          stop\n                      call caller with:\n                         value call.value - stor6 wei\n                           gas 0 wei\n                  require ext_call.success\n                  stop\n          else:\n              require not Third\n              if not stor10[caller]:\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if not stor7.length <= stor7.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  address(stor7[stor7.length].field_0) = caller\n                  uint16(stor7[stor7.length].field_160) = 0\n                  uint8(stor7[stor7.length].field_176) = 4\n                  uint8(stor7[stor7.length].field_184) = 1\n                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                  stor7[stor7.length].field_256 % 1 = 0\n                  if call.value <= stor6:\n                      uint256(stor7[stor7.length].field_256) = call.value\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if call.value >= call.value:\n                          stop\n                      call caller with:\n                           gas 0 wei\n                  else:\n                      uint256(stor7[stor7.length].field_256) = stor6\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if stor6 >= call.value:\n                          stop\n                      call caller with:\n                         value call.value - stor6 wei\n                           gas 0 wei\n                  require ext_call.success\n                  stop\n      else:\n          require not Second\n          require not Third\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 4\n              uint8(stor7[stor7.length].field_184) = 0\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n      ('bool', ('stor', ('map', ('mask_shl', 160, 0, 0, 'caller'), ('name', 'stor10', 10))))\n      require 1 == stor10[caller]\n      require stor9[caller] < stor7.length\n      require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n      require stor9[caller] < stor7.length\n      require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n      if caller:\n          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 5:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          else:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 18:\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                      else:\n                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          else:\n                              require stor9[caller] < stor7.length\n                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                  else:\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n          else:\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n      else:\n          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 5:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                  else:\n                                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          stor10[caller] = 0\n                                      else:\n                                          require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 13:\n                                          require stor9[caller] < stor7.length\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          else:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 18:\n                                          require stor9[caller] < stor7.length\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          else:\n                              require stor9[caller] < stor7.length\n                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      else:\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                  else:\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n          else:\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef betOnOddEven(bool Odd, bool Even) payable: \n  require stor11 != 1\n  if stor7.length:\n      require stor7.length - 1 < stor7.length\n      if stor56A6[stor7.length] != block.number:\n          stor4 = 0\n      else:\n          stor4++\n      require stor4 < stor3\n      if not Even:\n          require Odd\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 2\n              uint8(stor7[stor7.length].field_184) = 1\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n      else:\n          require not Odd\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 2\n              uint8(stor7[stor7.length].field_184) = 0\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n      ('bool', ('stor', ('map', ('mask_shl', 160, 0, 0, 'caller'), ('name', 'stor10', 10))))\n      require 1 == stor10[caller]\n      require stor9[caller] < stor7.length\n      require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n      require stor9[caller] < stor7.length\n      require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n      if caller:\n          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 5:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 > stor1:\n                                          stor6 = stor1\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                      else:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          if call.value >= stor2:\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          else:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                      require stor9[caller] < stor7.length\n                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          stor10[caller] = 0\n                                      else:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                              stor10[caller] = 0\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                      else:\n                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          else:\n                              log Loss(\n                                    address player=caller,\n                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                    uint256 gambleId=stor9[caller])\n                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                              call caller with:\n                                 value 1 wei\n                                   gas 0 wei\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                  stor33 += 35 * storA66C[stor9[caller]]\n                  log Win(\n                        address player=caller,\n                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                        uint256 value_won=35 * storA66C[stor9[caller]],\n                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                        uint256 gambleId=stor9[caller])\n                  call caller with:\n                     value 36 * storA66C[stor9[caller]] wei\n                       gas 0 wei\n          else:\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n      else:\n          if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n          else:\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 18:\n                                              require stor9[caller] < stor7.length\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 > stor1:\n                                          stor6 = stor1\n                                      else:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                              require stor9[caller] < stor7.length\n                          else:\n                      else:\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                  stor33 += 35 * storA66C[stor9[caller]]\n                  log Win(\n                        address player=caller,\n                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                        uint256 value_won=35 * storA66C[stor9[caller]],\n                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                        uint256 gambleId=stor9[caller])\n                  call caller with:\n                     value 36 * storA66C[stor9[caller]] wei\n                       gas 0 wei\n  else:\n      stor4 = 0\n      require stor4 < stor3\n      if not Even:\n          require Odd\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 2\n              uint8(stor7[stor7.length].field_184) = 1\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n          require 1 == stor10[caller]\n          require stor9[caller] < stor7.length\n          require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n          require stor9[caller] < stor7.length\n          require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n          if not caller:\n              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                  require stor9[caller] < stor7.length\n                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += 35 * storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=35 * storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 36 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      else:\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                  else:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                      require stor9[caller] < stor7.length\n                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      else:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                              stor10[caller] = 0\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          require call.value >= stor2\n                                      else:\n                                          stor6 = stor1\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          if call.value >= stor2:\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n              else:\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint8(storA66C[stor9[caller]].field_0) = 255\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  log Loss(\n                        address player=caller,\n                        uint8 result=255,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=0,\n                        bytes32 sha3Player=0,\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n                  require ext_call.success\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if call.value <= stor6:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 2\n                          uint8(stor7[stor7.length].field_184) = 1\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                  else:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 2\n                          uint8(stor7[stor7.length].field_184) = 1\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n          else:\n              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                  require stor9[caller] < stor7.length\n                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          if payroll / 35 * stor5 <= stor1:\n                              stor6 = payroll / 35 * stor5\n                          else:\n                              stor6 = stor1\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += 35 * storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=35 * storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 36 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                                  require ext_call.success\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                  require stor9[caller] < stor7.length\n                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                              stor10[caller] = 0\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                      require stor9[caller] < stor7.length\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              stor10[caller] = 0\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                      require stor9[caller] < stor7.length\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n                              else:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                      stor10[caller] = 1\n                                      stor9[caller] = stor7.length\n                                      totalGambles++\n                                      require call.value >= stor2\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                  require stor9[caller] < stor7.length\n                                              else:\n                                                  if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 2:\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                                  if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                                          log Loss(\n                                                address player=caller,\n                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[caller])\n                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                          call caller with:\n                                             value 1 wei\n                                               gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 2 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n              else:\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint8(storA66C[stor9[caller]].field_0) = 255\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  log Loss(\n                        address player=caller,\n                        uint8 result=255,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=0,\n                        bytes32 sha3Player=0,\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n                  require ext_call.success\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if call.value <= stor6:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 2\n                          uint8(stor7[stor7.length].field_184) = 1\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if call.value < call.value:\n                              call caller with:\n                                   gas 0 wei\n                  else:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 2\n                          uint8(stor7[stor7.length].field_184) = 1\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if stor6 < call.value:\n                              call caller with:\n                                 value call.value - stor6 wei\n                                   gas 0 wei\n      else:\n          require not Odd\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 2\n              uint8(stor7[stor7.length].field_184) = 0\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n          require 1 == stor10[caller]\n          require stor9[caller] < stor7.length\n          require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n          require stor9[caller] < stor7.length\n          require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n          if not caller:\n              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                  require stor9[caller] < stor7.length\n                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += 35 * storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=35 * storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 36 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      else:\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                  else:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                      require stor9[caller] < stor7.length\n                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      else:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                              stor10[caller] = 0\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          require call.value >= stor2\n                                      else:\n                                          stor6 = stor1\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          if call.value >= stor2:\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n              else:\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint8(storA66C[stor9[caller]].field_0) = 255\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  log Loss(\n                        address player=caller,\n                        uint8 result=255,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=0,\n                        bytes32 sha3Player=0,\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n                  require ext_call.success\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if call.value <= stor6:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 2\n                          uint8(stor7[stor7.length].field_184) = 0\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                  else:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 2\n                          uint8(stor7[stor7.length].field_184) = 0\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n          else:\n              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                  require stor9[caller] < stor7.length\n                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          if payroll / 35 * stor5 <= stor1:\n                              stor6 = payroll / 35 * stor5\n                          else:\n                              stor6 = stor1\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += 35 * storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=35 * storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 36 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                                  require ext_call.success\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                  require stor9[caller] < stor7.length\n                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                              stor10[caller] = 0\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                      require stor9[caller] < stor7.length\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              stor10[caller] = 0\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                      require stor9[caller] < stor7.length\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n                              else:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                      stor10[caller] = 1\n                                      stor9[caller] = stor7.length\n                                      totalGambles++\n                                      require call.value >= stor2\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                  require stor9[caller] < stor7.length\n                                              else:\n                                                  if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 2:\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                                  if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                                          log Loss(\n                                                address player=caller,\n                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[caller])\n                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                          call caller with:\n                                             value 1 wei\n                                               gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 2 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n              else:\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint8(storA66C[stor9[caller]].field_0) = 255\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  log Loss(\n                        address player=caller,\n                        uint8 result=255,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=0,\n                        bytes32 sha3Player=0,\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n                  require ext_call.success\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if call.value <= stor6:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 2\n                          uint8(stor7[stor7.length].field_184) = 0\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if call.value < call.value:\n                              call caller with:\n                                   gas 0 wei\n                  else:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 2\n                          uint8(stor7[stor7.length].field_184) = 0\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if stor6 < call.value:\n                              call caller with:\n                                 value call.value - stor6 wei\n                                   gas 0 wei\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef betOnLowHigh(bool Low, bool High) payable: \n  require stor11 != 1\n  if stor7.length:\n      require stor7.length - 1 < stor7.length\n      if stor56A6[stor7.length] != block.number:\n          stor4 = 0\n      else:\n          stor4++\n      require stor4 < stor3\n      if not Low:\n          require High\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 5\n              uint8(stor7[stor7.length].field_184) = 1\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n      else:\n          require not High\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 5\n              uint8(stor7[stor7.length].field_184) = 0\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n      ('bool', ('stor', ('map', ('mask_shl', 160, 0, 0, 'caller'), ('name', 'stor10', 10))))\n      require 1 == stor10[caller]\n      require stor9[caller] < stor7.length\n      require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n      require stor9[caller] < stor7.length\n      require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n      if caller:\n          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 5:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 > stor1:\n                                          stor6 = stor1\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                      else:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          if call.value >= stor2:\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          else:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                      require stor9[caller] < stor7.length\n                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          stor10[caller] = 0\n                                      else:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                              stor10[caller] = 0\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                      else:\n                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          else:\n                              log Loss(\n                                    address player=caller,\n                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                    uint256 gambleId=stor9[caller])\n                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                              call caller with:\n                                 value 1 wei\n                                   gas 0 wei\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                  stor33 += 35 * storA66C[stor9[caller]]\n                  log Win(\n                        address player=caller,\n                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                        uint256 value_won=35 * storA66C[stor9[caller]],\n                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                        uint256 gambleId=stor9[caller])\n                  call caller with:\n                     value 36 * storA66C[stor9[caller]] wei\n                       gas 0 wei\n          else:\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n      else:\n          if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n          else:\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 18:\n                                              require stor9[caller] < stor7.length\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 > stor1:\n                                          stor6 = stor1\n                                      else:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                              require stor9[caller] < stor7.length\n                          else:\n                      else:\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                  stor33 += 35 * storA66C[stor9[caller]]\n                  log Win(\n                        address player=caller,\n                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                        uint256 value_won=35 * storA66C[stor9[caller]],\n                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                        uint256 gambleId=stor9[caller])\n                  call caller with:\n                     value 36 * storA66C[stor9[caller]] wei\n                       gas 0 wei\n  else:\n      stor4 = 0\n      require stor4 < stor3\n      if not Low:\n          require High\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 5\n              uint8(stor7[stor7.length].field_184) = 1\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n          require 1 == stor10[caller]\n          require stor9[caller] < stor7.length\n          require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n          require stor9[caller] < stor7.length\n          require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n          if not caller:\n              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                  require stor9[caller] < stor7.length\n                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += 35 * storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=35 * storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 36 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      else:\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                  else:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                      require stor9[caller] < stor7.length\n                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      else:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                              stor10[caller] = 0\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          require call.value >= stor2\n                                      else:\n                                          stor6 = stor1\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          if call.value >= stor2:\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n              else:\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint8(storA66C[stor9[caller]].field_0) = 255\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  log Loss(\n                        address player=caller,\n                        uint8 result=255,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=0,\n                        bytes32 sha3Player=0,\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n                  require ext_call.success\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if call.value <= stor6:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 5\n                          uint8(stor7[stor7.length].field_184) = 1\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                  else:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 5\n                          uint8(stor7[stor7.length].field_184) = 1\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n          else:\n              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                  require stor9[caller] < stor7.length\n                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          if payroll / 35 * stor5 <= stor1:\n                              stor6 = payroll / 35 * stor5\n                          else:\n                              stor6 = stor1\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += 35 * storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=35 * storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 36 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                                  require ext_call.success\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                  require stor9[caller] < stor7.length\n                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                              stor10[caller] = 0\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                      require stor9[caller] < stor7.length\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              stor10[caller] = 0\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                      require stor9[caller] < stor7.length\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n                              else:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                      stor10[caller] = 1\n                                      stor9[caller] = stor7.length\n                                      totalGambles++\n                                      require call.value >= stor2\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                  require stor9[caller] < stor7.length\n                                              else:\n                                                  if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 2:\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                                  if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                                          log Loss(\n                                                address player=caller,\n                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[caller])\n                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                          call caller with:\n                                             value 1 wei\n                                               gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 2 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n              else:\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint8(storA66C[stor9[caller]].field_0) = 255\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  log Loss(\n                        address player=caller,\n                        uint8 result=255,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=0,\n                        bytes32 sha3Player=0,\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n                  require ext_call.success\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if call.value <= stor6:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 5\n                          uint8(stor7[stor7.length].field_184) = 1\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if call.value < call.value:\n                              call caller with:\n                                   gas 0 wei\n                  else:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 5\n                          uint8(stor7[stor7.length].field_184) = 1\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if stor6 < call.value:\n                              call caller with:\n                                 value call.value - stor6 wei\n                                   gas 0 wei\n      else:\n          require not High\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 5\n              uint8(stor7[stor7.length].field_184) = 0\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n          require 1 == stor10[caller]\n          require stor9[caller] < stor7.length\n          require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n          require stor9[caller] < stor7.length\n          require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n          if not caller:\n              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                  require stor9[caller] < stor7.length\n                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += 35 * storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=35 * storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 36 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      else:\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                  else:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                      require stor9[caller] < stor7.length\n                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      else:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                              stor10[caller] = 0\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          require call.value >= stor2\n                                      else:\n                                          stor6 = stor1\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          if call.value >= stor2:\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n              else:\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint8(storA66C[stor9[caller]].field_0) = 255\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  log Loss(\n                        address player=caller,\n                        uint8 result=255,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=0,\n                        bytes32 sha3Player=0,\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n                  require ext_call.success\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if call.value <= stor6:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 5\n                          uint8(stor7[stor7.length].field_184) = 0\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                  else:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 5\n                          uint8(stor7[stor7.length].field_184) = 0\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n          else:\n              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                  require stor9[caller] < stor7.length\n                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          if payroll / 35 * stor5 <= stor1:\n                              stor6 = payroll / 35 * stor5\n                          else:\n                              stor6 = stor1\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += 35 * storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=35 * storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 36 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                                  require ext_call.success\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                  require stor9[caller] < stor7.length\n                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                              stor10[caller] = 0\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                      require stor9[caller] < stor7.length\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              stor10[caller] = 0\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                      require stor9[caller] < stor7.length\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n                              else:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                      stor10[caller] = 1\n                                      stor9[caller] = stor7.length\n                                      totalGambles++\n                                      require call.value >= stor2\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                  require stor9[caller] < stor7.length\n                                              else:\n                                                  if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 2:\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                                  if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                                          log Loss(\n                                                address player=caller,\n                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[caller])\n                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                          call caller with:\n                                             value 1 wei\n                                               gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 2 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n              else:\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint8(storA66C[stor9[caller]].field_0) = 255\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  log Loss(\n                        address player=caller,\n                        uint8 result=255,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=0,\n                        bytes32 sha3Player=0,\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n                  require ext_call.success\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if call.value <= stor6:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 5\n                          uint8(stor7[stor7.length].field_184) = 0\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if call.value < call.value:\n                              call caller with:\n                                   gas 0 wei\n                  else:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 5\n                          uint8(stor7[stor7.length].field_184) = 0\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if stor6 < call.value:\n                              call caller with:\n                                 value call.value - stor6 wei\n                                   gas 0 wei\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef betOnColor(bool Red, bool Black) payable: \n  require stor11 != 1\n  if stor7.length:\n      require stor7.length - 1 < stor7.length\n      if stor56A6[stor7.length] != block.number:\n          stor4 = 0\n      else:\n          stor4++\n      require stor4 < stor3\n      if not Red:\n          require Black\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 1\n              uint8(stor7[stor7.length].field_184) = 1\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n      else:\n          require not Black\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 1\n              uint8(stor7[stor7.length].field_184) = 0\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n      ('bool', ('stor', ('map', ('mask_shl', 160, 0, 0, 'caller'), ('name', 'stor10', 10))))\n      require 1 == stor10[caller]\n      require stor9[caller] < stor7.length\n      require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n      require stor9[caller] < stor7.length\n      require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n      if caller:\n          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 5:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 > stor1:\n                                          stor6 = stor1\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                      else:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          if call.value >= stor2:\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          else:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                      require stor9[caller] < stor7.length\n                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          stor10[caller] = 0\n                                      else:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                              stor10[caller] = 0\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                      else:\n                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          else:\n                              log Loss(\n                                    address player=caller,\n                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                    uint256 gambleId=stor9[caller])\n                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                              call caller with:\n                                 value 1 wei\n                                   gas 0 wei\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                  stor33 += 35 * storA66C[stor9[caller]]\n                  log Win(\n                        address player=caller,\n                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                        uint256 value_won=35 * storA66C[stor9[caller]],\n                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                        uint256 gambleId=stor9[caller])\n                  call caller with:\n                     value 36 * storA66C[stor9[caller]] wei\n                       gas 0 wei\n          else:\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n      else:\n          if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_168):\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint8(storA66C[stor9[caller]].field_0) = 255\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              log Loss(\n                    address player=caller,\n                    uint8 result=255,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=0,\n                    bytes32 sha3Player=0,\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n              require ext_call.success\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n          else:\n              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 18:\n                                              require stor9[caller] < stor7.length\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 > stor1:\n                                          stor6 = stor1\n                                      else:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                              require stor9[caller] < stor7.length\n                          else:\n                      else:\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n              else:\n                  require stor9[caller] < stor7.length\n                  stor10[caller] = 0\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require stor9[caller] < stor7.length\n                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                  stor33 += 35 * storA66C[stor9[caller]]\n                  log Win(\n                        address player=caller,\n                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                        uint256 value_won=35 * storA66C[stor9[caller]],\n                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                        uint256 gambleId=stor9[caller])\n                  call caller with:\n                     value 36 * storA66C[stor9[caller]] wei\n                       gas 0 wei\n  else:\n      stor4 = 0\n      require stor4 < stor3\n      if not Red:\n          require Black\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 1\n              uint8(stor7[stor7.length].field_184) = 1\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n          require 1 == stor10[caller]\n          require stor9[caller] < stor7.length\n          require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n          require stor9[caller] < stor7.length\n          require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n          if not caller:\n              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                  require stor9[caller] < stor7.length\n                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += 35 * storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=35 * storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 36 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      else:\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                  else:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                      require stor9[caller] < stor7.length\n                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      else:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                              stor10[caller] = 0\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          require call.value >= stor2\n                                      else:\n                                          stor6 = stor1\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          if call.value >= stor2:\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n              else:\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint8(storA66C[stor9[caller]].field_0) = 255\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  log Loss(\n                        address player=caller,\n                        uint8 result=255,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=0,\n                        bytes32 sha3Player=0,\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n                  require ext_call.success\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if call.value <= stor6:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 1\n                          uint8(stor7[stor7.length].field_184) = 1\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                  else:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 1\n                          uint8(stor7[stor7.length].field_184) = 1\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n          else:\n              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                  require stor9[caller] < stor7.length\n                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          if payroll / 35 * stor5 <= stor1:\n                              stor6 = payroll / 35 * stor5\n                          else:\n                              stor6 = stor1\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += 35 * storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=35 * storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 36 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                                  require ext_call.success\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                  require stor9[caller] < stor7.length\n                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                              stor10[caller] = 0\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                      require stor9[caller] < stor7.length\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              stor10[caller] = 0\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                      require stor9[caller] < stor7.length\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n                              else:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                      stor10[caller] = 1\n                                      stor9[caller] = stor7.length\n                                      totalGambles++\n                                      require call.value >= stor2\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                  require stor9[caller] < stor7.length\n                                              else:\n                                                  if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 2:\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                                  if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                                          log Loss(\n                                                address player=caller,\n                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[caller])\n                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                          call caller with:\n                                             value 1 wei\n                                               gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 2 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n              else:\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint8(storA66C[stor9[caller]].field_0) = 255\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  log Loss(\n                        address player=caller,\n                        uint8 result=255,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=0,\n                        bytes32 sha3Player=0,\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n                  require ext_call.success\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if call.value <= stor6:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 1\n                          uint8(stor7[stor7.length].field_184) = 1\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if call.value < call.value:\n                              call caller with:\n                                   gas 0 wei\n                  else:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 1\n                          uint8(stor7[stor7.length].field_184) = 1\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if stor6 < call.value:\n                              call caller with:\n                                 value call.value - stor6 wei\n                                   gas 0 wei\n      else:\n          require not Black\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              require call.value >= stor2\n              stor7.length++\n              if not stor7.length <= stor7.length + 1:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              address(stor7[stor7.length].field_0) = caller\n              uint16(stor7[stor7.length].field_160) = 0\n              uint8(stor7[stor7.length].field_176) = 1\n              uint8(stor7[stor7.length].field_184) = 0\n              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n              stor7[stor7.length].field_256 % 1 = 0\n              if call.value <= stor6:\n                  uint256(stor7[stor7.length].field_256) = call.value\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if call.value >= call.value:\n                      stop\n                  call caller with:\n                       gas 0 wei\n              else:\n                  uint256(stor7[stor7.length].field_256) = stor6\n                  uint256(stor7[stor7.length].field_512) = block.number\n                  uint256(stor7[stor7.length].field_768) = 0\n                  uint8(stor7[stor7.length].field_1024) = 37\n                  if stor6 >= call.value:\n                      stop\n                  call caller with:\n                     value call.value - stor6 wei\n                       gas 0 wei\n              require ext_call.success\n              stop\n          require 1 == stor10[caller]\n          require stor9[caller] < stor7.length\n          require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n          require stor9[caller] < stor7.length\n          require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n          if not caller:\n              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                  require stor9[caller] < stor7.length\n                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += 35 * storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=35 * storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 36 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      else:\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                  else:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                      require stor9[caller] < stor7.length\n                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      else:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                              stor10[caller] = 0\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              else:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          require call.value >= stor2\n                                      else:\n                                          stor6 = stor1\n                                          stor10[caller] = 1\n                                          stor9[caller] = stor7.length\n                                          totalGambles++\n                                          if call.value >= stor2:\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n              else:\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint8(storA66C[stor9[caller]].field_0) = 255\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  log Loss(\n                        address player=caller,\n                        uint8 result=255,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=0,\n                        bytes32 sha3Player=0,\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n                  require ext_call.success\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if call.value <= stor6:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 1\n                          uint8(stor7[stor7.length].field_184) = 0\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                  else:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 1\n                          uint8(stor7[stor7.length].field_184) = 0\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n          else:\n              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                  require stor9[caller] < stor7.length\n                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          if payroll / 35 * stor5 <= stor1:\n                              stor6 = payroll / 35 * stor5\n                          else:\n                              stor6 = stor1\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += 35 * storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=35 * storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 36 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n                      require ext_call.success\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 2:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                              if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                                  require ext_call.success\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                  require stor9[caller] < stor7.length\n                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          else:\n                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                              stor10[caller] = 0\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                      require stor9[caller] < stor7.length\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              stor10[caller] = 0\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                      require stor9[caller] < stor7.length\n                                  else:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n                              else:\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                      if payroll / 35 * stor5 <= stor1:\n                                          stor6 = payroll / 35 * stor5\n                                      else:\n                                          stor6 = stor1\n                                      stor10[caller] = 1\n                                      stor9[caller] = stor7.length\n                                      totalGambles++\n                                      require call.value >= stor2\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              require stor9[caller] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                  require stor9[caller] < stor7.length\n                                              else:\n                                                  if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 2:\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                  require stor9[caller] < stor7.length\n                                                  if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      else:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                                          log Loss(\n                                                address player=caller,\n                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[caller])\n                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                          call caller with:\n                                             value 1 wei\n                                               gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                          require ext_call.success\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 2 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n              else:\n                  stor10[caller] = 0\n                  require stor9[caller] < stor7.length\n                  uint8(storA66C[stor9[caller]].field_0) = 255\n                  require stor9[caller] < stor7.length\n                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                  require stor9[caller] < stor7.length\n                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                  require stor9[caller] < stor7.length\n                  log Loss(\n                        address player=caller,\n                        uint8 result=255,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=0,\n                        bytes32 sha3Player=0,\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n                  require ext_call.success\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  require call.value >= stor2\n                  stor7.length++\n                  if call.value <= stor6:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 1\n                          uint8(stor7[stor7.length].field_184) = 0\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if call.value < call.value:\n                              call caller with:\n                                   gas 0 wei\n                  else:\n                      if not stor7.length > stor7.length + 1:\n                          address(stor7[stor7.length].field_0) = caller\n                          uint16(stor7[stor7.length].field_160) = 0\n                          uint8(stor7[stor7.length].field_176) = 1\n                          uint8(stor7[stor7.length].field_184) = 0\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          stor7[stor7.length].field_256 % 1 = 0\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if stor6 < call.value:\n                              call caller with:\n                                 value call.value - stor6 wei\n                                   gas 0 wei\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef spinTheWheel(address spin_for_player) payable: \n  require call.value <= 0\n  if spin_for_player:\n      require 1 == stor10[address(spin_for_player)]\n      require stor9[address(spin_for_player)] < stor7.length\n      require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160)) != 1\n      require stor9[address(spin_for_player)] < stor7.length\n      require block.number > stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)\n      if block.number > stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_168):\n          stor10[address(spin_for_player)] = 0\n          require stor9[address(spin_for_player)] < stor7.length\n          uint8(storA66C[stor9[address(spin_for_player)]].field_0) = 255\n          require stor9[address(spin_for_player)] < stor7.length\n          uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n          require stor9[address(spin_for_player)] < stor7.length\n          uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n          require stor9[address(spin_for_player)] < stor7.length\n          log Loss(\n                address player=address(spin_for_player),\n                uint8 result=255,\n                uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                bytes32 bHash=0,\n                bytes32 sha3Player=0,\n                uint256 gambleId=stor9[address(spin_for_player)])\n          stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n          call spin_for_player with:\n             value 1 wei\n               gas 0 wei\n          require ext_call.success\n          stop\n      require block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))\n      require stor9[address(spin_for_player)] < stor7.length\n      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_176):\n          require stor9[address(spin_for_player)] < stor7.length\n          stor10[address(spin_for_player)] = 0\n          require stor9[address(spin_for_player)] < stor7.length\n          uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n          require stor9[address(spin_for_player)] < stor7.length\n          uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n          require stor9[address(spin_for_player)] < stor7.length\n          uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n          require stor9[address(spin_for_player)] < stor7.length\n          if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37):\n              log Loss(\n                    address player=address(spin_for_player),\n                    uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                    uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                    bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                    bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                    uint256 gambleId=stor9[address(spin_for_player)])\n              stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n              call spin_for_player with:\n                 value 1 wei\n                   gas 0 wei\n          else:\n              require stor9[address(spin_for_player)] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n              stor33 += 35 * storA66C[stor9[address(spin_for_player)]]\n              log Win(\n                    address player=address(spin_for_player),\n                    uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                    uint256 value_won=35 * storA66C[stor9[address(spin_for_player)]],\n                    bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                    bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                    uint256 gambleId=stor9[address(spin_for_player)])\n              call spin_for_player with:\n                 value 36 * storA66C[stor9[address(spin_for_player)]] wei\n                   gas 0 wei\n          require ext_call.success\n      else:\n          if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_176) == 2:\n              require stor9[address(spin_for_player)] < stor7.length\n              stor10[address(spin_for_player)] = 0\n              require stor9[address(spin_for_player)] < stor7.length\n              uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n              require stor9[address(spin_for_player)] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n              require stor9[address(spin_for_player)] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n              require stor9[address(spin_for_player)] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != uint8(uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) % 2):\n                  log Loss(\n                        address player=address(spin_for_player),\n                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                        uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                        uint256 gambleId=stor9[address(spin_for_player)])\n                  stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                  call spin_for_player with:\n                     value 1 wei\n                       gas 0 wei\n              else:\n                  if not uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37):\n                      log Loss(\n                            address player=address(spin_for_player),\n                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[address(spin_for_player)])\n                      stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                      call spin_for_player with:\n                         value 1 wei\n                           gas 0 wei\n                  else:\n                      require stor9[address(spin_for_player)] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                      stor33 += storA66C[stor9[address(spin_for_player)]]\n                      log Win(\n                            address player=address(spin_for_player),\n                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=storA66C[stor9[address(spin_for_player)]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[address(spin_for_player)])\n                      call spin_for_player with:\n                         value 2 * storA66C[stor9[address(spin_for_player)]] wei\n                           gas 0 wei\n              require ext_call.success\n          else:\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_176) == 1:\n                  idx = 0\n                  while uint8(idx) < 18:\n                      if stor13[uint8(idx)] != uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37):\n                          idx = idx + 1\n                          continue \n                      if not uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37):\n                          stor10[address(spin_for_player)] = 0\n                          require stor9[address(spin_for_player)] < stor7.length\n                          uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                          require stor9[address(spin_for_player)] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                          require stor9[address(spin_for_player)] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                          require stor9[address(spin_for_player)] < stor7.length\n                          log Loss(\n                                address player=address(spin_for_player),\n                                uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[address(spin_for_player)])\n                          stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                          call spin_for_player with:\n                             value 1 wei\n                               gas 0 wei\n                      else:\n                          require stor9[address(spin_for_player)] < stor7.length\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184):\n                              require stor9[address(spin_for_player)] < stor7.length\n                              stor10[address(spin_for_player)] = 0\n                              require stor9[address(spin_for_player)] < stor7.length\n                              uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                              require stor9[address(spin_for_player)] < stor7.length\n                              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                              require stor9[address(spin_for_player)] < stor7.length\n                              uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                              require stor9[address(spin_for_player)] < stor7.length\n                              log Loss(\n                                    address player=address(spin_for_player),\n                                    uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                    uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                    bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                    bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                    uint256 gambleId=stor9[address(spin_for_player)])\n                              stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                              call spin_for_player with:\n                                 value 1 wei\n                                   gas 0 wei\n                          else:\n                              stor10[address(spin_for_player)] = 0\n                              require stor9[address(spin_for_player)] < stor7.length\n                              uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                              require stor9[address(spin_for_player)] < stor7.length\n                              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                              require stor9[address(spin_for_player)] < stor7.length\n                              uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                              require stor9[address(spin_for_player)] < stor7.length\n                              require stor9[address(spin_for_player)] < stor7.length\n                              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                              stor33 += storA66C[stor9[address(spin_for_player)]]\n                              log Win(\n                                    address player=address(spin_for_player),\n                                    uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                    uint256 value_won=storA66C[stor9[address(spin_for_player)]],\n                                    bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                    bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                    uint256 gambleId=stor9[address(spin_for_player)])\n                              call spin_for_player with:\n                                 value 2 * storA66C[stor9[address(spin_for_player)]] wei\n                                   gas 0 wei\n                      require ext_call.success\n                      if payroll / 35 * stor5 <= stor1:\n                          stor6 = payroll / 35 * stor5\n                      else:\n                          stor6 = stor1\n                      stop\n                  if not uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37):\n                      stor10[address(spin_for_player)] = 0\n                      require stor9[address(spin_for_player)] < stor7.length\n                      uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                      require stor9[address(spin_for_player)] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                      require stor9[address(spin_for_player)] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                      require stor9[address(spin_for_player)] < stor7.length\n                      log Loss(\n                            address player=address(spin_for_player),\n                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[address(spin_for_player)])\n                      stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                      call spin_for_player with:\n                         value 1 wei\n                           gas 0 wei\n                  else:\n                      require stor9[address(spin_for_player)] < stor7.length\n                      require stor9[address(spin_for_player)] < stor7.length\n                      stor10[address(spin_for_player)] = 0\n                      require stor9[address(spin_for_player)] < stor7.length\n                      uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                      require stor9[address(spin_for_player)] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                      require stor9[address(spin_for_player)] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                      require stor9[address(spin_for_player)] < stor7.length\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 1:\n                          log Loss(\n                                address player=address(spin_for_player),\n                                uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[address(spin_for_player)])\n                          stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                          call spin_for_player with:\n                             value 1 wei\n                               gas 0 wei\n                      else:\n                          require stor9[address(spin_for_player)] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                          stor33 += storA66C[stor9[address(spin_for_player)]]\n                          log Win(\n                                address player=address(spin_for_player),\n                                uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_won=storA66C[stor9[address(spin_for_player)]],\n                                bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[address(spin_for_player)])\n                          call spin_for_player with:\n                             value 2 * storA66C[stor9[address(spin_for_player)]] wei\n                               gas 0 wei\n                  require ext_call.success\n              else:\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_176) == 5:\n                      if not uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37):\n                          stor10[address(spin_for_player)] = 0\n                          require stor9[address(spin_for_player)] < stor7.length\n                          uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                          require stor9[address(spin_for_player)] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                          require stor9[address(spin_for_player)] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                          require stor9[address(spin_for_player)] < stor7.length\n                          log Loss(\n                                address player=address(spin_for_player),\n                                uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[address(spin_for_player)])\n                          stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                          call spin_for_player with:\n                             value 1 wei\n                               gas 0 wei\n                      else:\n                          if uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) >= 19:\n                              if uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) <= 18:\n                                  stor10[address(spin_for_player)] = 0\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  log Loss(\n                                        address player=address(spin_for_player),\n                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                  stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                  call spin_for_player with:\n                                     value 1 wei\n                                       gas 0 wei\n                              else:\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  stor10[address(spin_for_player)] = 0\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 1:\n                                      log Loss(\n                                            address player=address(spin_for_player),\n                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                      stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                      call spin_for_player with:\n                                         value 1 wei\n                                           gas 0 wei\n                                  else:\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                      stor33 += storA66C[stor9[address(spin_for_player)]]\n                                      log Win(\n                                            address player=address(spin_for_player),\n                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_won=storA66C[stor9[address(spin_for_player)]],\n                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                      call spin_for_player with:\n                                         value 2 * storA66C[stor9[address(spin_for_player)]] wei\n                                           gas 0 wei\n                          else:\n                              require stor9[address(spin_for_player)] < stor7.length\n                              if not uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184):\n                                  stor10[address(spin_for_player)] = 0\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                  stor33 += storA66C[stor9[address(spin_for_player)]]\n                                  log Win(\n                                        address player=address(spin_for_player),\n                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_won=storA66C[stor9[address(spin_for_player)]],\n                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                  call spin_for_player with:\n                                     value 2 * storA66C[stor9[address(spin_for_player)]] wei\n                                       gas 0 wei\n                              else:\n                                  if uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) <= 18:\n                                      stor10[address(spin_for_player)] = 0\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      log Loss(\n                                            address player=address(spin_for_player),\n                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                      stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                      call spin_for_player with:\n                                         value 1 wei\n                                           gas 0 wei\n                                  else:\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      stor10[address(spin_for_player)] = 0\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 1:\n                                          log Loss(\n                                                address player=address(spin_for_player),\n                                                uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[address(spin_for_player)])\n                                          stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                          call spin_for_player with:\n                                             value 1 wei\n                                               gas 0 wei\n                                      else:\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                          stor33 += storA66C[stor9[address(spin_for_player)]]\n                                          log Win(\n                                                address player=address(spin_for_player),\n                                                uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_won=storA66C[stor9[address(spin_for_player)]],\n                                                bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[address(spin_for_player)])\n                                          call spin_for_player with:\n                                             value 2 * storA66C[stor9[address(spin_for_player)]] wei\n                                               gas 0 wei\n                      require ext_call.success\n                  else:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_176) != 3:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_176) == 4:\n                              if not uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37):\n                                  stor10[address(spin_for_player)] = 0\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  log Loss(\n                                        address player=address(spin_for_player),\n                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                  stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                  call spin_for_player with:\n                                     value 1 wei\n                                       gas 0 wei\n                              else:\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184):\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 1:\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          stor10[address(spin_for_player)] = 0\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 2:\n                                              log Loss(\n                                                    address player=address(spin_for_player),\n                                                    uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                    uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                    bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                    bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                    uint256 gambleId=stor9[address(spin_for_player)])\n                                              stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                              call spin_for_player with:\n                                                 value 1 wei\n                                                   gas 0 wei\n                                          else:\n                                              if uint8(uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) % 3):\n                                                  log Loss(\n                                                        address player=address(spin_for_player),\n                                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                                  stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                  call spin_for_player with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                              else:\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                                  stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                                  log Win(\n                                                        address player=address(spin_for_player),\n                                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                                  call spin_for_player with:\n                                                     value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                                       gas 0 wei\n                                      else:\n                                          if 2 == uint8(uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) % 3):\n                                              stor10[address(spin_for_player)] = 0\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                              stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                              log Win(\n                                                    address player=address(spin_for_player),\n                                                    uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                    uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                    bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                    bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                    uint256 gambleId=stor9[address(spin_for_player)])\n                                              call spin_for_player with:\n                                                 value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                                   gas 0 wei\n                                          else:\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              stor10[address(spin_for_player)] = 0\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 2:\n                                                  log Loss(\n                                                        address player=address(spin_for_player),\n                                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                                  stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                  call spin_for_player with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                              else:\n                                                  if uint8(uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) % 3):\n                                                      log Loss(\n                                                            address player=address(spin_for_player),\n                                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                                      stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                      call spin_for_player with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                  else:\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                                      stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                                      log Win(\n                                                            address player=address(spin_for_player),\n                                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                                      call spin_for_player with:\n                                                         value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                                           gas 0 wei\n                                  else:\n                                      if 1 == uint8(uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) % 3):\n                                          stor10[address(spin_for_player)] = 0\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                          stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                          log Win(\n                                                address player=address(spin_for_player),\n                                                uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[address(spin_for_player)])\n                                          call spin_for_player with:\n                                             value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                               gas 0 wei\n                                      else:\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 1:\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              stor10[address(spin_for_player)] = 0\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 2:\n                                                  log Loss(\n                                                        address player=address(spin_for_player),\n                                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                                  stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                  call spin_for_player with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                              else:\n                                                  if uint8(uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) % 3):\n                                                      log Loss(\n                                                            address player=address(spin_for_player),\n                                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                                      stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                      call spin_for_player with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                  else:\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                                      stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                                      log Win(\n                                                            address player=address(spin_for_player),\n                                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                                      call spin_for_player with:\n                                                         value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                                           gas 0 wei\n                                          else:\n                                              if 2 == uint8(uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) % 3):\n                                                  stor10[address(spin_for_player)] = 0\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                                  stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                                  log Win(\n                                                        address player=address(spin_for_player),\n                                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                                  call spin_for_player with:\n                                                     value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                                       gas 0 wei\n                                              else:\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  stor10[address(spin_for_player)] = 0\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 2:\n                                                      log Loss(\n                                                            address player=address(spin_for_player),\n                                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                                      stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                      call spin_for_player with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                  else:\n                                                      if uint8(uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) % 3):\n                                                          log Loss(\n                                                                address player=address(spin_for_player),\n                                                                uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[address(spin_for_player)])\n                                                          stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                          call spin_for_player with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                      else:\n                                                          require stor9[address(spin_for_player)] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                                          stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                                          log Win(\n                                                                address player=address(spin_for_player),\n                                                                uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[address(spin_for_player)])\n                                                          call spin_for_player with:\n                                                             value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                                               gas 0 wei\n                              require ext_call.success\n                      else:\n                          if not uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37):\n                              stor10[address(spin_for_player)] = 0\n                              require stor9[address(spin_for_player)] < stor7.length\n                              uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                              require stor9[address(spin_for_player)] < stor7.length\n                              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                              require stor9[address(spin_for_player)] < stor7.length\n                              uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                              require stor9[address(spin_for_player)] < stor7.length\n                              log Loss(\n                                    address player=address(spin_for_player),\n                                    uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                    uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                    bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                    bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                    uint256 gambleId=stor9[address(spin_for_player)])\n                              stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                              call spin_for_player with:\n                                 value 1 wei\n                                   gas 0 wei\n                          else:\n                              if uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) >= 13:\n                                  if uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) <= 12:\n                                      stor10[address(spin_for_player)] = 0\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      log Loss(\n                                            address player=address(spin_for_player),\n                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                      stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                      call spin_for_player with:\n                                         value 1 wei\n                                           gas 0 wei\n                                  else:\n                                      if uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) >= 25:\n                                          if uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) <= 24:\n                                              stor10[address(spin_for_player)] = 0\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              log Loss(\n                                                    address player=address(spin_for_player),\n                                                    uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                    uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                    bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                    bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                    uint256 gambleId=stor9[address(spin_for_player)])\n                                              stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                              call spin_for_player with:\n                                                 value 1 wei\n                                                   gas 0 wei\n                                          else:\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              stor10[address(spin_for_player)] = 0\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 2:\n                                                  log Loss(\n                                                        address player=address(spin_for_player),\n                                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                                  stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                  call spin_for_player with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                              else:\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                                  stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                                  log Win(\n                                                        address player=address(spin_for_player),\n                                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                                  call spin_for_player with:\n                                                     value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                                       gas 0 wei\n                                      else:\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184):\n                                              stor10[address(spin_for_player)] = 0\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                              stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                              log Win(\n                                                    address player=address(spin_for_player),\n                                                    uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                    uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                    bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                    bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                    uint256 gambleId=stor9[address(spin_for_player)])\n                                              call spin_for_player with:\n                                                 value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                                   gas 0 wei\n                                          else:\n                                              if uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                  stor10[address(spin_for_player)] = 0\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  log Loss(\n                                                        address player=address(spin_for_player),\n                                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                                  stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                  call spin_for_player with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                              else:\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  stor10[address(spin_for_player)] = 0\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 2:\n                                                      log Loss(\n                                                            address player=address(spin_for_player),\n                                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                                      stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                      call spin_for_player with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                  else:\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                                      stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                                      log Win(\n                                                            address player=address(spin_for_player),\n                                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                                      call spin_for_player with:\n                                                         value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                                           gas 0 wei\n                              else:\n                                  require stor9[address(spin_for_player)] < stor7.length\n                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184):\n                                      stor10[address(spin_for_player)] = 0\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      require stor9[address(spin_for_player)] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                      stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                      log Win(\n                                            address player=address(spin_for_player),\n                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                      call spin_for_player with:\n                                         value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                           gas 0 wei\n                                  else:\n                                      if uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) <= 12:\n                                          stor10[address(spin_for_player)] = 0\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                          require stor9[address(spin_for_player)] < stor7.length\n                                          log Loss(\n                                                address player=address(spin_for_player),\n                                                uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[address(spin_for_player)])\n                                          stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                          call spin_for_player with:\n                                             value 1 wei\n                                               gas 0 wei\n                                      else:\n                                          if uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) >= 25:\n                                              if uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                  stor10[address(spin_for_player)] = 0\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  log Loss(\n                                                        address player=address(spin_for_player),\n                                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                                  stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                  call spin_for_player with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                              else:\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  stor10[address(spin_for_player)] = 0\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 2:\n                                                      log Loss(\n                                                            address player=address(spin_for_player),\n                                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                                      stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                      call spin_for_player with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                  else:\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                                      stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                                      log Win(\n                                                            address player=address(spin_for_player),\n                                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                                      call spin_for_player with:\n                                                         value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                                           gas 0 wei\n                                          else:\n                                              require stor9[address(spin_for_player)] < stor7.length\n                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184):\n                                                  stor10[address(spin_for_player)] = 0\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  require stor9[address(spin_for_player)] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                                  stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                                  log Win(\n                                                        address player=address(spin_for_player),\n                                                        uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[address(spin_for_player)])\n                                                  call spin_for_player with:\n                                                     value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                                       gas 0 wei\n                                              else:\n                                                  if uint8(sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                      stor10[address(spin_for_player)] = 0\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      log Loss(\n                                                            address player=address(spin_for_player),\n                                                            uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[address(spin_for_player)])\n                                                      stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                      call spin_for_player with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                  else:\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      stor10[address(spin_for_player)] = 0\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      uint256(storA66C[stor9[address(spin_for_player)]].field_0) = Mask(248, 0, storA66C[stor9[address(spin_for_player)]].field_8)\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_160) = 1\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)]) + 3].field_0) = block.number\n                                                      require stor9[address(spin_for_player)] < stor7.length\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_184) != 2:\n                                                          log Loss(\n                                                                address player=address(spin_for_player),\n                                                                uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[address(spin_for_player)]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[address(spin_for_player)])\n                                                          stor32 = storA66C[stor9[address(spin_for_player)]] + stor32 - 1\n                                                          call spin_for_player with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                      else:\n                                                          require stor9[address(spin_for_player)] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[address(spin_for_player)])].field_168) = 1\n                                                          stor33 += 2 * storA66C[stor9[address(spin_for_player)]]\n                                                          log Win(\n                                                                address player=address(spin_for_player),\n                                                                uint8 result=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_won=2 * storA66C[stor9[address(spin_for_player)]],\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(spin_for_player, block.hash(stor56A6[stor9[address(spin_for_player)]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[address(spin_for_player)])\n                                                          call spin_for_player with:\n                                                             value 4 * storA66C[stor9[address(spin_for_player)]] wei\n                                                               gas 0 wei\n                          require ext_call.success\n  else:\n      require 1 == stor10[caller]\n      require stor9[caller] < stor7.length\n      require bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1\n      require stor9[caller] < stor7.length\n      require block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160)\n      if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_168):\n          stor10[caller] = 0\n          require stor9[caller] < stor7.length\n          uint8(storA66C[stor9[caller]].field_0) = 255\n          require stor9[caller] < stor7.length\n          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n          require stor9[caller] < stor7.length\n          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n          require stor9[caller] < stor7.length\n          log Loss(\n                address player=caller,\n                uint8 result=255,\n                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                bytes32 bHash=0,\n                bytes32 sha3Player=0,\n                uint256 gambleId=stor9[caller])\n          stor32 = storA66C[stor9[caller]] + stor32 - 1\n          call caller with:\n             value 1 wei\n               gas 0 wei\n          require ext_call.success\n          stop\n      require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n      require stor9[caller] < stor7.length\n      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n          require stor9[caller] < stor7.length\n          stor10[caller] = 0\n          require stor9[caller] < stor7.length\n          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n          require stor9[caller] < stor7.length\n          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n          require stor9[caller] < stor7.length\n          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n          require stor9[caller] < stor7.length\n          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n              log Loss(\n                    address player=caller,\n                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                    uint256 gambleId=stor9[caller])\n              stor32 = storA66C[stor9[caller]] + stor32 - 1\n              call caller with:\n                 value 1 wei\n                   gas 0 wei\n          else:\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n              stor33 += 35 * storA66C[stor9[caller]]\n              log Win(\n                    address player=caller,\n                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                    uint256 value_won=35 * storA66C[stor9[caller]],\n                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                    uint256 gambleId=stor9[caller])\n              call caller with:\n                 value 36 * storA66C[stor9[caller]] wei\n                   gas 0 wei\n          require ext_call.success\n      else:\n          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n              require stor9[caller] < stor7.length\n              stor10[caller] = 0\n              require stor9[caller] < stor7.length\n              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n              require stor9[caller] < stor7.length\n              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n              require stor9[caller] < stor7.length\n              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n              require stor9[caller] < stor7.length\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                  log Loss(\n                        address player=caller,\n                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                        uint256 gambleId=stor9[caller])\n                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                  call caller with:\n                     value 1 wei\n                       gas 0 wei\n              else:\n                  if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                      stor33 += storA66C[stor9[caller]]\n                      log Win(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_won=storA66C[stor9[caller]],\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      call caller with:\n                         value 2 * storA66C[stor9[caller]] wei\n                           gas 0 wei\n              require ext_call.success\n          else:\n              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 1:\n                  idx = 0\n                  while uint8(idx) < 18:\n                      if stor13[uint8(idx)] != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          idx = idx + 1\n                          continue \n                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          stor10[caller] = 0\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                      else:\n                          require stor9[caller] < stor7.length\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                              require stor9[caller] < stor7.length\n                              stor10[caller] = 0\n                              require stor9[caller] < stor7.length\n                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              require stor9[caller] < stor7.length\n                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              require stor9[caller] < stor7.length\n                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                              require stor9[caller] < stor7.length\n                              log Loss(\n                                    address player=caller,\n                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                    uint256 gambleId=stor9[caller])\n                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                              call caller with:\n                                 value 1 wei\n                                   gas 0 wei\n                          else:\n                              stor10[caller] = 0\n                              require stor9[caller] < stor7.length\n                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              require stor9[caller] < stor7.length\n                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              require stor9[caller] < stor7.length\n                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                              require stor9[caller] < stor7.length\n                              require stor9[caller] < stor7.length\n                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                              stor33 += storA66C[stor9[caller]]\n                              log Win(\n                                    address player=caller,\n                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                    uint256 value_won=storA66C[stor9[caller]],\n                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                    uint256 gambleId=stor9[caller])\n                              call caller with:\n                                 value 2 * storA66C[stor9[caller]] wei\n                                   gas 0 wei\n                      require ext_call.success\n                      if payroll / 35 * stor5 <= stor1:\n                          stor6 = payroll / 35 * stor5\n                      else:\n                          stor6 = stor1\n                      stop\n                  if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      log Loss(\n                            address player=caller,\n                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                            uint256 gambleId=stor9[caller])\n                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                      call caller with:\n                         value 1 wei\n                           gas 0 wei\n                  else:\n                      require stor9[caller] < stor7.length\n                      require stor9[caller] < stor7.length\n                      stor10[caller] = 0\n                      require stor9[caller] < stor7.length\n                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                      require stor9[caller] < stor7.length\n                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                      require stor9[caller] < stor7.length\n                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                      require stor9[caller] < stor7.length\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                      else:\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                          stor33 += storA66C[stor9[caller]]\n                          log Win(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_won=storA66C[stor9[caller]],\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          call caller with:\n                             value 2 * storA66C[stor9[caller]] wei\n                               gas 0 wei\n                  require ext_call.success\n              else:\n                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                          stor10[caller] = 0\n                          require stor9[caller] < stor7.length\n                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                          require stor9[caller] < stor7.length\n                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                          require stor9[caller] < stor7.length\n                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                          require stor9[caller] < stor7.length\n                          log Loss(\n                                address player=caller,\n                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                uint256 gambleId=stor9[caller])\n                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                          call caller with:\n                             value 1 wei\n                               gas 0 wei\n                      else:\n                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                              else:\n                                  require stor9[caller] < stor7.length\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                      stor33 += storA66C[stor9[caller]]\n                                      log Win(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_won=storA66C[stor9[caller]],\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      call caller with:\n                                         value 2 * storA66C[stor9[caller]] wei\n                                           gas 0 wei\n                          else:\n                              require stor9[caller] < stor7.length\n                              if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                  stor33 += storA66C[stor9[caller]]\n                                  log Win(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_won=storA66C[stor9[caller]],\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  call caller with:\n                                     value 2 * storA66C[stor9[caller]] wei\n                                       gas 0 wei\n                              else:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n                                  else:\n                                      require stor9[caller] < stor7.length\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                          log Loss(\n                                                address player=caller,\n                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[caller])\n                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                          call caller with:\n                                             value 1 wei\n                                               gas 0 wei\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                          stor33 += storA66C[stor9[caller]]\n                                          log Win(\n                                                address player=caller,\n                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_won=storA66C[stor9[caller]],\n                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[caller])\n                                          call caller with:\n                                             value 2 * storA66C[stor9[caller]] wei\n                                               gas 0 wei\n                      require ext_call.success\n                  else:\n                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 3:\n                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 4:\n                              if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                  stor10[caller] = 0\n                                  require stor9[caller] < stor7.length\n                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                  require stor9[caller] < stor7.length\n                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                  require stor9[caller] < stor7.length\n                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                  require stor9[caller] < stor7.length\n                                  log Loss(\n                                        address player=caller,\n                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                        uint256 gambleId=stor9[caller])\n                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                  call caller with:\n                                     value 1 wei\n                                       gas 0 wei\n                              else:\n                                  require stor9[caller] < stor7.length\n                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      require stor9[caller] < stor7.length\n                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                          require stor9[caller] < stor7.length\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                              log Loss(\n                                                    address player=caller,\n                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                    uint256 gambleId=stor9[caller])\n                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                              call caller with:\n                                                 value 1 wei\n                                                   gas 0 wei\n                                          else:\n                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                  log Loss(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                  call caller with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                  stor33 += 2 * storA66C[stor9[caller]]\n                                                  log Win(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_won=2 * storA66C[stor9[caller]],\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  call caller with:\n                                                     value 4 * storA66C[stor9[caller]] wei\n                                                       gas 0 wei\n                                      else:\n                                          if 2 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                              require stor9[caller] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                              require stor9[caller] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                              require stor9[caller] < stor7.length\n                                              require stor9[caller] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                              stor33 += 2 * storA66C[stor9[caller]]\n                                              log Win(\n                                                    address player=caller,\n                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                    uint256 value_won=2 * storA66C[stor9[caller]],\n                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                    uint256 gambleId=stor9[caller])\n                                              call caller with:\n                                                 value 4 * storA66C[stor9[caller]] wei\n                                                   gas 0 wei\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                              require stor9[caller] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                              require stor9[caller] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                              require stor9[caller] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                  log Loss(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                  call caller with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                              else:\n                                                  if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                  else:\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                      stor33 += 2 * storA66C[stor9[caller]]\n                                                      log Win(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=2 * storA66C[stor9[caller]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      call caller with:\n                                                         value 4 * storA66C[stor9[caller]] wei\n                                                           gas 0 wei\n                                  else:\n                                      if 1 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                          stor33 += 2 * storA66C[stor9[caller]]\n                                          log Win(\n                                                address player=caller,\n                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_won=2 * storA66C[stor9[caller]],\n                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[caller])\n                                          call caller with:\n                                             value 4 * storA66C[stor9[caller]] wei\n                                               gas 0 wei\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                              require stor9[caller] < stor7.length\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                              require stor9[caller] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                              require stor9[caller] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                              require stor9[caller] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                  log Loss(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                  call caller with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                              else:\n                                                  if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                  else:\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                      stor33 += 2 * storA66C[stor9[caller]]\n                                                      log Win(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=2 * storA66C[stor9[caller]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      call caller with:\n                                                         value 4 * storA66C[stor9[caller]] wei\n                                                           gas 0 wei\n                                          else:\n                                              if 2 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                  stor10[caller] = 0\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                  stor33 += 2 * storA66C[stor9[caller]]\n                                                  log Win(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_won=2 * storA66C[stor9[caller]],\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  call caller with:\n                                                     value 4 * storA66C[stor9[caller]] wei\n                                                       gas 0 wei\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                                  stor10[caller] = 0\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                  else:\n                                                      if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                      else:\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                          stor33 += 2 * storA66C[stor9[caller]]\n                                                          log Win(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_won=2 * storA66C[stor9[caller]],\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          call caller with:\n                                                             value 4 * storA66C[stor9[caller]] wei\n                                                               gas 0 wei\n                              require ext_call.success\n                      else:\n                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                              stor10[caller] = 0\n                              require stor9[caller] < stor7.length\n                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                              require stor9[caller] < stor7.length\n                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                              require stor9[caller] < stor7.length\n                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                              require stor9[caller] < stor7.length\n                              log Loss(\n                                    address player=caller,\n                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                    uint256 gambleId=stor9[caller])\n                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                              call caller with:\n                                 value 1 wei\n                                   gas 0 wei\n                          else:\n                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      log Loss(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                      call caller with:\n                                         value 1 wei\n                                           gas 0 wei\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 24:\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                              require stor9[caller] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                              require stor9[caller] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                              require stor9[caller] < stor7.length\n                                              log Loss(\n                                                    address player=caller,\n                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                    uint256 gambleId=stor9[caller])\n                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                              call caller with:\n                                                 value 1 wei\n                                                   gas 0 wei\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                              require stor9[caller] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                              require stor9[caller] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                              require stor9[caller] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                  log Loss(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                  call caller with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                  stor33 += 2 * storA66C[stor9[caller]]\n                                                  log Win(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_won=2 * storA66C[stor9[caller]],\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  call caller with:\n                                                     value 4 * storA66C[stor9[caller]] wei\n                                                       gas 0 wei\n                                      else:\n                                          require stor9[caller] < stor7.length\n                                          if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                              require stor9[caller] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                              require stor9[caller] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                              require stor9[caller] < stor7.length\n                                              require stor9[caller] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                              stor33 += 2 * storA66C[stor9[caller]]\n                                              log Win(\n                                                    address player=caller,\n                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                    uint256 value_won=2 * storA66C[stor9[caller]],\n                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                    uint256 gambleId=stor9[caller])\n                                              call caller with:\n                                                 value 4 * storA66C[stor9[caller]] wei\n                                                   gas 0 wei\n                                          else:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                  stor10[caller] = 0\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  log Loss(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                  call caller with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                                  stor10[caller] = 0\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                  else:\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                      stor33 += 2 * storA66C[stor9[caller]]\n                                                      log Win(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=2 * storA66C[stor9[caller]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      call caller with:\n                                                         value 4 * storA66C[stor9[caller]] wei\n                                                           gas 0 wei\n                              else:\n                                  require stor9[caller] < stor7.length\n                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                      stor10[caller] = 0\n                                      require stor9[caller] < stor7.length\n                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                      require stor9[caller] < stor7.length\n                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                      require stor9[caller] < stor7.length\n                                      require stor9[caller] < stor7.length\n                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                      stor33 += 2 * storA66C[stor9[caller]]\n                                      log Win(\n                                            address player=caller,\n                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                            uint256 value_won=2 * storA66C[stor9[caller]],\n                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                            uint256 gambleId=stor9[caller])\n                                      call caller with:\n                                         value 4 * storA66C[stor9[caller]] wei\n                                           gas 0 wei\n                                  else:\n                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                          stor10[caller] = 0\n                                          require stor9[caller] < stor7.length\n                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                          require stor9[caller] < stor7.length\n                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                          require stor9[caller] < stor7.length\n                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                          require stor9[caller] < stor7.length\n                                          log Loss(\n                                                address player=caller,\n                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                uint256 gambleId=stor9[caller])\n                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                          call caller with:\n                                             value 1 wei\n                                               gas 0 wei\n                                      else:\n                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                  stor10[caller] = 0\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  log Loss(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                  call caller with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                              else:\n                                                  require stor9[caller] < stor7.length\n                                                  stor10[caller] = 0\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                  else:\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                      stor33 += 2 * storA66C[stor9[caller]]\n                                                      log Win(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=2 * storA66C[stor9[caller]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      call caller with:\n                                                         value 4 * storA66C[stor9[caller]] wei\n                                                           gas 0 wei\n                                          else:\n                                              require stor9[caller] < stor7.length\n                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                  stor10[caller] = 0\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                  stor33 += 2 * storA66C[stor9[caller]]\n                                                  log Win(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_won=2 * storA66C[stor9[caller]],\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  call caller with:\n                                                     value 4 * storA66C[stor9[caller]] wei\n                                                       gas 0 wei\n                                              else:\n                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                      stor10[caller] = 0\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      require stor9[caller] < stor7.length\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                  else:\n                                                      require stor9[caller] < stor7.length\n                                                      stor10[caller] = 0\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      require stor9[caller] < stor7.length\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                      else:\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                          stor33 += 2 * storA66C[stor9[caller]]\n                                                          log Win(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_won=2 * storA66C[stor9[caller]],\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          call caller with:\n                                                             value 4 * storA66C[stor9[caller]] wei\n                                                               gas 0 wei\n                          require ext_call.success\n  if payroll / 35 * stor5 <= stor1:\n      stor6 = payroll / 35 * stor5\n  else:\n      stor6 = stor1\n\ndef _fallback(?) payable: # default function\n  require stor11 != 1\n  if not stor7.length:\n      stor4 = 0\n      if stor4 < stor3:\n          if not stor10[caller]:\n              stor10[caller] = 1\n              stor9[caller] = stor7.length\n              totalGambles++\n              if call.value >= stor2:\n                  stor7.length++\n                  if not stor7.length <= stor7.length + 1:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  address(stor7[stor7.length].field_0) = caller\n                  uint16(stor7[stor7.length].field_160) = 0\n                  uint8(stor7[stor7.length].field_176) = 1\n                  uint8(stor7[stor7.length].field_184) = 0\n                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                  stor7[stor7.length].field_256 % 1 = 0\n                  if call.value <= stor6:\n                      uint256(stor7[stor7.length].field_256) = call.value\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if call.value >= call.value:\n                          stop\n                      call caller with:\n                           gas 0 wei\n                  else:\n                      uint256(stor7[stor7.length].field_256) = stor6\n                      uint256(stor7[stor7.length].field_512) = block.number\n                      uint256(stor7[stor7.length].field_768) = 0\n                      uint8(stor7[stor7.length].field_1024) = 37\n                      if stor6 >= call.value:\n                          stop\n                      call caller with:\n                         value call.value - stor6 wei\n                           gas 0 wei\n                  if ext_call.success:\n                      stop\n          else:\n              if caller:\n                  if 1 == stor10[caller]:\n                      if stor9[caller] < stor7.length:\n                          if bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1:\n                              if stor9[caller] < stor7.length:\n                                  if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160):\n                                      if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                                          require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                                          require stor9[caller] < stor7.length\n                                          if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                                              require stor9[caller] < stor7.length\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                              require stor9[caller] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                              require stor9[caller] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                              require stor9[caller] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                  stor33 += 35 * storA66C[stor9[caller]]\n                                                  log Win(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_won=35 * storA66C[stor9[caller]],\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  call caller with:\n                                                     value 36 * storA66C[stor9[caller]] wei\n                                                       gas 0 wei\n                                                  require ext_call.success\n                                                  if payroll / 35 * stor5 <= stor1:\n                                                      stor6 = payroll / 35 * stor5\n                                                  else:\n                                                      stor6 = stor1\n                                              else:\n                                                  log Loss(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                  call caller with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                                  require ext_call.success\n                                                  if payroll / 35 * stor5 <= stor1:\n                                                      stor6 = payroll / 35 * stor5\n                                                      stor10[caller] = 1\n                                                      stor9[caller] = stor7.length\n                                                      totalGambles++\n                                                      require call.value >= stor2\n                                                  else:\n                                                      stor6 = stor1\n                                                      stor10[caller] = 1\n                                                      stor9[caller] = stor7.length\n                                                      totalGambles++\n                                                      if call.value >= stor2:\n                                          else:\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                                                  require stor9[caller] < stor7.length\n                                                  stor10[caller] = 0\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                                                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          if payroll / 35 * stor5 <= stor1:\n                                                              stor6 = payroll / 35 * stor5\n                                                          else:\n                                                              stor6 = stor1\n                                                      else:\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                          stor33 += storA66C[stor9[caller]]\n                                                          log Win(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_won=storA66C[stor9[caller]],\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          call caller with:\n                                                             value 2 * storA66C[stor9[caller]] wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                  else:\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      if payroll / 35 * stor5 > stor1:\n                                                          stor6 = stor1\n                                                      else:\n                                                          stor6 = payroll / 35 * stor5\n                                                          stor10[caller] = 1\n                                                          stor9[caller] = stor7.length\n                                                          totalGambles++\n                                              else:\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                                                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                              stor10[caller] = 0\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              require stor9[caller] < stor7.length\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              require ext_call.success\n                                                              if payroll / 35 * stor5 <= stor1:\n                                                                  stor6 = payroll / 35 * stor5\n                                                              else:\n                                                                  stor6 = stor1\n                                                          else:\n                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                      require ext_call.success\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  require stor9[caller] < stor7.length\n                                                                  stor10[caller] = 0\n                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                      if stor9[caller] < stor7.length:\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          if stor9[caller] < stor7.length:\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              if stor9[caller] < stor7.length:\n                                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                                  if stor9[caller] < stor7.length:\n                                                                                      log Loss(\n                                                                                            address player=caller,\n                                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                            uint256 gambleId=stor9[caller])\n                                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                                      call caller with:\n                                                                                         value 1 wei\n                                                                                           gas 0 wei\n                                                                                      if ext_call.success:\n                                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  else:\n                                                                      if stor9[caller] < stor7.length:\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          if stor9[caller] < stor7.length:\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              if stor9[caller] < stor7.length:\n                                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                                  if stor9[caller] < stor7.length:\n                                                                                      if stor9[caller] < stor7.length:\n                                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                                                          stor33 += storA66C[stor9[caller]]\n                                                                                          log Win(\n                                                                                                address player=caller,\n                                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                                uint256 value_won=storA66C[stor9[caller]],\n                                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                                uint256 gambleId=stor9[caller])\n                                                                                          call caller with:\n                                                                                             value 2 * storA66C[stor9[caller]] wei\n                                                                                               gas 0 wei\n                                                                                          if ext_call.success:\n                                                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  revert \n                                                              require stor9[caller] < stor7.length\n                                                              if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                                  stor33 += storA66C[stor9[caller]]\n                                                                  log Win(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_won=storA66C[stor9[caller]],\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  call caller with:\n                                                                     value 2 * storA66C[stor9[caller]] wei\n                                                                       gas 0 wei\n                                                              else:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                      require ext_call.success\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  require stor9[caller] < stor7.length\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                  else:\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                                      stor33 += storA66C[stor9[caller]]\n                                                                      log Win(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_won=storA66C[stor9[caller]],\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      call caller with:\n                                                                         value 2 * storA66C[stor9[caller]] wei\n                                                                           gas 0 wei\n                                                      else:\n                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                                              if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  log Loss(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                  call caller with:\n                                                                     value 1 wei\n                                                                       gas 0 wei\n                                                                  require ext_call.success\n                                                                  if payroll / 35 * stor5 <= stor1:\n                                                                      stor6 = payroll / 35 * stor5\n                                                                  else:\n                                                                      stor6 = stor1\n                                                              else:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 13:\n                                                                      require stor9[caller] < stor7.length\n                                                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                      else:\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          else:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                      stor10[caller] = 0\n                                                                                  else:\n                                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                                                          stor10[caller] = 0\n                                                                                      else:\n                                                                                          require stor9[caller] < stor7.length\n                                                                              else:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                                          stor10[caller] = 0\n                                                                                  else:\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  else:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                                  require stor9[caller] < stor7.length\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                  if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  else:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          else:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              else:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                                          stor10[caller] = 0\n                                                                                  else:\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      else:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                          log Loss(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                          call caller with:\n                                                                             value 1 wei\n                                                                               gas 0 wei\n                                                          else:\n                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 4:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                      require stor9[caller] < stor7.length\n                                                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          if 1 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                              require stor9[caller] < stor7.length\n                                                                          else:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  if 2 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                  else:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      stor10[caller] = 0\n                                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                                      else:\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      else:\n                                                                          require stor9[caller] < stor7.length\n                                                                          if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              if 2 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          else:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  else:\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                      require ext_call.success\n                                                                      if payroll / 35 * stor5 <= stor1:\n                                                                          stor6 = payroll / 35 * stor5\n                                                                      else:\n                                                                          stor6 = stor1\n                                                              else:\n                                                                  if payroll / 35 * stor5 <= stor1:\n                                                                      stor6 = payroll / 35 * stor5\n                                                                  else:\n                                                                      stor6 = stor1\n                                                                  stor10[caller] = 1\n                                                                  stor9[caller] = stor7.length\n                                                                  totalGambles++\n                                                                  require call.value >= stor2\n                                                                  stor7.length++\n                                                                  if call.value <= stor6:\n                                                                      if not stor7.length > stor7.length + 1:\n                                                                          address(stor7[stor7.length].field_0) = caller\n                                                                          uint16(stor7[stor7.length].field_160) = 0\n                                                                          uint8(stor7[stor7.length].field_176) = 1\n                                                                          uint8(stor7[stor7.length].field_184) = 0\n                                                                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                          stor7[stor7.length].field_256 % 1 = 0\n                                                                          uint256(stor7[stor7.length].field_256) = call.value\n                                                                          uint256(stor7[stor7.length].field_512) = block.number\n                                                                          uint256(stor7[stor7.length].field_768) = 0\n                                                                          uint8(stor7[stor7.length].field_1024) = 37\n                                                                          if call.value < call.value:\n                                                                              call caller with:\n                                                                                   gas 0 wei\n                                                                  else:\n                                                                      if not stor7.length > stor7.length + 1:\n                                                                          address(stor7[stor7.length].field_0) = caller\n                                                                          uint16(stor7[stor7.length].field_160) = 0\n                                                                          uint8(stor7[stor7.length].field_176) = 1\n                                                                          uint8(stor7[stor7.length].field_184) = 0\n                                                                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                          stor7[stor7.length].field_256 % 1 = 0\n                                                                          uint256(stor7[stor7.length].field_256) = stor6\n                                                                          uint256(stor7[stor7.length].field_512) = block.number\n                                                                          uint256(stor7[stor7.length].field_768) = 0\n                                                                          uint8(stor7[stor7.length].field_1024) = 37\n                                                                          if stor6 < call.value:\n                                                                              call caller with:\n                                                                                 value call.value - stor6 wei\n                                                                                   gas 0 wei\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      stor10[caller] = 0\n                                      if stor9[caller] < stor7.length:\n                                          uint8(storA66C[stor9[caller]].field_0) = 255\n                                          if stor9[caller] < stor7.length:\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                              if stor9[caller] < stor7.length:\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  if stor9[caller] < stor7.length:\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=255,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=0,\n                                                            bytes32 sha3Player=0,\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                      if ext_call.success:\n                                                          stor10[caller] = 1\n                                                          stor9[caller] = stor7.length\n                                                          totalGambles++\n                                                          if call.value >= stor2:\n                                                              stor7.length++\n                                                              if not stor7.length <= stor7.length + 1:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                              address(stor7[stor7.length].field_0) = caller\n                                                              uint16(stor7[stor7.length].field_160) = 0\n                                                              uint8(stor7[stor7.length].field_176) = 1\n                                                              uint8(stor7[stor7.length].field_184) = 0\n                                                              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                              stor7[stor7.length].field_256 % 1 = 0\n                                                              if call.value <= stor6:\n                                                                  uint256(stor7[stor7.length].field_256) = call.value\n                                                                  uint256(stor7[stor7.length].field_512) = block.number\n                                                                  uint256(stor7[stor7.length].field_768) = 0\n                                                                  uint8(stor7[stor7.length].field_1024) = 37\n                                                                  if call.value >= call.value:\n                                                                      stop\n                                                                  call caller with:\n                                                                       gas 0 wei\n                                                              else:\n                                                                  uint256(stor7[stor7.length].field_256) = stor6\n                                                                  uint256(stor7[stor7.length].field_512) = block.number\n                                                                  uint256(stor7[stor7.length].field_768) = 0\n                                                                  uint8(stor7[stor7.length].field_1024) = 37\n                                                                  if stor6 >= call.value:\n                                                                      stop\n                                                                  call caller with:\n                                                                     value call.value - stor6 wei\n                                                                       gas 0 wei\n                                                              if ext_call.success:\n                                                                  stop\n              else:\n                  if 1 == stor10[caller]:\n                      if stor9[caller] < stor7.length:\n                          if bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1:\n                              if stor9[caller] < stor7.length:\n                                  if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160):\n                                      if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                                          require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                                          require stor9[caller] < stor7.length\n                                          if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                                              require stor9[caller] < stor7.length\n                                              stor10[caller] = 0\n                                              require stor9[caller] < stor7.length\n                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                              require stor9[caller] < stor7.length\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                              require stor9[caller] < stor7.length\n                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                              require stor9[caller] < stor7.length\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                  stor33 += 35 * storA66C[stor9[caller]]\n                                                  log Win(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_won=35 * storA66C[stor9[caller]],\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  call caller with:\n                                                     value 36 * storA66C[stor9[caller]] wei\n                                                       gas 0 wei\n                                                  require ext_call.success\n                                                  if payroll / 35 * stor5 <= stor1:\n                                                      stor6 = payroll / 35 * stor5\n                                                  else:\n                                                      stor6 = stor1\n                                              else:\n                                                  log Loss(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                  call caller with:\n                                                     value 1 wei\n                                                       gas 0 wei\n                                                  require ext_call.success\n                                                  if payroll / 35 * stor5 > stor1:\n                                                      stor6 = stor1\n                                                      stor10[caller] = 1\n                                                      stor9[caller] = stor7.length\n                                                      totalGambles++\n                                                  else:\n                                                      stor6 = payroll / 35 * stor5\n                                                      stor10[caller] = 1\n                                                      stor9[caller] = stor7.length\n                                                      totalGambles++\n                                                      if call.value >= stor2:\n                                          else:\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                                                  require stor9[caller] < stor7.length\n                                                  stor10[caller] = 0\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      require stor9[caller] < stor7.length\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      if payroll / 35 * stor5 <= stor1:\n                                                          stor6 = payroll / 35 * stor5\n                                                      else:\n                                                          stor6 = stor1\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      require stor9[caller] < stor7.length\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      if payroll / 35 * stor5 <= stor1:\n                                                          stor6 = payroll / 35 * stor5\n                                                      else:\n                                                          stor6 = stor1\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                  stor33 += storA66C[stor9[caller]]\n                                                  log Win(\n                                                        address player=caller,\n                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                        uint256 value_won=storA66C[stor9[caller]],\n                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                        uint256 gambleId=stor9[caller])\n                                                  call caller with:\n                                                     value 2 * storA66C[stor9[caller]] wei\n                                                       gas 0 wei\n                                                  require ext_call.success\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                                                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                          stor10[caller] = 0\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          require stor9[caller] < stor7.length\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          if payroll / 35 * stor5 <= stor1:\n                                                              stor6 = payroll / 35 * stor5\n                                                          else:\n                                                              stor6 = stor1\n                                                      else:\n                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  log Loss(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                  call caller with:\n                                                                     value 1 wei\n                                                                       gas 0 wei\n                                                                  require ext_call.success\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                              require stor9[caller] < stor7.length\n                                                              stor10[caller] = 0\n                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  log Loss(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                  call caller with:\n                                                                     value 1 wei\n                                                                       gas 0 wei\n                                                                  require ext_call.success\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              require stor9[caller] < stor7.length\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                              stor33 += storA66C[stor9[caller]]\n                                                              log Win(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_won=storA66C[stor9[caller]],\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              call caller with:\n                                                                 value 2 * storA66C[stor9[caller]] wei\n                                                                   gas 0 wei\n                                                          else:\n                                                              require stor9[caller] < stor7.length\n                                                              if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                                  stor33 += storA66C[stor9[caller]]\n                                                                  log Win(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_won=storA66C[stor9[caller]],\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  call caller with:\n                                                                     value 2 * storA66C[stor9[caller]] wei\n                                                                       gas 0 wei\n                                                              else:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                  else:\n                                                                      require stor9[caller] < stor7.length\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                      else:\n                                                                          log Loss(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                          call caller with:\n                                                                             value 1 wei\n                                                                               gas 0 wei\n                                                  else:\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 13:\n                                                                  require stor9[caller] < stor7.length\n                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      else:\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                      require stor9[caller] < stor7.length\n                                                                          else:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                  require stor9[caller] < stor7.length\n                                                                              else:\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  else:\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                              else:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                  else:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                                          require stor9[caller] < stor7.length\n                                                                          if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          else:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                  require stor9[caller] < stor7.length\n                                                                              else:\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      else:\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                              require stor9[caller] < stor7.length\n                                                                              stor10[caller] = 0\n                                                                              if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          else:\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          else:\n                                                              stor10[caller] = 0\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              require stor9[caller] < stor7.length\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              require ext_call.success\n                                                              if payroll / 35 * stor5 <= stor1:\n                                                                  stor6 = payroll / 35 * stor5\n                                                              else:\n                                                                  stor6 = stor1\n                                                      else:\n                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 4:\n                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                  require stor9[caller] < stor7.length\n                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                      require stor9[caller] < stor7.length\n                                                                      if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          if 2 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          else:\n                                                                              require stor9[caller] < stor7.length\n                                                                              stor10[caller] = 0\n                                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                              else:\n                                                                      else:\n                                                                          require stor9[caller] < stor7.length\n                                                                          if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  else:\n                                                                      if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                                          require stor9[caller] < stor7.length\n                                                                          if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              if 2 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                                  stor10[caller] = 0\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          else:\n                                                                              require stor9[caller] < stor7.length\n                                                                              stor10[caller] = 0\n                                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                              else:\n                                                                      else:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              else:\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  log Loss(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                  call caller with:\n                                                                     value 1 wei\n                                                                       gas 0 wei\n                                                                  require ext_call.success\n                                                          else:\n                                                              if payroll / 35 * stor5 > stor1:\n                                                                  stor6 = stor1\n                                                                  stor10[caller] = 1\n                                                                  stor9[caller] = stor7.length\n                                                                  totalGambles++\n                                                                  require call.value >= stor2\n                                                                  stor7.length++\n                                                                  if call.value <= stor6:\n                                                                      if not stor7.length > stor7.length + 1:\n                                                                          address(stor7[stor7.length].field_0) = caller\n                                                                          uint16(stor7[stor7.length].field_160) = 0\n                                                                          uint8(stor7[stor7.length].field_176) = 1\n                                                                          uint8(stor7[stor7.length].field_184) = 0\n                                                                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                          stor7[stor7.length].field_256 % 1 = 0\n                                                                          uint256(stor7[stor7.length].field_256) = call.value\n                                                                          uint256(stor7[stor7.length].field_512) = block.number\n                                                                          uint256(stor7[stor7.length].field_768) = 0\n                                                                          uint8(stor7[stor7.length].field_1024) = 37\n                                                                  else:\n                                                                      if not stor7.length > stor7.length + 1:\n                                                                          address(stor7[stor7.length].field_0) = caller\n                                                                          uint16(stor7[stor7.length].field_160) = 0\n                                                                          uint8(stor7[stor7.length].field_176) = 1\n                                                                          uint8(stor7[stor7.length].field_184) = 0\n                                                                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                          stor7[stor7.length].field_256 % 1 = 0\n                                                                          uint256(stor7[stor7.length].field_256) = stor6\n                                                                          uint256(stor7[stor7.length].field_512) = block.number\n                                                                          uint256(stor7[stor7.length].field_768) = 0\n                                                                          uint8(stor7[stor7.length].field_1024) = 37\n                                                              else:\n                                                                  stor6 = payroll / 35 * stor5\n                                                                  stor10[caller] = 1\n                                                                  stor9[caller] = stor7.length\n                                                                  totalGambles++\n                                                                  require call.value >= stor2\n                                                                  stor7.length++\n                                                                  if call.value <= stor6:\n                                                                      if not stor7.length > stor7.length + 1:\n                                                                          address(stor7[stor7.length].field_0) = caller\n                                                                          uint16(stor7[stor7.length].field_160) = 0\n                                                                          uint8(stor7[stor7.length].field_176) = 1\n                                                                          uint8(stor7[stor7.length].field_184) = 0\n                                                                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                          stor7[stor7.length].field_256 % 1 = 0\n                                                                          uint256(stor7[stor7.length].field_256) = call.value\n                                                                          uint256(stor7[stor7.length].field_512) = block.number\n                                                                          uint256(stor7[stor7.length].field_768) = 0\n                                                                          uint8(stor7[stor7.length].field_1024) = 37\n                                                                          if call.value < call.value:\n                                                                              call caller with:\n                                                                                   gas 0 wei\n                                                                  else:\n                                                                      if not stor7.length > stor7.length + 1:\n                                                                          address(stor7[stor7.length].field_0) = caller\n                                                                          uint16(stor7[stor7.length].field_160) = 0\n                                                                          uint8(stor7[stor7.length].field_176) = 1\n                                                                          uint8(stor7[stor7.length].field_184) = 0\n                                                                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                          stor7[stor7.length].field_256 % 1 = 0\n                                                                          uint256(stor7[stor7.length].field_256) = stor6\n                                                                          uint256(stor7[stor7.length].field_512) = block.number\n                                                                          uint256(stor7[stor7.length].field_768) = 0\n                                                                          uint8(stor7[stor7.length].field_1024) = 37\n                                                                          if stor6 < call.value:\n                                                                              call caller with:\n                                                                                 value call.value - stor6 wei\n                                                                                   gas 0 wei\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      stor10[caller] = 0\n                                      if stor9[caller] < stor7.length:\n                                          uint8(storA66C[stor9[caller]].field_0) = 255\n                                          if stor9[caller] < stor7.length:\n                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                              if stor9[caller] < stor7.length:\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  if stor9[caller] < stor7.length:\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=255,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=0,\n                                                            bytes32 sha3Player=0,\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                      if ext_call.success:\n                                                          stor10[caller] = 1\n                                                          stor9[caller] = stor7.length\n                                                          totalGambles++\n                                                          if call.value >= stor2:\n                                                              stor7.length++\n                                                              if not stor7.length <= stor7.length + 1:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                              address(stor7[stor7.length].field_0) = caller\n                                                              uint16(stor7[stor7.length].field_160) = 0\n                                                              uint8(stor7[stor7.length].field_176) = 1\n                                                              uint8(stor7[stor7.length].field_184) = 0\n                                                              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                              stor7[stor7.length].field_256 % 1 = 0\n                                                              if call.value <= stor6:\n                                                                  uint256(stor7[stor7.length].field_256) = call.value\n                                                                  uint256(stor7[stor7.length].field_512) = block.number\n                                                                  uint256(stor7[stor7.length].field_768) = 0\n                                                                  uint8(stor7[stor7.length].field_1024) = 37\n                                                                  if call.value >= call.value:\n                                                                      stop\n                                                                  call caller with:\n                                                                       gas 0 wei\n                                                              else:\n                                                                  uint256(stor7[stor7.length].field_256) = stor6\n                                                                  uint256(stor7[stor7.length].field_512) = block.number\n                                                                  uint256(stor7[stor7.length].field_768) = 0\n                                                                  uint8(stor7[stor7.length].field_1024) = 37\n                                                                  if stor6 >= call.value:\n                                                                      stop\n                                                                  call caller with:\n                                                                     value call.value - stor6 wei\n                                                                       gas 0 wei\n                                                              if ext_call.success:\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  else:\n      if stor7.length - 1 < stor7.length:\n          if stor56A6[stor7.length] != block.number:\n              stor4 = 0\n          else:\n              stor4++\n          if stor4 < stor3:\n              if not stor10[caller]:\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  if call.value >= stor2:\n                      stor7.length++\n                      if not stor7.length <= stor7.length + 1:\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      address(stor7[stor7.length].field_0) = caller\n                      uint16(stor7[stor7.length].field_160) = 0\n                      uint8(stor7[stor7.length].field_176) = 1\n                      uint8(stor7[stor7.length].field_184) = 0\n                      uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                      stor7[stor7.length].field_256 % 1 = 0\n                      if call.value <= stor6:\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if call.value >= call.value:\n                              stop\n                          call caller with:\n                               gas 0 wei\n                      else:\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if stor6 >= call.value:\n                              stop\n                          call caller with:\n                             value call.value - stor6 wei\n                               gas 0 wei\n                      if ext_call.success:\n                          stop\n              else:\n                  if caller:\n                      if 1 == stor10[caller]:\n                          if stor9[caller] < stor7.length:\n                              if bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1:\n                                  if stor9[caller] < stor7.length:\n                                      if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160):\n                                          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                                              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                                              require stor9[caller] < stor7.length\n                                              if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                                                  require stor9[caller] < stor7.length\n                                                  stor10[caller] = 0\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                      stor33 += 35 * storA66C[stor9[caller]]\n                                                      log Win(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=35 * storA66C[stor9[caller]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      call caller with:\n                                                         value 36 * storA66C[stor9[caller]] wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      if payroll / 35 * stor5 <= stor1:\n                                                          stor6 = payroll / 35 * stor5\n                                                      else:\n                                                          stor6 = stor1\n                                                  else:\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      if payroll / 35 * stor5 > stor1:\n                                                          stor6 = stor1\n                                                      else:\n                                                          stor6 = payroll / 35 * stor5\n                                                          stor10[caller] = 1\n                                                          stor9[caller] = stor7.length\n                                                          totalGambles++\n                                              else:\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                                                      require stor9[caller] < stor7.length\n                                                      stor10[caller] = 0\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          require stor9[caller] < stor7.length\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          if payroll / 35 * stor5 <= stor1:\n                                                              stor6 = payroll / 35 * stor5\n                                                          else:\n                                                              stor6 = stor1\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          require stor9[caller] < stor7.length\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          if payroll / 35 * stor5 <= stor1:\n                                                              stor6 = payroll / 35 * stor5\n                                                          else:\n                                                              stor6 = stor1\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      require stor9[caller] < stor7.length\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                      stor33 += storA66C[stor9[caller]]\n                                                      log Win(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=storA66C[stor9[caller]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      call caller with:\n                                                         value 2 * storA66C[stor9[caller]] wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                                                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                              stor10[caller] = 0\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              require stor9[caller] < stor7.length\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              require ext_call.success\n                                                              if payroll / 35 * stor5 <= stor1:\n                                                                  stor6 = payroll / 35 * stor5\n                                                              else:\n                                                                  stor6 = stor1\n                                                          else:\n                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                                                  require stor9[caller] < stor7.length\n                                                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                  else:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 18:\n                                                                          require stor9[caller] < stor7.length\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                      else:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                          log Loss(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                          call caller with:\n                                                                             value 1 wei\n                                                                               gas 0 wei\n                                                              else:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                      require ext_call.success\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  require stor9[caller] < stor7.length\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                  else:\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                                      stor33 += storA66C[stor9[caller]]\n                                                                      log Win(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_won=storA66C[stor9[caller]],\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      call caller with:\n                                                                         value 2 * storA66C[stor9[caller]] wei\n                                                                           gas 0 wei\n                                                      else:\n                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      else:\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  stor10[caller] = 0\n                                                                              else:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                                                      stor10[caller] = 0\n                                                                                  else:\n                                                                                      require stor9[caller] < stor7.length\n                                                                          else:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                                      stor10[caller] = 0\n                                                                              else:\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  else:\n                                                                      require stor9[caller] < stor7.length\n                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          else:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                                                      stor10[caller] = 0\n                                                                                  else:\n                                                                                      require stor9[caller] < stor7.length\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                      else:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              else:\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  log Loss(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                  call caller with:\n                                                                     value 1 wei\n                                                                       gas 0 wei\n                                                                  require ext_call.success\n                                                          else:\n                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 4:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                      require stor9[caller] < stor7.length\n                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          require stor9[caller] < stor7.length\n                                                                          if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              if 2 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                                  stor10[caller] = 0\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          else:\n                                                                              require stor9[caller] < stor7.length\n                                                                              stor10[caller] = 0\n                                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                              else:\n                                                                      else:\n                                                                          if 1 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          else:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              else:\n                                                                                  if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 2:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  log Loss(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                  call caller with:\n                                                                     value 1 wei\n                                                                       gas 0 wei\n                                                                  require ext_call.success\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                              if payroll / 35 * stor5 > stor1:\n                                                                  stor6 = stor1\n                                                                  stor10[caller] = 1\n                                                                  stor9[caller] = stor7.length\n                                                                  totalGambles++\n                                                                  require call.value >= stor2\n                                                                  stor7.length++\n                                                              else:\n                                                                  stor6 = payroll / 35 * stor5\n                                                                  stor10[caller] = 1\n                                                                  stor9[caller] = stor7.length\n                                                                  totalGambles++\n                                                                  require call.value >= stor2\n                                                                  stor7.length++\n                                                                  if call.value <= stor6:\n                                                                      if not stor7.length > stor7.length + 1:\n                                                                          address(stor7[stor7.length].field_0) = caller\n                                                                          uint16(stor7[stor7.length].field_160) = 0\n                                                                          uint8(stor7[stor7.length].field_176) = 1\n                                                                          uint8(stor7[stor7.length].field_184) = 0\n                                                                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                          stor7[stor7.length].field_256 % 1 = 0\n                                                                          uint256(stor7[stor7.length].field_256) = call.value\n                                                                          uint256(stor7[stor7.length].field_512) = block.number\n                                                                          uint256(stor7[stor7.length].field_768) = 0\n                                                                          uint8(stor7[stor7.length].field_1024) = 37\n                                                                  else:\n                                                                      if not stor7.length > stor7.length + 1:\n                                                                          address(stor7[stor7.length].field_0) = caller\n                                                                          uint16(stor7[stor7.length].field_160) = 0\n                                                                          uint8(stor7[stor7.length].field_176) = 1\n                                                                          uint8(stor7[stor7.length].field_184) = 0\n                                                                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                          stor7[stor7.length].field_256 % 1 = 0\n                                                                          uint256(stor7[stor7.length].field_256) = stor6\n                                                                          uint256(stor7[stor7.length].field_512) = block.number\n                                                                          uint256(stor7[stor7.length].field_768) = 0\n                                                                          uint8(stor7[stor7.length].field_1024) = 37\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          stor10[caller] = 0\n                                          if stor9[caller] < stor7.length:\n                                              uint8(storA66C[stor9[caller]].field_0) = 255\n                                              if stor9[caller] < stor7.length:\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  if stor9[caller] < stor7.length:\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      if stor9[caller] < stor7.length:\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=255,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=0,\n                                                                bytes32 sha3Player=0,\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          if ext_call.success:\n                                                              stor10[caller] = 1\n                                                              stor9[caller] = stor7.length\n                                                              totalGambles++\n                                                              if call.value >= stor2:\n                                                                  stor7.length++\n                                                                  if not stor7.length <= stor7.length + 1:\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  address(stor7[stor7.length].field_0) = caller\n                                                                  uint16(stor7[stor7.length].field_160) = 0\n                                                                  uint8(stor7[stor7.length].field_176) = 1\n                                                                  uint8(stor7[stor7.length].field_184) = 0\n                                                                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                  stor7[stor7.length].field_256 % 1 = 0\n                                                                  if call.value <= stor6:\n                                                                      uint256(stor7[stor7.length].field_256) = call.value\n                                                                      uint256(stor7[stor7.length].field_512) = block.number\n                                                                      uint256(stor7[stor7.length].field_768) = 0\n                                                                      uint8(stor7[stor7.length].field_1024) = 37\n                                                                      if call.value >= call.value:\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      call caller with:\n                                                                           gas 0 wei\n                                                                  else:\n                                                                      uint256(stor7[stor7.length].field_256) = stor6\n                                                                      uint256(stor7[stor7.length].field_512) = block.number\n                                                                      uint256(stor7[stor7.length].field_768) = 0\n                                                                      uint8(stor7[stor7.length].field_1024) = 37\n                                                                      if stor6 >= call.value:\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      call caller with:\n                                                                         value call.value - stor6 wei\n                                                                           gas 0 wei\n                                                                  if ext_call.success:\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  else:\n                      if 1 == stor10[caller]:\n                          if stor9[caller] < stor7.length:\n                              if bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1:\n                                  if stor9[caller] < stor7.length:\n                                      if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160):\n                                          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                                              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                                              require stor9[caller] < stor7.length\n                                              if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                                                  require stor9[caller] < stor7.length\n                                                  stor10[caller] = 0\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      if payroll / 35 * stor5 <= stor1:\n                                                          stor6 = payroll / 35 * stor5\n                                                      else:\n                                                          stor6 = stor1\n                                                  else:\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                      stor33 += 35 * storA66C[stor9[caller]]\n                                                      log Win(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=35 * storA66C[stor9[caller]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      call caller with:\n                                                         value 36 * storA66C[stor9[caller]] wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                              else:\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                                                      require stor9[caller] < stor7.length\n                                                      stor10[caller] = 0\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          require stor9[caller] < stor7.length\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          if payroll / 35 * stor5 <= stor1:\n                                                              stor6 = payroll / 35 * stor5\n                                                          else:\n                                                              stor6 = stor1\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          require stor9[caller] < stor7.length\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      require stor9[caller] < stor7.length\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                      stor33 += storA66C[stor9[caller]]\n                                                      log Win(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=storA66C[stor9[caller]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      call caller with:\n                                                         value 2 * storA66C[stor9[caller]] wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 5:\n                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      else:\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                      require stor9[caller] < stor7.length\n                                                                          else:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                  require stor9[caller] < stor7.length\n                                                                              else:\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  else:\n                                                                      require stor9[caller] < stor7.length\n                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                              stor10[caller] = 0\n                                                                          else:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                      require stor9[caller] < stor7.length\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                      else:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                          else:\n                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                                                  if payroll / 35 * stor5 > stor1:\n                                                                      stor6 = stor1\n                                                                      stor10[caller] = 1\n                                                                      stor9[caller] = stor7.length\n                                                                      totalGambles++\n                                                                      require call.value >= stor2\n                                                                  else:\n                                                                      stor6 = payroll / 35 * stor5\n                                                                      stor10[caller] = 1\n                                                                      stor9[caller] = stor7.length\n                                                                      totalGambles++\n                                                                      require call.value >= stor2\n                                                                      stor7.length++\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                  require stor9[caller] < stor7.length\n                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                      require stor9[caller] < stor7.length\n                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                          require stor9[caller] < stor7.length\n                                                                          if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                      else:\n                                                                          if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 2:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                  else:\n                                                                      if 1 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      else:\n                                                                          require stor9[caller] < stor7.length\n                                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          else:\n                                                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 2:\n                                                                                  require stor9[caller] < stor7.length\n                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                          ('iszero', ('mask_shl', 8, 0, 0, ('mod', ('sha3', ('data', 'caller', ('blockhash', ('add', ('stor', ('array', ('mul', 5, ('stor', ('map', ('mask_shl', 160, 0, 0, 'caller'), ('name', 'stor9', 9)))), ('name', 'stor56A6', 39192952402756187425302384862487251540968225014669488259582314013099748177606))), ('type', 8, ('field', 160, ('stor', ('name', 'stor0', 0)))))))), 37)))\n                                                          stor10[caller] = 0\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          require stor9[caller] < stor7.length\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                          stor10[caller] = 0\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          require stor9[caller] < stor7.length\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                      else:\n                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                                              require stor9[caller] < stor7.length\n                                                              if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                              else:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                  else:\n                                                                      require stor9[caller] < stor7.length\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          else:\n                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  log Loss(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                  call caller with:\n                                                                     value 1 wei\n                                                                       gas 0 wei\n                                                              else:\n                                                                  require stor9[caller] < stor7.length\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                  else:\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          stor10[caller] = 0\n                                          if stor9[caller] < stor7.length:\n                                              uint8(storA66C[stor9[caller]].field_0) = 255\n                                              if stor9[caller] < stor7.length:\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  if stor9[caller] < stor7.length:\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      if stor9[caller] < stor7.length:\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=255,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=0,\n                                                                bytes32 sha3Player=0,\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          if ext_call.success:\n                                                              stor10[caller] = 1\n                                                              stor9[caller] = stor7.length\n                                                              totalGambles++\n                                                              if call.value >= stor2:\n                                                                  stor7.length++\n                                                                  if not stor7.length <= stor7.length + 1:\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  address(stor7[stor7.length].field_0) = caller\n                                                                  uint16(stor7[stor7.length].field_160) = 0\n                                                                  uint8(stor7[stor7.length].field_176) = 1\n                                                                  uint8(stor7[stor7.length].field_184) = 0\n                                                                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                  stor7[stor7.length].field_256 % 1 = 0\n                                                                  if call.value <= stor6:\n                                                                      uint256(stor7[stor7.length].field_256) = call.value\n                                                                      uint256(stor7[stor7.length].field_512) = block.number\n                                                                      uint256(stor7[stor7.length].field_768) = 0\n                                                                      uint8(stor7[stor7.length].field_1024) = 37\n                                                                      if call.value >= call.value:\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      call caller with:\n                                                                           gas 0 wei\n                                                                  else:\n                                                                      uint256(stor7[stor7.length].field_256) = stor6\n                                                                      uint256(stor7[stor7.length].field_512) = block.number\n                                                                      uint256(stor7[stor7.length].field_768) = 0\n                                                                      uint8(stor7[stor7.length].field_1024) = 37\n                                                                      if stor6 >= call.value:\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      call caller with:\n                                                                         value call.value - stor6 wei\n                                                                           gas 0 wei\n                                                                  if ext_call.success:\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  revert \n\ndef betOnNumber(uint8 numberChosen) payable: \n  require stor11 != 1\n  if not stor7.length:\n      stor4 = 0\n      if stor4 < stor3:\n          if numberChosen <= 36:\n              if not stor10[caller]:\n                  stor10[caller] = 1\n                  stor9[caller] = stor7.length\n                  totalGambles++\n                  if call.value >= stor2:\n                      stor7.length++\n                      if not stor7.length <= stor7.length + 1:\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      address(stor7[stor7.length].field_0) = caller\n                      stor7[stor7.length].field_160 % unknown01000000() = 0\n                      Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                      uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                      if call.value <= stor6:\n                          uint256(stor7[stor7.length].field_256) = call.value\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if call.value >= call.value:\n                              stop\n                          call caller with:\n                               gas 0 wei\n                      else:\n                          uint256(stor7[stor7.length].field_256) = stor6\n                          uint256(stor7[stor7.length].field_512) = block.number\n                          uint256(stor7[stor7.length].field_768) = 0\n                          uint8(stor7[stor7.length].field_1024) = 37\n                          if stor6 >= call.value:\n                              stop\n                          call caller with:\n                             value call.value - stor6 wei\n                               gas 0 wei\n                      if ext_call.success:\n                          stop\n              else:\n                  if caller:\n                      if 1 == stor10[caller]:\n                          if stor9[caller] < stor7.length:\n                              if bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1:\n                                  if stor9[caller] < stor7.length:\n                                      if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160):\n                                          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                                              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                                              require stor9[caller] < stor7.length\n                                              if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                                                  require stor9[caller] < stor7.length\n                                                  stor10[caller] = 0\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                      stor33 += 35 * storA66C[stor9[caller]]\n                                                      log Win(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=35 * storA66C[stor9[caller]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      call caller with:\n                                                         value 36 * storA66C[stor9[caller]] wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      if payroll / 35 * stor5 <= stor1:\n                                                          stor6 = payroll / 35 * stor5\n                                                      else:\n                                                          stor6 = stor1\n                                                  else:\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      if payroll / 35 * stor5 <= stor1:\n                                                          stor6 = payroll / 35 * stor5\n                                                          stor10[caller] = 1\n                                                          stor9[caller] = stor7.length\n                                                          totalGambles++\n                                                          require call.value >= stor2\n                                                      else:\n                                                          stor6 = stor1\n                                                          stor10[caller] = 1\n                                                          stor9[caller] = stor7.length\n                                                          totalGambles++\n                                                          if call.value >= stor2:\n                                              else:\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                                                      require stor9[caller] < stor7.length\n                                                      stor10[caller] = 0\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      require stor9[caller] < stor7.length\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                                                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              require ext_call.success\n                                                              if payroll / 35 * stor5 <= stor1:\n                                                                  stor6 = payroll / 35 * stor5\n                                                              else:\n                                                                  stor6 = stor1\n                                                          else:\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                              stor33 += storA66C[stor9[caller]]\n                                                              log Win(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_won=storA66C[stor9[caller]],\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              call caller with:\n                                                                 value 2 * storA66C[stor9[caller]] wei\n                                                                   gas 0 wei\n                                                              require ext_call.success\n                                                      else:\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          if payroll / 35 * stor5 > stor1:\n                                                              stor6 = stor1\n                                                          else:\n                                                              stor6 = payroll / 35 * stor5\n                                                              stor10[caller] = 1\n                                                              stor9[caller] = stor7.length\n                                                              totalGambles++\n                                                  else:\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                                                              if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  log Loss(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                  call caller with:\n                                                                     value 1 wei\n                                                                       gas 0 wei\n                                                                  require ext_call.success\n                                                                  if payroll / 35 * stor5 <= stor1:\n                                                                      stor6 = payroll / 35 * stor5\n                                                                  else:\n                                                                      stor6 = stor1\n                                                              else:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                          log Loss(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                          call caller with:\n                                                                             value 1 wei\n                                                                               gas 0 wei\n                                                                          require ext_call.success\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      require stor9[caller] < stor7.length\n                                                                      stor10[caller] = 0\n                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                          if stor9[caller] < stor7.length:\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              if stor9[caller] < stor7.length:\n                                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                                  if stor9[caller] < stor7.length:\n                                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                                      if stor9[caller] < stor7.length:\n                                                                                          log Loss(\n                                                                                                address player=caller,\n                                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                                uint256 gambleId=stor9[caller])\n                                                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                                          call caller with:\n                                                                                             value 1 wei\n                                                                                               gas 0 wei\n                                                                                          if ext_call.success:\n                                                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      else:\n                                                                          if stor9[caller] < stor7.length:\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              if stor9[caller] < stor7.length:\n                                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                                  if stor9[caller] < stor7.length:\n                                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                                      if stor9[caller] < stor7.length:\n                                                                                          if stor9[caller] < stor7.length:\n                                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                                                              stor33 += storA66C[stor9[caller]]\n                                                                                              log Win(\n                                                                                                    address player=caller,\n                                                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                                    uint256 value_won=storA66C[stor9[caller]],\n                                                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                                    uint256 gambleId=stor9[caller])\n                                                                                              call caller with:\n                                                                                                 value 2 * storA66C[stor9[caller]] wei\n                                                                                                   gas 0 wei\n                                                                                              if ext_call.success:\n                                                                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      revert \n                                                                  require stor9[caller] < stor7.length\n                                                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                                      stor33 += storA66C[stor9[caller]]\n                                                                      log Win(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_won=storA66C[stor9[caller]],\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      call caller with:\n                                                                         value 2 * storA66C[stor9[caller]] wei\n                                                                           gas 0 wei\n                                                                  else:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                          log Loss(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                          call caller with:\n                                                                             value 1 wei\n                                                                               gas 0 wei\n                                                                          require ext_call.success\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      require stor9[caller] < stor7.length\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                          log Loss(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                          call caller with:\n                                                                             value 1 wei\n                                                                               gas 0 wei\n                                                                      else:\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                                          stor33 += storA66C[stor9[caller]]\n                                                                          log Win(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_won=storA66C[stor9[caller]],\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          call caller with:\n                                                                             value 2 * storA66C[stor9[caller]] wei\n                                                                               gas 0 wei\n                                                          else:\n                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                                                  if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                      require ext_call.success\n                                                                      if payroll / 35 * stor5 <= stor1:\n                                                                          stor6 = payroll / 35 * stor5\n                                                                      else:\n                                                                          stor6 = stor1\n                                                                  else:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 13:\n                                                                          require stor9[caller] < stor7.length\n                                                                          if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                              require stor9[caller] < stor7.length\n                                                                          else:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                              else:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                          stor10[caller] = 0\n                                                                                      else:\n                                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                                                              stor10[caller] = 0\n                                                                                          else:\n                                                                                              require stor9[caller] < stor7.length\n                                                                                  else:\n                                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                          require stor9[caller] < stor7.length\n                                                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                                              stor10[caller] = 0\n                                                                                      else:\n                                                                                          stor10[caller] = 0\n                                                                                          require stor9[caller] < stor7.length\n                                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                          require stor9[caller] < stor7.length\n                                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      else:\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 12:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                                      require stor9[caller] < stor7.length\n                                                                                  else:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                      if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                      else:\n                                                                                          require stor9[caller] < stor7.length\n                                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                                  else:\n                                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                          require stor9[caller] < stor7.length\n                                                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                                              stor10[caller] = 0\n                                                                                      else:\n                                                                                          stor10[caller] = 0\n                                                                                          require stor9[caller] < stor7.length\n                                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                          require stor9[caller] < stor7.length\n                                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          else:\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                              require stor9[caller] < stor7.length\n                                                                              log Loss(\n                                                                                    address player=caller,\n                                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                    uint256 gambleId=stor9[caller])\n                                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                              call caller with:\n                                                                                 value 1 wei\n                                                                                   gas 0 wei\n                                                              else:\n                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 4:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                          require stor9[caller] < stor7.length\n                                                                          if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              if 1 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                                  require stor9[caller] < stor7.length\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                      if 2 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                                          stor10[caller] = 0\n                                                                                          require stor9[caller] < stor7.length\n                                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                      else:\n                                                                                          require stor9[caller] < stor7.length\n                                                                                          stor10[caller] = 0\n                                                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                                          else:\n                                                                                  else:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          else:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  if 2 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                                  else:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      else:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                          log Loss(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                          call caller with:\n                                                                             value 1 wei\n                                                                               gas 0 wei\n                                                                          require ext_call.success\n                                                                          if payroll / 35 * stor5 <= stor1:\n                                                                              stor6 = payroll / 35 * stor5\n                                                                          else:\n                                                                              stor6 = stor1\n                                                                  else:\n                                                                      if payroll / 35 * stor5 <= stor1:\n                                                                          stor6 = payroll / 35 * stor5\n                                                                      else:\n                                                                          stor6 = stor1\n                                                                      stor10[caller] = 1\n                                                                      stor9[caller] = stor7.length\n                                                                      totalGambles++\n                                                                      require call.value >= stor2\n                                                                      stor7.length++\n                                                                      if call.value <= stor6:\n                                                                          if not stor7.length > stor7.length + 1:\n                                                                              address(stor7[stor7.length].field_0) = caller\n                                                                              stor7[stor7.length].field_160 % unknown01000000() = 0\n                                                                              Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                                                                              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                              uint256(stor7[stor7.length].field_256) = call.value\n                                                                              uint256(stor7[stor7.length].field_512) = block.number\n                                                                              uint256(stor7[stor7.length].field_768) = 0\n                                                                              uint8(stor7[stor7.length].field_1024) = 37\n                                                                              if call.value < call.value:\n                                                                                  call caller with:\n                                                                                       gas 0 wei\n                                                                      else:\n                                                                          if not stor7.length > stor7.length + 1:\n                                                                              address(stor7[stor7.length].field_0) = caller\n                                                                              stor7[stor7.length].field_160 % unknown01000000() = 0\n                                                                              Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                                                                              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                              uint256(stor7[stor7.length].field_256) = stor6\n                                                                              uint256(stor7[stor7.length].field_512) = block.number\n                                                                              uint256(stor7[stor7.length].field_768) = 0\n                                                                              uint8(stor7[stor7.length].field_1024) = 37\n                                                                              if stor6 < call.value:\n                                                                                  call caller with:\n                                                                                     value call.value - stor6 wei\n                                                                                       gas 0 wei\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          stor10[caller] = 0\n                                          if stor9[caller] < stor7.length:\n                                              uint8(storA66C[stor9[caller]].field_0) = 255\n                                              if stor9[caller] < stor7.length:\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  if stor9[caller] < stor7.length:\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      if stor9[caller] < stor7.length:\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=255,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=0,\n                                                                bytes32 sha3Player=0,\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          if ext_call.success:\n                                                              stor10[caller] = 1\n                                                              stor9[caller] = stor7.length\n                                                              totalGambles++\n                                                              if call.value >= stor2:\n                                                                  stor7.length++\n                                                                  if not stor7.length <= stor7.length + 1:\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  address(stor7[stor7.length].field_0) = caller\n                                                                  stor7[stor7.length].field_160 % unknown01000000() = 0\n                                                                  Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                                                                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                  if call.value <= stor6:\n                                                                      uint256(stor7[stor7.length].field_256) = call.value\n                                                                      uint256(stor7[stor7.length].field_512) = block.number\n                                                                      uint256(stor7[stor7.length].field_768) = 0\n                                                                      uint8(stor7[stor7.length].field_1024) = 37\n                                                                      if call.value >= call.value:\n                                                                          stop\n                                                                      call caller with:\n                                                                           gas 0 wei\n                                                                  else:\n                                                                      uint256(stor7[stor7.length].field_256) = stor6\n                                                                      uint256(stor7[stor7.length].field_512) = block.number\n                                                                      uint256(stor7[stor7.length].field_768) = 0\n                                                                      uint8(stor7[stor7.length].field_1024) = 37\n                                                                      if stor6 >= call.value:\n                                                                          stop\n                                                                      call caller with:\n                                                                         value call.value - stor6 wei\n                                                                           gas 0 wei\n                                                                  if ext_call.success:\n                                                                      stop\n                  else:\n                      if 1 == stor10[caller]:\n                          if stor9[caller] < stor7.length:\n                              if bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1:\n                                  if stor9[caller] < stor7.length:\n                                      if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160):\n                                          if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                                              require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                                              require stor9[caller] < stor7.length\n                                              if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                                                  require stor9[caller] < stor7.length\n                                                  stor10[caller] = 0\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                  require stor9[caller] < stor7.length\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  require stor9[caller] < stor7.length\n                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                  require stor9[caller] < stor7.length\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                      stor33 += 35 * storA66C[stor9[caller]]\n                                                      log Win(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=35 * storA66C[stor9[caller]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      call caller with:\n                                                         value 36 * storA66C[stor9[caller]] wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      if payroll / 35 * stor5 <= stor1:\n                                                          stor6 = payroll / 35 * stor5\n                                                      else:\n                                                          stor6 = stor1\n                                                  else:\n                                                      log Loss(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                      call caller with:\n                                                         value 1 wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      if payroll / 35 * stor5 > stor1:\n                                                          stor6 = stor1\n                                                          stor10[caller] = 1\n                                                          stor9[caller] = stor7.length\n                                                          totalGambles++\n                                                      else:\n                                                          stor6 = payroll / 35 * stor5\n                                                          stor10[caller] = 1\n                                                          stor9[caller] = stor7.length\n                                                          totalGambles++\n                                                          if call.value >= stor2:\n                                              else:\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                                                      require stor9[caller] < stor7.length\n                                                      stor10[caller] = 0\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          require stor9[caller] < stor7.length\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          if payroll / 35 * stor5 <= stor1:\n                                                              stor6 = payroll / 35 * stor5\n                                                          else:\n                                                              stor6 = stor1\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          require stor9[caller] < stor7.length\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          if payroll / 35 * stor5 <= stor1:\n                                                              stor6 = payroll / 35 * stor5\n                                                          else:\n                                                              stor6 = stor1\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      require stor9[caller] < stor7.length\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                      stor33 += storA66C[stor9[caller]]\n                                                      log Win(\n                                                            address player=caller,\n                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                            uint256 value_won=storA66C[stor9[caller]],\n                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                            uint256 gambleId=stor9[caller])\n                                                      call caller with:\n                                                         value 2 * storA66C[stor9[caller]] wei\n                                                           gas 0 wei\n                                                      require ext_call.success\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                                                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                              stor10[caller] = 0\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              require stor9[caller] < stor7.length\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              require ext_call.success\n                                                              if payroll / 35 * stor5 <= stor1:\n                                                                  stor6 = payroll / 35 * stor5\n                                                              else:\n                                                                  stor6 = stor1\n                                                          else:\n                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 19:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                      require ext_call.success\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  require stor9[caller] < stor7.length\n                                                                  stor10[caller] = 0\n                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                      require ext_call.success\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                                  stor33 += storA66C[stor9[caller]]\n                                                                  log Win(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_won=storA66C[stor9[caller]],\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  call caller with:\n                                                                     value 2 * storA66C[stor9[caller]] wei\n                                                                       gas 0 wei\n                                                              else:\n                                                                  require stor9[caller] < stor7.length\n                                                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                                      stor33 += storA66C[stor9[caller]]\n                                                                      log Win(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_won=storA66C[stor9[caller]],\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      call caller with:\n                                                                         value 2 * storA66C[stor9[caller]] wei\n                                                                           gas 0 wei\n                                                                  else:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                          log Loss(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                          call caller with:\n                                                                             value 1 wei\n                                                                               gas 0 wei\n                                                                      else:\n                                                                          require stor9[caller] < stor7.length\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                          if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          else:\n                                                                              log Loss(\n                                                                                    address player=caller,\n                                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                    uint256 gambleId=stor9[caller])\n                                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                              call caller with:\n                                                                                 value 1 wei\n                                                                                   gas 0 wei\n                                                      else:\n                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 13:\n                                                                      require stor9[caller] < stor7.length\n                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          else:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                          require stor9[caller] < stor7.length\n                                                                              else:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                  else:\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      else:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                  else:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                      else:\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              else:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                  else:\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          else:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  stor10[caller] = 0\n                                                                                  if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  else:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              else:\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              else:\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  log Loss(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                  call caller with:\n                                                                     value 1 wei\n                                                                       gas 0 wei\n                                                                  require ext_call.success\n                                                                  if payroll / 35 * stor5 <= stor1:\n                                                                      stor6 = payroll / 35 * stor5\n                                                                  else:\n                                                                      stor6 = stor1\n                                                          else:\n                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 4:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                      require stor9[caller] < stor7.length\n                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          require stor9[caller] < stor7.length\n                                                                          if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              if 2 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  stor10[caller] = 0\n                                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                                  else:\n                                                                          else:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      else:\n                                                                          if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 1:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  if 2 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                                      stor10[caller] = 0\n                                                                                  else:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  stor10[caller] = 0\n                                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                                  else:\n                                                                          else:\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  else:\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                      require ext_call.success\n                                                              else:\n                                                                  if payroll / 35 * stor5 > stor1:\n                                                                      stor6 = stor1\n                                                                      stor10[caller] = 1\n                                                                      stor9[caller] = stor7.length\n                                                                      totalGambles++\n                                                                      require call.value >= stor2\n                                                                      stor7.length++\n                                                                      if call.value <= stor6:\n                                                                          if not stor7.length > stor7.length + 1:\n                                                                              address(stor7[stor7.length].field_0) = caller\n                                                                              stor7[stor7.length].field_160 % unknown01000000() = 0\n                                                                              Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                                                                              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                              uint256(stor7[stor7.length].field_256) = call.value\n                                                                              uint256(stor7[stor7.length].field_512) = block.number\n                                                                              uint256(stor7[stor7.length].field_768) = 0\n                                                                              uint8(stor7[stor7.length].field_1024) = 37\n                                                                      else:\n                                                                          if not stor7.length > stor7.length + 1:\n                                                                              address(stor7[stor7.length].field_0) = caller\n                                                                              stor7[stor7.length].field_160 % unknown01000000() = 0\n                                                                              Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                                                                              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                              uint256(stor7[stor7.length].field_256) = stor6\n                                                                              uint256(stor7[stor7.length].field_512) = block.number\n                                                                              uint256(stor7[stor7.length].field_768) = 0\n                                                                              uint8(stor7[stor7.length].field_1024) = 37\n                                                                  else:\n                                                                      stor6 = payroll / 35 * stor5\n                                                                      stor10[caller] = 1\n                                                                      stor9[caller] = stor7.length\n                                                                      totalGambles++\n                                                                      require call.value >= stor2\n                                                                      stor7.length++\n                                                                      if call.value <= stor6:\n                                                                          if not stor7.length > stor7.length + 1:\n                                                                              address(stor7[stor7.length].field_0) = caller\n                                                                              stor7[stor7.length].field_160 % unknown01000000() = 0\n                                                                              Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                                                                              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                              uint256(stor7[stor7.length].field_256) = call.value\n                                                                              uint256(stor7[stor7.length].field_512) = block.number\n                                                                              uint256(stor7[stor7.length].field_768) = 0\n                                                                              uint8(stor7[stor7.length].field_1024) = 37\n                                                                              if call.value < call.value:\n                                                                                  call caller with:\n                                                                                       gas 0 wei\n                                                                      else:\n                                                                          if not stor7.length > stor7.length + 1:\n                                                                              address(stor7[stor7.length].field_0) = caller\n                                                                              stor7[stor7.length].field_160 % unknown01000000() = 0\n                                                                              Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                                                                              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                              uint256(stor7[stor7.length].field_256) = stor6\n                                                                              uint256(stor7[stor7.length].field_512) = block.number\n                                                                              uint256(stor7[stor7.length].field_768) = 0\n                                                                              uint8(stor7[stor7.length].field_1024) = 37\n                                                                              if stor6 < call.value:\n                                                                                  call caller with:\n                                                                                     value call.value - stor6 wei\n                                                                                       gas 0 wei\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          stor10[caller] = 0\n                                          if stor9[caller] < stor7.length:\n                                              uint8(storA66C[stor9[caller]].field_0) = 255\n                                              if stor9[caller] < stor7.length:\n                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                  if stor9[caller] < stor7.length:\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      if stor9[caller] < stor7.length:\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=255,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=0,\n                                                                bytes32 sha3Player=0,\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          if ext_call.success:\n                                                              stor10[caller] = 1\n                                                              stor9[caller] = stor7.length\n                                                              totalGambles++\n                                                              if call.value >= stor2:\n                                                                  stor7.length++\n                                                                  if not stor7.length <= stor7.length + 1:\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  address(stor7[stor7.length].field_0) = caller\n                                                                  stor7[stor7.length].field_160 % unknown01000000() = 0\n                                                                  Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                                                                  uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                  if call.value <= stor6:\n                                                                      uint256(stor7[stor7.length].field_256) = call.value\n                                                                      uint256(stor7[stor7.length].field_512) = block.number\n                                                                      uint256(stor7[stor7.length].field_768) = 0\n                                                                      uint8(stor7[stor7.length].field_1024) = 37\n                                                                      if call.value >= call.value:\n                                                                          stop\n                                                                      call caller with:\n                                                                           gas 0 wei\n                                                                  else:\n                                                                      uint256(stor7[stor7.length].field_256) = stor6\n                                                                      uint256(stor7[stor7.length].field_512) = block.number\n                                                                      uint256(stor7[stor7.length].field_768) = 0\n                                                                      uint8(stor7[stor7.length].field_1024) = 37\n                                                                      if stor6 >= call.value:\n                                                                          stop\n                                                                      call caller with:\n                                                                         value call.value - stor6 wei\n                                                                           gas 0 wei\n                                                                  if ext_call.success:\n                                                                      stop\n  else:\n      if stor7.length - 1 < stor7.length:\n          if stor56A6[stor7.length] != block.number:\n              stor4 = 0\n          else:\n              stor4++\n          if stor4 < stor3:\n              if numberChosen <= 36:\n                  if not stor10[caller]:\n                      stor10[caller] = 1\n                      stor9[caller] = stor7.length\n                      totalGambles++\n                      if call.value >= stor2:\n                          stor7.length++\n                          if not stor7.length <= stor7.length + 1:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          address(stor7[stor7.length].field_0) = caller\n                          stor7[stor7.length].field_160 % unknown01000000() = 0\n                          Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                          uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                          if call.value <= stor6:\n                              uint256(stor7[stor7.length].field_256) = call.value\n                              uint256(stor7[stor7.length].field_512) = block.number\n                              uint256(stor7[stor7.length].field_768) = 0\n                              uint8(stor7[stor7.length].field_1024) = 37\n                              if call.value >= call.value:\n                                  stop\n                              call caller with:\n                                   gas 0 wei\n                          else:\n                              uint256(stor7[stor7.length].field_256) = stor6\n                              uint256(stor7[stor7.length].field_512) = block.number\n                              uint256(stor7[stor7.length].field_768) = 0\n                              uint8(stor7[stor7.length].field_1024) = 37\n                              if stor6 >= call.value:\n                                  stop\n                              call caller with:\n                                 value call.value - stor6 wei\n                                   gas 0 wei\n                          if ext_call.success:\n                              stop\n                  else:\n                      if caller:\n                          if 1 == stor10[caller]:\n                              if stor9[caller] < stor7.length:\n                                  if bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1:\n                                      if stor9[caller] < stor7.length:\n                                          if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160):\n                                              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                                                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                                                  require stor9[caller] < stor7.length\n                                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                                                      require stor9[caller] < stor7.length\n                                                      stor10[caller] = 0\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      require stor9[caller] < stor7.length\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) == uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                          stor33 += 35 * storA66C[stor9[caller]]\n                                                          log Win(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_won=35 * storA66C[stor9[caller]],\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          call caller with:\n                                                             value 36 * storA66C[stor9[caller]] wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          if payroll / 35 * stor5 <= stor1:\n                                                              stor6 = payroll / 35 * stor5\n                                                          else:\n                                                              stor6 = stor1\n                                                      else:\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          if payroll / 35 * stor5 > stor1:\n                                                              stor6 = stor1\n                                                          else:\n                                                              stor6 = payroll / 35 * stor5\n                                                              stor10[caller] = 1\n                                                              stor9[caller] = stor7.length\n                                                              totalGambles++\n                                                  else:\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                                                          require stor9[caller] < stor7.length\n                                                          stor10[caller] = 0\n                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              require stor9[caller] < stor7.length\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              require ext_call.success\n                                                              if payroll / 35 * stor5 <= stor1:\n                                                                  stor6 = payroll / 35 * stor5\n                                                              else:\n                                                                  stor6 = stor1\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              require stor9[caller] < stor7.length\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              require ext_call.success\n                                                              if payroll / 35 * stor5 <= stor1:\n                                                                  stor6 = payroll / 35 * stor5\n                                                              else:\n                                                                  stor6 = stor1\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          require stor9[caller] < stor7.length\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                          stor33 += storA66C[stor9[caller]]\n                                                          log Win(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_won=storA66C[stor9[caller]],\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          call caller with:\n                                                             value 2 * storA66C[stor9[caller]] wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 5:\n                                                              if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                  stor10[caller] = 0\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                  require stor9[caller] < stor7.length\n                                                                  uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  require stor9[caller] < stor7.length\n                                                                  log Loss(\n                                                                        address player=caller,\n                                                                        uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                        uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                        bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                        bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                        uint256 gambleId=stor9[caller])\n                                                                  stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                  call caller with:\n                                                                     value 1 wei\n                                                                       gas 0 wei\n                                                                  require ext_call.success\n                                                                  if payroll / 35 * stor5 <= stor1:\n                                                                      stor6 = payroll / 35 * stor5\n                                                                  else:\n                                                                      stor6 = stor1\n                                                              else:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                                                      require stor9[caller] < stor7.length\n                                                                      if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                      else:\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 18:\n                                                                              require stor9[caller] < stor7.length\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                              require stor9[caller] < stor7.length\n                                                                          else:\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                              require stor9[caller] < stor7.length\n                                                                              log Loss(\n                                                                                    address player=caller,\n                                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                    uint256 gambleId=stor9[caller])\n                                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                              call caller with:\n                                                                                 value 1 wei\n                                                                                   gas 0 wei\n                                                                  else:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                          log Loss(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                          call caller with:\n                                                                             value 1 wei\n                                                                               gas 0 wei\n                                                                          require ext_call.success\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      require stor9[caller] < stor7.length\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                          log Loss(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                          call caller with:\n                                                                             value 1 wei\n                                                                               gas 0 wei\n                                                                      else:\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                                          stor33 += storA66C[stor9[caller]]\n                                                                          log Win(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_won=storA66C[stor9[caller]],\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          call caller with:\n                                                                             value 2 * storA66C[stor9[caller]] wei\n                                                                               gas 0 wei\n                                                          else:\n                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          else:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                      stor10[caller] = 0\n                                                                                  else:\n                                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                                                          stor10[caller] = 0\n                                                                                      else:\n                                                                                          require stor9[caller] < stor7.length\n                                                                              else:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                                          stor10[caller] = 0\n                                                                                  else:\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      else:\n                                                                          require stor9[caller] < stor7.length\n                                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              else:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 24:\n                                                                                          stor10[caller] = 0\n                                                                                      else:\n                                                                                          require stor9[caller] < stor7.length\n                                                                                  else:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                          else:\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                  else:\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                      require ext_call.success\n                                                              else:\n                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 4:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                          require stor9[caller] < stor7.length\n                                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              require stor9[caller] < stor7.length\n                                                                              if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  if 2 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                                      stor10[caller] = 0\n                                                                                  else:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  stor10[caller] = 0\n                                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 2:\n                                                                                  else:\n                                                                          else:\n                                                                              if 1 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                                  stor10[caller] = 0\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                              else:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                                  else:\n                                                                                      if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 2:\n                                                                                          require stor9[caller] < stor7.length\n                                                                                          if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                      require ext_call.success\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  if payroll / 35 * stor5 > stor1:\n                                                                      stor6 = stor1\n                                                                      stor10[caller] = 1\n                                                                      stor9[caller] = stor7.length\n                                                                      totalGambles++\n                                                                      require call.value >= stor2\n                                                                      stor7.length++\n                                                                  else:\n                                                                      stor6 = payroll / 35 * stor5\n                                                                      stor10[caller] = 1\n                                                                      stor9[caller] = stor7.length\n                                                                      totalGambles++\n                                                                      require call.value >= stor2\n                                                                      stor7.length++\n                                                                      if call.value <= stor6:\n                                                                          if not stor7.length > stor7.length + 1:\n                                                                              address(stor7[stor7.length].field_0) = caller\n                                                                              stor7[stor7.length].field_160 % unknown01000000() = 0\n                                                                              Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                                                                              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                              uint256(stor7[stor7.length].field_256) = call.value\n                                                                              uint256(stor7[stor7.length].field_512) = block.number\n                                                                              uint256(stor7[stor7.length].field_768) = 0\n                                                                              uint8(stor7[stor7.length].field_1024) = 37\n                                                                      else:\n                                                                          if not stor7.length > stor7.length + 1:\n                                                                              address(stor7[stor7.length].field_0) = caller\n                                                                              stor7[stor7.length].field_160 % unknown01000000() = 0\n                                                                              Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                                                                              uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                              uint256(stor7[stor7.length].field_256) = stor6\n                                                                              uint256(stor7[stor7.length].field_512) = block.number\n                                                                              uint256(stor7[stor7.length].field_768) = 0\n                                                                              uint8(stor7[stor7.length].field_1024) = 37\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                              stor10[caller] = 0\n                                              if stor9[caller] < stor7.length:\n                                                  uint8(storA66C[stor9[caller]].field_0) = 255\n                                                  if stor9[caller] < stor7.length:\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                      if stor9[caller] < stor7.length:\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          if stor9[caller] < stor7.length:\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=255,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=0,\n                                                                    bytes32 sha3Player=0,\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              if ext_call.success:\n                                                                  stor10[caller] = 1\n                                                                  stor9[caller] = stor7.length\n                                                                  totalGambles++\n                                                                  if call.value >= stor2:\n                                                                      stor7.length++\n                                                                      if not stor7.length <= stor7.length + 1:\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      address(stor7[stor7.length].field_0) = caller\n                                                                      stor7[stor7.length].field_160 % unknown01000000() = 0\n                                                                      Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                                                                      uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                      if call.value <= stor6:\n                                                                          uint256(stor7[stor7.length].field_256) = call.value\n                                                                          uint256(stor7[stor7.length].field_512) = block.number\n                                                                          uint256(stor7[stor7.length].field_768) = 0\n                                                                          uint8(stor7[stor7.length].field_1024) = 37\n                                                                          if call.value >= call.value:\n                                                                              stop\n                                                                          call caller with:\n                                                                               gas 0 wei\n                                                                      else:\n                                                                          uint256(stor7[stor7.length].field_256) = stor6\n                                                                          uint256(stor7[stor7.length].field_512) = block.number\n                                                                          uint256(stor7[stor7.length].field_768) = 0\n                                                                          uint8(stor7[stor7.length].field_1024) = 37\n                                                                          if stor6 >= call.value:\n                                                                              stop\n                                                                          call caller with:\n                                                                             value call.value - stor6 wei\n                                                                               gas 0 wei\n                                                                      if ext_call.success:\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if 1 == stor10[caller]:\n                              if stor9[caller] < stor7.length:\n                                  if bool(uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160)) != 1:\n                                      if stor9[caller] < stor7.length:\n                                          if block.number > stor56A6[stor9[caller]] + uint8(stor0.field_160):\n                                              if block.number <= stor56A6[stor9[caller]] + uint8(stor0.field_168):\n                                                  require block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))\n                                                  require stor9[caller] < stor7.length\n                                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176):\n                                                      require stor9[caller] < stor7.length\n                                                      stor10[caller] = 0\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                      require stor9[caller] < stor7.length\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                      require stor9[caller] < stor7.length\n                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                      require stor9[caller] < stor7.length\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                          log Loss(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                          call caller with:\n                                                             value 1 wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          if payroll / 35 * stor5 <= stor1:\n                                                              stor6 = payroll / 35 * stor5\n                                                          else:\n                                                              stor6 = stor1\n                                                      else:\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                          stor33 += 35 * storA66C[stor9[caller]]\n                                                          log Win(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_won=35 * storA66C[stor9[caller]],\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          call caller with:\n                                                             value 36 * storA66C[stor9[caller]] wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                  else:\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 2:\n                                                          require stor9[caller] < stor7.length\n                                                          stor10[caller] = 0\n                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 2):\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              require stor9[caller] < stor7.length\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              require ext_call.success\n                                                              if payroll / 35 * stor5 <= stor1:\n                                                                  stor6 = payroll / 35 * stor5\n                                                              else:\n                                                                  stor6 = stor1\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              require stor9[caller] < stor7.length\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              require ext_call.success\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                          require stor9[caller] < stor7.length\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          require stor9[caller] < stor7.length\n                                                          require stor9[caller] < stor7.length\n                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_168) = 1\n                                                          stor33 += storA66C[stor9[caller]]\n                                                          log Win(\n                                                                address player=caller,\n                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                uint256 value_won=storA66C[stor9[caller]],\n                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                uint256 gambleId=stor9[caller])\n                                                          call caller with:\n                                                             value 2 * storA66C[stor9[caller]] wei\n                                                               gas 0 wei\n                                                          require ext_call.success\n                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 1:\n                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 5:\n                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) == 3:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 13:\n                                                                          if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          else:\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 25:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                          require stor9[caller] < stor7.length\n                                                                              else:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                  else:\n                                                                                      stor10[caller] = 0\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      else:\n                                                                          require stor9[caller] < stor7.length\n                                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 12:\n                                                                                  stor10[caller] = 0\n                                                                              else:\n                                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) >= 25:\n                                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) > 24:\n                                                                                          require stor9[caller] < stor7.length\n                                                                                  else:\n                                                                                      require stor9[caller] < stor7.length\n                                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                          else:\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                              else:\n                                                                  if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_176) != 4:\n                                                                      if payroll / 35 * stor5 > stor1:\n                                                                          stor6 = stor1\n                                                                          stor10[caller] = 1\n                                                                          stor9[caller] = stor7.length\n                                                                          totalGambles++\n                                                                          require call.value >= stor2\n                                                                      else:\n                                                                          stor6 = payroll / 35 * stor5\n                                                                          stor10[caller] = 1\n                                                                          stor9[caller] = stor7.length\n                                                                          totalGambles++\n                                                                          require call.value >= stor2\n                                                                          stor7.length++\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                                      require stor9[caller] < stor7.length\n                                                                      if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          require stor9[caller] < stor7.length\n                                                                          if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                          else:\n                                                                              if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 2:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                      else:\n                                                                          if 1 == uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3):\n                                                                              stor10[caller] = 0\n                                                                              require stor9[caller] < stor7.length\n                                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          else:\n                                                                              require stor9[caller] < stor7.length\n                                                                              if uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184) != 1:\n                                                                                  require stor9[caller] < stor7.length\n                                                                                  if 2 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                              else:\n                                                                                  if uint8(uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) % 3) != 2:\n                                                                                      require stor9[caller] < stor7.length\n                                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                              ('iszero', ('mask_shl', 8, 0, 0, ('mod', ('sha3', ('data', 'caller', ('blockhash', ('add', ('stor', ('array', ('mul', 5, ('stor', ('map', ('mask_shl', 160, 0, 0, 'caller'), ('name', 'stor9', 9)))), ('name', 'stor56A6', 39192952402756187425302384862487251540968225014669488259582314013099748177606))), ('type', 8, ('field', 160, ('stor', ('name', 'stor0', 0)))))))), 37)))\n                                                              stor10[caller] = 0\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              require stor9[caller] < stor7.length\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              require ext_call.success\n                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                          if not uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37):\n                                                              stor10[caller] = 0\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                              require stor9[caller] < stor7.length\n                                                              uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                              require stor9[caller] < stor7.length\n                                                              uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              require stor9[caller] < stor7.length\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                    bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              require ext_call.success\n                                                          else:\n                                                              if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) < 19:\n                                                                  require stor9[caller] < stor7.length\n                                                                  if not uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                  else:\n                                                                      if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                          require stor9[caller] < stor7.length\n                                                                      else:\n                                                                          require stor9[caller] < stor7.length\n                                                                          stor10[caller] = 0\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                          require stor9[caller] < stor7.length\n                                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                              else:\n                                                                  if uint8(sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37) <= 18:\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      log Loss(\n                                                                            address player=caller,\n                                                                            uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                            uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                            bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                            bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                            uint256 gambleId=stor9[caller])\n                                                                      stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                      call caller with:\n                                                                         value 1 wei\n                                                                           gas 0 wei\n                                                                  else:\n                                                                      require stor9[caller] < stor7.length\n                                                                      stor10[caller] = 0\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(storA66C[stor9[caller]].field_0) = Mask(248, 0, storA66C[stor9[caller]].field_8)\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                                      require stor9[caller] < stor7.length\n                                                                      uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                                      require stor9[caller] < stor7.length\n                                                                      if 1 == uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_184):\n                                                                      else:\n                                                                          log Loss(\n                                                                                address player=caller,\n                                                                                uint8 result=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))) % 37 << 248,\n                                                                                uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                                bytes32 bHash=block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160)),\n                                                                                bytes32 sha3Player=sha3(caller, block.hash(stor56A6[stor9[caller]] + uint8(stor0.field_160))),\n                                                                                uint256 gambleId=stor9[caller])\n                                                                          stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                                          call caller with:\n                                                                             value 1 wei\n                                                                               gas 0 wei\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                              stor10[caller] = 0\n                                              if stor9[caller] < stor7.length:\n                                                  uint8(storA66C[stor9[caller]].field_0) = 255\n                                                  if stor9[caller] < stor7.length:\n                                                      uint8(stor[code.data[10480 len 32] + (5 * stor9[caller])].field_160) = 1\n                                                      if stor9[caller] < stor7.length:\n                                                          uint256(stor[code.data[10480 len 32] + (5 * stor9[caller]) + 3].field_0) = block.number\n                                                          if stor9[caller] < stor7.length:\n                                                              log Loss(\n                                                                    address player=caller,\n                                                                    uint8 result=255,\n                                                                    uint256 value_loss=storA66C[stor9[caller]] - 1,\n                                                                    bytes32 bHash=0,\n                                                                    bytes32 sha3Player=0,\n                                                                    uint256 gambleId=stor9[caller])\n                                                              stor32 = storA66C[stor9[caller]] + stor32 - 1\n                                                              call caller with:\n                                                                 value 1 wei\n                                                                   gas 0 wei\n                                                              if ext_call.success:\n                                                                  stor10[caller] = 1\n                                                                  stor9[caller] = stor7.length\n                                                                  totalGambles++\n                                                                  if call.value >= stor2:\n                                                                      stor7.length++\n                                                                      if not stor7.length <= stor7.length + 1:\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                      address(stor7[stor7.length].field_0) = caller\n                                                                      stor7[stor7.length].field_160 % unknown01000000() = 0\n                                                                      Mask(72, 0, stor7[stor7.length].field_184) = Mask(72, 0, numberChosen)\n                                                                      uint64(stor7[stor7.length].field_192) = Mask(64, 192, caller) >> 192\n                                                                      if call.value <= stor6:\n                                                                          uint256(stor7[stor7.length].field_256) = call.value\n                                                                          uint256(stor7[stor7.length].field_512) = block.number\n                                                                          uint256(stor7[stor7.length].field_768) = 0\n                                                                          uint8(stor7[stor7.length].field_1024) = 37\n                                                                          if call.value >= call.value:\n                                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                          call caller with:\n                                                                               gas 0 wei\n                                                                      else:\n                                                                          uint256(stor7[stor7.length].field_256) = stor6\n                                                                          uint256(stor7[stor7.length].field_512) = block.number\n                                                                          uint256(stor7[stor7.length].field_768) = 0\n                                                                          uint8(stor7[stor7.length].field_1024) = 37\n                                                                          if stor6 >= call.value:\n                                                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                                          call caller with:\n                                                                             value call.value - stor6 wei\n                                                                               gas 0 wei\n                                                                      if ext_call.success:\n                                                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  revert \n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 252950 tokens. Please reduce the length of the messages."
}