{
	"address": "0xc9010d9ae0f893d176ed1901868cf0b9e6e47763",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the provided decompiled code, the corresponding Solidity contract might look something like this:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    uint256 private _timeOut;\n    uint256 private _kBalance;\n    uint256 private _feeRate;\n    address payable private _technicalRise;\n    address payable private _lastBidder;\n\n    function kBalance() public view returns (uint256) {\n        return _kBalance;\n    }\n\n    function fund() public payable {\n        require(msg.value > 0, \"No funds received\");\n        _kBalance += msg.value - msg.value / _feeRate;\n        bool success = _technicalRise.send(msg.value / _feeRate);\n        require(success, \"Failed to send ether\");\n        if (msg.value - msg.value / _feeRate >= 0x1ff973cafa8000) {\n            if (_timeOut <= block.timestamp) {\n                bool success = _lastBidder.send(_kBalance - (msg.value - msg.value / _feeRate));\n                require(success, \"Failed to send ether\");\n                _kBalance = msg.value - msg.value / _feeRate;\n                _timeOut = block.timestamp;\n            }\n            _timeOut = _timeOut + 0x4af0a763bb1c0000 / (msg.value - msg.value / _feeRate);\n            _lastBidder = msg.sender;\n        } else {\n            _timeOut += 120;\n        }\n    }\n\n    function technicalRise() public view returns (address) {\n        return _technicalRise;\n    }\n\n    function timeOut() public view returns (uint256) {\n        return _timeOut;\n    }\n\n    function lastBidder() public view returns (address) {\n        return _lastBidder;\n    }\n\n    function feeRate() public view returns (uint256) {\n        return _feeRate;\n    }\n}\n```\nPlease note, due to the nature of decompiling, the original functionality may not be fully preserved in this Solidity version. Some parts may be inferred due to lack of visibility into the original source code. Also, the `__function_selector__` function is omitted as it's not a standard Solidity construct.",
				"role": "assistant"
			}
		}
	],
	"created": 1701469723,
	"id": "chatcmpl-8R6HzQ3fiuHTj7GvkSWt4SGkRSwYP",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 02:33 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _timeOut; // STORAGE[0x0]\nuint256 _kBalance; // STORAGE[0x1]\nuint256 _feeRate; // STORAGE[0x2]\nuint8 stor_2_0_0; // STORAGE[0x2] bytes 0 to 0\naddress _technicalRise; // STORAGE[0x3] bytes 0 to 19\naddress _lastBidder; // STORAGE[0x4] bytes 0 to 19\n\n\nfunction kBalance() public nonPayable { \n    return _kBalance;\n}\n\nfunction fund() public payable { \n    assert(stor_2_0_0);\n    _kBalance += msg.value - msg.value / _feeRate;\n    v0 = _technicalRise.call().value(msg.value / _feeRate).gas(2300 * !(msg.value / _feeRate));\n    require(v0);\n    if (msg.value - msg.value / _feeRate >= 0x1ff973cafa8000) {\n        if (_timeOut <= block.timestamp) {\n            v1 = _lastBidder.call().value(_kBalance - (msg.value - msg.value / _feeRate)).gas(2300 * !(_kBalance - (msg.value - msg.value / _feeRate)));\n            require(v1);\n            _kBalance = msg.value - msg.value / _feeRate;\n            _timeOut = block.timestamp;\n        }\n        assert(msg.value - msg.value / _feeRate);\n        _timeOut = _timeOut + 0x4af0a763bb1c0000 / (msg.value - msg.value / _feeRate);\n        _lastBidder = msg.sender;\n    } else {\n        _timeOut += 120;\n    }\n}\n\nfunction TechnicalRise() public nonPayable { \n    return _technicalRise;\n}\n\nfunction timeOut() public nonPayable { \n    return _timeOut;\n}\n\nfunction lastBidder() public nonPayable { \n    return _lastBidder;\n}\n\nfunction feeRate() public nonPayable { \n    return _feeRate;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x1be22528) {\n            TechnicalRise();\n        } else if (0x614d85e1 == function_selector) {\n            timeOut();\n        } else if (0x8547af30 == function_selector) {\n            lastBidder();\n        } else if (0x978bbdb9 == function_selector) {\n            feeRate();\n        } else if (0xb60d4288 != function_selector) {\n            if (0xbfbfa8e4 == function_selector) {\n                kBalance();\n            }\n        }\n    }\n    fund();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 02:33 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _timeOut; // STORAGE[0x0]\nuint256 _kBalance; // STORAGE[0x1]\nuint256 _feeRate; // STORAGE[0x2]\nuint8 stor_2_0_0; // STORAGE[0x2] bytes 0 to 0\naddress _technicalRise; // STORAGE[0x3] bytes 0 to 19\naddress _lastBidder; // STORAGE[0x4] bytes 0 to 19\n\n\nfunction kBalance() public nonPayable { \n    return _kBalance;\n}\n\nfunction fund() public payable { \n    assert(stor_2_0_0);\n    _kBalance += msg.value - msg.value / _feeRate;\n    v0 = _technicalRise.call().value(msg.value / _feeRate).gas(2300 * !(msg.value / _feeRate));\n    require(v0);\n    if (msg.value - msg.value / _feeRate >= 0x1ff973cafa8000) {\n        if (_timeOut <= block.timestamp) {\n            v1 = _lastBidder.call().value(_kBalance - (msg.value - msg.value / _feeRate)).gas(2300 * !(_kBalance - (msg.value - msg.value / _feeRate)));\n            require(v1);\n            _kBalance = msg.value - msg.value / _feeRate;\n            _timeOut = block.timestamp;\n        }\n        assert(msg.value - msg.value / _feeRate);\n        _timeOut = _timeOut + 0x4af0a763bb1c0000 / (msg.value - msg.value / _feeRate);\n        _lastBidder = msg.sender;\n    } else {\n        _timeOut += 120;\n    }\n}\n\nfunction TechnicalRise() public nonPayable { \n    return _technicalRise;\n}\n\nfunction timeOut() public nonPayable { \n    return _timeOut;\n}\n\nfunction lastBidder() public nonPayable { \n    return _lastBidder;\n}\n\nfunction feeRate() public nonPayable { \n    return _feeRate;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x1be22528) {\n            TechnicalRise();\n        } else if (0x614d85e1 == function_selector) {\n            timeOut();\n        } else if (0x8547af30 == function_selector) {\n            lastBidder();\n        } else if (0x978bbdb9 == function_selector) {\n            feeRate();\n        } else if (0xb60d4288 != function_selector) {\n            if (0xbfbfa8e4 == function_selector) {\n                kBalance();\n            }\n        }\n    }\n    fund();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 02:33 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _timeOut; // STORAGE[0x0]\nuint256 _kBalance; // STORAGE[0x1]\nuint256 _feeRate; // STORAGE[0x2]\nuint8 stor_2_0_0; // STORAGE[0x2] bytes 0 to 0\naddress _technicalRise; // STORAGE[0x3] bytes 0 to 19\naddress _lastBidder; // STORAGE[0x4] bytes 0 to 19\n\n\nfunction kBalance() public nonPayable { \n    return _kBalance;\n}\n\nfunction fund() public payable { \n    assert(stor_2_0_0);\n    _kBalance += msg.value - msg.value / _feeRate;\n    v0 = _technicalRise.call().value(msg.value / _feeRate).gas(2300 * !(msg.value / _feeRate));\n    require(v0);\n    if (msg.value - msg.value / _feeRate >= 0x1ff973cafa8000) {\n        if (_timeOut <= block.timestamp) {\n            v1 = _lastBidder.call().value(_kBalance - (msg.value - msg.value / _feeRate)).gas(2300 * !(_kBalance - (msg.value - msg.value / _feeRate)));\n            require(v1);\n            _kBalance = msg.value - msg.value / _feeRate;\n            _timeOut = block.timestamp;\n        }\n        assert(msg.value - msg.value / _feeRate);\n        _timeOut = _timeOut + 0x4af0a763bb1c0000 / (msg.value - msg.value / _feeRate);\n        _lastBidder = msg.sender;\n    } else {\n        _timeOut += 120;\n    }\n}\n\nfunction TechnicalRise() public nonPayable { \n    return _technicalRise;\n}\n\nfunction timeOut() public nonPayable { \n    return _timeOut;\n}\n\nfunction lastBidder() public nonPayable { \n    return _lastBidder;\n}\n\nfunction feeRate() public nonPayable { \n    return _feeRate;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x1be22528) {\n            TechnicalRise();\n        } else if (0x614d85e1 == function_selector) {\n            timeOut();\n        } else if (0x8547af30 == function_selector) {\n            lastBidder();\n        } else if (0x978bbdb9 == function_selector) {\n            feeRate();\n        } else if (0xb60d4288 != function_selector) {\n            if (0xbfbfa8e4 == function_selector) {\n                kBalance();\n            }\n        }\n    }\n    fund();\n}\n.",
	"status": "1",
	"time_cost": 20.5767879486084,
	"usage": {
		"completion_tokens": 466,
		"prompt_tokens": 720,
		"total_tokens": 1186
	}
}