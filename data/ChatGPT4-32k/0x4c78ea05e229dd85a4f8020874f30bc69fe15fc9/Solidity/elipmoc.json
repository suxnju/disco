{
	"address": "0x4c78ea05e229dd85a4f8020874f30bc69fe15fc9",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract based on the decompiled code provided:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping(address => uint256) private _balanceOf;\n    mapping(address => mapping (address => uint256)) private _allowance;\n    mapping(address => uint256) private _freezeOf;\n    uint256 private _totalSupply;\n    string public _name;\n    string public _symbol;\n    uint8 public _decimals;\n    address public _owner;\n    address public __freeze;\n    bool public _paused;\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Freeze(address indexed _from, uint256 _value);\n    event Unpause(address indexed _owner);\n    event Burn(address indexed _from, uint256 _value);\n    event Unfreeze(address indexed _from, uint256 _value);\n    event Pause(address indexed _owner);\n\n    constructor() {\n        _owner = msg.sender;\n        _paused = false;\n    }\n\n    function name() public view returns (string memory) { \n        return _name;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) { \n        require(!_paused, 'contract is paused');\n        require(_value > 0);\n        _allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { \n        require(!_paused, 'contract is paused');\n        require(_to != address(0), 'ERC20: transfer from the zero address');\n        require(_value > 0);\n        require(_balanceOf[_from] >= _value, 'the balance of from address not enough');\n        require(_balanceOf[_to] + _value >= _balanceOf[_to]);\n        require(_value <= _allowance[_from][msg.sender], 'from allowance not enough');\n\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        _allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function freeze(address _from, uint256 _value) public returns (bool success) { \n        require(!_paused, 'contract is paused');\n        require(msg.sender == _owner || msg.sender == __freeze, 'no permission');\n        require(_balanceOf[_from] >= _value, 'address balance not enough');\n        require(_value > 0);\n\n        _balanceOf[_from] -= _value;\n        _freezeOf[_from] += _value;\n        emit Freeze(_from, _value);\n        return true;\n    }\n\n    function decimals() public view returns (uint8) { \n        return _decimals;\n    }\n\n    function withdrawEther(uint256 _value) public { \n        require(msg.sender == _owner, 'no permission');\n        payable(_owner).transfer(_value);\n    }\n\n    function unpause() public { \n        require(msg.sender == _owner || msg.sender == __freeze, 'no permission');\n        _paused = false;\n        emit Unpause(msg.sender);\n    }\n\n    function burn(uint256 _value) public returns (bool success) { \n        require(!_paused, 'contract is paused');\n        require(_balanceOf[msg.sender] >= _value, 'balance not enough');\n        require(_value > 0);\n\n        _balanceOf[msg.sender] -= _value;\n        _totalSupply -= _value;\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function paused() public view returns (bool) { \n        return _paused;\n    }\n\n    function _freeze() public view returns (address) { \n        return __freeze;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) { \n        return _balanceOf[_owner];\n    }\n\n    function unfreeze(address _from, uint256 _value) public returns (bool success) { \n        require(!_paused, 'contract is paused');\n        require(msg.sender == _owner || msg.sender == __freeze, 'no permission');\n        require(_freezeOf[_from] >= _value, 'freeze balance not enough');\n        require(_value > 0);\n\n        _freezeOf[_from] -= _value;\n        _balanceOf[_from] += _value;\n        emit Unfreeze(_from, _value);\n        return true;\n    }\n\n    function pause() public { \n        require(msg.sender == _owner || msg.sender == __freeze, 'no permission');\n        _paused = true;\n        emit Pause(msg.sender);\n    }\n\n    function owner() public view returns (address) { \n        return _owner;\n    }\n\n    function symbol() public view returns (string memory) { \n        return _symbol;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) { \n        require(!_paused, 'contract is paused');\n        require(_to != address(0), 'ERC20: transfer from the zero address');\n        require(_value > 0);\n        require(_balanceOf[msg.sender] >= _value, 'balance not enouth');\n\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function freezeOf(address _owner) public view returns (uint256 balance) { \n        return _freezeOf[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) { \n        return _allowance[_owner][_spender];\n    }\n}\n```\nPlease note that the `__function_selector__` functionality and the event calls without arguments were not included in the resulting Solidity code because they were not present in the original decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701466443,
	"id": "chatcmpl-8R5R5vp7dSB0gJlnfdqoGbzpBvoCK",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.13 02:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _freezeOf; // STORAGE[0x7]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\naddress _owner; // STORAGE[0x2] bytes 1 to 20\naddress __freeze; // STORAGE[0x3] bytes 0 to 19\nuint8 _paused; // STORAGE[0x3] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nFreeze(address, uint256);\nUnpause(address);\nBurn(address, uint256);\nUnfreeze(address, uint256);\nPause(address);\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(!_paused, 'contract is paused');\n    require(varg1 > 0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(!_paused, 'contract is paused');\n    require(varg1 != 0, 'ERC20: transfer from the zero address');\n    require(varg1 == msg.sender);\n    require(varg2 > 0);\n    require(_balanceOf[varg0] >= varg2, 'the balance of from address not enough');\n    require(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    require(varg2 <= _allowance[msg.sender], 'from allowance not enough');\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction freeze(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(!_paused, 'contract is paused');\n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == __freeze;\n    }\n    require(v0, 'no permission');\n    require(_balanceOf[varg0] >= varg1, 'address balance not enough');\n    require(varg1 > 0);\n    assert(varg1 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    assert(_freezeOf[varg0] + varg1 >= _freezeOf[varg0]);\n    _freezeOf[varg0] = _freezeOf[varg0] + varg1;\n    emit Freeze(varg0, varg1);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdrawEther(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction unpause() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == __freeze;\n    }\n    require(v0, 'no permission');\n    _paused = 0;\n    emit Unpause(msg.sender);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!_paused, 'contract is paused');\n    require(_balanceOf[msg.sender] >= varg0, 'balance not enough');\n    require(varg0 > 0);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction paused() public nonPayable { \n    return _paused;\n}\n\nfunction _freeze() public nonPayable { \n    return __freeze;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction unfreeze(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(!_paused, 'contract is paused');\n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == __freeze;\n    }\n    require(v0, 'no permission');\n    require(_freezeOf[varg0] >= varg1, 'freeze balance not enough');\n    require(varg1 > 0);\n    assert(varg1 <= _freezeOf[varg0]);\n    _freezeOf[varg0] = _freezeOf[varg0] - varg1;\n    assert(_freezeOf[varg0] + varg1 >= _freezeOf[varg0]);\n    _balanceOf[varg0] = _freezeOf[varg0] + varg1;\n    emit Unfreeze(varg0, varg1);\n    return 1;\n}\n\nfunction pause() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == __freeze;\n    }\n    require(v0, 'no permission');\n    _paused = 1;\n    emit Pause(msg.sender);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(!_paused, 'contract is paused');\n    require(varg0 != 0, 'ERC20: transfer from the zero address');\n    require(varg1 > 0);\n    require(_balanceOf[msg.sender] > varg1, 'balance not enouth');\n    require(_balanceOf[varg0] + varg1 > _balanceOf[varg0]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction freezeOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _freezeOf[varg0];\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x5c975abb > function_selector >> 224) {\n            if (0x24bce60c > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                } else if (0x23b872dd == function_selector >> 224) {\n                    transferFrom(address,address,uint256);\n                }\n            } else if (0x24bce60c == function_selector >> 224) {\n                freeze(address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x3bed33ce == function_selector >> 224) {\n                withdrawEther(uint256);\n            } else if (0x3f4ba83a == function_selector >> 224) {\n                unpause();\n            } else if (0x42966c68 == function_selector >> 224) {\n                burn(uint256);\n            }\n        } else if (0x8da5cb5b > function_selector >> 224) {\n            if (0x5c975abb == function_selector >> 224) {\n                paused();\n            } else if (0x65ed50e9 == function_selector >> 224) {\n                _freeze();\n            } else if (0x70a08231 == function_selector >> 224) {\n                balanceOf(address);\n            } else if (0x7b46b80b == function_selector >> 224) {\n                unfreeze(address,uint256);\n            } else if (0x8456cb59 == function_selector >> 224) {\n                pause();\n            }\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xcd4217c1 == function_selector >> 224) {\n            freezeOf(address);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 02:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _freezeOf; // STORAGE[0x7]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\naddress _owner; // STORAGE[0x2] bytes 1 to 20\naddress __freeze; // STORAGE[0x3] bytes 0 to 19\nuint8 _paused; // STORAGE[0x3] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nFreeze(address, uint256);\nUnpause(address);\nBurn(address, uint256);\nUnfreeze(address, uint256);\nPause(address);\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(!_paused, 'contract is paused');\n    require(varg1 > 0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(!_paused, 'contract is paused');\n    require(varg1 != 0, 'ERC20: transfer from the zero address');\n    require(varg1 == msg.sender);\n    require(varg2 > 0);\n    require(_balanceOf[varg0] >= varg2, 'the balance of from address not enough');\n    require(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    require(varg2 <= _allowance[msg.sender], 'from allowance not enough');\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction freeze(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(!_paused, 'contract is paused');\n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == __freeze;\n    }\n    require(v0, 'no permission');\n    require(_balanceOf[varg0] >= varg1, 'address balance not enough');\n    require(varg1 > 0);\n    assert(varg1 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    assert(_freezeOf[varg0] + varg1 >= _freezeOf[varg0]);\n    _freezeOf[varg0] = _freezeOf[varg0] + varg1;\n    emit Freeze(varg0, varg1);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdrawEther(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction unpause() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == __freeze;\n    }\n    require(v0, 'no permission');\n    _paused = 0;\n    emit Unpause(msg.sender);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!_paused, 'contract is paused');\n    require(_balanceOf[msg.sender] >= varg0, 'balance not enough');\n    require(varg0 > 0);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction paused() public nonPayable { \n    return _paused;\n}\n\nfunction _freeze() public nonPayable { \n    return __freeze;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction unfreeze(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(!_paused, 'contract is paused');\n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == __freeze;\n    }\n    require(v0, 'no permission');\n    require(_freezeOf[varg0] >= varg1, 'freeze balance not enough');\n    require(varg1 > 0);\n    assert(varg1 <= _freezeOf[varg0]);\n    _freezeOf[varg0] = _freezeOf[varg0] - varg1;\n    assert(_freezeOf[varg0] + varg1 >= _freezeOf[varg0]);\n    _balanceOf[varg0] = _freezeOf[varg0] + varg1;\n    emit Unfreeze(varg0, varg1);\n    return 1;\n}\n\nfunction pause() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == __freeze;\n    }\n    require(v0, 'no permission');\n    _paused = 1;\n    emit Pause(msg.sender);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(!_paused, 'contract is paused');\n    require(varg0 != 0, 'ERC20: transfer from the zero address');\n    require(varg1 > 0);\n    require(_balanceOf[msg.sender] > varg1, 'balance not enouth');\n    require(_balanceOf[varg0] + varg1 > _balanceOf[varg0]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction freezeOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _freezeOf[varg0];\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x5c975abb > function_selector >> 224) {\n            if (0x24bce60c > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                } else if (0x23b872dd == function_selector >> 224) {\n                    transferFrom(address,address,uint256);\n                }\n            } else if (0x24bce60c == function_selector >> 224) {\n                freeze(address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x3bed33ce == function_selector >> 224) {\n                withdrawEther(uint256);\n            } else if (0x3f4ba83a == function_selector >> 224) {\n                unpause();\n            } else if (0x42966c68 == function_selector >> 224) {\n                burn(uint256);\n            }\n        } else if (0x8da5cb5b > function_selector >> 224) {\n            if (0x5c975abb == function_selector >> 224) {\n                paused();\n            } else if (0x65ed50e9 == function_selector >> 224) {\n                _freeze();\n            } else if (0x70a08231 == function_selector >> 224) {\n                balanceOf(address);\n            } else if (0x7b46b80b == function_selector >> 224) {\n                unfreeze(address,uint256);\n            } else if (0x8456cb59 == function_selector >> 224) {\n                pause();\n            }\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xcd4217c1 == function_selector >> 224) {\n            freezeOf(address);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 02:50 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _freezeOf; // STORAGE[0x7]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\naddress _owner; // STORAGE[0x2] bytes 1 to 20\naddress __freeze; // STORAGE[0x3] bytes 0 to 19\nuint8 _paused; // STORAGE[0x3] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nFreeze(address, uint256);\nUnpause(address);\nBurn(address, uint256);\nUnfreeze(address, uint256);\nPause(address);\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(!_paused, 'contract is paused');\n    require(varg1 > 0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(!_paused, 'contract is paused');\n    require(varg1 != 0, 'ERC20: transfer from the zero address');\n    require(varg1 == msg.sender);\n    require(varg2 > 0);\n    require(_balanceOf[varg0] >= varg2, 'the balance of from address not enough');\n    require(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    require(varg2 <= _allowance[msg.sender], 'from allowance not enough');\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction freeze(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(!_paused, 'contract is paused');\n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == __freeze;\n    }\n    require(v0, 'no permission');\n    require(_balanceOf[varg0] >= varg1, 'address balance not enough');\n    require(varg1 > 0);\n    assert(varg1 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    assert(_freezeOf[varg0] + varg1 >= _freezeOf[varg0]);\n    _freezeOf[varg0] = _freezeOf[varg0] + varg1;\n    emit Freeze(varg0, varg1);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdrawEther(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner, 'no permission');\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction unpause() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == __freeze;\n    }\n    require(v0, 'no permission');\n    _paused = 0;\n    emit Unpause(msg.sender);\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!_paused, 'contract is paused');\n    require(_balanceOf[msg.sender] >= varg0, 'balance not enough');\n    require(varg0 > 0);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction paused() public nonPayable { \n    return _paused;\n}\n\nfunction _freeze() public nonPayable { \n    return __freeze;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction unfreeze(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(!_paused, 'contract is paused');\n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == __freeze;\n    }\n    require(v0, 'no permission');\n    require(_freezeOf[varg0] >= varg1, 'freeze balance not enough');\n    require(varg1 > 0);\n    assert(varg1 <= _freezeOf[varg0]);\n    _freezeOf[varg0] = _freezeOf[varg0] - varg1;\n    assert(_freezeOf[varg0] + varg1 >= _freezeOf[varg0]);\n    _balanceOf[varg0] = _freezeOf[varg0] + varg1;\n    emit Unfreeze(varg0, varg1);\n    return 1;\n}\n\nfunction pause() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        v0 = v2 = msg.sender == __freeze;\n    }\n    require(v0, 'no permission');\n    _paused = 1;\n    emit Pause(msg.sender);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(!_paused, 'contract is paused');\n    require(varg0 != 0, 'ERC20: transfer from the zero address');\n    require(varg1 > 0);\n    require(_balanceOf[msg.sender] > varg1, 'balance not enouth');\n    require(_balanceOf[varg0] + varg1 > _balanceOf[varg0]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction freezeOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _freezeOf[varg0];\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x5c975abb > function_selector >> 224) {\n            if (0x24bce60c > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                } else if (0x23b872dd == function_selector >> 224) {\n                    transferFrom(address,address,uint256);\n                }\n            } else if (0x24bce60c == function_selector >> 224) {\n                freeze(address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x3bed33ce == function_selector >> 224) {\n                withdrawEther(uint256);\n            } else if (0x3f4ba83a == function_selector >> 224) {\n                unpause();\n            } else if (0x42966c68 == function_selector >> 224) {\n                burn(uint256);\n            }\n        } else if (0x8da5cb5b > function_selector >> 224) {\n            if (0x5c975abb == function_selector >> 224) {\n                paused();\n            } else if (0x65ed50e9 == function_selector >> 224) {\n                _freeze();\n            } else if (0x70a08231 == function_selector >> 224) {\n                balanceOf(address);\n            } else if (0x7b46b80b == function_selector >> 224) {\n                unfreeze(address,uint256);\n            } else if (0x8456cb59 == function_selector >> 224) {\n                pause();\n            }\n        } else if (0x8da5cb5b == function_selector >> 224) {\n            owner();\n        } else if (0x95d89b41 == function_selector >> 224) {\n            symbol();\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xcd4217c1 == function_selector >> 224) {\n            freezeOf(address);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 74.3366494178772,
	"usage": {
		"completion_tokens": 1283,
		"prompt_tokens": 2953,
		"total_tokens": 4236
	}
}