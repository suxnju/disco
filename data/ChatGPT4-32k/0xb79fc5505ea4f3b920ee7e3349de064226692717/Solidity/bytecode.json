{
	"address": "0xb79fc5505ea4f3b920ee7e3349de064226692717",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract that could have produced the given bytecode:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract SafeMath {\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        require(a == 0 || c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0);\n        uint256 c = a / b;\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c>=a && c>=b);\n        return c;\n    }\n}\n\ncontract ERC20 {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20, SafeMath {\n    mapping(address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\ncontract StandardToken is BasicToken {\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        uint256 _allowance = allowed[_from][msg.sender];\n        balances[_to] = safeAdd(balances[_to], _value);\n        balances[_from] = safeSub(balances[_from], _value);\n        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract CustomToken is StandardToken {\n    string public name = \"Custom Token\";\n    string public symbol = \"CTK\";\n    uint256 public decimals = 18;\n    uint256 public INITIAL_SUPPLY = 1000000 * (10 ** decimals);\n    constructor() public {\n        totalSupply = INITIAL_SUPPLY;\n        balances[msg.sender] = INITIAL_SUPPLY;\n    }\n}\n```\n\nPlease note, it's not possible to perfectly reverse engineer bytecode into Solidity code as some details about the original code are lost during the Solidity compilation process. The provided code is an example of what the original Solidity code could have looked like.\n\nThe bytecode provided looks like it was derived from an ERC20 token contract, which includes standard methods like transfer, balanceOf, transferFrom, and approve. The contract also includes the SafeMath library to prevent overflows and underflows.",
				"role": "assistant"
			}
		}
	],
	"created": 1701458218,
	"id": "chatcmpl-8R3IQNEXBLs8u99Yd4B8faFbU92II",
	"input_format": "Bytecode",
	"ir": "0x6060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e7578063095ea7b31461017157806318160ddd146101a757806323b872dd146101cc578063313ce567146101f457806370a082311461020757806375e2ff65146102265780637a3130e3146102455780638328dbcd146102675780638da5cb5b1461029657806395a0f5eb146102a957806395d89b41146102bc578063a9059cbb146102cf578063ce5494bb146102f1578063dd62ed3e14610310578063f2fde38b14610335575b005b34156100f257600080fd5b6100fa610354565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561013657808201518382015260200161011e565b50505050905090810190601f1680156101635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017c57600080fd5b610193600160a060020a03600435166024356103b4565b604051901515815260200160405180910390f35b34156101b257600080fd5b6101ba61045a565b60405190815260200160405180910390f35b34156101d757600080fd5b610193600160a060020a0360043581169060243516604435610460565b34156101ff57600080fd5b6101ba610573565b341561021257600080fd5b6101ba600160a060020a0360043516610578565b341561023157600080fd5b6100e5600160a060020a0360043516610593565b341561025057600080fd5b6100e5600160a060020a03600435166024356105dd565b341561027257600080fd5b61027a610682565b604051600160a060020a03909116815260200160405180910390f35b34156102a157600080fd5b61027a610691565b34156102b457600080fd5b6101ba6106a0565b34156102c757600080fd5b6100fa6106a6565b34156102da57600080fd5b610193600160a060020a03600435166024356106dd565b34156102fc57600080fd5b6100e5600160a060020a036004351661079c565b341561031b57600080fd5b6101ba600160a060020a036004358116906024351661090c565b341561034057600080fd5b6100e5600160a060020a0360043516610937565b606060405190810160405280602581526020017f426c6f636b636861696e20426f617264204f662044657269766174697665732081526020017f546f6b656e00000000000000000000000000000000000000000000000000000081525081565b60008115806103e65750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156103f157600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600160a060020a0380841660009081526002602090815260408083203385168452825280832054938616835260019091528120549091906104a7908463ffffffff61099616565b600160a060020a0380861660009081526001602052604080822093909355908716815220546104dc908463ffffffff6109ac16565b600160a060020a038616600090815260016020526040902055610505818463ffffffff6109ac16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b601281565b600160a060020a031660009081526001602052604090205490565b60035433600160a060020a039081169116146105ae57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b33600160a060020a0316735ca71ea65acb6293e71e62c41b720698b0aa611c1461060657600080fd5b61063f61061a82606463ffffffff6109be16565b600160a060020a0384166000908152600160205260409020549063ffffffff61099616565b600160a060020a03831660009081526001602052604090205561067b61066c82606463ffffffff6109be16565b6000549063ffffffff61099616565b6000555050565b600554600160a060020a031681565b600354600160a060020a031681565b60065481565b60408051908101604052600381527f4242440000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a033316600090815260016020526040812054610706908363ffffffff6109ac16565b600160a060020a03338116600090815260016020526040808220939093559085168152205461073b908363ffffffff61099616565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60035460009033600160a060020a039081169116146107ba57600080fd5b600554600160a060020a031615156107d157600080fd5b600160a060020a038216600090815260016020526040812054116107f457600080fd5b50600160a060020a038082166000908152600160205260408082205433909316825281208190555461082c908263ffffffff6109ac16565b600055600654610842908263ffffffff61099616565b600655600554600160a060020a0316637a3130e383836040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156108b457600080fd5b5af115156108c157600080fd5b5050600554600160a060020a03908116915083167ff0fee1f70845d356d6a3e0baa0944ce846437b6469ea89416dad2cd7067919a48360405190815260200160405180910390a35050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461095257600080fd5b600160a060020a038116151561096757600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828201838110156109a557fe5b9392505050565b6000828211156109b857fe5b50900390565b60008282028315806109da57508284828115156109d757fe5b04145b15156109a557fe00a165627a7a7230582077cc7b69011eb80e53f0e34759b720ef3b68fff3d3438477b7f1d036c3d86fca0029",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following smart contract bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the bytecode: 0x6060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e7578063095ea7b31461017157806318160ddd146101a757806323b872dd146101cc578063313ce567146101f457806370a082311461020757806375e2ff65146102265780637a3130e3146102455780638328dbcd146102675780638da5cb5b1461029657806395a0f5eb146102a957806395d89b41146102bc578063a9059cbb146102cf578063ce5494bb146102f1578063dd62ed3e14610310578063f2fde38b14610335575b005b34156100f257600080fd5b6100fa610354565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561013657808201518382015260200161011e565b50505050905090810190601f1680156101635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017c57600080fd5b610193600160a060020a03600435166024356103b4565b604051901515815260200160405180910390f35b34156101b257600080fd5b6101ba61045a565b60405190815260200160405180910390f35b34156101d757600080fd5b610193600160a060020a0360043581169060243516604435610460565b34156101ff57600080fd5b6101ba610573565b341561021257600080fd5b6101ba600160a060020a0360043516610578565b341561023157600080fd5b6100e5600160a060020a0360043516610593565b341561025057600080fd5b6100e5600160a060020a03600435166024356105dd565b341561027257600080fd5b61027a610682565b604051600160a060020a03909116815260200160405180910390f35b34156102a157600080fd5b61027a610691565b34156102b457600080fd5b6101ba6106a0565b34156102c757600080fd5b6100fa6106a6565b34156102da57600080fd5b610193600160a060020a03600435166024356106dd565b34156102fc57600080fd5b6100e5600160a060020a036004351661079c565b341561031b57600080fd5b6101ba600160a060020a036004358116906024351661090c565b341561034057600080fd5b6100e5600160a060020a0360043516610937565b606060405190810160405280602581526020017f426c6f636b636861696e20426f617264204f662044657269766174697665732081526020017f546f6b656e00000000000000000000000000000000000000000000000000000081525081565b60008115806103e65750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156103f157600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600160a060020a0380841660009081526002602090815260408083203385168452825280832054938616835260019091528120549091906104a7908463ffffffff61099616565b600160a060020a0380861660009081526001602052604080822093909355908716815220546104dc908463ffffffff6109ac16565b600160a060020a038616600090815260016020526040902055610505818463ffffffff6109ac16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b601281565b600160a060020a031660009081526001602052604090205490565b60035433600160a060020a039081169116146105ae57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b33600160a060020a0316735ca71ea65acb6293e71e62c41b720698b0aa611c1461060657600080fd5b61063f61061a82606463ffffffff6109be16565b600160a060020a0384166000908152600160205260409020549063ffffffff61099616565b600160a060020a03831660009081526001602052604090205561067b61066c82606463ffffffff6109be16565b6000549063ffffffff61099616565b6000555050565b600554600160a060020a031681565b600354600160a060020a031681565b60065481565b60408051908101604052600381527f4242440000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a033316600090815260016020526040812054610706908363ffffffff6109ac16565b600160a060020a03338116600090815260016020526040808220939093559085168152205461073b908363ffffffff61099616565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60035460009033600160a060020a039081169116146107ba57600080fd5b600554600160a060020a031615156107d157600080fd5b600160a060020a038216600090815260016020526040812054116107f457600080fd5b50600160a060020a038082166000908152600160205260408082205433909316825281208190555461082c908263ffffffff6109ac16565b600055600654610842908263ffffffff61099616565b600655600554600160a060020a0316637a3130e383836040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156108b457600080fd5b5af115156108c157600080fd5b5050600554600160a060020a03908116915083167ff0fee1f70845d356d6a3e0baa0944ce846437b6469ea89416dad2cd7067919a48360405190815260200160405180910390a35050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461095257600080fd5b600160a060020a038116151561096757600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828201838110156109a557fe5b9392505050565b6000828211156109b857fe5b50900390565b60008282028315806109da57508284828115156109d757fe5b04145b15156109a557fe00a165627a7a7230582077cc7b69011eb80e53f0e34759b720ef3b68fff3d3438477b7f1d036c3d86fca0029.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following smart contract bytecode.The following is the bytecode: 0x6060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100e7578063095ea7b31461017157806318160ddd146101a757806323b872dd146101cc578063313ce567146101f457806370a082311461020757806375e2ff65146102265780637a3130e3146102455780638328dbcd146102675780638da5cb5b1461029657806395a0f5eb146102a957806395d89b41146102bc578063a9059cbb146102cf578063ce5494bb146102f1578063dd62ed3e14610310578063f2fde38b14610335575b005b34156100f257600080fd5b6100fa610354565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561013657808201518382015260200161011e565b50505050905090810190601f1680156101635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017c57600080fd5b610193600160a060020a03600435166024356103b4565b604051901515815260200160405180910390f35b34156101b257600080fd5b6101ba61045a565b60405190815260200160405180910390f35b34156101d757600080fd5b610193600160a060020a0360043581169060243516604435610460565b34156101ff57600080fd5b6101ba610573565b341561021257600080fd5b6101ba600160a060020a0360043516610578565b341561023157600080fd5b6100e5600160a060020a0360043516610593565b341561025057600080fd5b6100e5600160a060020a03600435166024356105dd565b341561027257600080fd5b61027a610682565b604051600160a060020a03909116815260200160405180910390f35b34156102a157600080fd5b61027a610691565b34156102b457600080fd5b6101ba6106a0565b34156102c757600080fd5b6100fa6106a6565b34156102da57600080fd5b610193600160a060020a03600435166024356106dd565b34156102fc57600080fd5b6100e5600160a060020a036004351661079c565b341561031b57600080fd5b6101ba600160a060020a036004358116906024351661090c565b341561034057600080fd5b6100e5600160a060020a0360043516610937565b606060405190810160405280602581526020017f426c6f636b636861696e20426f617264204f662044657269766174697665732081526020017f546f6b656e00000000000000000000000000000000000000000000000000000081525081565b60008115806103e65750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156103f157600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005481565b600160a060020a0380841660009081526002602090815260408083203385168452825280832054938616835260019091528120549091906104a7908463ffffffff61099616565b600160a060020a0380861660009081526001602052604080822093909355908716815220546104dc908463ffffffff6109ac16565b600160a060020a038616600090815260016020526040902055610505818463ffffffff6109ac16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b601281565b600160a060020a031660009081526001602052604090205490565b60035433600160a060020a039081169116146105ae57600080fd5b6005805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b33600160a060020a0316735ca71ea65acb6293e71e62c41b720698b0aa611c1461060657600080fd5b61063f61061a82606463ffffffff6109be16565b600160a060020a0384166000908152600160205260409020549063ffffffff61099616565b600160a060020a03831660009081526001602052604090205561067b61066c82606463ffffffff6109be16565b6000549063ffffffff61099616565b6000555050565b600554600160a060020a031681565b600354600160a060020a031681565b60065481565b60408051908101604052600381527f4242440000000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a033316600090815260016020526040812054610706908363ffffffff6109ac16565b600160a060020a03338116600090815260016020526040808220939093559085168152205461073b908363ffffffff61099616565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60035460009033600160a060020a039081169116146107ba57600080fd5b600554600160a060020a031615156107d157600080fd5b600160a060020a038216600090815260016020526040812054116107f457600080fd5b50600160a060020a038082166000908152600160205260408082205433909316825281208190555461082c908263ffffffff6109ac16565b600055600654610842908263ffffffff61099616565b600655600554600160a060020a0316637a3130e383836040517c010000000000000000000000000000000000000000000000000000000063ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b15156108b457600080fd5b5af115156108c157600080fd5b5050600554600160a060020a03908116915083167ff0fee1f70845d356d6a3e0baa0944ce846437b6469ea89416dad2cd7067919a48360405190815260200160405180910390a35050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60035433600160a060020a0390811691161461095257600080fd5b600160a060020a038116151561096757600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6000828201838110156109a557fe5b9392505050565b6000828211156109b857fe5b50900390565b60008282028315806109da57508284828115156109d757fe5b04145b15156109a557fe00a165627a7a7230582077cc7b69011eb80e53f0e34759b720ef3b68fff3d3438477b7f1d036c3d86fca0029.",
	"status": "1",
	"time_cost": 36.06086039543152,
	"usage": {
		"completion_tokens": 817,
		"prompt_tokens": 2119,
		"total_tokens": 2936
	}
}