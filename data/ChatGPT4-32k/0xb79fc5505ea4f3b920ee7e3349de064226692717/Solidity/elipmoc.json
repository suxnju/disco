{
	"address": "0xb79fc5505ea4f3b920ee7e3349de064226692717",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code corresponding to the given EVM Bytecode:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _totalMigrated;\n    uint8 private stor_5_0_0;\n    address private _owner;\n    address private _migrationAgent;\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event LogMigrate(address indexed from, address indexed to, uint256 value);\n\n    function approve(address spender, uint256 value) public returns (bool) { \n        require(value == 0 || _allowance[msg.sender][spender] == 0);\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) { \n        require(value <= _allowance[from][msg.sender]);\n        require(value <= _balanceOf[from]);\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        _allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function decimals() public pure returns (uint8) { \n        return 18;\n    }\n\n    function balanceOf(address account) public view returns (uint256) { \n        return _balanceOf[account];\n    }\n\n    function setMigrationAgent(address agent) public { \n        require(msg.sender == _owner);\n        _migrationAgent = agent;\n    }\n\n    function migrateFrom(address from, uint256 value) public { \n        require(msg.sender == _migrationAgent);\n        _balanceOf[from] += value * 100;\n        _totalSupply += value * 100;\n    }\n\n    function migrationAgent() public view returns (address) { \n        return _migrationAgent;\n    }\n\n    function owner() public view returns (address) { \n        return _owner;\n    }\n\n    function totalMigrated() public view returns (uint256) { \n        return _totalMigrated;\n    }\n\n    function symbol() public pure returns (string memory) { \n        return \"BBOD\";\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) { \n        require(value <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function migrate(address to) public { \n        require(msg.sender == _owner);\n        require(stor_5_0_0 == 1);\n        require(_balanceOf[to] > 0);\n        _balanceOf[msg.sender] = 0;\n        _totalSupply -= _balanceOf[to];\n        _totalMigrated += _balanceOf[to];\n        _balanceOf[to] = 0;\n        // Call to _migrationAgent.migrateFrom() is not included, as it would be an external contract call\n        emit LogMigrate(msg.sender, _migrationAgent, _balanceOf[to]);\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) { \n        return _allowance[owner][spender];\n    }\n\n    function transferOwnership(address newOwner) public { \n        require(msg.sender == _owner);\n        require(newOwner != address(0));\n        _owner = newOwner;\n    }\n}\n```\n\nNote: The \"_SafeMul\" function and \"__function_selector__\" function are not included in the recompiled Solidity code as they are not typically used in Solidity. The \"_SafeMul\" operation is generally replaced by the \"*\" operator which automatically throws on overflow. The \"__function_selector__\" function is automatically handled by the Ethereum Virtual Machine and is not needed in Solidity.",
				"role": "assistant"
			}
		}
	],
	"created": 1701462618,
	"id": "chatcmpl-8R4ROX6nVHr6HJzmMKcLpwBU4hokb",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 14:31 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _totalMigrated; // STORAGE[0x6]\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\naddress _owner; // STORAGE[0x3] bytes 0 to 19\naddress _migrationAgent; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nLogMigrate(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = !varg1;\n    if (varg1) {\n        v0 = v2 = !_allowance[varg0];\n    }\n    require(v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    assert(varg2 + _allowance[varg1] >= _allowance[varg1]);\n    _balanceOf[varg1] = varg2 + _allowance[varg1];\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction setMigrationAgent(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _migrationAgent = varg0;\n}\n\nfunction migrateFrom(address varg0, uint256 varg1) public nonPayable { \n    require(0x5ca71ea65acb6293e71e62c41b720698b0aa611c == msg.sender);\n    v0 = _SafeMul(100, varg1);\n    assert(v0 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += v0;\n    v1 = _SafeMul(100, varg1);\n    assert(v1 + _totalSupply >= _totalSupply);\n    _totalSupply += v1;\n}\n\nfunction migrationAgent() public nonPayable { \n    return _migrationAgent;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction totalMigrated() public nonPayable { \n    return _totalMigrated;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4242440000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction migrate(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(stor_5_0_0);\n    require(_balanceOf[varg0] > 0);\n    _balanceOf[msg.sender] = 0;\n    assert(_balanceOf[varg0] <= _totalSupply);\n    _totalSupply = _totalSupply - _balanceOf[varg0];\n    assert(_balanceOf[varg0] + _totalMigrated >= _totalMigrated);\n    _totalMigrated += _balanceOf[varg0];\n    require(_migrationAgent.code.size);\n    v0 = _migrationAgent.migrateFrom(varg0, _balanceOf[varg0]).gas(msg.gas);\n    require(v0);\n    emit LogMigrate(varg0, _migrationAgent, _balanceOf[varg0]);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    _owner = varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = v2 = !varg1;\n    if (varg1) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (5) {\n        MEM[v5 - 5] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'Token';\n    }\n    return v0, v6, 'Blockchain Board Of Derivatives ';\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x75e2ff65 == function_selector) {\n            setMigrationAgent(address);\n        } else if (0x7a3130e3 == function_selector) {\n            migrateFrom(address,uint256);\n        } else if (0x8328dbcd == function_selector) {\n            migrationAgent();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95a0f5eb == function_selector) {\n            totalMigrated();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xce5494bb == function_selector) {\n            migrate(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 14:31 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _totalMigrated; // STORAGE[0x6]\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\naddress _owner; // STORAGE[0x3] bytes 0 to 19\naddress _migrationAgent; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nLogMigrate(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = !varg1;\n    if (varg1) {\n        v0 = v2 = !_allowance[varg0];\n    }\n    require(v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    assert(varg2 + _allowance[varg1] >= _allowance[varg1]);\n    _balanceOf[varg1] = varg2 + _allowance[varg1];\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction setMigrationAgent(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _migrationAgent = varg0;\n}\n\nfunction migrateFrom(address varg0, uint256 varg1) public nonPayable { \n    require(0x5ca71ea65acb6293e71e62c41b720698b0aa611c == msg.sender);\n    v0 = _SafeMul(100, varg1);\n    assert(v0 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += v0;\n    v1 = _SafeMul(100, varg1);\n    assert(v1 + _totalSupply >= _totalSupply);\n    _totalSupply += v1;\n}\n\nfunction migrationAgent() public nonPayable { \n    return _migrationAgent;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction totalMigrated() public nonPayable { \n    return _totalMigrated;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4242440000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction migrate(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(stor_5_0_0);\n    require(_balanceOf[varg0] > 0);\n    _balanceOf[msg.sender] = 0;\n    assert(_balanceOf[varg0] <= _totalSupply);\n    _totalSupply = _totalSupply - _balanceOf[varg0];\n    assert(_balanceOf[varg0] + _totalMigrated >= _totalMigrated);\n    _totalMigrated += _balanceOf[varg0];\n    require(_migrationAgent.code.size);\n    v0 = _migrationAgent.migrateFrom(varg0, _balanceOf[varg0]).gas(msg.gas);\n    require(v0);\n    emit LogMigrate(varg0, _migrationAgent, _balanceOf[varg0]);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    _owner = varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = v2 = !varg1;\n    if (varg1) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (5) {\n        MEM[v5 - 5] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'Token';\n    }\n    return v0, v6, 'Blockchain Board Of Derivatives ';\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x75e2ff65 == function_selector) {\n            setMigrationAgent(address);\n        } else if (0x7a3130e3 == function_selector) {\n            migrateFrom(address,uint256);\n        } else if (0x8328dbcd == function_selector) {\n            migrationAgent();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95a0f5eb == function_selector) {\n            totalMigrated();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xce5494bb == function_selector) {\n            migrate(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 14:31 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _totalMigrated; // STORAGE[0x6]\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\naddress _owner; // STORAGE[0x3] bytes 0 to 19\naddress _migrationAgent; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nLogMigrate(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = !varg1;\n    if (varg1) {\n        v0 = v2 = !_allowance[varg0];\n    }\n    require(v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    assert(varg2 + _allowance[varg1] >= _allowance[varg1]);\n    _balanceOf[varg1] = varg2 + _allowance[varg1];\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction setMigrationAgent(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _migrationAgent = varg0;\n}\n\nfunction migrateFrom(address varg0, uint256 varg1) public nonPayable { \n    require(0x5ca71ea65acb6293e71e62c41b720698b0aa611c == msg.sender);\n    v0 = _SafeMul(100, varg1);\n    assert(v0 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += v0;\n    v1 = _SafeMul(100, varg1);\n    assert(v1 + _totalSupply >= _totalSupply);\n    _totalSupply += v1;\n}\n\nfunction migrationAgent() public nonPayable { \n    return _migrationAgent;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction totalMigrated() public nonPayable { \n    return _totalMigrated;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4242440000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction migrate(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(stor_5_0_0);\n    require(_balanceOf[varg0] > 0);\n    _balanceOf[msg.sender] = 0;\n    assert(_balanceOf[varg0] <= _totalSupply);\n    _totalSupply = _totalSupply - _balanceOf[varg0];\n    assert(_balanceOf[varg0] + _totalMigrated >= _totalMigrated);\n    _totalMigrated += _balanceOf[varg0];\n    require(_migrationAgent.code.size);\n    v0 = _migrationAgent.migrateFrom(varg0, _balanceOf[varg0]).gas(msg.gas);\n    require(v0);\n    emit LogMigrate(varg0, _migrationAgent, _balanceOf[varg0]);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    require(varg0);\n    _owner = varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = v2 = !varg1;\n    if (varg1) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (5) {\n        MEM[v5 - 5] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'Token';\n    }\n    return v0, v6, 'Blockchain Board Of Derivatives ';\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x75e2ff65 == function_selector) {\n            setMigrationAgent(address);\n        } else if (0x7a3130e3 == function_selector) {\n            migrateFrom(address,uint256);\n        } else if (0x8328dbcd == function_selector) {\n            migrationAgent();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95a0f5eb == function_selector) {\n            totalMigrated();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xce5494bb == function_selector) {\n            migrate(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 38.32925295829773,
	"usage": {
		"completion_tokens": 868,
		"prompt_tokens": 1861,
		"total_tokens": 2729
	}
}