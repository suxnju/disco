{
	"address": "0xe31763aad9294f073ddf18b36503ed037ae5e737",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here's the Solidity contract code following the decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(uint8 => bool)) public roles;\n    bool public paused = false;\n    address public newContractAddress;\n    uint256 public totalSupply;\n    \n    function addMinter(address _minter) public {\n        require(roles[msg.sender][0], \"Sender does not have the required role\");\n        roles[_minter][1] = true;\n    }\n\n    function addSysAdmin(address _sysAdmin) public {\n        require(roles[msg.sender][0], \"Sender does not have the required role\");\n        roles[_sysAdmin][0] = true;\n    }\n\n    function addOwner(address _owner) public {\n        require(roles[msg.sender][0], \"Sender does not have the required role\");\n        roles[_owner][2] = true;\n    }\n\n    function stripRoles(address _roleHolder) public {\n        require(roles[msg.sender][0], \"Sender does not have the required role\");\n        roles[_roleHolder][0] = false;\n        roles[_roleHolder][1] = false;\n        roles[_roleHolder][2] = false;\n    }\n\n    function pause() public {\n        require(roles[msg.sender][0], \"Sender does not have the required role\");\n        paused = true;\n    }\n\n    function unpause() public {\n        require(roles[msg.sender][0], \"Sender does not have the required role\");\n        paused = false;\n    }\n\n    function upgradeContract(address _newContractAddress) public {\n        require(roles[msg.sender][0], \"Sender does not have the required role\");\n        newContractAddress = _newContractAddress;\n    }\n\n    function deposit() public payable {\n        require(!paused, \"Contract is paused\");\n        require(msg.value > 0, \"No value sent with transaction\");\n        balances[msg.sender] += msg.value;\n        totalSupply += msg.value;\n    }\n\n    function balanceOf(address _holder) public view returns (uint256) {\n        return balances[_holder];\n    }\n}\n```\n\nThis contract has three roles: minter, sysAdmin, and owner that are assigned to different addresses. Each role has different permissions in the contract. For example, only sysAdmin can add or strip roles, pause the contract, and upgrade the contract. Only the contract owner can deposit ethers to the contract. The contract also maintains a balance mapping to record each address's balance. The contract also has a pause function which can stop all functionalities of the contract when needed.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473540,
	"id": "chatcmpl-8Mv8WCll6Sp1xl5KefuUOrklWMMqM",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x6af04a57 > var0) {\n            if (0x3bdafc43 > var0) {\n                if (var0 == 0x0b4005e3) {\n                    // Dispatch table entry for 0x0b4005e3 (unknown)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x012e;\n                    var var2 = 0x00;\n                    memory[var2:var2 + 0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x05;\n                    var var3 = storage[keccak256(memory[var2:var2 + 0x40])];\n                    var var4 = !!var3;\n                \n                    if (!var3) {\n                        if (!var4) { revert(memory[0x00:0x00]); }\n                    \n                    label_043F:\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40])] = 0x00;\n                        var var5 = storage[0x06];\n                        var4 = 0x0462;\n                        var var6 = var3;\n                    \n                    label_0E4C:\n                        var var7 = 0x00;\n                        var var8 = 0x0e8e;\n                        var var9 = var5;\n                        var var10 = var6;\n                        var temp0 = memory[0x40:0x60];\n                        var var11 = temp0;\n                        memory[0x40:0x60] = var11 + 0x40;\n                        memory[var11:var11 + 0x20] = 0x1e;\n                        memory[var11 + 0x20:var11 + 0x20 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n                        var8 = func_103E(var9, var10, var11);\n                        var4 = var8;\n                        // Error: Could not resolve jump destination!\n                    } else if (address(this).balance >= var3) { goto label_043F; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x0f42c61d) {\n                    // Dispatch table entry for 0x0f42c61d (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x012e;\n                    var1 = func_04CF();\n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = var1;\n                    var temp2 = memory[0x40:0x60];\n                    return memory[temp2:temp2 + temp1 - temp2 + 0x20];\n                } else if (var0 == 0x1d946cc4) {\n                    // Dispatch table entry for 0x1d946cc4 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0182;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    func_0178(var2, var3);\n                    stop();\n                } else if (var0 == 0x356282bf) {\n                    // Dispatch table entry for 0x356282bf (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n                \n                    var temp3 = var2;\n                    var2 = msg.data[temp3:temp3 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    var3 = msg.data[temp3 + 0x20:temp3 + 0x20 + 0x20];\n                    var4 = msg.data[temp3 + 0x40:temp3 + 0x40 + 0x20];\n                    var5 = msg.data[temp3 + 0x60:temp3 + 0x60 + 0x20] & 0xff;\n                    var6 = msg.data[temp3 + 0x80:temp3 + 0x80 + 0x20] & 0xff;\n                    var7 = 0x00;\n                    var8 = var7;\n                    var9 = 0x05ae;\n                    var10 = 0x01;\n                    var11 = msg.sender;\n                    var9 = func_0E95(var10, var11);\n                \n                    if (!var9) { revert(memory[0x00:0x00]); }\n                \n                    if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n                \n                    if (!(var2 & (0x01 << 0xa0) - 0x01)) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x05;\n                \n                    if (var3 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n                \n                    var9 = 0x00;\n                    var10 = var5;\n                \n                    if (var10 > 0x02) { assert(); }\n                \n                    if (var10 <= var9) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x05;\n                    var10 = storage[keccak256(memory[0x00:0x40])];\n                    var9 = 0x0640;\n                    var11 = var3;\n                    goto label_0E4C;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x3bdafc43) {\n                // Dispatch table entry for stripRoles(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                stripRoles(var2, var3);\n                stop();\n            } else if (var0 == 0x3f4ba83a) {\n                // Dispatch table entry for unpause()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                unpause();\n                stop();\n            } else if (var0 == 0x5352a839) {\n                // Dispatch table entry for setCurrentGeneration(uint8)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                setCurrentGeneration(var2, var3);\n                stop();\n            } else if (var0 == 0x5c975abb) {\n                // Dispatch table entry for paused()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0277;\n                var2 = paused();\n            \n            label_0277:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x5fdc4ec6) {\n                // Dispatch table entry for setTeleporterContract(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                setTeleporterContract(var2, var3);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0x983b2d56 > var0) {\n            if (var0 == 0x6af04a57) {\n                // Dispatch table entry for newContractAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d3;\n                var2 = newContractAddress();\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + temp6 - temp7 + 0x20];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                addOwner(var2, var3);\n                stop();\n            } else if (var0 == 0x8456cb59) {\n                // Dispatch table entry for pause()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                pause();\n                stop();\n            } else if (var0 == 0x8b2b303c) {\n                // Dispatch table entry for 0x8b2b303c (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x012e;\n                var2 = 0x00;\n                var3 = 0x0b95;\n                var4 = 0x02;\n                var5 = msg.sender;\n                var3 = func_0E95(var4, var5);\n            \n                if (!var3) { revert(memory[0x00:0x00]); }\n            \n                var3 = 0x00;\n                var4 = 0x0bb5;\n                var5 = address(this).balance;\n                var6 = storage[0x06];\n                goto label_0E4C;\n            } else if (var0 == 0x9618652c) {\n                // Dispatch table entry for 0x9618652c (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x012e;\n                var2 = 0x00;\n                var3 = 0x0c40;\n                var4 = 0x02;\n                var5 = msg.sender;\n                var3 = func_0E95(var4, var5);\n            \n                if (!var3) { revert(memory[0x00:0x00]); }\n            \n                var3 = 0x0c5d;\n                var4 = address(this).balance;\n                var5 = storage[0x06];\n                goto label_0E4C;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x983b2d56) {\n            // Dispatch table entry for addMinter(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0182;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            addMinter(var2, var3);\n            stop();\n        } else if (var0 == 0x9a3b58c9) {\n            // Dispatch table entry for addSysAdmin(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0182;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            addSysAdmin(var2, var3);\n            stop();\n        } else if (var0 == 0xc28de2cd) {\n            // Dispatch table entry for upgraded()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0277;\n            var2 = upgraded();\n            goto label_0277;\n        } else if (var0 == 0xd0e30db0) {\n            // Dispatch table entry for deposit()\n            var1 = 0x0182;\n            deposit();\n            stop();\n        } else if (var0 == 0xeb2c0223) {\n            // Dispatch table entry for upgradeContract(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0182;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            upgradeContract(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0178(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xff;\n        func_04E2(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function stripRoles(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x07ce;\n        var var0 = 0x02;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01 == msg.sender) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x00;\n        var0 = 0x07ff;\n        var1 = arg1;\n        var var2 = arg0;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) {\n        label_0819:\n            var0 = 0x082a;\n            var1 = 0x01;\n            var2 = arg0;\n            var0 = func_0E95(var1, var2);\n        \n            if (!var0) {\n            label_0844:\n                var0 = 0x0855;\n                var1 = 0x02;\n                var2 = arg0;\n                var0 = func_0E95(var1, var2);\n            \n                if (!var0) {\n                label_086F:\n                \n                    if (!!arg1 == 0x01) { return; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var0 = 0x086b;\n                    var1 = 0x02;\n                    var2 = arg0;\n                    func_0EFC(var1, var2);\n                    arg1 = 0x01;\n                    goto label_086F;\n                }\n            } else {\n                var0 = 0x0840;\n                var1 = 0x01;\n                var2 = arg0;\n                func_0EFC(var1, var2);\n                arg1 = 0x01;\n                goto label_0844;\n            }\n        } else {\n            var0 = 0x0815;\n            var1 = 0x00;\n            var2 = arg0;\n            func_0EFC(var1, var2);\n            arg1 = 0x01;\n            goto label_0819;\n        }\n    }\n    \n    function setCurrentGeneration(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xff;\n        arg1 = 0x0906;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        arg1 = arg0;\n        var0 = 0x04;\n        var1 = storage[var0] & ~(0xff << 0xa0);\n        var var2 = 0x01 << 0xa0;\n        var var3 = arg1;\n    \n        if (var3 > var0) { assert(); }\n    \n        storage[var0] = var3 * var2 | var1;\n        arg1 = 0xf6f89c5740b3ef3333a4c100b6af26b85330a53841d797e6b6fb3d7e014fa639;\n        var0 = storage[0x04] / 0x0100 ** 0x14 & 0xff;\n        var1 = memory[0x40:0x60];\n        var2 = var1;\n        var3 = var0;\n    \n        if (var3 > 0x04) { assert(); }\n    \n        var temp0 = var2;\n        memory[temp0:temp0 + 0x20] = var3 & 0xff;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [stack[-5]]);\n        arg1 = 0x09b4;\n        var0 = 0x01;\n        func_04E2(var0);\n    }\n    \n    function setTeleporterContract(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x09d1;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        arg1 = arg0;\n        var0 = arg1 & (0x01 << 0xa0) - 0x01;\n        var1 = 0x950699fe;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) << 0xe0;\n        var var2 = temp0 + 0x04;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = var0;\n        var var8 = !address(var7).code.length;\n    \n        if (var8) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var4:var4 + var3] = address(var7).staticcall.gas(msg.gas)(memory[var6:var6 + var5]);\n        var3 = !temp1;\n    \n        if (!var3) {\n            var0 = memory[0x40:0x60];\n            var1 = returndata.length;\n        \n            if (var1 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[var0:var0 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var temp2 = arg0 & (0x01 << 0xa0) - 0x01;\n            storage[0x04] = temp2 | (storage[0x04] & ~((0x01 << 0xa0) - 0x01));\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = temp2;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0x703bc78725b2f16bafbf6232f3d5d610f25096a4a6b759fdbb5a46252d12108f]);\n            return;\n        } else {\n            var temp5 = returndata.length;\n            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function addOwner(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x0aec;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x0b06;\n        var0 = 0x02;\n        var1 = arg0;\n        func_0F63(var0, var1);\n        arg1 = 0x0b17;\n        var0 = 0x02;\n        var1 = arg0;\n        arg1 = func_0E95(var0, var1);\n    \n        if (arg1) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function addMinter(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x0c73;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x0c8d;\n        var0 = 0x01;\n        var1 = arg0;\n        func_0F63(var0, var1);\n        arg1 = 0x0b17;\n        var0 = 0x01;\n        var1 = arg0;\n        arg1 = func_0E95(var0, var1);\n    \n        if (arg1) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function addSysAdmin(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x0caf;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x0cc9;\n        var0 = 0x00;\n        var1 = arg0;\n        func_0F63(var0, var1);\n        arg1 = 0x0b17;\n        var0 = 0x00;\n        var1 = arg0;\n        arg1 = func_0E95(var0, var1);\n    \n        if (arg1) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function upgradeContract(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x0da3;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & (0x01 << 0xa0) - 0x01;\n        storage[0x03] = temp0 * 0x010000 | (((storage[0x03] & ~0xff00) | 0x0100) & ~((0x01 << 0xb0) - 0x010000));\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0x450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa446199305]);\n    }\n    \n    function func_04CF() returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_04E2(var arg0) {\n        var var0 = 0x04f3;\n        var var1 = 0x00;\n        var var2 = msg.sender;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = arg0;\n        var1 = 0x04;\n        var2 = storage[var1] & ~(0xff << 0xa8);\n        var var3 = 0x01 << 0xa8;\n        var var4 = var0;\n    \n        if (var4 > 0x05) { assert(); }\n    \n        storage[var1] = var4 * var3 | var2;\n        var0 = 0x9e37d6841345f8e4b31d3f2191820df11948b07a3f62df09880a47dc37336531;\n        var2 = memory[0x40:0x60];\n        var1 = storage[0x04] / (0x01 << 0xa8) & 0xff;\n        var3 = var2;\n        var4 = var1;\n    \n        if (var4 > 0x05) { assert(); }\n    \n        var temp0 = var3;\n        memory[temp0:temp0 + 0x20] = var4 & 0xff;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [stack[-5]]);\n    }\n    \n    function unpause() {\n        var var0 = 0x0893;\n        var var1 = 0x00;\n        var var2 = msg.sender;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = storage[0x03] & ~0xff;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x0e5e3b3fb504c22cf5c42fa07d521225937514c654007e1f12646f89768d6f94]);\n    }\n    \n    function paused() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function newContractAddress() returns (var r0) { return storage[0x03] / 0x010000 & (0x01 << 0xa0) - 0x01; }\n    \n    function pause() {\n        var var0 = 0x0b31;\n        var var1 = 0x00;\n        var var2 = msg.sender;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~0xff) | 0x01;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xab35696f06e428ebc5ceba8cd17f8fed287baf43440206d1943af1ee53e6d267]);\n    }\n    \n    function upgraded() returns (var r0) { return storage[0x03] / 0x0100 & 0xff; }\n    \n    function deposit() {\n        if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var var0 = 0x0d25;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0FE4(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x0d48;\n        var1 = storage[0x06];\n        var2 = msg.value;\n        var0 = func_0FE4(var1, var2);\n        storage[0x06] = var0;\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x05;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xe5c9ed746c9a90be28ec0ba6f0fc363540492f749c0c97464501aa92c4d112d6, msg.sender]);\n    }\n    \n    function func_0E95(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 & (0x01 << 0xa0) - 0x01) {\n            memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = arg0;\n            return storage[keccak256(memory[0x00:0x40])] & 0xff;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x22;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x22] = code[0x10f7:0x1119];\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n        }\n    }\n    \n    function func_0EFC(var arg0, var arg1) {\n        var var0 = 0x0f06;\n        var var1 = arg0;\n        var var2 = arg1;\n        var0 = func_0E95(var1, var2);\n    \n        if (var0) {\n            memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = arg0;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = storage[temp0] & ~0xff;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n            var temp2 = temp1 + 0x04;\n            var temp3 = temp2 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp3 - temp2;\n            memory[temp3:temp3 + 0x20] = 0x21;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x21] = code[0x10d6:0x10f7];\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + (temp4 + 0x40) - temp5]);\n        }\n    }\n    \n    function func_0F63(var arg0, var arg1) {\n        var var0 = 0x0f6d;\n        var var1 = arg0;\n        var var2 = arg1;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) {\n            memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = arg0;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1f;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function func_0FE4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_103E(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var var2 = temp1;\n        var var3 = var2;\n        var temp2 = var3 + 0x20;\n        memory[var3:var3 + 0x20] = temp2 - var3;\n        var temp3 = var1;\n        memory[temp2:temp2 + 0x20] = memory[temp3:temp3 + 0x20];\n        var var4 = temp2 + 0x20;\n        var var6 = memory[temp3:temp3 + 0x20];\n        var var5 = temp3 + 0x20;\n        var var7 = var6;\n        var var8 = var4;\n        var var9 = var5;\n        var var10 = 0x00;\n    \n        if (var10 >= var7) {\n        label_1092:\n            var temp4 = var6;\n            var4 = temp4 + var4;\n            var5 = temp4 & 0x1f;\n        \n            if (!var5) {\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + var4 - temp5]);\n            } else {\n                var temp6 = var5;\n                var temp7 = var4 - temp6;\n                memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                var temp8 = memory[0x40:0x60];\n                revert(memory[temp8:temp8 + (temp7 + 0x20) - temp8]);\n            }\n        } else {\n        label_1083:\n            var temp9 = var10;\n            memory[temp9 + var8:temp9 + var8 + 0x20] = memory[temp9 + var9:temp9 + var9 + 0x20];\n            var10 = temp9 + 0x20;\n        \n            if (var10 >= var7) { goto label_1092; }\n            else { goto label_1083; }\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x6af04a57 > var0) {\n            if (0x3bdafc43 > var0) {\n                if (var0 == 0x0b4005e3) {\n                    // Dispatch table entry for 0x0b4005e3 (unknown)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x012e;\n                    var var2 = 0x00;\n                    memory[var2:var2 + 0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x05;\n                    var var3 = storage[keccak256(memory[var2:var2 + 0x40])];\n                    var var4 = !!var3;\n                \n                    if (!var3) {\n                        if (!var4) { revert(memory[0x00:0x00]); }\n                    \n                    label_043F:\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40])] = 0x00;\n                        var var5 = storage[0x06];\n                        var4 = 0x0462;\n                        var var6 = var3;\n                    \n                    label_0E4C:\n                        var var7 = 0x00;\n                        var var8 = 0x0e8e;\n                        var var9 = var5;\n                        var var10 = var6;\n                        var temp0 = memory[0x40:0x60];\n                        var var11 = temp0;\n                        memory[0x40:0x60] = var11 + 0x40;\n                        memory[var11:var11 + 0x20] = 0x1e;\n                        memory[var11 + 0x20:var11 + 0x20 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n                        var8 = func_103E(var9, var10, var11);\n                        var4 = var8;\n                        // Error: Could not resolve jump destination!\n                    } else if (address(this).balance >= var3) { goto label_043F; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x0f42c61d) {\n                    // Dispatch table entry for 0x0f42c61d (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x012e;\n                    var1 = func_04CF();\n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = var1;\n                    var temp2 = memory[0x40:0x60];\n                    return memory[temp2:temp2 + temp1 - temp2 + 0x20];\n                } else if (var0 == 0x1d946cc4) {\n                    // Dispatch table entry for 0x1d946cc4 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0182;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    func_0178(var2, var3);\n                    stop();\n                } else if (var0 == 0x356282bf) {\n                    // Dispatch table entry for 0x356282bf (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n                \n                    var temp3 = var2;\n                    var2 = msg.data[temp3:temp3 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    var3 = msg.data[temp3 + 0x20:temp3 + 0x20 + 0x20];\n                    var4 = msg.data[temp3 + 0x40:temp3 + 0x40 + 0x20];\n                    var5 = msg.data[temp3 + 0x60:temp3 + 0x60 + 0x20] & 0xff;\n                    var6 = msg.data[temp3 + 0x80:temp3 + 0x80 + 0x20] & 0xff;\n                    var7 = 0x00;\n                    var8 = var7;\n                    var9 = 0x05ae;\n                    var10 = 0x01;\n                    var11 = msg.sender;\n                    var9 = func_0E95(var10, var11);\n                \n                    if (!var9) { revert(memory[0x00:0x00]); }\n                \n                    if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n                \n                    if (!(var2 & (0x01 << 0xa0) - 0x01)) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x05;\n                \n                    if (var3 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n                \n                    var9 = 0x00;\n                    var10 = var5;\n                \n                    if (var10 > 0x02) { assert(); }\n                \n                    if (var10 <= var9) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x05;\n                    var10 = storage[keccak256(memory[0x00:0x40])];\n                    var9 = 0x0640;\n                    var11 = var3;\n                    goto label_0E4C;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x3bdafc43) {\n                // Dispatch table entry for stripRoles(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                stripRoles(var2, var3);\n                stop();\n            } else if (var0 == 0x3f4ba83a) {\n                // Dispatch table entry for unpause()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                unpause();\n                stop();\n            } else if (var0 == 0x5352a839) {\n                // Dispatch table entry for setCurrentGeneration(uint8)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                setCurrentGeneration(var2, var3);\n                stop();\n            } else if (var0 == 0x5c975abb) {\n                // Dispatch table entry for paused()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0277;\n                var2 = paused();\n            \n            label_0277:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x5fdc4ec6) {\n                // Dispatch table entry for setTeleporterContract(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                setTeleporterContract(var2, var3);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0x983b2d56 > var0) {\n            if (var0 == 0x6af04a57) {\n                // Dispatch table entry for newContractAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d3;\n                var2 = newContractAddress();\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + temp6 - temp7 + 0x20];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                addOwner(var2, var3);\n                stop();\n            } else if (var0 == 0x8456cb59) {\n                // Dispatch table entry for pause()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                pause();\n                stop();\n            } else if (var0 == 0x8b2b303c) {\n                // Dispatch table entry for 0x8b2b303c (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x012e;\n                var2 = 0x00;\n                var3 = 0x0b95;\n                var4 = 0x02;\n                var5 = msg.sender;\n                var3 = func_0E95(var4, var5);\n            \n                if (!var3) { revert(memory[0x00:0x00]); }\n            \n                var3 = 0x00;\n                var4 = 0x0bb5;\n                var5 = address(this).balance;\n                var6 = storage[0x06];\n                goto label_0E4C;\n            } else if (var0 == 0x9618652c) {\n                // Dispatch table entry for 0x9618652c (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x012e;\n                var2 = 0x00;\n                var3 = 0x0c40;\n                var4 = 0x02;\n                var5 = msg.sender;\n                var3 = func_0E95(var4, var5);\n            \n                if (!var3) { revert(memory[0x00:0x00]); }\n            \n                var3 = 0x0c5d;\n                var4 = address(this).balance;\n                var5 = storage[0x06];\n                goto label_0E4C;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x983b2d56) {\n            // Dispatch table entry for addMinter(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0182;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            addMinter(var2, var3);\n            stop();\n        } else if (var0 == 0x9a3b58c9) {\n            // Dispatch table entry for addSysAdmin(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0182;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            addSysAdmin(var2, var3);\n            stop();\n        } else if (var0 == 0xc28de2cd) {\n            // Dispatch table entry for upgraded()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0277;\n            var2 = upgraded();\n            goto label_0277;\n        } else if (var0 == 0xd0e30db0) {\n            // Dispatch table entry for deposit()\n            var1 = 0x0182;\n            deposit();\n            stop();\n        } else if (var0 == 0xeb2c0223) {\n            // Dispatch table entry for upgradeContract(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0182;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            upgradeContract(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0178(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xff;\n        func_04E2(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function stripRoles(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x07ce;\n        var var0 = 0x02;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01 == msg.sender) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x00;\n        var0 = 0x07ff;\n        var1 = arg1;\n        var var2 = arg0;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) {\n        label_0819:\n            var0 = 0x082a;\n            var1 = 0x01;\n            var2 = arg0;\n            var0 = func_0E95(var1, var2);\n        \n            if (!var0) {\n            label_0844:\n                var0 = 0x0855;\n                var1 = 0x02;\n                var2 = arg0;\n                var0 = func_0E95(var1, var2);\n            \n                if (!var0) {\n                label_086F:\n                \n                    if (!!arg1 == 0x01) { return; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var0 = 0x086b;\n                    var1 = 0x02;\n                    var2 = arg0;\n                    func_0EFC(var1, var2);\n                    arg1 = 0x01;\n                    goto label_086F;\n                }\n            } else {\n                var0 = 0x0840;\n                var1 = 0x01;\n                var2 = arg0;\n                func_0EFC(var1, var2);\n                arg1 = 0x01;\n                goto label_0844;\n            }\n        } else {\n            var0 = 0x0815;\n            var1 = 0x00;\n            var2 = arg0;\n            func_0EFC(var1, var2);\n            arg1 = 0x01;\n            goto label_0819;\n        }\n    }\n    \n    function setCurrentGeneration(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xff;\n        arg1 = 0x0906;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        arg1 = arg0;\n        var0 = 0x04;\n        var1 = storage[var0] & ~(0xff << 0xa0);\n        var var2 = 0x01 << 0xa0;\n        var var3 = arg1;\n    \n        if (var3 > var0) { assert(); }\n    \n        storage[var0] = var3 * var2 | var1;\n        arg1 = 0xf6f89c5740b3ef3333a4c100b6af26b85330a53841d797e6b6fb3d7e014fa639;\n        var0 = storage[0x04] / 0x0100 ** 0x14 & 0xff;\n        var1 = memory[0x40:0x60];\n        var2 = var1;\n        var3 = var0;\n    \n        if (var3 > 0x04) { assert(); }\n    \n        var temp0 = var2;\n        memory[temp0:temp0 + 0x20] = var3 & 0xff;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [stack[-5]]);\n        arg1 = 0x09b4;\n        var0 = 0x01;\n        func_04E2(var0);\n    }\n    \n    function setTeleporterContract(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x09d1;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        arg1 = arg0;\n        var0 = arg1 & (0x01 << 0xa0) - 0x01;\n        var1 = 0x950699fe;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) << 0xe0;\n        var var2 = temp0 + 0x04;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = var0;\n        var var8 = !address(var7).code.length;\n    \n        if (var8) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var4:var4 + var3] = address(var7).staticcall.gas(msg.gas)(memory[var6:var6 + var5]);\n        var3 = !temp1;\n    \n        if (!var3) {\n            var0 = memory[0x40:0x60];\n            var1 = returndata.length;\n        \n            if (var1 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[var0:var0 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var temp2 = arg0 & (0x01 << 0xa0) - 0x01;\n            storage[0x04] = temp2 | (storage[0x04] & ~((0x01 << 0xa0) - 0x01));\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = temp2;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0x703bc78725b2f16bafbf6232f3d5d610f25096a4a6b759fdbb5a46252d12108f]);\n            return;\n        } else {\n            var temp5 = returndata.length;\n            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function addOwner(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x0aec;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x0b06;\n        var0 = 0x02;\n        var1 = arg0;\n        func_0F63(var0, var1);\n        arg1 = 0x0b17;\n        var0 = 0x02;\n        var1 = arg0;\n        arg1 = func_0E95(var0, var1);\n    \n        if (arg1) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function addMinter(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x0c73;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x0c8d;\n        var0 = 0x01;\n        var1 = arg0;\n        func_0F63(var0, var1);\n        arg1 = 0x0b17;\n        var0 = 0x01;\n        var1 = arg0;\n        arg1 = func_0E95(var0, var1);\n    \n        if (arg1) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function addSysAdmin(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x0caf;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x0cc9;\n        var0 = 0x00;\n        var1 = arg0;\n        func_0F63(var0, var1);\n        arg1 = 0x0b17;\n        var0 = 0x00;\n        var1 = arg0;\n        arg1 = func_0E95(var0, var1);\n    \n        if (arg1) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function upgradeContract(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x0da3;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & (0x01 << 0xa0) - 0x01;\n        storage[0x03] = temp0 * 0x010000 | (((storage[0x03] & ~0xff00) | 0x0100) & ~((0x01 << 0xb0) - 0x010000));\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0x450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa446199305]);\n    }\n    \n    function func_04CF() returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_04E2(var arg0) {\n        var var0 = 0x04f3;\n        var var1 = 0x00;\n        var var2 = msg.sender;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = arg0;\n        var1 = 0x04;\n        var2 = storage[var1] & ~(0xff << 0xa8);\n        var var3 = 0x01 << 0xa8;\n        var var4 = var0;\n    \n        if (var4 > 0x05) { assert(); }\n    \n        storage[var1] = var4 * var3 | var2;\n        var0 = 0x9e37d6841345f8e4b31d3f2191820df11948b07a3f62df09880a47dc37336531;\n        var2 = memory[0x40:0x60];\n        var1 = storage[0x04] / (0x01 << 0xa8) & 0xff;\n        var3 = var2;\n        var4 = var1;\n    \n        if (var4 > 0x05) { assert(); }\n    \n        var temp0 = var3;\n        memory[temp0:temp0 + 0x20] = var4 & 0xff;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [stack[-5]]);\n    }\n    \n    function unpause() {\n        var var0 = 0x0893;\n        var var1 = 0x00;\n        var var2 = msg.sender;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = storage[0x03] & ~0xff;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x0e5e3b3fb504c22cf5c42fa07d521225937514c654007e1f12646f89768d6f94]);\n    }\n    \n    function paused() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function newContractAddress() returns (var r0) { return storage[0x03] / 0x010000 & (0x01 << 0xa0) - 0x01; }\n    \n    function pause() {\n        var var0 = 0x0b31;\n        var var1 = 0x00;\n        var var2 = msg.sender;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~0xff) | 0x01;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xab35696f06e428ebc5ceba8cd17f8fed287baf43440206d1943af1ee53e6d267]);\n    }\n    \n    function upgraded() returns (var r0) { return storage[0x03] / 0x0100 & 0xff; }\n    \n    function deposit() {\n        if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var var0 = 0x0d25;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0FE4(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x0d48;\n        var1 = storage[0x06];\n        var2 = msg.value;\n        var0 = func_0FE4(var1, var2);\n        storage[0x06] = var0;\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x05;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xe5c9ed746c9a90be28ec0ba6f0fc363540492f749c0c97464501aa92c4d112d6, msg.sender]);\n    }\n    \n    function func_0E95(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 & (0x01 << 0xa0) - 0x01) {\n            memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = arg0;\n            return storage[keccak256(memory[0x00:0x40])] & 0xff;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x22;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x22] = code[0x10f7:0x1119];\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n        }\n    }\n    \n    function func_0EFC(var arg0, var arg1) {\n        var var0 = 0x0f06;\n        var var1 = arg0;\n        var var2 = arg1;\n        var0 = func_0E95(var1, var2);\n    \n        if (var0) {\n            memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = arg0;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = storage[temp0] & ~0xff;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n            var temp2 = temp1 + 0x04;\n            var temp3 = temp2 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp3 - temp2;\n            memory[temp3:temp3 + 0x20] = 0x21;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x21] = code[0x10d6:0x10f7];\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + (temp4 + 0x40) - temp5]);\n        }\n    }\n    \n    function func_0F63(var arg0, var arg1) {\n        var var0 = 0x0f6d;\n        var var1 = arg0;\n        var var2 = arg1;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) {\n            memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = arg0;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1f;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function func_0FE4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_103E(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var var2 = temp1;\n        var var3 = var2;\n        var temp2 = var3 + 0x20;\n        memory[var3:var3 + 0x20] = temp2 - var3;\n        var temp3 = var1;\n        memory[temp2:temp2 + 0x20] = memory[temp3:temp3 + 0x20];\n        var var4 = temp2 + 0x20;\n        var var6 = memory[temp3:temp3 + 0x20];\n        var var5 = temp3 + 0x20;\n        var var7 = var6;\n        var var8 = var4;\n        var var9 = var5;\n        var var10 = 0x00;\n    \n        if (var10 >= var7) {\n        label_1092:\n            var temp4 = var6;\n            var4 = temp4 + var4;\n            var5 = temp4 & 0x1f;\n        \n            if (!var5) {\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + var4 - temp5]);\n            } else {\n                var temp6 = var5;\n                var temp7 = var4 - temp6;\n                memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                var temp8 = memory[0x40:0x60];\n                revert(memory[temp8:temp8 + (temp7 + 0x20) - temp8]);\n            }\n        } else {\n        label_1083:\n            var temp9 = var10;\n            memory[temp9 + var8:temp9 + var8 + 0x20] = memory[temp9 + var9:temp9 + var9 + 0x20];\n            var10 = temp9 + 0x20;\n        \n            if (var10 >= var7) { goto label_1092; }\n            else { goto label_1083; }\n        }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x6af04a57 > var0) {\n            if (0x3bdafc43 > var0) {\n                if (var0 == 0x0b4005e3) {\n                    // Dispatch table entry for 0x0b4005e3 (unknown)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x012e;\n                    var var2 = 0x00;\n                    memory[var2:var2 + 0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x05;\n                    var var3 = storage[keccak256(memory[var2:var2 + 0x40])];\n                    var var4 = !!var3;\n                \n                    if (!var3) {\n                        if (!var4) { revert(memory[0x00:0x00]); }\n                    \n                    label_043F:\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x05;\n                        storage[keccak256(memory[0x00:0x40])] = 0x00;\n                        var var5 = storage[0x06];\n                        var4 = 0x0462;\n                        var var6 = var3;\n                    \n                    label_0E4C:\n                        var var7 = 0x00;\n                        var var8 = 0x0e8e;\n                        var var9 = var5;\n                        var var10 = var6;\n                        var temp0 = memory[0x40:0x60];\n                        var var11 = temp0;\n                        memory[0x40:0x60] = var11 + 0x40;\n                        memory[var11:var11 + 0x20] = 0x1e;\n                        memory[var11 + 0x20:var11 + 0x20 + 0x20] = 0x536166654d6174683a207375627472616374696f6e206f766572666c6f770000;\n                        var8 = func_103E(var9, var10, var11);\n                        var4 = var8;\n                        // Error: Could not resolve jump destination!\n                    } else if (address(this).balance >= var3) { goto label_043F; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x0f42c61d) {\n                    // Dispatch table entry for 0x0f42c61d (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x012e;\n                    var1 = func_04CF();\n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = var1;\n                    var temp2 = memory[0x40:0x60];\n                    return memory[temp2:temp2 + temp1 - temp2 + 0x20];\n                } else if (var0 == 0x1d946cc4) {\n                    // Dispatch table entry for 0x1d946cc4 (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0182;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    func_0178(var2, var3);\n                    stop();\n                } else if (var0 == 0x356282bf) {\n                    // Dispatch table entry for 0x356282bf (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xa0) { revert(memory[0x00:0x00]); }\n                \n                    var temp3 = var2;\n                    var2 = msg.data[temp3:temp3 + 0x20] & (0x01 << 0xa0) - 0x01;\n                    var3 = msg.data[temp3 + 0x20:temp3 + 0x20 + 0x20];\n                    var4 = msg.data[temp3 + 0x40:temp3 + 0x40 + 0x20];\n                    var5 = msg.data[temp3 + 0x60:temp3 + 0x60 + 0x20] & 0xff;\n                    var6 = msg.data[temp3 + 0x80:temp3 + 0x80 + 0x20] & 0xff;\n                    var7 = 0x00;\n                    var8 = var7;\n                    var9 = 0x05ae;\n                    var10 = 0x01;\n                    var11 = msg.sender;\n                    var9 = func_0E95(var10, var11);\n                \n                    if (!var9) { revert(memory[0x00:0x00]); }\n                \n                    if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n                \n                    if (!(var2 & (0x01 << 0xa0) - 0x01)) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x05;\n                \n                    if (var3 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n                \n                    var9 = 0x00;\n                    var10 = var5;\n                \n                    if (var10 > 0x02) { assert(); }\n                \n                    if (var10 <= var9) { revert(memory[0x00:0x00]); }\n                \n                    memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x05;\n                    var10 = storage[keccak256(memory[0x00:0x40])];\n                    var9 = 0x0640;\n                    var11 = var3;\n                    goto label_0E4C;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x3bdafc43) {\n                // Dispatch table entry for stripRoles(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                stripRoles(var2, var3);\n                stop();\n            } else if (var0 == 0x3f4ba83a) {\n                // Dispatch table entry for unpause()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                unpause();\n                stop();\n            } else if (var0 == 0x5352a839) {\n                // Dispatch table entry for setCurrentGeneration(uint8)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                setCurrentGeneration(var2, var3);\n                stop();\n            } else if (var0 == 0x5c975abb) {\n                // Dispatch table entry for paused()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0277;\n                var2 = paused();\n            \n            label_0277:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x5fdc4ec6) {\n                // Dispatch table entry for setTeleporterContract(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                setTeleporterContract(var2, var3);\n                stop();\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0x983b2d56 > var0) {\n            if (var0 == 0x6af04a57) {\n                // Dispatch table entry for newContractAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d3;\n                var2 = newContractAddress();\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + temp6 - temp7 + 0x20];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                addOwner(var2, var3);\n                stop();\n            } else if (var0 == 0x8456cb59) {\n                // Dispatch table entry for pause()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0182;\n                pause();\n                stop();\n            } else if (var0 == 0x8b2b303c) {\n                // Dispatch table entry for 0x8b2b303c (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x012e;\n                var2 = 0x00;\n                var3 = 0x0b95;\n                var4 = 0x02;\n                var5 = msg.sender;\n                var3 = func_0E95(var4, var5);\n            \n                if (!var3) { revert(memory[0x00:0x00]); }\n            \n                var3 = 0x00;\n                var4 = 0x0bb5;\n                var5 = address(this).balance;\n                var6 = storage[0x06];\n                goto label_0E4C;\n            } else if (var0 == 0x9618652c) {\n                // Dispatch table entry for 0x9618652c (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x012e;\n                var2 = 0x00;\n                var3 = 0x0c40;\n                var4 = 0x02;\n                var5 = msg.sender;\n                var3 = func_0E95(var4, var5);\n            \n                if (!var3) { revert(memory[0x00:0x00]); }\n            \n                var3 = 0x0c5d;\n                var4 = address(this).balance;\n                var5 = storage[0x06];\n                goto label_0E4C;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x983b2d56) {\n            // Dispatch table entry for addMinter(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0182;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            addMinter(var2, var3);\n            stop();\n        } else if (var0 == 0x9a3b58c9) {\n            // Dispatch table entry for addSysAdmin(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0182;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            addSysAdmin(var2, var3);\n            stop();\n        } else if (var0 == 0xc28de2cd) {\n            // Dispatch table entry for upgraded()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0277;\n            var2 = upgraded();\n            goto label_0277;\n        } else if (var0 == 0xd0e30db0) {\n            // Dispatch table entry for deposit()\n            var1 = 0x0182;\n            deposit();\n            stop();\n        } else if (var0 == 0xeb2c0223) {\n            // Dispatch table entry for upgradeContract(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0182;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            upgradeContract(var2, var3);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0178(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xff;\n        func_04E2(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function stripRoles(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x07ce;\n        var var0 = 0x02;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01 == msg.sender) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x00;\n        var0 = 0x07ff;\n        var1 = arg1;\n        var var2 = arg0;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) {\n        label_0819:\n            var0 = 0x082a;\n            var1 = 0x01;\n            var2 = arg0;\n            var0 = func_0E95(var1, var2);\n        \n            if (!var0) {\n            label_0844:\n                var0 = 0x0855;\n                var1 = 0x02;\n                var2 = arg0;\n                var0 = func_0E95(var1, var2);\n            \n                if (!var0) {\n                label_086F:\n                \n                    if (!!arg1 == 0x01) { return; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var0 = 0x086b;\n                    var1 = 0x02;\n                    var2 = arg0;\n                    func_0EFC(var1, var2);\n                    arg1 = 0x01;\n                    goto label_086F;\n                }\n            } else {\n                var0 = 0x0840;\n                var1 = 0x01;\n                var2 = arg0;\n                func_0EFC(var1, var2);\n                arg1 = 0x01;\n                goto label_0844;\n            }\n        } else {\n            var0 = 0x0815;\n            var1 = 0x00;\n            var2 = arg0;\n            func_0EFC(var1, var2);\n            arg1 = 0x01;\n            goto label_0819;\n        }\n    }\n    \n    function setCurrentGeneration(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xff;\n        arg1 = 0x0906;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        arg1 = arg0;\n        var0 = 0x04;\n        var1 = storage[var0] & ~(0xff << 0xa0);\n        var var2 = 0x01 << 0xa0;\n        var var3 = arg1;\n    \n        if (var3 > var0) { assert(); }\n    \n        storage[var0] = var3 * var2 | var1;\n        arg1 = 0xf6f89c5740b3ef3333a4c100b6af26b85330a53841d797e6b6fb3d7e014fa639;\n        var0 = storage[0x04] / 0x0100 ** 0x14 & 0xff;\n        var1 = memory[0x40:0x60];\n        var2 = var1;\n        var3 = var0;\n    \n        if (var3 > 0x04) { assert(); }\n    \n        var temp0 = var2;\n        memory[temp0:temp0 + 0x20] = var3 & 0xff;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [stack[-5]]);\n        arg1 = 0x09b4;\n        var0 = 0x01;\n        func_04E2(var0);\n    }\n    \n    function setTeleporterContract(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x09d1;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        arg1 = arg0;\n        var0 = arg1 & (0x01 << 0xa0) - 0x01;\n        var1 = 0x950699fe;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) << 0xe0;\n        var var2 = temp0 + 0x04;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = var0;\n        var var8 = !address(var7).code.length;\n    \n        if (var8) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var4:var4 + var3] = address(var7).staticcall.gas(msg.gas)(memory[var6:var6 + var5]);\n        var3 = !temp1;\n    \n        if (!var3) {\n            var0 = memory[0x40:0x60];\n            var1 = returndata.length;\n        \n            if (var1 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[var0:var0 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var temp2 = arg0 & (0x01 << 0xa0) - 0x01;\n            storage[0x04] = temp2 | (storage[0x04] & ~((0x01 << 0xa0) - 0x01));\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = temp2;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0x703bc78725b2f16bafbf6232f3d5d610f25096a4a6b759fdbb5a46252d12108f]);\n            return;\n        } else {\n            var temp5 = returndata.length;\n            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function addOwner(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x0aec;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x0b06;\n        var0 = 0x02;\n        var1 = arg0;\n        func_0F63(var0, var1);\n        arg1 = 0x0b17;\n        var0 = 0x02;\n        var1 = arg0;\n        arg1 = func_0E95(var0, var1);\n    \n        if (arg1) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function addMinter(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x0c73;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x0c8d;\n        var0 = 0x01;\n        var1 = arg0;\n        func_0F63(var0, var1);\n        arg1 = 0x0b17;\n        var0 = 0x01;\n        var1 = arg0;\n        arg1 = func_0E95(var0, var1);\n    \n        if (arg1) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function addSysAdmin(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x0caf;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        arg1 = 0x0cc9;\n        var0 = 0x00;\n        var1 = arg0;\n        func_0F63(var0, var1);\n        arg1 = 0x0b17;\n        var0 = 0x00;\n        var1 = arg0;\n        arg1 = func_0E95(var0, var1);\n    \n        if (arg1) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function upgradeContract(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n        arg1 = 0x0da3;\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        arg1 = func_0E95(var0, var1);\n    \n        if (!arg1) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & (0x01 << 0xa0) - 0x01;\n        storage[0x03] = temp0 * 0x010000 | (((storage[0x03] & ~0xff00) | 0x0100) & ~((0x01 << 0xb0) - 0x010000));\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0x450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa446199305]);\n    }\n    \n    function func_04CF() returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_04E2(var arg0) {\n        var var0 = 0x04f3;\n        var var1 = 0x00;\n        var var2 = msg.sender;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = arg0;\n        var1 = 0x04;\n        var2 = storage[var1] & ~(0xff << 0xa8);\n        var var3 = 0x01 << 0xa8;\n        var var4 = var0;\n    \n        if (var4 > 0x05) { assert(); }\n    \n        storage[var1] = var4 * var3 | var2;\n        var0 = 0x9e37d6841345f8e4b31d3f2191820df11948b07a3f62df09880a47dc37336531;\n        var2 = memory[0x40:0x60];\n        var1 = storage[0x04] / (0x01 << 0xa8) & 0xff;\n        var3 = var2;\n        var4 = var1;\n    \n        if (var4 > 0x05) { assert(); }\n    \n        var temp0 = var3;\n        memory[temp0:temp0 + 0x20] = var4 & 0xff;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [stack[-5]]);\n    }\n    \n    function unpause() {\n        var var0 = 0x0893;\n        var var1 = 0x00;\n        var var2 = msg.sender;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = storage[0x03] & ~0xff;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x0e5e3b3fb504c22cf5c42fa07d521225937514c654007e1f12646f89768d6f94]);\n    }\n    \n    function paused() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function newContractAddress() returns (var r0) { return storage[0x03] / 0x010000 & (0x01 << 0xa0) - 0x01; }\n    \n    function pause() {\n        var var0 = 0x0b31;\n        var var1 = 0x00;\n        var var2 = msg.sender;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~0xff) | 0x01;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xab35696f06e428ebc5ceba8cd17f8fed287baf43440206d1943af1ee53e6d267]);\n    }\n    \n    function upgraded() returns (var r0) { return storage[0x03] / 0x0100 & 0xff; }\n    \n    function deposit() {\n        if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var var0 = 0x0d25;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0FE4(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x0d48;\n        var1 = storage[0x06];\n        var2 = msg.value;\n        var0 = func_0FE4(var1, var2);\n        storage[0x06] = var0;\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x05;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xe5c9ed746c9a90be28ec0ba6f0fc363540492f749c0c97464501aa92c4d112d6, msg.sender]);\n    }\n    \n    function func_0E95(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 & (0x01 << 0xa0) - 0x01) {\n            memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = arg0;\n            return storage[keccak256(memory[0x00:0x40])] & 0xff;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x22;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x22] = code[0x10f7:0x1119];\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n        }\n    }\n    \n    function func_0EFC(var arg0, var arg1) {\n        var var0 = 0x0f06;\n        var var1 = arg0;\n        var var2 = arg1;\n        var0 = func_0E95(var1, var2);\n    \n        if (var0) {\n            memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = arg0;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = storage[temp0] & ~0xff;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n            var temp2 = temp1 + 0x04;\n            var temp3 = temp2 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp3 - temp2;\n            memory[temp3:temp3 + 0x20] = 0x21;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x21] = code[0x10d6:0x10f7];\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + (temp4 + 0x40) - temp5]);\n        }\n    }\n    \n    function func_0F63(var arg0, var arg1) {\n        var var0 = 0x0f6d;\n        var var1 = arg0;\n        var var2 = arg1;\n        var0 = func_0E95(var1, var2);\n    \n        if (!var0) {\n            memory[0x00:0x20] = arg1 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = arg0;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1f;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x526f6c65733a206163636f756e7420616c72656164792068617320726f6c6500;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function func_0FE4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x461bcd << 0xe5;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x1b;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x536166654d6174683a206164646974696f6e206f766572666c6f770000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_103E(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var var2 = temp1;\n        var var3 = var2;\n        var temp2 = var3 + 0x20;\n        memory[var3:var3 + 0x20] = temp2 - var3;\n        var temp3 = var1;\n        memory[temp2:temp2 + 0x20] = memory[temp3:temp3 + 0x20];\n        var var4 = temp2 + 0x20;\n        var var6 = memory[temp3:temp3 + 0x20];\n        var var5 = temp3 + 0x20;\n        var var7 = var6;\n        var var8 = var4;\n        var var9 = var5;\n        var var10 = 0x00;\n    \n        if (var10 >= var7) {\n        label_1092:\n            var temp4 = var6;\n            var4 = temp4 + var4;\n            var5 = temp4 & 0x1f;\n        \n            if (!var5) {\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + var4 - temp5]);\n            } else {\n                var temp6 = var5;\n                var temp7 = var4 - temp6;\n                memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                var temp8 = memory[0x40:0x60];\n                revert(memory[temp8:temp8 + (temp7 + 0x20) - temp8]);\n            }\n        } else {\n        label_1083:\n            var temp9 = var10;\n            memory[temp9 + var8:temp9 + var8 + 0x20] = memory[temp9 + var9:temp9 + var9 + 0x20];\n            var10 = temp9 + 0x20;\n        \n            if (var10 >= var7) { goto label_1092; }\n            else { goto label_1083; }\n        }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 37.4114990234375,
	"usage": {
		"completion_tokens": 542,
		"prompt_tokens": 9639,
		"total_tokens": 10181
	}
}