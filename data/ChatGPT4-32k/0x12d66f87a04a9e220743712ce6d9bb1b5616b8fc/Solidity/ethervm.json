{
	"address": "0x12d66f87a04a9e220743712ce6d9bb1b5616b8fc",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity program that matches the functionality described in the decompiled code:\n\n```solidity\npragma solidity ^0.4.26;\n\ncontract Contract {\n    uint256 public levels;\n    uint256 public ROOT_HISTORY_SIZE = 100;\n    uint256 public ZERO_VALUE = 0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c;\n    uint256 private FIELD_SIZE;\n    address public verifier;\n    address public operator;\n    uint256 public denomination;\n    uint256 private nextIndex;\n    uint256 private currentRootIndex;\n    bool public isMigrated;\n\n    mapping(uint256 => uint256) public filledSubtrees;\n    mapping(uint256 => uint256) public zeros;\n    mapping(uint256 => bytes32) public roots;\n    mapping(bytes32 => bool) private nullifierHashes;\n    mapping(bytes32 => bool) private commitments;\n\n    modifier onlyOperator {\n        require(msg.sender == operator, \"Caller is not the operator\");\n        _;\n    }\n\n    function changeOperator(address _newOperator) public onlyOperator {\n        operator = _newOperator;\n    }\n\n    function deposit(bytes32 _leaf) public payable {\n        require(msg.value == denomination, \"Incorrect deposit value\");\n        require(!nullifierHashes[_leaf], \"The note has been already spent\");\n        // omitted code for brevity\n    }\n\n    function withdraw(bytes _proof, bytes32 _root, bytes32 _nullifierHash, address _recipient, uint _refund) public {\n        require(!nullifierHashes[_nullifierHash], \"The note has been already spent\");\n        // omitted code for brevity\n    }\n\n    function isSpent(bytes32 _nullifierHash) public view returns(bool) {\n        return nullifierHashes[_nullifierHash];\n    }\n\n    function isKnownRoot(bytes32 _root) public view returns(bool) {\n        // omitted code for brevity\n    }\n\n    function updateVerifier(address _newVerifier) public onlyOperator {\n        verifier = _newVerifier;\n    }\n\n    function finishMigration() public onlyOperator {\n        isMigrated = true;\n    }\n}\n```\n\nThis Solidity code represents a contract that maintains a Merkle tree of deposits. The `deposit` function allows users to deposit funds into the contract and add a leaf to the Merkle tree. The `withdraw` function allows users to withdraw their funds, providing a proof that they previously made a deposit.\n\nThe `isSpent` function is used to check if a note has been spent. The `isKnownRoot` function checks if a given root is known. The `updateVerifier` function can change the address of the verifier contract. The `finishMigration` function can be called by the operator to signal that a migration has been completed. \n\nPlease note that the provided Solidity code is a high-level representation of the decompiled EVM byte code. Some low-level details (such as the specific implementation of hash functions and tree traversal) are omitted for brevity. \n\n**Disclaimer:** This code is a simplified representation and should not be used for any production purposes as it may not fully represent the complete functionality or security measures of the original contract. Always perform your own due diligence when dealing with contract code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471247,
	"id": "chatcmpl-8MuXX1PTIXbJZfxYyR0pwFfIcMd6B",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x90eeb02b > var0) {\n            if (0x4ecf518b > var0) {\n                if (var0 == 0x06394c9b) {\n                    // Dispatch table entry for changeOperator(address)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var var2 = 0x04;\n                    var var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    changeOperator(var2, var3);\n                    stop();\n                } else if (var0 == 0x17cc915c) {\n                    // Dispatch table entry for nullifierHashes(bytes32)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0200;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = nullifierHashes(var2, var3);\n                \n                label_0200:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = !!var2;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n                } else if (var0 == 0x21a0adb6) {\n                    // Dispatch table entry for withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)\n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xe0) { revert(memory[0x00:0x00]); }\n                \n                    withdraw(var2, var3);\n                    stop();\n                } else if (var0 == 0x2b7ac3f3) {\n                    // Dispatch table entry for verifier()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02c2;\n                    var2 = verifier();\n                \n                label_02C2:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n                } else if (var0 == 0x38bf282e) {\n                    // Dispatch table entry for hashLeftRight(bytes32,bytes32)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x030e;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var temp4 = var2;\n                    var2 = msg.data[temp4:temp4 + 0x20];\n                    var3 = msg.data[temp4 + 0x20:temp4 + 0x20 + 0x20];\n                    var var4 = 0x00;\n                    var temp5 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x18c0:0x18e0];\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp5;\n                \n                    if (var2 < temp6) {\n                        var temp7 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x18c0:0x18e0];\n                        var temp8 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp7;\n                    \n                        if (var3 < temp8) {\n                            var temp9 = memory[0x40:0x60];\n                            memory[temp9:temp9 + 0x20] = 0xf47d33b5 << 0xe0;\n                            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = var2;\n                            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x00;\n                            var var5 = var2;\n                            var var6 = 0x00;\n                            var var7 = 0x83584f83f26af4edda9cbe8c730bc87c364b28fe;\n                            var var10 = 0x40;\n                            var var11 = memory[var10:var10 + 0x20];\n                            var var8 = 0xf47d33b5;\n                            var var9 = temp9 + 0x44;\n                            var var12 = temp9 - var11 + 0x44;\n                            var var13 = var11;\n                            var var14 = var7;\n                            var var15 = !address(var14).code.length;\n                        \n                            if (var15) { revert(memory[0x00:0x00]); }\n                        \n                            var temp10;\n                            temp10, memory[var11:var11 + var10] = address(var14).delegatecall.gas(msg.gas)(memory[var13:var13 + var12]);\n                            var10 = !temp10;\n                        \n                            if (!var10) {\n                                var7 = memory[0x40:0x60];\n                                var8 = returndata.length;\n                            \n                                if (var8 < 0x40) { revert(memory[0x00:0x00]); }\n                            \n                                var temp11 = var7;\n                                var temp12 = memory[temp11:temp11 + 0x20];\n                                var5 = temp12;\n                                var6 = memory[temp11 + 0x20:temp11 + 0x20 + 0x20];\n                                var temp13 = memory[0x00:0x20];\n                                memory[0x00:0x20] = code[0x18c0:0x18e0];\n                                var7 = memory[0x00:0x20];\n                                memory[0x00:0x20] = temp13;\n                                var8 = var3;\n                                var9 = var5;\n                                // Unhandled termination\n                            } else {\n                                var temp14 = returndata.length;\n                                memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                            var temp15 = memory[0x40:0x60];\n                            memory[temp15:temp15 + 0x20] = 0x461bcd << 0xe5;\n                            var temp16 = temp15 + 0x04;\n                            var temp17 = temp16 + 0x20;\n                            memory[temp16:temp16 + 0x20] = temp17 - temp16;\n                            memory[temp17:temp17 + 0x20] = 0x21;\n                            var temp18 = temp17 + 0x20;\n                            memory[temp18:temp18 + 0x21] = code[0x186b:0x188c];\n                            var temp19 = memory[0x40:0x60];\n                            revert(memory[temp19:temp19 + (temp18 + 0x40) - temp19]);\n                        }\n                    } else {\n                        var temp20 = memory[0x40:0x60];\n                        memory[temp20:temp20 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n                        memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x20;\n                        memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x5f6c6566742073686f756c6420626520696e7369646520746865206669656c64;\n                        var temp21 = memory[0x40:0x60];\n                        revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n                    }\n                } else if (var0 == 0x414a37ba) {\n                    // Dispatch table entry for FIELD_SIZE()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x030e;\n                    var2 = FIELD_SIZE();\n                \n                label_030E:\n                    var temp22 = memory[0x40:0x60];\n                    memory[temp22:temp22 + 0x20] = var2;\n                    var temp23 = memory[0x40:0x60];\n                    return memory[temp23:temp23 + temp22 - temp23 + 0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0x6d9833e3 > var0) {\n                if (var0 == 0x4ecf518b) {\n                    // Dispatch table entry for levels()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x034a;\n                    var2 = levels();\n                \n                label_034A:\n                    var temp24 = memory[0x40:0x60];\n                    memory[temp24:temp24 + 0x20] = var2 & 0xffffffff;\n                    var temp25 = memory[0x40:0x60];\n                    return memory[temp25:temp25 + temp24 - temp25 + 0x20];\n                } else if (var0 == 0x570ca735) {\n                    // Dispatch table entry for operator()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02c2;\n                    var2 = operator();\n                    goto label_02C2;\n                } else if (var0 == 0x6ba355aa) {\n                    // Dispatch table entry for 0x6ba355aa (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var temp26 = var2;\n                    var temp27 = temp26 + var3;\n                    var3 = temp26;\n                    var2 = temp27;\n                    var4 = var3 + 0x20;\n                    var5 = msg.data[var3:var3 + 0x20];\n                \n                    if (var5 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp28 = var3 + var5;\n                    var5 = temp28;\n                \n                    if (var5 + 0x20 > var2) { revert(memory[0x00:0x00]); }\n                \n                    var temp29 = var5;\n                    var temp30 = msg.data[temp29:temp29 + 0x20];\n                    var5 = temp30;\n                    var temp31 = var4;\n                    var4 = temp29 + 0x20;\n                    var6 = temp31;\n                \n                    if ((var5 > 0x01 << 0x20) | (var4 + var5 * 0x20 > var2)) { revert(memory[0x00:0x00]); }\n                \n                    var2 = var4;\n                    var3 = var5;\n                    var4 = msg.data[var6:var6 + 0x20];\n                \n                    if (msg.sender != storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n                        var temp43 = memory[0x40:0x60];\n                        memory[temp43:temp43 + 0x20] = 0x461bcd << 0xe5;\n                        var temp44 = temp43 + 0x04;\n                        var temp45 = temp44 + 0x20;\n                        memory[temp44:temp44 + 0x20] = temp45 - temp44;\n                        memory[temp45:temp45 + 0x20] = 0x25;\n                        var temp46 = temp45 + 0x20;\n                        memory[temp46:temp46 + 0x25] = code[0x1949:0x196e];\n                        var temp47 = memory[0x40:0x60];\n                        revert(memory[temp47:temp47 + (temp46 + 0x40) - temp47]);\n                    } else if (!(storage[0x6d] / (0x01 << 0xa0) & 0xff)) {\n                        var5 = 0x0df5;\n                        var6 = 0x01;\n                        var7 = var2;\n                        var8 = var3;\n                        var temp32 = var6;\n                        var temp33 = storage[temp32];\n                        var temp34 = var8;\n                        storage[temp32] = temp34;\n                        memory[0x00:0x20] = temp32;\n                        var9 = keccak256(memory[0x00:0x20]);\n                        var temp35 = var7;\n                        var7 = var9 + temp33;\n                        var10 = temp35;\n                    \n                        if (!temp34) {\n                        label_17D9:\n                            var temp36 = var7;\n                            var7 = 0x17e5;\n                            var8 = temp36;\n                            var7 = func_17E9(var8, var9);\n                            var5 = var6;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var temp37 = var8;\n                            var temp38 = var10;\n                            var8 = temp38;\n                            var10 = var8 + temp37 * 0x20;\n                        \n                            if (var10 <= var8) { goto label_17D9; }\n                        \n                        label_17C7:\n                            var temp39 = var8;\n                            var temp40 = var9;\n                            storage[temp40] = msg.data[temp39:temp39 + 0x20];\n                            var8 = temp39 + 0x20;\n                            var9 = temp40 + 0x01;\n                            var10 = var10;\n                        \n                            if (var10 <= var8) { goto label_17D9; }\n                            else { goto label_17C7; }\n                        }\n                    } else {\n                        var temp41 = memory[0x40:0x60];\n                        memory[temp41:temp41 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp41 + 0x04:temp41 + 0x04 + 0x20] = 0x20;\n                        memory[temp41 + 0x24:temp41 + 0x24 + 0x20] = 0x10;\n                        memory[temp41 + 0x44:temp41 + 0x44 + 0x20] = 0x185b1c9958591e481b5a59dc985d1959 << 0x82;\n                        var temp42 = memory[0x40:0x60];\n                        revert(memory[temp42:temp42 + temp41 - temp42 + 0x64]);\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x6d9833e3) {\n                // Dispatch table entry for isKnownRoot(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0200;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = isKnownRoot(var2, var3);\n                goto label_0200;\n            } else if (var0 == 0x839df945) {\n                // Dispatch table entry for commitments(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0200;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = commitments(var2, var3);\n                goto label_0200;\n            } else if (var0 == 0x88d761f2) {\n                // Dispatch table entry for finishMigration()\n                var1 = 0x01d4;\n                finishMigration();\n                stop();\n            } else if (var0 == 0x8bca6d16) {\n                // Dispatch table entry for denomination()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030e;\n                var2 = denomination();\n                goto label_030E;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xc2b40ae4 > var0) {\n            if (0x9fa12d0b > var0) {\n                if (var0 == 0x90eeb02b) {\n                    // Dispatch table entry for currentRootIndex()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x034a;\n                    var2 = currentRootIndex();\n                    goto label_034A;\n                } else if (var0 == 0x916710aa) {\n                    // Dispatch table entry for 0x916710aa (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    func_049C(var2, var3);\n                    stop();\n                } else if (var0 == 0x97fc007c) {\n                    // Dispatch table entry for updateVerifier(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    updateVerifier(var2, var3);\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x9fa12d0b) {\n                // Dispatch table entry for isSpentArray(bytes32[])\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05f2;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = isSpentArray(var2, var3);\n                var temp48 = memory[0x40:0x60];\n                memory[temp48:temp48 + 0x20] = 0x20;\n                var temp49 = var1;\n                memory[temp48 + 0x20:temp48 + 0x20 + 0x20] = memory[temp49:temp49 + 0x20];\n                var2 = temp48;\n                var3 = var2;\n                var4 = var3 + 0x40;\n                var5 = temp49 + 0x20;\n                var6 = memory[temp49:temp49 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_062E:\n                    var temp50 = memory[0x40:0x60];\n                    return memory[temp50:temp50 + (var6 + var4) - temp50];\n                } else {\n                label_061F:\n                    var temp51 = var10;\n                    memory[temp51 + var8:temp51 + var8 + 0x20] = memory[temp51 + var9:temp51 + var9 + 0x20];\n                    var10 = temp51 + 0x20;\n                \n                    if (var10 >= var7) { goto label_062E; }\n                    else { goto label_061F; }\n                }\n            } else if (var0 == 0xb06faf62) {\n                // Dispatch table entry for isMigrated()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0200;\n                var2 = isMigrated();\n                goto label_0200;\n            } else if (var0 == 0xb214faa5) {\n                // Dispatch table entry for deposit(bytes32)\n                var1 = 0x01d4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                deposit(var2, var3);\n                stop();\n            } else if (var0 == 0xba70f757) {\n                // Dispatch table entry for getLastRoot()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030e;\n                var1 = getLastRoot();\n                goto label_030E;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xe8295588 > var0) {\n            if (var0 == 0xc2b40ae4) {\n                // Dispatch table entry for roots(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030e;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = roots(var2, var3);\n                goto label_030E;\n            } else if (var0 == 0xcd87a3b4) {\n                // Dispatch table entry for ROOT_HISTORY_SIZE()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x034a;\n                var2 = ROOT_HISTORY_SIZE();\n                goto label_034A;\n            } else if (var0 == 0xe5285dcc) {\n                // Dispatch table entry for isSpent(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0200;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = isSpent(var2, var3);\n                goto label_0200;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xe8295588) {\n            // Dispatch table entry for zeros(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x030e;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = zeros(var2, var3);\n            goto label_030E;\n        } else if (var0 == 0xec732959) {\n            // Dispatch table entry for ZERO_VALUE()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x030e;\n            var2 = ZERO_VALUE();\n            goto label_030E;\n        } else if (var0 == 0xf178e47c) {\n            // Dispatch table entry for filledSubtrees(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x030e;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = filledSubtrees(var2, var3);\n            goto label_030E;\n        } else if (var0 == 0xfc7e9c6f) {\n            // Dispatch table entry for nextIndex()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x034a;\n            var2 = nextIndex();\n            goto label_034A;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function changeOperator(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n    \n        if (msg.sender == storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n            storage[0x6d] = (arg0 & (0x01 << 0xa0) - 0x01) | (storage[0x6d] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x25;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x25] = code[0x1949:0x196e];\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n        }\n    }\n    \n    function nullifierHashes(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x6a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function withdraw(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x01 << 0x20) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        arg0 = var0;\n        arg1 = var1;\n        var0 = msg.data[temp6:temp6 + 0x20];\n        var1 = msg.data[temp6 + 0x20:temp6 + 0x20 + 0x20];\n        var temp7 = (0x01 << 0xa0) - 0x01;\n        var2 = temp7 & msg.data[temp6 + 0x40:temp6 + 0x40 + 0x20];\n        var var3 = temp7 & msg.data[temp6 + 0x60:temp6 + 0x60 + 0x20];\n        var var4 = msg.data[temp6 + 0x80:temp6 + 0x80 + 0x20];\n        var var5 = msg.data[temp6 + 0xa0:temp6 + 0xa0 + 0x20];\n        var var6 = storage[0x68] + 0x01;\n        storage[0x68] = var6;\n    \n        if (var4 <= storage[0x69]) {\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x6a;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n                var var7 = 0x08bf;\n                var var8 = var0;\n                var7 = func_0DFD(var8);\n            \n                if (var7) {\n                    var temp8 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp8 + 0xc0;\n                    memory[temp8:temp8 + 0x20] = var0;\n                    memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = var1;\n                    var temp9 = (0x01 << 0xa0) - 0x01;\n                    memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = temp9 & var2;\n                    memory[temp8 + 0x60:temp8 + 0x60 + 0x20] = temp9 & var3;\n                    memory[temp8 + 0x80:temp8 + 0x80 + 0x20] = var4;\n                    memory[temp8 + 0xa0:temp8 + 0xa0 + 0x20] = var5;\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = 0x695ef6f9 << 0xe0;\n                    var7 = storage[0x6c] & temp9;\n                    var8 = 0x695ef6f9;\n                    var var9 = arg0;\n                    var var10 = arg1;\n                    var var11 = temp8;\n                    var var12 = temp10 + 0x04;\n                    var var13 = var12;\n                    var var14 = temp10 + 0x24;\n                    var var15 = var11;\n                    var var16 = 0xc0;\n                    var var17 = var16;\n                    var var18 = var14;\n                    var var19 = var15;\n                    var var20 = 0x00;\n                \n                    if (var20 >= var17) {\n                    label_0995:\n                        var temp11 = var16 + var14;\n                        memory[var13:var13 + 0x20] = temp11 - var12;\n                        var temp12 = var10;\n                        memory[temp11:temp11 + 0x20] = temp12;\n                        var temp13 = temp11 + 0x20;\n                        memory[temp13:temp13 + temp12] = msg.data[var9:var9 + temp12];\n                        memory[temp13 + temp12:temp13 + temp12 + 0x20] = 0x00;\n                        var9 = temp13 + (temp12 + 0x1f & ~0x1f);\n                        var10 = 0x20;\n                        var11 = memory[0x40:0x60];\n                        var12 = var9 - var11;\n                        var13 = var11;\n                        var14 = 0x00;\n                        var15 = var7;\n                        var16 = !address(var15).code.length;\n                    \n                        if (var16) { revert(memory[0x00:0x00]); }\n                    \n                        var temp14;\n                        temp14, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas).value(var14)(memory[var13:var13 + var12]);\n                        var10 = !temp14;\n                    \n                        if (!var10) {\n                            var7 = memory[0x40:0x60];\n                            var8 = returndata.length;\n                        \n                            if (var8 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            if (memory[var7:var7 + 0x20]) {\n                                memory[0x00:0x20] = var1;\n                                memory[0x20:0x40] = 0x6a;\n                                var temp15 = keccak256(memory[0x00:0x40]);\n                                storage[temp15] = (storage[temp15] & ~0xff) | 0x01;\n                                var7 = 0x0a82;\n                                var8 = var2;\n                                var9 = var3;\n                                var10 = var4;\n                                var11 = var5;\n                                func_141F(var8, var9, var10, var11);\n                                var temp16 = memory[0x40:0x60];\n                                var temp17 = (0x01 << 0xa0) - 0x01;\n                                memory[temp16:temp16 + 0x20] = temp17 & var2;\n                                memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = var1;\n                                memory[temp16 + 0x40:temp16 + 0x40 + 0x20] = var4;\n                                var temp18 = memory[0x40:0x60];\n                                log(memory[temp18:temp18 + temp16 - temp18 + 0x60], [0xe9e508bad6d4c3227e881ca19068f099da81b5164dd6d62b2eaf1e8bc6c34931, stack[-4] & (0x01 << 0xa0) - 0x01]);\n                            \n                                if (var6 == storage[0x68]) { return; }\n                            \n                                var temp19 = memory[0x40:0x60];\n                                memory[temp19:temp19 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp19 + 0x04:temp19 + 0x04 + 0x20] = 0x20;\n                                memory[temp19 + 0x24:temp19 + 0x24 + 0x20] = 0x1f;\n                                memory[temp19 + 0x44:temp19 + 0x44 + 0x20] = 0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00;\n                                var temp20 = memory[0x40:0x60];\n                                revert(memory[temp20:temp20 + temp19 - temp20 + 0x64]);\n                            } else {\n                                var temp21 = memory[0x40:0x60];\n                                memory[temp21:temp21 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp21 + 0x04:temp21 + 0x04 + 0x20] = 0x20;\n                                memory[temp21 + 0x24:temp21 + 0x24 + 0x20] = 0x16;\n                                memory[temp21 + 0x44:temp21 + 0x44 + 0x20] = 0x24b73b30b634b2103bb4ba34323930bb90383937b7b3 << 0x51;\n                                var temp22 = memory[0x40:0x60];\n                                revert(memory[temp22:temp22 + temp21 - temp22 + 0x64]);\n                            }\n                        } else {\n                            var temp23 = returndata.length;\n                            memory[0x00:0x00 + temp23] = returndata[0x00:0x00 + temp23];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                    label_0986:\n                        var temp24 = var20;\n                        memory[temp24 + var18:temp24 + var18 + 0x20] = memory[temp24 + var19:temp24 + var19 + 0x20];\n                        var20 = temp24 + 0x20;\n                    \n                        if (var20 >= var17) { goto label_0995; }\n                        else { goto label_0986; }\n                    }\n                } else {\n                    var temp25 = memory[0x40:0x60];\n                    memory[temp25:temp25 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n                    memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x1c;\n                    memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = 0x43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f7400000000;\n                    var temp26 = memory[0x40:0x60];\n                    revert(memory[temp26:temp26 + temp25 - temp26 + 0x64]);\n                }\n            } else {\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp27 + 0x04:temp27 + 0x04 + 0x20] = 0x20;\n                memory[temp27 + 0x24:temp27 + 0x24 + 0x20] = 0x1f;\n                memory[temp27 + 0x44:temp27 + 0x44 + 0x20] = 0x546865206e6f746520686173206265656e20616c7265616479207370656e7400;\n                var temp28 = memory[0x40:0x60];\n                revert(memory[temp28:temp28 + temp27 - temp28 + 0x64]);\n            }\n        } else {\n            var temp29 = memory[0x40:0x60];\n            memory[temp29:temp29 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = 0x20;\n            memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = 0x1a;\n            memory[temp29 + 0x44:temp29 + 0x44 + 0x20] = 0x4665652065786365656473207472616e736665722076616c7565000000000000;\n            var temp30 = memory[0x40:0x60];\n            revert(memory[temp30:temp30 + temp29 - temp30 + 0x64]);\n        }\n    }\n    \n    function isKnownRoot(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_0DFD(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function commitments(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x6b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_049C(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x01 << 0x20) | (var0 + var1 * 0x20 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        var temp6 = arg0;\n        arg0 = var0;\n        var temp7 = arg1;\n        arg1 = var1;\n        var1 = temp7;\n        var0 = temp6;\n        var2 = temp5 + 0x20;\n        var var3 = msg.data[temp5:temp5 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = var1 + var3;\n        var3 = temp8;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = var3;\n        var temp10 = msg.data[temp9:temp9 + 0x20];\n        var3 = temp10;\n        var var4 = var2;\n        var2 = temp9 + 0x20;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 * 0x20 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var0 = var2;\n        var1 = var3;\n    \n        if (msg.sender != storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = 0x461bcd << 0xe5;\n            var temp26 = temp25 + 0x04;\n            var temp27 = temp26 + 0x20;\n            memory[temp26:temp26 + 0x20] = temp27 - temp26;\n            memory[temp27:temp27 + 0x20] = 0x25;\n            var temp28 = temp27 + 0x20;\n            memory[temp28:temp28 + 0x25] = code[0x1949:0x196e];\n            var temp29 = memory[0x40:0x60];\n            revert(memory[temp29:temp29 + (temp28 + 0x40) - temp29]);\n        } else if (!(storage[0x6d] / (0x01 << 0xa0) & 0xff)) {\n            var2 = 0x00;\n        \n            if (arg1 <= var2 & 0xffffffff) {\n            label_105E:\n                var temp11 = storage[0x03];\n                storage[0x03] = (temp11 & ~0xffffffff00000000) | (arg1 + (temp11 / (0x01 << 0x20) & 0xffffffff) & 0xffffffff) * (0x01 << 0x20);\n                var2 = 0x00;\n            \n                if (var2 >= var1) {\n                label_1143:\n                    return;\n                } else {\n                label_1094:\n                    var3 = 0x01;\n                    var4 = 0x6a;\n                    var var5 = 0x00;\n                    var var6 = var0;\n                    var var7 = var1;\n                    var var8 = var2;\n                \n                    if (var8 >= var7) { assert(); }\n                \n                    var temp12 = var5;\n                    memory[temp12:temp12 + 0x20] = msg.data[var8 * 0x20 + var6:var8 * 0x20 + var6 + 0x20];\n                    var temp13 = temp12 + 0x20;\n                    memory[temp13:temp13 + 0x20] = var4;\n                    var temp14 = keccak256(memory[0x00:0x00 + temp13 + 0x20]);\n                    storage[temp14] = !!var3 | (storage[temp14] & ~0xff);\n                    var3 = (0x01 << 0xa0) - 0x01 & 0x00;\n                    var4 = 0xe9e508bad6d4c3227e881ca19068f099da81b5164dd6d62b2eaf1e8bc6c34931;\n                    var5 = 0x00;\n                    var6 = var0;\n                    var7 = var1;\n                    var8 = var2;\n                \n                    if (var8 >= var7) { assert(); }\n                \n                    var temp15 = memory[0x40:0x60];\n                    memory[temp15:temp15 + 0x20] = var5 & (0x01 << 0xa0) - 0x01;\n                    memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = msg.data[var8 * 0x20 + var6:var8 * 0x20 + var6 + 0x20];\n                    memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = 0x00;\n                    var temp16 = memory[0x40:0x60];\n                    log(memory[temp16:temp16 + temp15 - temp16 + 0x60], [stack[-5], stack[-6]]);\n                    var2 = var2 + 0x01;\n                \n                    if (var2 >= var1) { goto label_1143; }\n                    else { goto label_1094; }\n                }\n            } else {\n            label_0FA7:\n                var3 = 0x01;\n                var4 = 0x6b;\n                var5 = 0x00;\n                var6 = arg0;\n                var7 = arg1;\n                var8 = var2 & 0xffffffff;\n            \n                if (var8 >= var7) { assert(); }\n            \n                var temp17 = var5;\n                memory[temp17:temp17 + 0x20] = msg.data[var8 * 0x20 + var6:var8 * 0x20 + var6 + 0x20];\n                var temp18 = temp17 + 0x20;\n                memory[temp18:temp18 + 0x20] = var4;\n                var temp19 = keccak256(memory[0x00:0x00 + temp18 + 0x20]);\n                storage[temp19] = !!var3 | (storage[temp19] & ~0xff);\n                var3 = arg0;\n                var4 = arg1;\n                var5 = var2 & 0xffffffff;\n            \n                if (var5 >= var4) { assert(); }\n            \n                var temp20 = memory[0x40:0x60];\n                var temp21 = var2;\n                memory[temp20:temp20 + 0x20] = temp21 + (storage[0x03] / (0x01 << 0x20) & 0xffffffff) & 0xffffffff;\n                memory[temp20 + 0x20:temp20 + 0x20 + 0x20] = block.timestamp;\n                var temp22 = memory[0x40:0x60];\n                log(memory[temp22:temp22 + temp20 - temp22 + 0x40], [0xa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196, msg.data[stack[-1] * 0x20 + stack[-3]:stack[-1] * 0x20 + stack[-3] + 0x20]]);\n                var2 = temp21 + 0x01;\n            \n                if (arg1 <= var2 & 0xffffffff) { goto label_105E; }\n                else { goto label_0FA7; }\n            }\n        } else {\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp23 + 0x04:temp23 + 0x04 + 0x20] = 0x20;\n            memory[temp23 + 0x24:temp23 + 0x24 + 0x20] = 0x15;\n            memory[temp23 + 0x44:temp23 + 0x44 + 0x20] = 0x135a59dc985d1a5bdb881a5cc8191a5cd8589b1959 << 0x5a;\n            var temp24 = memory[0x40:0x60];\n            revert(memory[temp24:temp24 + temp23 - temp24 + 0x64]);\n        }\n    }\n    \n    function updateVerifier(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n    \n        if (msg.sender == storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n            storage[0x6c] = (arg0 & (0x01 << 0xa0) - 0x01) | (storage[0x6c] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x25;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x25] = code[0x1949:0x196e];\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n        }\n    }\n    \n    function isSpentArray(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x01 << 0x20) | (var0 + var1 * 0x20 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        arg0 = var0;\n        arg1 = var1;\n        var temp6 = memory[0x40:0x60];\n        var temp7 = arg1;\n        memory[temp6:temp6 + 0x20] = temp7;\n        memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n        var1 = temp6;\n        var0 = 0x60;\n        var2 = temp7;\n    \n        if (!var2) {\n            var0 = var1;\n            var1 = 0x00;\n        \n            if (var1 >= arg1) {\n            label_1236:\n                return var0;\n            } else {\n            label_11F0:\n                var2 = 0x120a;\n                var var3 = arg0;\n                var var4 = arg1;\n                var var5 = var1;\n            \n                if (var5 >= var4) { assert(); }\n            \n                var2 = func_11FE(var3, var4, var5);\n            \n                if (!var2) {\n                label_122E:\n                    var1 = var1 + 0x01;\n                \n                    if (var1 >= arg1) { goto label_1236; }\n                    else { goto label_11F0; }\n                } else {\n                    var2 = 0x01;\n                    var3 = var0;\n                    var4 = var1;\n                \n                    if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n                \n                    memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20] = !!var2;\n                    goto label_122E;\n                }\n            }\n        } else {\n            var temp8 = var2 * 0x20;\n            memory[var1 + 0x20:var1 + 0x20 + temp8] = code[code.length:code.length + temp8];\n            var0 = var1;\n            var1 = 0x00;\n        \n            if (var1 >= arg1) { goto label_1236; }\n            else { goto label_11F0; }\n        }\n    }\n    \n    function deposit(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = storage[0x68] + 0x01;\n        storage[0x68] = arg1;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x6b;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n            var var0 = 0x00;\n            var var1 = 0x12b1;\n            var var2 = arg0;\n            var1 = func_15C5(var2);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x6b;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n            var0 = var1;\n            var1 = 0x12d4;\n            func_175C();\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = var0 & 0xffffffff;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = block.timestamp;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0xa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196, stack[-3]]);\n        \n            if (arg1 == storage[0x68]) { return; }\n        \n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x1f;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        } else {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n            var temp6 = temp5 + 0x04;\n            var temp7 = temp6 + 0x20;\n            memory[temp6:temp6 + 0x20] = temp7 - temp6;\n            memory[temp7:temp7 + 0x20] = 0x21;\n            var temp8 = temp7 + 0x20;\n            memory[temp8:temp8 + 0x21] = code[0x18e0:0x1901];\n            var temp9 = memory[0x40:0x60];\n            revert(memory[temp9:temp9 + (temp8 + 0x40) - temp9]);\n        }\n    }\n    \n    function roots(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x04;\n        var var0 = arg0;\n    \n        if (var0 < 0x64) { return storage[var0 + arg1]; }\n        else { assert(); }\n    }\n    \n    function isSpent(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x6a;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function zeros(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x02;\n        var var0 = arg0;\n    \n        if (var0 >= storage[arg1]) { assert(); }\n    \n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x20]) + var0];\n    }\n    \n    function filledSubtrees(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x01;\n        var var0 = arg0;\n    \n        if (var0 >= storage[arg1]) { assert(); }\n    \n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x20]) + var0];\n    }\n    \n    function verifier() returns (var r0) { return storage[0x6c] & (0x01 << 0xa0) - 0x01; }\n    \n    function FIELD_SIZE() returns (var r0) {\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x18c0:0x18e0];\n        r0 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n        return r0;\n    }\n    \n    function levels() returns (var r0) { return storage[0x00] & 0xffffffff; }\n    \n    function operator() returns (var r0) { return storage[0x6d] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_0DFD(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) {\n            var var1 = storage[0x03] & 0xffffffff;\n            var var2 = 0x04;\n            var var3 = var1 & 0xffffffff;\n        \n            if (var3 >= 0x64) { assert(); }\n        \n        label_0E29:\n        \n            if (arg0 == storage[var3 + var2]) {\n                var0 = 0x01;\n                goto label_0E6B;\n            } else if (var1 & 0xffffffff) {\n                var temp0 = var1 + ~0x00;\n                var1 = temp0;\n            \n                if (storage[0x03] & 0xffffffff != var1 & 0xffffffff) {\n                label_0E16:\n                    var2 = 0x04;\n                    var3 = var1 & 0xffffffff;\n                \n                    if (var3 < 0x64) { goto label_0E29; }\n                    else { assert(); }\n                } else {\n                label_0E66:\n                    var0 = 0x00;\n                \n                label_0E6B:\n                    return var0;\n                }\n            } else {\n                var1 = 0x64 + ~0x00;\n            \n                if (storage[0x03] & 0xffffffff != var1 & 0xffffffff) { goto label_0E16; }\n                else { goto label_0E66; }\n            }\n        } else {\n            var0 = 0x00;\n            goto label_0E6B;\n        }\n    }\n    \n    function finishMigration() {\n        if (msg.sender == storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n            storage[0x6d] = (storage[0x6d] & ~(0xff << 0xa0)) | (0x01 << 0xa0);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x25;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x25] = code[0x1949:0x196e];\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n        }\n    }\n    \n    function denomination() returns (var r0) { return storage[0x69]; }\n    \n    function currentRootIndex() returns (var r0) { return storage[0x03] & 0xffffffff; }\n    \n    function func_11FE(var arg0, var arg1, var arg2) returns (var r0) {\n        arg0 = msg.data[arg2 * 0x20 + arg0:arg2 * 0x20 + arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x6a;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function isMigrated() returns (var r0) { return storage[0x6d] / (0x01 << 0xa0) & 0xff; }\n    \n    function getLastRoot() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04;\n        var var2 = storage[0x03] & 0xffffffff;\n    \n        if (var2 < 0x64) { return storage[var2 + var1]; }\n        else { assert(); }\n    }\n    \n    function ROOT_HISTORY_SIZE() returns (var r0) { return 0x64; }\n    \n    function ZERO_VALUE() returns (var r0) { return 0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c; }\n    \n    function nextIndex() returns (var r0) { return storage[0x03] / (0x01 << 0x20) & 0xffffffff; }\n    \n    function func_141F(var arg0, var arg1, var arg2, var arg3) {\n        if (msg.value) {\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = 0x461bcd << 0xe5;\n            var temp24 = temp23 + 0x04;\n            var temp25 = temp24 + 0x20;\n            memory[temp24:temp24 + 0x20] = temp25 - temp24;\n            memory[temp25:temp25 + 0x20] = 0x35;\n            var temp26 = temp25 + 0x20;\n            memory[temp26:temp26 + 0x35] = code[0x196e:0x19a3];\n            var temp27 = memory[0x40:0x60];\n            revert(memory[temp27:temp27 + (temp26 + 0x40) - temp27]);\n        } else if (!arg3) {\n            var temp0 = memory[0x40:0x60];\n            var var0 = 0x00;\n            var temp1;\n            temp1, memory[temp0:temp0 + var0] = address(arg0 & (0x01 << 0xa0) - 0x01).call.gas(msg.gas).value(storage[0x69] - arg2)(memory[temp0:temp0 + var0]);\n            var var2 = returndata.length;\n            var var3 = var2;\n        \n            if (var3 == 0x00) {\n                // Error: StackRead before write???\n                var var1;\n                var0 = var1;\n            \n                if (var0) {\n                label_152F:\n                \n                    if (!arg2) {\n                    label_1143:\n                        return;\n                    } else {\n                        var temp2 = memory[0x40:0x60];\n                        var temp3;\n                        temp3, memory[temp2:temp2 + 0x00] = address(arg1 & (0x01 << 0xa0) - 0x01).call.gas(msg.gas).value(arg2)(memory[temp2:temp2 + 0x00]);\n                        var2 = returndata.length;\n                        var3 = var2;\n                    \n                        if (var3 == 0x00) {\n                            var0 = var1;\n                        \n                            if (var0) { goto label_1143; }\n                        \n                        label_158F:\n                            var temp4 = memory[0x40:0x60];\n                            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n                            var temp5 = temp4 + 0x04;\n                            var temp6 = temp5 + 0x20;\n                            memory[temp5:temp5 + 0x20] = temp6 - temp5;\n                            memory[temp6:temp6 + 0x20] = 0x23;\n                            var temp7 = temp6 + 0x20;\n                            memory[temp7:temp7 + 0x23] = code[0x1926:0x1949];\n                            var temp8 = memory[0x40:0x60];\n                            revert(memory[temp8:temp8 + (temp7 + 0x40) - temp8]);\n                        } else {\n                            var temp9 = memory[0x40:0x60];\n                            var2 = temp9;\n                            memory[0x40:0x60] = var2 + (returndata.length + 0x3f & ~0x1f);\n                            memory[var2:var2 + 0x20] = returndata.length;\n                            var temp10 = returndata.length;\n                            memory[var2 + 0x20:var2 + 0x20 + temp10] = returndata[0x00:0x00 + temp10];\n                            var0 = var1;\n                        \n                            if (var0) { goto label_1143; }\n                            else { goto label_158F; }\n                        }\n                    }\n                } else {\n                label_14F9:\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = 0x461bcd << 0xe5;\n                    var temp12 = temp11 + 0x04;\n                    var temp13 = temp12 + 0x20;\n                    memory[temp12:temp12 + 0x20] = temp13 - temp12;\n                    memory[temp13:temp13 + 0x20] = 0x25;\n                    var temp14 = temp13 + 0x20;\n                    memory[temp14:temp14 + 0x25] = code[0x1901:0x1926];\n                    var temp15 = memory[0x40:0x60];\n                    revert(memory[temp15:temp15 + (temp14 + 0x40) - temp15]);\n                }\n            } else {\n                var temp16 = memory[0x40:0x60];\n                var2 = temp16;\n                memory[0x40:0x60] = var2 + (returndata.length + 0x3f & ~0x1f);\n                memory[var2:var2 + 0x20] = returndata.length;\n                var temp17 = returndata.length;\n                memory[var2 + 0x20:var2 + 0x20 + temp17] = returndata[0x00:0x00 + temp17];\n                var0 = var1;\n            \n                if (var0) { goto label_152F; }\n                else { goto label_14F9; }\n            }\n        } else {\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0x461bcd << 0xe5;\n            var temp19 = temp18 + 0x04;\n            var temp20 = temp19 + 0x20;\n            memory[temp19:temp19 + 0x20] = temp20 - temp19;\n            memory[temp20:temp20 + 0x20] = 0x34;\n            var temp21 = temp20 + 0x20;\n            memory[temp21:temp21 + 0x34] = code[0x188c:0x18c0];\n            var temp22 = memory[0x40:0x60];\n            revert(memory[temp22:temp22 + (temp21 + 0x40) - temp22]);\n        }\n    }\n    \n    function func_15C5(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x03] / (0x01 << 0x20) & 0xffffffff;\n    \n        if (var1 != 0x02 ** (storage[var0] & 0xffffffff) & 0xffffffff) {\n            var temp0 = storage[0x03];\n            storage[0x03] = (temp0 & ~0xffffffff00000000) | ((temp0 / (0x01 << 0x20) & 0xffffffff) + 0x01 & 0xffffffff) * (0x01 << 0x20);\n            var var2 = arg0;\n            var var3 = 0x00;\n            var var4 = var3;\n            var var5 = var4;\n        \n            if (var5 & 0xffffffff >= storage[0x00] & 0xffffffff) {\n                var temp1 = (((storage[0x03] & 0xffffffff) + 0x01 & 0xffffffff) % 0x64 & 0xffffffff) | (storage[0x03] & ~0xffffffff);\n                storage[0x03] = temp1;\n                var5 = var2;\n                var var6 = 0x04;\n                var var7 = temp1 & 0xffffffff;\n            \n                if (var7 >= 0x64) { assert(); }\n            \n                storage[var7 + var6] = var5;\n                return (storage[0x03] / (0x01 << 0x20) & 0xffffffff) + ~0x00;\n            } else if (var1 & 0x01) {\n                var6 = 0x01;\n                var7 = var5 & 0xffffffff;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var3 = storage[keccak256(memory[0x00:0x20]) + var7];\n                var4 = var2;\n                var6 = 0x16e4;\n                var7 = var3;\n                var var8 = var4;\n            \n            label_0B40:\n                var var9 = 0x00;\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x18c0:0x18e0];\n                var temp3 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp2;\n            \n                if (var7 < temp3) {\n                    var temp4 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x18c0:0x18e0];\n                    var temp5 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp4;\n                \n                    if (var8 < temp5) {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = 0xf47d33b5 << 0xe0;\n                        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = var7;\n                        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x00;\n                        var var10 = var7;\n                        var var11 = 0x00;\n                        var var12 = 0x83584f83f26af4edda9cbe8c730bc87c364b28fe;\n                        var var15 = 0x40;\n                        var var16 = memory[var15:var15 + 0x20];\n                        var var13 = 0xf47d33b5;\n                        var var14 = temp6 + 0x44;\n                        var var17 = temp6 - var16 + 0x44;\n                        var var18 = var16;\n                        var var19 = var12;\n                        var var20 = !address(var19).code.length;\n                    \n                        if (var20) { revert(memory[0x00:0x00]); }\n                    \n                        var temp7;\n                        temp7, memory[var16:var16 + var15] = address(var19).delegatecall.gas(msg.gas)(memory[var18:var18 + var17]);\n                        var15 = !temp7;\n                    \n                        if (!var15) {\n                            var12 = memory[0x40:0x60];\n                            var13 = returndata.length;\n                        \n                            if (var13 < 0x40) { revert(memory[0x00:0x00]); }\n                        \n                            var temp8 = var12;\n                            var temp9 = memory[temp8:temp8 + 0x20];\n                            var10 = temp9;\n                            var11 = memory[temp8 + 0x20:temp8 + 0x20 + 0x20];\n                            var temp10 = memory[0x00:0x20];\n                            memory[0x00:0x20] = code[0x18c0:0x18e0];\n                            var12 = memory[0x00:0x20];\n                            memory[0x00:0x20] = temp10;\n                            var13 = var8;\n                            var14 = var10;\n                            // Unhandled termination\n                        } else {\n                            var temp11 = returndata.length;\n                            memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp12 = memory[0x40:0x60];\n                        memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n                        var temp13 = temp12 + 0x04;\n                        var temp14 = temp13 + 0x20;\n                        memory[temp13:temp13 + 0x20] = temp14 - temp13;\n                        memory[temp14:temp14 + 0x20] = 0x21;\n                        var temp15 = temp14 + 0x20;\n                        memory[temp15:temp15 + 0x21] = code[0x186b:0x188c];\n                        var temp16 = memory[0x40:0x60];\n                        revert(memory[temp16:temp16 + (temp15 + 0x40) - temp16]);\n                    }\n                } else {\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n                    memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x20;\n                    memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x5f6c6566742073686f756c6420626520696e7369646520746865206669656c64;\n                    var temp18 = memory[0x40:0x60];\n                    revert(memory[temp18:temp18 + temp17 - temp18 + 0x64]);\n                }\n            } else {\n                var3 = var2;\n                var6 = 0x02;\n                var7 = var5 & 0xffffffff;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var4 = storage[keccak256(memory[0x00:0x20]) + var7];\n                var6 = var2;\n                var7 = 0x01;\n                var8 = var5 & 0xffffffff;\n            \n                if (var8 >= storage[var7]) { assert(); }\n            \n                memory[0x00:0x20] = var7;\n                storage[keccak256(memory[0x00:0x20]) + var8] = var6;\n                var6 = 0x16e4;\n                var7 = var3;\n                var8 = var4;\n                goto label_0B40;\n            }\n        } else {\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = 0x461bcd << 0xe5;\n            var temp20 = temp19 + 0x04;\n            var temp21 = temp20 + 0x20;\n            memory[temp20:temp20 + 0x20] = temp21 - temp20;\n            memory[temp21:temp21 + 0x20] = 0x2f;\n            var temp22 = temp21 + 0x20;\n            memory[temp22:temp22 + 0x2f] = code[0x1804:0x1833];\n            var temp23 = memory[0x40:0x60];\n            revert(memory[temp23:temp23 + (temp22 + 0x40) - temp23]);\n        }\n    }\n    \n    function func_175C() {\n        if (msg.value == storage[0x69]) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x38;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x38] = code[0x1833:0x186b];\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n    }\n    \n    function func_17E9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x138c;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 > var0) { return func_17F8(arg1, var0); }\n    \n        arg0 = arg1;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_17F8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        storage[temp0] = 0x00;\n        arg1 = temp0 + 0x01;\n    \n        if (arg0 <= arg1) { return arg0; }\n    \n        r0 = func_17F8(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x90eeb02b > var0) {\n            if (0x4ecf518b > var0) {\n                if (var0 == 0x06394c9b) {\n                    // Dispatch table entry for changeOperator(address)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var var2 = 0x04;\n                    var var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    changeOperator(var2, var3);\n                    stop();\n                } else if (var0 == 0x17cc915c) {\n                    // Dispatch table entry for nullifierHashes(bytes32)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0200;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = nullifierHashes(var2, var3);\n                \n                label_0200:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = !!var2;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n                } else if (var0 == 0x21a0adb6) {\n                    // Dispatch table entry for withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)\n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xe0) { revert(memory[0x00:0x00]); }\n                \n                    withdraw(var2, var3);\n                    stop();\n                } else if (var0 == 0x2b7ac3f3) {\n                    // Dispatch table entry for verifier()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02c2;\n                    var2 = verifier();\n                \n                label_02C2:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n                } else if (var0 == 0x38bf282e) {\n                    // Dispatch table entry for hashLeftRight(bytes32,bytes32)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x030e;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var temp4 = var2;\n                    var2 = msg.data[temp4:temp4 + 0x20];\n                    var3 = msg.data[temp4 + 0x20:temp4 + 0x20 + 0x20];\n                    var var4 = 0x00;\n                    var temp5 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x18c0:0x18e0];\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp5;\n                \n                    if (var2 < temp6) {\n                        var temp7 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x18c0:0x18e0];\n                        var temp8 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp7;\n                    \n                        if (var3 < temp8) {\n                            var temp9 = memory[0x40:0x60];\n                            memory[temp9:temp9 + 0x20] = 0xf47d33b5 << 0xe0;\n                            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = var2;\n                            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x00;\n                            var var5 = var2;\n                            var var6 = 0x00;\n                            var var7 = 0x83584f83f26af4edda9cbe8c730bc87c364b28fe;\n                            var var10 = 0x40;\n                            var var11 = memory[var10:var10 + 0x20];\n                            var var8 = 0xf47d33b5;\n                            var var9 = temp9 + 0x44;\n                            var var12 = temp9 - var11 + 0x44;\n                            var var13 = var11;\n                            var var14 = var7;\n                            var var15 = !address(var14).code.length;\n                        \n                            if (var15) { revert(memory[0x00:0x00]); }\n                        \n                            var temp10;\n                            temp10, memory[var11:var11 + var10] = address(var14).delegatecall.gas(msg.gas)(memory[var13:var13 + var12]);\n                            var10 = !temp10;\n                        \n                            if (!var10) {\n                                var7 = memory[0x40:0x60];\n                                var8 = returndata.length;\n                            \n                                if (var8 < 0x40) { revert(memory[0x00:0x00]); }\n                            \n                                var temp11 = var7;\n                                var temp12 = memory[temp11:temp11 + 0x20];\n                                var5 = temp12;\n                                var6 = memory[temp11 + 0x20:temp11 + 0x20 + 0x20];\n                                var temp13 = memory[0x00:0x20];\n                                memory[0x00:0x20] = code[0x18c0:0x18e0];\n                                var7 = memory[0x00:0x20];\n                                memory[0x00:0x20] = temp13;\n                                var8 = var3;\n                                var9 = var5;\n                                // Unhandled termination\n                            } else {\n                                var temp14 = returndata.length;\n                                memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                            var temp15 = memory[0x40:0x60];\n                            memory[temp15:temp15 + 0x20] = 0x461bcd << 0xe5;\n                            var temp16 = temp15 + 0x04;\n                            var temp17 = temp16 + 0x20;\n                            memory[temp16:temp16 + 0x20] = temp17 - temp16;\n                            memory[temp17:temp17 + 0x20] = 0x21;\n                            var temp18 = temp17 + 0x20;\n                            memory[temp18:temp18 + 0x21] = code[0x186b:0x188c];\n                            var temp19 = memory[0x40:0x60];\n                            revert(memory[temp19:temp19 + (temp18 + 0x40) - temp19]);\n                        }\n                    } else {\n                        var temp20 = memory[0x40:0x60];\n                        memory[temp20:temp20 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n                        memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x20;\n                        memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x5f6c6566742073686f756c6420626520696e7369646520746865206669656c64;\n                        var temp21 = memory[0x40:0x60];\n                        revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n                    }\n                } else if (var0 == 0x414a37ba) {\n                    // Dispatch table entry for FIELD_SIZE()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x030e;\n                    var2 = FIELD_SIZE();\n                \n                label_030E:\n                    var temp22 = memory[0x40:0x60];\n                    memory[temp22:temp22 + 0x20] = var2;\n                    var temp23 = memory[0x40:0x60];\n                    return memory[temp23:temp23 + temp22 - temp23 + 0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0x6d9833e3 > var0) {\n                if (var0 == 0x4ecf518b) {\n                    // Dispatch table entry for levels()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x034a;\n                    var2 = levels();\n                \n                label_034A:\n                    var temp24 = memory[0x40:0x60];\n                    memory[temp24:temp24 + 0x20] = var2 & 0xffffffff;\n                    var temp25 = memory[0x40:0x60];\n                    return memory[temp25:temp25 + temp24 - temp25 + 0x20];\n                } else if (var0 == 0x570ca735) {\n                    // Dispatch table entry for operator()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02c2;\n                    var2 = operator();\n                    goto label_02C2;\n                } else if (var0 == 0x6ba355aa) {\n                    // Dispatch table entry for 0x6ba355aa (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var temp26 = var2;\n                    var temp27 = temp26 + var3;\n                    var3 = temp26;\n                    var2 = temp27;\n                    var4 = var3 + 0x20;\n                    var5 = msg.data[var3:var3 + 0x20];\n                \n                    if (var5 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp28 = var3 + var5;\n                    var5 = temp28;\n                \n                    if (var5 + 0x20 > var2) { revert(memory[0x00:0x00]); }\n                \n                    var temp29 = var5;\n                    var temp30 = msg.data[temp29:temp29 + 0x20];\n                    var5 = temp30;\n                    var temp31 = var4;\n                    var4 = temp29 + 0x20;\n                    var6 = temp31;\n                \n                    if ((var5 > 0x01 << 0x20) | (var4 + var5 * 0x20 > var2)) { revert(memory[0x00:0x00]); }\n                \n                    var2 = var4;\n                    var3 = var5;\n                    var4 = msg.data[var6:var6 + 0x20];\n                \n                    if (msg.sender != storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n                        var temp43 = memory[0x40:0x60];\n                        memory[temp43:temp43 + 0x20] = 0x461bcd << 0xe5;\n                        var temp44 = temp43 + 0x04;\n                        var temp45 = temp44 + 0x20;\n                        memory[temp44:temp44 + 0x20] = temp45 - temp44;\n                        memory[temp45:temp45 + 0x20] = 0x25;\n                        var temp46 = temp45 + 0x20;\n                        memory[temp46:temp46 + 0x25] = code[0x1949:0x196e];\n                        var temp47 = memory[0x40:0x60];\n                        revert(memory[temp47:temp47 + (temp46 + 0x40) - temp47]);\n                    } else if (!(storage[0x6d] / (0x01 << 0xa0) & 0xff)) {\n                        var5 = 0x0df5;\n                        var6 = 0x01;\n                        var7 = var2;\n                        var8 = var3;\n                        var temp32 = var6;\n                        var temp33 = storage[temp32];\n                        var temp34 = var8;\n                        storage[temp32] = temp34;\n                        memory[0x00:0x20] = temp32;\n                        var9 = keccak256(memory[0x00:0x20]);\n                        var temp35 = var7;\n                        var7 = var9 + temp33;\n                        var10 = temp35;\n                    \n                        if (!temp34) {\n                        label_17D9:\n                            var temp36 = var7;\n                            var7 = 0x17e5;\n                            var8 = temp36;\n                            var7 = func_17E9(var8, var9);\n                            var5 = var6;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var temp37 = var8;\n                            var temp38 = var10;\n                            var8 = temp38;\n                            var10 = var8 + temp37 * 0x20;\n                        \n                            if (var10 <= var8) { goto label_17D9; }\n                        \n                        label_17C7:\n                            var temp39 = var8;\n                            var temp40 = var9;\n                            storage[temp40] = msg.data[temp39:temp39 + 0x20];\n                            var8 = temp39 + 0x20;\n                            var9 = temp40 + 0x01;\n                            var10 = var10;\n                        \n                            if (var10 <= var8) { goto label_17D9; }\n                            else { goto label_17C7; }\n                        }\n                    } else {\n                        var temp41 = memory[0x40:0x60];\n                        memory[temp41:temp41 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp41 + 0x04:temp41 + 0x04 + 0x20] = 0x20;\n                        memory[temp41 + 0x24:temp41 + 0x24 + 0x20] = 0x10;\n                        memory[temp41 + 0x44:temp41 + 0x44 + 0x20] = 0x185b1c9958591e481b5a59dc985d1959 << 0x82;\n                        var temp42 = memory[0x40:0x60];\n                        revert(memory[temp42:temp42 + temp41 - temp42 + 0x64]);\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x6d9833e3) {\n                // Dispatch table entry for isKnownRoot(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0200;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = isKnownRoot(var2, var3);\n                goto label_0200;\n            } else if (var0 == 0x839df945) {\n                // Dispatch table entry for commitments(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0200;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = commitments(var2, var3);\n                goto label_0200;\n            } else if (var0 == 0x88d761f2) {\n                // Dispatch table entry for finishMigration()\n                var1 = 0x01d4;\n                finishMigration();\n                stop();\n            } else if (var0 == 0x8bca6d16) {\n                // Dispatch table entry for denomination()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030e;\n                var2 = denomination();\n                goto label_030E;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xc2b40ae4 > var0) {\n            if (0x9fa12d0b > var0) {\n                if (var0 == 0x90eeb02b) {\n                    // Dispatch table entry for currentRootIndex()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x034a;\n                    var2 = currentRootIndex();\n                    goto label_034A;\n                } else if (var0 == 0x916710aa) {\n                    // Dispatch table entry for 0x916710aa (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    func_049C(var2, var3);\n                    stop();\n                } else if (var0 == 0x97fc007c) {\n                    // Dispatch table entry for updateVerifier(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    updateVerifier(var2, var3);\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x9fa12d0b) {\n                // Dispatch table entry for isSpentArray(bytes32[])\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05f2;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = isSpentArray(var2, var3);\n                var temp48 = memory[0x40:0x60];\n                memory[temp48:temp48 + 0x20] = 0x20;\n                var temp49 = var1;\n                memory[temp48 + 0x20:temp48 + 0x20 + 0x20] = memory[temp49:temp49 + 0x20];\n                var2 = temp48;\n                var3 = var2;\n                var4 = var3 + 0x40;\n                var5 = temp49 + 0x20;\n                var6 = memory[temp49:temp49 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_062E:\n                    var temp50 = memory[0x40:0x60];\n                    return memory[temp50:temp50 + (var6 + var4) - temp50];\n                } else {\n                label_061F:\n                    var temp51 = var10;\n                    memory[temp51 + var8:temp51 + var8 + 0x20] = memory[temp51 + var9:temp51 + var9 + 0x20];\n                    var10 = temp51 + 0x20;\n                \n                    if (var10 >= var7) { goto label_062E; }\n                    else { goto label_061F; }\n                }\n            } else if (var0 == 0xb06faf62) {\n                // Dispatch table entry for isMigrated()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0200;\n                var2 = isMigrated();\n                goto label_0200;\n            } else if (var0 == 0xb214faa5) {\n                // Dispatch table entry for deposit(bytes32)\n                var1 = 0x01d4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                deposit(var2, var3);\n                stop();\n            } else if (var0 == 0xba70f757) {\n                // Dispatch table entry for getLastRoot()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030e;\n                var1 = getLastRoot();\n                goto label_030E;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xe8295588 > var0) {\n            if (var0 == 0xc2b40ae4) {\n                // Dispatch table entry for roots(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030e;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = roots(var2, var3);\n                goto label_030E;\n            } else if (var0 == 0xcd87a3b4) {\n                // Dispatch table entry for ROOT_HISTORY_SIZE()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x034a;\n                var2 = ROOT_HISTORY_SIZE();\n                goto label_034A;\n            } else if (var0 == 0xe5285dcc) {\n                // Dispatch table entry for isSpent(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0200;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = isSpent(var2, var3);\n                goto label_0200;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xe8295588) {\n            // Dispatch table entry for zeros(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x030e;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = zeros(var2, var3);\n            goto label_030E;\n        } else if (var0 == 0xec732959) {\n            // Dispatch table entry for ZERO_VALUE()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x030e;\n            var2 = ZERO_VALUE();\n            goto label_030E;\n        } else if (var0 == 0xf178e47c) {\n            // Dispatch table entry for filledSubtrees(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x030e;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = filledSubtrees(var2, var3);\n            goto label_030E;\n        } else if (var0 == 0xfc7e9c6f) {\n            // Dispatch table entry for nextIndex()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x034a;\n            var2 = nextIndex();\n            goto label_034A;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function changeOperator(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n    \n        if (msg.sender == storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n            storage[0x6d] = (arg0 & (0x01 << 0xa0) - 0x01) | (storage[0x6d] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x25;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x25] = code[0x1949:0x196e];\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n        }\n    }\n    \n    function nullifierHashes(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x6a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function withdraw(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x01 << 0x20) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        arg0 = var0;\n        arg1 = var1;\n        var0 = msg.data[temp6:temp6 + 0x20];\n        var1 = msg.data[temp6 + 0x20:temp6 + 0x20 + 0x20];\n        var temp7 = (0x01 << 0xa0) - 0x01;\n        var2 = temp7 & msg.data[temp6 + 0x40:temp6 + 0x40 + 0x20];\n        var var3 = temp7 & msg.data[temp6 + 0x60:temp6 + 0x60 + 0x20];\n        var var4 = msg.data[temp6 + 0x80:temp6 + 0x80 + 0x20];\n        var var5 = msg.data[temp6 + 0xa0:temp6 + 0xa0 + 0x20];\n        var var6 = storage[0x68] + 0x01;\n        storage[0x68] = var6;\n    \n        if (var4 <= storage[0x69]) {\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x6a;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n                var var7 = 0x08bf;\n                var var8 = var0;\n                var7 = func_0DFD(var8);\n            \n                if (var7) {\n                    var temp8 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp8 + 0xc0;\n                    memory[temp8:temp8 + 0x20] = var0;\n                    memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = var1;\n                    var temp9 = (0x01 << 0xa0) - 0x01;\n                    memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = temp9 & var2;\n                    memory[temp8 + 0x60:temp8 + 0x60 + 0x20] = temp9 & var3;\n                    memory[temp8 + 0x80:temp8 + 0x80 + 0x20] = var4;\n                    memory[temp8 + 0xa0:temp8 + 0xa0 + 0x20] = var5;\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = 0x695ef6f9 << 0xe0;\n                    var7 = storage[0x6c] & temp9;\n                    var8 = 0x695ef6f9;\n                    var var9 = arg0;\n                    var var10 = arg1;\n                    var var11 = temp8;\n                    var var12 = temp10 + 0x04;\n                    var var13 = var12;\n                    var var14 = temp10 + 0x24;\n                    var var15 = var11;\n                    var var16 = 0xc0;\n                    var var17 = var16;\n                    var var18 = var14;\n                    var var19 = var15;\n                    var var20 = 0x00;\n                \n                    if (var20 >= var17) {\n                    label_0995:\n                        var temp11 = var16 + var14;\n                        memory[var13:var13 + 0x20] = temp11 - var12;\n                        var temp12 = var10;\n                        memory[temp11:temp11 + 0x20] = temp12;\n                        var temp13 = temp11 + 0x20;\n                        memory[temp13:temp13 + temp12] = msg.data[var9:var9 + temp12];\n                        memory[temp13 + temp12:temp13 + temp12 + 0x20] = 0x00;\n                        var9 = temp13 + (temp12 + 0x1f & ~0x1f);\n                        var10 = 0x20;\n                        var11 = memory[0x40:0x60];\n                        var12 = var9 - var11;\n                        var13 = var11;\n                        var14 = 0x00;\n                        var15 = var7;\n                        var16 = !address(var15).code.length;\n                    \n                        if (var16) { revert(memory[0x00:0x00]); }\n                    \n                        var temp14;\n                        temp14, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas).value(var14)(memory[var13:var13 + var12]);\n                        var10 = !temp14;\n                    \n                        if (!var10) {\n                            var7 = memory[0x40:0x60];\n                            var8 = returndata.length;\n                        \n                            if (var8 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            if (memory[var7:var7 + 0x20]) {\n                                memory[0x00:0x20] = var1;\n                                memory[0x20:0x40] = 0x6a;\n                                var temp15 = keccak256(memory[0x00:0x40]);\n                                storage[temp15] = (storage[temp15] & ~0xff) | 0x01;\n                                var7 = 0x0a82;\n                                var8 = var2;\n                                var9 = var3;\n                                var10 = var4;\n                                var11 = var5;\n                                func_141F(var8, var9, var10, var11);\n                                var temp16 = memory[0x40:0x60];\n                                var temp17 = (0x01 << 0xa0) - 0x01;\n                                memory[temp16:temp16 + 0x20] = temp17 & var2;\n                                memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = var1;\n                                memory[temp16 + 0x40:temp16 + 0x40 + 0x20] = var4;\n                                var temp18 = memory[0x40:0x60];\n                                log(memory[temp18:temp18 + temp16 - temp18 + 0x60], [0xe9e508bad6d4c3227e881ca19068f099da81b5164dd6d62b2eaf1e8bc6c34931, stack[-4] & (0x01 << 0xa0) - 0x01]);\n                            \n                                if (var6 == storage[0x68]) { return; }\n                            \n                                var temp19 = memory[0x40:0x60];\n                                memory[temp19:temp19 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp19 + 0x04:temp19 + 0x04 + 0x20] = 0x20;\n                                memory[temp19 + 0x24:temp19 + 0x24 + 0x20] = 0x1f;\n                                memory[temp19 + 0x44:temp19 + 0x44 + 0x20] = 0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00;\n                                var temp20 = memory[0x40:0x60];\n                                revert(memory[temp20:temp20 + temp19 - temp20 + 0x64]);\n                            } else {\n                                var temp21 = memory[0x40:0x60];\n                                memory[temp21:temp21 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp21 + 0x04:temp21 + 0x04 + 0x20] = 0x20;\n                                memory[temp21 + 0x24:temp21 + 0x24 + 0x20] = 0x16;\n                                memory[temp21 + 0x44:temp21 + 0x44 + 0x20] = 0x24b73b30b634b2103bb4ba34323930bb90383937b7b3 << 0x51;\n                                var temp22 = memory[0x40:0x60];\n                                revert(memory[temp22:temp22 + temp21 - temp22 + 0x64]);\n                            }\n                        } else {\n                            var temp23 = returndata.length;\n                            memory[0x00:0x00 + temp23] = returndata[0x00:0x00 + temp23];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                    label_0986:\n                        var temp24 = var20;\n                        memory[temp24 + var18:temp24 + var18 + 0x20] = memory[temp24 + var19:temp24 + var19 + 0x20];\n                        var20 = temp24 + 0x20;\n                    \n                        if (var20 >= var17) { goto label_0995; }\n                        else { goto label_0986; }\n                    }\n                } else {\n                    var temp25 = memory[0x40:0x60];\n                    memory[temp25:temp25 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n                    memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x1c;\n                    memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = 0x43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f7400000000;\n                    var temp26 = memory[0x40:0x60];\n                    revert(memory[temp26:temp26 + temp25 - temp26 + 0x64]);\n                }\n            } else {\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp27 + 0x04:temp27 + 0x04 + 0x20] = 0x20;\n                memory[temp27 + 0x24:temp27 + 0x24 + 0x20] = 0x1f;\n                memory[temp27 + 0x44:temp27 + 0x44 + 0x20] = 0x546865206e6f746520686173206265656e20616c7265616479207370656e7400;\n                var temp28 = memory[0x40:0x60];\n                revert(memory[temp28:temp28 + temp27 - temp28 + 0x64]);\n            }\n        } else {\n            var temp29 = memory[0x40:0x60];\n            memory[temp29:temp29 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = 0x20;\n            memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = 0x1a;\n            memory[temp29 + 0x44:temp29 + 0x44 + 0x20] = 0x4665652065786365656473207472616e736665722076616c7565000000000000;\n            var temp30 = memory[0x40:0x60];\n            revert(memory[temp30:temp30 + temp29 - temp30 + 0x64]);\n        }\n    }\n    \n    function isKnownRoot(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_0DFD(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function commitments(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x6b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_049C(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x01 << 0x20) | (var0 + var1 * 0x20 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        var temp6 = arg0;\n        arg0 = var0;\n        var temp7 = arg1;\n        arg1 = var1;\n        var1 = temp7;\n        var0 = temp6;\n        var2 = temp5 + 0x20;\n        var var3 = msg.data[temp5:temp5 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = var1 + var3;\n        var3 = temp8;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = var3;\n        var temp10 = msg.data[temp9:temp9 + 0x20];\n        var3 = temp10;\n        var var4 = var2;\n        var2 = temp9 + 0x20;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 * 0x20 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var0 = var2;\n        var1 = var3;\n    \n        if (msg.sender != storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = 0x461bcd << 0xe5;\n            var temp26 = temp25 + 0x04;\n            var temp27 = temp26 + 0x20;\n            memory[temp26:temp26 + 0x20] = temp27 - temp26;\n            memory[temp27:temp27 + 0x20] = 0x25;\n            var temp28 = temp27 + 0x20;\n            memory[temp28:temp28 + 0x25] = code[0x1949:0x196e];\n            var temp29 = memory[0x40:0x60];\n            revert(memory[temp29:temp29 + (temp28 + 0x40) - temp29]);\n        } else if (!(storage[0x6d] / (0x01 << 0xa0) & 0xff)) {\n            var2 = 0x00;\n        \n            if (arg1 <= var2 & 0xffffffff) {\n            label_105E:\n                var temp11 = storage[0x03];\n                storage[0x03] = (temp11 & ~0xffffffff00000000) | (arg1 + (temp11 / (0x01 << 0x20) & 0xffffffff) & 0xffffffff) * (0x01 << 0x20);\n                var2 = 0x00;\n            \n                if (var2 >= var1) {\n                label_1143:\n                    return;\n                } else {\n                label_1094:\n                    var3 = 0x01;\n                    var4 = 0x6a;\n                    var var5 = 0x00;\n                    var var6 = var0;\n                    var var7 = var1;\n                    var var8 = var2;\n                \n                    if (var8 >= var7) { assert(); }\n                \n                    var temp12 = var5;\n                    memory[temp12:temp12 + 0x20] = msg.data[var8 * 0x20 + var6:var8 * 0x20 + var6 + 0x20];\n                    var temp13 = temp12 + 0x20;\n                    memory[temp13:temp13 + 0x20] = var4;\n                    var temp14 = keccak256(memory[0x00:0x00 + temp13 + 0x20]);\n                    storage[temp14] = !!var3 | (storage[temp14] & ~0xff);\n                    var3 = (0x01 << 0xa0) - 0x01 & 0x00;\n                    var4 = 0xe9e508bad6d4c3227e881ca19068f099da81b5164dd6d62b2eaf1e8bc6c34931;\n                    var5 = 0x00;\n                    var6 = var0;\n                    var7 = var1;\n                    var8 = var2;\n                \n                    if (var8 >= var7) { assert(); }\n                \n                    var temp15 = memory[0x40:0x60];\n                    memory[temp15:temp15 + 0x20] = var5 & (0x01 << 0xa0) - 0x01;\n                    memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = msg.data[var8 * 0x20 + var6:var8 * 0x20 + var6 + 0x20];\n                    memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = 0x00;\n                    var temp16 = memory[0x40:0x60];\n                    log(memory[temp16:temp16 + temp15 - temp16 + 0x60], [stack[-5], stack[-6]]);\n                    var2 = var2 + 0x01;\n                \n                    if (var2 >= var1) { goto label_1143; }\n                    else { goto label_1094; }\n                }\n            } else {\n            label_0FA7:\n                var3 = 0x01;\n                var4 = 0x6b;\n                var5 = 0x00;\n                var6 = arg0;\n                var7 = arg1;\n                var8 = var2 & 0xffffffff;\n            \n                if (var8 >= var7) { assert(); }\n            \n                var temp17 = var5;\n                memory[temp17:temp17 + 0x20] = msg.data[var8 * 0x20 + var6:var8 * 0x20 + var6 + 0x20];\n                var temp18 = temp17 + 0x20;\n                memory[temp18:temp18 + 0x20] = var4;\n                var temp19 = keccak256(memory[0x00:0x00 + temp18 + 0x20]);\n                storage[temp19] = !!var3 | (storage[temp19] & ~0xff);\n                var3 = arg0;\n                var4 = arg1;\n                var5 = var2 & 0xffffffff;\n            \n                if (var5 >= var4) { assert(); }\n            \n                var temp20 = memory[0x40:0x60];\n                var temp21 = var2;\n                memory[temp20:temp20 + 0x20] = temp21 + (storage[0x03] / (0x01 << 0x20) & 0xffffffff) & 0xffffffff;\n                memory[temp20 + 0x20:temp20 + 0x20 + 0x20] = block.timestamp;\n                var temp22 = memory[0x40:0x60];\n                log(memory[temp22:temp22 + temp20 - temp22 + 0x40], [0xa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196, msg.data[stack[-1] * 0x20 + stack[-3]:stack[-1] * 0x20 + stack[-3] + 0x20]]);\n                var2 = temp21 + 0x01;\n            \n                if (arg1 <= var2 & 0xffffffff) { goto label_105E; }\n                else { goto label_0FA7; }\n            }\n        } else {\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp23 + 0x04:temp23 + 0x04 + 0x20] = 0x20;\n            memory[temp23 + 0x24:temp23 + 0x24 + 0x20] = 0x15;\n            memory[temp23 + 0x44:temp23 + 0x44 + 0x20] = 0x135a59dc985d1a5bdb881a5cc8191a5cd8589b1959 << 0x5a;\n            var temp24 = memory[0x40:0x60];\n            revert(memory[temp24:temp24 + temp23 - temp24 + 0x64]);\n        }\n    }\n    \n    function updateVerifier(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n    \n        if (msg.sender == storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n            storage[0x6c] = (arg0 & (0x01 << 0xa0) - 0x01) | (storage[0x6c] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x25;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x25] = code[0x1949:0x196e];\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n        }\n    }\n    \n    function isSpentArray(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x01 << 0x20) | (var0 + var1 * 0x20 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        arg0 = var0;\n        arg1 = var1;\n        var temp6 = memory[0x40:0x60];\n        var temp7 = arg1;\n        memory[temp6:temp6 + 0x20] = temp7;\n        memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n        var1 = temp6;\n        var0 = 0x60;\n        var2 = temp7;\n    \n        if (!var2) {\n            var0 = var1;\n            var1 = 0x00;\n        \n            if (var1 >= arg1) {\n            label_1236:\n                return var0;\n            } else {\n            label_11F0:\n                var2 = 0x120a;\n                var var3 = arg0;\n                var var4 = arg1;\n                var var5 = var1;\n            \n                if (var5 >= var4) { assert(); }\n            \n                var2 = func_11FE(var3, var4, var5);\n            \n                if (!var2) {\n                label_122E:\n                    var1 = var1 + 0x01;\n                \n                    if (var1 >= arg1) { goto label_1236; }\n                    else { goto label_11F0; }\n                } else {\n                    var2 = 0x01;\n                    var3 = var0;\n                    var4 = var1;\n                \n                    if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n                \n                    memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20] = !!var2;\n                    goto label_122E;\n                }\n            }\n        } else {\n            var temp8 = var2 * 0x20;\n            memory[var1 + 0x20:var1 + 0x20 + temp8] = code[code.length:code.length + temp8];\n            var0 = var1;\n            var1 = 0x00;\n        \n            if (var1 >= arg1) { goto label_1236; }\n            else { goto label_11F0; }\n        }\n    }\n    \n    function deposit(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = storage[0x68] + 0x01;\n        storage[0x68] = arg1;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x6b;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n            var var0 = 0x00;\n            var var1 = 0x12b1;\n            var var2 = arg0;\n            var1 = func_15C5(var2);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x6b;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n            var0 = var1;\n            var1 = 0x12d4;\n            func_175C();\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = var0 & 0xffffffff;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = block.timestamp;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0xa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196, stack[-3]]);\n        \n            if (arg1 == storage[0x68]) { return; }\n        \n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x1f;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        } else {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n            var temp6 = temp5 + 0x04;\n            var temp7 = temp6 + 0x20;\n            memory[temp6:temp6 + 0x20] = temp7 - temp6;\n            memory[temp7:temp7 + 0x20] = 0x21;\n            var temp8 = temp7 + 0x20;\n            memory[temp8:temp8 + 0x21] = code[0x18e0:0x1901];\n            var temp9 = memory[0x40:0x60];\n            revert(memory[temp9:temp9 + (temp8 + 0x40) - temp9]);\n        }\n    }\n    \n    function roots(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x04;\n        var var0 = arg0;\n    \n        if (var0 < 0x64) { return storage[var0 + arg1]; }\n        else { assert(); }\n    }\n    \n    function isSpent(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x6a;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function zeros(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x02;\n        var var0 = arg0;\n    \n        if (var0 >= storage[arg1]) { assert(); }\n    \n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x20]) + var0];\n    }\n    \n    function filledSubtrees(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x01;\n        var var0 = arg0;\n    \n        if (var0 >= storage[arg1]) { assert(); }\n    \n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x20]) + var0];\n    }\n    \n    function verifier() returns (var r0) { return storage[0x6c] & (0x01 << 0xa0) - 0x01; }\n    \n    function FIELD_SIZE() returns (var r0) {\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x18c0:0x18e0];\n        r0 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n        return r0;\n    }\n    \n    function levels() returns (var r0) { return storage[0x00] & 0xffffffff; }\n    \n    function operator() returns (var r0) { return storage[0x6d] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_0DFD(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) {\n            var var1 = storage[0x03] & 0xffffffff;\n            var var2 = 0x04;\n            var var3 = var1 & 0xffffffff;\n        \n            if (var3 >= 0x64) { assert(); }\n        \n        label_0E29:\n        \n            if (arg0 == storage[var3 + var2]) {\n                var0 = 0x01;\n                goto label_0E6B;\n            } else if (var1 & 0xffffffff) {\n                var temp0 = var1 + ~0x00;\n                var1 = temp0;\n            \n                if (storage[0x03] & 0xffffffff != var1 & 0xffffffff) {\n                label_0E16:\n                    var2 = 0x04;\n                    var3 = var1 & 0xffffffff;\n                \n                    if (var3 < 0x64) { goto label_0E29; }\n                    else { assert(); }\n                } else {\n                label_0E66:\n                    var0 = 0x00;\n                \n                label_0E6B:\n                    return var0;\n                }\n            } else {\n                var1 = 0x64 + ~0x00;\n            \n                if (storage[0x03] & 0xffffffff != var1 & 0xffffffff) { goto label_0E16; }\n                else { goto label_0E66; }\n            }\n        } else {\n            var0 = 0x00;\n            goto label_0E6B;\n        }\n    }\n    \n    function finishMigration() {\n        if (msg.sender == storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n            storage[0x6d] = (storage[0x6d] & ~(0xff << 0xa0)) | (0x01 << 0xa0);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x25;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x25] = code[0x1949:0x196e];\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n        }\n    }\n    \n    function denomination() returns (var r0) { return storage[0x69]; }\n    \n    function currentRootIndex() returns (var r0) { return storage[0x03] & 0xffffffff; }\n    \n    function func_11FE(var arg0, var arg1, var arg2) returns (var r0) {\n        arg0 = msg.data[arg2 * 0x20 + arg0:arg2 * 0x20 + arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x6a;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function isMigrated() returns (var r0) { return storage[0x6d] / (0x01 << 0xa0) & 0xff; }\n    \n    function getLastRoot() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04;\n        var var2 = storage[0x03] & 0xffffffff;\n    \n        if (var2 < 0x64) { return storage[var2 + var1]; }\n        else { assert(); }\n    }\n    \n    function ROOT_HISTORY_SIZE() returns (var r0) { return 0x64; }\n    \n    function ZERO_VALUE() returns (var r0) { return 0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c; }\n    \n    function nextIndex() returns (var r0) { return storage[0x03] / (0x01 << 0x20) & 0xffffffff; }\n    \n    function func_141F(var arg0, var arg1, var arg2, var arg3) {\n        if (msg.value) {\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = 0x461bcd << 0xe5;\n            var temp24 = temp23 + 0x04;\n            var temp25 = temp24 + 0x20;\n            memory[temp24:temp24 + 0x20] = temp25 - temp24;\n            memory[temp25:temp25 + 0x20] = 0x35;\n            var temp26 = temp25 + 0x20;\n            memory[temp26:temp26 + 0x35] = code[0x196e:0x19a3];\n            var temp27 = memory[0x40:0x60];\n            revert(memory[temp27:temp27 + (temp26 + 0x40) - temp27]);\n        } else if (!arg3) {\n            var temp0 = memory[0x40:0x60];\n            var var0 = 0x00;\n            var temp1;\n            temp1, memory[temp0:temp0 + var0] = address(arg0 & (0x01 << 0xa0) - 0x01).call.gas(msg.gas).value(storage[0x69] - arg2)(memory[temp0:temp0 + var0]);\n            var var2 = returndata.length;\n            var var3 = var2;\n        \n            if (var3 == 0x00) {\n                // Error: StackRead before write???\n                var var1;\n                var0 = var1;\n            \n                if (var0) {\n                label_152F:\n                \n                    if (!arg2) {\n                    label_1143:\n                        return;\n                    } else {\n                        var temp2 = memory[0x40:0x60];\n                        var temp3;\n                        temp3, memory[temp2:temp2 + 0x00] = address(arg1 & (0x01 << 0xa0) - 0x01).call.gas(msg.gas).value(arg2)(memory[temp2:temp2 + 0x00]);\n                        var2 = returndata.length;\n                        var3 = var2;\n                    \n                        if (var3 == 0x00) {\n                            var0 = var1;\n                        \n                            if (var0) { goto label_1143; }\n                        \n                        label_158F:\n                            var temp4 = memory[0x40:0x60];\n                            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n                            var temp5 = temp4 + 0x04;\n                            var temp6 = temp5 + 0x20;\n                            memory[temp5:temp5 + 0x20] = temp6 - temp5;\n                            memory[temp6:temp6 + 0x20] = 0x23;\n                            var temp7 = temp6 + 0x20;\n                            memory[temp7:temp7 + 0x23] = code[0x1926:0x1949];\n                            var temp8 = memory[0x40:0x60];\n                            revert(memory[temp8:temp8 + (temp7 + 0x40) - temp8]);\n                        } else {\n                            var temp9 = memory[0x40:0x60];\n                            var2 = temp9;\n                            memory[0x40:0x60] = var2 + (returndata.length + 0x3f & ~0x1f);\n                            memory[var2:var2 + 0x20] = returndata.length;\n                            var temp10 = returndata.length;\n                            memory[var2 + 0x20:var2 + 0x20 + temp10] = returndata[0x00:0x00 + temp10];\n                            var0 = var1;\n                        \n                            if (var0) { goto label_1143; }\n                            else { goto label_158F; }\n                        }\n                    }\n                } else {\n                label_14F9:\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = 0x461bcd << 0xe5;\n                    var temp12 = temp11 + 0x04;\n                    var temp13 = temp12 + 0x20;\n                    memory[temp12:temp12 + 0x20] = temp13 - temp12;\n                    memory[temp13:temp13 + 0x20] = 0x25;\n                    var temp14 = temp13 + 0x20;\n                    memory[temp14:temp14 + 0x25] = code[0x1901:0x1926];\n                    var temp15 = memory[0x40:0x60];\n                    revert(memory[temp15:temp15 + (temp14 + 0x40) - temp15]);\n                }\n            } else {\n                var temp16 = memory[0x40:0x60];\n                var2 = temp16;\n                memory[0x40:0x60] = var2 + (returndata.length + 0x3f & ~0x1f);\n                memory[var2:var2 + 0x20] = returndata.length;\n                var temp17 = returndata.length;\n                memory[var2 + 0x20:var2 + 0x20 + temp17] = returndata[0x00:0x00 + temp17];\n                var0 = var1;\n            \n                if (var0) { goto label_152F; }\n                else { goto label_14F9; }\n            }\n        } else {\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0x461bcd << 0xe5;\n            var temp19 = temp18 + 0x04;\n            var temp20 = temp19 + 0x20;\n            memory[temp19:temp19 + 0x20] = temp20 - temp19;\n            memory[temp20:temp20 + 0x20] = 0x34;\n            var temp21 = temp20 + 0x20;\n            memory[temp21:temp21 + 0x34] = code[0x188c:0x18c0];\n            var temp22 = memory[0x40:0x60];\n            revert(memory[temp22:temp22 + (temp21 + 0x40) - temp22]);\n        }\n    }\n    \n    function func_15C5(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x03] / (0x01 << 0x20) & 0xffffffff;\n    \n        if (var1 != 0x02 ** (storage[var0] & 0xffffffff) & 0xffffffff) {\n            var temp0 = storage[0x03];\n            storage[0x03] = (temp0 & ~0xffffffff00000000) | ((temp0 / (0x01 << 0x20) & 0xffffffff) + 0x01 & 0xffffffff) * (0x01 << 0x20);\n            var var2 = arg0;\n            var var3 = 0x00;\n            var var4 = var3;\n            var var5 = var4;\n        \n            if (var5 & 0xffffffff >= storage[0x00] & 0xffffffff) {\n                var temp1 = (((storage[0x03] & 0xffffffff) + 0x01 & 0xffffffff) % 0x64 & 0xffffffff) | (storage[0x03] & ~0xffffffff);\n                storage[0x03] = temp1;\n                var5 = var2;\n                var var6 = 0x04;\n                var var7 = temp1 & 0xffffffff;\n            \n                if (var7 >= 0x64) { assert(); }\n            \n                storage[var7 + var6] = var5;\n                return (storage[0x03] / (0x01 << 0x20) & 0xffffffff) + ~0x00;\n            } else if (var1 & 0x01) {\n                var6 = 0x01;\n                var7 = var5 & 0xffffffff;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var3 = storage[keccak256(memory[0x00:0x20]) + var7];\n                var4 = var2;\n                var6 = 0x16e4;\n                var7 = var3;\n                var var8 = var4;\n            \n            label_0B40:\n                var var9 = 0x00;\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x18c0:0x18e0];\n                var temp3 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp2;\n            \n                if (var7 < temp3) {\n                    var temp4 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x18c0:0x18e0];\n                    var temp5 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp4;\n                \n                    if (var8 < temp5) {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = 0xf47d33b5 << 0xe0;\n                        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = var7;\n                        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x00;\n                        var var10 = var7;\n                        var var11 = 0x00;\n                        var var12 = 0x83584f83f26af4edda9cbe8c730bc87c364b28fe;\n                        var var15 = 0x40;\n                        var var16 = memory[var15:var15 + 0x20];\n                        var var13 = 0xf47d33b5;\n                        var var14 = temp6 + 0x44;\n                        var var17 = temp6 - var16 + 0x44;\n                        var var18 = var16;\n                        var var19 = var12;\n                        var var20 = !address(var19).code.length;\n                    \n                        if (var20) { revert(memory[0x00:0x00]); }\n                    \n                        var temp7;\n                        temp7, memory[var16:var16 + var15] = address(var19).delegatecall.gas(msg.gas)(memory[var18:var18 + var17]);\n                        var15 = !temp7;\n                    \n                        if (!var15) {\n                            var12 = memory[0x40:0x60];\n                            var13 = returndata.length;\n                        \n                            if (var13 < 0x40) { revert(memory[0x00:0x00]); }\n                        \n                            var temp8 = var12;\n                            var temp9 = memory[temp8:temp8 + 0x20];\n                            var10 = temp9;\n                            var11 = memory[temp8 + 0x20:temp8 + 0x20 + 0x20];\n                            var temp10 = memory[0x00:0x20];\n                            memory[0x00:0x20] = code[0x18c0:0x18e0];\n                            var12 = memory[0x00:0x20];\n                            memory[0x00:0x20] = temp10;\n                            var13 = var8;\n                            var14 = var10;\n                            // Unhandled termination\n                        } else {\n                            var temp11 = returndata.length;\n                            memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp12 = memory[0x40:0x60];\n                        memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n                        var temp13 = temp12 + 0x04;\n                        var temp14 = temp13 + 0x20;\n                        memory[temp13:temp13 + 0x20] = temp14 - temp13;\n                        memory[temp14:temp14 + 0x20] = 0x21;\n                        var temp15 = temp14 + 0x20;\n                        memory[temp15:temp15 + 0x21] = code[0x186b:0x188c];\n                        var temp16 = memory[0x40:0x60];\n                        revert(memory[temp16:temp16 + (temp15 + 0x40) - temp16]);\n                    }\n                } else {\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n                    memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x20;\n                    memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x5f6c6566742073686f756c6420626520696e7369646520746865206669656c64;\n                    var temp18 = memory[0x40:0x60];\n                    revert(memory[temp18:temp18 + temp17 - temp18 + 0x64]);\n                }\n            } else {\n                var3 = var2;\n                var6 = 0x02;\n                var7 = var5 & 0xffffffff;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var4 = storage[keccak256(memory[0x00:0x20]) + var7];\n                var6 = var2;\n                var7 = 0x01;\n                var8 = var5 & 0xffffffff;\n            \n                if (var8 >= storage[var7]) { assert(); }\n            \n                memory[0x00:0x20] = var7;\n                storage[keccak256(memory[0x00:0x20]) + var8] = var6;\n                var6 = 0x16e4;\n                var7 = var3;\n                var8 = var4;\n                goto label_0B40;\n            }\n        } else {\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = 0x461bcd << 0xe5;\n            var temp20 = temp19 + 0x04;\n            var temp21 = temp20 + 0x20;\n            memory[temp20:temp20 + 0x20] = temp21 - temp20;\n            memory[temp21:temp21 + 0x20] = 0x2f;\n            var temp22 = temp21 + 0x20;\n            memory[temp22:temp22 + 0x2f] = code[0x1804:0x1833];\n            var temp23 = memory[0x40:0x60];\n            revert(memory[temp23:temp23 + (temp22 + 0x40) - temp23]);\n        }\n    }\n    \n    function func_175C() {\n        if (msg.value == storage[0x69]) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x38;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x38] = code[0x1833:0x186b];\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n    }\n    \n    function func_17E9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x138c;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 > var0) { return func_17F8(arg1, var0); }\n    \n        arg0 = arg1;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_17F8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        storage[temp0] = 0x00;\n        arg1 = temp0 + 0x01;\n    \n        if (arg0 <= arg1) { return arg0; }\n    \n        r0 = func_17F8(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x90eeb02b > var0) {\n            if (0x4ecf518b > var0) {\n                if (var0 == 0x06394c9b) {\n                    // Dispatch table entry for changeOperator(address)\n                    var var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var var2 = 0x04;\n                    var var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    changeOperator(var2, var3);\n                    stop();\n                } else if (var0 == 0x17cc915c) {\n                    // Dispatch table entry for nullifierHashes(bytes32)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x0200;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = nullifierHashes(var2, var3);\n                \n                label_0200:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = !!var2;\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n                } else if (var0 == 0x21a0adb6) {\n                    // Dispatch table entry for withdraw(bytes,bytes32,bytes32,address,address,uint256,uint256)\n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0xe0) { revert(memory[0x00:0x00]); }\n                \n                    withdraw(var2, var3);\n                    stop();\n                } else if (var0 == 0x2b7ac3f3) {\n                    // Dispatch table entry for verifier()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02c2;\n                    var2 = verifier();\n                \n                label_02C2:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                    var temp3 = memory[0x40:0x60];\n                    return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n                } else if (var0 == 0x38bf282e) {\n                    // Dispatch table entry for hashLeftRight(bytes32,bytes32)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x030e;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var temp4 = var2;\n                    var2 = msg.data[temp4:temp4 + 0x20];\n                    var3 = msg.data[temp4 + 0x20:temp4 + 0x20 + 0x20];\n                    var var4 = 0x00;\n                    var temp5 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x18c0:0x18e0];\n                    var temp6 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp5;\n                \n                    if (var2 < temp6) {\n                        var temp7 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x18c0:0x18e0];\n                        var temp8 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp7;\n                    \n                        if (var3 < temp8) {\n                            var temp9 = memory[0x40:0x60];\n                            memory[temp9:temp9 + 0x20] = 0xf47d33b5 << 0xe0;\n                            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = var2;\n                            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x00;\n                            var var5 = var2;\n                            var var6 = 0x00;\n                            var var7 = 0x83584f83f26af4edda9cbe8c730bc87c364b28fe;\n                            var var10 = 0x40;\n                            var var11 = memory[var10:var10 + 0x20];\n                            var var8 = 0xf47d33b5;\n                            var var9 = temp9 + 0x44;\n                            var var12 = temp9 - var11 + 0x44;\n                            var var13 = var11;\n                            var var14 = var7;\n                            var var15 = !address(var14).code.length;\n                        \n                            if (var15) { revert(memory[0x00:0x00]); }\n                        \n                            var temp10;\n                            temp10, memory[var11:var11 + var10] = address(var14).delegatecall.gas(msg.gas)(memory[var13:var13 + var12]);\n                            var10 = !temp10;\n                        \n                            if (!var10) {\n                                var7 = memory[0x40:0x60];\n                                var8 = returndata.length;\n                            \n                                if (var8 < 0x40) { revert(memory[0x00:0x00]); }\n                            \n                                var temp11 = var7;\n                                var temp12 = memory[temp11:temp11 + 0x20];\n                                var5 = temp12;\n                                var6 = memory[temp11 + 0x20:temp11 + 0x20 + 0x20];\n                                var temp13 = memory[0x00:0x20];\n                                memory[0x00:0x20] = code[0x18c0:0x18e0];\n                                var7 = memory[0x00:0x20];\n                                memory[0x00:0x20] = temp13;\n                                var8 = var3;\n                                var9 = var5;\n                                // Unhandled termination\n                            } else {\n                                var temp14 = returndata.length;\n                                memory[0x00:0x00 + temp14] = returndata[0x00:0x00 + temp14];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                            var temp15 = memory[0x40:0x60];\n                            memory[temp15:temp15 + 0x20] = 0x461bcd << 0xe5;\n                            var temp16 = temp15 + 0x04;\n                            var temp17 = temp16 + 0x20;\n                            memory[temp16:temp16 + 0x20] = temp17 - temp16;\n                            memory[temp17:temp17 + 0x20] = 0x21;\n                            var temp18 = temp17 + 0x20;\n                            memory[temp18:temp18 + 0x21] = code[0x186b:0x188c];\n                            var temp19 = memory[0x40:0x60];\n                            revert(memory[temp19:temp19 + (temp18 + 0x40) - temp19]);\n                        }\n                    } else {\n                        var temp20 = memory[0x40:0x60];\n                        memory[temp20:temp20 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n                        memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x20;\n                        memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x5f6c6566742073686f756c6420626520696e7369646520746865206669656c64;\n                        var temp21 = memory[0x40:0x60];\n                        revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n                    }\n                } else if (var0 == 0x414a37ba) {\n                    // Dispatch table entry for FIELD_SIZE()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x030e;\n                    var2 = FIELD_SIZE();\n                \n                label_030E:\n                    var temp22 = memory[0x40:0x60];\n                    memory[temp22:temp22 + 0x20] = var2;\n                    var temp23 = memory[0x40:0x60];\n                    return memory[temp23:temp23 + temp22 - temp23 + 0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0x6d9833e3 > var0) {\n                if (var0 == 0x4ecf518b) {\n                    // Dispatch table entry for levels()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x034a;\n                    var2 = levels();\n                \n                label_034A:\n                    var temp24 = memory[0x40:0x60];\n                    memory[temp24:temp24 + 0x20] = var2 & 0xffffffff;\n                    var temp25 = memory[0x40:0x60];\n                    return memory[temp25:temp25 + temp24 - temp25 + 0x20];\n                } else if (var0 == 0x570ca735) {\n                    // Dispatch table entry for operator()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x02c2;\n                    var2 = operator();\n                    goto label_02C2;\n                } else if (var0 == 0x6ba355aa) {\n                    // Dispatch table entry for 0x6ba355aa (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var temp26 = var2;\n                    var temp27 = temp26 + var3;\n                    var3 = temp26;\n                    var2 = temp27;\n                    var4 = var3 + 0x20;\n                    var5 = msg.data[var3:var3 + 0x20];\n                \n                    if (var5 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp28 = var3 + var5;\n                    var5 = temp28;\n                \n                    if (var5 + 0x20 > var2) { revert(memory[0x00:0x00]); }\n                \n                    var temp29 = var5;\n                    var temp30 = msg.data[temp29:temp29 + 0x20];\n                    var5 = temp30;\n                    var temp31 = var4;\n                    var4 = temp29 + 0x20;\n                    var6 = temp31;\n                \n                    if ((var5 > 0x01 << 0x20) | (var4 + var5 * 0x20 > var2)) { revert(memory[0x00:0x00]); }\n                \n                    var2 = var4;\n                    var3 = var5;\n                    var4 = msg.data[var6:var6 + 0x20];\n                \n                    if (msg.sender != storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n                        var temp43 = memory[0x40:0x60];\n                        memory[temp43:temp43 + 0x20] = 0x461bcd << 0xe5;\n                        var temp44 = temp43 + 0x04;\n                        var temp45 = temp44 + 0x20;\n                        memory[temp44:temp44 + 0x20] = temp45 - temp44;\n                        memory[temp45:temp45 + 0x20] = 0x25;\n                        var temp46 = temp45 + 0x20;\n                        memory[temp46:temp46 + 0x25] = code[0x1949:0x196e];\n                        var temp47 = memory[0x40:0x60];\n                        revert(memory[temp47:temp47 + (temp46 + 0x40) - temp47]);\n                    } else if (!(storage[0x6d] / (0x01 << 0xa0) & 0xff)) {\n                        var5 = 0x0df5;\n                        var6 = 0x01;\n                        var7 = var2;\n                        var8 = var3;\n                        var temp32 = var6;\n                        var temp33 = storage[temp32];\n                        var temp34 = var8;\n                        storage[temp32] = temp34;\n                        memory[0x00:0x20] = temp32;\n                        var9 = keccak256(memory[0x00:0x20]);\n                        var temp35 = var7;\n                        var7 = var9 + temp33;\n                        var10 = temp35;\n                    \n                        if (!temp34) {\n                        label_17D9:\n                            var temp36 = var7;\n                            var7 = 0x17e5;\n                            var8 = temp36;\n                            var7 = func_17E9(var8, var9);\n                            var5 = var6;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var temp37 = var8;\n                            var temp38 = var10;\n                            var8 = temp38;\n                            var10 = var8 + temp37 * 0x20;\n                        \n                            if (var10 <= var8) { goto label_17D9; }\n                        \n                        label_17C7:\n                            var temp39 = var8;\n                            var temp40 = var9;\n                            storage[temp40] = msg.data[temp39:temp39 + 0x20];\n                            var8 = temp39 + 0x20;\n                            var9 = temp40 + 0x01;\n                            var10 = var10;\n                        \n                            if (var10 <= var8) { goto label_17D9; }\n                            else { goto label_17C7; }\n                        }\n                    } else {\n                        var temp41 = memory[0x40:0x60];\n                        memory[temp41:temp41 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp41 + 0x04:temp41 + 0x04 + 0x20] = 0x20;\n                        memory[temp41 + 0x24:temp41 + 0x24 + 0x20] = 0x10;\n                        memory[temp41 + 0x44:temp41 + 0x44 + 0x20] = 0x185b1c9958591e481b5a59dc985d1959 << 0x82;\n                        var temp42 = memory[0x40:0x60];\n                        revert(memory[temp42:temp42 + temp41 - temp42 + 0x64]);\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x6d9833e3) {\n                // Dispatch table entry for isKnownRoot(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0200;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = isKnownRoot(var2, var3);\n                goto label_0200;\n            } else if (var0 == 0x839df945) {\n                // Dispatch table entry for commitments(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0200;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = commitments(var2, var3);\n                goto label_0200;\n            } else if (var0 == 0x88d761f2) {\n                // Dispatch table entry for finishMigration()\n                var1 = 0x01d4;\n                finishMigration();\n                stop();\n            } else if (var0 == 0x8bca6d16) {\n                // Dispatch table entry for denomination()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030e;\n                var2 = denomination();\n                goto label_030E;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xc2b40ae4 > var0) {\n            if (0x9fa12d0b > var0) {\n                if (var0 == 0x90eeb02b) {\n                    // Dispatch table entry for currentRootIndex()\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x034a;\n                    var2 = currentRootIndex();\n                    goto label_034A;\n                } else if (var0 == 0x916710aa) {\n                    // Dispatch table entry for 0x916710aa (unknown)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    func_049C(var2, var3);\n                    stop();\n                } else if (var0 == 0x97fc007c) {\n                    // Dispatch table entry for updateVerifier(address)\n                    var1 = msg.value;\n                \n                    if (var1) { revert(memory[0x00:0x00]); }\n                \n                    var1 = 0x01d4;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    updateVerifier(var2, var3);\n                    stop();\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x9fa12d0b) {\n                // Dispatch table entry for isSpentArray(bytes32[])\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05f2;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = isSpentArray(var2, var3);\n                var temp48 = memory[0x40:0x60];\n                memory[temp48:temp48 + 0x20] = 0x20;\n                var temp49 = var1;\n                memory[temp48 + 0x20:temp48 + 0x20 + 0x20] = memory[temp49:temp49 + 0x20];\n                var2 = temp48;\n                var3 = var2;\n                var4 = var3 + 0x40;\n                var5 = temp49 + 0x20;\n                var6 = memory[temp49:temp49 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_062E:\n                    var temp50 = memory[0x40:0x60];\n                    return memory[temp50:temp50 + (var6 + var4) - temp50];\n                } else {\n                label_061F:\n                    var temp51 = var10;\n                    memory[temp51 + var8:temp51 + var8 + 0x20] = memory[temp51 + var9:temp51 + var9 + 0x20];\n                    var10 = temp51 + 0x20;\n                \n                    if (var10 >= var7) { goto label_062E; }\n                    else { goto label_061F; }\n                }\n            } else if (var0 == 0xb06faf62) {\n                // Dispatch table entry for isMigrated()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0200;\n                var2 = isMigrated();\n                goto label_0200;\n            } else if (var0 == 0xb214faa5) {\n                // Dispatch table entry for deposit(bytes32)\n                var1 = 0x01d4;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                deposit(var2, var3);\n                stop();\n            } else if (var0 == 0xba70f757) {\n                // Dispatch table entry for getLastRoot()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030e;\n                var1 = getLastRoot();\n                goto label_030E;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xe8295588 > var0) {\n            if (var0 == 0xc2b40ae4) {\n                // Dispatch table entry for roots(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030e;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = roots(var2, var3);\n                goto label_030E;\n            } else if (var0 == 0xcd87a3b4) {\n                // Dispatch table entry for ROOT_HISTORY_SIZE()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x034a;\n                var2 = ROOT_HISTORY_SIZE();\n                goto label_034A;\n            } else if (var0 == 0xe5285dcc) {\n                // Dispatch table entry for isSpent(bytes32)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0200;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1 = isSpent(var2, var3);\n                goto label_0200;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xe8295588) {\n            // Dispatch table entry for zeros(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x030e;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = zeros(var2, var3);\n            goto label_030E;\n        } else if (var0 == 0xec732959) {\n            // Dispatch table entry for ZERO_VALUE()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x030e;\n            var2 = ZERO_VALUE();\n            goto label_030E;\n        } else if (var0 == 0xf178e47c) {\n            // Dispatch table entry for filledSubtrees(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x030e;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = filledSubtrees(var2, var3);\n            goto label_030E;\n        } else if (var0 == 0xfc7e9c6f) {\n            // Dispatch table entry for nextIndex()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x034a;\n            var2 = nextIndex();\n            goto label_034A;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function changeOperator(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n    \n        if (msg.sender == storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n            storage[0x6d] = (arg0 & (0x01 << 0xa0) - 0x01) | (storage[0x6d] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x25;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x25] = code[0x1949:0x196e];\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n        }\n    }\n    \n    function nullifierHashes(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x6a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function withdraw(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x01 << 0x20) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        arg0 = var0;\n        arg1 = var1;\n        var0 = msg.data[temp6:temp6 + 0x20];\n        var1 = msg.data[temp6 + 0x20:temp6 + 0x20 + 0x20];\n        var temp7 = (0x01 << 0xa0) - 0x01;\n        var2 = temp7 & msg.data[temp6 + 0x40:temp6 + 0x40 + 0x20];\n        var var3 = temp7 & msg.data[temp6 + 0x60:temp6 + 0x60 + 0x20];\n        var var4 = msg.data[temp6 + 0x80:temp6 + 0x80 + 0x20];\n        var var5 = msg.data[temp6 + 0xa0:temp6 + 0xa0 + 0x20];\n        var var6 = storage[0x68] + 0x01;\n        storage[0x68] = var6;\n    \n        if (var4 <= storage[0x69]) {\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x6a;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n                var var7 = 0x08bf;\n                var var8 = var0;\n                var7 = func_0DFD(var8);\n            \n                if (var7) {\n                    var temp8 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp8 + 0xc0;\n                    memory[temp8:temp8 + 0x20] = var0;\n                    memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = var1;\n                    var temp9 = (0x01 << 0xa0) - 0x01;\n                    memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = temp9 & var2;\n                    memory[temp8 + 0x60:temp8 + 0x60 + 0x20] = temp9 & var3;\n                    memory[temp8 + 0x80:temp8 + 0x80 + 0x20] = var4;\n                    memory[temp8 + 0xa0:temp8 + 0xa0 + 0x20] = var5;\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = 0x695ef6f9 << 0xe0;\n                    var7 = storage[0x6c] & temp9;\n                    var8 = 0x695ef6f9;\n                    var var9 = arg0;\n                    var var10 = arg1;\n                    var var11 = temp8;\n                    var var12 = temp10 + 0x04;\n                    var var13 = var12;\n                    var var14 = temp10 + 0x24;\n                    var var15 = var11;\n                    var var16 = 0xc0;\n                    var var17 = var16;\n                    var var18 = var14;\n                    var var19 = var15;\n                    var var20 = 0x00;\n                \n                    if (var20 >= var17) {\n                    label_0995:\n                        var temp11 = var16 + var14;\n                        memory[var13:var13 + 0x20] = temp11 - var12;\n                        var temp12 = var10;\n                        memory[temp11:temp11 + 0x20] = temp12;\n                        var temp13 = temp11 + 0x20;\n                        memory[temp13:temp13 + temp12] = msg.data[var9:var9 + temp12];\n                        memory[temp13 + temp12:temp13 + temp12 + 0x20] = 0x00;\n                        var9 = temp13 + (temp12 + 0x1f & ~0x1f);\n                        var10 = 0x20;\n                        var11 = memory[0x40:0x60];\n                        var12 = var9 - var11;\n                        var13 = var11;\n                        var14 = 0x00;\n                        var15 = var7;\n                        var16 = !address(var15).code.length;\n                    \n                        if (var16) { revert(memory[0x00:0x00]); }\n                    \n                        var temp14;\n                        temp14, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas).value(var14)(memory[var13:var13 + var12]);\n                        var10 = !temp14;\n                    \n                        if (!var10) {\n                            var7 = memory[0x40:0x60];\n                            var8 = returndata.length;\n                        \n                            if (var8 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            if (memory[var7:var7 + 0x20]) {\n                                memory[0x00:0x20] = var1;\n                                memory[0x20:0x40] = 0x6a;\n                                var temp15 = keccak256(memory[0x00:0x40]);\n                                storage[temp15] = (storage[temp15] & ~0xff) | 0x01;\n                                var7 = 0x0a82;\n                                var8 = var2;\n                                var9 = var3;\n                                var10 = var4;\n                                var11 = var5;\n                                func_141F(var8, var9, var10, var11);\n                                var temp16 = memory[0x40:0x60];\n                                var temp17 = (0x01 << 0xa0) - 0x01;\n                                memory[temp16:temp16 + 0x20] = temp17 & var2;\n                                memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = var1;\n                                memory[temp16 + 0x40:temp16 + 0x40 + 0x20] = var4;\n                                var temp18 = memory[0x40:0x60];\n                                log(memory[temp18:temp18 + temp16 - temp18 + 0x60], [0xe9e508bad6d4c3227e881ca19068f099da81b5164dd6d62b2eaf1e8bc6c34931, stack[-4] & (0x01 << 0xa0) - 0x01]);\n                            \n                                if (var6 == storage[0x68]) { return; }\n                            \n                                var temp19 = memory[0x40:0x60];\n                                memory[temp19:temp19 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp19 + 0x04:temp19 + 0x04 + 0x20] = 0x20;\n                                memory[temp19 + 0x24:temp19 + 0x24 + 0x20] = 0x1f;\n                                memory[temp19 + 0x44:temp19 + 0x44 + 0x20] = 0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00;\n                                var temp20 = memory[0x40:0x60];\n                                revert(memory[temp20:temp20 + temp19 - temp20 + 0x64]);\n                            } else {\n                                var temp21 = memory[0x40:0x60];\n                                memory[temp21:temp21 + 0x20] = 0x461bcd << 0xe5;\n                                memory[temp21 + 0x04:temp21 + 0x04 + 0x20] = 0x20;\n                                memory[temp21 + 0x24:temp21 + 0x24 + 0x20] = 0x16;\n                                memory[temp21 + 0x44:temp21 + 0x44 + 0x20] = 0x24b73b30b634b2103bb4ba34323930bb90383937b7b3 << 0x51;\n                                var temp22 = memory[0x40:0x60];\n                                revert(memory[temp22:temp22 + temp21 - temp22 + 0x64]);\n                            }\n                        } else {\n                            var temp23 = returndata.length;\n                            memory[0x00:0x00 + temp23] = returndata[0x00:0x00 + temp23];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                    label_0986:\n                        var temp24 = var20;\n                        memory[temp24 + var18:temp24 + var18 + 0x20] = memory[temp24 + var19:temp24 + var19 + 0x20];\n                        var20 = temp24 + 0x20;\n                    \n                        if (var20 >= var17) { goto label_0995; }\n                        else { goto label_0986; }\n                    }\n                } else {\n                    var temp25 = memory[0x40:0x60];\n                    memory[temp25:temp25 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n                    memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x1c;\n                    memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = 0x43616e6e6f742066696e6420796f7572206d65726b6c6520726f6f7400000000;\n                    var temp26 = memory[0x40:0x60];\n                    revert(memory[temp26:temp26 + temp25 - temp26 + 0x64]);\n                }\n            } else {\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = 0x461bcd << 0xe5;\n                memory[temp27 + 0x04:temp27 + 0x04 + 0x20] = 0x20;\n                memory[temp27 + 0x24:temp27 + 0x24 + 0x20] = 0x1f;\n                memory[temp27 + 0x44:temp27 + 0x44 + 0x20] = 0x546865206e6f746520686173206265656e20616c7265616479207370656e7400;\n                var temp28 = memory[0x40:0x60];\n                revert(memory[temp28:temp28 + temp27 - temp28 + 0x64]);\n            }\n        } else {\n            var temp29 = memory[0x40:0x60];\n            memory[temp29:temp29 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp29 + 0x04:temp29 + 0x04 + 0x20] = 0x20;\n            memory[temp29 + 0x24:temp29 + 0x24 + 0x20] = 0x1a;\n            memory[temp29 + 0x44:temp29 + 0x44 + 0x20] = 0x4665652065786365656473207472616e736665722076616c7565000000000000;\n            var temp30 = memory[0x40:0x60];\n            revert(memory[temp30:temp30 + temp29 - temp30 + 0x64]);\n        }\n    }\n    \n    function isKnownRoot(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_0DFD(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function commitments(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x6b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_049C(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var var2 = var0;\n        var0 = temp3 + 0x20;\n    \n        if ((var1 > 0x01 << 0x20) | (var0 + var1 * 0x20 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp5 = var2;\n        var temp6 = arg0;\n        arg0 = var0;\n        var temp7 = arg1;\n        arg1 = var1;\n        var1 = temp7;\n        var0 = temp6;\n        var2 = temp5 + 0x20;\n        var var3 = msg.data[temp5:temp5 + 0x20];\n    \n        if (var3 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = var1 + var3;\n        var3 = temp8;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = var3;\n        var temp10 = msg.data[temp9:temp9 + 0x20];\n        var3 = temp10;\n        var var4 = var2;\n        var2 = temp9 + 0x20;\n    \n        if ((var3 > 0x01 << 0x20) | (var2 + var3 * 0x20 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var0 = var2;\n        var1 = var3;\n    \n        if (msg.sender != storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = 0x461bcd << 0xe5;\n            var temp26 = temp25 + 0x04;\n            var temp27 = temp26 + 0x20;\n            memory[temp26:temp26 + 0x20] = temp27 - temp26;\n            memory[temp27:temp27 + 0x20] = 0x25;\n            var temp28 = temp27 + 0x20;\n            memory[temp28:temp28 + 0x25] = code[0x1949:0x196e];\n            var temp29 = memory[0x40:0x60];\n            revert(memory[temp29:temp29 + (temp28 + 0x40) - temp29]);\n        } else if (!(storage[0x6d] / (0x01 << 0xa0) & 0xff)) {\n            var2 = 0x00;\n        \n            if (arg1 <= var2 & 0xffffffff) {\n            label_105E:\n                var temp11 = storage[0x03];\n                storage[0x03] = (temp11 & ~0xffffffff00000000) | (arg1 + (temp11 / (0x01 << 0x20) & 0xffffffff) & 0xffffffff) * (0x01 << 0x20);\n                var2 = 0x00;\n            \n                if (var2 >= var1) {\n                label_1143:\n                    return;\n                } else {\n                label_1094:\n                    var3 = 0x01;\n                    var4 = 0x6a;\n                    var var5 = 0x00;\n                    var var6 = var0;\n                    var var7 = var1;\n                    var var8 = var2;\n                \n                    if (var8 >= var7) { assert(); }\n                \n                    var temp12 = var5;\n                    memory[temp12:temp12 + 0x20] = msg.data[var8 * 0x20 + var6:var8 * 0x20 + var6 + 0x20];\n                    var temp13 = temp12 + 0x20;\n                    memory[temp13:temp13 + 0x20] = var4;\n                    var temp14 = keccak256(memory[0x00:0x00 + temp13 + 0x20]);\n                    storage[temp14] = !!var3 | (storage[temp14] & ~0xff);\n                    var3 = (0x01 << 0xa0) - 0x01 & 0x00;\n                    var4 = 0xe9e508bad6d4c3227e881ca19068f099da81b5164dd6d62b2eaf1e8bc6c34931;\n                    var5 = 0x00;\n                    var6 = var0;\n                    var7 = var1;\n                    var8 = var2;\n                \n                    if (var8 >= var7) { assert(); }\n                \n                    var temp15 = memory[0x40:0x60];\n                    memory[temp15:temp15 + 0x20] = var5 & (0x01 << 0xa0) - 0x01;\n                    memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = msg.data[var8 * 0x20 + var6:var8 * 0x20 + var6 + 0x20];\n                    memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = 0x00;\n                    var temp16 = memory[0x40:0x60];\n                    log(memory[temp16:temp16 + temp15 - temp16 + 0x60], [stack[-5], stack[-6]]);\n                    var2 = var2 + 0x01;\n                \n                    if (var2 >= var1) { goto label_1143; }\n                    else { goto label_1094; }\n                }\n            } else {\n            label_0FA7:\n                var3 = 0x01;\n                var4 = 0x6b;\n                var5 = 0x00;\n                var6 = arg0;\n                var7 = arg1;\n                var8 = var2 & 0xffffffff;\n            \n                if (var8 >= var7) { assert(); }\n            \n                var temp17 = var5;\n                memory[temp17:temp17 + 0x20] = msg.data[var8 * 0x20 + var6:var8 * 0x20 + var6 + 0x20];\n                var temp18 = temp17 + 0x20;\n                memory[temp18:temp18 + 0x20] = var4;\n                var temp19 = keccak256(memory[0x00:0x00 + temp18 + 0x20]);\n                storage[temp19] = !!var3 | (storage[temp19] & ~0xff);\n                var3 = arg0;\n                var4 = arg1;\n                var5 = var2 & 0xffffffff;\n            \n                if (var5 >= var4) { assert(); }\n            \n                var temp20 = memory[0x40:0x60];\n                var temp21 = var2;\n                memory[temp20:temp20 + 0x20] = temp21 + (storage[0x03] / (0x01 << 0x20) & 0xffffffff) & 0xffffffff;\n                memory[temp20 + 0x20:temp20 + 0x20 + 0x20] = block.timestamp;\n                var temp22 = memory[0x40:0x60];\n                log(memory[temp22:temp22 + temp20 - temp22 + 0x40], [0xa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196, msg.data[stack[-1] * 0x20 + stack[-3]:stack[-1] * 0x20 + stack[-3] + 0x20]]);\n                var2 = temp21 + 0x01;\n            \n                if (arg1 <= var2 & 0xffffffff) { goto label_105E; }\n                else { goto label_0FA7; }\n            }\n        } else {\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp23 + 0x04:temp23 + 0x04 + 0x20] = 0x20;\n            memory[temp23 + 0x24:temp23 + 0x24 + 0x20] = 0x15;\n            memory[temp23 + 0x44:temp23 + 0x44 + 0x20] = 0x135a59dc985d1a5bdb881a5cc8191a5cd8589b1959 << 0x5a;\n            var temp24 = memory[0x40:0x60];\n            revert(memory[temp24:temp24 + temp23 - temp24 + 0x64]);\n        }\n    }\n    \n    function updateVerifier(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & (0x01 << 0xa0) - 0x01;\n    \n        if (msg.sender == storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n            storage[0x6c] = (arg0 & (0x01 << 0xa0) - 0x01) | (storage[0x6c] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x25;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x25] = code[0x1949:0x196e];\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n        }\n    }\n    \n    function isSpentArray(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x01 << 0x20) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x01 << 0x20) | (var0 + var1 * 0x20 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        arg0 = var0;\n        arg1 = var1;\n        var temp6 = memory[0x40:0x60];\n        var temp7 = arg1;\n        memory[temp6:temp6 + 0x20] = temp7;\n        memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n        var1 = temp6;\n        var0 = 0x60;\n        var2 = temp7;\n    \n        if (!var2) {\n            var0 = var1;\n            var1 = 0x00;\n        \n            if (var1 >= arg1) {\n            label_1236:\n                return var0;\n            } else {\n            label_11F0:\n                var2 = 0x120a;\n                var var3 = arg0;\n                var var4 = arg1;\n                var var5 = var1;\n            \n                if (var5 >= var4) { assert(); }\n            \n                var2 = func_11FE(var3, var4, var5);\n            \n                if (!var2) {\n                label_122E:\n                    var1 = var1 + 0x01;\n                \n                    if (var1 >= arg1) { goto label_1236; }\n                    else { goto label_11F0; }\n                } else {\n                    var2 = 0x01;\n                    var3 = var0;\n                    var4 = var1;\n                \n                    if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n                \n                    memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20] = !!var2;\n                    goto label_122E;\n                }\n            }\n        } else {\n            var temp8 = var2 * 0x20;\n            memory[var1 + 0x20:var1 + 0x20 + temp8] = code[code.length:code.length + temp8];\n            var0 = var1;\n            var1 = 0x00;\n        \n            if (var1 >= arg1) { goto label_1236; }\n            else { goto label_11F0; }\n        }\n    }\n    \n    function deposit(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = storage[0x68] + 0x01;\n        storage[0x68] = arg1;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x6b;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) {\n            var var0 = 0x00;\n            var var1 = 0x12b1;\n            var var2 = arg0;\n            var1 = func_15C5(var2);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x6b;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n            var0 = var1;\n            var1 = 0x12d4;\n            func_175C();\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = var0 & 0xffffffff;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = block.timestamp;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0xa945e51eec50ab98c161376f0db4cf2aeba3ec92755fe2fcd388bdbbb80ff196, stack[-3]]);\n        \n            if (arg1 == storage[0x68]) { return; }\n        \n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x1f;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        } else {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n            var temp6 = temp5 + 0x04;\n            var temp7 = temp6 + 0x20;\n            memory[temp6:temp6 + 0x20] = temp7 - temp6;\n            memory[temp7:temp7 + 0x20] = 0x21;\n            var temp8 = temp7 + 0x20;\n            memory[temp8:temp8 + 0x21] = code[0x18e0:0x1901];\n            var temp9 = memory[0x40:0x60];\n            revert(memory[temp9:temp9 + (temp8 + 0x40) - temp9]);\n        }\n    }\n    \n    function roots(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x04;\n        var var0 = arg0;\n    \n        if (var0 < 0x64) { return storage[var0 + arg1]; }\n        else { assert(); }\n    }\n    \n    function isSpent(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x6a;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function zeros(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x02;\n        var var0 = arg0;\n    \n        if (var0 >= storage[arg1]) { assert(); }\n    \n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x20]) + var0];\n    }\n    \n    function filledSubtrees(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        arg1 = 0x01;\n        var var0 = arg0;\n    \n        if (var0 >= storage[arg1]) { assert(); }\n    \n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x20]) + var0];\n    }\n    \n    function verifier() returns (var r0) { return storage[0x6c] & (0x01 << 0xa0) - 0x01; }\n    \n    function FIELD_SIZE() returns (var r0) {\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x18c0:0x18e0];\n        r0 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n        return r0;\n    }\n    \n    function levels() returns (var r0) { return storage[0x00] & 0xffffffff; }\n    \n    function operator() returns (var r0) { return storage[0x6d] & (0x01 << 0xa0) - 0x01; }\n    \n    function func_0DFD(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0) {\n            var var1 = storage[0x03] & 0xffffffff;\n            var var2 = 0x04;\n            var var3 = var1 & 0xffffffff;\n        \n            if (var3 >= 0x64) { assert(); }\n        \n        label_0E29:\n        \n            if (arg0 == storage[var3 + var2]) {\n                var0 = 0x01;\n                goto label_0E6B;\n            } else if (var1 & 0xffffffff) {\n                var temp0 = var1 + ~0x00;\n                var1 = temp0;\n            \n                if (storage[0x03] & 0xffffffff != var1 & 0xffffffff) {\n                label_0E16:\n                    var2 = 0x04;\n                    var3 = var1 & 0xffffffff;\n                \n                    if (var3 < 0x64) { goto label_0E29; }\n                    else { assert(); }\n                } else {\n                label_0E66:\n                    var0 = 0x00;\n                \n                label_0E6B:\n                    return var0;\n                }\n            } else {\n                var1 = 0x64 + ~0x00;\n            \n                if (storage[0x03] & 0xffffffff != var1 & 0xffffffff) { goto label_0E16; }\n                else { goto label_0E66; }\n            }\n        } else {\n            var0 = 0x00;\n            goto label_0E6B;\n        }\n    }\n    \n    function finishMigration() {\n        if (msg.sender == storage[0x6d] & (0x01 << 0xa0) - 0x01) {\n            storage[0x6d] = (storage[0x6d] & ~(0xff << 0xa0)) | (0x01 << 0xa0);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var temp1 = temp0 + 0x04;\n            var temp2 = temp1 + 0x20;\n            memory[temp1:temp1 + 0x20] = temp2 - temp1;\n            memory[temp2:temp2 + 0x20] = 0x25;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x25] = code[0x1949:0x196e];\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n        }\n    }\n    \n    function denomination() returns (var r0) { return storage[0x69]; }\n    \n    function currentRootIndex() returns (var r0) { return storage[0x03] & 0xffffffff; }\n    \n    function func_11FE(var arg0, var arg1, var arg2) returns (var r0) {\n        arg0 = msg.data[arg2 * 0x20 + arg0:arg2 * 0x20 + arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x6a;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function isMigrated() returns (var r0) { return storage[0x6d] / (0x01 << 0xa0) & 0xff; }\n    \n    function getLastRoot() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04;\n        var var2 = storage[0x03] & 0xffffffff;\n    \n        if (var2 < 0x64) { return storage[var2 + var1]; }\n        else { assert(); }\n    }\n    \n    function ROOT_HISTORY_SIZE() returns (var r0) { return 0x64; }\n    \n    function ZERO_VALUE() returns (var r0) { return 0x2fe54c60d3acabf3343a35b6eba15db4821b340f76e741e2249685ed4899af6c; }\n    \n    function nextIndex() returns (var r0) { return storage[0x03] / (0x01 << 0x20) & 0xffffffff; }\n    \n    function func_141F(var arg0, var arg1, var arg2, var arg3) {\n        if (msg.value) {\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = 0x461bcd << 0xe5;\n            var temp24 = temp23 + 0x04;\n            var temp25 = temp24 + 0x20;\n            memory[temp24:temp24 + 0x20] = temp25 - temp24;\n            memory[temp25:temp25 + 0x20] = 0x35;\n            var temp26 = temp25 + 0x20;\n            memory[temp26:temp26 + 0x35] = code[0x196e:0x19a3];\n            var temp27 = memory[0x40:0x60];\n            revert(memory[temp27:temp27 + (temp26 + 0x40) - temp27]);\n        } else if (!arg3) {\n            var temp0 = memory[0x40:0x60];\n            var var0 = 0x00;\n            var temp1;\n            temp1, memory[temp0:temp0 + var0] = address(arg0 & (0x01 << 0xa0) - 0x01).call.gas(msg.gas).value(storage[0x69] - arg2)(memory[temp0:temp0 + var0]);\n            var var2 = returndata.length;\n            var var3 = var2;\n        \n            if (var3 == 0x00) {\n                // Error: StackRead before write???\n                var var1;\n                var0 = var1;\n            \n                if (var0) {\n                label_152F:\n                \n                    if (!arg2) {\n                    label_1143:\n                        return;\n                    } else {\n                        var temp2 = memory[0x40:0x60];\n                        var temp3;\n                        temp3, memory[temp2:temp2 + 0x00] = address(arg1 & (0x01 << 0xa0) - 0x01).call.gas(msg.gas).value(arg2)(memory[temp2:temp2 + 0x00]);\n                        var2 = returndata.length;\n                        var3 = var2;\n                    \n                        if (var3 == 0x00) {\n                            var0 = var1;\n                        \n                            if (var0) { goto label_1143; }\n                        \n                        label_158F:\n                            var temp4 = memory[0x40:0x60];\n                            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n                            var temp5 = temp4 + 0x04;\n                            var temp6 = temp5 + 0x20;\n                            memory[temp5:temp5 + 0x20] = temp6 - temp5;\n                            memory[temp6:temp6 + 0x20] = 0x23;\n                            var temp7 = temp6 + 0x20;\n                            memory[temp7:temp7 + 0x23] = code[0x1926:0x1949];\n                            var temp8 = memory[0x40:0x60];\n                            revert(memory[temp8:temp8 + (temp7 + 0x40) - temp8]);\n                        } else {\n                            var temp9 = memory[0x40:0x60];\n                            var2 = temp9;\n                            memory[0x40:0x60] = var2 + (returndata.length + 0x3f & ~0x1f);\n                            memory[var2:var2 + 0x20] = returndata.length;\n                            var temp10 = returndata.length;\n                            memory[var2 + 0x20:var2 + 0x20 + temp10] = returndata[0x00:0x00 + temp10];\n                            var0 = var1;\n                        \n                            if (var0) { goto label_1143; }\n                            else { goto label_158F; }\n                        }\n                    }\n                } else {\n                label_14F9:\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = 0x461bcd << 0xe5;\n                    var temp12 = temp11 + 0x04;\n                    var temp13 = temp12 + 0x20;\n                    memory[temp12:temp12 + 0x20] = temp13 - temp12;\n                    memory[temp13:temp13 + 0x20] = 0x25;\n                    var temp14 = temp13 + 0x20;\n                    memory[temp14:temp14 + 0x25] = code[0x1901:0x1926];\n                    var temp15 = memory[0x40:0x60];\n                    revert(memory[temp15:temp15 + (temp14 + 0x40) - temp15]);\n                }\n            } else {\n                var temp16 = memory[0x40:0x60];\n                var2 = temp16;\n                memory[0x40:0x60] = var2 + (returndata.length + 0x3f & ~0x1f);\n                memory[var2:var2 + 0x20] = returndata.length;\n                var temp17 = returndata.length;\n                memory[var2 + 0x20:var2 + 0x20 + temp17] = returndata[0x00:0x00 + temp17];\n                var0 = var1;\n            \n                if (var0) { goto label_152F; }\n                else { goto label_14F9; }\n            }\n        } else {\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0x461bcd << 0xe5;\n            var temp19 = temp18 + 0x04;\n            var temp20 = temp19 + 0x20;\n            memory[temp19:temp19 + 0x20] = temp20 - temp19;\n            memory[temp20:temp20 + 0x20] = 0x34;\n            var temp21 = temp20 + 0x20;\n            memory[temp21:temp21 + 0x34] = code[0x188c:0x18c0];\n            var temp22 = memory[0x40:0x60];\n            revert(memory[temp22:temp22 + (temp21 + 0x40) - temp22]);\n        }\n    }\n    \n    function func_15C5(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = storage[0x03] / (0x01 << 0x20) & 0xffffffff;\n    \n        if (var1 != 0x02 ** (storage[var0] & 0xffffffff) & 0xffffffff) {\n            var temp0 = storage[0x03];\n            storage[0x03] = (temp0 & ~0xffffffff00000000) | ((temp0 / (0x01 << 0x20) & 0xffffffff) + 0x01 & 0xffffffff) * (0x01 << 0x20);\n            var var2 = arg0;\n            var var3 = 0x00;\n            var var4 = var3;\n            var var5 = var4;\n        \n            if (var5 & 0xffffffff >= storage[0x00] & 0xffffffff) {\n                var temp1 = (((storage[0x03] & 0xffffffff) + 0x01 & 0xffffffff) % 0x64 & 0xffffffff) | (storage[0x03] & ~0xffffffff);\n                storage[0x03] = temp1;\n                var5 = var2;\n                var var6 = 0x04;\n                var var7 = temp1 & 0xffffffff;\n            \n                if (var7 >= 0x64) { assert(); }\n            \n                storage[var7 + var6] = var5;\n                return (storage[0x03] / (0x01 << 0x20) & 0xffffffff) + ~0x00;\n            } else if (var1 & 0x01) {\n                var6 = 0x01;\n                var7 = var5 & 0xffffffff;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var3 = storage[keccak256(memory[0x00:0x20]) + var7];\n                var4 = var2;\n                var6 = 0x16e4;\n                var7 = var3;\n                var var8 = var4;\n            \n            label_0B40:\n                var var9 = 0x00;\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x18c0:0x18e0];\n                var temp3 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp2;\n            \n                if (var7 < temp3) {\n                    var temp4 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x18c0:0x18e0];\n                    var temp5 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp4;\n                \n                    if (var8 < temp5) {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = 0xf47d33b5 << 0xe0;\n                        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = var7;\n                        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x00;\n                        var var10 = var7;\n                        var var11 = 0x00;\n                        var var12 = 0x83584f83f26af4edda9cbe8c730bc87c364b28fe;\n                        var var15 = 0x40;\n                        var var16 = memory[var15:var15 + 0x20];\n                        var var13 = 0xf47d33b5;\n                        var var14 = temp6 + 0x44;\n                        var var17 = temp6 - var16 + 0x44;\n                        var var18 = var16;\n                        var var19 = var12;\n                        var var20 = !address(var19).code.length;\n                    \n                        if (var20) { revert(memory[0x00:0x00]); }\n                    \n                        var temp7;\n                        temp7, memory[var16:var16 + var15] = address(var19).delegatecall.gas(msg.gas)(memory[var18:var18 + var17]);\n                        var15 = !temp7;\n                    \n                        if (!var15) {\n                            var12 = memory[0x40:0x60];\n                            var13 = returndata.length;\n                        \n                            if (var13 < 0x40) { revert(memory[0x00:0x00]); }\n                        \n                            var temp8 = var12;\n                            var temp9 = memory[temp8:temp8 + 0x20];\n                            var10 = temp9;\n                            var11 = memory[temp8 + 0x20:temp8 + 0x20 + 0x20];\n                            var temp10 = memory[0x00:0x20];\n                            memory[0x00:0x20] = code[0x18c0:0x18e0];\n                            var12 = memory[0x00:0x20];\n                            memory[0x00:0x20] = temp10;\n                            var13 = var8;\n                            var14 = var10;\n                            // Unhandled termination\n                        } else {\n                            var temp11 = returndata.length;\n                            memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp12 = memory[0x40:0x60];\n                        memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n                        var temp13 = temp12 + 0x04;\n                        var temp14 = temp13 + 0x20;\n                        memory[temp13:temp13 + 0x20] = temp14 - temp13;\n                        memory[temp14:temp14 + 0x20] = 0x21;\n                        var temp15 = temp14 + 0x20;\n                        memory[temp15:temp15 + 0x21] = code[0x186b:0x188c];\n                        var temp16 = memory[0x40:0x60];\n                        revert(memory[temp16:temp16 + (temp15 + 0x40) - temp16]);\n                    }\n                } else {\n                    var temp17 = memory[0x40:0x60];\n                    memory[temp17:temp17 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n                    memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x20;\n                    memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x5f6c6566742073686f756c6420626520696e7369646520746865206669656c64;\n                    var temp18 = memory[0x40:0x60];\n                    revert(memory[temp18:temp18 + temp17 - temp18 + 0x64]);\n                }\n            } else {\n                var3 = var2;\n                var6 = 0x02;\n                var7 = var5 & 0xffffffff;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var4 = storage[keccak256(memory[0x00:0x20]) + var7];\n                var6 = var2;\n                var7 = 0x01;\n                var8 = var5 & 0xffffffff;\n            \n                if (var8 >= storage[var7]) { assert(); }\n            \n                memory[0x00:0x20] = var7;\n                storage[keccak256(memory[0x00:0x20]) + var8] = var6;\n                var6 = 0x16e4;\n                var7 = var3;\n                var8 = var4;\n                goto label_0B40;\n            }\n        } else {\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = 0x461bcd << 0xe5;\n            var temp20 = temp19 + 0x04;\n            var temp21 = temp20 + 0x20;\n            memory[temp20:temp20 + 0x20] = temp21 - temp20;\n            memory[temp21:temp21 + 0x20] = 0x2f;\n            var temp22 = temp21 + 0x20;\n            memory[temp22:temp22 + 0x2f] = code[0x1804:0x1833];\n            var temp23 = memory[0x40:0x60];\n            revert(memory[temp23:temp23 + (temp22 + 0x40) - temp23]);\n        }\n    }\n    \n    function func_175C() {\n        if (msg.value == storage[0x69]) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x38;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x38] = code[0x1833:0x186b];\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n    }\n    \n    function func_17E9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x138c;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 > var0) { return func_17F8(arg1, var0); }\n    \n        arg0 = arg1;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_17F8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        storage[temp0] = 0x00;\n        arg1 = temp0 + 0x01;\n    \n        if (arg0 <= arg1) { return arg0; }\n    \n        r0 = func_17F8(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 46.91783857345581,
	"usage": {
		"completion_tokens": 685,
		"prompt_tokens": 18932,
		"total_tokens": 19617
	}
}