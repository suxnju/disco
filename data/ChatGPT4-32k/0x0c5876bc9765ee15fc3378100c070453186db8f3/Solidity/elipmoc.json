{
	"address": "0x0c5876bc9765ee15fc3378100c070453186db8f3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity smart contract code for the decompiled EVM Bytecode provided:\n\n```solidity\npragma solidity ^0.7.6;\n\ncontract RobotCoinSale {\n    uint256 private _salePrice;\n    uint256 private _start;\n    uint256 private _period;\n    address private _owner;\n    bool private _saleIsOn;\n    address private _robotCoin;\n\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    function setSalePrice(uint256 price) public {\n        require(msg.sender == _owner, \"Only owner can set the sale price\");\n        _salePrice = price;\n    }\n\n    function saleIsOn() public view returns(bool) {\n        return _saleIsOn;\n    }\n\n    function transferEther(uint256 amount) public {\n        require(msg.sender == _owner, \"Only owner can transfer ether\");\n        require(address(this).balance >= amount, \"Insufficient contract balance\");\n        (bool success,) = _owner.call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    function owner() public view returns(address) {\n        return _owner;\n    }\n\n    function setRobotCoinContract(address robotCoin) public {\n        require(msg.sender == _owner, \"Only owner can set the Robot Coin contract\");\n        _robotCoin = robotCoin;\n    }\n\n    function start() public view returns(uint256) {\n        return _start;\n    }\n\n    function setSaleState(bool state) public {\n        require(msg.sender == _owner, \"Only owner can set the sale state\");\n        _saleIsOn = state;\n    }\n\n    function setSaleTime(uint256 start, uint256 period) public {\n        require(msg.sender == _owner, \"Only owner can set the sale time\");\n        _start = start;\n        _period = period;\n    }\n\n    function period() public view returns(uint256) {\n        return _period;\n    }\n\n    function robotCoin() public view returns(address) {\n        return _robotCoin;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner, \"Only owner can transfer ownership\");\n        _owner = newOwner;\n    }\n\n    function salePrice() public view returns(uint256) {\n        return _salePrice;\n    }\n\n    fallback() external payable {\n        require(block.timestamp > _start && block.timestamp < _start + _period * 1 days, \"Sale is not active\");\n        require(_saleIsOn, \"Sale is not on\");\n        require(_salePrice != 0, \"Sale price is not set\");\n        require(_robotCoin != address(0), \"Robot Coin contract is not set\");\n        // Assuming Robot Coin contract has a transfer function\n        (bool success,) = _robotCoin.call(abi.encodeWithSignature(\"transfer(address,uint256)\", msg.sender, msg.value * 1000 / _salePrice));\n        require(success, \"Purchase failed\");\n    }\n}\n```\n\nPlease note that this contract assumes the Robot Coin contract has a `transfer` function which transfers Robot Coin tokens to the purchaser. Adjust according to the actual implementation. Also, take into account that the EVM Bytecode provided a `serviceTransfer` function which is not standard, so I used the `transfer` function instead.",
				"role": "assistant"
			}
		}
	],
	"created": 1701464013,
	"id": "chatcmpl-8R4ntOjUSvo9AOW6TCLbm1B7ZCMTK",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 01:55 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _salePrice; // STORAGE[0x2]\nuint256 _start; // STORAGE[0x3]\nuint256 _period; // STORAGE[0x4]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _saleIsOn; // STORAGE[0x5] bytes 0 to 0\naddress _robotCoin; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction setSalePrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _salePrice = varg0;\n}\n\nfunction saleIsOn() public nonPayable { \n    return _saleIsOn;\n}\n\nfunction transferEther(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require((address(this)).balance >= varg0);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction setRobotCoinContract(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _robotCoin = varg0;\n}\n\nfunction start() public nonPayable { \n    return _start;\n}\n\nfunction setSaleState(bool varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _saleIsOn = varg0;\n}\n\nfunction setSaleTime(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _start = varg0;\n    _period = varg1;\n}\n\nfunction period() public nonPayable { \n    return _period;\n}\n\nfunction robotCoin() public nonPayable { \n    return _robotCoin;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction salePrice() public nonPayable { \n    return _salePrice;\n}\n\nfunction fallback() public payable { \n    v0 = v1 = block.timestamp > _start;\n    if (v1) {\n        v0 = v2 = block.timestamp < _start + _period * 24 * 60 * 60;\n    }\n    require(v0);\n    require(_saleIsOn);\n    assert(_salePrice);\n    MEM[32 + MEM[64]] = 0;\n    require(_robotCoin.code.size);\n    v3, v4 = _robotCoin.serviceTransfer(msg.sender, msg.value * 1000 / _salePrice).gas(msg.gas - 710);\n    require(v3);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x1919fed7 == function_selector) {\n            setSalePrice(uint256);\n        } else if (0x4b4f90ef == function_selector) {\n            saleIsOn();\n        } else if (0x73ffd5b7 == function_selector) {\n            transferEther(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa4d95c76 == function_selector) {\n            setRobotCoinContract(address);\n        } else if (0xbe9a6555 == function_selector) {\n            start();\n        } else if (0xc4e37095 == function_selector) {\n            setSaleState(bool);\n        } else if (0xca87e67e == function_selector) {\n            setSaleTime(uint256,uint256);\n        } else if (0xef78d4fd == function_selector) {\n            period();\n        } else if (0xf0ae03be == function_selector) {\n            robotCoin();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf51f96dd == function_selector) {\n            salePrice();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 01:55 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _salePrice; // STORAGE[0x2]\nuint256 _start; // STORAGE[0x3]\nuint256 _period; // STORAGE[0x4]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _saleIsOn; // STORAGE[0x5] bytes 0 to 0\naddress _robotCoin; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction setSalePrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _salePrice = varg0;\n}\n\nfunction saleIsOn() public nonPayable { \n    return _saleIsOn;\n}\n\nfunction transferEther(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require((address(this)).balance >= varg0);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction setRobotCoinContract(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _robotCoin = varg0;\n}\n\nfunction start() public nonPayable { \n    return _start;\n}\n\nfunction setSaleState(bool varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _saleIsOn = varg0;\n}\n\nfunction setSaleTime(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _start = varg0;\n    _period = varg1;\n}\n\nfunction period() public nonPayable { \n    return _period;\n}\n\nfunction robotCoin() public nonPayable { \n    return _robotCoin;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction salePrice() public nonPayable { \n    return _salePrice;\n}\n\nfunction fallback() public payable { \n    v0 = v1 = block.timestamp > _start;\n    if (v1) {\n        v0 = v2 = block.timestamp < _start + _period * 24 * 60 * 60;\n    }\n    require(v0);\n    require(_saleIsOn);\n    assert(_salePrice);\n    MEM[32 + MEM[64]] = 0;\n    require(_robotCoin.code.size);\n    v3, v4 = _robotCoin.serviceTransfer(msg.sender, msg.value * 1000 / _salePrice).gas(msg.gas - 710);\n    require(v3);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x1919fed7 == function_selector) {\n            setSalePrice(uint256);\n        } else if (0x4b4f90ef == function_selector) {\n            saleIsOn();\n        } else if (0x73ffd5b7 == function_selector) {\n            transferEther(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa4d95c76 == function_selector) {\n            setRobotCoinContract(address);\n        } else if (0xbe9a6555 == function_selector) {\n            start();\n        } else if (0xc4e37095 == function_selector) {\n            setSaleState(bool);\n        } else if (0xca87e67e == function_selector) {\n            setSaleTime(uint256,uint256);\n        } else if (0xef78d4fd == function_selector) {\n            period();\n        } else if (0xf0ae03be == function_selector) {\n            robotCoin();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf51f96dd == function_selector) {\n            salePrice();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 01:55 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _salePrice; // STORAGE[0x2]\nuint256 _start; // STORAGE[0x3]\nuint256 _period; // STORAGE[0x4]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _saleIsOn; // STORAGE[0x5] bytes 0 to 0\naddress _robotCoin; // STORAGE[0x1] bytes 0 to 19\n\n\nfunction setSalePrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _salePrice = varg0;\n}\n\nfunction saleIsOn() public nonPayable { \n    return _saleIsOn;\n}\n\nfunction transferEther(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require((address(this)).balance >= varg0);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction setRobotCoinContract(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _robotCoin = varg0;\n}\n\nfunction start() public nonPayable { \n    return _start;\n}\n\nfunction setSaleState(bool varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _saleIsOn = varg0;\n}\n\nfunction setSaleTime(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _start = varg0;\n    _period = varg1;\n}\n\nfunction period() public nonPayable { \n    return _period;\n}\n\nfunction robotCoin() public nonPayable { \n    return _robotCoin;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction salePrice() public nonPayable { \n    return _salePrice;\n}\n\nfunction fallback() public payable { \n    v0 = v1 = block.timestamp > _start;\n    if (v1) {\n        v0 = v2 = block.timestamp < _start + _period * 24 * 60 * 60;\n    }\n    require(v0);\n    require(_saleIsOn);\n    assert(_salePrice);\n    MEM[32 + MEM[64]] = 0;\n    require(_robotCoin.code.size);\n    v3, v4 = _robotCoin.serviceTransfer(msg.sender, msg.value * 1000 / _salePrice).gas(msg.gas - 710);\n    require(v3);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x1919fed7 == function_selector) {\n            setSalePrice(uint256);\n        } else if (0x4b4f90ef == function_selector) {\n            saleIsOn();\n        } else if (0x73ffd5b7 == function_selector) {\n            transferEther(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa4d95c76 == function_selector) {\n            setRobotCoinContract(address);\n        } else if (0xbe9a6555 == function_selector) {\n            start();\n        } else if (0xc4e37095 == function_selector) {\n            setSaleState(bool);\n        } else if (0xca87e67e == function_selector) {\n            setSaleTime(uint256,uint256);\n        } else if (0xef78d4fd == function_selector) {\n            period();\n        } else if (0xf0ae03be == function_selector) {\n            robotCoin();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf51f96dd == function_selector) {\n            salePrice();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 27.236703395843506,
	"usage": {
		"completion_tokens": 668,
		"prompt_tokens": 987,
		"total_tokens": 1655
	}
}