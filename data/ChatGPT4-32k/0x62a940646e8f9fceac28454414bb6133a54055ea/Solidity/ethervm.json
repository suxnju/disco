{
	"address": "0x62a940646e8f9fceac28454414bb6133a54055ea",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity code corresponding to your provided decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(bytes32 => uint) public storageMap;\n    address public owner;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function set(bytes32 _key, uint _value) public onlyOwner {\n        storageMap[_key] = _value;\n    }\n\n    function get(bytes32 _key) public view returns (uint) {\n        return storageMap[_key];\n    }\n}\n```\n\nThis Solidity code creates a contract where there is a mapping that allows a key-value pair to be stored. The contract also contains an owner property that is set at the time of contract deployment. The set function allows only the owner to modify the mapping. The get function can be used by anyone to retrieve a value from the mapping by providing the key.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473686,
	"id": "chatcmpl-8MvAsVtrTPAI4GXFOet2t4VMqYGuD",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x783ce458 > var0) {\n            if (var0 == 0x01345d85) {\n                // Dispatch table entry for challenges_length()\n                var var1 = 0x00b6;\n                var var2 = challenges_length();\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x3b2e10d8) {\n                // Dispatch table entry for 0x3b2e10d8 (unknown)\n                var1 = 0x021c;\n                var2 = 0x04;\n                var var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = func_00E2(var2, var3);\n                var temp2 = memory[0x40:0x60];\n                var2 = temp2;\n                var3 = var2;\n                var temp3 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp3 - var3;\n                var temp4 = var1;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var4 = temp3 + 0x20;\n                var var5 = temp4 + 0x20;\n                var var6 = memory[temp4:temp4 + 0x20];\n                var var7 = var6;\n                var var8 = var4;\n                var var9 = var5;\n                var var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_025C:\n                    var temp5 = var6;\n                    var4 = temp5 + var4;\n                    var5 = temp5 & 0x1f;\n                \n                    if (!var5) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var4 - temp6];\n                    } else {\n                        var temp7 = var5;\n                        var temp8 = var4 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_024A:\n                    var temp10 = var10;\n                    memory[var8 + temp10:var8 + temp10 + 0x20] = memory[var9 + temp10:var9 + temp10 + 0x20];\n                    var10 = temp10 + 0x20;\n                \n                    if (var10 >= var7) { goto label_025C; }\n                    else { goto label_024A; }\n                }\n            } else if (var0 == 0x5fce693d) {\n                // Dispatch table entry for claim_bounty(bytes32)\n                var1 = 0x02c3;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                claim_bounty(var2, var3);\n                stop();\n            } else if (var0 == 0x606748cf) {\n                // Dispatch table entry for 0x606748cf (unknown)\n                var1 = 0x041f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = func_02DB(var2, var3);\n                var temp11 = memory[0x40:0x60];\n                var2 = temp11;\n                var3 = var2;\n                var temp12 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp12 - var3;\n                var temp13 = var1;\n                memory[temp12:temp12 + 0x20] = memory[temp13:temp13 + 0x20];\n                var4 = temp12 + 0x20;\n                var5 = temp13 + 0x20;\n                var6 = memory[temp13:temp13 + 0x20];\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_045F:\n                    var temp14 = var6;\n                    var4 = temp14 + var4;\n                    var5 = temp14 & 0x1f;\n                \n                    if (!var5) {\n                        var temp15 = memory[0x40:0x60];\n                        return memory[temp15:temp15 + var4 - temp15];\n                    } else {\n                        var temp16 = var5;\n                        var temp17 = var4 - temp16;\n                        memory[temp17:temp17 + 0x20] = ~(0x0100 ** (0x20 - temp16) - 0x01) & memory[temp17:temp17 + 0x20];\n                        var temp18 = memory[0x40:0x60];\n                        return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n                    }\n                } else {\n                label_044D:\n                    var temp19 = var10;\n                    memory[var8 + temp19:var8 + temp19 + 0x20] = memory[var9 + temp19:var9 + temp19 + 0x20];\n                    var10 = temp19 + 0x20;\n                \n                    if (var10 >= var7) { goto label_045F; }\n                    else { goto label_044D; }\n                }\n            } else if (var0 == 0x71b8fb01) {\n                // Dispatch table entry for terminate_contract()\n                var1 = 0x04a2;\n            \n                if (msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { selfdestruct(msg.sender); }\n                else { revert(memory[0x00:0x00]); }\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x783ce458) {\n            // Dispatch table entry for expmod(uint256,uint256,uint256)\n            var1 = 0x04e4;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n        \n            var1 = expmod(var2, var3);\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = var1;\n            var temp21 = memory[0x40:0x60];\n            return memory[temp21:temp21 + (temp20 + 0x20) - temp21];\n        } else if (var0 == 0x8f1d3776) {\n            // Dispatch table entry for challenges(uint256)\n            var1 = 0x0526;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2, var3, var4 = challenges(var2, var3);\n            var temp22 = memory[0x40:0x60];\n            var5 = temp22;\n            var6 = var5;\n            var temp23 = var6 + 0x20;\n            memory[temp23:temp23 + 0x20] = !!var3;\n            var temp24 = temp23 + 0x20;\n            memory[temp24:temp24 + 0x20] = var4;\n            var temp25 = temp24 + 0x20;\n            memory[var6:var6 + 0x20] = temp25 - var6;\n            var temp26 = var2;\n            memory[temp25:temp25 + 0x20] = memory[temp26:temp26 + 0x20];\n            var7 = temp25 + 0x20;\n            var8 = temp26 + 0x20;\n            var9 = memory[temp26:temp26 + 0x20];\n            var10 = var9;\n            var var11 = var7;\n            var var12 = var8;\n            var var13 = 0x00;\n        \n            if (var13 >= var10) {\n            label_0576:\n                var temp27 = var9;\n                var7 = temp27 + var7;\n                var8 = temp27 & 0x1f;\n            \n                if (!var8) {\n                    var temp28 = memory[0x40:0x60];\n                    return memory[temp28:temp28 + var7 - temp28];\n                } else {\n                    var temp29 = var8;\n                    var temp30 = var7 - temp29;\n                    memory[temp30:temp30 + 0x20] = ~(0x0100 ** (0x20 - temp29) - 0x01) & memory[temp30:temp30 + 0x20];\n                    var temp31 = memory[0x40:0x60];\n                    return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n                }\n            } else {\n            label_0564:\n                var temp32 = var13;\n                memory[var11 + temp32:var11 + temp32 + 0x20] = memory[var12 + temp32:var12 + temp32 + 0x20];\n                var13 = temp32 + 0x20;\n            \n                if (var13 >= var10) { goto label_0576; }\n                else { goto label_0564; }\n            }\n        } else if (var0 == 0xa355312a) {\n            // Dispatch table entry for 0xa355312a (unknown)\n            var1 = 0x05df;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = func_05C9(var2, var3);\n        \n        label_05DF:\n            var temp33 = memory[0x40:0x60];\n            memory[temp33:temp33 + 0x20] = !!var1;\n            var temp34 = memory[0x40:0x60];\n            return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n        } else if (var0 == 0xdf199a1f) {\n            // Dispatch table entry for 0xdf199a1f (unknown)\n            var1 = 0x0749;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = func_060F(var2, var3);\n        \n        label_0749:\n            var temp35 = memory[0x40:0x60];\n            memory[temp35:temp35 + 0x20] = var1;\n            var temp36 = memory[0x40:0x60];\n            return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n        } else if (var0 == 0xe20da751) {\n            // Dispatch table entry for 0xe20da751 (unknown)\n            var1 = 0x08c3;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n        \n            func_0775(var2, var3);\n            stop();\n        } else if (var0 == 0xeff0f592) {\n            // Dispatch table entry for claims(bytes32)\n            var1 = 0x08f1;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = claims(var2, var3);\n            var temp37 = memory[0x40:0x60];\n            memory[temp37:temp37 + 0x20] = var2;\n            var temp38 = memory[0x40:0x60];\n            return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_00E2(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = temp0 + arg1;\n        arg1 = temp0;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1 + var1;\n        var1 = temp1;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var1 = temp3;\n        var var2 = var0;\n        var0 = temp2 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = var2;\n        var temp5 = var1;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var0:var0 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        var temp8 = arg1;\n        arg1 = arg0;\n        arg0 = temp6;\n        var0 = temp8;\n        var1 = temp4 + 0x20;\n        var2 = msg.data[temp4:temp4 + 0x20];\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = var0 + var2;\n        var2 = temp9;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp10 = var2;\n        var temp11 = msg.data[temp10:temp10 + 0x20];\n        var2 = temp11;\n        var temp12 = var1;\n        var1 = temp10 + 0x20;\n        var var3 = temp12;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var2;\n        var temp14 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp14 + (temp13 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp14:temp14 + 0x20] = temp13;\n        var temp15 = temp14 + 0x20;\n        memory[temp15:temp15 + temp13] = msg.data[var1:var1 + temp13];\n        memory[temp15 + temp13:temp15 + temp13 + 0x20] = 0x00;\n        arg1 = temp14;\n        r0 = func_090D(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function claim_bounty(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] != 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = block.timestamp + 0x015180;\n    }\n    \n    function func_02DB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        var temp7 = var1;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var0:var0 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = arg1;\n        var temp11 = arg0;\n        arg0 = temp8;\n        var temp12 = temp6 + 0x20;\n        arg1 = msg.data[temp6:temp6 + 0x20];\n        var0 = temp11;\n        var1 = temp10;\n        var var3 = msg.data[temp12:temp12 + 0x20];\n        var2 = temp12 + 0x20;\n    \n        if (var3 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var1 + var3;\n        var3 = temp13;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var3;\n        var temp15 = msg.data[temp14:temp14 + 0x20];\n        var3 = temp15;\n        var var4 = var2;\n        var2 = temp14 + 0x20;\n    \n        if ((var3 > 0x0100000000) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp16 = var3;\n        var temp17 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp17:temp17 + 0x20] = temp16;\n        var temp18 = temp17 + 0x20;\n        memory[temp18:temp18 + temp16] = msg.data[var2:var2 + temp16];\n        memory[temp18 + temp16:temp18 + temp16 + 0x20] = 0x00;\n        var0 = temp17;\n        var1 = 0x60;\n        var temp19 = memory[0x40:0x60];\n        var2 = temp19;\n        var temp20 = arg0;\n        var temp21 = memory[temp20:temp20 + 0x20];\n        var3 = temp21;\n        var temp22 = memory[var0:var0 + 0x20];\n        var4 = temp22;\n        memory[var2:var2 + 0x20] = var3;\n        memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x20;\n        memory[var2 + 0x40:var2 + 0x40 + 0x20] = var4;\n        var temp23;\n        temp23, memory[var2 + 0x60:var2 + 0x60 + var3] = address(0x04).staticcall.gas(0x2710)(memory[temp20 + 0x20:temp20 + 0x20 + var3]);\n    \n        if (!temp23) { revert(memory[0x00:0x00]); }\n    \n        var temp24 = var3;\n        var temp25 = var2;\n        memory[temp25 + temp24 + 0x60:temp25 + temp24 + 0x60 + 0x20] = arg1;\n        var temp26 = var4;\n        var temp27;\n        temp27, memory[temp25 + 0x80 + temp24:temp25 + 0x80 + temp24 + temp26] = address(0x04).staticcall.gas(0x2710)(memory[var0 + 0x20:var0 + 0x20 + temp26]);\n    \n        if (!temp27) { revert(memory[0x00:0x00]); }\n    \n        var temp28 = var4;\n        var temp29 = var2;\n        var temp30;\n        temp30, memory[temp29 + 0x20:temp29 + 0x20 + temp28] = address(0x05).staticcall.gas(msg.gas - 0x07d0)(memory[temp29:temp29 + var3 + 0x80 + temp28]);\n    \n        if (!temp30) { revert(memory[0x00:0x00]); }\n    \n        var temp31 = var4;\n        var temp32 = var2;\n        memory[0x40:0x60] = temp32 + temp31 + 0x20;\n        memory[temp32:temp32 + 0x20] = temp31;\n        return temp32;\n    }\n    \n    function expmod(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp1:temp1 + 0x20];\n        var var0 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        r0 = func_0B4A(arg0, arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function challenges(var arg0, var arg1) returns (var arg0, var arg1, var r2) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        arg0 = keccak256(memory[0x00:0x40]);\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        arg1 = temp3;\n        r2 = temp0;\n        var var1 = temp2;\n        memory[arg1:arg1 + 0x20] = var1;\n        var var2 = arg1 + 0x20;\n        var var3 = r2;\n        var temp4 = storage[var3];\n        var var4 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var4) {\n        label_0C41:\n            var temp5 = arg0;\n            arg0 = arg1;\n            arg1 = storage[temp5 + 0x01] & 0xff;\n            r2 = storage[temp5 + 0x02];\n            return arg0, arg1, r2;\n        } else if (0x1f < var4) {\n            var temp6 = var2;\n            var temp7 = temp6 + var4;\n            var2 = temp7;\n            memory[0x00:0x20] = var3;\n            var temp8 = keccak256(memory[0x00:0x20]);\n            memory[temp6:temp6 + 0x20] = storage[temp8];\n            var3 = temp8 + 0x01;\n            var4 = temp6 + 0x20;\n        \n            if (var2 <= var4) { goto label_0C38; }\n        \n        label_0C24:\n            var temp9 = var3;\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[temp9];\n            var3 = temp9 + 0x01;\n            var4 = temp10 + 0x20;\n        \n            if (var2 > var4) { goto label_0C24; }\n        \n        label_0C38:\n            var temp11 = var2;\n            var temp12 = temp11 + (var4 - temp11 & 0x1f);\n            var4 = temp11;\n            var2 = temp12;\n            goto label_0C41;\n        } else {\n            var temp13 = var2;\n            memory[temp13:temp13 + 0x20] = storage[var3] / 0x0100 * 0x0100;\n            var2 = temp13 + 0x20;\n            var4 = var4;\n            goto label_0C41;\n        }\n    }\n    \n    function func_05C9(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_0C64(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_060F(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        var temp7 = var1;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var0:var0 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = arg1;\n        arg1 = arg0;\n        arg0 = temp8;\n        var0 = temp10;\n        var2 = msg.data[temp6:temp6 + 0x20];\n        var1 = temp6 + 0x20;\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp11 = var0 + var2;\n        var2 = temp11;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var2;\n        var temp13 = msg.data[temp12:temp12 + 0x20];\n        var2 = temp13;\n        var var3 = var1;\n        var1 = temp12 + 0x20;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var2;\n        var temp15 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp15 + (temp14 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp15:temp15 + 0x20] = temp14;\n        var temp16 = temp15 + 0x20;\n        memory[temp16:temp16 + temp14] = msg.data[var1:var1 + temp14];\n        memory[temp16 + temp14:temp16 + temp14 + 0x20] = 0x00;\n        arg1 = temp15;\n        r0 = func_0E3F(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0775(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var1 = temp1 + 0x20;\n        var var2 = msg.data[temp1:temp1 + 0x20];\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var0 + var2;\n        var2 = temp2;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var2;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var2 = temp4;\n        var temp5 = var1;\n        var1 = temp3 + 0x20;\n        var var3 = temp5;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var3;\n        var temp7 = var2;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var1:var1 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = var0;\n        var0 = arg1;\n        arg1 = temp8;\n        var1 = temp10;\n        var2 = temp6 + 0x20;\n        var3 = msg.data[temp6:temp6 + 0x20];\n    \n        if (var3 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp11 = var1 + var3;\n        var3 = temp11;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var3;\n        var temp13 = msg.data[temp12:temp12 + 0x20];\n        var3 = temp13;\n        var var4 = var2;\n        var2 = temp12 + 0x20;\n    \n        if ((var3 > 0x0100000000) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var3;\n        var temp15 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp15 + (temp14 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp15:temp15 + 0x20] = temp14;\n        var temp16 = temp15 + 0x20;\n        memory[temp16:temp16 + temp14] = msg.data[var2:var2 + temp14];\n        memory[temp16 + temp14:temp16 + temp14 + 0x20] = 0x00;\n        var0 = temp15;\n        var1 = msg.data[var4:var4 + 0x20];\n    \n        if (arg0 >= storage[0x02]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x00;\n        var3 = 0x02;\n        var4 = arg0;\n        var temp17 = arg1;\n        var var5 = temp17;\n        var var6 = var0;\n        var var7 = var1;\n        var var8 = msg.sender << 0x00;\n        var temp18 = memory[0x40:0x60] + 0x20;\n        var var9 = temp18;\n        memory[var9:var9 + 0x20] = var4;\n        var var10 = var9 + 0x20;\n        var var12 = memory[var5:var5 + 0x20];\n        var var11 = var5 + 0x20;\n        var var13 = var12;\n        var var14 = var10;\n        var var15 = var11;\n    \n        if (var13 < 0x20) {\n        label_0F89:\n            var temp19 = 0x0100 ** (0x20 - var13) - 0x01;\n            var temp20 = var14;\n            memory[temp20:temp20 + 0x20] = (memory[var15:var15 + 0x20] & ~temp19) | (memory[temp20:temp20 + 0x20] & temp19);\n            var temp21 = var12 + var10;\n            var10 = temp21;\n            var temp22 = var6;\n            var12 = memory[temp22:temp22 + 0x20];\n            var11 = temp22 + 0x20;\n            var13 = var12;\n            var14 = var10;\n            var15 = var11;\n        \n            if (var13 < 0x20) {\n            label_0FDA:\n                var temp23 = 0x0100 ** (0x20 - var13) - 0x01;\n                var temp24 = var14;\n                memory[temp24:temp24 + 0x20] = (memory[var15:var15 + 0x20] & ~temp23) | (memory[temp24:temp24 + 0x20] & temp23);\n                var temp25 = var12 + var10;\n                memory[temp25:temp25 + 0x20] = var7;\n                var temp26 = temp25 + 0x20;\n                memory[temp26:temp26 + 0x20] = var8;\n                var temp27 = temp26 + 0x20;\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = temp27 - temp28 - 0x20;\n                var4 = temp28;\n                memory[0x40:0x60] = temp27;\n                var5 = memory[0x40:0x60];\n                var6 = var5;\n                var7 = var4 + 0x20;\n                var8 = memory[var4:var4 + 0x20];\n                var9 = var8;\n                var10 = var6;\n                var11 = var7;\n            \n                if (var9 < 0x20) {\n                label_1051:\n                    var temp29 = 0x0100 ** (0x20 - var9) - 0x01;\n                    var temp30 = var10;\n                    memory[temp30:temp30 + 0x20] = (memory[var11:var11 + 0x20] & ~temp29) | (memory[temp30:temp30 + 0x20] & temp29);\n                    var4 = var8 + var6;\n                    var temp31 = memory[0x40:0x60];\n                    var temp32;\n                    temp32, memory[temp31:temp31 + 0x20] = address(var3).staticcall.gas(msg.gas)(memory[temp31:temp31 + var4 - temp31]);\n                    var5 = !temp32;\n                \n                    if (!var5) {\n                        var3 = memory[0x40:0x60];\n                        var4 = returndata.length;\n                    \n                        if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = memory[var3:var3 + 0x20];\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x03;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x03;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] >= block.timestamp) { revert(memory[0x00:0x00]); }\n                    \n                        var3 = 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000;\n                        var4 = 0x02;\n                        var temp33 = arg1;\n                        var5 = temp33;\n                        var6 = memory[0x40:0x60];\n                        var7 = var6;\n                        var9 = memory[var5:var5 + 0x20];\n                        var8 = var5 + 0x20;\n                        var10 = var9;\n                        var11 = var7;\n                        var12 = var8;\n                    \n                        if (var10 < 0x20) {\n                        label_1151:\n                            var temp34 = 0x0100 ** (0x20 - var10) - 0x01;\n                            var temp35 = var11;\n                            memory[temp35:temp35 + 0x20] = (memory[var12:var12 + 0x20] & ~temp34) | (memory[temp35:temp35 + 0x20] & temp34);\n                            var5 = var9 + var7;\n                            var temp36 = memory[0x40:0x60];\n                            var temp37;\n                            temp37, memory[temp36:temp36 + 0x20] = address(var4).staticcall.gas(msg.gas)(memory[temp36:temp36 + var5 - temp36]);\n                            var6 = !temp37;\n                        \n                            if (!var6) {\n                                var4 = memory[0x40:0x60];\n                                var5 = returndata.length;\n                            \n                                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                            \n                                if (var1 & 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000 != (memory[var4:var4 + 0x20] >> 0x00) & var3) { revert(memory[0x00:0x00]); }\n                            \n                                if (var1 <= 0x8000000000000000000000000000000000000000000000000000000000000000) { revert(memory[0x00:0x00]); }\n                            \n                                var3 = 0x121f;\n                                var4 = var1;\n                                var3 = func_0C64(var4);\n                            \n                            label_121F:\n                            \n                                if (!var3) { revert(memory[0x00:0x00]); }\n                            \n                                var3 = 0x01;\n                                var4 = 0x1269;\n                                var5 = arg1;\n                                var temp38 = memory[0x40:0x60];\n                                var6 = temp38;\n                                memory[0x40:0x60] = var6 + 0x40;\n                                memory[var6:var6 + 0x20] = 0x01;\n                                memory[var6 + 0x20:var6 + 0x20 + 0x20] = 0x0100000000000000000000000000000000000000000000000000000000000000;\n                                var4 = func_0E3F(var5, var6);\n                            \n                            label_1269:\n                            \n                                if (var4 != var3) { revert(memory[0x00:0x00]); }\n                            \n                                var3 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n                                var4 = 0x138a;\n                                var5 = 0x12d6;\n                                var6 = arg1;\n                                var temp39 = memory[0x40:0x60];\n                                var7 = temp39;\n                                memory[0x40:0x60] = var7 + 0x40;\n                                memory[var7:var7 + 0x20] = 0x01;\n                                memory[var7 + 0x20:var7 + 0x20 + 0x20] = 0x0100000000000000000000000000000000000000000000000000000000000000;\n                                var5 = func_090D(var6, var7);\n                                var4 = func_12D6(arg0, var5);\n                            \n                                if (var4 != var3) { revert(memory[0x00:0x00]); }\n                            \n                                var3 = 0x60;\n                                var4 = 0x144f;\n                                var5 = var0;\n                                var6 = var1;\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x01;\n                                var temp40 = keccak256(memory[0x00:0x40]);\n                                var temp41 = storage[temp40];\n                                var temp42 = (!(temp41 & 0x01) * 0x0100 - 0x01 & temp41) / 0x02;\n                                var temp43 = memory[0x40:0x60];\n                                memory[0x40:0x60] = temp43 + (temp42 + 0x1f) / 0x20 * 0x20 + 0x20;\n                                var7 = temp43;\n                                var8 = temp40;\n                                var9 = temp42;\n                                memory[var7:var7 + 0x20] = var9;\n                                var10 = var7 + 0x20;\n                                var11 = var8;\n                                var temp44 = storage[var11];\n                                var12 = (!(temp44 & 0x01) * 0x0100 - 0x01 & temp44) / 0x02;\n                            \n                                if (!var12) {\n                                    var8 = 0x60;\n                                    var temp45 = memory[0x40:0x60];\n                                    var9 = temp45;\n                                    var temp46 = var5;\n                                    var temp47 = memory[temp46:temp46 + 0x20];\n                                    var10 = temp47;\n                                    var temp48 = memory[var7:var7 + 0x20];\n                                    var11 = temp48;\n                                    memory[var9:var9 + 0x20] = var10;\n                                    memory[var9 + 0x20:var9 + 0x20 + 0x20] = 0x20;\n                                    memory[var9 + 0x40:var9 + 0x40 + 0x20] = var11;\n                                    var temp49;\n                                    temp49, memory[var9 + 0x60:var9 + 0x60 + var10] = address(0x04).staticcall.gas(0x2710)(memory[temp46 + 0x20:temp46 + 0x20 + var10]);\n                                \n                                    if (!temp49) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp50 = var10;\n                                    var temp51 = var9;\n                                    memory[temp51 + temp50 + 0x60:temp51 + temp50 + 0x60 + 0x20] = var6;\n                                    var temp52 = var11;\n                                    var temp53;\n                                    temp53, memory[temp51 + 0x80 + temp50:temp51 + 0x80 + temp50 + temp52] = address(0x04).staticcall.gas(0x2710)(memory[var7 + 0x20:var7 + 0x20 + temp52]);\n                                \n                                    if (!temp53) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp54 = var11;\n                                    var temp55 = var9;\n                                    var temp56;\n                                    temp56, memory[temp55 + 0x20:temp55 + 0x20 + temp54] = address(0x05).staticcall.gas(msg.gas - 0x07d0)(memory[temp55:temp55 + var10 + 0x80 + temp54]);\n                                \n                                    if (!temp56) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp57 = var11;\n                                    var temp58 = var9;\n                                    memory[0x40:0x60] = temp58 + temp57 + 0x20;\n                                    memory[temp58:temp58 + 0x20] = temp57;\n                                    var4 = temp58;\n                                    // Error: Could not resolve jump destination!\n                                } else {\n                                    var4 = func_13FF(var5, var6, var7, var8, var9, var10, var11, var12);\n                                    var3 = var4;\n                                    var4 = 0x02;\n                                    var temp59 = arg1;\n                                    var5 = temp59;\n                                    var6 = memory[0x40:0x60] + 0x20;\n                                    var7 = var6;\n                                    var9 = memory[var5:var5 + 0x20];\n                                    var8 = var5 + 0x20;\n                                    var10 = var9;\n                                    var11 = var7;\n                                    var12 = var8;\n                                \n                                    if (var10 < 0x20) {\n                                    label_148A:\n                                        var temp60 = 0x0100 ** (0x20 - var10) - 0x01;\n                                        var temp61 = var11;\n                                        memory[temp61:temp61 + 0x20] = (memory[var12:var12 + 0x20] & ~temp60) | (memory[temp61:temp61 + 0x20] & temp60);\n                                        var temp62 = var9 + var7;\n                                        var temp63 = memory[0x40:0x60];\n                                        memory[temp63:temp63 + 0x20] = temp62 - temp63 - 0x20;\n                                        var5 = temp63;\n                                        memory[0x40:0x60] = temp62;\n                                        var6 = memory[0x40:0x60];\n                                        var7 = var6;\n                                        var8 = var5 + 0x20;\n                                        var9 = memory[var5:var5 + 0x20];\n                                        var10 = var9;\n                                        var11 = var7;\n                                        var12 = var8;\n                                    \n                                        if (var10 < 0x20) {\n                                        label_14F1:\n                                            var temp64 = 0x0100 ** (0x20 - var10) - 0x01;\n                                            var temp65 = var11;\n                                            memory[temp65:temp65 + 0x20] = (memory[var12:var12 + 0x20] & ~temp64) | (memory[temp65:temp65 + 0x20] & temp64);\n                                            var5 = var9 + var7;\n                                            var temp66 = memory[0x40:0x60];\n                                            var temp67;\n                                            temp67, memory[temp66:temp66 + 0x20] = address(var4).staticcall.gas(msg.gas)(memory[temp66:temp66 + var5 - temp66]);\n                                            var6 = !temp67;\n                                        \n                                            if (!var6) {\n                                                var4 = memory[0x40:0x60];\n                                                var5 = returndata.length;\n                                            \n                                                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                                            \n                                                var4 = memory[var4:var4 + 0x20];\n                                                var5 = 0x02;\n                                                var temp68 = var3;\n                                                var6 = temp68;\n                                                var7 = memory[0x40:0x60] + 0x20;\n                                                var8 = var7;\n                                                var9 = var6 + 0x20;\n                                                var10 = memory[var6:var6 + 0x20];\n                                                var11 = var10;\n                                                var12 = var8;\n                                                var13 = var9;\n                                            \n                                                if (var11 < 0x20) {\n                                                label_1592:\n                                                    var temp69 = 0x0100 ** (0x20 - var11) - 0x01;\n                                                    var temp70 = var12;\n                                                    memory[temp70:temp70 + 0x20] = (memory[var13:var13 + 0x20] & ~temp69) | (memory[temp70:temp70 + 0x20] & temp69);\n                                                    var temp71 = var10 + var8;\n                                                    var temp72 = memory[0x40:0x60];\n                                                    memory[temp72:temp72 + 0x20] = temp71 - temp72 - 0x20;\n                                                    var6 = temp72;\n                                                    memory[0x40:0x60] = temp71;\n                                                    var7 = memory[0x40:0x60];\n                                                    var8 = var7;\n                                                    var10 = memory[var6:var6 + 0x20];\n                                                    var9 = var6 + 0x20;\n                                                    var11 = var10;\n                                                    var12 = var8;\n                                                    var13 = var9;\n                                                \n                                                    if (var11 < 0x20) {\n                                                    label_15F9:\n                                                        var temp73 = 0x0100 ** (0x20 - var11) - 0x01;\n                                                        var temp74 = var12;\n                                                        memory[temp74:temp74 + 0x20] = (memory[var13:var13 + 0x20] & ~temp73) | (memory[temp74:temp74 + 0x20] & temp73);\n                                                        var6 = var10 + var8;\n                                                        var temp75 = memory[0x40:0x60];\n                                                        var temp76;\n                                                        temp76, memory[temp75:temp75 + 0x20] = address(var5).staticcall.gas(msg.gas)(memory[temp75:temp75 + var6 - temp75]);\n                                                        var7 = !temp76;\n                                                    \n                                                        if (!var7) {\n                                                            var5 = memory[0x40:0x60];\n                                                            var6 = returndata.length;\n                                                        \n                                                            if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            if (memory[var5:var5 + 0x20] != var4) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp77 = arg0;\n                                                            memory[0x00:0x20] = temp77;\n                                                            memory[0x20:0x40] = 0x01;\n                                                            var temp78 = keccak256(memory[0x00:0x40]) + 0x01;\n                                                            storage[temp78] = (storage[temp78] & ~0xff) | 0x01;\n                                                            memory[0x00:0x20] = temp77;\n                                                            memory[0x20:0x40] = 0x01;\n                                                            var temp79 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                                                            var temp80 = memory[0x40:0x60];\n                                                            var temp81;\n                                                            temp81, memory[temp80:temp80 + 0x00] = address(msg.sender).call.gas(!temp79 * 0x08fc).value(temp79)(memory[temp80:temp80 + memory[0x40:0x60] - temp80]);\n                                                            var4 = !temp81;\n                                                        \n                                                            if (!var4) { return; }\n                                                        \n                                                            var temp82 = returndata.length;\n                                                            memory[0x00:0x00 + temp82] = returndata[0x00:0x00 + temp82];\n                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                        } else {\n                                                            var temp83 = returndata.length;\n                                                            memory[0x00:0x00 + temp83] = returndata[0x00:0x00 + temp83];\n                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                        }\n                                                    } else {\n                                                    label_15DF:\n                                                        var temp84 = var13;\n                                                        var temp85 = var12;\n                                                        memory[temp85:temp85 + 0x20] = memory[temp84:temp84 + 0x20];\n                                                        var12 = temp85 + 0x20;\n                                                        var13 = temp84 + 0x20;\n                                                        var11 = var11 - 0x20;\n                                                    \n                                                        if (var11 < 0x20) { goto label_15F9; }\n                                                        else { goto label_15DF; }\n                                                    }\n                                                } else {\n                                                label_1578:\n                                                    var temp86 = var13;\n                                                    var temp87 = var12;\n                                                    memory[temp87:temp87 + 0x20] = memory[temp86:temp86 + 0x20];\n                                                    var12 = temp87 + 0x20;\n                                                    var13 = temp86 + 0x20;\n                                                    var11 = var11 - 0x20;\n                                                \n                                                    if (var11 < 0x20) { goto label_1592; }\n                                                    else { goto label_1578; }\n                                                }\n                                            } else {\n                                                var temp88 = returndata.length;\n                                                memory[0x00:0x00 + temp88] = returndata[0x00:0x00 + temp88];\n                                                revert(memory[0x00:0x00 + returndata.length]);\n                                            }\n                                        } else {\n                                        label_14D7:\n                                            var temp89 = var12;\n                                            var temp90 = var11;\n                                            memory[temp90:temp90 + 0x20] = memory[temp89:temp89 + 0x20];\n                                            var11 = temp90 + 0x20;\n                                            var12 = temp89 + 0x20;\n                                            var10 = var10 - 0x20;\n                                        \n                                            if (var10 < 0x20) { goto label_14F1; }\n                                            else { goto label_14D7; }\n                                        }\n                                    } else {\n                                    label_1470:\n                                        var temp91 = var12;\n                                        var temp92 = var11;\n                                        memory[temp92:temp92 + 0x20] = memory[temp91:temp91 + 0x20];\n                                        var11 = temp92 + 0x20;\n                                        var12 = temp91 + 0x20;\n                                        var10 = var10 - 0x20;\n                                    \n                                        if (var10 < 0x20) { goto label_148A; }\n                                        else { goto label_1470; }\n                                    }\n                                }\n                            } else {\n                                var temp93 = returndata.length;\n                                memory[0x00:0x00 + temp93] = returndata[0x00:0x00 + temp93];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                        label_1137:\n                            var temp94 = var12;\n                            var temp95 = var11;\n                            memory[temp95:temp95 + 0x20] = memory[temp94:temp94 + 0x20];\n                            var11 = temp95 + 0x20;\n                            var12 = temp94 + 0x20;\n                            var10 = var10 - 0x20;\n                        \n                            if (var10 < 0x20) { goto label_1151; }\n                            else { goto label_1137; }\n                        }\n                    } else {\n                        var temp96 = returndata.length;\n                        memory[0x00:0x00 + temp96] = returndata[0x00:0x00 + temp96];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                label_1037:\n                    var temp97 = var11;\n                    var temp98 = var10;\n                    memory[temp98:temp98 + 0x20] = memory[temp97:temp97 + 0x20];\n                    var10 = temp98 + 0x20;\n                    var11 = temp97 + 0x20;\n                    var9 = var9 - 0x20;\n                \n                    if (var9 < 0x20) { goto label_1051; }\n                    else { goto label_1037; }\n                }\n            } else {\n            label_0FC0:\n                var temp99 = var15;\n                var temp100 = var14;\n                memory[temp100:temp100 + 0x20] = memory[temp99:temp99 + 0x20];\n                var14 = temp100 + 0x20;\n                var15 = temp99 + 0x20;\n                var13 = var13 - 0x20;\n            \n                if (var13 < 0x20) { goto label_0FDA; }\n                else { goto label_0FC0; }\n            }\n        } else {\n        label_0F6F:\n            var temp101 = var15;\n            var temp102 = var14;\n            memory[temp102:temp102 + 0x20] = memory[temp101:temp101 + 0x20];\n            var14 = temp102 + 0x20;\n            var15 = temp101 + 0x20;\n            var13 = var13 - 0x20;\n        \n            if (var13 < 0x20) { goto label_0F89; }\n            else { goto label_0F6F; }\n        }\n    }\n    \n    function claims(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function challenges_length() returns (var r0) { return storage[0x02]; }\n    \n    function func_090D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x00;\n        var var2 = 0x01;\n        var var3 = 0x091f;\n        var var4 = memory[arg0:arg0 + 0x20];\n        var var5 = memory[arg1:arg1 + 0x20];\n        var3 = func_1716(var4, var5);\n        var temp0 = var3 + var2;\n        var1 = temp0;\n        var2 = 0x60;\n        var temp1 = memory[0x40:0x60];\n        var4 = var1;\n        var3 = temp1;\n        memory[var3:var3 + 0x20] = var4;\n        memory[0x40:0x60] = var3 + (var4 + 0x1f & ~0x1f) + 0x20;\n    \n        if (!var4) {\n            var2 = var3;\n            var3 = 0x00;\n            var4 = 0x00;\n        \n            if (var4 >= var1) {\n            label_0A01:\n                return var2;\n            } else {\n            label_096E:\n                var5 = 0x00;\n                var var6 = 0x0979;\n                var var7 = arg0;\n                var var8 = var4;\n                var6 = func_172F(var7, var8);\n                var5 = var6;\n                var6 = 0x00;\n                var7 = 0x0987;\n                var8 = arg1;\n                var var9 = var4;\n                var7 = func_172F(var8, var9);\n                var6 = var7;\n                var temp2 = (var5 & 0xff) + (var6 & 0xff) + var3;\n                var7 = temp2;\n                var8 = var7 << 0xf8;\n                var temp3 = var2;\n                var9 = temp3;\n                var var10 = memory[var9:var9 + 0x20] - var4 - 0x01;\n            \n                if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n            \n                memory[var10 + 0x20 + var9:var10 + 0x20 + var9 + 0x01] = byte(var8 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x00);\n                var3 = var7 >> 0x08;\n            \n                if (var3 >= 0x02) { revert(memory[0x00:0x00]); }\n            \n                var4 = var4 + 0x01;\n            \n                if (var4 >= var1) { goto label_0A01; }\n                else { goto label_096E; }\n            }\n        } else {\n            var temp4 = var4;\n            memory[var3 + 0x20:var3 + 0x20 + temp4] = code[code.length:code.length + temp4];\n            var2 = var3;\n            var3 = 0x00;\n            var4 = 0x00;\n        \n            if (var4 >= var1) { goto label_0A01; }\n            else { goto label_096E; }\n        }\n    }\n    \n    function func_0B4A(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = memory[0x40:0x60];\n        var var1 = temp0;\n        memory[var1:var1 + 0x20] = 0x20;\n        memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x20;\n        memory[var1 + 0x40:var1 + 0x40 + 0x20] = 0x20;\n        memory[var1 + 0x60:var1 + 0x60 + 0x20] = arg0;\n        memory[var1 + 0x80:var1 + 0x80 + 0x20] = arg1;\n        memory[var1 + 0xa0:var1 + 0xa0 + 0x20] = arg2;\n        var temp1;\n        temp1, memory[var1:var1 + 0x20] = address(0x05).staticcall.gas(msg.gas - 0x07d0)(memory[var1:var1 + 0xc0]);\n    \n        if (temp1) { return memory[var1:var1 + 0x20]; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0C64(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 <= 0x03) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0x01 != 0x01) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 - 0x01;\n        var var2 = 0x00;\n    \n        if (var1 & 0x01 != 0x00) {\n        label_0CB4:\n            var var3 = 0x00;\n        \n            if (var3 >= 0x1c) {\n            label_0E32:\n                return 0x01;\n            } else {\n            label_0CC4:\n                var var4 = 0x00;\n                var var5 = 0x02;\n                var temp0 = arg0;\n                var var6 = temp0 - 0x03;\n                var var7 = 0x02;\n                var temp1 = memory[0x40:0x60] + 0x20;\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = temp1 + 0x20;\n                memory[temp2:temp2 + 0x20] = var3;\n                var temp3 = temp2 + 0x20;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = temp3 - temp4 - 0x20;\n                var var8 = temp4;\n                memory[0x40:0x60] = temp3;\n                var var9 = memory[0x40:0x60];\n                var var10 = var9;\n                var var11 = var8 + 0x20;\n                var var12 = memory[var8:var8 + 0x20];\n                var var13 = var12;\n                var var14 = var10;\n                var var15 = var11;\n            \n                if (var13 < 0x20) {\n                label_0D28:\n                    var temp5 = 0x0100 ** (0x20 - var13) - 0x01;\n                    var temp6 = var14;\n                    memory[temp6:temp6 + 0x20] = (memory[var15:var15 + 0x20] & ~temp5) | (memory[temp6:temp6 + 0x20] & temp5);\n                    var8 = var12 + var10;\n                    var temp7 = memory[0x40:0x60];\n                    var temp8;\n                    temp8, memory[temp7:temp7 + 0x20] = address(var7).staticcall.gas(msg.gas)(memory[temp7:temp7 + var8 - temp7]);\n                    var9 = !temp8;\n                \n                    if (!var9) {\n                        var7 = memory[0x40:0x60];\n                        var8 = returndata.length;\n                    \n                        if (var8 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var7 = memory[var7:var7 + 0x20] >> 0x00;\n                    \n                        if (!var6) { assert(); }\n                    \n                        var temp9 = var7 % var6 + var5;\n                        var4 = temp9;\n                        var5 = 0x00;\n                        var6 = 0x0dab;\n                        var7 = var4;\n                        var8 = var1;\n                        var9 = arg0;\n                        var6 = func_0B4A(var7, var8, var9);\n                        var5 = var6;\n                        var6 = var5 == 0x01;\n                    \n                        if (var6) {\n                            if (!var6) {\n                            label_0DCA:\n                                var6 = 0x00;\n                                var7 = 0x01;\n                            \n                                if (var7 < var2) {\n                                    var8 = arg0;\n                                \n                                    if (!var8) { assert(); }\n                                \n                                    var9 = var5;\n                                    var10 = var9;\n                                    // Unhandled termination\n                                } else if (var6) {\n                                label_0E25:\n                                    var3 = var3 + 0x01;\n                                \n                                    if (var3 >= 0x1c) { goto label_0E32; }\n                                    else { goto label_0CC4; }\n                                } else { return 0x00; }\n                            } else {\n                            label_0DC4:\n                                goto label_0E25;\n                            }\n                        } else if (var5 != arg0 - 0x01) { goto label_0DCA; }\n                        else { goto label_0DC4; }\n                    } else {\n                        var temp10 = returndata.length;\n                        memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                label_0D0E:\n                    var temp11 = var15;\n                    var temp12 = var14;\n                    memory[temp12:temp12 + 0x20] = memory[temp11:temp11 + 0x20];\n                    var14 = temp12 + 0x20;\n                    var15 = temp11 + 0x20;\n                    var13 = var13 - 0x20;\n                \n                    if (var13 < 0x20) { goto label_0D28; }\n                    else { goto label_0D0E; }\n                }\n            }\n        } else {\n        label_0C9D:\n            var3 = 0x02;\n            var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var1 = var4 / var3;\n            var2 = var2 + 0x01;\n        \n            if (var1 & 0x01 != 0x00) { goto label_0CB4; }\n            else { goto label_0C9D; }\n        }\n    }\n    \n    function func_0E3F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x01;\n        var var3 = 0x0e50;\n        var var4 = memory[arg0:arg0 + 0x20];\n        var var5 = memory[arg1:arg1 + 0x20];\n        var3 = func_1716(var4, var5);\n        var temp0 = var3 - var2;\n        var1 = temp0;\n        var2 = var1;\n    \n        if (var2 i< 0x00) {\n        label_0EE2:\n            return 0x00;\n        } else {\n        label_0E62:\n            var3 = 0x00;\n            var4 = 0x0e6d;\n            var5 = arg0;\n            var var6 = var2;\n            var4 = func_172F(var5, var6);\n            var3 = var4;\n            var4 = 0x00;\n            var5 = 0x0e7b;\n            var6 = arg1;\n            var var7 = var2;\n            var5 = func_172F(var6, var7);\n            var4 = var5;\n        \n            if (var3 & 0xff > var4 & 0xff) {\n                var0 = 0x01;\n                goto label_0EE9;\n            } else if (var4 & 0xff <= var3 & 0xff) {\n                var2 = var2 - 0x01;\n            \n                if (var2 i< 0x00) { goto label_0EE2; }\n                else { goto label_0E62; }\n            } else {\n                var0 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n            \n            label_0EE9:\n                return var0;\n            }\n        }\n    }\n    \n    function func_12D6(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var0 = temp3;\n        var var1 = temp0;\n        var var2 = temp2;\n        memory[var0:var0 + 0x20] = var2;\n        var var3 = var0 + 0x20;\n        var var4 = var1;\n        var temp4 = storage[var4];\n        var var5 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var5) {\n        label_1380:\n            r0 = func_0E3F(arg1, var0);\n            // Error: Could not resolve method call return address!\n        } else if (0x1f < var5) {\n            var temp5 = var3;\n            var temp6 = temp5 + var5;\n            var3 = temp6;\n            memory[0x00:0x20] = var4;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp5 + 0x20;\n        \n            if (var3 <= var5) { goto label_1377; }\n        \n        label_1363:\n            var temp8 = var4;\n            var temp9 = var5;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var4 = temp8 + 0x01;\n            var5 = temp9 + 0x20;\n        \n            if (var3 > var5) { goto label_1363; }\n        \n        label_1377:\n            var temp10 = var3;\n            var temp11 = temp10 + (var5 - temp10 & 0x1f);\n            var5 = temp10;\n            var3 = temp11;\n            goto label_1380;\n        } else {\n            var temp12 = var3;\n            memory[temp12:temp12 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp12 + 0x20;\n            var5 = var5;\n            goto label_1380;\n        }\n    }\n    \n    function func_13FF(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7) returns (var r0) {\n        if (0x1f < arg7) {\n            var temp0 = arg5;\n            var temp1 = temp0 + arg7;\n            arg5 = temp1;\n            memory[0x00:0x20] = arg6;\n            var temp2 = keccak256(memory[0x00:0x20]);\n            memory[temp0:temp0 + 0x20] = storage[temp2];\n            arg6 = temp2 + 0x01;\n            arg7 = temp0 + 0x20;\n        \n            if (arg5 <= arg7) { goto label_143C; }\n        \n        label_1428:\n            var temp3 = arg6;\n            var temp4 = arg7;\n            memory[temp4:temp4 + 0x20] = storage[temp3];\n            arg6 = temp3 + 0x01;\n            arg7 = temp4 + 0x20;\n        \n            if (arg5 > arg7) { goto label_1428; }\n        \n        label_143C:\n            var temp5 = arg5;\n            var temp6 = temp5 + (arg7 - temp5 & 0x1f);\n            arg7 = temp5;\n            arg5 = temp6;\n        \n        label_1445:\n            arg3 = 0x60;\n            var temp7 = memory[0x40:0x60];\n            arg4 = temp7;\n            var temp8 = arg0;\n            var temp9 = memory[temp8:temp8 + 0x20];\n            arg5 = temp9;\n            var temp10 = memory[arg2:arg2 + 0x20];\n            arg6 = temp10;\n            memory[arg4:arg4 + 0x20] = arg5;\n            memory[arg4 + 0x20:arg4 + 0x20 + 0x20] = 0x20;\n            memory[arg4 + 0x40:arg4 + 0x40 + 0x20] = arg6;\n            var temp11;\n            temp11, memory[arg4 + 0x60:arg4 + 0x60 + arg5] = address(0x04).staticcall.gas(0x2710)(memory[temp8 + 0x20:temp8 + 0x20 + arg5]);\n        \n            if (!temp11) { revert(memory[0x00:0x00]); }\n        \n            var temp12 = arg5;\n            var temp13 = arg4;\n            memory[temp13 + temp12 + 0x60:temp13 + temp12 + 0x60 + 0x20] = arg1;\n            var temp14 = arg6;\n            var temp15;\n            temp15, memory[temp13 + 0x80 + temp12:temp13 + 0x80 + temp12 + temp14] = address(0x04).staticcall.gas(0x2710)(memory[arg2 + 0x20:arg2 + 0x20 + temp14]);\n        \n            if (!temp15) { revert(memory[0x00:0x00]); }\n        \n            var temp16 = arg6;\n            var temp17 = arg4;\n            var temp18;\n            temp18, memory[temp17 + 0x20:temp17 + 0x20 + temp16] = address(0x05).staticcall.gas(msg.gas - 0x07d0)(memory[temp17:temp17 + arg5 + 0x80 + temp16]);\n        \n            if (!temp18) { revert(memory[0x00:0x00]); }\n        \n            var temp19 = arg6;\n            var temp20 = arg4;\n            memory[0x40:0x60] = temp20 + temp19 + 0x20;\n            memory[temp20:temp20 + 0x20] = temp19;\n            return temp20;\n        } else {\n            var temp21 = arg5;\n            memory[temp21:temp21 + 0x20] = storage[arg6] / 0x0100 * 0x0100;\n            arg5 = temp21 + 0x20;\n            arg7 = arg7;\n            goto label_1445;\n        }\n    }\n    \n    function func_1716(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 > arg1) { return arg0; }\n    \n        var var1 = arg1;\n        return var1;\n    }\n    \n    function func_172F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 < memory[arg0:arg0 + 0x20]) {\n            var temp0 = arg0;\n            var var1 = temp0;\n            var var2 = memory[var1:var1 + 0x20] - arg1 - 0x01;\n        \n            if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n        \n            var0 = ((memory[var2 + 0x20 + var1:var2 + 0x20 + var1 + 0x20] >> 0xf8) << 0xf8) >> 0xf8;\n        \n        label_1765:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1765;\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x783ce458 > var0) {\n            if (var0 == 0x01345d85) {\n                // Dispatch table entry for challenges_length()\n                var var1 = 0x00b6;\n                var var2 = challenges_length();\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x3b2e10d8) {\n                // Dispatch table entry for 0x3b2e10d8 (unknown)\n                var1 = 0x021c;\n                var2 = 0x04;\n                var var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = func_00E2(var2, var3);\n                var temp2 = memory[0x40:0x60];\n                var2 = temp2;\n                var3 = var2;\n                var temp3 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp3 - var3;\n                var temp4 = var1;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var4 = temp3 + 0x20;\n                var var5 = temp4 + 0x20;\n                var var6 = memory[temp4:temp4 + 0x20];\n                var var7 = var6;\n                var var8 = var4;\n                var var9 = var5;\n                var var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_025C:\n                    var temp5 = var6;\n                    var4 = temp5 + var4;\n                    var5 = temp5 & 0x1f;\n                \n                    if (!var5) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var4 - temp6];\n                    } else {\n                        var temp7 = var5;\n                        var temp8 = var4 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_024A:\n                    var temp10 = var10;\n                    memory[var8 + temp10:var8 + temp10 + 0x20] = memory[var9 + temp10:var9 + temp10 + 0x20];\n                    var10 = temp10 + 0x20;\n                \n                    if (var10 >= var7) { goto label_025C; }\n                    else { goto label_024A; }\n                }\n            } else if (var0 == 0x5fce693d) {\n                // Dispatch table entry for claim_bounty(bytes32)\n                var1 = 0x02c3;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                claim_bounty(var2, var3);\n                stop();\n            } else if (var0 == 0x606748cf) {\n                // Dispatch table entry for 0x606748cf (unknown)\n                var1 = 0x041f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = func_02DB(var2, var3);\n                var temp11 = memory[0x40:0x60];\n                var2 = temp11;\n                var3 = var2;\n                var temp12 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp12 - var3;\n                var temp13 = var1;\n                memory[temp12:temp12 + 0x20] = memory[temp13:temp13 + 0x20];\n                var4 = temp12 + 0x20;\n                var5 = temp13 + 0x20;\n                var6 = memory[temp13:temp13 + 0x20];\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_045F:\n                    var temp14 = var6;\n                    var4 = temp14 + var4;\n                    var5 = temp14 & 0x1f;\n                \n                    if (!var5) {\n                        var temp15 = memory[0x40:0x60];\n                        return memory[temp15:temp15 + var4 - temp15];\n                    } else {\n                        var temp16 = var5;\n                        var temp17 = var4 - temp16;\n                        memory[temp17:temp17 + 0x20] = ~(0x0100 ** (0x20 - temp16) - 0x01) & memory[temp17:temp17 + 0x20];\n                        var temp18 = memory[0x40:0x60];\n                        return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n                    }\n                } else {\n                label_044D:\n                    var temp19 = var10;\n                    memory[var8 + temp19:var8 + temp19 + 0x20] = memory[var9 + temp19:var9 + temp19 + 0x20];\n                    var10 = temp19 + 0x20;\n                \n                    if (var10 >= var7) { goto label_045F; }\n                    else { goto label_044D; }\n                }\n            } else if (var0 == 0x71b8fb01) {\n                // Dispatch table entry for terminate_contract()\n                var1 = 0x04a2;\n            \n                if (msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { selfdestruct(msg.sender); }\n                else { revert(memory[0x00:0x00]); }\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x783ce458) {\n            // Dispatch table entry for expmod(uint256,uint256,uint256)\n            var1 = 0x04e4;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n        \n            var1 = expmod(var2, var3);\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = var1;\n            var temp21 = memory[0x40:0x60];\n            return memory[temp21:temp21 + (temp20 + 0x20) - temp21];\n        } else if (var0 == 0x8f1d3776) {\n            // Dispatch table entry for challenges(uint256)\n            var1 = 0x0526;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2, var3, var4 = challenges(var2, var3);\n            var temp22 = memory[0x40:0x60];\n            var5 = temp22;\n            var6 = var5;\n            var temp23 = var6 + 0x20;\n            memory[temp23:temp23 + 0x20] = !!var3;\n            var temp24 = temp23 + 0x20;\n            memory[temp24:temp24 + 0x20] = var4;\n            var temp25 = temp24 + 0x20;\n            memory[var6:var6 + 0x20] = temp25 - var6;\n            var temp26 = var2;\n            memory[temp25:temp25 + 0x20] = memory[temp26:temp26 + 0x20];\n            var7 = temp25 + 0x20;\n            var8 = temp26 + 0x20;\n            var9 = memory[temp26:temp26 + 0x20];\n            var10 = var9;\n            var var11 = var7;\n            var var12 = var8;\n            var var13 = 0x00;\n        \n            if (var13 >= var10) {\n            label_0576:\n                var temp27 = var9;\n                var7 = temp27 + var7;\n                var8 = temp27 & 0x1f;\n            \n                if (!var8) {\n                    var temp28 = memory[0x40:0x60];\n                    return memory[temp28:temp28 + var7 - temp28];\n                } else {\n                    var temp29 = var8;\n                    var temp30 = var7 - temp29;\n                    memory[temp30:temp30 + 0x20] = ~(0x0100 ** (0x20 - temp29) - 0x01) & memory[temp30:temp30 + 0x20];\n                    var temp31 = memory[0x40:0x60];\n                    return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n                }\n            } else {\n            label_0564:\n                var temp32 = var13;\n                memory[var11 + temp32:var11 + temp32 + 0x20] = memory[var12 + temp32:var12 + temp32 + 0x20];\n                var13 = temp32 + 0x20;\n            \n                if (var13 >= var10) { goto label_0576; }\n                else { goto label_0564; }\n            }\n        } else if (var0 == 0xa355312a) {\n            // Dispatch table entry for 0xa355312a (unknown)\n            var1 = 0x05df;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = func_05C9(var2, var3);\n        \n        label_05DF:\n            var temp33 = memory[0x40:0x60];\n            memory[temp33:temp33 + 0x20] = !!var1;\n            var temp34 = memory[0x40:0x60];\n            return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n        } else if (var0 == 0xdf199a1f) {\n            // Dispatch table entry for 0xdf199a1f (unknown)\n            var1 = 0x0749;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = func_060F(var2, var3);\n        \n        label_0749:\n            var temp35 = memory[0x40:0x60];\n            memory[temp35:temp35 + 0x20] = var1;\n            var temp36 = memory[0x40:0x60];\n            return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n        } else if (var0 == 0xe20da751) {\n            // Dispatch table entry for 0xe20da751 (unknown)\n            var1 = 0x08c3;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n        \n            func_0775(var2, var3);\n            stop();\n        } else if (var0 == 0xeff0f592) {\n            // Dispatch table entry for claims(bytes32)\n            var1 = 0x08f1;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = claims(var2, var3);\n            var temp37 = memory[0x40:0x60];\n            memory[temp37:temp37 + 0x20] = var2;\n            var temp38 = memory[0x40:0x60];\n            return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_00E2(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = temp0 + arg1;\n        arg1 = temp0;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1 + var1;\n        var1 = temp1;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var1 = temp3;\n        var var2 = var0;\n        var0 = temp2 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = var2;\n        var temp5 = var1;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var0:var0 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        var temp8 = arg1;\n        arg1 = arg0;\n        arg0 = temp6;\n        var0 = temp8;\n        var1 = temp4 + 0x20;\n        var2 = msg.data[temp4:temp4 + 0x20];\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = var0 + var2;\n        var2 = temp9;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp10 = var2;\n        var temp11 = msg.data[temp10:temp10 + 0x20];\n        var2 = temp11;\n        var temp12 = var1;\n        var1 = temp10 + 0x20;\n        var var3 = temp12;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var2;\n        var temp14 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp14 + (temp13 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp14:temp14 + 0x20] = temp13;\n        var temp15 = temp14 + 0x20;\n        memory[temp15:temp15 + temp13] = msg.data[var1:var1 + temp13];\n        memory[temp15 + temp13:temp15 + temp13 + 0x20] = 0x00;\n        arg1 = temp14;\n        r0 = func_090D(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function claim_bounty(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] != 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = block.timestamp + 0x015180;\n    }\n    \n    function func_02DB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        var temp7 = var1;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var0:var0 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = arg1;\n        var temp11 = arg0;\n        arg0 = temp8;\n        var temp12 = temp6 + 0x20;\n        arg1 = msg.data[temp6:temp6 + 0x20];\n        var0 = temp11;\n        var1 = temp10;\n        var var3 = msg.data[temp12:temp12 + 0x20];\n        var2 = temp12 + 0x20;\n    \n        if (var3 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var1 + var3;\n        var3 = temp13;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var3;\n        var temp15 = msg.data[temp14:temp14 + 0x20];\n        var3 = temp15;\n        var var4 = var2;\n        var2 = temp14 + 0x20;\n    \n        if ((var3 > 0x0100000000) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp16 = var3;\n        var temp17 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp17:temp17 + 0x20] = temp16;\n        var temp18 = temp17 + 0x20;\n        memory[temp18:temp18 + temp16] = msg.data[var2:var2 + temp16];\n        memory[temp18 + temp16:temp18 + temp16 + 0x20] = 0x00;\n        var0 = temp17;\n        var1 = 0x60;\n        var temp19 = memory[0x40:0x60];\n        var2 = temp19;\n        var temp20 = arg0;\n        var temp21 = memory[temp20:temp20 + 0x20];\n        var3 = temp21;\n        var temp22 = memory[var0:var0 + 0x20];\n        var4 = temp22;\n        memory[var2:var2 + 0x20] = var3;\n        memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x20;\n        memory[var2 + 0x40:var2 + 0x40 + 0x20] = var4;\n        var temp23;\n        temp23, memory[var2 + 0x60:var2 + 0x60 + var3] = address(0x04).staticcall.gas(0x2710)(memory[temp20 + 0x20:temp20 + 0x20 + var3]);\n    \n        if (!temp23) { revert(memory[0x00:0x00]); }\n    \n        var temp24 = var3;\n        var temp25 = var2;\n        memory[temp25 + temp24 + 0x60:temp25 + temp24 + 0x60 + 0x20] = arg1;\n        var temp26 = var4;\n        var temp27;\n        temp27, memory[temp25 + 0x80 + temp24:temp25 + 0x80 + temp24 + temp26] = address(0x04).staticcall.gas(0x2710)(memory[var0 + 0x20:var0 + 0x20 + temp26]);\n    \n        if (!temp27) { revert(memory[0x00:0x00]); }\n    \n        var temp28 = var4;\n        var temp29 = var2;\n        var temp30;\n        temp30, memory[temp29 + 0x20:temp29 + 0x20 + temp28] = address(0x05).staticcall.gas(msg.gas - 0x07d0)(memory[temp29:temp29 + var3 + 0x80 + temp28]);\n    \n        if (!temp30) { revert(memory[0x00:0x00]); }\n    \n        var temp31 = var4;\n        var temp32 = var2;\n        memory[0x40:0x60] = temp32 + temp31 + 0x20;\n        memory[temp32:temp32 + 0x20] = temp31;\n        return temp32;\n    }\n    \n    function expmod(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp1:temp1 + 0x20];\n        var var0 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        r0 = func_0B4A(arg0, arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function challenges(var arg0, var arg1) returns (var arg0, var arg1, var r2) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        arg0 = keccak256(memory[0x00:0x40]);\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        arg1 = temp3;\n        r2 = temp0;\n        var var1 = temp2;\n        memory[arg1:arg1 + 0x20] = var1;\n        var var2 = arg1 + 0x20;\n        var var3 = r2;\n        var temp4 = storage[var3];\n        var var4 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var4) {\n        label_0C41:\n            var temp5 = arg0;\n            arg0 = arg1;\n            arg1 = storage[temp5 + 0x01] & 0xff;\n            r2 = storage[temp5 + 0x02];\n            return arg0, arg1, r2;\n        } else if (0x1f < var4) {\n            var temp6 = var2;\n            var temp7 = temp6 + var4;\n            var2 = temp7;\n            memory[0x00:0x20] = var3;\n            var temp8 = keccak256(memory[0x00:0x20]);\n            memory[temp6:temp6 + 0x20] = storage[temp8];\n            var3 = temp8 + 0x01;\n            var4 = temp6 + 0x20;\n        \n            if (var2 <= var4) { goto label_0C38; }\n        \n        label_0C24:\n            var temp9 = var3;\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[temp9];\n            var3 = temp9 + 0x01;\n            var4 = temp10 + 0x20;\n        \n            if (var2 > var4) { goto label_0C24; }\n        \n        label_0C38:\n            var temp11 = var2;\n            var temp12 = temp11 + (var4 - temp11 & 0x1f);\n            var4 = temp11;\n            var2 = temp12;\n            goto label_0C41;\n        } else {\n            var temp13 = var2;\n            memory[temp13:temp13 + 0x20] = storage[var3] / 0x0100 * 0x0100;\n            var2 = temp13 + 0x20;\n            var4 = var4;\n            goto label_0C41;\n        }\n    }\n    \n    function func_05C9(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_0C64(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_060F(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        var temp7 = var1;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var0:var0 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = arg1;\n        arg1 = arg0;\n        arg0 = temp8;\n        var0 = temp10;\n        var2 = msg.data[temp6:temp6 + 0x20];\n        var1 = temp6 + 0x20;\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp11 = var0 + var2;\n        var2 = temp11;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var2;\n        var temp13 = msg.data[temp12:temp12 + 0x20];\n        var2 = temp13;\n        var var3 = var1;\n        var1 = temp12 + 0x20;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var2;\n        var temp15 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp15 + (temp14 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp15:temp15 + 0x20] = temp14;\n        var temp16 = temp15 + 0x20;\n        memory[temp16:temp16 + temp14] = msg.data[var1:var1 + temp14];\n        memory[temp16 + temp14:temp16 + temp14 + 0x20] = 0x00;\n        arg1 = temp15;\n        r0 = func_0E3F(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0775(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var1 = temp1 + 0x20;\n        var var2 = msg.data[temp1:temp1 + 0x20];\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var0 + var2;\n        var2 = temp2;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var2;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var2 = temp4;\n        var temp5 = var1;\n        var1 = temp3 + 0x20;\n        var var3 = temp5;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var3;\n        var temp7 = var2;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var1:var1 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = var0;\n        var0 = arg1;\n        arg1 = temp8;\n        var1 = temp10;\n        var2 = temp6 + 0x20;\n        var3 = msg.data[temp6:temp6 + 0x20];\n    \n        if (var3 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp11 = var1 + var3;\n        var3 = temp11;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var3;\n        var temp13 = msg.data[temp12:temp12 + 0x20];\n        var3 = temp13;\n        var var4 = var2;\n        var2 = temp12 + 0x20;\n    \n        if ((var3 > 0x0100000000) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var3;\n        var temp15 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp15 + (temp14 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp15:temp15 + 0x20] = temp14;\n        var temp16 = temp15 + 0x20;\n        memory[temp16:temp16 + temp14] = msg.data[var2:var2 + temp14];\n        memory[temp16 + temp14:temp16 + temp14 + 0x20] = 0x00;\n        var0 = temp15;\n        var1 = msg.data[var4:var4 + 0x20];\n    \n        if (arg0 >= storage[0x02]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x00;\n        var3 = 0x02;\n        var4 = arg0;\n        var temp17 = arg1;\n        var var5 = temp17;\n        var var6 = var0;\n        var var7 = var1;\n        var var8 = msg.sender << 0x00;\n        var temp18 = memory[0x40:0x60] + 0x20;\n        var var9 = temp18;\n        memory[var9:var9 + 0x20] = var4;\n        var var10 = var9 + 0x20;\n        var var12 = memory[var5:var5 + 0x20];\n        var var11 = var5 + 0x20;\n        var var13 = var12;\n        var var14 = var10;\n        var var15 = var11;\n    \n        if (var13 < 0x20) {\n        label_0F89:\n            var temp19 = 0x0100 ** (0x20 - var13) - 0x01;\n            var temp20 = var14;\n            memory[temp20:temp20 + 0x20] = (memory[var15:var15 + 0x20] & ~temp19) | (memory[temp20:temp20 + 0x20] & temp19);\n            var temp21 = var12 + var10;\n            var10 = temp21;\n            var temp22 = var6;\n            var12 = memory[temp22:temp22 + 0x20];\n            var11 = temp22 + 0x20;\n            var13 = var12;\n            var14 = var10;\n            var15 = var11;\n        \n            if (var13 < 0x20) {\n            label_0FDA:\n                var temp23 = 0x0100 ** (0x20 - var13) - 0x01;\n                var temp24 = var14;\n                memory[temp24:temp24 + 0x20] = (memory[var15:var15 + 0x20] & ~temp23) | (memory[temp24:temp24 + 0x20] & temp23);\n                var temp25 = var12 + var10;\n                memory[temp25:temp25 + 0x20] = var7;\n                var temp26 = temp25 + 0x20;\n                memory[temp26:temp26 + 0x20] = var8;\n                var temp27 = temp26 + 0x20;\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = temp27 - temp28 - 0x20;\n                var4 = temp28;\n                memory[0x40:0x60] = temp27;\n                var5 = memory[0x40:0x60];\n                var6 = var5;\n                var7 = var4 + 0x20;\n                var8 = memory[var4:var4 + 0x20];\n                var9 = var8;\n                var10 = var6;\n                var11 = var7;\n            \n                if (var9 < 0x20) {\n                label_1051:\n                    var temp29 = 0x0100 ** (0x20 - var9) - 0x01;\n                    var temp30 = var10;\n                    memory[temp30:temp30 + 0x20] = (memory[var11:var11 + 0x20] & ~temp29) | (memory[temp30:temp30 + 0x20] & temp29);\n                    var4 = var8 + var6;\n                    var temp31 = memory[0x40:0x60];\n                    var temp32;\n                    temp32, memory[temp31:temp31 + 0x20] = address(var3).staticcall.gas(msg.gas)(memory[temp31:temp31 + var4 - temp31]);\n                    var5 = !temp32;\n                \n                    if (!var5) {\n                        var3 = memory[0x40:0x60];\n                        var4 = returndata.length;\n                    \n                        if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = memory[var3:var3 + 0x20];\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x03;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x03;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] >= block.timestamp) { revert(memory[0x00:0x00]); }\n                    \n                        var3 = 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000;\n                        var4 = 0x02;\n                        var temp33 = arg1;\n                        var5 = temp33;\n                        var6 = memory[0x40:0x60];\n                        var7 = var6;\n                        var9 = memory[var5:var5 + 0x20];\n                        var8 = var5 + 0x20;\n                        var10 = var9;\n                        var11 = var7;\n                        var12 = var8;\n                    \n                        if (var10 < 0x20) {\n                        label_1151:\n                            var temp34 = 0x0100 ** (0x20 - var10) - 0x01;\n                            var temp35 = var11;\n                            memory[temp35:temp35 + 0x20] = (memory[var12:var12 + 0x20] & ~temp34) | (memory[temp35:temp35 + 0x20] & temp34);\n                            var5 = var9 + var7;\n                            var temp36 = memory[0x40:0x60];\n                            var temp37;\n                            temp37, memory[temp36:temp36 + 0x20] = address(var4).staticcall.gas(msg.gas)(memory[temp36:temp36 + var5 - temp36]);\n                            var6 = !temp37;\n                        \n                            if (!var6) {\n                                var4 = memory[0x40:0x60];\n                                var5 = returndata.length;\n                            \n                                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                            \n                                if (var1 & 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000 != (memory[var4:var4 + 0x20] >> 0x00) & var3) { revert(memory[0x00:0x00]); }\n                            \n                                if (var1 <= 0x8000000000000000000000000000000000000000000000000000000000000000) { revert(memory[0x00:0x00]); }\n                            \n                                var3 = 0x121f;\n                                var4 = var1;\n                                var3 = func_0C64(var4);\n                            \n                            label_121F:\n                            \n                                if (!var3) { revert(memory[0x00:0x00]); }\n                            \n                                var3 = 0x01;\n                                var4 = 0x1269;\n                                var5 = arg1;\n                                var temp38 = memory[0x40:0x60];\n                                var6 = temp38;\n                                memory[0x40:0x60] = var6 + 0x40;\n                                memory[var6:var6 + 0x20] = 0x01;\n                                memory[var6 + 0x20:var6 + 0x20 + 0x20] = 0x0100000000000000000000000000000000000000000000000000000000000000;\n                                var4 = func_0E3F(var5, var6);\n                            \n                            label_1269:\n                            \n                                if (var4 != var3) { revert(memory[0x00:0x00]); }\n                            \n                                var3 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n                                var4 = 0x138a;\n                                var5 = 0x12d6;\n                                var6 = arg1;\n                                var temp39 = memory[0x40:0x60];\n                                var7 = temp39;\n                                memory[0x40:0x60] = var7 + 0x40;\n                                memory[var7:var7 + 0x20] = 0x01;\n                                memory[var7 + 0x20:var7 + 0x20 + 0x20] = 0x0100000000000000000000000000000000000000000000000000000000000000;\n                                var5 = func_090D(var6, var7);\n                                var4 = func_12D6(arg0, var5);\n                            \n                                if (var4 != var3) { revert(memory[0x00:0x00]); }\n                            \n                                var3 = 0x60;\n                                var4 = 0x144f;\n                                var5 = var0;\n                                var6 = var1;\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x01;\n                                var temp40 = keccak256(memory[0x00:0x40]);\n                                var temp41 = storage[temp40];\n                                var temp42 = (!(temp41 & 0x01) * 0x0100 - 0x01 & temp41) / 0x02;\n                                var temp43 = memory[0x40:0x60];\n                                memory[0x40:0x60] = temp43 + (temp42 + 0x1f) / 0x20 * 0x20 + 0x20;\n                                var7 = temp43;\n                                var8 = temp40;\n                                var9 = temp42;\n                                memory[var7:var7 + 0x20] = var9;\n                                var10 = var7 + 0x20;\n                                var11 = var8;\n                                var temp44 = storage[var11];\n                                var12 = (!(temp44 & 0x01) * 0x0100 - 0x01 & temp44) / 0x02;\n                            \n                                if (!var12) {\n                                    var8 = 0x60;\n                                    var temp45 = memory[0x40:0x60];\n                                    var9 = temp45;\n                                    var temp46 = var5;\n                                    var temp47 = memory[temp46:temp46 + 0x20];\n                                    var10 = temp47;\n                                    var temp48 = memory[var7:var7 + 0x20];\n                                    var11 = temp48;\n                                    memory[var9:var9 + 0x20] = var10;\n                                    memory[var9 + 0x20:var9 + 0x20 + 0x20] = 0x20;\n                                    memory[var9 + 0x40:var9 + 0x40 + 0x20] = var11;\n                                    var temp49;\n                                    temp49, memory[var9 + 0x60:var9 + 0x60 + var10] = address(0x04).staticcall.gas(0x2710)(memory[temp46 + 0x20:temp46 + 0x20 + var10]);\n                                \n                                    if (!temp49) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp50 = var10;\n                                    var temp51 = var9;\n                                    memory[temp51 + temp50 + 0x60:temp51 + temp50 + 0x60 + 0x20] = var6;\n                                    var temp52 = var11;\n                                    var temp53;\n                                    temp53, memory[temp51 + 0x80 + temp50:temp51 + 0x80 + temp50 + temp52] = address(0x04).staticcall.gas(0x2710)(memory[var7 + 0x20:var7 + 0x20 + temp52]);\n                                \n                                    if (!temp53) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp54 = var11;\n                                    var temp55 = var9;\n                                    var temp56;\n                                    temp56, memory[temp55 + 0x20:temp55 + 0x20 + temp54] = address(0x05).staticcall.gas(msg.gas - 0x07d0)(memory[temp55:temp55 + var10 + 0x80 + temp54]);\n                                \n                                    if (!temp56) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp57 = var11;\n                                    var temp58 = var9;\n                                    memory[0x40:0x60] = temp58 + temp57 + 0x20;\n                                    memory[temp58:temp58 + 0x20] = temp57;\n                                    var4 = temp58;\n                                    // Error: Could not resolve jump destination!\n                                } else {\n                                    var4 = func_13FF(var5, var6, var7, var8, var9, var10, var11, var12);\n                                    var3 = var4;\n                                    var4 = 0x02;\n                                    var temp59 = arg1;\n                                    var5 = temp59;\n                                    var6 = memory[0x40:0x60] + 0x20;\n                                    var7 = var6;\n                                    var9 = memory[var5:var5 + 0x20];\n                                    var8 = var5 + 0x20;\n                                    var10 = var9;\n                                    var11 = var7;\n                                    var12 = var8;\n                                \n                                    if (var10 < 0x20) {\n                                    label_148A:\n                                        var temp60 = 0x0100 ** (0x20 - var10) - 0x01;\n                                        var temp61 = var11;\n                                        memory[temp61:temp61 + 0x20] = (memory[var12:var12 + 0x20] & ~temp60) | (memory[temp61:temp61 + 0x20] & temp60);\n                                        var temp62 = var9 + var7;\n                                        var temp63 = memory[0x40:0x60];\n                                        memory[temp63:temp63 + 0x20] = temp62 - temp63 - 0x20;\n                                        var5 = temp63;\n                                        memory[0x40:0x60] = temp62;\n                                        var6 = memory[0x40:0x60];\n                                        var7 = var6;\n                                        var8 = var5 + 0x20;\n                                        var9 = memory[var5:var5 + 0x20];\n                                        var10 = var9;\n                                        var11 = var7;\n                                        var12 = var8;\n                                    \n                                        if (var10 < 0x20) {\n                                        label_14F1:\n                                            var temp64 = 0x0100 ** (0x20 - var10) - 0x01;\n                                            var temp65 = var11;\n                                            memory[temp65:temp65 + 0x20] = (memory[var12:var12 + 0x20] & ~temp64) | (memory[temp65:temp65 + 0x20] & temp64);\n                                            var5 = var9 + var7;\n                                            var temp66 = memory[0x40:0x60];\n                                            var temp67;\n                                            temp67, memory[temp66:temp66 + 0x20] = address(var4).staticcall.gas(msg.gas)(memory[temp66:temp66 + var5 - temp66]);\n                                            var6 = !temp67;\n                                        \n                                            if (!var6) {\n                                                var4 = memory[0x40:0x60];\n                                                var5 = returndata.length;\n                                            \n                                                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                                            \n                                                var4 = memory[var4:var4 + 0x20];\n                                                var5 = 0x02;\n                                                var temp68 = var3;\n                                                var6 = temp68;\n                                                var7 = memory[0x40:0x60] + 0x20;\n                                                var8 = var7;\n                                                var9 = var6 + 0x20;\n                                                var10 = memory[var6:var6 + 0x20];\n                                                var11 = var10;\n                                                var12 = var8;\n                                                var13 = var9;\n                                            \n                                                if (var11 < 0x20) {\n                                                label_1592:\n                                                    var temp69 = 0x0100 ** (0x20 - var11) - 0x01;\n                                                    var temp70 = var12;\n                                                    memory[temp70:temp70 + 0x20] = (memory[var13:var13 + 0x20] & ~temp69) | (memory[temp70:temp70 + 0x20] & temp69);\n                                                    var temp71 = var10 + var8;\n                                                    var temp72 = memory[0x40:0x60];\n                                                    memory[temp72:temp72 + 0x20] = temp71 - temp72 - 0x20;\n                                                    var6 = temp72;\n                                                    memory[0x40:0x60] = temp71;\n                                                    var7 = memory[0x40:0x60];\n                                                    var8 = var7;\n                                                    var10 = memory[var6:var6 + 0x20];\n                                                    var9 = var6 + 0x20;\n                                                    var11 = var10;\n                                                    var12 = var8;\n                                                    var13 = var9;\n                                                \n                                                    if (var11 < 0x20) {\n                                                    label_15F9:\n                                                        var temp73 = 0x0100 ** (0x20 - var11) - 0x01;\n                                                        var temp74 = var12;\n                                                        memory[temp74:temp74 + 0x20] = (memory[var13:var13 + 0x20] & ~temp73) | (memory[temp74:temp74 + 0x20] & temp73);\n                                                        var6 = var10 + var8;\n                                                        var temp75 = memory[0x40:0x60];\n                                                        var temp76;\n                                                        temp76, memory[temp75:temp75 + 0x20] = address(var5).staticcall.gas(msg.gas)(memory[temp75:temp75 + var6 - temp75]);\n                                                        var7 = !temp76;\n                                                    \n                                                        if (!var7) {\n                                                            var5 = memory[0x40:0x60];\n                                                            var6 = returndata.length;\n                                                        \n                                                            if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            if (memory[var5:var5 + 0x20] != var4) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp77 = arg0;\n                                                            memory[0x00:0x20] = temp77;\n                                                            memory[0x20:0x40] = 0x01;\n                                                            var temp78 = keccak256(memory[0x00:0x40]) + 0x01;\n                                                            storage[temp78] = (storage[temp78] & ~0xff) | 0x01;\n                                                            memory[0x00:0x20] = temp77;\n                                                            memory[0x20:0x40] = 0x01;\n                                                            var temp79 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                                                            var temp80 = memory[0x40:0x60];\n                                                            var temp81;\n                                                            temp81, memory[temp80:temp80 + 0x00] = address(msg.sender).call.gas(!temp79 * 0x08fc).value(temp79)(memory[temp80:temp80 + memory[0x40:0x60] - temp80]);\n                                                            var4 = !temp81;\n                                                        \n                                                            if (!var4) { return; }\n                                                        \n                                                            var temp82 = returndata.length;\n                                                            memory[0x00:0x00 + temp82] = returndata[0x00:0x00 + temp82];\n                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                        } else {\n                                                            var temp83 = returndata.length;\n                                                            memory[0x00:0x00 + temp83] = returndata[0x00:0x00 + temp83];\n                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                        }\n                                                    } else {\n                                                    label_15DF:\n                                                        var temp84 = var13;\n                                                        var temp85 = var12;\n                                                        memory[temp85:temp85 + 0x20] = memory[temp84:temp84 + 0x20];\n                                                        var12 = temp85 + 0x20;\n                                                        var13 = temp84 + 0x20;\n                                                        var11 = var11 - 0x20;\n                                                    \n                                                        if (var11 < 0x20) { goto label_15F9; }\n                                                        else { goto label_15DF; }\n                                                    }\n                                                } else {\n                                                label_1578:\n                                                    var temp86 = var13;\n                                                    var temp87 = var12;\n                                                    memory[temp87:temp87 + 0x20] = memory[temp86:temp86 + 0x20];\n                                                    var12 = temp87 + 0x20;\n                                                    var13 = temp86 + 0x20;\n                                                    var11 = var11 - 0x20;\n                                                \n                                                    if (var11 < 0x20) { goto label_1592; }\n                                                    else { goto label_1578; }\n                                                }\n                                            } else {\n                                                var temp88 = returndata.length;\n                                                memory[0x00:0x00 + temp88] = returndata[0x00:0x00 + temp88];\n                                                revert(memory[0x00:0x00 + returndata.length]);\n                                            }\n                                        } else {\n                                        label_14D7:\n                                            var temp89 = var12;\n                                            var temp90 = var11;\n                                            memory[temp90:temp90 + 0x20] = memory[temp89:temp89 + 0x20];\n                                            var11 = temp90 + 0x20;\n                                            var12 = temp89 + 0x20;\n                                            var10 = var10 - 0x20;\n                                        \n                                            if (var10 < 0x20) { goto label_14F1; }\n                                            else { goto label_14D7; }\n                                        }\n                                    } else {\n                                    label_1470:\n                                        var temp91 = var12;\n                                        var temp92 = var11;\n                                        memory[temp92:temp92 + 0x20] = memory[temp91:temp91 + 0x20];\n                                        var11 = temp92 + 0x20;\n                                        var12 = temp91 + 0x20;\n                                        var10 = var10 - 0x20;\n                                    \n                                        if (var10 < 0x20) { goto label_148A; }\n                                        else { goto label_1470; }\n                                    }\n                                }\n                            } else {\n                                var temp93 = returndata.length;\n                                memory[0x00:0x00 + temp93] = returndata[0x00:0x00 + temp93];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                        label_1137:\n                            var temp94 = var12;\n                            var temp95 = var11;\n                            memory[temp95:temp95 + 0x20] = memory[temp94:temp94 + 0x20];\n                            var11 = temp95 + 0x20;\n                            var12 = temp94 + 0x20;\n                            var10 = var10 - 0x20;\n                        \n                            if (var10 < 0x20) { goto label_1151; }\n                            else { goto label_1137; }\n                        }\n                    } else {\n                        var temp96 = returndata.length;\n                        memory[0x00:0x00 + temp96] = returndata[0x00:0x00 + temp96];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                label_1037:\n                    var temp97 = var11;\n                    var temp98 = var10;\n                    memory[temp98:temp98 + 0x20] = memory[temp97:temp97 + 0x20];\n                    var10 = temp98 + 0x20;\n                    var11 = temp97 + 0x20;\n                    var9 = var9 - 0x20;\n                \n                    if (var9 < 0x20) { goto label_1051; }\n                    else { goto label_1037; }\n                }\n            } else {\n            label_0FC0:\n                var temp99 = var15;\n                var temp100 = var14;\n                memory[temp100:temp100 + 0x20] = memory[temp99:temp99 + 0x20];\n                var14 = temp100 + 0x20;\n                var15 = temp99 + 0x20;\n                var13 = var13 - 0x20;\n            \n                if (var13 < 0x20) { goto label_0FDA; }\n                else { goto label_0FC0; }\n            }\n        } else {\n        label_0F6F:\n            var temp101 = var15;\n            var temp102 = var14;\n            memory[temp102:temp102 + 0x20] = memory[temp101:temp101 + 0x20];\n            var14 = temp102 + 0x20;\n            var15 = temp101 + 0x20;\n            var13 = var13 - 0x20;\n        \n            if (var13 < 0x20) { goto label_0F89; }\n            else { goto label_0F6F; }\n        }\n    }\n    \n    function claims(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function challenges_length() returns (var r0) { return storage[0x02]; }\n    \n    function func_090D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x00;\n        var var2 = 0x01;\n        var var3 = 0x091f;\n        var var4 = memory[arg0:arg0 + 0x20];\n        var var5 = memory[arg1:arg1 + 0x20];\n        var3 = func_1716(var4, var5);\n        var temp0 = var3 + var2;\n        var1 = temp0;\n        var2 = 0x60;\n        var temp1 = memory[0x40:0x60];\n        var4 = var1;\n        var3 = temp1;\n        memory[var3:var3 + 0x20] = var4;\n        memory[0x40:0x60] = var3 + (var4 + 0x1f & ~0x1f) + 0x20;\n    \n        if (!var4) {\n            var2 = var3;\n            var3 = 0x00;\n            var4 = 0x00;\n        \n            if (var4 >= var1) {\n            label_0A01:\n                return var2;\n            } else {\n            label_096E:\n                var5 = 0x00;\n                var var6 = 0x0979;\n                var var7 = arg0;\n                var var8 = var4;\n                var6 = func_172F(var7, var8);\n                var5 = var6;\n                var6 = 0x00;\n                var7 = 0x0987;\n                var8 = arg1;\n                var var9 = var4;\n                var7 = func_172F(var8, var9);\n                var6 = var7;\n                var temp2 = (var5 & 0xff) + (var6 & 0xff) + var3;\n                var7 = temp2;\n                var8 = var7 << 0xf8;\n                var temp3 = var2;\n                var9 = temp3;\n                var var10 = memory[var9:var9 + 0x20] - var4 - 0x01;\n            \n                if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n            \n                memory[var10 + 0x20 + var9:var10 + 0x20 + var9 + 0x01] = byte(var8 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x00);\n                var3 = var7 >> 0x08;\n            \n                if (var3 >= 0x02) { revert(memory[0x00:0x00]); }\n            \n                var4 = var4 + 0x01;\n            \n                if (var4 >= var1) { goto label_0A01; }\n                else { goto label_096E; }\n            }\n        } else {\n            var temp4 = var4;\n            memory[var3 + 0x20:var3 + 0x20 + temp4] = code[code.length:code.length + temp4];\n            var2 = var3;\n            var3 = 0x00;\n            var4 = 0x00;\n        \n            if (var4 >= var1) { goto label_0A01; }\n            else { goto label_096E; }\n        }\n    }\n    \n    function func_0B4A(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = memory[0x40:0x60];\n        var var1 = temp0;\n        memory[var1:var1 + 0x20] = 0x20;\n        memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x20;\n        memory[var1 + 0x40:var1 + 0x40 + 0x20] = 0x20;\n        memory[var1 + 0x60:var1 + 0x60 + 0x20] = arg0;\n        memory[var1 + 0x80:var1 + 0x80 + 0x20] = arg1;\n        memory[var1 + 0xa0:var1 + 0xa0 + 0x20] = arg2;\n        var temp1;\n        temp1, memory[var1:var1 + 0x20] = address(0x05).staticcall.gas(msg.gas - 0x07d0)(memory[var1:var1 + 0xc0]);\n    \n        if (temp1) { return memory[var1:var1 + 0x20]; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0C64(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 <= 0x03) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0x01 != 0x01) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 - 0x01;\n        var var2 = 0x00;\n    \n        if (var1 & 0x01 != 0x00) {\n        label_0CB4:\n            var var3 = 0x00;\n        \n            if (var3 >= 0x1c) {\n            label_0E32:\n                return 0x01;\n            } else {\n            label_0CC4:\n                var var4 = 0x00;\n                var var5 = 0x02;\n                var temp0 = arg0;\n                var var6 = temp0 - 0x03;\n                var var7 = 0x02;\n                var temp1 = memory[0x40:0x60] + 0x20;\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = temp1 + 0x20;\n                memory[temp2:temp2 + 0x20] = var3;\n                var temp3 = temp2 + 0x20;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = temp3 - temp4 - 0x20;\n                var var8 = temp4;\n                memory[0x40:0x60] = temp3;\n                var var9 = memory[0x40:0x60];\n                var var10 = var9;\n                var var11 = var8 + 0x20;\n                var var12 = memory[var8:var8 + 0x20];\n                var var13 = var12;\n                var var14 = var10;\n                var var15 = var11;\n            \n                if (var13 < 0x20) {\n                label_0D28:\n                    var temp5 = 0x0100 ** (0x20 - var13) - 0x01;\n                    var temp6 = var14;\n                    memory[temp6:temp6 + 0x20] = (memory[var15:var15 + 0x20] & ~temp5) | (memory[temp6:temp6 + 0x20] & temp5);\n                    var8 = var12 + var10;\n                    var temp7 = memory[0x40:0x60];\n                    var temp8;\n                    temp8, memory[temp7:temp7 + 0x20] = address(var7).staticcall.gas(msg.gas)(memory[temp7:temp7 + var8 - temp7]);\n                    var9 = !temp8;\n                \n                    if (!var9) {\n                        var7 = memory[0x40:0x60];\n                        var8 = returndata.length;\n                    \n                        if (var8 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var7 = memory[var7:var7 + 0x20] >> 0x00;\n                    \n                        if (!var6) { assert(); }\n                    \n                        var temp9 = var7 % var6 + var5;\n                        var4 = temp9;\n                        var5 = 0x00;\n                        var6 = 0x0dab;\n                        var7 = var4;\n                        var8 = var1;\n                        var9 = arg0;\n                        var6 = func_0B4A(var7, var8, var9);\n                        var5 = var6;\n                        var6 = var5 == 0x01;\n                    \n                        if (var6) {\n                            if (!var6) {\n                            label_0DCA:\n                                var6 = 0x00;\n                                var7 = 0x01;\n                            \n                                if (var7 < var2) {\n                                    var8 = arg0;\n                                \n                                    if (!var8) { assert(); }\n                                \n                                    var9 = var5;\n                                    var10 = var9;\n                                    // Unhandled termination\n                                } else if (var6) {\n                                label_0E25:\n                                    var3 = var3 + 0x01;\n                                \n                                    if (var3 >= 0x1c) { goto label_0E32; }\n                                    else { goto label_0CC4; }\n                                } else { return 0x00; }\n                            } else {\n                            label_0DC4:\n                                goto label_0E25;\n                            }\n                        } else if (var5 != arg0 - 0x01) { goto label_0DCA; }\n                        else { goto label_0DC4; }\n                    } else {\n                        var temp10 = returndata.length;\n                        memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                label_0D0E:\n                    var temp11 = var15;\n                    var temp12 = var14;\n                    memory[temp12:temp12 + 0x20] = memory[temp11:temp11 + 0x20];\n                    var14 = temp12 + 0x20;\n                    var15 = temp11 + 0x20;\n                    var13 = var13 - 0x20;\n                \n                    if (var13 < 0x20) { goto label_0D28; }\n                    else { goto label_0D0E; }\n                }\n            }\n        } else {\n        label_0C9D:\n            var3 = 0x02;\n            var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var1 = var4 / var3;\n            var2 = var2 + 0x01;\n        \n            if (var1 & 0x01 != 0x00) { goto label_0CB4; }\n            else { goto label_0C9D; }\n        }\n    }\n    \n    function func_0E3F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x01;\n        var var3 = 0x0e50;\n        var var4 = memory[arg0:arg0 + 0x20];\n        var var5 = memory[arg1:arg1 + 0x20];\n        var3 = func_1716(var4, var5);\n        var temp0 = var3 - var2;\n        var1 = temp0;\n        var2 = var1;\n    \n        if (var2 i< 0x00) {\n        label_0EE2:\n            return 0x00;\n        } else {\n        label_0E62:\n            var3 = 0x00;\n            var4 = 0x0e6d;\n            var5 = arg0;\n            var var6 = var2;\n            var4 = func_172F(var5, var6);\n            var3 = var4;\n            var4 = 0x00;\n            var5 = 0x0e7b;\n            var6 = arg1;\n            var var7 = var2;\n            var5 = func_172F(var6, var7);\n            var4 = var5;\n        \n            if (var3 & 0xff > var4 & 0xff) {\n                var0 = 0x01;\n                goto label_0EE9;\n            } else if (var4 & 0xff <= var3 & 0xff) {\n                var2 = var2 - 0x01;\n            \n                if (var2 i< 0x00) { goto label_0EE2; }\n                else { goto label_0E62; }\n            } else {\n                var0 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n            \n            label_0EE9:\n                return var0;\n            }\n        }\n    }\n    \n    function func_12D6(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var0 = temp3;\n        var var1 = temp0;\n        var var2 = temp2;\n        memory[var0:var0 + 0x20] = var2;\n        var var3 = var0 + 0x20;\n        var var4 = var1;\n        var temp4 = storage[var4];\n        var var5 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var5) {\n        label_1380:\n            r0 = func_0E3F(arg1, var0);\n            // Error: Could not resolve method call return address!\n        } else if (0x1f < var5) {\n            var temp5 = var3;\n            var temp6 = temp5 + var5;\n            var3 = temp6;\n            memory[0x00:0x20] = var4;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp5 + 0x20;\n        \n            if (var3 <= var5) { goto label_1377; }\n        \n        label_1363:\n            var temp8 = var4;\n            var temp9 = var5;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var4 = temp8 + 0x01;\n            var5 = temp9 + 0x20;\n        \n            if (var3 > var5) { goto label_1363; }\n        \n        label_1377:\n            var temp10 = var3;\n            var temp11 = temp10 + (var5 - temp10 & 0x1f);\n            var5 = temp10;\n            var3 = temp11;\n            goto label_1380;\n        } else {\n            var temp12 = var3;\n            memory[temp12:temp12 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp12 + 0x20;\n            var5 = var5;\n            goto label_1380;\n        }\n    }\n    \n    function func_13FF(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7) returns (var r0) {\n        if (0x1f < arg7) {\n            var temp0 = arg5;\n            var temp1 = temp0 + arg7;\n            arg5 = temp1;\n            memory[0x00:0x20] = arg6;\n            var temp2 = keccak256(memory[0x00:0x20]);\n            memory[temp0:temp0 + 0x20] = storage[temp2];\n            arg6 = temp2 + 0x01;\n            arg7 = temp0 + 0x20;\n        \n            if (arg5 <= arg7) { goto label_143C; }\n        \n        label_1428:\n            var temp3 = arg6;\n            var temp4 = arg7;\n            memory[temp4:temp4 + 0x20] = storage[temp3];\n            arg6 = temp3 + 0x01;\n            arg7 = temp4 + 0x20;\n        \n            if (arg5 > arg7) { goto label_1428; }\n        \n        label_143C:\n            var temp5 = arg5;\n            var temp6 = temp5 + (arg7 - temp5 & 0x1f);\n            arg7 = temp5;\n            arg5 = temp6;\n        \n        label_1445:\n            arg3 = 0x60;\n            var temp7 = memory[0x40:0x60];\n            arg4 = temp7;\n            var temp8 = arg0;\n            var temp9 = memory[temp8:temp8 + 0x20];\n            arg5 = temp9;\n            var temp10 = memory[arg2:arg2 + 0x20];\n            arg6 = temp10;\n            memory[arg4:arg4 + 0x20] = arg5;\n            memory[arg4 + 0x20:arg4 + 0x20 + 0x20] = 0x20;\n            memory[arg4 + 0x40:arg4 + 0x40 + 0x20] = arg6;\n            var temp11;\n            temp11, memory[arg4 + 0x60:arg4 + 0x60 + arg5] = address(0x04).staticcall.gas(0x2710)(memory[temp8 + 0x20:temp8 + 0x20 + arg5]);\n        \n            if (!temp11) { revert(memory[0x00:0x00]); }\n        \n            var temp12 = arg5;\n            var temp13 = arg4;\n            memory[temp13 + temp12 + 0x60:temp13 + temp12 + 0x60 + 0x20] = arg1;\n            var temp14 = arg6;\n            var temp15;\n            temp15, memory[temp13 + 0x80 + temp12:temp13 + 0x80 + temp12 + temp14] = address(0x04).staticcall.gas(0x2710)(memory[arg2 + 0x20:arg2 + 0x20 + temp14]);\n        \n            if (!temp15) { revert(memory[0x00:0x00]); }\n        \n            var temp16 = arg6;\n            var temp17 = arg4;\n            var temp18;\n            temp18, memory[temp17 + 0x20:temp17 + 0x20 + temp16] = address(0x05).staticcall.gas(msg.gas - 0x07d0)(memory[temp17:temp17 + arg5 + 0x80 + temp16]);\n        \n            if (!temp18) { revert(memory[0x00:0x00]); }\n        \n            var temp19 = arg6;\n            var temp20 = arg4;\n            memory[0x40:0x60] = temp20 + temp19 + 0x20;\n            memory[temp20:temp20 + 0x20] = temp19;\n            return temp20;\n        } else {\n            var temp21 = arg5;\n            memory[temp21:temp21 + 0x20] = storage[arg6] / 0x0100 * 0x0100;\n            arg5 = temp21 + 0x20;\n            arg7 = arg7;\n            goto label_1445;\n        }\n    }\n    \n    function func_1716(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 > arg1) { return arg0; }\n    \n        var var1 = arg1;\n        return var1;\n    }\n    \n    function func_172F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 < memory[arg0:arg0 + 0x20]) {\n            var temp0 = arg0;\n            var var1 = temp0;\n            var var2 = memory[var1:var1 + 0x20] - arg1 - 0x01;\n        \n            if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n        \n            var0 = ((memory[var2 + 0x20 + var1:var2 + 0x20 + var1 + 0x20] >> 0xf8) << 0xf8) >> 0xf8;\n        \n        label_1765:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1765;\n        }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x783ce458 > var0) {\n            if (var0 == 0x01345d85) {\n                // Dispatch table entry for challenges_length()\n                var var1 = 0x00b6;\n                var var2 = challenges_length();\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x3b2e10d8) {\n                // Dispatch table entry for 0x3b2e10d8 (unknown)\n                var1 = 0x021c;\n                var2 = 0x04;\n                var var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var1 = func_00E2(var2, var3);\n                var temp2 = memory[0x40:0x60];\n                var2 = temp2;\n                var3 = var2;\n                var temp3 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp3 - var3;\n                var temp4 = var1;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var4 = temp3 + 0x20;\n                var var5 = temp4 + 0x20;\n                var var6 = memory[temp4:temp4 + 0x20];\n                var var7 = var6;\n                var var8 = var4;\n                var var9 = var5;\n                var var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_025C:\n                    var temp5 = var6;\n                    var4 = temp5 + var4;\n                    var5 = temp5 & 0x1f;\n                \n                    if (!var5) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var4 - temp6];\n                    } else {\n                        var temp7 = var5;\n                        var temp8 = var4 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_024A:\n                    var temp10 = var10;\n                    memory[var8 + temp10:var8 + temp10 + 0x20] = memory[var9 + temp10:var9 + temp10 + 0x20];\n                    var10 = temp10 + 0x20;\n                \n                    if (var10 >= var7) { goto label_025C; }\n                    else { goto label_024A; }\n                }\n            } else if (var0 == 0x5fce693d) {\n                // Dispatch table entry for claim_bounty(bytes32)\n                var1 = 0x02c3;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                claim_bounty(var2, var3);\n                stop();\n            } else if (var0 == 0x606748cf) {\n                // Dispatch table entry for 0x606748cf (unknown)\n                var1 = 0x041f;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n            \n                var1 = func_02DB(var2, var3);\n                var temp11 = memory[0x40:0x60];\n                var2 = temp11;\n                var3 = var2;\n                var temp12 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp12 - var3;\n                var temp13 = var1;\n                memory[temp12:temp12 + 0x20] = memory[temp13:temp13 + 0x20];\n                var4 = temp12 + 0x20;\n                var5 = temp13 + 0x20;\n                var6 = memory[temp13:temp13 + 0x20];\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_045F:\n                    var temp14 = var6;\n                    var4 = temp14 + var4;\n                    var5 = temp14 & 0x1f;\n                \n                    if (!var5) {\n                        var temp15 = memory[0x40:0x60];\n                        return memory[temp15:temp15 + var4 - temp15];\n                    } else {\n                        var temp16 = var5;\n                        var temp17 = var4 - temp16;\n                        memory[temp17:temp17 + 0x20] = ~(0x0100 ** (0x20 - temp16) - 0x01) & memory[temp17:temp17 + 0x20];\n                        var temp18 = memory[0x40:0x60];\n                        return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n                    }\n                } else {\n                label_044D:\n                    var temp19 = var10;\n                    memory[var8 + temp19:var8 + temp19 + 0x20] = memory[var9 + temp19:var9 + temp19 + 0x20];\n                    var10 = temp19 + 0x20;\n                \n                    if (var10 >= var7) { goto label_045F; }\n                    else { goto label_044D; }\n                }\n            } else if (var0 == 0x71b8fb01) {\n                // Dispatch table entry for terminate_contract()\n                var1 = 0x04a2;\n            \n                if (msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { selfdestruct(msg.sender); }\n                else { revert(memory[0x00:0x00]); }\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x783ce458) {\n            // Dispatch table entry for expmod(uint256,uint256,uint256)\n            var1 = 0x04e4;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n        \n            var1 = expmod(var2, var3);\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = var1;\n            var temp21 = memory[0x40:0x60];\n            return memory[temp21:temp21 + (temp20 + 0x20) - temp21];\n        } else if (var0 == 0x8f1d3776) {\n            // Dispatch table entry for challenges(uint256)\n            var1 = 0x0526;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2, var3, var4 = challenges(var2, var3);\n            var temp22 = memory[0x40:0x60];\n            var5 = temp22;\n            var6 = var5;\n            var temp23 = var6 + 0x20;\n            memory[temp23:temp23 + 0x20] = !!var3;\n            var temp24 = temp23 + 0x20;\n            memory[temp24:temp24 + 0x20] = var4;\n            var temp25 = temp24 + 0x20;\n            memory[var6:var6 + 0x20] = temp25 - var6;\n            var temp26 = var2;\n            memory[temp25:temp25 + 0x20] = memory[temp26:temp26 + 0x20];\n            var7 = temp25 + 0x20;\n            var8 = temp26 + 0x20;\n            var9 = memory[temp26:temp26 + 0x20];\n            var10 = var9;\n            var var11 = var7;\n            var var12 = var8;\n            var var13 = 0x00;\n        \n            if (var13 >= var10) {\n            label_0576:\n                var temp27 = var9;\n                var7 = temp27 + var7;\n                var8 = temp27 & 0x1f;\n            \n                if (!var8) {\n                    var temp28 = memory[0x40:0x60];\n                    return memory[temp28:temp28 + var7 - temp28];\n                } else {\n                    var temp29 = var8;\n                    var temp30 = var7 - temp29;\n                    memory[temp30:temp30 + 0x20] = ~(0x0100 ** (0x20 - temp29) - 0x01) & memory[temp30:temp30 + 0x20];\n                    var temp31 = memory[0x40:0x60];\n                    return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n                }\n            } else {\n            label_0564:\n                var temp32 = var13;\n                memory[var11 + temp32:var11 + temp32 + 0x20] = memory[var12 + temp32:var12 + temp32 + 0x20];\n                var13 = temp32 + 0x20;\n            \n                if (var13 >= var10) { goto label_0576; }\n                else { goto label_0564; }\n            }\n        } else if (var0 == 0xa355312a) {\n            // Dispatch table entry for 0xa355312a (unknown)\n            var1 = 0x05df;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = func_05C9(var2, var3);\n        \n        label_05DF:\n            var temp33 = memory[0x40:0x60];\n            memory[temp33:temp33 + 0x20] = !!var1;\n            var temp34 = memory[0x40:0x60];\n            return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n        } else if (var0 == 0xdf199a1f) {\n            // Dispatch table entry for 0xdf199a1f (unknown)\n            var1 = 0x0749;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = func_060F(var2, var3);\n        \n        label_0749:\n            var temp35 = memory[0x40:0x60];\n            memory[temp35:temp35 + 0x20] = var1;\n            var temp36 = memory[0x40:0x60];\n            return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n        } else if (var0 == 0xe20da751) {\n            // Dispatch table entry for 0xe20da751 (unknown)\n            var1 = 0x08c3;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n        \n            func_0775(var2, var3);\n            stop();\n        } else if (var0 == 0xeff0f592) {\n            // Dispatch table entry for claims(bytes32)\n            var1 = 0x08f1;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var2 = claims(var2, var3);\n            var temp37 = memory[0x40:0x60];\n            memory[temp37:temp37 + 0x20] = var2;\n            var temp38 = memory[0x40:0x60];\n            return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_00E2(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = temp0 + arg1;\n        arg1 = temp0;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1 + var1;\n        var1 = temp1;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var1;\n        var temp3 = msg.data[temp2:temp2 + 0x20];\n        var1 = temp3;\n        var var2 = var0;\n        var0 = temp2 + 0x20;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = var2;\n        var temp5 = var1;\n        var temp6 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp6 + (temp5 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + temp5] = msg.data[var0:var0 + temp5];\n        memory[temp7 + temp5:temp7 + temp5 + 0x20] = 0x00;\n        var temp8 = arg1;\n        arg1 = arg0;\n        arg0 = temp6;\n        var0 = temp8;\n        var1 = temp4 + 0x20;\n        var2 = msg.data[temp4:temp4 + 0x20];\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp9 = var0 + var2;\n        var2 = temp9;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp10 = var2;\n        var temp11 = msg.data[temp10:temp10 + 0x20];\n        var2 = temp11;\n        var temp12 = var1;\n        var1 = temp10 + 0x20;\n        var var3 = temp12;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var2;\n        var temp14 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp14 + (temp13 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp14:temp14 + 0x20] = temp13;\n        var temp15 = temp14 + 0x20;\n        memory[temp15:temp15 + temp13] = msg.data[var1:var1 + temp13];\n        memory[temp15 + temp13:temp15 + temp13 + 0x20] = 0x00;\n        arg1 = temp14;\n        r0 = func_090D(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function claim_bounty(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] != 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = block.timestamp + 0x015180;\n    }\n    \n    function func_02DB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var0 = arg1 + 0x20;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        var temp7 = var1;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var0:var0 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = arg1;\n        var temp11 = arg0;\n        arg0 = temp8;\n        var temp12 = temp6 + 0x20;\n        arg1 = msg.data[temp6:temp6 + 0x20];\n        var0 = temp11;\n        var1 = temp10;\n        var var3 = msg.data[temp12:temp12 + 0x20];\n        var2 = temp12 + 0x20;\n    \n        if (var3 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp13 = var1 + var3;\n        var3 = temp13;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var3;\n        var temp15 = msg.data[temp14:temp14 + 0x20];\n        var3 = temp15;\n        var var4 = var2;\n        var2 = temp14 + 0x20;\n    \n        if ((var3 > 0x0100000000) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp16 = var3;\n        var temp17 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp17:temp17 + 0x20] = temp16;\n        var temp18 = temp17 + 0x20;\n        memory[temp18:temp18 + temp16] = msg.data[var2:var2 + temp16];\n        memory[temp18 + temp16:temp18 + temp16 + 0x20] = 0x00;\n        var0 = temp17;\n        var1 = 0x60;\n        var temp19 = memory[0x40:0x60];\n        var2 = temp19;\n        var temp20 = arg0;\n        var temp21 = memory[temp20:temp20 + 0x20];\n        var3 = temp21;\n        var temp22 = memory[var0:var0 + 0x20];\n        var4 = temp22;\n        memory[var2:var2 + 0x20] = var3;\n        memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x20;\n        memory[var2 + 0x40:var2 + 0x40 + 0x20] = var4;\n        var temp23;\n        temp23, memory[var2 + 0x60:var2 + 0x60 + var3] = address(0x04).staticcall.gas(0x2710)(memory[temp20 + 0x20:temp20 + 0x20 + var3]);\n    \n        if (!temp23) { revert(memory[0x00:0x00]); }\n    \n        var temp24 = var3;\n        var temp25 = var2;\n        memory[temp25 + temp24 + 0x60:temp25 + temp24 + 0x60 + 0x20] = arg1;\n        var temp26 = var4;\n        var temp27;\n        temp27, memory[temp25 + 0x80 + temp24:temp25 + 0x80 + temp24 + temp26] = address(0x04).staticcall.gas(0x2710)(memory[var0 + 0x20:var0 + 0x20 + temp26]);\n    \n        if (!temp27) { revert(memory[0x00:0x00]); }\n    \n        var temp28 = var4;\n        var temp29 = var2;\n        var temp30;\n        temp30, memory[temp29 + 0x20:temp29 + 0x20 + temp28] = address(0x05).staticcall.gas(msg.gas - 0x07d0)(memory[temp29:temp29 + var3 + 0x80 + temp28]);\n    \n        if (!temp30) { revert(memory[0x00:0x00]); }\n    \n        var temp31 = var4;\n        var temp32 = var2;\n        memory[0x40:0x60] = temp32 + temp31 + 0x20;\n        memory[temp32:temp32 + 0x20] = temp31;\n        return temp32;\n    }\n    \n    function expmod(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp1:temp1 + 0x20];\n        var var0 = msg.data[temp1 + 0x20:temp1 + 0x20 + 0x20];\n        r0 = func_0B4A(arg0, arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function challenges(var arg0, var arg1) returns (var arg0, var arg1, var r2) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        arg0 = keccak256(memory[0x00:0x40]);\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        arg1 = temp3;\n        r2 = temp0;\n        var var1 = temp2;\n        memory[arg1:arg1 + 0x20] = var1;\n        var var2 = arg1 + 0x20;\n        var var3 = r2;\n        var temp4 = storage[var3];\n        var var4 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var4) {\n        label_0C41:\n            var temp5 = arg0;\n            arg0 = arg1;\n            arg1 = storage[temp5 + 0x01] & 0xff;\n            r2 = storage[temp5 + 0x02];\n            return arg0, arg1, r2;\n        } else if (0x1f < var4) {\n            var temp6 = var2;\n            var temp7 = temp6 + var4;\n            var2 = temp7;\n            memory[0x00:0x20] = var3;\n            var temp8 = keccak256(memory[0x00:0x20]);\n            memory[temp6:temp6 + 0x20] = storage[temp8];\n            var3 = temp8 + 0x01;\n            var4 = temp6 + 0x20;\n        \n            if (var2 <= var4) { goto label_0C38; }\n        \n        label_0C24:\n            var temp9 = var3;\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[temp9];\n            var3 = temp9 + 0x01;\n            var4 = temp10 + 0x20;\n        \n            if (var2 > var4) { goto label_0C24; }\n        \n        label_0C38:\n            var temp11 = var2;\n            var temp12 = temp11 + (var4 - temp11 & 0x1f);\n            var4 = temp11;\n            var2 = temp12;\n            goto label_0C41;\n        } else {\n            var temp13 = var2;\n            memory[temp13:temp13 + 0x20] = storage[var3] / 0x0100 * 0x0100;\n            var2 = temp13 + 0x20;\n            var4 = var4;\n            goto label_0C41;\n        }\n    }\n    \n    function func_05C9(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        r0 = func_0C64(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_060F(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = temp0 + arg1;\n        arg1 = temp0;\n        arg0 = temp1;\n        var var1 = msg.data[arg1:arg1 + 0x20];\n        var var0 = arg1 + 0x20;\n    \n        if (var1 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg1 + var1;\n        var1 = temp2;\n    \n        if (var1 + 0x20 > arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var1;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var1 = temp4;\n        var temp5 = var0;\n        var0 = temp3 + 0x20;\n        var var2 = temp5;\n    \n        if ((var1 > 0x0100000000) | (var0 + var1 > arg0)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var2;\n        var temp7 = var1;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var0:var0 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = arg1;\n        arg1 = arg0;\n        arg0 = temp8;\n        var0 = temp10;\n        var2 = msg.data[temp6:temp6 + 0x20];\n        var1 = temp6 + 0x20;\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp11 = var0 + var2;\n        var2 = temp11;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var2;\n        var temp13 = msg.data[temp12:temp12 + 0x20];\n        var2 = temp13;\n        var var3 = var1;\n        var1 = temp12 + 0x20;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var2;\n        var temp15 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp15 + (temp14 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp15:temp15 + 0x20] = temp14;\n        var temp16 = temp15 + 0x20;\n        memory[temp16:temp16 + temp14] = msg.data[var1:var1 + temp14];\n        memory[temp16 + temp14:temp16 + temp14 + 0x20] = 0x00;\n        arg1 = temp15;\n        r0 = func_0E3F(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0775(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = temp0 + 0x20;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = temp0 + arg1;\n        var var0 = temp0;\n        var var1 = temp1 + 0x20;\n        var var2 = msg.data[temp1:temp1 + 0x20];\n    \n        if (var2 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var0 + var2;\n        var2 = temp2;\n    \n        if (var2 + 0x20 > arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var2;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var2 = temp4;\n        var temp5 = var1;\n        var1 = temp3 + 0x20;\n        var var3 = temp5;\n    \n        if ((var2 > 0x0100000000) | (var1 + var2 > arg1)) { revert(memory[0x00:0x00]); }\n    \n        var temp6 = var3;\n        var temp7 = var2;\n        var temp8 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp8:temp8 + 0x20] = temp7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + temp7] = msg.data[var1:var1 + temp7];\n        memory[temp9 + temp7:temp9 + temp7 + 0x20] = 0x00;\n        var temp10 = var0;\n        var0 = arg1;\n        arg1 = temp8;\n        var1 = temp10;\n        var2 = temp6 + 0x20;\n        var3 = msg.data[temp6:temp6 + 0x20];\n    \n        if (var3 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp11 = var1 + var3;\n        var3 = temp11;\n    \n        if (var3 + 0x20 > var0) { revert(memory[0x00:0x00]); }\n    \n        var temp12 = var3;\n        var temp13 = msg.data[temp12:temp12 + 0x20];\n        var3 = temp13;\n        var var4 = var2;\n        var2 = temp12 + 0x20;\n    \n        if ((var3 > 0x0100000000) | (var2 + var3 > var0)) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var3;\n        var temp15 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp15 + (temp14 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp15:temp15 + 0x20] = temp14;\n        var temp16 = temp15 + 0x20;\n        memory[temp16:temp16 + temp14] = msg.data[var2:var2 + temp14];\n        memory[temp16 + temp14:temp16 + temp14 + 0x20] = 0x00;\n        var0 = temp15;\n        var1 = msg.data[var4:var4 + 0x20];\n    \n        if (arg0 >= storage[0x02]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x00;\n        var3 = 0x02;\n        var4 = arg0;\n        var temp17 = arg1;\n        var var5 = temp17;\n        var var6 = var0;\n        var var7 = var1;\n        var var8 = msg.sender << 0x00;\n        var temp18 = memory[0x40:0x60] + 0x20;\n        var var9 = temp18;\n        memory[var9:var9 + 0x20] = var4;\n        var var10 = var9 + 0x20;\n        var var12 = memory[var5:var5 + 0x20];\n        var var11 = var5 + 0x20;\n        var var13 = var12;\n        var var14 = var10;\n        var var15 = var11;\n    \n        if (var13 < 0x20) {\n        label_0F89:\n            var temp19 = 0x0100 ** (0x20 - var13) - 0x01;\n            var temp20 = var14;\n            memory[temp20:temp20 + 0x20] = (memory[var15:var15 + 0x20] & ~temp19) | (memory[temp20:temp20 + 0x20] & temp19);\n            var temp21 = var12 + var10;\n            var10 = temp21;\n            var temp22 = var6;\n            var12 = memory[temp22:temp22 + 0x20];\n            var11 = temp22 + 0x20;\n            var13 = var12;\n            var14 = var10;\n            var15 = var11;\n        \n            if (var13 < 0x20) {\n            label_0FDA:\n                var temp23 = 0x0100 ** (0x20 - var13) - 0x01;\n                var temp24 = var14;\n                memory[temp24:temp24 + 0x20] = (memory[var15:var15 + 0x20] & ~temp23) | (memory[temp24:temp24 + 0x20] & temp23);\n                var temp25 = var12 + var10;\n                memory[temp25:temp25 + 0x20] = var7;\n                var temp26 = temp25 + 0x20;\n                memory[temp26:temp26 + 0x20] = var8;\n                var temp27 = temp26 + 0x20;\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = temp27 - temp28 - 0x20;\n                var4 = temp28;\n                memory[0x40:0x60] = temp27;\n                var5 = memory[0x40:0x60];\n                var6 = var5;\n                var7 = var4 + 0x20;\n                var8 = memory[var4:var4 + 0x20];\n                var9 = var8;\n                var10 = var6;\n                var11 = var7;\n            \n                if (var9 < 0x20) {\n                label_1051:\n                    var temp29 = 0x0100 ** (0x20 - var9) - 0x01;\n                    var temp30 = var10;\n                    memory[temp30:temp30 + 0x20] = (memory[var11:var11 + 0x20] & ~temp29) | (memory[temp30:temp30 + 0x20] & temp29);\n                    var4 = var8 + var6;\n                    var temp31 = memory[0x40:0x60];\n                    var temp32;\n                    temp32, memory[temp31:temp31 + 0x20] = address(var3).staticcall.gas(msg.gas)(memory[temp31:temp31 + var4 - temp31]);\n                    var5 = !temp32;\n                \n                    if (!var5) {\n                        var3 = memory[0x40:0x60];\n                        var4 = returndata.length;\n                    \n                        if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = memory[var3:var3 + 0x20];\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x03;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x03;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] >= block.timestamp) { revert(memory[0x00:0x00]); }\n                    \n                        var3 = 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000;\n                        var4 = 0x02;\n                        var temp33 = arg1;\n                        var5 = temp33;\n                        var6 = memory[0x40:0x60];\n                        var7 = var6;\n                        var9 = memory[var5:var5 + 0x20];\n                        var8 = var5 + 0x20;\n                        var10 = var9;\n                        var11 = var7;\n                        var12 = var8;\n                    \n                        if (var10 < 0x20) {\n                        label_1151:\n                            var temp34 = 0x0100 ** (0x20 - var10) - 0x01;\n                            var temp35 = var11;\n                            memory[temp35:temp35 + 0x20] = (memory[var12:var12 + 0x20] & ~temp34) | (memory[temp35:temp35 + 0x20] & temp34);\n                            var5 = var9 + var7;\n                            var temp36 = memory[0x40:0x60];\n                            var temp37;\n                            temp37, memory[temp36:temp36 + 0x20] = address(var4).staticcall.gas(msg.gas)(memory[temp36:temp36 + var5 - temp36]);\n                            var6 = !temp37;\n                        \n                            if (!var6) {\n                                var4 = memory[0x40:0x60];\n                                var5 = returndata.length;\n                            \n                                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                            \n                                if (var1 & 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000 != (memory[var4:var4 + 0x20] >> 0x00) & var3) { revert(memory[0x00:0x00]); }\n                            \n                                if (var1 <= 0x8000000000000000000000000000000000000000000000000000000000000000) { revert(memory[0x00:0x00]); }\n                            \n                                var3 = 0x121f;\n                                var4 = var1;\n                                var3 = func_0C64(var4);\n                            \n                            label_121F:\n                            \n                                if (!var3) { revert(memory[0x00:0x00]); }\n                            \n                                var3 = 0x01;\n                                var4 = 0x1269;\n                                var5 = arg1;\n                                var temp38 = memory[0x40:0x60];\n                                var6 = temp38;\n                                memory[0x40:0x60] = var6 + 0x40;\n                                memory[var6:var6 + 0x20] = 0x01;\n                                memory[var6 + 0x20:var6 + 0x20 + 0x20] = 0x0100000000000000000000000000000000000000000000000000000000000000;\n                                var4 = func_0E3F(var5, var6);\n                            \n                            label_1269:\n                            \n                                if (var4 != var3) { revert(memory[0x00:0x00]); }\n                            \n                                var3 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n                                var4 = 0x138a;\n                                var5 = 0x12d6;\n                                var6 = arg1;\n                                var temp39 = memory[0x40:0x60];\n                                var7 = temp39;\n                                memory[0x40:0x60] = var7 + 0x40;\n                                memory[var7:var7 + 0x20] = 0x01;\n                                memory[var7 + 0x20:var7 + 0x20 + 0x20] = 0x0100000000000000000000000000000000000000000000000000000000000000;\n                                var5 = func_090D(var6, var7);\n                                var4 = func_12D6(arg0, var5);\n                            \n                                if (var4 != var3) { revert(memory[0x00:0x00]); }\n                            \n                                var3 = 0x60;\n                                var4 = 0x144f;\n                                var5 = var0;\n                                var6 = var1;\n                                memory[0x00:0x20] = arg0;\n                                memory[0x20:0x40] = 0x01;\n                                var temp40 = keccak256(memory[0x00:0x40]);\n                                var temp41 = storage[temp40];\n                                var temp42 = (!(temp41 & 0x01) * 0x0100 - 0x01 & temp41) / 0x02;\n                                var temp43 = memory[0x40:0x60];\n                                memory[0x40:0x60] = temp43 + (temp42 + 0x1f) / 0x20 * 0x20 + 0x20;\n                                var7 = temp43;\n                                var8 = temp40;\n                                var9 = temp42;\n                                memory[var7:var7 + 0x20] = var9;\n                                var10 = var7 + 0x20;\n                                var11 = var8;\n                                var temp44 = storage[var11];\n                                var12 = (!(temp44 & 0x01) * 0x0100 - 0x01 & temp44) / 0x02;\n                            \n                                if (!var12) {\n                                    var8 = 0x60;\n                                    var temp45 = memory[0x40:0x60];\n                                    var9 = temp45;\n                                    var temp46 = var5;\n                                    var temp47 = memory[temp46:temp46 + 0x20];\n                                    var10 = temp47;\n                                    var temp48 = memory[var7:var7 + 0x20];\n                                    var11 = temp48;\n                                    memory[var9:var9 + 0x20] = var10;\n                                    memory[var9 + 0x20:var9 + 0x20 + 0x20] = 0x20;\n                                    memory[var9 + 0x40:var9 + 0x40 + 0x20] = var11;\n                                    var temp49;\n                                    temp49, memory[var9 + 0x60:var9 + 0x60 + var10] = address(0x04).staticcall.gas(0x2710)(memory[temp46 + 0x20:temp46 + 0x20 + var10]);\n                                \n                                    if (!temp49) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp50 = var10;\n                                    var temp51 = var9;\n                                    memory[temp51 + temp50 + 0x60:temp51 + temp50 + 0x60 + 0x20] = var6;\n                                    var temp52 = var11;\n                                    var temp53;\n                                    temp53, memory[temp51 + 0x80 + temp50:temp51 + 0x80 + temp50 + temp52] = address(0x04).staticcall.gas(0x2710)(memory[var7 + 0x20:var7 + 0x20 + temp52]);\n                                \n                                    if (!temp53) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp54 = var11;\n                                    var temp55 = var9;\n                                    var temp56;\n                                    temp56, memory[temp55 + 0x20:temp55 + 0x20 + temp54] = address(0x05).staticcall.gas(msg.gas - 0x07d0)(memory[temp55:temp55 + var10 + 0x80 + temp54]);\n                                \n                                    if (!temp56) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp57 = var11;\n                                    var temp58 = var9;\n                                    memory[0x40:0x60] = temp58 + temp57 + 0x20;\n                                    memory[temp58:temp58 + 0x20] = temp57;\n                                    var4 = temp58;\n                                    // Error: Could not resolve jump destination!\n                                } else {\n                                    var4 = func_13FF(var5, var6, var7, var8, var9, var10, var11, var12);\n                                    var3 = var4;\n                                    var4 = 0x02;\n                                    var temp59 = arg1;\n                                    var5 = temp59;\n                                    var6 = memory[0x40:0x60] + 0x20;\n                                    var7 = var6;\n                                    var9 = memory[var5:var5 + 0x20];\n                                    var8 = var5 + 0x20;\n                                    var10 = var9;\n                                    var11 = var7;\n                                    var12 = var8;\n                                \n                                    if (var10 < 0x20) {\n                                    label_148A:\n                                        var temp60 = 0x0100 ** (0x20 - var10) - 0x01;\n                                        var temp61 = var11;\n                                        memory[temp61:temp61 + 0x20] = (memory[var12:var12 + 0x20] & ~temp60) | (memory[temp61:temp61 + 0x20] & temp60);\n                                        var temp62 = var9 + var7;\n                                        var temp63 = memory[0x40:0x60];\n                                        memory[temp63:temp63 + 0x20] = temp62 - temp63 - 0x20;\n                                        var5 = temp63;\n                                        memory[0x40:0x60] = temp62;\n                                        var6 = memory[0x40:0x60];\n                                        var7 = var6;\n                                        var8 = var5 + 0x20;\n                                        var9 = memory[var5:var5 + 0x20];\n                                        var10 = var9;\n                                        var11 = var7;\n                                        var12 = var8;\n                                    \n                                        if (var10 < 0x20) {\n                                        label_14F1:\n                                            var temp64 = 0x0100 ** (0x20 - var10) - 0x01;\n                                            var temp65 = var11;\n                                            memory[temp65:temp65 + 0x20] = (memory[var12:var12 + 0x20] & ~temp64) | (memory[temp65:temp65 + 0x20] & temp64);\n                                            var5 = var9 + var7;\n                                            var temp66 = memory[0x40:0x60];\n                                            var temp67;\n                                            temp67, memory[temp66:temp66 + 0x20] = address(var4).staticcall.gas(msg.gas)(memory[temp66:temp66 + var5 - temp66]);\n                                            var6 = !temp67;\n                                        \n                                            if (!var6) {\n                                                var4 = memory[0x40:0x60];\n                                                var5 = returndata.length;\n                                            \n                                                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                                            \n                                                var4 = memory[var4:var4 + 0x20];\n                                                var5 = 0x02;\n                                                var temp68 = var3;\n                                                var6 = temp68;\n                                                var7 = memory[0x40:0x60] + 0x20;\n                                                var8 = var7;\n                                                var9 = var6 + 0x20;\n                                                var10 = memory[var6:var6 + 0x20];\n                                                var11 = var10;\n                                                var12 = var8;\n                                                var13 = var9;\n                                            \n                                                if (var11 < 0x20) {\n                                                label_1592:\n                                                    var temp69 = 0x0100 ** (0x20 - var11) - 0x01;\n                                                    var temp70 = var12;\n                                                    memory[temp70:temp70 + 0x20] = (memory[var13:var13 + 0x20] & ~temp69) | (memory[temp70:temp70 + 0x20] & temp69);\n                                                    var temp71 = var10 + var8;\n                                                    var temp72 = memory[0x40:0x60];\n                                                    memory[temp72:temp72 + 0x20] = temp71 - temp72 - 0x20;\n                                                    var6 = temp72;\n                                                    memory[0x40:0x60] = temp71;\n                                                    var7 = memory[0x40:0x60];\n                                                    var8 = var7;\n                                                    var10 = memory[var6:var6 + 0x20];\n                                                    var9 = var6 + 0x20;\n                                                    var11 = var10;\n                                                    var12 = var8;\n                                                    var13 = var9;\n                                                \n                                                    if (var11 < 0x20) {\n                                                    label_15F9:\n                                                        var temp73 = 0x0100 ** (0x20 - var11) - 0x01;\n                                                        var temp74 = var12;\n                                                        memory[temp74:temp74 + 0x20] = (memory[var13:var13 + 0x20] & ~temp73) | (memory[temp74:temp74 + 0x20] & temp73);\n                                                        var6 = var10 + var8;\n                                                        var temp75 = memory[0x40:0x60];\n                                                        var temp76;\n                                                        temp76, memory[temp75:temp75 + 0x20] = address(var5).staticcall.gas(msg.gas)(memory[temp75:temp75 + var6 - temp75]);\n                                                        var7 = !temp76;\n                                                    \n                                                        if (!var7) {\n                                                            var5 = memory[0x40:0x60];\n                                                            var6 = returndata.length;\n                                                        \n                                                            if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            if (memory[var5:var5 + 0x20] != var4) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp77 = arg0;\n                                                            memory[0x00:0x20] = temp77;\n                                                            memory[0x20:0x40] = 0x01;\n                                                            var temp78 = keccak256(memory[0x00:0x40]) + 0x01;\n                                                            storage[temp78] = (storage[temp78] & ~0xff) | 0x01;\n                                                            memory[0x00:0x20] = temp77;\n                                                            memory[0x20:0x40] = 0x01;\n                                                            var temp79 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                                                            var temp80 = memory[0x40:0x60];\n                                                            var temp81;\n                                                            temp81, memory[temp80:temp80 + 0x00] = address(msg.sender).call.gas(!temp79 * 0x08fc).value(temp79)(memory[temp80:temp80 + memory[0x40:0x60] - temp80]);\n                                                            var4 = !temp81;\n                                                        \n                                                            if (!var4) { return; }\n                                                        \n                                                            var temp82 = returndata.length;\n                                                            memory[0x00:0x00 + temp82] = returndata[0x00:0x00 + temp82];\n                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                        } else {\n                                                            var temp83 = returndata.length;\n                                                            memory[0x00:0x00 + temp83] = returndata[0x00:0x00 + temp83];\n                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                        }\n                                                    } else {\n                                                    label_15DF:\n                                                        var temp84 = var13;\n                                                        var temp85 = var12;\n                                                        memory[temp85:temp85 + 0x20] = memory[temp84:temp84 + 0x20];\n                                                        var12 = temp85 + 0x20;\n                                                        var13 = temp84 + 0x20;\n                                                        var11 = var11 - 0x20;\n                                                    \n                                                        if (var11 < 0x20) { goto label_15F9; }\n                                                        else { goto label_15DF; }\n                                                    }\n                                                } else {\n                                                label_1578:\n                                                    var temp86 = var13;\n                                                    var temp87 = var12;\n                                                    memory[temp87:temp87 + 0x20] = memory[temp86:temp86 + 0x20];\n                                                    var12 = temp87 + 0x20;\n                                                    var13 = temp86 + 0x20;\n                                                    var11 = var11 - 0x20;\n                                                \n                                                    if (var11 < 0x20) { goto label_1592; }\n                                                    else { goto label_1578; }\n                                                }\n                                            } else {\n                                                var temp88 = returndata.length;\n                                                memory[0x00:0x00 + temp88] = returndata[0x00:0x00 + temp88];\n                                                revert(memory[0x00:0x00 + returndata.length]);\n                                            }\n                                        } else {\n                                        label_14D7:\n                                            var temp89 = var12;\n                                            var temp90 = var11;\n                                            memory[temp90:temp90 + 0x20] = memory[temp89:temp89 + 0x20];\n                                            var11 = temp90 + 0x20;\n                                            var12 = temp89 + 0x20;\n                                            var10 = var10 - 0x20;\n                                        \n                                            if (var10 < 0x20) { goto label_14F1; }\n                                            else { goto label_14D7; }\n                                        }\n                                    } else {\n                                    label_1470:\n                                        var temp91 = var12;\n                                        var temp92 = var11;\n                                        memory[temp92:temp92 + 0x20] = memory[temp91:temp91 + 0x20];\n                                        var11 = temp92 + 0x20;\n                                        var12 = temp91 + 0x20;\n                                        var10 = var10 - 0x20;\n                                    \n                                        if (var10 < 0x20) { goto label_148A; }\n                                        else { goto label_1470; }\n                                    }\n                                }\n                            } else {\n                                var temp93 = returndata.length;\n                                memory[0x00:0x00 + temp93] = returndata[0x00:0x00 + temp93];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                        label_1137:\n                            var temp94 = var12;\n                            var temp95 = var11;\n                            memory[temp95:temp95 + 0x20] = memory[temp94:temp94 + 0x20];\n                            var11 = temp95 + 0x20;\n                            var12 = temp94 + 0x20;\n                            var10 = var10 - 0x20;\n                        \n                            if (var10 < 0x20) { goto label_1151; }\n                            else { goto label_1137; }\n                        }\n                    } else {\n                        var temp96 = returndata.length;\n                        memory[0x00:0x00 + temp96] = returndata[0x00:0x00 + temp96];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                label_1037:\n                    var temp97 = var11;\n                    var temp98 = var10;\n                    memory[temp98:temp98 + 0x20] = memory[temp97:temp97 + 0x20];\n                    var10 = temp98 + 0x20;\n                    var11 = temp97 + 0x20;\n                    var9 = var9 - 0x20;\n                \n                    if (var9 < 0x20) { goto label_1051; }\n                    else { goto label_1037; }\n                }\n            } else {\n            label_0FC0:\n                var temp99 = var15;\n                var temp100 = var14;\n                memory[temp100:temp100 + 0x20] = memory[temp99:temp99 + 0x20];\n                var14 = temp100 + 0x20;\n                var15 = temp99 + 0x20;\n                var13 = var13 - 0x20;\n            \n                if (var13 < 0x20) { goto label_0FDA; }\n                else { goto label_0FC0; }\n            }\n        } else {\n        label_0F6F:\n            var temp101 = var15;\n            var temp102 = var14;\n            memory[temp102:temp102 + 0x20] = memory[temp101:temp101 + 0x20];\n            var14 = temp102 + 0x20;\n            var15 = temp101 + 0x20;\n            var13 = var13 - 0x20;\n        \n            if (var13 < 0x20) { goto label_0F89; }\n            else { goto label_0F6F; }\n        }\n    }\n    \n    function claims(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20];\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function challenges_length() returns (var r0) { return storage[0x02]; }\n    \n    function func_090D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x00;\n        var var2 = 0x01;\n        var var3 = 0x091f;\n        var var4 = memory[arg0:arg0 + 0x20];\n        var var5 = memory[arg1:arg1 + 0x20];\n        var3 = func_1716(var4, var5);\n        var temp0 = var3 + var2;\n        var1 = temp0;\n        var2 = 0x60;\n        var temp1 = memory[0x40:0x60];\n        var4 = var1;\n        var3 = temp1;\n        memory[var3:var3 + 0x20] = var4;\n        memory[0x40:0x60] = var3 + (var4 + 0x1f & ~0x1f) + 0x20;\n    \n        if (!var4) {\n            var2 = var3;\n            var3 = 0x00;\n            var4 = 0x00;\n        \n            if (var4 >= var1) {\n            label_0A01:\n                return var2;\n            } else {\n            label_096E:\n                var5 = 0x00;\n                var var6 = 0x0979;\n                var var7 = arg0;\n                var var8 = var4;\n                var6 = func_172F(var7, var8);\n                var5 = var6;\n                var6 = 0x00;\n                var7 = 0x0987;\n                var8 = arg1;\n                var var9 = var4;\n                var7 = func_172F(var8, var9);\n                var6 = var7;\n                var temp2 = (var5 & 0xff) + (var6 & 0xff) + var3;\n                var7 = temp2;\n                var8 = var7 << 0xf8;\n                var temp3 = var2;\n                var9 = temp3;\n                var var10 = memory[var9:var9 + 0x20] - var4 - 0x01;\n            \n                if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n            \n                memory[var10 + 0x20 + var9:var10 + 0x20 + var9 + 0x01] = byte(var8 & ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, 0x00);\n                var3 = var7 >> 0x08;\n            \n                if (var3 >= 0x02) { revert(memory[0x00:0x00]); }\n            \n                var4 = var4 + 0x01;\n            \n                if (var4 >= var1) { goto label_0A01; }\n                else { goto label_096E; }\n            }\n        } else {\n            var temp4 = var4;\n            memory[var3 + 0x20:var3 + 0x20 + temp4] = code[code.length:code.length + temp4];\n            var2 = var3;\n            var3 = 0x00;\n            var4 = 0x00;\n        \n            if (var4 >= var1) { goto label_0A01; }\n            else { goto label_096E; }\n        }\n    }\n    \n    function func_0B4A(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = memory[0x40:0x60];\n        var var1 = temp0;\n        memory[var1:var1 + 0x20] = 0x20;\n        memory[var1 + 0x20:var1 + 0x20 + 0x20] = 0x20;\n        memory[var1 + 0x40:var1 + 0x40 + 0x20] = 0x20;\n        memory[var1 + 0x60:var1 + 0x60 + 0x20] = arg0;\n        memory[var1 + 0x80:var1 + 0x80 + 0x20] = arg1;\n        memory[var1 + 0xa0:var1 + 0xa0 + 0x20] = arg2;\n        var temp1;\n        temp1, memory[var1:var1 + 0x20] = address(0x05).staticcall.gas(msg.gas - 0x07d0)(memory[var1:var1 + 0xc0]);\n    \n        if (temp1) { return memory[var1:var1 + 0x20]; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0C64(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 <= 0x03) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0x01 != 0x01) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 - 0x01;\n        var var2 = 0x00;\n    \n        if (var1 & 0x01 != 0x00) {\n        label_0CB4:\n            var var3 = 0x00;\n        \n            if (var3 >= 0x1c) {\n            label_0E32:\n                return 0x01;\n            } else {\n            label_0CC4:\n                var var4 = 0x00;\n                var var5 = 0x02;\n                var temp0 = arg0;\n                var var6 = temp0 - 0x03;\n                var var7 = 0x02;\n                var temp1 = memory[0x40:0x60] + 0x20;\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = temp1 + 0x20;\n                memory[temp2:temp2 + 0x20] = var3;\n                var temp3 = temp2 + 0x20;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = temp3 - temp4 - 0x20;\n                var var8 = temp4;\n                memory[0x40:0x60] = temp3;\n                var var9 = memory[0x40:0x60];\n                var var10 = var9;\n                var var11 = var8 + 0x20;\n                var var12 = memory[var8:var8 + 0x20];\n                var var13 = var12;\n                var var14 = var10;\n                var var15 = var11;\n            \n                if (var13 < 0x20) {\n                label_0D28:\n                    var temp5 = 0x0100 ** (0x20 - var13) - 0x01;\n                    var temp6 = var14;\n                    memory[temp6:temp6 + 0x20] = (memory[var15:var15 + 0x20] & ~temp5) | (memory[temp6:temp6 + 0x20] & temp5);\n                    var8 = var12 + var10;\n                    var temp7 = memory[0x40:0x60];\n                    var temp8;\n                    temp8, memory[temp7:temp7 + 0x20] = address(var7).staticcall.gas(msg.gas)(memory[temp7:temp7 + var8 - temp7]);\n                    var9 = !temp8;\n                \n                    if (!var9) {\n                        var7 = memory[0x40:0x60];\n                        var8 = returndata.length;\n                    \n                        if (var8 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var7 = memory[var7:var7 + 0x20] >> 0x00;\n                    \n                        if (!var6) { assert(); }\n                    \n                        var temp9 = var7 % var6 + var5;\n                        var4 = temp9;\n                        var5 = 0x00;\n                        var6 = 0x0dab;\n                        var7 = var4;\n                        var8 = var1;\n                        var9 = arg0;\n                        var6 = func_0B4A(var7, var8, var9);\n                        var5 = var6;\n                        var6 = var5 == 0x01;\n                    \n                        if (var6) {\n                            if (!var6) {\n                            label_0DCA:\n                                var6 = 0x00;\n                                var7 = 0x01;\n                            \n                                if (var7 < var2) {\n                                    var8 = arg0;\n                                \n                                    if (!var8) { assert(); }\n                                \n                                    var9 = var5;\n                                    var10 = var9;\n                                    // Unhandled termination\n                                } else if (var6) {\n                                label_0E25:\n                                    var3 = var3 + 0x01;\n                                \n                                    if (var3 >= 0x1c) { goto label_0E32; }\n                                    else { goto label_0CC4; }\n                                } else { return 0x00; }\n                            } else {\n                            label_0DC4:\n                                goto label_0E25;\n                            }\n                        } else if (var5 != arg0 - 0x01) { goto label_0DCA; }\n                        else { goto label_0DC4; }\n                    } else {\n                        var temp10 = returndata.length;\n                        memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                label_0D0E:\n                    var temp11 = var15;\n                    var temp12 = var14;\n                    memory[temp12:temp12 + 0x20] = memory[temp11:temp11 + 0x20];\n                    var14 = temp12 + 0x20;\n                    var15 = temp11 + 0x20;\n                    var13 = var13 - 0x20;\n                \n                    if (var13 < 0x20) { goto label_0D28; }\n                    else { goto label_0D0E; }\n                }\n            }\n        } else {\n        label_0C9D:\n            var3 = 0x02;\n            var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var1 = var4 / var3;\n            var2 = var2 + 0x01;\n        \n            if (var1 & 0x01 != 0x00) { goto label_0CB4; }\n            else { goto label_0C9D; }\n        }\n    }\n    \n    function func_0E3F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x01;\n        var var3 = 0x0e50;\n        var var4 = memory[arg0:arg0 + 0x20];\n        var var5 = memory[arg1:arg1 + 0x20];\n        var3 = func_1716(var4, var5);\n        var temp0 = var3 - var2;\n        var1 = temp0;\n        var2 = var1;\n    \n        if (var2 i< 0x00) {\n        label_0EE2:\n            return 0x00;\n        } else {\n        label_0E62:\n            var3 = 0x00;\n            var4 = 0x0e6d;\n            var5 = arg0;\n            var var6 = var2;\n            var4 = func_172F(var5, var6);\n            var3 = var4;\n            var4 = 0x00;\n            var5 = 0x0e7b;\n            var6 = arg1;\n            var var7 = var2;\n            var5 = func_172F(var6, var7);\n            var4 = var5;\n        \n            if (var3 & 0xff > var4 & 0xff) {\n                var0 = 0x01;\n                goto label_0EE9;\n            } else if (var4 & 0xff <= var3 & 0xff) {\n                var2 = var2 - 0x01;\n            \n                if (var2 i< 0x00) { goto label_0EE2; }\n                else { goto label_0E62; }\n            } else {\n                var0 = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n            \n            label_0EE9:\n                return var0;\n            }\n        }\n    }\n    \n    function func_12D6(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        var temp3 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp3 + (temp2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var0 = temp3;\n        var var1 = temp0;\n        var var2 = temp2;\n        memory[var0:var0 + 0x20] = var2;\n        var var3 = var0 + 0x20;\n        var var4 = var1;\n        var temp4 = storage[var4];\n        var var5 = (!(temp4 & 0x01) * 0x0100 - 0x01 & temp4) / 0x02;\n    \n        if (!var5) {\n        label_1380:\n            r0 = func_0E3F(arg1, var0);\n            // Error: Could not resolve method call return address!\n        } else if (0x1f < var5) {\n            var temp5 = var3;\n            var temp6 = temp5 + var5;\n            var3 = temp6;\n            memory[0x00:0x20] = var4;\n            var temp7 = keccak256(memory[0x00:0x20]);\n            memory[temp5:temp5 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp5 + 0x20;\n        \n            if (var3 <= var5) { goto label_1377; }\n        \n        label_1363:\n            var temp8 = var4;\n            var temp9 = var5;\n            memory[temp9:temp9 + 0x20] = storage[temp8];\n            var4 = temp8 + 0x01;\n            var5 = temp9 + 0x20;\n        \n            if (var3 > var5) { goto label_1363; }\n        \n        label_1377:\n            var temp10 = var3;\n            var temp11 = temp10 + (var5 - temp10 & 0x1f);\n            var5 = temp10;\n            var3 = temp11;\n            goto label_1380;\n        } else {\n            var temp12 = var3;\n            memory[temp12:temp12 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp12 + 0x20;\n            var5 = var5;\n            goto label_1380;\n        }\n    }\n    \n    function func_13FF(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7) returns (var r0) {\n        if (0x1f < arg7) {\n            var temp0 = arg5;\n            var temp1 = temp0 + arg7;\n            arg5 = temp1;\n            memory[0x00:0x20] = arg6;\n            var temp2 = keccak256(memory[0x00:0x20]);\n            memory[temp0:temp0 + 0x20] = storage[temp2];\n            arg6 = temp2 + 0x01;\n            arg7 = temp0 + 0x20;\n        \n            if (arg5 <= arg7) { goto label_143C; }\n        \n        label_1428:\n            var temp3 = arg6;\n            var temp4 = arg7;\n            memory[temp4:temp4 + 0x20] = storage[temp3];\n            arg6 = temp3 + 0x01;\n            arg7 = temp4 + 0x20;\n        \n            if (arg5 > arg7) { goto label_1428; }\n        \n        label_143C:\n            var temp5 = arg5;\n            var temp6 = temp5 + (arg7 - temp5 & 0x1f);\n            arg7 = temp5;\n            arg5 = temp6;\n        \n        label_1445:\n            arg3 = 0x60;\n            var temp7 = memory[0x40:0x60];\n            arg4 = temp7;\n            var temp8 = arg0;\n            var temp9 = memory[temp8:temp8 + 0x20];\n            arg5 = temp9;\n            var temp10 = memory[arg2:arg2 + 0x20];\n            arg6 = temp10;\n            memory[arg4:arg4 + 0x20] = arg5;\n            memory[arg4 + 0x20:arg4 + 0x20 + 0x20] = 0x20;\n            memory[arg4 + 0x40:arg4 + 0x40 + 0x20] = arg6;\n            var temp11;\n            temp11, memory[arg4 + 0x60:arg4 + 0x60 + arg5] = address(0x04).staticcall.gas(0x2710)(memory[temp8 + 0x20:temp8 + 0x20 + arg5]);\n        \n            if (!temp11) { revert(memory[0x00:0x00]); }\n        \n            var temp12 = arg5;\n            var temp13 = arg4;\n            memory[temp13 + temp12 + 0x60:temp13 + temp12 + 0x60 + 0x20] = arg1;\n            var temp14 = arg6;\n            var temp15;\n            temp15, memory[temp13 + 0x80 + temp12:temp13 + 0x80 + temp12 + temp14] = address(0x04).staticcall.gas(0x2710)(memory[arg2 + 0x20:arg2 + 0x20 + temp14]);\n        \n            if (!temp15) { revert(memory[0x00:0x00]); }\n        \n            var temp16 = arg6;\n            var temp17 = arg4;\n            var temp18;\n            temp18, memory[temp17 + 0x20:temp17 + 0x20 + temp16] = address(0x05).staticcall.gas(msg.gas - 0x07d0)(memory[temp17:temp17 + arg5 + 0x80 + temp16]);\n        \n            if (!temp18) { revert(memory[0x00:0x00]); }\n        \n            var temp19 = arg6;\n            var temp20 = arg4;\n            memory[0x40:0x60] = temp20 + temp19 + 0x20;\n            memory[temp20:temp20 + 0x20] = temp19;\n            return temp20;\n        } else {\n            var temp21 = arg5;\n            memory[temp21:temp21 + 0x20] = storage[arg6] / 0x0100 * 0x0100;\n            arg5 = temp21 + 0x20;\n            arg7 = arg7;\n            goto label_1445;\n        }\n    }\n    \n    function func_1716(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 > arg1) { return arg0; }\n    \n        var var1 = arg1;\n        return var1;\n    }\n    \n    function func_172F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 < memory[arg0:arg0 + 0x20]) {\n            var temp0 = arg0;\n            var var1 = temp0;\n            var var2 = memory[var1:var1 + 0x20] - arg1 - 0x01;\n        \n            if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n        \n            var0 = ((memory[var2 + 0x20 + var1:var2 + 0x20 + var1 + 0x20] >> 0xf8) << 0xf8) >> 0xf8;\n        \n        label_1765:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1765;\n        }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 18.323814153671265,
	"usage": {
		"completion_tokens": 204,
		"prompt_tokens": 18546,
		"total_tokens": 18750
	}
}