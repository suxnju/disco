{
	"address": "0x144106999ff7f2fc278f166975a93d661d885b8f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity contract code corresponding to the above decompiled code could look like this:\n\n```solidity\npragma solidity ^0.5.16;\n\ncontract BettingContract {\n    mapping (uint256 => uint256) private _winners;\n    mapping (uint256 => uint256) private _getRoundBalance;\n    uint256 private _minBet;\n    uint256 private _startTime;\n    uint256 private _roundTime;\n    uint256 private _walletPercent;\n    uint256 private _nextRoundPercent;\n    uint256 private _jackpotPercent;\n    address private _owner;\n    address private _pendingOwner;\n    address private _wallet;\n    address private _jackpot;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    // Ownership feature\n    modifier onlyOwner() {\n        require(msg.sender == _owner);\n        _;\n    }\n\n    constructor() public {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        _pendingOwner = newOwner;\n    }\n\n    function claimOwnership() public {\n        require(msg.sender == _pendingOwner);\n        emit OwnershipTransferred(_owner, _pendingOwner);\n        _owner = _pendingOwner;\n        _pendingOwner = address(0);\n    }\n\n    // Other functions\n    // ... \n\n    // Fallback function\n    function() external payable {\n        // custom logic\n    }\n}\n```\n\nPlease note, this is a simplified version of a contract and it doesn't include all the functionalities inferred from the decompiled EVM Bytecode. It also assumes that those functionalities are intended to be part of a betting contract. The original contract could be more complex and might include additional features or checks.",
				"role": "assistant"
			}
		}
	],
	"created": 1701459477,
	"id": "chatcmpl-8R3cjlFtRx7qKAUOVxancIhMQMOoE",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 12:11 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _winners; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _getRoundBalance; // STORAGE[0x3]\nuint256 _minBet; // STORAGE[0x4]\nuint256 _startTime; // STORAGE[0x5]\nuint256 _roundTime; // STORAGE[0x6]\nuint256 _walletPercent; // STORAGE[0x9]\nuint256 _nextRoundPercent; // STORAGE[0xa]\nuint256 _jackpotPercent; // STORAGE[0xb]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _pendingOwner; // STORAGE[0x1] bytes 0 to 19\naddress _wallet; // STORAGE[0x7] bytes 0 to 19\naddress _jackpot; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n    require(msg.gas > 0x249f0);\n    v0, v1, v2 = 0x587(msg.sender, 465);\n}\n\nfunction changeMinimalBet(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _minBet = varg0;\n}\n\nfunction getGain(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0xa7d();\n    require(varg0 < v0);\n    v1 = 0x887(varg0);\n    require(msg.sender == address(v1));\n    _getRoundBalance[varg0] = 0;\n    v2 = msg.sender.call().value(_getRoundBalance[varg0]).gas(2300 * !_getRoundBalance[varg0]);\n    require(v2); // checks call status, propagates error data on error\n}\n\nfunction getRoundBalance(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getRoundBalance[varg0];\n}\n\nfunction getWinner(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (!address(_winners[varg0])) {\n        v0 = v1 = _wallet;\n        goto 0x8820x263;\n    } else {\n        v0 = address(_winners[varg0]);\n    }\n    return address(v0);\n}\n\nfunction balances(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getRoundBalance[varg0];\n}\n\nfunction claimOwnership() public nonPayable { \n    require(msg.sender == _pendingOwner);\n    emit OwnershipTransferred(_owner, _pendingOwner);\n    _owner = _pendingOwner;\n    _pendingOwner = 0;\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction changeRoundTime(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _roundTime = varg0;\n}\n\nfunction walletPercent() public nonPayable { \n    return _walletPercent;\n}\n\nfunction jackpot() public nonPayable { \n    return _jackpot;\n}\n\nfunction getRoundByTime(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    assert(_startTime <= varg0);\n    assert(_roundTime);\n    return (varg0 - _startTime) / _roundTime;\n}\n\nfunction startTime() public nonPayable { \n    return _startTime;\n}\n\nfunction getPreviosRound() public nonPayable { \n    v0 = 0x9d7();\n    return v0;\n}\n\nfunction changeStartTime(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _startTime = varg0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction minBet() public nonPayable { \n    return _minBet;\n}\n\nfunction changeWallet(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _wallet = varg0;\n}\n\nfunction winners(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return address(_winners[varg0]);\n}\n\nfunction getCurrentRound() public nonPayable { \n    v0 = 0xa7d();\n    return v0;\n}\n\nfunction changePercents(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3) public nonPayable { \n    v0 = v1 = 465;\n    require(msg.data.length - 4 >= 128);\n    require(msg.sender == _owner);\n    v0 = v2 = 0;\n    v0 = v3 = 2778;\n    v0 = v4 = 2719;\n    v5 = v6 = varg1 + varg0;\n    assert(v6 >= varg0);\n    while (1) {\n        v5 += v0;\n        if (v5 >= v5) {\n            break;\n        }\n        assert(v5 >= v5);\n        require(v5 == 100);\n        _walletPercent = v0;\n        _nextRoundPercent = v0;\n        _jackpotPercent = v0;\n        exit;\n        goto {'0xa9f0x46b', '0xada'};\n    }\n}\n\nfunction jackpotPercent() public nonPayable { \n    return _jackpotPercent;\n}\n\nfunction setBet(address varg0) public payable { \n    v0 = v1 = 465;\n    require(msg.data.length - 4 >= 32);\n    require(msg.value >= _minBet);\n    v0 = v2 = 0xa7d();\n    v0 = v3 = 0x9d7();\n    if (0 < _getRoundBalance[v3]) {\n        _getRoundBalance[v3] = 0;\n        v4 = 0x887(v3);\n        v5 = address(v4).call().value(_getRoundBalance[v3]).gas(2300 * !_getRoundBalance[v3]);\n        require(v5); // checks call status, propagates error data on error\n    }\n    v0 = v6 = msg.value;\n    v7 = v8 = 1612;\n    v9 = v10 = 100;\n    v11 = v12 = _SafeMul(_walletPercent, v6);\n    while (!v9) {\n        assert(v9);\n        _winners[v0] = address(v0) | ~0xffffffffffffffffffffffffffffffffffffffff & _winners[v0];\n        v0 = v13 = 1774;\n        v0 = v14 = 1762;\n        v15 = v16 = v0 + _getRoundBalance[v0];\n        assert(v16 >= _getRoundBalance[v0]);\n        while (v0 > v15) {\n            assert(v0 <= v15);\n            _getRoundBalance[v0] = v15;\n            assert(1 + v0 >= v0);\n            v17 = v0 + _getRoundBalance[1 + v0];\n            assert(v17 >= _getRoundBalance[1 + v0]);\n            assert(1 + v0 >= v0);\n            _getRoundBalance[1 + v0] = v17;\n            v18 = _jackpot.call().value(v0).gas(2300 * !v0);\n            require(v18); // checks call status, propagates error data on error\n            v19 = _wallet.call().value(v0).gas(2300 * !v0);\n            require(v19); // checks call status, propagates error data on error\n            exit;\n            v15 = v15 - v0;\n            goto {'0x6e20x4bc', '0x6ee0x4bc'};\n        }\n        v0 = v11 / v9;\n        goto {'0x6880x4bc', '0x64c0x4bc', '0x66a0x4bc'};\n        v7 = v20 = 1642;\n        v9 = v21 = 100;\n        v11 = _SafeMul(_nextRoundPercent, v0);\n        v7 = v22 = 1672;\n        v9 = v23 = 100;\n        v11 = _SafeMul(_jackpotPercent, v0);\n    }\n}\n\nfunction changeJackpot(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _jackpot = varg0;\n}\n\nfunction nextRoundPercent() public nonPayable { \n    return _nextRoundPercent;\n}\n\nfunction pendingOwner() public nonPayable { \n    return _pendingOwner;\n}\n\nfunction roundTime() public nonPayable { \n    return _roundTime;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _pendingOwner = varg0;\n}\n\nfunction 0x587(uint256 varg0, uint256 varg1) private { \n    require(msg.value >= _minBet);\n    v0 = v1 = 0xa7d();\n    v0 = v2 = 0x9d7();\n    if (0 < _getRoundBalance[v2]) {\n        _getRoundBalance[v2] = 0;\n        v3 = 0x887(v2);\n        v4 = address(v3).call().value(_getRoundBalance[v2]).gas(2300 * !_getRoundBalance[v2]);\n        require(v4); // checks call status, propagates error data on error\n    }\n    v0 = v5 = msg.value;\n    v6 = v7 = 1612;\n    v8 = v9 = 100;\n    v10 = v11 = _SafeMul(_walletPercent, v5);\n    while (!v8) {\n        assert(v8);\n        _winners[v0] = address(v0) | ~0xffffffffffffffffffffffffffffffffffffffff & _winners[v0];\n        v0 = v12 = 1774;\n        v0 = v13 = 1762;\n        v14 = v15 = v0 + _getRoundBalance[v0];\n        assert(v15 >= _getRoundBalance[v0]);\n        while (v0 > v14) {\n            assert(v0 <= v14);\n            _getRoundBalance[v0] = v14;\n            assert(1 + v0 >= v0);\n            v16 = v0 + _getRoundBalance[1 + v0];\n            assert(v16 >= _getRoundBalance[1 + v0]);\n            assert(1 + v0 >= v0);\n            _getRoundBalance[1 + v0] = v16;\n            v17 = _jackpot.call().value(v0).gas(2300 * !v0);\n            require(v17); // checks call status, propagates error data on error\n            v18 = _wallet.call().value(v0).gas(2300 * !v0);\n            require(v18); // checks call status, propagates error data on error\n            return v0, v0, v0;\n            v14 = v14 - v0;\n            goto {'0x6ee0x587', '0x6e20x587'};\n        }\n        v0 = v10 / v8;\n        goto {'0x64c0x587', '0x6880x587', '0x66a0x587'};\n        v6 = v19 = 1642;\n        v8 = v20 = 100;\n        v10 = _SafeMul(_nextRoundPercent, v0);\n        v6 = v21 = 1672;\n        v8 = v22 = 100;\n        v10 = _SafeMul(_jackpotPercent, v0);\n    }\n}\n\nfunction 0x887(uint256 varg0) private { \n    if (!address(_winners[varg0])) {\n        v0 = v1 = _wallet;\n        goto 0x8820x887;\n    } else {\n        v0 = address(_winners[varg0]);\n    }\n    return v0;\n}\n\nfunction 0x9d7() private { \n    v0 = 0xa7d();\n    assert(1 <= v0);\n    return v0 - 1;\n}\n\nfunction 0xa7d() private { \n    assert(_startTime <= block.timestamp);\n    assert(_roundTime);\n    assert(1 + (block.timestamp - _startTime) / _roundTime >= (block.timestamp - _startTime) / _roundTime);\n    return 1 + (block.timestamp - _startTime) / _roundTime;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        assert(v0 / varg1 == varg0);\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x8aa5b2c3 > function_selector) {\n            if (0x521eb273 > function_selector) {\n                if (0xde94fd5 == function_selector) {\n                    changeMinimalBet(uint256);\n                } else if (0x2dcd4e41 == function_selector) {\n                    getGain(uint256);\n                } else if (0x3ff7d365 == function_selector) {\n                    getRoundBalance(uint256);\n                } else if (0x4129b2c9 == function_selector) {\n                    getWinner(uint256);\n                } else if (0x4903b0d1 == function_selector) {\n                    balances(uint256);\n                } else if (0x4e71e0c8 == function_selector) {\n                    claimOwnership();\n                }\n            } else if (0x6b31ee01 > function_selector) {\n                if (0x521eb273 == function_selector) {\n                    wallet();\n                } else if (0x626a99a8 == function_selector) {\n                    changeRoundTime(uint256);\n                } else if (0x680c63b3 == function_selector) {\n                    walletPercent();\n                }\n            } else if (0x6b31ee01 == function_selector) {\n                jackpot();\n            } else if (0x776e831b == function_selector) {\n                getRoundByTime(uint256);\n            } else if (0x78e97925 == function_selector) {\n                startTime();\n            } else if (0x831711a1 == function_selector) {\n                getPreviosRound();\n            }\n        } else if (0xbf4637e5 > function_selector) {\n            if (0x98b9a2dc > function_selector) {\n                if (0x8aa5b2c3 == function_selector) {\n                    changeStartTime(uint256);\n                } else if (0x8da5cb5b == function_selector) {\n                    owner();\n                } else if (0x9619367d == function_selector) {\n                    minBet();\n                }\n            } else if (0x98b9a2dc == function_selector) {\n                changeWallet(address);\n            } else if (0xa2fb1175 == function_selector) {\n                winners(uint256);\n            } else if (0xa32bf597 == function_selector) {\n                getCurrentRound();\n            } else if (0xa7327ea8 == function_selector) {\n                changePercents(uint256,uint256,uint256,uint256);\n            }\n        } else if (0xe082a8b3 > function_selector) {\n            if (0xbf4637e5 == function_selector) {\n                jackpotPercent();\n            } else if (0xc07904ac == function_selector) {\n                setBet(address);\n            } else if (0xd1d16834 == function_selector) {\n                changeJackpot(address);\n            }\n        } else if (0xe082a8b3 == function_selector) {\n            nextRoundPercent();\n        } else if (0xe30c3978 == function_selector) {\n            pendingOwner();\n        } else if (0xee5f8c8f == function_selector) {\n            roundTime();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 12:11 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _winners; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _getRoundBalance; // STORAGE[0x3]\nuint256 _minBet; // STORAGE[0x4]\nuint256 _startTime; // STORAGE[0x5]\nuint256 _roundTime; // STORAGE[0x6]\nuint256 _walletPercent; // STORAGE[0x9]\nuint256 _nextRoundPercent; // STORAGE[0xa]\nuint256 _jackpotPercent; // STORAGE[0xb]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _pendingOwner; // STORAGE[0x1] bytes 0 to 19\naddress _wallet; // STORAGE[0x7] bytes 0 to 19\naddress _jackpot; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n    require(msg.gas > 0x249f0);\n    v0, v1, v2 = 0x587(msg.sender, 465);\n}\n\nfunction changeMinimalBet(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _minBet = varg0;\n}\n\nfunction getGain(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0xa7d();\n    require(varg0 < v0);\n    v1 = 0x887(varg0);\n    require(msg.sender == address(v1));\n    _getRoundBalance[varg0] = 0;\n    v2 = msg.sender.call().value(_getRoundBalance[varg0]).gas(2300 * !_getRoundBalance[varg0]);\n    require(v2); // checks call status, propagates error data on error\n}\n\nfunction getRoundBalance(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getRoundBalance[varg0];\n}\n\nfunction getWinner(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (!address(_winners[varg0])) {\n        v0 = v1 = _wallet;\n        goto 0x8820x263;\n    } else {\n        v0 = address(_winners[varg0]);\n    }\n    return address(v0);\n}\n\nfunction balances(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getRoundBalance[varg0];\n}\n\nfunction claimOwnership() public nonPayable { \n    require(msg.sender == _pendingOwner);\n    emit OwnershipTransferred(_owner, _pendingOwner);\n    _owner = _pendingOwner;\n    _pendingOwner = 0;\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction changeRoundTime(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _roundTime = varg0;\n}\n\nfunction walletPercent() public nonPayable { \n    return _walletPercent;\n}\n\nfunction jackpot() public nonPayable { \n    return _jackpot;\n}\n\nfunction getRoundByTime(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    assert(_startTime <= varg0);\n    assert(_roundTime);\n    return (varg0 - _startTime) / _roundTime;\n}\n\nfunction startTime() public nonPayable { \n    return _startTime;\n}\n\nfunction getPreviosRound() public nonPayable { \n    v0 = 0x9d7();\n    return v0;\n}\n\nfunction changeStartTime(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _startTime = varg0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction minBet() public nonPayable { \n    return _minBet;\n}\n\nfunction changeWallet(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _wallet = varg0;\n}\n\nfunction winners(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return address(_winners[varg0]);\n}\n\nfunction getCurrentRound() public nonPayable { \n    v0 = 0xa7d();\n    return v0;\n}\n\nfunction changePercents(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3) public nonPayable { \n    v0 = v1 = 465;\n    require(msg.data.length - 4 >= 128);\n    require(msg.sender == _owner);\n    v0 = v2 = 0;\n    v0 = v3 = 2778;\n    v0 = v4 = 2719;\n    v5 = v6 = varg1 + varg0;\n    assert(v6 >= varg0);\n    while (1) {\n        v5 += v0;\n        if (v5 >= v5) {\n            break;\n        }\n        assert(v5 >= v5);\n        require(v5 == 100);\n        _walletPercent = v0;\n        _nextRoundPercent = v0;\n        _jackpotPercent = v0;\n        exit;\n        goto {'0xa9f0x46b', '0xada'};\n    }\n}\n\nfunction jackpotPercent() public nonPayable { \n    return _jackpotPercent;\n}\n\nfunction setBet(address varg0) public payable { \n    v0 = v1 = 465;\n    require(msg.data.length - 4 >= 32);\n    require(msg.value >= _minBet);\n    v0 = v2 = 0xa7d();\n    v0 = v3 = 0x9d7();\n    if (0 < _getRoundBalance[v3]) {\n        _getRoundBalance[v3] = 0;\n        v4 = 0x887(v3);\n        v5 = address(v4).call().value(_getRoundBalance[v3]).gas(2300 * !_getRoundBalance[v3]);\n        require(v5); // checks call status, propagates error data on error\n    }\n    v0 = v6 = msg.value;\n    v7 = v8 = 1612;\n    v9 = v10 = 100;\n    v11 = v12 = _SafeMul(_walletPercent, v6);\n    while (!v9) {\n        assert(v9);\n        _winners[v0] = address(v0) | ~0xffffffffffffffffffffffffffffffffffffffff & _winners[v0];\n        v0 = v13 = 1774;\n        v0 = v14 = 1762;\n        v15 = v16 = v0 + _getRoundBalance[v0];\n        assert(v16 >= _getRoundBalance[v0]);\n        while (v0 > v15) {\n            assert(v0 <= v15);\n            _getRoundBalance[v0] = v15;\n            assert(1 + v0 >= v0);\n            v17 = v0 + _getRoundBalance[1 + v0];\n            assert(v17 >= _getRoundBalance[1 + v0]);\n            assert(1 + v0 >= v0);\n            _getRoundBalance[1 + v0] = v17;\n            v18 = _jackpot.call().value(v0).gas(2300 * !v0);\n            require(v18); // checks call status, propagates error data on error\n            v19 = _wallet.call().value(v0).gas(2300 * !v0);\n            require(v19); // checks call status, propagates error data on error\n            exit;\n            v15 = v15 - v0;\n            goto {'0x6e20x4bc', '0x6ee0x4bc'};\n        }\n        v0 = v11 / v9;\n        goto {'0x6880x4bc', '0x64c0x4bc', '0x66a0x4bc'};\n        v7 = v20 = 1642;\n        v9 = v21 = 100;\n        v11 = _SafeMul(_nextRoundPercent, v0);\n        v7 = v22 = 1672;\n        v9 = v23 = 100;\n        v11 = _SafeMul(_jackpotPercent, v0);\n    }\n}\n\nfunction changeJackpot(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _jackpot = varg0;\n}\n\nfunction nextRoundPercent() public nonPayable { \n    return _nextRoundPercent;\n}\n\nfunction pendingOwner() public nonPayable { \n    return _pendingOwner;\n}\n\nfunction roundTime() public nonPayable { \n    return _roundTime;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _pendingOwner = varg0;\n}\n\nfunction 0x587(uint256 varg0, uint256 varg1) private { \n    require(msg.value >= _minBet);\n    v0 = v1 = 0xa7d();\n    v0 = v2 = 0x9d7();\n    if (0 < _getRoundBalance[v2]) {\n        _getRoundBalance[v2] = 0;\n        v3 = 0x887(v2);\n        v4 = address(v3).call().value(_getRoundBalance[v2]).gas(2300 * !_getRoundBalance[v2]);\n        require(v4); // checks call status, propagates error data on error\n    }\n    v0 = v5 = msg.value;\n    v6 = v7 = 1612;\n    v8 = v9 = 100;\n    v10 = v11 = _SafeMul(_walletPercent, v5);\n    while (!v8) {\n        assert(v8);\n        _winners[v0] = address(v0) | ~0xffffffffffffffffffffffffffffffffffffffff & _winners[v0];\n        v0 = v12 = 1774;\n        v0 = v13 = 1762;\n        v14 = v15 = v0 + _getRoundBalance[v0];\n        assert(v15 >= _getRoundBalance[v0]);\n        while (v0 > v14) {\n            assert(v0 <= v14);\n            _getRoundBalance[v0] = v14;\n            assert(1 + v0 >= v0);\n            v16 = v0 + _getRoundBalance[1 + v0];\n            assert(v16 >= _getRoundBalance[1 + v0]);\n            assert(1 + v0 >= v0);\n            _getRoundBalance[1 + v0] = v16;\n            v17 = _jackpot.call().value(v0).gas(2300 * !v0);\n            require(v17); // checks call status, propagates error data on error\n            v18 = _wallet.call().value(v0).gas(2300 * !v0);\n            require(v18); // checks call status, propagates error data on error\n            return v0, v0, v0;\n            v14 = v14 - v0;\n            goto {'0x6ee0x587', '0x6e20x587'};\n        }\n        v0 = v10 / v8;\n        goto {'0x64c0x587', '0x6880x587', '0x66a0x587'};\n        v6 = v19 = 1642;\n        v8 = v20 = 100;\n        v10 = _SafeMul(_nextRoundPercent, v0);\n        v6 = v21 = 1672;\n        v8 = v22 = 100;\n        v10 = _SafeMul(_jackpotPercent, v0);\n    }\n}\n\nfunction 0x887(uint256 varg0) private { \n    if (!address(_winners[varg0])) {\n        v0 = v1 = _wallet;\n        goto 0x8820x887;\n    } else {\n        v0 = address(_winners[varg0]);\n    }\n    return v0;\n}\n\nfunction 0x9d7() private { \n    v0 = 0xa7d();\n    assert(1 <= v0);\n    return v0 - 1;\n}\n\nfunction 0xa7d() private { \n    assert(_startTime <= block.timestamp);\n    assert(_roundTime);\n    assert(1 + (block.timestamp - _startTime) / _roundTime >= (block.timestamp - _startTime) / _roundTime);\n    return 1 + (block.timestamp - _startTime) / _roundTime;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        assert(v0 / varg1 == varg0);\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x8aa5b2c3 > function_selector) {\n            if (0x521eb273 > function_selector) {\n                if (0xde94fd5 == function_selector) {\n                    changeMinimalBet(uint256);\n                } else if (0x2dcd4e41 == function_selector) {\n                    getGain(uint256);\n                } else if (0x3ff7d365 == function_selector) {\n                    getRoundBalance(uint256);\n                } else if (0x4129b2c9 == function_selector) {\n                    getWinner(uint256);\n                } else if (0x4903b0d1 == function_selector) {\n                    balances(uint256);\n                } else if (0x4e71e0c8 == function_selector) {\n                    claimOwnership();\n                }\n            } else if (0x6b31ee01 > function_selector) {\n                if (0x521eb273 == function_selector) {\n                    wallet();\n                } else if (0x626a99a8 == function_selector) {\n                    changeRoundTime(uint256);\n                } else if (0x680c63b3 == function_selector) {\n                    walletPercent();\n                }\n            } else if (0x6b31ee01 == function_selector) {\n                jackpot();\n            } else if (0x776e831b == function_selector) {\n                getRoundByTime(uint256);\n            } else if (0x78e97925 == function_selector) {\n                startTime();\n            } else if (0x831711a1 == function_selector) {\n                getPreviosRound();\n            }\n        } else if (0xbf4637e5 > function_selector) {\n            if (0x98b9a2dc > function_selector) {\n                if (0x8aa5b2c3 == function_selector) {\n                    changeStartTime(uint256);\n                } else if (0x8da5cb5b == function_selector) {\n                    owner();\n                } else if (0x9619367d == function_selector) {\n                    minBet();\n                }\n            } else if (0x98b9a2dc == function_selector) {\n                changeWallet(address);\n            } else if (0xa2fb1175 == function_selector) {\n                winners(uint256);\n            } else if (0xa32bf597 == function_selector) {\n                getCurrentRound();\n            } else if (0xa7327ea8 == function_selector) {\n                changePercents(uint256,uint256,uint256,uint256);\n            }\n        } else if (0xe082a8b3 > function_selector) {\n            if (0xbf4637e5 == function_selector) {\n                jackpotPercent();\n            } else if (0xc07904ac == function_selector) {\n                setBet(address);\n            } else if (0xd1d16834 == function_selector) {\n                changeJackpot(address);\n            }\n        } else if (0xe082a8b3 == function_selector) {\n            nextRoundPercent();\n        } else if (0xe30c3978 == function_selector) {\n            pendingOwner();\n        } else if (0xee5f8c8f == function_selector) {\n            roundTime();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 12:11 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _winners; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _getRoundBalance; // STORAGE[0x3]\nuint256 _minBet; // STORAGE[0x4]\nuint256 _startTime; // STORAGE[0x5]\nuint256 _roundTime; // STORAGE[0x6]\nuint256 _walletPercent; // STORAGE[0x9]\nuint256 _nextRoundPercent; // STORAGE[0xa]\nuint256 _jackpotPercent; // STORAGE[0xb]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _pendingOwner; // STORAGE[0x1] bytes 0 to 19\naddress _wallet; // STORAGE[0x7] bytes 0 to 19\naddress _jackpot; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n    require(msg.gas > 0x249f0);\n    v0, v1, v2 = 0x587(msg.sender, 465);\n}\n\nfunction changeMinimalBet(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _minBet = varg0;\n}\n\nfunction getGain(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = 0xa7d();\n    require(varg0 < v0);\n    v1 = 0x887(varg0);\n    require(msg.sender == address(v1));\n    _getRoundBalance[varg0] = 0;\n    v2 = msg.sender.call().value(_getRoundBalance[varg0]).gas(2300 * !_getRoundBalance[varg0]);\n    require(v2); // checks call status, propagates error data on error\n}\n\nfunction getRoundBalance(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getRoundBalance[varg0];\n}\n\nfunction getWinner(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (!address(_winners[varg0])) {\n        v0 = v1 = _wallet;\n        goto 0x8820x263;\n    } else {\n        v0 = address(_winners[varg0]);\n    }\n    return address(v0);\n}\n\nfunction balances(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _getRoundBalance[varg0];\n}\n\nfunction claimOwnership() public nonPayable { \n    require(msg.sender == _pendingOwner);\n    emit OwnershipTransferred(_owner, _pendingOwner);\n    _owner = _pendingOwner;\n    _pendingOwner = 0;\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction changeRoundTime(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _roundTime = varg0;\n}\n\nfunction walletPercent() public nonPayable { \n    return _walletPercent;\n}\n\nfunction jackpot() public nonPayable { \n    return _jackpot;\n}\n\nfunction getRoundByTime(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    assert(_startTime <= varg0);\n    assert(_roundTime);\n    return (varg0 - _startTime) / _roundTime;\n}\n\nfunction startTime() public nonPayable { \n    return _startTime;\n}\n\nfunction getPreviosRound() public nonPayable { \n    v0 = 0x9d7();\n    return v0;\n}\n\nfunction changeStartTime(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _startTime = varg0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction minBet() public nonPayable { \n    return _minBet;\n}\n\nfunction changeWallet(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _wallet = varg0;\n}\n\nfunction winners(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return address(_winners[varg0]);\n}\n\nfunction getCurrentRound() public nonPayable { \n    v0 = 0xa7d();\n    return v0;\n}\n\nfunction changePercents(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3) public nonPayable { \n    v0 = v1 = 465;\n    require(msg.data.length - 4 >= 128);\n    require(msg.sender == _owner);\n    v0 = v2 = 0;\n    v0 = v3 = 2778;\n    v0 = v4 = 2719;\n    v5 = v6 = varg1 + varg0;\n    assert(v6 >= varg0);\n    while (1) {\n        v5 += v0;\n        if (v5 >= v5) {\n            break;\n        }\n        assert(v5 >= v5);\n        require(v5 == 100);\n        _walletPercent = v0;\n        _nextRoundPercent = v0;\n        _jackpotPercent = v0;\n        exit;\n        goto {'0xa9f0x46b', '0xada'};\n    }\n}\n\nfunction jackpotPercent() public nonPayable { \n    return _jackpotPercent;\n}\n\nfunction setBet(address varg0) public payable { \n    v0 = v1 = 465;\n    require(msg.data.length - 4 >= 32);\n    require(msg.value >= _minBet);\n    v0 = v2 = 0xa7d();\n    v0 = v3 = 0x9d7();\n    if (0 < _getRoundBalance[v3]) {\n        _getRoundBalance[v3] = 0;\n        v4 = 0x887(v3);\n        v5 = address(v4).call().value(_getRoundBalance[v3]).gas(2300 * !_getRoundBalance[v3]);\n        require(v5); // checks call status, propagates error data on error\n    }\n    v0 = v6 = msg.value;\n    v7 = v8 = 1612;\n    v9 = v10 = 100;\n    v11 = v12 = _SafeMul(_walletPercent, v6);\n    while (!v9) {\n        assert(v9);\n        _winners[v0] = address(v0) | ~0xffffffffffffffffffffffffffffffffffffffff & _winners[v0];\n        v0 = v13 = 1774;\n        v0 = v14 = 1762;\n        v15 = v16 = v0 + _getRoundBalance[v0];\n        assert(v16 >= _getRoundBalance[v0]);\n        while (v0 > v15) {\n            assert(v0 <= v15);\n            _getRoundBalance[v0] = v15;\n            assert(1 + v0 >= v0);\n            v17 = v0 + _getRoundBalance[1 + v0];\n            assert(v17 >= _getRoundBalance[1 + v0]);\n            assert(1 + v0 >= v0);\n            _getRoundBalance[1 + v0] = v17;\n            v18 = _jackpot.call().value(v0).gas(2300 * !v0);\n            require(v18); // checks call status, propagates error data on error\n            v19 = _wallet.call().value(v0).gas(2300 * !v0);\n            require(v19); // checks call status, propagates error data on error\n            exit;\n            v15 = v15 - v0;\n            goto {'0x6e20x4bc', '0x6ee0x4bc'};\n        }\n        v0 = v11 / v9;\n        goto {'0x6880x4bc', '0x64c0x4bc', '0x66a0x4bc'};\n        v7 = v20 = 1642;\n        v9 = v21 = 100;\n        v11 = _SafeMul(_nextRoundPercent, v0);\n        v7 = v22 = 1672;\n        v9 = v23 = 100;\n        v11 = _SafeMul(_jackpotPercent, v0);\n    }\n}\n\nfunction changeJackpot(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _jackpot = varg0;\n}\n\nfunction nextRoundPercent() public nonPayable { \n    return _nextRoundPercent;\n}\n\nfunction pendingOwner() public nonPayable { \n    return _pendingOwner;\n}\n\nfunction roundTime() public nonPayable { \n    return _roundTime;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _pendingOwner = varg0;\n}\n\nfunction 0x587(uint256 varg0, uint256 varg1) private { \n    require(msg.value >= _minBet);\n    v0 = v1 = 0xa7d();\n    v0 = v2 = 0x9d7();\n    if (0 < _getRoundBalance[v2]) {\n        _getRoundBalance[v2] = 0;\n        v3 = 0x887(v2);\n        v4 = address(v3).call().value(_getRoundBalance[v2]).gas(2300 * !_getRoundBalance[v2]);\n        require(v4); // checks call status, propagates error data on error\n    }\n    v0 = v5 = msg.value;\n    v6 = v7 = 1612;\n    v8 = v9 = 100;\n    v10 = v11 = _SafeMul(_walletPercent, v5);\n    while (!v8) {\n        assert(v8);\n        _winners[v0] = address(v0) | ~0xffffffffffffffffffffffffffffffffffffffff & _winners[v0];\n        v0 = v12 = 1774;\n        v0 = v13 = 1762;\n        v14 = v15 = v0 + _getRoundBalance[v0];\n        assert(v15 >= _getRoundBalance[v0]);\n        while (v0 > v14) {\n            assert(v0 <= v14);\n            _getRoundBalance[v0] = v14;\n            assert(1 + v0 >= v0);\n            v16 = v0 + _getRoundBalance[1 + v0];\n            assert(v16 >= _getRoundBalance[1 + v0]);\n            assert(1 + v0 >= v0);\n            _getRoundBalance[1 + v0] = v16;\n            v17 = _jackpot.call().value(v0).gas(2300 * !v0);\n            require(v17); // checks call status, propagates error data on error\n            v18 = _wallet.call().value(v0).gas(2300 * !v0);\n            require(v18); // checks call status, propagates error data on error\n            return v0, v0, v0;\n            v14 = v14 - v0;\n            goto {'0x6ee0x587', '0x6e20x587'};\n        }\n        v0 = v10 / v8;\n        goto {'0x64c0x587', '0x6880x587', '0x66a0x587'};\n        v6 = v19 = 1642;\n        v8 = v20 = 100;\n        v10 = _SafeMul(_nextRoundPercent, v0);\n        v6 = v21 = 1672;\n        v8 = v22 = 100;\n        v10 = _SafeMul(_jackpotPercent, v0);\n    }\n}\n\nfunction 0x887(uint256 varg0) private { \n    if (!address(_winners[varg0])) {\n        v0 = v1 = _wallet;\n        goto 0x8820x887;\n    } else {\n        v0 = address(_winners[varg0]);\n    }\n    return v0;\n}\n\nfunction 0x9d7() private { \n    v0 = 0xa7d();\n    assert(1 <= v0);\n    return v0 - 1;\n}\n\nfunction 0xa7d() private { \n    assert(_startTime <= block.timestamp);\n    assert(_roundTime);\n    assert(1 + (block.timestamp - _startTime) / _roundTime >= (block.timestamp - _startTime) / _roundTime);\n    return 1 + (block.timestamp - _startTime) / _roundTime;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        assert(v0 / varg1 == varg0);\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x8aa5b2c3 > function_selector) {\n            if (0x521eb273 > function_selector) {\n                if (0xde94fd5 == function_selector) {\n                    changeMinimalBet(uint256);\n                } else if (0x2dcd4e41 == function_selector) {\n                    getGain(uint256);\n                } else if (0x3ff7d365 == function_selector) {\n                    getRoundBalance(uint256);\n                } else if (0x4129b2c9 == function_selector) {\n                    getWinner(uint256);\n                } else if (0x4903b0d1 == function_selector) {\n                    balances(uint256);\n                } else if (0x4e71e0c8 == function_selector) {\n                    claimOwnership();\n                }\n            } else if (0x6b31ee01 > function_selector) {\n                if (0x521eb273 == function_selector) {\n                    wallet();\n                } else if (0x626a99a8 == function_selector) {\n                    changeRoundTime(uint256);\n                } else if (0x680c63b3 == function_selector) {\n                    walletPercent();\n                }\n            } else if (0x6b31ee01 == function_selector) {\n                jackpot();\n            } else if (0x776e831b == function_selector) {\n                getRoundByTime(uint256);\n            } else if (0x78e97925 == function_selector) {\n                startTime();\n            } else if (0x831711a1 == function_selector) {\n                getPreviosRound();\n            }\n        } else if (0xbf4637e5 > function_selector) {\n            if (0x98b9a2dc > function_selector) {\n                if (0x8aa5b2c3 == function_selector) {\n                    changeStartTime(uint256);\n                } else if (0x8da5cb5b == function_selector) {\n                    owner();\n                } else if (0x9619367d == function_selector) {\n                    minBet();\n                }\n            } else if (0x98b9a2dc == function_selector) {\n                changeWallet(address);\n            } else if (0xa2fb1175 == function_selector) {\n                winners(uint256);\n            } else if (0xa32bf597 == function_selector) {\n                getCurrentRound();\n            } else if (0xa7327ea8 == function_selector) {\n                changePercents(uint256,uint256,uint256,uint256);\n            }\n        } else if (0xe082a8b3 > function_selector) {\n            if (0xbf4637e5 == function_selector) {\n                jackpotPercent();\n            } else if (0xc07904ac == function_selector) {\n                setBet(address);\n            } else if (0xd1d16834 == function_selector) {\n                changeJackpot(address);\n            }\n        } else if (0xe082a8b3 == function_selector) {\n            nextRoundPercent();\n        } else if (0xe30c3978 == function_selector) {\n            pendingOwner();\n        } else if (0xee5f8c8f == function_selector) {\n            roundTime();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 24.176342248916626,
	"usage": {
		"completion_tokens": 372,
		"prompt_tokens": 3719,
		"total_tokens": 4091
	}
}