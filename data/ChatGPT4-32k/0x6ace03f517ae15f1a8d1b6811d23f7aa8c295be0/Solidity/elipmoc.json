{
	"address": "0x6ace03f517ae15f1a8d1b6811d23f7aa8c295be0",
	"choices": {
		"finish_reason": "stop",
		"index": 0,
		"logprobs": null,
		"message": {
			"content": "Here's the equivalent Solidity code:\n\n```solidity\npragma solidity >=0.4.22 <0.7.0;\n\ncontract Contract {\n\n    mapping (uint256 => uint256[]) private _deposited;\n    address private _owner;\n    address payable private _wallet;\n    uint256 private _state;\n\n    event Closed();\n    event OwnershipRenounced(address indexed previousOwner);\n    event RefundsEnabled();\n    event Refunded(address indexed beneficiary, uint256 weiAmount);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function enableRefunds() public {\n        require(msg.sender == _owner);\n        require(_state == 0);\n        _state = 1;\n        emit RefundsEnabled();\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function state() public view returns (uint256) {\n        return _state;\n    }\n\n    function deposited(uint256 id) public view returns (uint256[]) {\n        return _deposited[id];\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner);\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function deposit(uint256 id) public payable {\n        require(msg.sender == _owner);\n        require(_state == 0);\n        require(msg.value + _deposited[id][0] >= _deposited[id][0]);\n        _deposited[id][0] += msg.value;\n    }\n\n    function refund(uint256 id) public {\n        require(_state == 1);\n        uint256 refundAmount = _deposited[id][0];\n        _deposited[id][0] = 0;\n        (bool success,) = msg.sender.call.value(refundAmount)(\"\");\n        require(success);\n        emit Refunded(msg.sender, refundAmount);\n    }\n\n    function close() public {\n        require(msg.sender == _owner);\n        require(_state == 0);\n        _state = 2;\n        emit Closed();\n        (bool success,) = _wallet.call.value(address(this).balance)(\"\");\n        require(success);\n    }\n\n    function wallet() public view returns (address) {\n        return _wallet;\n    }\n\n    function renounceOwnership() public {\n        require(msg.sender == _owner);\n        emit OwnershipRenounced(_owner);\n        _owner = address(0);\n    }\n}\n```\n\nPlease note that the function `__function_selector__` was not included in the Solidity code because it's specific to EVM and not generally part of Solidity contracts.",
			"function_call": null,
			"role": "assistant",
			"tool_calls": null
		}
	},
	"created": 1711533439,
	"id": "chatcmpl-97KJzUJyFzfE32BnaWiMFco03vzzo",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2022.12.03 05:28 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\nuint256 _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _wallet; // STORAGE[0x2] bytes 0 to 19\nuint256 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nOwnershipRenounced(address);\nRefundsEnabled();\nRefunded(address, uint256);\nOwnershipTransferred(address, address);\n\nfunction enableRefunds() public nonPayable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0); // checks call status, propagates error data on error\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction close() public nonPayable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _owner);\n    emit OwnershipRenounced(_owner);\n    _owner = 0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x43d726d6) {\n            close();\n        } else if (0x521eb273 == uint32(function_selector >> 224)) {\n            wallet();\n        } else if (0x715018a6 == uint32(function_selector >> 224)) {\n            renounceOwnership();\n        } else if (0x8c52dc41 == uint32(function_selector >> 224)) {\n            enableRefunds();\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0xc19d93fb == uint32(function_selector >> 224)) {\n            state();\n        } else if (0xcb13cddb == uint32(function_selector >> 224)) {\n            deposited(address);\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == uint32(function_selector >> 224)) {\n            deposit(address);\n        } else if (0xfa89401a == uint32(function_selector >> 224)) {\n            refund(address);\n        }\n    }\n    ();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.12.03 05:28 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\nuint256 _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _wallet; // STORAGE[0x2] bytes 0 to 19\nuint256 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nOwnershipRenounced(address);\nRefundsEnabled();\nRefunded(address, uint256);\nOwnershipTransferred(address, address);\n\nfunction enableRefunds() public nonPayable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0); // checks call status, propagates error data on error\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction close() public nonPayable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _owner);\n    emit OwnershipRenounced(_owner);\n    _owner = 0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x43d726d6) {\n            close();\n        } else if (0x521eb273 == uint32(function_selector >> 224)) {\n            wallet();\n        } else if (0x715018a6 == uint32(function_selector >> 224)) {\n            renounceOwnership();\n        } else if (0x8c52dc41 == uint32(function_selector >> 224)) {\n            enableRefunds();\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0xc19d93fb == uint32(function_selector >> 224)) {\n            state();\n        } else if (0xcb13cddb == uint32(function_selector >> 224)) {\n            deposited(address);\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == uint32(function_selector >> 224)) {\n            deposit(address);\n        } else if (0xfa89401a == uint32(function_selector >> 224)) {\n            refund(address);\n        }\n    }\n    ();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.12.03 05:28 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _deposited; // STORAGE[0x1]\nuint256 _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _wallet; // STORAGE[0x2] bytes 0 to 19\nuint256 _state; // STORAGE[0x2] bytes 20 to 20\n\n// Events\nClosed();\nOwnershipRenounced(address);\nRefundsEnabled();\nRefunded(address, uint256);\nOwnershipTransferred(address, address);\n\nfunction enableRefunds() public nonPayable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 1;\n    emit RefundsEnabled();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction state() public nonPayable { \n    assert(_state <= 2);\n    return _state;\n}\n\nfunction deposited(address varg0) public nonPayable { \n    return _deposited[varg0];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction deposit(address varg0) public payable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    assert(msg.value + _deposited[varg0] >= _deposited[varg0]);\n    _deposited[varg0] += msg.value;\n}\n\nfunction refund(address varg0) public nonPayable { \n    assert(_state <= 2);\n    require(_state == 1);\n    _deposited[varg0] = 0;\n    v0 = varg0.call().value(_deposited[varg0]).gas(2300 * !_deposited[varg0]);\n    require(v0); // checks call status, propagates error data on error\n    emit Refunded(varg0, _deposited[varg0]);\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction close() public nonPayable { \n    require(msg.sender == _owner);\n    assert(_state <= 2);\n    require(_state == 0);\n    _state = 2;\n    emit Closed();\n    v0 = _wallet.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction wallet() public nonPayable { \n    return _wallet;\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _owner);\n    emit OwnershipRenounced(_owner);\n    _owner = 0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x43d726d6) {\n            close();\n        } else if (0x521eb273 == uint32(function_selector >> 224)) {\n            wallet();\n        } else if (0x715018a6 == uint32(function_selector >> 224)) {\n            renounceOwnership();\n        } else if (0x8c52dc41 == uint32(function_selector >> 224)) {\n            enableRefunds();\n        } else if (0x8da5cb5b == uint32(function_selector >> 224)) {\n            owner();\n        } else if (0xc19d93fb == uint32(function_selector >> 224)) {\n            state();\n        } else if (0xcb13cddb == uint32(function_selector >> 224)) {\n            deposited(address);\n        } else if (0xf2fde38b == uint32(function_selector >> 224)) {\n            transferOwnership(address);\n        } else if (0xf340fa01 == uint32(function_selector >> 224)) {\n            deposit(address);\n        } else if (0xfa89401a == uint32(function_selector >> 224)) {\n            refund(address);\n        }\n    }\n    ();\n}\n.",
	"status": "1",
	"time_cost": 93.84451699256897,
	"usage": {
		"completion_tokens": 544,
		"prompt_tokens": 995,
		"total_tokens": 1539
	}
}