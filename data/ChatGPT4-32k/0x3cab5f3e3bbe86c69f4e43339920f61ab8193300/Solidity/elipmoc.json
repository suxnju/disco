{
	"address": "0x3cab5f3e3bbe86c69f4e43339920f61ab8193300",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is the equivalent Solidity code for the decompiled code you provide. Please note that this is a simplified version and might need further tweaking as per your exact requirements.\n\n```Solidity\npragma solidity ^0.7.0;\n\ncontract MyContract {\n    mapping (address => uint256) public _balanceOf;\n    mapping (address => mapping (address => uint256)) public _allowance;\n    uint256 public _totalSupply;\n    string public _name;\n    string public _symbol;\n    uint8 public _decimals;\n    address public _isOwner;\n\n    event Deposit(address indexed _owner, uint256 value, uint256 data);\n    event Withdrawal(address indexed _to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _isOwner = msg.sender;\n        _decimals = 18;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        _allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function deposit(address _owner, uint256 _value, uint256 _data) public {\n        require(msg.sender == _isOwner, 'Caller is not the owner');\n        require(_owner != address(0), 'Invalid address');\n        _balanceOf[_owner] += _value;\n        _totalSupply += _value;\n        emit Deposit(_owner, _value, _data);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= _balanceOf[_from], 'Insufficient balance');\n        require(_value <= _allowance[_from][msg.sender], 'Insufficient allowance');\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        _allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool success) {\n        _allowance[msg.sender][_spender] += _addedValue;\n        emit Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool success) {\n        uint256 oldValue = _allowance[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            _allowance[msg.sender][_spender] = 0;\n        } else {\n            _allowance[msg.sender][_spender] = oldValue - _subtractedValue;\n        }\n        emit Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_value <= _balanceOf[msg.sender], 'Insufficient balance');\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function withdraw(address _owner, uint256 _value) public {\n        require(msg.sender == _isOwner, 'Caller is not the owner');\n        require(_value <= _balanceOf[_owner], 'Insufficient balance');\n        _balanceOf[_owner] -= _value;\n        _totalSupply -= _value;\n        emit Withdrawal(_owner, _value);\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _isOwner, 'Caller is not the owner');\n        require(newOwner != address(0), 'Invalid address');\n        emit OwnershipTransferred(_isOwner, newOwner);\n        _isOwner = newOwner;\n    }\n}\n```\nThis contract has the basic functionality of an ERC20 token such as `approve`, `transferFrom`, `increaseAllowance`, `decreaseAllowance` and `transfer`. It also has some additional functionalities specific to your use case such as `deposit`, `withdraw` and `transferOwnership`.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457238,
	"id": "chatcmpl-8R32coOhl9PBn3ASqrc1IPt6pUtKV",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.14 07:16 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x4]\nuint8 _decimals; // STORAGE[0x5] bytes 0 to 0\naddress _isOwner; // STORAGE[0x5] bytes 1 to 20\n\n// Events\nDeposit(address, uint256, uint256);\nWithdrawal(address, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x91f(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction deposit(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(msg.sender == _isOwner);\n    require(varg0);\n    require(varg1 + _totalSupply >= _totalSupply);\n    _totalSupply += varg1;\n    require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(0, varg0, varg1);\n    if (varg2 > 0) {\n        v0 = varg0.call().value(varg2).gas(2300 * !varg2);\n        require(v0); // checks call status, propagates error data on error\n    }\n    emit Deposit(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    0xa55(varg2, varg1, varg0);\n    require(varg2 <= _allowance[msg.sender]);\n    0x91f(_allowance[msg.sender] - varg2, msg.sender, varg0);\n    return 1;\n}\n\nfunction DECIMALS() public nonPayable { \n    return 18;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    0x91f(varg1 + _allowance[varg0], varg0, msg.sender);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _isOwner);\n    revert();\n}\n\nfunction owner() public nonPayable { \n    return _isOwner;\n}\n\nfunction isOwner() public nonPayable { \n    return msg.sender == _isOwner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _allowance[varg0]);\n    0x91f(_allowance[varg0] - varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0xa55(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg0];\n}\n\nfunction returnEther() public nonPayable { \n    require(msg.sender == _isOwner);\n    v0 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _isOwner);\n    require(varg0);\n    emit OwnershipTransferred(_isOwner, varg0);\n    _isOwner = varg0;\n}\n\nfunction withdraw(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _isOwner);\n    require(varg1 <= _allowance[varg0]);\n    0x91f(_allowance[varg0] - varg1, msg.sender, varg0);\n    require(varg0);\n    require(varg1 <= _totalSupply);\n    _totalSupply = _totalSupply - varg1;\n    require(varg1 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    emit Transfer(varg0, 0, varg1);\n    emit Withdrawal(varg0, varg1);\n    return 1;\n}\n\nfunction 0x91f(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    require(address(varg2));\n    v0 = address(varg2);\n    v1 = address(varg1);\n    _allowance[v1] = varg0;\n    emit Approval(v0, v1, varg0);\n    return ;\n}\n\nfunction 0xa55(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    v2 = address(varg1);\n    v3 = varg0 + _balanceOf[v2];\n    require(v3 >= _balanceOf[v2]);\n    v4 = address(varg1);\n    _balanceOf[v4] = v3;\n    emit Transfer(address(varg2), v4, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x715018a6 > function_selector) {\n            if (0x23b872dd > function_selector) {\n                if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0x95ea7b3 == function_selector) {\n                    approve(address,uint256);\n                } else if (0xefe6a8b == function_selector) {\n                    deposit(address,uint256,uint256);\n                } else if (0x18160ddd == function_selector) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x2e0f2625 == function_selector) {\n                DECIMALS();\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x39509351 == function_selector) {\n                increaseAllowance(address,uint256);\n            } else if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            }\n        } else if (0xa9059cbb > function_selector) {\n            if (0x715018a6 == function_selector) {\n                renounceOwnership();\n            } else if (0x8da5cb5b == function_selector) {\n                owner();\n            } else if (0x8f32d59b == function_selector) {\n                isOwner();\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0xa457c2d7 == function_selector) {\n                decreaseAllowance(address,uint256);\n            }\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xebb6dc3a == function_selector) {\n            returnEther();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf3fef3a3 == function_selector) {\n            withdraw(address,uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 07:16 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x4]\nuint8 _decimals; // STORAGE[0x5] bytes 0 to 0\naddress _isOwner; // STORAGE[0x5] bytes 1 to 20\n\n// Events\nDeposit(address, uint256, uint256);\nWithdrawal(address, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x91f(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction deposit(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(msg.sender == _isOwner);\n    require(varg0);\n    require(varg1 + _totalSupply >= _totalSupply);\n    _totalSupply += varg1;\n    require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(0, varg0, varg1);\n    if (varg2 > 0) {\n        v0 = varg0.call().value(varg2).gas(2300 * !varg2);\n        require(v0); // checks call status, propagates error data on error\n    }\n    emit Deposit(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    0xa55(varg2, varg1, varg0);\n    require(varg2 <= _allowance[msg.sender]);\n    0x91f(_allowance[msg.sender] - varg2, msg.sender, varg0);\n    return 1;\n}\n\nfunction DECIMALS() public nonPayable { \n    return 18;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    0x91f(varg1 + _allowance[varg0], varg0, msg.sender);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _isOwner);\n    revert();\n}\n\nfunction owner() public nonPayable { \n    return _isOwner;\n}\n\nfunction isOwner() public nonPayable { \n    return msg.sender == _isOwner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _allowance[varg0]);\n    0x91f(_allowance[varg0] - varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0xa55(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg0];\n}\n\nfunction returnEther() public nonPayable { \n    require(msg.sender == _isOwner);\n    v0 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _isOwner);\n    require(varg0);\n    emit OwnershipTransferred(_isOwner, varg0);\n    _isOwner = varg0;\n}\n\nfunction withdraw(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _isOwner);\n    require(varg1 <= _allowance[varg0]);\n    0x91f(_allowance[varg0] - varg1, msg.sender, varg0);\n    require(varg0);\n    require(varg1 <= _totalSupply);\n    _totalSupply = _totalSupply - varg1;\n    require(varg1 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    emit Transfer(varg0, 0, varg1);\n    emit Withdrawal(varg0, varg1);\n    return 1;\n}\n\nfunction 0x91f(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    require(address(varg2));\n    v0 = address(varg2);\n    v1 = address(varg1);\n    _allowance[v1] = varg0;\n    emit Approval(v0, v1, varg0);\n    return ;\n}\n\nfunction 0xa55(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    v2 = address(varg1);\n    v3 = varg0 + _balanceOf[v2];\n    require(v3 >= _balanceOf[v2]);\n    v4 = address(varg1);\n    _balanceOf[v4] = v3;\n    emit Transfer(address(varg2), v4, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x715018a6 > function_selector) {\n            if (0x23b872dd > function_selector) {\n                if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0x95ea7b3 == function_selector) {\n                    approve(address,uint256);\n                } else if (0xefe6a8b == function_selector) {\n                    deposit(address,uint256,uint256);\n                } else if (0x18160ddd == function_selector) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x2e0f2625 == function_selector) {\n                DECIMALS();\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x39509351 == function_selector) {\n                increaseAllowance(address,uint256);\n            } else if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            }\n        } else if (0xa9059cbb > function_selector) {\n            if (0x715018a6 == function_selector) {\n                renounceOwnership();\n            } else if (0x8da5cb5b == function_selector) {\n                owner();\n            } else if (0x8f32d59b == function_selector) {\n                isOwner();\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0xa457c2d7 == function_selector) {\n                decreaseAllowance(address,uint256);\n            }\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xebb6dc3a == function_selector) {\n            returnEther();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf3fef3a3 == function_selector) {\n            withdraw(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 07:16 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x4]\nuint8 _decimals; // STORAGE[0x5] bytes 0 to 0\naddress _isOwner; // STORAGE[0x5] bytes 1 to 20\n\n// Events\nDeposit(address, uint256, uint256);\nWithdrawal(address, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & (!(_name.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x91f(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction deposit(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(msg.sender == _isOwner);\n    require(varg0);\n    require(varg1 + _totalSupply >= _totalSupply);\n    _totalSupply += varg1;\n    require(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(0, varg0, varg1);\n    if (varg2 > 0) {\n        v0 = varg0.call().value(varg2).gas(2300 * !varg2);\n        require(v0); // checks call status, propagates error data on error\n    }\n    emit Deposit(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    0xa55(varg2, varg1, varg0);\n    require(varg2 <= _allowance[msg.sender]);\n    0x91f(_allowance[msg.sender] - varg2, msg.sender, varg0);\n    return 1;\n}\n\nfunction DECIMALS() public nonPayable { \n    return 18;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 + _allowance[varg0] >= _allowance[varg0]);\n    0x91f(varg1 + _allowance[varg0], varg0, msg.sender);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _isOwner);\n    revert();\n}\n\nfunction owner() public nonPayable { \n    return _isOwner;\n}\n\nfunction isOwner() public nonPayable { \n    return msg.sender == _isOwner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n        if (31 < (_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & (!(_symbol.length & 0x1) << 8) + ~0) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(varg1 <= _allowance[varg0]);\n    0x91f(_allowance[varg0] - varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0xa55(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg0];\n}\n\nfunction returnEther() public nonPayable { \n    require(msg.sender == _isOwner);\n    v0 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _isOwner);\n    require(varg0);\n    emit OwnershipTransferred(_isOwner, varg0);\n    _isOwner = varg0;\n}\n\nfunction withdraw(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _isOwner);\n    require(varg1 <= _allowance[varg0]);\n    0x91f(_allowance[varg0] - varg1, msg.sender, varg0);\n    require(varg0);\n    require(varg1 <= _totalSupply);\n    _totalSupply = _totalSupply - varg1;\n    require(varg1 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    emit Transfer(varg0, 0, varg1);\n    emit Withdrawal(varg0, varg1);\n    return 1;\n}\n\nfunction 0x91f(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    require(address(varg2));\n    v0 = address(varg2);\n    v1 = address(varg1);\n    _allowance[v1] = varg0;\n    emit Approval(v0, v1, varg0);\n    return ;\n}\n\nfunction 0xa55(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    v2 = address(varg1);\n    v3 = varg0 + _balanceOf[v2];\n    require(v3 >= _balanceOf[v2]);\n    v4 = address(varg1);\n    _balanceOf[v4] = v3;\n    emit Transfer(address(varg2), v4, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x715018a6 > function_selector) {\n            if (0x23b872dd > function_selector) {\n                if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0x95ea7b3 == function_selector) {\n                    approve(address,uint256);\n                } else if (0xefe6a8b == function_selector) {\n                    deposit(address,uint256,uint256);\n                } else if (0x18160ddd == function_selector) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x2e0f2625 == function_selector) {\n                DECIMALS();\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x39509351 == function_selector) {\n                increaseAllowance(address,uint256);\n            } else if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            }\n        } else if (0xa9059cbb > function_selector) {\n            if (0x715018a6 == function_selector) {\n                renounceOwnership();\n            } else if (0x8da5cb5b == function_selector) {\n                owner();\n            } else if (0x8f32d59b == function_selector) {\n                isOwner();\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            } else if (0xa457c2d7 == function_selector) {\n                decreaseAllowance(address,uint256);\n            }\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xebb6dc3a == function_selector) {\n            returnEther();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf3fef3a3 == function_selector) {\n            withdraw(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 50.54737210273743,
	"usage": {
		"completion_tokens": 900,
		"prompt_tokens": 2767,
		"total_tokens": 3667
	}
}