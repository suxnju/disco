{
	"address": "0x3f60651303846a417362377910a2a8c5caede024",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the equivalent Solidity code based on the provided decompiled code:\n\n```Solidity\n\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping (uint256 => uint256[]) private _m_Data;\n    address private _m_Owner;\n    address private _m_Owner2;\n    address private _m_Creator;\n\n    modifier isOwner() {\n        require(msg.sender == _m_Owner || msg.sender == _m_Creator || msg.sender == _m_Owner2, \"Caller is not an owner\");\n        _;\n    }\n\n    function changeOwner2(address newOwner2) public isOwner {\n        _m_Owner2 = newOwner2;\n    }\n\n    function getOwner2() public view isOwner returns(address) {\n        return _m_Owner2;\n    }\n\n    function getData(uint256 key) public view isOwner returns(uint256[] memory) {\n        return _m_Data[key];\n    }\n\n    function transferFunds(address to, uint256 amount) public isOwner {\n        (bool success,) = to.call{value: amount}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n\n    function getOwner() public view isOwner returns(address) {\n        return _m_Owner;\n    }\n\n    function changeOwner(address newOwner) public isOwner {\n        _m_Owner = newOwner;\n    }\n\n    function getCreator() public view isOwner returns(address) {\n        return _m_Creator;\n    }\n\n    function store(uint256 key, uint256[] memory value) public isOwner {\n        _m_Data[key] = value;\n    }\n\n    function load(uint256 key) public view isOwner returns(uint256[] memory) {\n        return _m_Data[key];\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n}\n```\n\nPlease note the function __function_selector__ has been omitted in the Solidity code, since function selectors are implicitly handled by the EVM and do not need to be manually implemented in Solidity.\n\nThis contract allows the owner and creator to manage a mapping of uint256 to array of uint256, transfer funds, and change the owner. The creator address is not set in any function, it might need to be set in the constructor or through a separate function.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457771,
	"id": "chatcmpl-8R3BDIIUdjbTCJ4A7tXCssrBkTQH4",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 09:59 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _m_Data; // STORAGE[0x3]\naddress _m_Owner; // STORAGE[0x0] bytes 0 to 19\naddress _m_Owner2; // STORAGE[0x1] bytes 0 to 19\naddress _m_Creator; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction ChangeOwner2(address varg0) public nonPayable { \n    v0 = v1 = _m_Owner == msg.sender;\n    if (_m_Owner != msg.sender) {\n        v0 = v2 = _m_Creator == msg.sender;\n    }\n    if (!v0) {\n        v0 = v3 = _m_Owner2 == msg.sender;\n    }\n    require(v0);\n    _m_Owner2 = varg0;\n}\n\nfunction m_Owner2() public nonPayable { \n    return _m_Owner2;\n}\n\nfunction m_Data(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    return _m_Data[varg2];\n}\n\nfunction TransferFunds(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _m_Owner == msg.sender;\n    if (_m_Owner != msg.sender) {\n        v0 = _m_Owner2 == msg.sender;\n    }\n    require(v0);\n    v2 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v2);\n}\n\nfunction m_Owner() public nonPayable { \n    return _m_Owner;\n}\n\nfunction ChangeOwner(address varg0) public nonPayable { \n    v0 = v1 = _m_Owner == msg.sender;\n    if (_m_Owner != msg.sender) {\n        v0 = v2 = _m_Creator == msg.sender;\n    }\n    if (!v0) {\n        v0 = v3 = _m_Owner2 == msg.sender;\n    }\n    require(v0);\n    _m_Owner = varg0;\n}\n\nfunction fallback() public payable { \n}\n\nfunction m_Creator() public nonPayable { \n    return _m_Creator;\n}\n\nfunction Store(address varg0, uint256 varg1, uint256 varg2, bytes32 varg3) public nonPayable { \n    v0 = v1 = _m_Owner == msg.sender;\n    if (_m_Owner != msg.sender) {\n        v0 = v2 = _m_Owner2 == msg.sender;\n    }\n    require(v0);\n    _m_Data[varg0] = varg3;\n}\n\nfunction Load(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    return _m_Data[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x212667) {\n            m_Creator();\n        } else if (0x647b106 == function_selector) {\n            Store(address,uint256,uint256,bytes32);\n        } else if (0xbd6c769 == function_selector) {\n            Load(address,uint256,uint256);\n        } else if (0x2116b530 == function_selector) {\n            ChangeOwner2(address);\n        } else if (0x2d9ff1d0 == function_selector) {\n            m_Owner2();\n        } else if (0xadfff41d == function_selector) {\n            m_Data(address,uint256,uint256);\n        } else if (0xc95f8b91 == function_selector) {\n            TransferFunds(address,uint256);\n        } else if (0xca75d770 == function_selector) {\n            m_Owner();\n        } else if (0xf2853292 == function_selector) {\n            ChangeOwner(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 09:59 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _m_Data; // STORAGE[0x3]\naddress _m_Owner; // STORAGE[0x0] bytes 0 to 19\naddress _m_Owner2; // STORAGE[0x1] bytes 0 to 19\naddress _m_Creator; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction ChangeOwner2(address varg0) public nonPayable { \n    v0 = v1 = _m_Owner == msg.sender;\n    if (_m_Owner != msg.sender) {\n        v0 = v2 = _m_Creator == msg.sender;\n    }\n    if (!v0) {\n        v0 = v3 = _m_Owner2 == msg.sender;\n    }\n    require(v0);\n    _m_Owner2 = varg0;\n}\n\nfunction m_Owner2() public nonPayable { \n    return _m_Owner2;\n}\n\nfunction m_Data(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    return _m_Data[varg2];\n}\n\nfunction TransferFunds(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _m_Owner == msg.sender;\n    if (_m_Owner != msg.sender) {\n        v0 = _m_Owner2 == msg.sender;\n    }\n    require(v0);\n    v2 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v2);\n}\n\nfunction m_Owner() public nonPayable { \n    return _m_Owner;\n}\n\nfunction ChangeOwner(address varg0) public nonPayable { \n    v0 = v1 = _m_Owner == msg.sender;\n    if (_m_Owner != msg.sender) {\n        v0 = v2 = _m_Creator == msg.sender;\n    }\n    if (!v0) {\n        v0 = v3 = _m_Owner2 == msg.sender;\n    }\n    require(v0);\n    _m_Owner = varg0;\n}\n\nfunction fallback() public payable { \n}\n\nfunction m_Creator() public nonPayable { \n    return _m_Creator;\n}\n\nfunction Store(address varg0, uint256 varg1, uint256 varg2, bytes32 varg3) public nonPayable { \n    v0 = v1 = _m_Owner == msg.sender;\n    if (_m_Owner != msg.sender) {\n        v0 = v2 = _m_Owner2 == msg.sender;\n    }\n    require(v0);\n    _m_Data[varg0] = varg3;\n}\n\nfunction Load(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    return _m_Data[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x212667) {\n            m_Creator();\n        } else if (0x647b106 == function_selector) {\n            Store(address,uint256,uint256,bytes32);\n        } else if (0xbd6c769 == function_selector) {\n            Load(address,uint256,uint256);\n        } else if (0x2116b530 == function_selector) {\n            ChangeOwner2(address);\n        } else if (0x2d9ff1d0 == function_selector) {\n            m_Owner2();\n        } else if (0xadfff41d == function_selector) {\n            m_Data(address,uint256,uint256);\n        } else if (0xc95f8b91 == function_selector) {\n            TransferFunds(address,uint256);\n        } else if (0xca75d770 == function_selector) {\n            m_Owner();\n        } else if (0xf2853292 == function_selector) {\n            ChangeOwner(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 09:59 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _m_Data; // STORAGE[0x3]\naddress _m_Owner; // STORAGE[0x0] bytes 0 to 19\naddress _m_Owner2; // STORAGE[0x1] bytes 0 to 19\naddress _m_Creator; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction ChangeOwner2(address varg0) public nonPayable { \n    v0 = v1 = _m_Owner == msg.sender;\n    if (_m_Owner != msg.sender) {\n        v0 = v2 = _m_Creator == msg.sender;\n    }\n    if (!v0) {\n        v0 = v3 = _m_Owner2 == msg.sender;\n    }\n    require(v0);\n    _m_Owner2 = varg0;\n}\n\nfunction m_Owner2() public nonPayable { \n    return _m_Owner2;\n}\n\nfunction m_Data(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    return _m_Data[varg2];\n}\n\nfunction TransferFunds(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _m_Owner == msg.sender;\n    if (_m_Owner != msg.sender) {\n        v0 = _m_Owner2 == msg.sender;\n    }\n    require(v0);\n    v2 = varg0.call().value(varg1).gas(2300 * !varg1);\n    require(v2);\n}\n\nfunction m_Owner() public nonPayable { \n    return _m_Owner;\n}\n\nfunction ChangeOwner(address varg0) public nonPayable { \n    v0 = v1 = _m_Owner == msg.sender;\n    if (_m_Owner != msg.sender) {\n        v0 = v2 = _m_Creator == msg.sender;\n    }\n    if (!v0) {\n        v0 = v3 = _m_Owner2 == msg.sender;\n    }\n    require(v0);\n    _m_Owner = varg0;\n}\n\nfunction fallback() public payable { \n}\n\nfunction m_Creator() public nonPayable { \n    return _m_Creator;\n}\n\nfunction Store(address varg0, uint256 varg1, uint256 varg2, bytes32 varg3) public nonPayable { \n    v0 = v1 = _m_Owner == msg.sender;\n    if (_m_Owner != msg.sender) {\n        v0 = v2 = _m_Owner2 == msg.sender;\n    }\n    require(v0);\n    _m_Data[varg0] = varg3;\n}\n\nfunction Load(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    return _m_Data[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x212667) {\n            m_Creator();\n        } else if (0x647b106 == function_selector) {\n            Store(address,uint256,uint256,bytes32);\n        } else if (0xbd6c769 == function_selector) {\n            Load(address,uint256,uint256);\n        } else if (0x2116b530 == function_selector) {\n            ChangeOwner2(address);\n        } else if (0x2d9ff1d0 == function_selector) {\n            m_Owner2();\n        } else if (0xadfff41d == function_selector) {\n            m_Data(address,uint256,uint256);\n        } else if (0xc95f8b91 == function_selector) {\n            TransferFunds(address,uint256);\n        } else if (0xca75d770 == function_selector) {\n            m_Owner();\n        } else if (0xf2853292 == function_selector) {\n            ChangeOwner(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 22.178966283798218,
	"usage": {
		"completion_tokens": 463,
		"prompt_tokens": 969,
		"total_tokens": 1432
	}
}