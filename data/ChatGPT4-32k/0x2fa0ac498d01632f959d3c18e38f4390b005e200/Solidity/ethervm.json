{
	"address": "0x2fa0ac498d01632f959d3c18e38f4390b005e200",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is the Solidity code equivalent to the given decompiled EVM bytecode:\n\n```solidity\npragma solidity >=0.4.0 <0.7.0;\n\ncontract Contract {\n    mapping (address => uint256) private balances;\n    mapping (address => uint256) private payouts;\n    uint256 private totalSupply;\n    uint256 private storageVar1;\n    uint256 private storageVar2;\n    \n    function main() public payable {\n        if (msg.data.length < 4) {\n            if (msg.value == 0) {\n                withdrawOld(msg.sender);\n            } else {\n                fund();\n            }\n        } else {\n            uint256 functionIdentifier = uint256(msg.data[0]) / uint256(0x0100000000000000000000000000000000000000000000000000000000) & 0xffffffff;\n            if (functionIdentifier == 0x06fdde03) {\n                require(msg.value == 0);\n                name();\n            } else if (functionIdentifier == 0x18160ddd) {\n                require(msg.value == 0);\n                totalSupply();\n            } else if (functionIdentifier == 0x313ce567) {\n                require(msg.value == 0);\n                decimals();\n            } else if (functionIdentifier == 0x39ffe67c) {\n                require(msg.value == 0);\n                address arg0 = address(msg.data[4] & 0x02 ** 0xa0 - 0x01);\n                withdrawOld(arg0);\n            } else if (functionIdentifier == 0x3ccfd60b) {\n                require(msg.value == 0);\n                withdraw();\n            } else if (functionIdentifier == 0x4b750334) {\n                require(msg.value == 0);\n                sellPrice();\n            } else if (functionIdentifier == 0x62dbf261) {\n                require(msg.value == 0);\n                uint256 arg0 = uint256(msg.data[4]);\n                buyPrice(arg0);\n            } else if (functionIdentifier == 0x65bcfbe7) {\n                require(msg.value == 0);\n                address arg0 = address(msg.data[4] & 0x02 ** 0xa0 - 0x01);\n                payouts(arg0);\n            } else if (functionIdentifier == 0x68306e43) {\n                require(msg.value == 0);\n                address arg0 = address(msg.data[4] & 0x02 ** 0xa0 - 0x01);\n                dividends(arg0);\n            } else if (functionIdentifier == 0x70a08231) {\n                require(msg.value == 0);\n                address arg0 = address(msg.data[4] & 0x02 ** 0xa0 - 0x01);\n                balanceOf(arg0);\n            } else if (functionIdentifier == 0x8620410b) {\n                require(msg.value == 0);\n                buyPrice();\n            } else if (functionIdentifier == 0x8b7afe2e) {\n                require(msg.value == 0);\n                contractBalance();\n            } else if (functionIdentifier == 0x957b2e56) {\n                require(msg.value == 0);\n                reinvestDividends();\n            } else if (functionIdentifier == 0x95d89b41) {\n                require(msg.value == 0);\n                symbol();\n            } else if (functionIdentifier == 0xb1e35242) {\n                require(msg.value == 0);\n                getMeOutOfHere();\n            } else if (functionIdentifier == 0xb60d4288) {\n                fund();\n            } else if (functionIdentifier == 0xb9f308f2) {\n                require(msg.value == 0);\n                uint256 arg0 = uint256(msg.data[4]);\n                getEtherForTokens(arg0);\n            } else if (functionIdentifier == 0xbda5c450) {\n                require(msg.value == 0);\n                uint256 arg0 = uint256(msg.data[4]);\n                uint256 arg1 = uint256(msg.data[36]);\n                calculateDividendTokens(arg0, arg1);\n            } else if (functionIdentifier == 0xe555c1a3) {\n                require(msg.value == 0);\n                sellMyTokens();\n            } else if (functionIdentifier == 0xeedc966a) {\n                require(msg.value == 0);\n                address arg0 = address(msg.data[4] & 0x02 ** 0xa0 - 0x01);\n                tokenBalance(arg0);\n            }\n        }\n    }\n    \n    function fund() public payable {\n        require(msg.value > 0xe8d4a51000);\n        storageVar1 += msg.value;\n        update();\n    }\n    \n    function withdrawOld(address arg0) public {\n        uint256 var0 = payouts[arg0] * 2**40;\n        payouts[arg0] = var0;\n        storageVar2 += var0;\n        msg.sender.transfer(var0);\n    }\n    \n    function name() public pure returns (string memory) {\n        return \"EthPyramid\";\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n    \n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n    \n    function withdraw() public {\n        uint256 var0 = dividends(msg.sender);\n        payouts[msg.sender] = var0 * 2**40;\n        storageVar2 += var0 * 2**40;\n        msg.sender.transfer(var0);\n    }\n    \n    function sellPrice() public view returns (uint256) {\n        return getEtherForTokens(0x038d7ea4c68000) * 9 / 10;\n    }\n    \n    function buyPrice(uint256 arg0) public view returns (uint256) {\n        return getEtherForTokens(arg0) * 11 / 10;\n    }\n    \n    function payouts(address arg0) public view returns (uint256) {\n        return payouts[arg0];\n    }\n    \n    function dividends(address arg0) public view returns (uint256) {\n        return balances[arg0] * storageVar1 - payouts[arg0] / 2**40;\n    }\n    \n    function balanceOf(address arg0) public view returns (uint256) {\n        return balances[arg0];\n    }\n    \n    function contractBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n    \n    function symbol() public pure returns (string memory) {\n        return \"EPY\";\n    }\n    \n    function getEtherForTokens(uint256 arg0) public view returns (uint256) {\n        return arg0 * storageVar1 / totalSupply;\n    }\n    \n    function sellMyTokens() public {\n        uint256 balance = balances[msg.sender];\n        balances[msg.sender] = 0;\n        msg.sender.transfer(getEtherForTokens(balance));\n    }\n    \n    function tokenBalance(address arg0) public view returns (uint256) {\n        return balances[arg0];\n    }\n    \n    function update() private {\n        storageVar1 += msg.value * 2**40 / totalSupply;\n    }\n}\n```\nPlease note that this is a simplified version of the contract and some complex functions, such as `func_0A05` or `func_0A1C`, are not fully translated due to their complexity. This code should, however, provide a solid foundation for understanding the functionality of the original EVM bytecode.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473811,
	"id": "chatcmpl-8MvCthj4j5qOHIfmC9ksXYwvzI5WS",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0111:\n        \n            if (msg.value <= 0x00) {\n                var var0 = 0x0130;\n                var var1 = msg.sender;\n                withdrawOld(var1);\n                stop();\n            } else {\n                var0 = 0x0122;\n                fund();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0145;\n                var var2 = name();\n            \n            label_0145:\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var6 = temp2 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0181:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_0172:\n                    var temp8 = var11;\n                    memory[temp8 + var9:temp8 + var9 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0181; }\n                    else { goto label_0172; }\n                }\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = totalSupply();\n            \n            label_01CF:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01f4;\n                var2 = decimals();\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2 & 0xff;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x39ffe67c) {\n                // Dispatch table entry for withdrawOld(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                withdrawOld(var2);\n                stop();\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var1 = sellPrice();\n                goto label_01CF;\n            } else if (var0 == 0x62dbf261) {\n                // Dispatch table entry for getTokensForEther(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24];\n                var1 = buyPrice(var2);\n                goto label_01CF;\n            } else if (var0 == 0x65bcfbe7) {\n                // Dispatch table entry for payouts(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = payouts(var2);\n                goto label_01CF;\n            } else if (var0 == 0x68306e43) {\n                // Dispatch table entry for dividends(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividends(var2);\n                goto label_01CF;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_01CF;\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = 0x00;\n                var3 = 0x05e8;\n                var4 = 0x038d7ea4c68000;\n                var3 = buyPrice(var4);\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x8b7afe2e) {\n                // Dispatch table entry for contractBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = contractBalance();\n                goto label_01CF;\n            } else if (var0 == 0x957b2e56) {\n                // Dispatch table entry for reinvestDividends()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                var2 = 0x00;\n                var3 = var2;\n                var4 = 0x00;\n                var5 = var4;\n                var6 = 0x00;\n                var7 = var6;\n                var8 = 0x00;\n                var9 = var8;\n                var10 = 0x00;\n                var11 = var10;\n                var var12 = 0x00;\n                var var13 = var12;\n                var var14 = 0x060e;\n                var var15 = msg.sender;\n                var14 = dividends(var15);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x01;\n                var temp13 = keccak256(memory[0x00:0x40]);\n                var temp14 = var14;\n                var temp15 = temp14 * 0x02 ** 0x40;\n                storage[temp13] = temp15 + storage[temp13];\n                storage[0x03] = temp15 + storage[0x03];\n                var2 = temp14;\n                var3 = var2;\n                var14 = var3 < 0xe8d4a51000;\n            \n                if (var14) {\n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                label_0669:\n                    var4 = msg.sender;\n                    var14 = var2;\n                    var15 = 0x0675;\n                    var15 = func_0A1C();\n                    var5 = var15 - var14;\n                    var14 = 0x0683;\n                    var15 = var3;\n                    var var16 = 0x0a;\n                    var14 = func_0A05(var15, var16);\n                    var6 = var14;\n                    var temp16 = var3 - var6;\n                    var7 = temp16;\n                    var14 = 0x0694;\n                    var15 = var7;\n                    var16 = var2;\n                \n                label_0838:\n                    var var17 = 0x00;\n                    var var18 = 0x0863;\n                    var var19 = 0x0566;\n                    var var20 = ~0x0296abf784a358468b;\n                    var var21 = 0x02;\n                    var var22 = 0x01;\n                    var var23 = 0x0555;\n                    var var24 = var15;\n                    var var25 = var16;\n                    var var26 = 0x085c;\n                    var26 = func_0A1C();\n                    var23 = func_085C(var24, var25, var26);\n                    var19 = func_0555(var20, var21, var22, var23);\n                    var18 = func_0566(var19);\n                    var14 = var18;\n                    // Error: Could not resolve jump destination!\n                } else if (var3 <= 0xd3c21bcecceda1000000) { goto label_0669; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0145;\n                var2 = symbol();\n                goto label_0145;\n            } else if (var0 == 0xb1e35242) {\n                // Dispatch table entry for getMeOutOfHere()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                var2 = 0x07cf;\n            \n            label_086A:\n                var3 = 0x00;\n                var4 = 0x0875;\n                var5 = msg.sender;\n                var4 = balanceOf(var5);\n                var temp17 = var4;\n                var3 = temp17;\n                var4 = 0x04fe;\n                var5 = var3;\n                func_0C0A(var5);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xb60d4288) {\n                // Dispatch table entry for fund()\n                var1 = 0x0130;\n                fund();\n                stop();\n            } else if (var0 == 0xb9f308f2) {\n                // Dispatch table entry for getEtherForTokens(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24];\n                var1 = getEtherForTokens(var2);\n                goto label_01CF;\n            } else if (var0 == 0xbda5c450) {\n                // Dispatch table entry for calculateDividendTokens(uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                goto label_0838;\n            } else if (var0 == 0xe555c1a3) {\n                // Dispatch table entry for sellMyTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                goto label_086A;\n            } else if (var0 == 0xeedc966a) {\n                // Dispatch table entry for tokenBalance(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = tokenBalance(var2);\n                goto label_01CF;\n            } else { goto label_0111; }\n        }\n    }\n    \n    function fund() {\n        if (msg.value <= 0xe8d4a51000) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x03a3;\n        var var1 = storage[0x05];\n        var var2 = msg.value;\n        var0 = func_0892(var1, var2);\n        storage[0x05] = var0;\n        var0 = 0x03ae;\n        func_08A1();\n    }\n    \n    function withdrawOld(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x03c5;\n        var var2 = msg.sender;\n        var1 = dividends(var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var1;\n        var temp2 = temp1 * 0x02 ** 0x40;\n        storage[temp0] = temp2 + storage[temp0];\n        storage[0x03] = temp2 + storage[0x03];\n        var0 = temp1;\n        var2 = storage[0x05];\n        var1 = 0x0405;\n        var var3 = var0;\n        var1 = func_09F3(var2, var3);\n        storage[0x05] = var1;\n        var temp3 = var0;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n    \n        if (temp5) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0a;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x457468507972616d696400000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = 0x048a;\n        var var2 = msg.sender;\n        var1 = dividends(var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var1;\n        var temp2 = temp1 * 0x02 ** 0x40;\n        storage[temp0] = temp2 + storage[temp0];\n        storage[0x03] = temp2 + storage[0x03];\n        var0 = temp1;\n        var2 = storage[0x05];\n        var1 = 0x04ca;\n        var var3 = var0;\n        var1 = func_09F3(var2, var3);\n        storage[0x05] = var1;\n        var temp3 = var0;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(msg.sender).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n    \n        if (temp5) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x0516;\n        var var4 = 0x038d7ea4c68000;\n        var3 = getEtherForTokens(var4);\n        var temp0 = var3;\n        var1 = temp0;\n        var3 = 0x0523;\n        var4 = var1;\n        var var5 = 0x0a;\n        var3 = func_0A05(var4, var5);\n        return var1 - var3;\n    }\n    \n    function buyPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x056e;\n        var var2 = 0x0566;\n        var var3 = ~0x0296abf784a358468b;\n        var var4 = 0x02;\n        var var5 = 0x01;\n        var var6 = 0x0555;\n        var var7 = arg0;\n        var var8 = 0x054f;\n        var8 = func_0A1C();\n        var6 = func_054F(var7, var8);\n        var2 = func_0555(var3, var4, var5, var6);\n        return func_0566(var2);\n    }\n    \n    function func_054F(var arg0, var arg1) returns (var r0) {\n        arg0 = arg1 + arg0;\n        r0 = func_0A41(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0555(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        arg2 = arg3 * arg2;\n    \n        if (!arg1) { assert(); }\n    \n        arg0 = arg2 i/ arg1 + arg0;\n        arg1 = 0x00;\n        arg3 = arg1;\n        var var0 = arg3;\n        var temp0 = arg0;\n        arg2 = (temp0 + 0x2cb53f09f05cc627c8) i/ 0xb17217f7d1cf79ac - 0x40;\n        var temp1 = temp0 - arg2 * 0xb17217f7d1cf79ac;\n        arg0 = temp1;\n        var var1 = 0x02 ** 0x40;\n        var var2 = arg0 * arg0;\n    \n        if (!var1) { assert(); }\n    \n        var temp2 = var2 i/ var1;\n        arg3 = temp2;\n        var temp3 = (arg3 * ((arg3 * ((arg3 * ((arg3 * ~0x1b893ad04b39) i/ 0x02 ** 0x40 + 0x0455956bccdd06)) i/ 0x02 ** 0x40 + ~0xb60b60808399d0)) i/ 0x02 ** 0x40 + 0x2aaaaaaaaa015db0)) i/ 0x02 ** 0x40 + 0x02 * 0x02 ** 0x40;\n        var0 = temp3;\n        var temp4 = arg0;\n        var1 = var0 - temp4;\n        var2 = (var0 + temp4) * 0x02 ** 0x40;\n    \n        if (!var1) { assert(); }\n    \n        arg1 = var2 i/ var1;\n    \n        if (arg2 i< 0x00) {\n            var1 = 0x00 - arg2;\n            var2 = arg1;\n        \n            if (var1 i>= 0x00) { return var2 / 0x02 ** var1; }\n            else { assert(); }\n        } else {\n            var1 = arg2;\n            var2 = arg1;\n        \n            if (var1 i>= 0x00) { return 0x02 ** var1 * var2; }\n            else { assert(); }\n        }\n    }\n    \n    function func_0566(var arg0) returns (var r0) {\n        var var0 = storage[0x02];\n        r0 = func_09F3(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function payouts(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function dividends(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x04] - temp0 / 0x02 ** 0x40;\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function contractBalance() returns (var r0) { return storage[0x05]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4550590000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function getEtherForTokens(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x07e2;\n        var2 = func_0A1C();\n        var1 = var2;\n    \n        if (arg0 != storage[0x02]) {\n            var2 = 0x082f;\n            var var3 = var1;\n            var var4 = 0x082a;\n            var var5 = 0x01;\n            var var6 = 0x02;\n            var var7 = ~0x0296abf784a358468b;\n            var var8 = 0x0819;\n            var var9 = storage[0x02] - arg0;\n            var8 = func_0A41(var9);\n            var4 = func_0819(var5, var6, var7, var8);\n            var2 = func_082A(var3, var4);\n            var0 = var2;\n        \n        label_0832:\n            return var0;\n        } else {\n            var0 = var1;\n            goto label_0832;\n        }\n    }\n    \n    function func_0819(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        arg1 = arg3 - arg2 * arg1;\n    \n        if (!arg0) { assert(); }\n    \n        arg0 = arg1 i/ arg0;\n        arg1 = 0x00;\n        arg3 = arg1;\n        var var0 = arg3;\n        var temp0 = arg0;\n        arg2 = (temp0 + 0x2cb53f09f05cc627c8) i/ 0xb17217f7d1cf79ac - 0x40;\n        var temp1 = temp0 - arg2 * 0xb17217f7d1cf79ac;\n        arg0 = temp1;\n        var var1 = 0x02 ** 0x40;\n        var var2 = arg0 * arg0;\n    \n        if (!var1) { assert(); }\n    \n        var temp2 = var2 i/ var1;\n        arg3 = temp2;\n        var temp3 = (arg3 * ((arg3 * ((arg3 * ((arg3 * ~0x1b893ad04b39) i/ 0x02 ** 0x40 + 0x0455956bccdd06)) i/ 0x02 ** 0x40 + ~0xb60b60808399d0)) i/ 0x02 ** 0x40 + 0x2aaaaaaaaa015db0)) i/ 0x02 ** 0x40 + 0x02 * 0x02 ** 0x40;\n        var0 = temp3;\n        var temp4 = arg0;\n        var1 = var0 - temp4;\n        var2 = (var0 + temp4) * 0x02 ** 0x40;\n    \n        if (!var1) { assert(); }\n    \n        arg1 = var2 i/ var1;\n    \n        if (arg2 i< 0x00) {\n            var1 = 0x00 - arg2;\n            var2 = arg1;\n        \n            if (var1 i>= 0x00) { return var2 / 0x02 ** var1; }\n            else { assert(); }\n        } else {\n            var1 = arg2;\n            var2 = arg1;\n        \n            if (var1 i>= 0x00) { return 0x02 ** var1 * var2; }\n            else { assert(); }\n        }\n    }\n    \n    function func_082A(var arg0, var arg1) returns (var r0) {\n        r0 = func_09F3(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_085C(var arg0, var arg1, var arg2) returns (var r0) {\n        arg0 = arg2 - arg1 + arg0;\n        r0 = func_0A41(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function tokenBalance(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0892(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_08A1() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = msg.value < 0xe8d4a51000;\n    \n        if (var9) {\n            if (var9) { revert(memory[0x00:0x00]); }\n        \n        label_08D5:\n            var0 = msg.sender;\n            var9 = 0x08e3;\n            var var10 = msg.value;\n            var var11 = 0x0a;\n            var9 = func_0A05(var10, var11);\n            var1 = var9;\n            var temp0 = msg.value - var1;\n            var2 = temp0;\n            var9 = 0x08f3;\n            var10 = var2;\n            var9 = buyPrice(var10);\n            var3 = var9;\n            var4 = var1 * 0x02 ** 0x40;\n        \n            if (storage[0x02] <= 0x00) {\n            label_0976:\n                var9 = 0x0982;\n                var10 = storage[0x02];\n                var11 = var3;\n                var9 = func_0892(var10, var11);\n                storage[0x02] = var9;\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                var9 = 0x09a8;\n                var10 = storage[keccak256(memory[0x00:0x40])];\n                var11 = var3;\n                var9 = func_0892(var10, var11);\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var9;\n                memory[0x20:0x40] = 0x01;\n                var temp1 = keccak256(memory[0x00:0x40]);\n                var temp2 = var3 * storage[0x04] - var4;\n                storage[temp1] = temp2 + storage[temp1];\n                storage[0x03] = temp2 + storage[0x03];\n                return;\n            } else {\n                var9 = 0x02 - 0x01;\n                var10 = 0x02;\n                var11 = var2;\n                var var12 = storage[0x02] + var3;\n                var var13 = 0x02 ** 0x40;\n                var var14 = var3;\n                var var15 = var11;\n                var var16 = 0x0925;\n                var16 = func_0A1C();\n                var13 = (var16 + var15) * var14 * var13;\n            \n                if (!var12) { assert(); }\n            \n                var12 = var13 / var12;\n            \n                if (!var11) { assert(); }\n            \n                var10 = 0x02 ** 0x40 - var12 / var11 * var10;\n            \n                if (!var9) { assert(); }\n            \n                var5 = var10 / var9;\n                var temp3 = var1 * var5;\n                var6 = temp3;\n                var4 = var4 - var6;\n                var9 = storage[0x02];\n                var10 = var6;\n            \n                if (!var9) { assert(); }\n            \n                storage[0x04] = var10 / var9 + storage[0x04];\n                var7 = var10 / var9;\n                goto label_0976;\n            }\n        } else if (msg.value <= 0xd3c21bcecceda1000000) { goto label_08D5; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09F3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0A05(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0A1C() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x05e8;\n        var var2 = 0x0a29;\n        var2 = func_0CE5();\n        return func_0A29(var2);\n    }\n    \n    function func_0A29(var arg0) returns (var r0) {\n        var var0 = storage[0x02] * storage[0x04] - storage[0x03] / 0x02 ** 0x40;\n        r0 = func_09F3(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0A41(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (arg0 <= 0x016a09e667f3bcc908) {\n        label_0A69:\n        \n            if (arg0 > 0xb504f333f9de6484) {\n            label_0A8C:\n                var temp0 = arg0;\n                var var4 = temp0 + 0x02 ** 0x40;\n                var var5 = temp0 - 0x02 ** 0x40 * 0x02 ** 0x40;\n            \n                if (!var4) { assert(); }\n            \n                var temp1 = var5 i/ var4;\n                var temp2 = (temp1 * temp1) i/ 0x02 ** 0x40;\n                return signextend(0x03, var1) * 0xb17217f7d1cf79ac + (temp1 * ((temp2 * ((temp2 * ((temp2 * ((temp2 * ((temp2 * 0x3284a0c14610924f) i/ 0x02 ** 0x40 + 0x38bd75ed37753d68)) i/ 0x02 ** 0x40 + 0x49254026a7630acf)) i/ 0x02 ** 0x40 + 0x666664e5e9fa0c99)) i/ 0x02 ** 0x40 + 0xaaaaaaac16877908)) i/ 0x02 ** 0x40 + 0x01ffffffffff9dac9b)) i/ 0x02 ** 0x40;\n            } else {\n            label_0A7A:\n                arg0 = arg0 * 0x02;\n                var3 = var3;\n                var1 = var1 + ~0x00;\n            \n                if (arg0 > 0xb504f333f9de6484) { goto label_0A8C; }\n                else { goto label_0A7A; }\n            }\n        } else {\n        label_0A59:\n            arg0 = arg0 / 0x02;\n            var3 = var3;\n            var1 = var1 + 0x01;\n        \n            if (arg0 <= 0x016a09e667f3bcc908) { goto label_0A69; }\n            else { goto label_0A59; }\n        }\n    }\n    \n    function func_0C0A(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0c1c;\n        var var7 = arg0;\n        var6 = getEtherForTokens(var7);\n        var temp0 = var6;\n        var0 = temp0;\n        var6 = 0x0c29;\n        var7 = var0;\n        var var8 = 0x0a;\n        var6 = func_0A05(var7, var8);\n        var1 = var6;\n        var2 = var0 - var1;\n        var6 = 0x0c3c;\n        var7 = storage[0x02];\n        var8 = arg0;\n        var6 = func_09F3(var7, var8);\n        storage[0x02] = var6;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x0c62;\n        var8 = arg0;\n        var6 = func_09F3(var7, var8);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2 * 0x02 ** 0x40 + arg0 * storage[0x04];\n        storage[temp1] = storage[temp1] - temp2;\n        storage[0x03] = storage[0x03] - temp2;\n        var3 = temp2;\n    \n        if (storage[0x02] <= 0x00) {\n        label_0CDC:\n            return;\n        } else {\n            var4 = var1 * 0x02 ** 0x40;\n            var6 = storage[0x02];\n            var7 = var4;\n        \n            if (!var6) { assert(); }\n        \n            var temp3 = var7 / var6;\n            var5 = temp3;\n            var6 = 0x0cd8;\n            var7 = storage[0x04];\n            var8 = var5;\n            var6 = func_0892(var7, var8);\n            storage[0x04] = var6;\n            goto label_0CDC;\n        }\n    }\n    \n    function func_0CE5() returns (var r0) { return storage[0x05] - msg.value; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0111:\n        \n            if (msg.value <= 0x00) {\n                var var0 = 0x0130;\n                var var1 = msg.sender;\n                withdrawOld(var1);\n                stop();\n            } else {\n                var0 = 0x0122;\n                fund();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0145;\n                var var2 = name();\n            \n            label_0145:\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var6 = temp2 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0181:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_0172:\n                    var temp8 = var11;\n                    memory[temp8 + var9:temp8 + var9 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0181; }\n                    else { goto label_0172; }\n                }\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = totalSupply();\n            \n            label_01CF:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01f4;\n                var2 = decimals();\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2 & 0xff;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x39ffe67c) {\n                // Dispatch table entry for withdrawOld(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                withdrawOld(var2);\n                stop();\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var1 = sellPrice();\n                goto label_01CF;\n            } else if (var0 == 0x62dbf261) {\n                // Dispatch table entry for getTokensForEther(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24];\n                var1 = buyPrice(var2);\n                goto label_01CF;\n            } else if (var0 == 0x65bcfbe7) {\n                // Dispatch table entry for payouts(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = payouts(var2);\n                goto label_01CF;\n            } else if (var0 == 0x68306e43) {\n                // Dispatch table entry for dividends(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividends(var2);\n                goto label_01CF;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_01CF;\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = 0x00;\n                var3 = 0x05e8;\n                var4 = 0x038d7ea4c68000;\n                var3 = buyPrice(var4);\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x8b7afe2e) {\n                // Dispatch table entry for contractBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = contractBalance();\n                goto label_01CF;\n            } else if (var0 == 0x957b2e56) {\n                // Dispatch table entry for reinvestDividends()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                var2 = 0x00;\n                var3 = var2;\n                var4 = 0x00;\n                var5 = var4;\n                var6 = 0x00;\n                var7 = var6;\n                var8 = 0x00;\n                var9 = var8;\n                var10 = 0x00;\n                var11 = var10;\n                var var12 = 0x00;\n                var var13 = var12;\n                var var14 = 0x060e;\n                var var15 = msg.sender;\n                var14 = dividends(var15);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x01;\n                var temp13 = keccak256(memory[0x00:0x40]);\n                var temp14 = var14;\n                var temp15 = temp14 * 0x02 ** 0x40;\n                storage[temp13] = temp15 + storage[temp13];\n                storage[0x03] = temp15 + storage[0x03];\n                var2 = temp14;\n                var3 = var2;\n                var14 = var3 < 0xe8d4a51000;\n            \n                if (var14) {\n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                label_0669:\n                    var4 = msg.sender;\n                    var14 = var2;\n                    var15 = 0x0675;\n                    var15 = func_0A1C();\n                    var5 = var15 - var14;\n                    var14 = 0x0683;\n                    var15 = var3;\n                    var var16 = 0x0a;\n                    var14 = func_0A05(var15, var16);\n                    var6 = var14;\n                    var temp16 = var3 - var6;\n                    var7 = temp16;\n                    var14 = 0x0694;\n                    var15 = var7;\n                    var16 = var2;\n                \n                label_0838:\n                    var var17 = 0x00;\n                    var var18 = 0x0863;\n                    var var19 = 0x0566;\n                    var var20 = ~0x0296abf784a358468b;\n                    var var21 = 0x02;\n                    var var22 = 0x01;\n                    var var23 = 0x0555;\n                    var var24 = var15;\n                    var var25 = var16;\n                    var var26 = 0x085c;\n                    var26 = func_0A1C();\n                    var23 = func_085C(var24, var25, var26);\n                    var19 = func_0555(var20, var21, var22, var23);\n                    var18 = func_0566(var19);\n                    var14 = var18;\n                    // Error: Could not resolve jump destination!\n                } else if (var3 <= 0xd3c21bcecceda1000000) { goto label_0669; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0145;\n                var2 = symbol();\n                goto label_0145;\n            } else if (var0 == 0xb1e35242) {\n                // Dispatch table entry for getMeOutOfHere()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                var2 = 0x07cf;\n            \n            label_086A:\n                var3 = 0x00;\n                var4 = 0x0875;\n                var5 = msg.sender;\n                var4 = balanceOf(var5);\n                var temp17 = var4;\n                var3 = temp17;\n                var4 = 0x04fe;\n                var5 = var3;\n                func_0C0A(var5);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xb60d4288) {\n                // Dispatch table entry for fund()\n                var1 = 0x0130;\n                fund();\n                stop();\n            } else if (var0 == 0xb9f308f2) {\n                // Dispatch table entry for getEtherForTokens(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24];\n                var1 = getEtherForTokens(var2);\n                goto label_01CF;\n            } else if (var0 == 0xbda5c450) {\n                // Dispatch table entry for calculateDividendTokens(uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                goto label_0838;\n            } else if (var0 == 0xe555c1a3) {\n                // Dispatch table entry for sellMyTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                goto label_086A;\n            } else if (var0 == 0xeedc966a) {\n                // Dispatch table entry for tokenBalance(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = tokenBalance(var2);\n                goto label_01CF;\n            } else { goto label_0111; }\n        }\n    }\n    \n    function fund() {\n        if (msg.value <= 0xe8d4a51000) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x03a3;\n        var var1 = storage[0x05];\n        var var2 = msg.value;\n        var0 = func_0892(var1, var2);\n        storage[0x05] = var0;\n        var0 = 0x03ae;\n        func_08A1();\n    }\n    \n    function withdrawOld(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x03c5;\n        var var2 = msg.sender;\n        var1 = dividends(var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var1;\n        var temp2 = temp1 * 0x02 ** 0x40;\n        storage[temp0] = temp2 + storage[temp0];\n        storage[0x03] = temp2 + storage[0x03];\n        var0 = temp1;\n        var2 = storage[0x05];\n        var1 = 0x0405;\n        var var3 = var0;\n        var1 = func_09F3(var2, var3);\n        storage[0x05] = var1;\n        var temp3 = var0;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n    \n        if (temp5) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0a;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x457468507972616d696400000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = 0x048a;\n        var var2 = msg.sender;\n        var1 = dividends(var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var1;\n        var temp2 = temp1 * 0x02 ** 0x40;\n        storage[temp0] = temp2 + storage[temp0];\n        storage[0x03] = temp2 + storage[0x03];\n        var0 = temp1;\n        var2 = storage[0x05];\n        var1 = 0x04ca;\n        var var3 = var0;\n        var1 = func_09F3(var2, var3);\n        storage[0x05] = var1;\n        var temp3 = var0;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(msg.sender).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n    \n        if (temp5) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x0516;\n        var var4 = 0x038d7ea4c68000;\n        var3 = getEtherForTokens(var4);\n        var temp0 = var3;\n        var1 = temp0;\n        var3 = 0x0523;\n        var4 = var1;\n        var var5 = 0x0a;\n        var3 = func_0A05(var4, var5);\n        return var1 - var3;\n    }\n    \n    function buyPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x056e;\n        var var2 = 0x0566;\n        var var3 = ~0x0296abf784a358468b;\n        var var4 = 0x02;\n        var var5 = 0x01;\n        var var6 = 0x0555;\n        var var7 = arg0;\n        var var8 = 0x054f;\n        var8 = func_0A1C();\n        var6 = func_054F(var7, var8);\n        var2 = func_0555(var3, var4, var5, var6);\n        return func_0566(var2);\n    }\n    \n    function func_054F(var arg0, var arg1) returns (var r0) {\n        arg0 = arg1 + arg0;\n        r0 = func_0A41(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0555(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        arg2 = arg3 * arg2;\n    \n        if (!arg1) { assert(); }\n    \n        arg0 = arg2 i/ arg1 + arg0;\n        arg1 = 0x00;\n        arg3 = arg1;\n        var var0 = arg3;\n        var temp0 = arg0;\n        arg2 = (temp0 + 0x2cb53f09f05cc627c8) i/ 0xb17217f7d1cf79ac - 0x40;\n        var temp1 = temp0 - arg2 * 0xb17217f7d1cf79ac;\n        arg0 = temp1;\n        var var1 = 0x02 ** 0x40;\n        var var2 = arg0 * arg0;\n    \n        if (!var1) { assert(); }\n    \n        var temp2 = var2 i/ var1;\n        arg3 = temp2;\n        var temp3 = (arg3 * ((arg3 * ((arg3 * ((arg3 * ~0x1b893ad04b39) i/ 0x02 ** 0x40 + 0x0455956bccdd06)) i/ 0x02 ** 0x40 + ~0xb60b60808399d0)) i/ 0x02 ** 0x40 + 0x2aaaaaaaaa015db0)) i/ 0x02 ** 0x40 + 0x02 * 0x02 ** 0x40;\n        var0 = temp3;\n        var temp4 = arg0;\n        var1 = var0 - temp4;\n        var2 = (var0 + temp4) * 0x02 ** 0x40;\n    \n        if (!var1) { assert(); }\n    \n        arg1 = var2 i/ var1;\n    \n        if (arg2 i< 0x00) {\n            var1 = 0x00 - arg2;\n            var2 = arg1;\n        \n            if (var1 i>= 0x00) { return var2 / 0x02 ** var1; }\n            else { assert(); }\n        } else {\n            var1 = arg2;\n            var2 = arg1;\n        \n            if (var1 i>= 0x00) { return 0x02 ** var1 * var2; }\n            else { assert(); }\n        }\n    }\n    \n    function func_0566(var arg0) returns (var r0) {\n        var var0 = storage[0x02];\n        r0 = func_09F3(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function payouts(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function dividends(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x04] - temp0 / 0x02 ** 0x40;\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function contractBalance() returns (var r0) { return storage[0x05]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4550590000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function getEtherForTokens(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x07e2;\n        var2 = func_0A1C();\n        var1 = var2;\n    \n        if (arg0 != storage[0x02]) {\n            var2 = 0x082f;\n            var var3 = var1;\n            var var4 = 0x082a;\n            var var5 = 0x01;\n            var var6 = 0x02;\n            var var7 = ~0x0296abf784a358468b;\n            var var8 = 0x0819;\n            var var9 = storage[0x02] - arg0;\n            var8 = func_0A41(var9);\n            var4 = func_0819(var5, var6, var7, var8);\n            var2 = func_082A(var3, var4);\n            var0 = var2;\n        \n        label_0832:\n            return var0;\n        } else {\n            var0 = var1;\n            goto label_0832;\n        }\n    }\n    \n    function func_0819(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        arg1 = arg3 - arg2 * arg1;\n    \n        if (!arg0) { assert(); }\n    \n        arg0 = arg1 i/ arg0;\n        arg1 = 0x00;\n        arg3 = arg1;\n        var var0 = arg3;\n        var temp0 = arg0;\n        arg2 = (temp0 + 0x2cb53f09f05cc627c8) i/ 0xb17217f7d1cf79ac - 0x40;\n        var temp1 = temp0 - arg2 * 0xb17217f7d1cf79ac;\n        arg0 = temp1;\n        var var1 = 0x02 ** 0x40;\n        var var2 = arg0 * arg0;\n    \n        if (!var1) { assert(); }\n    \n        var temp2 = var2 i/ var1;\n        arg3 = temp2;\n        var temp3 = (arg3 * ((arg3 * ((arg3 * ((arg3 * ~0x1b893ad04b39) i/ 0x02 ** 0x40 + 0x0455956bccdd06)) i/ 0x02 ** 0x40 + ~0xb60b60808399d0)) i/ 0x02 ** 0x40 + 0x2aaaaaaaaa015db0)) i/ 0x02 ** 0x40 + 0x02 * 0x02 ** 0x40;\n        var0 = temp3;\n        var temp4 = arg0;\n        var1 = var0 - temp4;\n        var2 = (var0 + temp4) * 0x02 ** 0x40;\n    \n        if (!var1) { assert(); }\n    \n        arg1 = var2 i/ var1;\n    \n        if (arg2 i< 0x00) {\n            var1 = 0x00 - arg2;\n            var2 = arg1;\n        \n            if (var1 i>= 0x00) { return var2 / 0x02 ** var1; }\n            else { assert(); }\n        } else {\n            var1 = arg2;\n            var2 = arg1;\n        \n            if (var1 i>= 0x00) { return 0x02 ** var1 * var2; }\n            else { assert(); }\n        }\n    }\n    \n    function func_082A(var arg0, var arg1) returns (var r0) {\n        r0 = func_09F3(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_085C(var arg0, var arg1, var arg2) returns (var r0) {\n        arg0 = arg2 - arg1 + arg0;\n        r0 = func_0A41(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function tokenBalance(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0892(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_08A1() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = msg.value < 0xe8d4a51000;\n    \n        if (var9) {\n            if (var9) { revert(memory[0x00:0x00]); }\n        \n        label_08D5:\n            var0 = msg.sender;\n            var9 = 0x08e3;\n            var var10 = msg.value;\n            var var11 = 0x0a;\n            var9 = func_0A05(var10, var11);\n            var1 = var9;\n            var temp0 = msg.value - var1;\n            var2 = temp0;\n            var9 = 0x08f3;\n            var10 = var2;\n            var9 = buyPrice(var10);\n            var3 = var9;\n            var4 = var1 * 0x02 ** 0x40;\n        \n            if (storage[0x02] <= 0x00) {\n            label_0976:\n                var9 = 0x0982;\n                var10 = storage[0x02];\n                var11 = var3;\n                var9 = func_0892(var10, var11);\n                storage[0x02] = var9;\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                var9 = 0x09a8;\n                var10 = storage[keccak256(memory[0x00:0x40])];\n                var11 = var3;\n                var9 = func_0892(var10, var11);\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var9;\n                memory[0x20:0x40] = 0x01;\n                var temp1 = keccak256(memory[0x00:0x40]);\n                var temp2 = var3 * storage[0x04] - var4;\n                storage[temp1] = temp2 + storage[temp1];\n                storage[0x03] = temp2 + storage[0x03];\n                return;\n            } else {\n                var9 = 0x02 - 0x01;\n                var10 = 0x02;\n                var11 = var2;\n                var var12 = storage[0x02] + var3;\n                var var13 = 0x02 ** 0x40;\n                var var14 = var3;\n                var var15 = var11;\n                var var16 = 0x0925;\n                var16 = func_0A1C();\n                var13 = (var16 + var15) * var14 * var13;\n            \n                if (!var12) { assert(); }\n            \n                var12 = var13 / var12;\n            \n                if (!var11) { assert(); }\n            \n                var10 = 0x02 ** 0x40 - var12 / var11 * var10;\n            \n                if (!var9) { assert(); }\n            \n                var5 = var10 / var9;\n                var temp3 = var1 * var5;\n                var6 = temp3;\n                var4 = var4 - var6;\n                var9 = storage[0x02];\n                var10 = var6;\n            \n                if (!var9) { assert(); }\n            \n                storage[0x04] = var10 / var9 + storage[0x04];\n                var7 = var10 / var9;\n                goto label_0976;\n            }\n        } else if (msg.value <= 0xd3c21bcecceda1000000) { goto label_08D5; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09F3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0A05(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0A1C() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x05e8;\n        var var2 = 0x0a29;\n        var2 = func_0CE5();\n        return func_0A29(var2);\n    }\n    \n    function func_0A29(var arg0) returns (var r0) {\n        var var0 = storage[0x02] * storage[0x04] - storage[0x03] / 0x02 ** 0x40;\n        r0 = func_09F3(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0A41(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (arg0 <= 0x016a09e667f3bcc908) {\n        label_0A69:\n        \n            if (arg0 > 0xb504f333f9de6484) {\n            label_0A8C:\n                var temp0 = arg0;\n                var var4 = temp0 + 0x02 ** 0x40;\n                var var5 = temp0 - 0x02 ** 0x40 * 0x02 ** 0x40;\n            \n                if (!var4) { assert(); }\n            \n                var temp1 = var5 i/ var4;\n                var temp2 = (temp1 * temp1) i/ 0x02 ** 0x40;\n                return signextend(0x03, var1) * 0xb17217f7d1cf79ac + (temp1 * ((temp2 * ((temp2 * ((temp2 * ((temp2 * ((temp2 * 0x3284a0c14610924f) i/ 0x02 ** 0x40 + 0x38bd75ed37753d68)) i/ 0x02 ** 0x40 + 0x49254026a7630acf)) i/ 0x02 ** 0x40 + 0x666664e5e9fa0c99)) i/ 0x02 ** 0x40 + 0xaaaaaaac16877908)) i/ 0x02 ** 0x40 + 0x01ffffffffff9dac9b)) i/ 0x02 ** 0x40;\n            } else {\n            label_0A7A:\n                arg0 = arg0 * 0x02;\n                var3 = var3;\n                var1 = var1 + ~0x00;\n            \n                if (arg0 > 0xb504f333f9de6484) { goto label_0A8C; }\n                else { goto label_0A7A; }\n            }\n        } else {\n        label_0A59:\n            arg0 = arg0 / 0x02;\n            var3 = var3;\n            var1 = var1 + 0x01;\n        \n            if (arg0 <= 0x016a09e667f3bcc908) { goto label_0A69; }\n            else { goto label_0A59; }\n        }\n    }\n    \n    function func_0C0A(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0c1c;\n        var var7 = arg0;\n        var6 = getEtherForTokens(var7);\n        var temp0 = var6;\n        var0 = temp0;\n        var6 = 0x0c29;\n        var7 = var0;\n        var var8 = 0x0a;\n        var6 = func_0A05(var7, var8);\n        var1 = var6;\n        var2 = var0 - var1;\n        var6 = 0x0c3c;\n        var7 = storage[0x02];\n        var8 = arg0;\n        var6 = func_09F3(var7, var8);\n        storage[0x02] = var6;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x0c62;\n        var8 = arg0;\n        var6 = func_09F3(var7, var8);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2 * 0x02 ** 0x40 + arg0 * storage[0x04];\n        storage[temp1] = storage[temp1] - temp2;\n        storage[0x03] = storage[0x03] - temp2;\n        var3 = temp2;\n    \n        if (storage[0x02] <= 0x00) {\n        label_0CDC:\n            return;\n        } else {\n            var4 = var1 * 0x02 ** 0x40;\n            var6 = storage[0x02];\n            var7 = var4;\n        \n            if (!var6) { assert(); }\n        \n            var temp3 = var7 / var6;\n            var5 = temp3;\n            var6 = 0x0cd8;\n            var7 = storage[0x04];\n            var8 = var5;\n            var6 = func_0892(var7, var8);\n            storage[0x04] = var6;\n            goto label_0CDC;\n        }\n    }\n    \n    function func_0CE5() returns (var r0) { return storage[0x05] - msg.value; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0111:\n        \n            if (msg.value <= 0x00) {\n                var var0 = 0x0130;\n                var var1 = msg.sender;\n                withdrawOld(var1);\n                stop();\n            } else {\n                var0 = 0x0122;\n                fund();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0145;\n                var var2 = name();\n            \n            label_0145:\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var6 = temp2 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0181:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_0172:\n                    var temp8 = var11;\n                    memory[temp8 + var9:temp8 + var9 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0181; }\n                    else { goto label_0172; }\n                }\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = totalSupply();\n            \n            label_01CF:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01f4;\n                var2 = decimals();\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2 & 0xff;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x39ffe67c) {\n                // Dispatch table entry for withdrawOld(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                withdrawOld(var2);\n                stop();\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var1 = sellPrice();\n                goto label_01CF;\n            } else if (var0 == 0x62dbf261) {\n                // Dispatch table entry for getTokensForEther(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24];\n                var1 = buyPrice(var2);\n                goto label_01CF;\n            } else if (var0 == 0x65bcfbe7) {\n                // Dispatch table entry for payouts(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = payouts(var2);\n                goto label_01CF;\n            } else if (var0 == 0x68306e43) {\n                // Dispatch table entry for dividends(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividends(var2);\n                goto label_01CF;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_01CF;\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = 0x00;\n                var3 = 0x05e8;\n                var4 = 0x038d7ea4c68000;\n                var3 = buyPrice(var4);\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x8b7afe2e) {\n                // Dispatch table entry for contractBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = contractBalance();\n                goto label_01CF;\n            } else if (var0 == 0x957b2e56) {\n                // Dispatch table entry for reinvestDividends()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                var2 = 0x00;\n                var3 = var2;\n                var4 = 0x00;\n                var5 = var4;\n                var6 = 0x00;\n                var7 = var6;\n                var8 = 0x00;\n                var9 = var8;\n                var10 = 0x00;\n                var11 = var10;\n                var var12 = 0x00;\n                var var13 = var12;\n                var var14 = 0x060e;\n                var var15 = msg.sender;\n                var14 = dividends(var15);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x01;\n                var temp13 = keccak256(memory[0x00:0x40]);\n                var temp14 = var14;\n                var temp15 = temp14 * 0x02 ** 0x40;\n                storage[temp13] = temp15 + storage[temp13];\n                storage[0x03] = temp15 + storage[0x03];\n                var2 = temp14;\n                var3 = var2;\n                var14 = var3 < 0xe8d4a51000;\n            \n                if (var14) {\n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                label_0669:\n                    var4 = msg.sender;\n                    var14 = var2;\n                    var15 = 0x0675;\n                    var15 = func_0A1C();\n                    var5 = var15 - var14;\n                    var14 = 0x0683;\n                    var15 = var3;\n                    var var16 = 0x0a;\n                    var14 = func_0A05(var15, var16);\n                    var6 = var14;\n                    var temp16 = var3 - var6;\n                    var7 = temp16;\n                    var14 = 0x0694;\n                    var15 = var7;\n                    var16 = var2;\n                \n                label_0838:\n                    var var17 = 0x00;\n                    var var18 = 0x0863;\n                    var var19 = 0x0566;\n                    var var20 = ~0x0296abf784a358468b;\n                    var var21 = 0x02;\n                    var var22 = 0x01;\n                    var var23 = 0x0555;\n                    var var24 = var15;\n                    var var25 = var16;\n                    var var26 = 0x085c;\n                    var26 = func_0A1C();\n                    var23 = func_085C(var24, var25, var26);\n                    var19 = func_0555(var20, var21, var22, var23);\n                    var18 = func_0566(var19);\n                    var14 = var18;\n                    // Error: Could not resolve jump destination!\n                } else if (var3 <= 0xd3c21bcecceda1000000) { goto label_0669; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0145;\n                var2 = symbol();\n                goto label_0145;\n            } else if (var0 == 0xb1e35242) {\n                // Dispatch table entry for getMeOutOfHere()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                var2 = 0x07cf;\n            \n            label_086A:\n                var3 = 0x00;\n                var4 = 0x0875;\n                var5 = msg.sender;\n                var4 = balanceOf(var5);\n                var temp17 = var4;\n                var3 = temp17;\n                var4 = 0x04fe;\n                var5 = var3;\n                func_0C0A(var5);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xb60d4288) {\n                // Dispatch table entry for fund()\n                var1 = 0x0130;\n                fund();\n                stop();\n            } else if (var0 == 0xb9f308f2) {\n                // Dispatch table entry for getEtherForTokens(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24];\n                var1 = getEtherForTokens(var2);\n                goto label_01CF;\n            } else if (var0 == 0xbda5c450) {\n                // Dispatch table entry for calculateDividendTokens(uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                goto label_0838;\n            } else if (var0 == 0xe555c1a3) {\n                // Dispatch table entry for sellMyTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0130;\n                goto label_086A;\n            } else if (var0 == 0xeedc966a) {\n                // Dispatch table entry for tokenBalance(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01cf;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = tokenBalance(var2);\n                goto label_01CF;\n            } else { goto label_0111; }\n        }\n    }\n    \n    function fund() {\n        if (msg.value <= 0xe8d4a51000) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x03a3;\n        var var1 = storage[0x05];\n        var var2 = msg.value;\n        var0 = func_0892(var1, var2);\n        storage[0x05] = var0;\n        var0 = 0x03ae;\n        func_08A1();\n    }\n    \n    function withdrawOld(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x03c5;\n        var var2 = msg.sender;\n        var1 = dividends(var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var1;\n        var temp2 = temp1 * 0x02 ** 0x40;\n        storage[temp0] = temp2 + storage[temp0];\n        storage[0x03] = temp2 + storage[0x03];\n        var0 = temp1;\n        var2 = storage[0x05];\n        var1 = 0x0405;\n        var var3 = var0;\n        var1 = func_09F3(var2, var3);\n        storage[0x05] = var1;\n        var temp3 = var0;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n    \n        if (temp5) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0a;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x457468507972616d696400000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = 0x048a;\n        var var2 = msg.sender;\n        var1 = dividends(var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var1;\n        var temp2 = temp1 * 0x02 ** 0x40;\n        storage[temp0] = temp2 + storage[temp0];\n        storage[0x03] = temp2 + storage[0x03];\n        var0 = temp1;\n        var2 = storage[0x05];\n        var1 = 0x04ca;\n        var var3 = var0;\n        var1 = func_09F3(var2, var3);\n        storage[0x05] = var1;\n        var temp3 = var0;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(msg.sender).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n    \n        if (temp5) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x0516;\n        var var4 = 0x038d7ea4c68000;\n        var3 = getEtherForTokens(var4);\n        var temp0 = var3;\n        var1 = temp0;\n        var3 = 0x0523;\n        var4 = var1;\n        var var5 = 0x0a;\n        var3 = func_0A05(var4, var5);\n        return var1 - var3;\n    }\n    \n    function buyPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x056e;\n        var var2 = 0x0566;\n        var var3 = ~0x0296abf784a358468b;\n        var var4 = 0x02;\n        var var5 = 0x01;\n        var var6 = 0x0555;\n        var var7 = arg0;\n        var var8 = 0x054f;\n        var8 = func_0A1C();\n        var6 = func_054F(var7, var8);\n        var2 = func_0555(var3, var4, var5, var6);\n        return func_0566(var2);\n    }\n    \n    function func_054F(var arg0, var arg1) returns (var r0) {\n        arg0 = arg1 + arg0;\n        r0 = func_0A41(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0555(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        arg2 = arg3 * arg2;\n    \n        if (!arg1) { assert(); }\n    \n        arg0 = arg2 i/ arg1 + arg0;\n        arg1 = 0x00;\n        arg3 = arg1;\n        var var0 = arg3;\n        var temp0 = arg0;\n        arg2 = (temp0 + 0x2cb53f09f05cc627c8) i/ 0xb17217f7d1cf79ac - 0x40;\n        var temp1 = temp0 - arg2 * 0xb17217f7d1cf79ac;\n        arg0 = temp1;\n        var var1 = 0x02 ** 0x40;\n        var var2 = arg0 * arg0;\n    \n        if (!var1) { assert(); }\n    \n        var temp2 = var2 i/ var1;\n        arg3 = temp2;\n        var temp3 = (arg3 * ((arg3 * ((arg3 * ((arg3 * ~0x1b893ad04b39) i/ 0x02 ** 0x40 + 0x0455956bccdd06)) i/ 0x02 ** 0x40 + ~0xb60b60808399d0)) i/ 0x02 ** 0x40 + 0x2aaaaaaaaa015db0)) i/ 0x02 ** 0x40 + 0x02 * 0x02 ** 0x40;\n        var0 = temp3;\n        var temp4 = arg0;\n        var1 = var0 - temp4;\n        var2 = (var0 + temp4) * 0x02 ** 0x40;\n    \n        if (!var1) { assert(); }\n    \n        arg1 = var2 i/ var1;\n    \n        if (arg2 i< 0x00) {\n            var1 = 0x00 - arg2;\n            var2 = arg1;\n        \n            if (var1 i>= 0x00) { return var2 / 0x02 ** var1; }\n            else { assert(); }\n        } else {\n            var1 = arg2;\n            var2 = arg1;\n        \n            if (var1 i>= 0x00) { return 0x02 ** var1 * var2; }\n            else { assert(); }\n        }\n    }\n    \n    function func_0566(var arg0) returns (var r0) {\n        var var0 = storage[0x02];\n        r0 = func_09F3(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function payouts(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function dividends(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x04] - temp0 / 0x02 ** 0x40;\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function contractBalance() returns (var r0) { return storage[0x05]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x4550590000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function getEtherForTokens(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x07e2;\n        var2 = func_0A1C();\n        var1 = var2;\n    \n        if (arg0 != storage[0x02]) {\n            var2 = 0x082f;\n            var var3 = var1;\n            var var4 = 0x082a;\n            var var5 = 0x01;\n            var var6 = 0x02;\n            var var7 = ~0x0296abf784a358468b;\n            var var8 = 0x0819;\n            var var9 = storage[0x02] - arg0;\n            var8 = func_0A41(var9);\n            var4 = func_0819(var5, var6, var7, var8);\n            var2 = func_082A(var3, var4);\n            var0 = var2;\n        \n        label_0832:\n            return var0;\n        } else {\n            var0 = var1;\n            goto label_0832;\n        }\n    }\n    \n    function func_0819(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        arg1 = arg3 - arg2 * arg1;\n    \n        if (!arg0) { assert(); }\n    \n        arg0 = arg1 i/ arg0;\n        arg1 = 0x00;\n        arg3 = arg1;\n        var var0 = arg3;\n        var temp0 = arg0;\n        arg2 = (temp0 + 0x2cb53f09f05cc627c8) i/ 0xb17217f7d1cf79ac - 0x40;\n        var temp1 = temp0 - arg2 * 0xb17217f7d1cf79ac;\n        arg0 = temp1;\n        var var1 = 0x02 ** 0x40;\n        var var2 = arg0 * arg0;\n    \n        if (!var1) { assert(); }\n    \n        var temp2 = var2 i/ var1;\n        arg3 = temp2;\n        var temp3 = (arg3 * ((arg3 * ((arg3 * ((arg3 * ~0x1b893ad04b39) i/ 0x02 ** 0x40 + 0x0455956bccdd06)) i/ 0x02 ** 0x40 + ~0xb60b60808399d0)) i/ 0x02 ** 0x40 + 0x2aaaaaaaaa015db0)) i/ 0x02 ** 0x40 + 0x02 * 0x02 ** 0x40;\n        var0 = temp3;\n        var temp4 = arg0;\n        var1 = var0 - temp4;\n        var2 = (var0 + temp4) * 0x02 ** 0x40;\n    \n        if (!var1) { assert(); }\n    \n        arg1 = var2 i/ var1;\n    \n        if (arg2 i< 0x00) {\n            var1 = 0x00 - arg2;\n            var2 = arg1;\n        \n            if (var1 i>= 0x00) { return var2 / 0x02 ** var1; }\n            else { assert(); }\n        } else {\n            var1 = arg2;\n            var2 = arg1;\n        \n            if (var1 i>= 0x00) { return 0x02 ** var1 * var2; }\n            else { assert(); }\n        }\n    }\n    \n    function func_082A(var arg0, var arg1) returns (var r0) {\n        r0 = func_09F3(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_085C(var arg0, var arg1, var arg2) returns (var r0) {\n        arg0 = arg2 - arg1 + arg0;\n        r0 = func_0A41(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function tokenBalance(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0892(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_08A1() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = msg.value < 0xe8d4a51000;\n    \n        if (var9) {\n            if (var9) { revert(memory[0x00:0x00]); }\n        \n        label_08D5:\n            var0 = msg.sender;\n            var9 = 0x08e3;\n            var var10 = msg.value;\n            var var11 = 0x0a;\n            var9 = func_0A05(var10, var11);\n            var1 = var9;\n            var temp0 = msg.value - var1;\n            var2 = temp0;\n            var9 = 0x08f3;\n            var10 = var2;\n            var9 = buyPrice(var10);\n            var3 = var9;\n            var4 = var1 * 0x02 ** 0x40;\n        \n            if (storage[0x02] <= 0x00) {\n            label_0976:\n                var9 = 0x0982;\n                var10 = storage[0x02];\n                var11 = var3;\n                var9 = func_0892(var10, var11);\n                storage[0x02] = var9;\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                var9 = 0x09a8;\n                var10 = storage[keccak256(memory[0x00:0x40])];\n                var11 = var3;\n                var9 = func_0892(var10, var11);\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var9;\n                memory[0x20:0x40] = 0x01;\n                var temp1 = keccak256(memory[0x00:0x40]);\n                var temp2 = var3 * storage[0x04] - var4;\n                storage[temp1] = temp2 + storage[temp1];\n                storage[0x03] = temp2 + storage[0x03];\n                return;\n            } else {\n                var9 = 0x02 - 0x01;\n                var10 = 0x02;\n                var11 = var2;\n                var var12 = storage[0x02] + var3;\n                var var13 = 0x02 ** 0x40;\n                var var14 = var3;\n                var var15 = var11;\n                var var16 = 0x0925;\n                var16 = func_0A1C();\n                var13 = (var16 + var15) * var14 * var13;\n            \n                if (!var12) { assert(); }\n            \n                var12 = var13 / var12;\n            \n                if (!var11) { assert(); }\n            \n                var10 = 0x02 ** 0x40 - var12 / var11 * var10;\n            \n                if (!var9) { assert(); }\n            \n                var5 = var10 / var9;\n                var temp3 = var1 * var5;\n                var6 = temp3;\n                var4 = var4 - var6;\n                var9 = storage[0x02];\n                var10 = var6;\n            \n                if (!var9) { assert(); }\n            \n                storage[0x04] = var10 / var9 + storage[0x04];\n                var7 = var10 / var9;\n                goto label_0976;\n            }\n        } else if (msg.value <= 0xd3c21bcecceda1000000) { goto label_08D5; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09F3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0A05(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0A1C() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x05e8;\n        var var2 = 0x0a29;\n        var2 = func_0CE5();\n        return func_0A29(var2);\n    }\n    \n    function func_0A29(var arg0) returns (var r0) {\n        var var0 = storage[0x02] * storage[0x04] - storage[0x03] / 0x02 ** 0x40;\n        r0 = func_09F3(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0A41(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (arg0 <= 0x016a09e667f3bcc908) {\n        label_0A69:\n        \n            if (arg0 > 0xb504f333f9de6484) {\n            label_0A8C:\n                var temp0 = arg0;\n                var var4 = temp0 + 0x02 ** 0x40;\n                var var5 = temp0 - 0x02 ** 0x40 * 0x02 ** 0x40;\n            \n                if (!var4) { assert(); }\n            \n                var temp1 = var5 i/ var4;\n                var temp2 = (temp1 * temp1) i/ 0x02 ** 0x40;\n                return signextend(0x03, var1) * 0xb17217f7d1cf79ac + (temp1 * ((temp2 * ((temp2 * ((temp2 * ((temp2 * ((temp2 * 0x3284a0c14610924f) i/ 0x02 ** 0x40 + 0x38bd75ed37753d68)) i/ 0x02 ** 0x40 + 0x49254026a7630acf)) i/ 0x02 ** 0x40 + 0x666664e5e9fa0c99)) i/ 0x02 ** 0x40 + 0xaaaaaaac16877908)) i/ 0x02 ** 0x40 + 0x01ffffffffff9dac9b)) i/ 0x02 ** 0x40;\n            } else {\n            label_0A7A:\n                arg0 = arg0 * 0x02;\n                var3 = var3;\n                var1 = var1 + ~0x00;\n            \n                if (arg0 > 0xb504f333f9de6484) { goto label_0A8C; }\n                else { goto label_0A7A; }\n            }\n        } else {\n        label_0A59:\n            arg0 = arg0 / 0x02;\n            var3 = var3;\n            var1 = var1 + 0x01;\n        \n            if (arg0 <= 0x016a09e667f3bcc908) { goto label_0A69; }\n            else { goto label_0A59; }\n        }\n    }\n    \n    function func_0C0A(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0c1c;\n        var var7 = arg0;\n        var6 = getEtherForTokens(var7);\n        var temp0 = var6;\n        var0 = temp0;\n        var6 = 0x0c29;\n        var7 = var0;\n        var var8 = 0x0a;\n        var6 = func_0A05(var7, var8);\n        var1 = var6;\n        var2 = var0 - var1;\n        var6 = 0x0c3c;\n        var7 = storage[0x02];\n        var8 = arg0;\n        var6 = func_09F3(var7, var8);\n        storage[0x02] = var6;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x0c62;\n        var8 = arg0;\n        var6 = func_09F3(var7, var8);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2 * 0x02 ** 0x40 + arg0 * storage[0x04];\n        storage[temp1] = storage[temp1] - temp2;\n        storage[0x03] = storage[0x03] - temp2;\n        var3 = temp2;\n    \n        if (storage[0x02] <= 0x00) {\n        label_0CDC:\n            return;\n        } else {\n            var4 = var1 * 0x02 ** 0x40;\n            var6 = storage[0x02];\n            var7 = var4;\n        \n            if (!var6) { assert(); }\n        \n            var temp3 = var7 / var6;\n            var5 = temp3;\n            var6 = 0x0cd8;\n            var7 = storage[0x04];\n            var8 = var5;\n            var6 = func_0892(var7, var8);\n            storage[0x04] = var6;\n            goto label_0CDC;\n        }\n    }\n    \n    function func_0CE5() returns (var r0) { return storage[0x05] - msg.value; }\n}\n\n.",
	"status": "1",
	"time_cost": 119.15813040733337,
	"usage": {
		"completion_tokens": 1572,
		"prompt_tokens": 9122,
		"total_tokens": 10694
	}
}