{
	"address": "0xd76b5c2a23ef78368d8e34288b5b65d616b746ae",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's an approximation of the Solidity contract derived from the provided EVM bytecode. Note, however, that it is impossible to accurately recreate the original Solidity contract from the EVM bytecode, as certain information (like variable names and comments) is lost during the compilation process.\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract {\n    mapping(address => uint256) balanceOf;\n    mapping(address => mapping(address => uint256)) allowance;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    address public owner;\n    address public newOwner;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        totalSupply += msg.value;\n    }\n\n    function withdraw(uint256 _value) public {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        totalSupply -= _value;\n        payable(msg.sender).transfer(_value);\n    }\n\n    function transferOwnership(address _newOwner) public {\n        require(msg.sender == owner);\n        newOwner = _newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n```",
				"role": "assistant"
			}
		}
	],
	"created": 1700471812,
	"id": "chatcmpl-8MugeiemkiVgM0s12ssObveqs8ncp",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00EE:\n            var var0 = 0x00fd;\n            var var1 = 0x00fa;\n            deposit();\n            func_00FA();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x010f;\n                var var2 = name();\n            \n            label_010F:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var2;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var3 = temp0;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp1:temp1 + 0x20];\n                var var6 = temp1 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n            \n                if (!var8) {\n                label_0155:\n                    var temp2 = var7;\n                    var5 = temp2 + var5;\n                    var6 = temp2 & 0x1f;\n                \n                    if (!var6) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var5 - temp3];\n                    } else {\n                        var temp4 = var6;\n                        var temp5 = var5 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_0135:\n                    memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n                \n                    if (var8 <= 0x20) { goto label_0155; }\n                \n                    var8 = var8 + ~0x1f;\n                    var9 = var9 + 0x20;\n                    var10 = var10 + 0x20;\n                    goto label_0135;\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ae;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_01AE:\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = !!var1;\n                var temp8 = memory[0x40:0x60];\n                return memory[temp8:temp8 + temp7 - temp8 + 0x20];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01d2;\n                var2 = totalSupply();\n            \n            label_01D2:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + temp9 - temp10 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ae;\n                var temp11 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp11 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp11;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_01AE;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00fd;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0242;\n                var2 = decimals();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var2 & 0xff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x5a3b7e42) {\n                // Dispatch table entry for standard()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x010f;\n                var2 = standard();\n                goto label_010F;\n            } else if (var0 == 0x5e35359e) {\n                // Dispatch table entry for withdrawTokens(address,address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00fd;\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp14 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp14;\n                var4 = msg.data[0x44:0x64];\n                withdrawTokens(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01d2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balanceOf(var2);\n                goto label_01D2;\n            } else if (var0 == 0x79ba5097) {\n                // Dispatch table entry for acceptOwnership()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00fd;\n                acceptOwnership();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x035f;\n                var2 = owner();\n            \n            label_035F:\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + temp15 - temp16 + 0x20];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x010f;\n                var2 = symbol();\n                goto label_010F;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ae;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_01AE;\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x00fd;\n                deposit();\n                stop();\n            } else if (var0 == 0xd4ee1d90) {\n                // Dispatch table entry for newOwner()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x035f;\n                var2 = newOwner();\n                goto label_035F;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01d2;\n                var temp17 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp17 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp17;\n                var2 = allowance(var2, var3);\n                goto label_01D2;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00fd;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_00EE; }\n        }\n    }\n    \n    function func_00FA() {}\n    \n    function deposit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var var0 = 0x04e9;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0BC0(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x050f;\n        var1 = storage[0x04];\n        var2 = msg.value;\n        var0 = func_0BC0(var1, var2);\n        storage[0x04] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc3]);\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0dd6:0x0df6];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = msg.value;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], address(this), msg.sender]);\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0606:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05FD; }\n        \n        label_05E9:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05E9; }\n        \n        label_05FD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0606;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_0606;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = !arg1;\n    \n        if (!var2) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_0663; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var2) {\n        label_0663:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x06;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x04]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0702;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var1 = func_0BDA(var2, var3, var4);\n    \n        if (var1) { return 0x01; }\n        else { assert(); }\n    }\n    \n    function withdraw(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var var0 = 0x0738;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_0D00(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x04];\n        var0 = 0x075e;\n        var2 = arg0;\n        var0 = func_0D00(var1, var2);\n        storage[0x04] = var0;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg0;\n        var temp2;\n        temp2, memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n    \n        if (!temp2) { assert(); }\n    \n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0dd6:0x0df6];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = arg0;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [memory[0x00:0x20], msg.sender, address(this)]);\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = temp5;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [0x9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd3453]);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function standard() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0606:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05FD; }\n        \n        label_05E9:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05E9; }\n        \n        label_05FD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0606;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0606;\n        }\n    }\n    \n    function withdrawTokens(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var0 = arg0;\n    \n        if (!(var0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg1;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n    \n        if (var2 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        memory[temp2:temp2 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = arg2;\n        var var5 = temp3 + 0x20;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp4;\n        temp4, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp4) { assert(); }\n    \n        if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { return; }\n        else { assert(); }\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function acceptOwnership() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x08] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[temp1:temp1 + 0x20] = temp2 & storage[0x07];\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = storage[0x08] & temp2;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + temp1 - temp3 + 0x40], [0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a]);\n        var temp4 = storage[0x08];\n        var temp5 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[0x07] = (temp4 & 0x02 ** 0xa0 - 0x01) | (temp5 & storage[0x07]);\n        storage[0x08] = temp5 & temp4;\n    }\n    \n    function owner() returns (var r0) { return storage[0x07] & 0x02 ** 0xa0 - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0606:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05FD; }\n        \n        label_05E9:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05E9; }\n        \n        label_05FD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0606;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_0606;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0b21;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_0D17(var2, var3);\n    \n        if (var1) { return 0x01; }\n        else { assert(); }\n    }\n    \n    function newOwner() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp1 == temp1 & arg0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x08] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x08] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0BC0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0BDA(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n    \n        if (!(var2 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var4 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = 0x0c3b;\n        var var5 = arg2;\n        var3 = func_0D00(var4, var5);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = arg0 & temp2;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x06;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x05;\n        var3 = 0x0c7c;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = arg2;\n        var3 = func_0D00(var4, var5);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp5;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = arg1 & temp5;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0cab;\n        var5 = arg2;\n        var3 = func_0BC0(var4, var5);\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var temp7 = arg1 & temp6;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = arg2;\n        var temp9 = memory[0x40:0x60];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0dd6:0x0df6];\n        var temp11 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp10;\n        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [memory[0x00:0x20], stack[-7] & 0x02 ** 0xa0 - 0x01, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function func_0D00(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= arg1) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0D17(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = 0x0d53;\n        var var4 = arg1;\n        var2 = func_0D00(var3, var4);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        memory[0x00:0x20] = arg0 & temp0;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x0d82;\n        var4 = arg1;\n        var2 = func_0BC0(var3, var4);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = arg1;\n        var temp4 = memory[0x40:0x60];\n        var temp5 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0dd6:0x0df6];\n        var temp6 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp5;\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [memory[0x00:0x20], msg.sender, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00EE:\n            var var0 = 0x00fd;\n            var var1 = 0x00fa;\n            deposit();\n            func_00FA();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x010f;\n                var var2 = name();\n            \n            label_010F:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var2;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var3 = temp0;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp1:temp1 + 0x20];\n                var var6 = temp1 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n            \n                if (!var8) {\n                label_0155:\n                    var temp2 = var7;\n                    var5 = temp2 + var5;\n                    var6 = temp2 & 0x1f;\n                \n                    if (!var6) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var5 - temp3];\n                    } else {\n                        var temp4 = var6;\n                        var temp5 = var5 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_0135:\n                    memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n                \n                    if (var8 <= 0x20) { goto label_0155; }\n                \n                    var8 = var8 + ~0x1f;\n                    var9 = var9 + 0x20;\n                    var10 = var10 + 0x20;\n                    goto label_0135;\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ae;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_01AE:\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = !!var1;\n                var temp8 = memory[0x40:0x60];\n                return memory[temp8:temp8 + temp7 - temp8 + 0x20];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01d2;\n                var2 = totalSupply();\n            \n            label_01D2:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + temp9 - temp10 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ae;\n                var temp11 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp11 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp11;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_01AE;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00fd;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0242;\n                var2 = decimals();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var2 & 0xff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x5a3b7e42) {\n                // Dispatch table entry for standard()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x010f;\n                var2 = standard();\n                goto label_010F;\n            } else if (var0 == 0x5e35359e) {\n                // Dispatch table entry for withdrawTokens(address,address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00fd;\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp14 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp14;\n                var4 = msg.data[0x44:0x64];\n                withdrawTokens(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01d2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balanceOf(var2);\n                goto label_01D2;\n            } else if (var0 == 0x79ba5097) {\n                // Dispatch table entry for acceptOwnership()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00fd;\n                acceptOwnership();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x035f;\n                var2 = owner();\n            \n            label_035F:\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + temp15 - temp16 + 0x20];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x010f;\n                var2 = symbol();\n                goto label_010F;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ae;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_01AE;\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x00fd;\n                deposit();\n                stop();\n            } else if (var0 == 0xd4ee1d90) {\n                // Dispatch table entry for newOwner()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x035f;\n                var2 = newOwner();\n                goto label_035F;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01d2;\n                var temp17 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp17 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp17;\n                var2 = allowance(var2, var3);\n                goto label_01D2;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00fd;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_00EE; }\n        }\n    }\n    \n    function func_00FA() {}\n    \n    function deposit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var var0 = 0x04e9;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0BC0(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x050f;\n        var1 = storage[0x04];\n        var2 = msg.value;\n        var0 = func_0BC0(var1, var2);\n        storage[0x04] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc3]);\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0dd6:0x0df6];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = msg.value;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], address(this), msg.sender]);\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0606:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05FD; }\n        \n        label_05E9:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05E9; }\n        \n        label_05FD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0606;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_0606;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = !arg1;\n    \n        if (!var2) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_0663; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var2) {\n        label_0663:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x06;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x04]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0702;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var1 = func_0BDA(var2, var3, var4);\n    \n        if (var1) { return 0x01; }\n        else { assert(); }\n    }\n    \n    function withdraw(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var var0 = 0x0738;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_0D00(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x04];\n        var0 = 0x075e;\n        var2 = arg0;\n        var0 = func_0D00(var1, var2);\n        storage[0x04] = var0;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg0;\n        var temp2;\n        temp2, memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n    \n        if (!temp2) { assert(); }\n    \n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0dd6:0x0df6];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = arg0;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [memory[0x00:0x20], msg.sender, address(this)]);\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = temp5;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [0x9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd3453]);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function standard() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0606:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05FD; }\n        \n        label_05E9:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05E9; }\n        \n        label_05FD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0606;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0606;\n        }\n    }\n    \n    function withdrawTokens(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var0 = arg0;\n    \n        if (!(var0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg1;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n    \n        if (var2 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        memory[temp2:temp2 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = arg2;\n        var var5 = temp3 + 0x20;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp4;\n        temp4, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp4) { assert(); }\n    \n        if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { return; }\n        else { assert(); }\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function acceptOwnership() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x08] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[temp1:temp1 + 0x20] = temp2 & storage[0x07];\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = storage[0x08] & temp2;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + temp1 - temp3 + 0x40], [0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a]);\n        var temp4 = storage[0x08];\n        var temp5 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[0x07] = (temp4 & 0x02 ** 0xa0 - 0x01) | (temp5 & storage[0x07]);\n        storage[0x08] = temp5 & temp4;\n    }\n    \n    function owner() returns (var r0) { return storage[0x07] & 0x02 ** 0xa0 - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0606:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05FD; }\n        \n        label_05E9:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05E9; }\n        \n        label_05FD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0606;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_0606;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0b21;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_0D17(var2, var3);\n    \n        if (var1) { return 0x01; }\n        else { assert(); }\n    }\n    \n    function newOwner() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp1 == temp1 & arg0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x08] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x08] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0BC0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0BDA(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n    \n        if (!(var2 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var4 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = 0x0c3b;\n        var var5 = arg2;\n        var3 = func_0D00(var4, var5);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = arg0 & temp2;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x06;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x05;\n        var3 = 0x0c7c;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = arg2;\n        var3 = func_0D00(var4, var5);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp5;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = arg1 & temp5;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0cab;\n        var5 = arg2;\n        var3 = func_0BC0(var4, var5);\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var temp7 = arg1 & temp6;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = arg2;\n        var temp9 = memory[0x40:0x60];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0dd6:0x0df6];\n        var temp11 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp10;\n        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [memory[0x00:0x20], stack[-7] & 0x02 ** 0xa0 - 0x01, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function func_0D00(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= arg1) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0D17(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = 0x0d53;\n        var var4 = arg1;\n        var2 = func_0D00(var3, var4);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        memory[0x00:0x20] = arg0 & temp0;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x0d82;\n        var4 = arg1;\n        var2 = func_0BC0(var3, var4);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = arg1;\n        var temp4 = memory[0x40:0x60];\n        var temp5 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0dd6:0x0df6];\n        var temp6 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp5;\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [memory[0x00:0x20], msg.sender, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00EE:\n            var var0 = 0x00fd;\n            var var1 = 0x00fa;\n            deposit();\n            func_00FA();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x010f;\n                var var2 = name();\n            \n            label_010F:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var2;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var3 = temp0;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp1:temp1 + 0x20];\n                var var6 = temp1 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n            \n                if (!var8) {\n                label_0155:\n                    var temp2 = var7;\n                    var5 = temp2 + var5;\n                    var6 = temp2 & 0x1f;\n                \n                    if (!var6) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var5 - temp3];\n                    } else {\n                        var temp4 = var6;\n                        var temp5 = var5 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_0135:\n                    memory[var9:var9 + 0x20] = memory[var10:var10 + 0x20];\n                \n                    if (var8 <= 0x20) { goto label_0155; }\n                \n                    var8 = var8 + ~0x1f;\n                    var9 = var9 + 0x20;\n                    var10 = var10 + 0x20;\n                    goto label_0135;\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ae;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_01AE:\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = !!var1;\n                var temp8 = memory[0x40:0x60];\n                return memory[temp8:temp8 + temp7 - temp8 + 0x20];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01d2;\n                var2 = totalSupply();\n            \n            label_01D2:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + temp9 - temp10 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ae;\n                var temp11 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp11 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp11;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_01AE;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00fd;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0242;\n                var2 = decimals();\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = var2 & 0xff;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n            } else if (var0 == 0x5a3b7e42) {\n                // Dispatch table entry for standard()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x010f;\n                var2 = standard();\n                goto label_010F;\n            } else if (var0 == 0x5e35359e) {\n                // Dispatch table entry for withdrawTokens(address,address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00fd;\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp14 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp14;\n                var4 = msg.data[0x44:0x64];\n                withdrawTokens(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01d2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balanceOf(var2);\n                goto label_01D2;\n            } else if (var0 == 0x79ba5097) {\n                // Dispatch table entry for acceptOwnership()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00fd;\n                acceptOwnership();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x035f;\n                var2 = owner();\n            \n            label_035F:\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + temp15 - temp16 + 0x20];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x010f;\n                var2 = symbol();\n                goto label_010F;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01ae;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_01AE;\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x00fd;\n                deposit();\n                stop();\n            } else if (var0 == 0xd4ee1d90) {\n                // Dispatch table entry for newOwner()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x035f;\n                var2 = newOwner();\n                goto label_035F;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x01d2;\n                var temp17 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp17 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp17;\n                var2 = allowance(var2, var3);\n                goto label_01D2;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x00fd;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_00EE; }\n        }\n    }\n    \n    function func_00FA() {}\n    \n    function deposit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var var0 = 0x04e9;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0BC0(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x050f;\n        var1 = storage[0x04];\n        var2 = msg.value;\n        var0 = func_0BC0(var1, var2);\n        storage[0x04] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc3]);\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0dd6:0x0df6];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = msg.value;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], address(this), msg.sender]);\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0606:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05FD; }\n        \n        label_05E9:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05E9; }\n        \n        label_05FD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0606;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_0606;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = !arg1;\n    \n        if (!var2) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_0663; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var2) {\n        label_0663:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x06;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x04]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0702;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var1 = func_0BDA(var2, var3, var4);\n    \n        if (var1) { return 0x01; }\n        else { assert(); }\n    }\n    \n    function withdraw(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var var0 = 0x0738;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_0D00(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x04];\n        var0 = 0x075e;\n        var2 = arg0;\n        var0 = func_0D00(var1, var2);\n        storage[0x04] = var0;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg0;\n        var temp2;\n        temp2, memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n    \n        if (!temp2) { assert(); }\n    \n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0dd6:0x0df6];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = arg0;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [memory[0x00:0x20], msg.sender, address(this)]);\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = temp5;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [0x9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd3453]);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function standard() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0606:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05FD; }\n        \n        label_05E9:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05E9; }\n        \n        label_05FD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0606;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0606;\n        }\n    }\n    \n    function withdrawTokens(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var0 = arg0;\n    \n        if (!(var0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg1;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n    \n        if (var2 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        memory[temp2:temp2 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = arg2;\n        var var5 = temp3 + 0x20;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { assert(); }\n    \n        var temp4;\n        temp4, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp4) { assert(); }\n    \n        if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { return; }\n        else { assert(); }\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function acceptOwnership() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x08] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = memory[0x40:0x60];\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[temp1:temp1 + 0x20] = temp2 & storage[0x07];\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = storage[0x08] & temp2;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + temp1 - temp3 + 0x40], [0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a]);\n        var temp4 = storage[0x08];\n        var temp5 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[0x07] = (temp4 & 0x02 ** 0xa0 - 0x01) | (temp5 & storage[0x07]);\n        storage[0x08] = temp5 & temp4;\n    }\n    \n    function owner() returns (var r0) { return storage[0x07] & 0x02 ** 0xa0 - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0606:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05FD; }\n        \n        label_05E9:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05E9; }\n        \n        label_05FD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0606;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_0606;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0b21;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_0D17(var2, var3);\n    \n        if (var1) { return 0x01; }\n        else { assert(); }\n    }\n    \n    function newOwner() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp1 == temp1 & arg0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x08] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x08] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0BC0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0BDA(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n    \n        if (!(var2 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var4 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = 0x0c3b;\n        var var5 = arg2;\n        var3 = func_0D00(var4, var5);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = arg0 & temp2;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x06;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x05;\n        var3 = 0x0c7c;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = arg2;\n        var3 = func_0D00(var4, var5);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp5;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = arg1 & temp5;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0cab;\n        var5 = arg2;\n        var3 = func_0BC0(var4, var5);\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var temp7 = arg1 & temp6;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = arg2;\n        var temp9 = memory[0x40:0x60];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0dd6:0x0df6];\n        var temp11 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp10;\n        log(memory[temp9:temp9 + temp8 - temp9 + 0x20], [memory[0x00:0x20], stack[-7] & 0x02 ** 0xa0 - 0x01, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function func_0D00(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= arg1) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0D17(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x05;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = 0x0d53;\n        var var4 = arg1;\n        var2 = func_0D00(var3, var4);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        memory[0x00:0x20] = arg0 & temp0;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x0d82;\n        var4 = arg1;\n        var2 = func_0BC0(var3, var4);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = arg1;\n        var temp4 = memory[0x40:0x60];\n        var temp5 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0dd6:0x0df6];\n        var temp6 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp5;\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [memory[0x00:0x20], msg.sender, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 41.22847533226013,
	"usage": {
		"completion_tokens": 531,
		"prompt_tokens": 8922,
		"total_tokens": 9453
	}
}