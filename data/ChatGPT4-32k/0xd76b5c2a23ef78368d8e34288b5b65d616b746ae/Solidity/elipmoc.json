{
	"address": "0xd76b5c2a23ef78368d8e34288b5b65d616b746ae",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity Smart Contract code corresponding to the decompiled code is as follows:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\ncontract MyContract {\n    uint256[] private _standard;\n    uint256[] private _name;\n    uint256[] private _symbol;\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint8 private _decimals;\n    address private _owner;\n    address private _newOwner;\n\n    event Issuance(uint256 amount);\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n    event Destruction(uint256 amount);\n    event OwnerUpdate(address indexed oldOwner, address indexed newOwner);\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    function approve(address spender, uint256 tokens) public returns (bool success) {\n        require(tokens <= _balanceOf[msg.sender], \"Not enough balance\");\n        _allowance[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\n        require(tokens <= _balanceOf[from], \"Not enough balance\");\n        require(tokens <= _allowance[from][msg.sender], \"Not enough allowance\");\n\n        _balanceOf[from] -= tokens;\n        _balanceOf[to] += tokens;\n        _allowance[from][msg.sender] -= tokens;\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\n        return _balanceOf[tokenOwner];\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == _newOwner, \"Only new owner can accept ownership\");\n        emit OwnerUpdate(_owner, _newOwner);\n        _owner = _newOwner;\n        _newOwner = address(0);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function transfer(address to, uint256 tokens) public returns (bool success) {\n        require(tokens <= _balanceOf[msg.sender], \"Not enough balance\");\n\n        _balanceOf[msg.sender] -= tokens;\n        _balanceOf[to] += tokens;\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining) {\n        return _allowance[tokenOwner][spender];\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner, \"Only owner can transfer ownership\");\n        _newOwner = newOwner;\n    }\n}\n```\n\nPlease note that this is a simplified version of the contract code as per the decompiled code provided. There are some missing methods and variables, such as '_standard', '_name', '_symbol', 'withdraw', 'standard', 'symbol', 'name', 'deposit', 'newOwner', which could not be interpreted correctly from the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701455472,
	"id": "chatcmpl-8R2a8pusCUwPXH3lBuSkdtNdjTjG6",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 20:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _standard; // STORAGE[0x0]\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\naddress _owner; // STORAGE[0x7] bytes 0 to 19\naddress _newOwner; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nIssuance(uint256);\nApproval(address, address, uint256);\nDestruction(uint256);\nOwnerUpdate(address, address);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    require(varg0);\n    v0 = v1 = !varg1;\n    if (varg1) {\n        v0 = !_allowance[varg0];\n    }\n    require(v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public payable { \n    assert(!msg.value);\n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    require(varg1 != address(this));\n    require(varg0);\n    require(varg1);\n    v0 = _SafeSub(varg2, _allowance[msg.sender]);\n    _allowance[msg.sender] = v0;\n    v1 = _SafeSub(varg2, _allowance[msg.sender]);\n    _balanceOf[varg0] = v1;\n    v2 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v2;\n    emit Transfer(varg0, varg1, varg2);\n    assert(1);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public payable { \n    assert(!msg.value);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _totalSupply);\n    _totalSupply = v1;\n    v2 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    assert(v2);\n    emit Transfer(msg.sender, address(this), varg0);\n    emit Destruction(varg0);\n}\n\nfunction decimals() public payable { \n    assert(!msg.value);\n    return _decimals;\n}\n\nfunction standard() public payable { \n    assert(!msg.value);\n    v0 = new bytes[]((_standard.length & ~0 + (!(_standard.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_standard.length & ~0 + (!(_standard.length & 0x1) << 8)) >> 1) {\n        if (31 < (_standard.length & ~0 + (!(_standard.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_standard.length & ~0 + (!(_standard.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _standard.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = v0.length;\n    v7 = v8 = v4.data;\n    v9 = v0.data;\n    if (v6) {\n        while (1) {\n            MEM[v7] = MEM[v9];\n            if (v5 <= 32) {\n                break;\n            }\n            v5 = v5 + ~31;\n            v7 += 32;\n            v9 += 32;\n        }\n    }\n    v10 = v11 = v6 + v8;\n    if (0x1f & v6) {\n        MEM[v11 - (0x1f & v6)] = ~(256 ** (32 - (0x1f & v6)) - 1) & MEM[v11 - (0x1f & v6)];\n    }\n    return v4;\n}\n\nfunction withdrawTokens(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    assert(_owner == msg.sender);\n    require(varg0);\n    require(varg1);\n    require(varg1 != address(this));\n    MEM[32 + MEM[64]] = 0;\n    assert(varg0.code.size);\n    v0, v1 = varg0.transfer(varg1, varg2).gas(msg.gas - 710);\n    assert(v0);\n    assert(v1);\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balanceOf[varg0];\n}\n\nfunction acceptOwnership() public payable { \n    assert(!msg.value);\n    require(_newOwner == msg.sender);\n    emit OwnerUpdate(_owner, _newOwner);\n    _owner = _newOwner;\n    _newOwner = 0;\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction symbol() public payable { \n    assert(!msg.value);\n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = v0.length;\n    v7 = v8 = v4.data;\n    v9 = v0.data;\n    if (v6) {\n        while (1) {\n            MEM[v7] = MEM[v9];\n            if (v5 <= 32) {\n                break;\n            }\n            v5 = v5 + ~31;\n            v7 += 32;\n            v9 += 32;\n        }\n    }\n    v10 = v11 = v6 + v8;\n    if (0x1f & v6) {\n        MEM[v11 - (0x1f & v6)] = ~(256 ** (32 - (0x1f & v6)) - 1) & MEM[v11 - (0x1f & v6)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    require(varg0 != address(this));\n    require(varg0);\n    v0 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v1;\n    emit Transfer(msg.sender, varg0, varg1);\n    assert(1);\n    return 1;\n}\n\nfunction deposit() public payable { \n    0x4c6();\n}\n\nfunction newOwner() public payable { \n    assert(!msg.value);\n    return _newOwner;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    assert(!msg.value);\n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public payable { \n    assert(!msg.value);\n    assert(_owner == msg.sender);\n    require(_owner != varg0);\n    _newOwner = varg0;\n}\n\nfunction 0x4c6() private { \n    v0 = _SafeAdd(msg.value, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(msg.value, _totalSupply);\n    _totalSupply = v1;\n    emit Issuance(msg.value);\n    emit Transfer(address(this), msg.sender, msg.value);\n    return ;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg1 >= varg0);\n    return varg1 - varg0;\n}\n\nfunction name() public payable { \n    assert(!msg.value);\n    v0 = new bytes[]((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = v0.length;\n    v7 = v8 = v4.data;\n    v9 = v0.data;\n    if (v6) {\n        while (1) {\n            MEM[v7] = MEM[v9];\n            if (v5 <= 32) {\n                break;\n            }\n            v5 = v5 + ~31;\n            v7 += 32;\n            v9 += 32;\n        }\n    }\n    v10 = v11 = v6 + v8;\n    if (0x1f & v6) {\n        MEM[v11 - (0x1f & v6)] = ~(256 ** (32 - (0x1f & v6)) - 1) & MEM[v11 - (0x1f & v6)];\n    }\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x5a3b7e42 == function_selector) {\n            standard();\n        } else if (0x5e35359e == function_selector) {\n            withdrawTokens(address,address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79ba5097 == function_selector) {\n            acceptOwnership();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        } else if (0xd4ee1d90 == function_selector) {\n            newOwner();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    0x4c6();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 20:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _standard; // STORAGE[0x0]\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\naddress _owner; // STORAGE[0x7] bytes 0 to 19\naddress _newOwner; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nIssuance(uint256);\nApproval(address, address, uint256);\nDestruction(uint256);\nOwnerUpdate(address, address);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    require(varg0);\n    v0 = v1 = !varg1;\n    if (varg1) {\n        v0 = !_allowance[varg0];\n    }\n    require(v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public payable { \n    assert(!msg.value);\n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    require(varg1 != address(this));\n    require(varg0);\n    require(varg1);\n    v0 = _SafeSub(varg2, _allowance[msg.sender]);\n    _allowance[msg.sender] = v0;\n    v1 = _SafeSub(varg2, _allowance[msg.sender]);\n    _balanceOf[varg0] = v1;\n    v2 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v2;\n    emit Transfer(varg0, varg1, varg2);\n    assert(1);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public payable { \n    assert(!msg.value);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _totalSupply);\n    _totalSupply = v1;\n    v2 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    assert(v2);\n    emit Transfer(msg.sender, address(this), varg0);\n    emit Destruction(varg0);\n}\n\nfunction decimals() public payable { \n    assert(!msg.value);\n    return _decimals;\n}\n\nfunction standard() public payable { \n    assert(!msg.value);\n    v0 = new bytes[]((_standard.length & ~0 + (!(_standard.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_standard.length & ~0 + (!(_standard.length & 0x1) << 8)) >> 1) {\n        if (31 < (_standard.length & ~0 + (!(_standard.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_standard.length & ~0 + (!(_standard.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _standard.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = v0.length;\n    v7 = v8 = v4.data;\n    v9 = v0.data;\n    if (v6) {\n        while (1) {\n            MEM[v7] = MEM[v9];\n            if (v5 <= 32) {\n                break;\n            }\n            v5 = v5 + ~31;\n            v7 += 32;\n            v9 += 32;\n        }\n    }\n    v10 = v11 = v6 + v8;\n    if (0x1f & v6) {\n        MEM[v11 - (0x1f & v6)] = ~(256 ** (32 - (0x1f & v6)) - 1) & MEM[v11 - (0x1f & v6)];\n    }\n    return v4;\n}\n\nfunction withdrawTokens(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    assert(_owner == msg.sender);\n    require(varg0);\n    require(varg1);\n    require(varg1 != address(this));\n    MEM[32 + MEM[64]] = 0;\n    assert(varg0.code.size);\n    v0, v1 = varg0.transfer(varg1, varg2).gas(msg.gas - 710);\n    assert(v0);\n    assert(v1);\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balanceOf[varg0];\n}\n\nfunction acceptOwnership() public payable { \n    assert(!msg.value);\n    require(_newOwner == msg.sender);\n    emit OwnerUpdate(_owner, _newOwner);\n    _owner = _newOwner;\n    _newOwner = 0;\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction symbol() public payable { \n    assert(!msg.value);\n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = v0.length;\n    v7 = v8 = v4.data;\n    v9 = v0.data;\n    if (v6) {\n        while (1) {\n            MEM[v7] = MEM[v9];\n            if (v5 <= 32) {\n                break;\n            }\n            v5 = v5 + ~31;\n            v7 += 32;\n            v9 += 32;\n        }\n    }\n    v10 = v11 = v6 + v8;\n    if (0x1f & v6) {\n        MEM[v11 - (0x1f & v6)] = ~(256 ** (32 - (0x1f & v6)) - 1) & MEM[v11 - (0x1f & v6)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    require(varg0 != address(this));\n    require(varg0);\n    v0 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v1;\n    emit Transfer(msg.sender, varg0, varg1);\n    assert(1);\n    return 1;\n}\n\nfunction deposit() public payable { \n    0x4c6();\n}\n\nfunction newOwner() public payable { \n    assert(!msg.value);\n    return _newOwner;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    assert(!msg.value);\n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public payable { \n    assert(!msg.value);\n    assert(_owner == msg.sender);\n    require(_owner != varg0);\n    _newOwner = varg0;\n}\n\nfunction 0x4c6() private { \n    v0 = _SafeAdd(msg.value, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(msg.value, _totalSupply);\n    _totalSupply = v1;\n    emit Issuance(msg.value);\n    emit Transfer(address(this), msg.sender, msg.value);\n    return ;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg1 >= varg0);\n    return varg1 - varg0;\n}\n\nfunction name() public payable { \n    assert(!msg.value);\n    v0 = new bytes[]((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = v0.length;\n    v7 = v8 = v4.data;\n    v9 = v0.data;\n    if (v6) {\n        while (1) {\n            MEM[v7] = MEM[v9];\n            if (v5 <= 32) {\n                break;\n            }\n            v5 = v5 + ~31;\n            v7 += 32;\n            v9 += 32;\n        }\n    }\n    v10 = v11 = v6 + v8;\n    if (0x1f & v6) {\n        MEM[v11 - (0x1f & v6)] = ~(256 ** (32 - (0x1f & v6)) - 1) & MEM[v11 - (0x1f & v6)];\n    }\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x5a3b7e42 == function_selector) {\n            standard();\n        } else if (0x5e35359e == function_selector) {\n            withdrawTokens(address,address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79ba5097 == function_selector) {\n            acceptOwnership();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        } else if (0xd4ee1d90 == function_selector) {\n            newOwner();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    0x4c6();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 20:15 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _standard; // STORAGE[0x0]\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\naddress _owner; // STORAGE[0x7] bytes 0 to 19\naddress _newOwner; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nIssuance(uint256);\nApproval(address, address, uint256);\nDestruction(uint256);\nOwnerUpdate(address, address);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    require(varg0);\n    v0 = v1 = !varg1;\n    if (varg1) {\n        v0 = !_allowance[varg0];\n    }\n    require(v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public payable { \n    assert(!msg.value);\n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    require(varg1 != address(this));\n    require(varg0);\n    require(varg1);\n    v0 = _SafeSub(varg2, _allowance[msg.sender]);\n    _allowance[msg.sender] = v0;\n    v1 = _SafeSub(varg2, _allowance[msg.sender]);\n    _balanceOf[varg0] = v1;\n    v2 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v2;\n    emit Transfer(varg0, varg1, varg2);\n    assert(1);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public payable { \n    assert(!msg.value);\n    v0 = _SafeSub(varg0, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeSub(varg0, _totalSupply);\n    _totalSupply = v1;\n    v2 = msg.sender.call().value(varg0).gas(2300 * !varg0);\n    assert(v2);\n    emit Transfer(msg.sender, address(this), varg0);\n    emit Destruction(varg0);\n}\n\nfunction decimals() public payable { \n    assert(!msg.value);\n    return _decimals;\n}\n\nfunction standard() public payable { \n    assert(!msg.value);\n    v0 = new bytes[]((_standard.length & ~0 + (!(_standard.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_standard.length & ~0 + (!(_standard.length & 0x1) << 8)) >> 1) {\n        if (31 < (_standard.length & ~0 + (!(_standard.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_standard.length & ~0 + (!(_standard.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _standard.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = v0.length;\n    v7 = v8 = v4.data;\n    v9 = v0.data;\n    if (v6) {\n        while (1) {\n            MEM[v7] = MEM[v9];\n            if (v5 <= 32) {\n                break;\n            }\n            v5 = v5 + ~31;\n            v7 += 32;\n            v9 += 32;\n        }\n    }\n    v10 = v11 = v6 + v8;\n    if (0x1f & v6) {\n        MEM[v11 - (0x1f & v6)] = ~(256 ** (32 - (0x1f & v6)) - 1) & MEM[v11 - (0x1f & v6)];\n    }\n    return v4;\n}\n\nfunction withdrawTokens(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    assert(_owner == msg.sender);\n    require(varg0);\n    require(varg1);\n    require(varg1 != address(this));\n    MEM[32 + MEM[64]] = 0;\n    assert(varg0.code.size);\n    v0, v1 = varg0.transfer(varg1, varg2).gas(msg.gas - 710);\n    assert(v0);\n    assert(v1);\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balanceOf[varg0];\n}\n\nfunction acceptOwnership() public payable { \n    assert(!msg.value);\n    require(_newOwner == msg.sender);\n    emit OwnerUpdate(_owner, _newOwner);\n    _owner = _newOwner;\n    _newOwner = 0;\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction symbol() public payable { \n    assert(!msg.value);\n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = v0.length;\n    v7 = v8 = v4.data;\n    v9 = v0.data;\n    if (v6) {\n        while (1) {\n            MEM[v7] = MEM[v9];\n            if (v5 <= 32) {\n                break;\n            }\n            v5 = v5 + ~31;\n            v7 += 32;\n            v9 += 32;\n        }\n    }\n    v10 = v11 = v6 + v8;\n    if (0x1f & v6) {\n        MEM[v11 - (0x1f & v6)] = ~(256 ** (32 - (0x1f & v6)) - 1) & MEM[v11 - (0x1f & v6)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    require(varg0 != address(this));\n    require(varg0);\n    v0 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v1;\n    emit Transfer(msg.sender, varg0, varg1);\n    assert(1);\n    return 1;\n}\n\nfunction deposit() public payable { \n    0x4c6();\n}\n\nfunction newOwner() public payable { \n    assert(!msg.value);\n    return _newOwner;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    assert(!msg.value);\n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public payable { \n    assert(!msg.value);\n    assert(_owner == msg.sender);\n    require(_owner != varg0);\n    _newOwner = varg0;\n}\n\nfunction 0x4c6() private { \n    v0 = _SafeAdd(msg.value, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v0;\n    v1 = _SafeAdd(msg.value, _totalSupply);\n    _totalSupply = v1;\n    emit Issuance(msg.value);\n    emit Transfer(address(this), msg.sender, msg.value);\n    return ;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg1 >= varg0);\n    return varg1 - varg0;\n}\n\nfunction name() public payable { \n    assert(!msg.value);\n    v0 = new bytes[]((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = v0.length;\n    v7 = v8 = v4.data;\n    v9 = v0.data;\n    if (v6) {\n        while (1) {\n            MEM[v7] = MEM[v9];\n            if (v5 <= 32) {\n                break;\n            }\n            v5 = v5 + ~31;\n            v7 += 32;\n            v9 += 32;\n        }\n    }\n    v10 = v11 = v6 + v8;\n    if (0x1f & v6) {\n        MEM[v11 - (0x1f & v6)] = ~(256 ** (32 - (0x1f & v6)) - 1) & MEM[v11 - (0x1f & v6)];\n    }\n    return v4;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x5a3b7e42 == function_selector) {\n            standard();\n        } else if (0x5e35359e == function_selector) {\n            withdrawTokens(address,address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79ba5097 == function_selector) {\n            acceptOwnership();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        } else if (0xd4ee1d90 == function_selector) {\n            newOwner();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    0x4c6();\n}\n.",
	"status": "1",
	"time_cost": 46.509796142578125,
	"usage": {
		"completion_tokens": 707,
		"prompt_tokens": 2915,
		"total_tokens": 3622
	}
}