{
	"address": "0x37304b0ab297f13f5520c523102797121182fb5b",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\ndef storage:\n  owner is address at storage 0\n  stor1 is mapping of uint8 at storage 1\n  balance is mapping of uint256 at storage 2\n  matchInfo is mapping of struct at storage 3\n  filledAmount is mapping of uint256 at storage 4\n  stor99 is mapping of uint256 at storage 99\n\ndef isAdmin(address admin): # not payable\n  return bool(stor1[address(admin)])\n\ndef getMatchInfo(uint256 matchId): # not payable\n  return uint64(matchInfo[matchId].field_256), bool(uint8(matchInfo[matchId].field_320)), uint8(matchInfo[matchId].field_328)\n\ndef getOwner(): # not payable\n  return owner\n\ndef getFilledAmount(uint256 orderHash): # not payable\n  return filledAmount[orderHash]\n\ndef getPosition(uint256 matchId, address addr): # not payable\n  return matchInfo[matchId][address(addr)].field_0\n\ndef getBalance(address _address): # not payable\n  return balance[address(_address)]\n\n#\n#  Regular functions\n#\n\ndef _fallback(?) payable: # default function\n  revert\n\ndef changeOwner(address _newOwner): # not payable\n  require owner == caller\n  owner = _newOwner\n\ndef addAdmin(address account): # not payable\n  require owner == caller\n  stor1[address(account)] = 1\n\ndef removeAdmin(address account): # not payable\n  require owner == caller\n  stor1[address(account)] = 0\n\ndef deposit() payable: \n  if call.value > 0:\n      require call.value + balance[caller] >= balance[caller]\n      require call.value + balance[caller] >= call.value\n      balance[caller] += call.value\n      log LogDeposit(address account=caller)\n      log LogBalanceChange(\n            address account=balance[caller],\n            uint256 oldAmount=call.value + balance[caller],\n            uint256 newAmount=caller)\n\ndef cancelOrder(uint256[3] order, bytes32 r, bytes32 s, uint8 v): # not payable\n  signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, call.data[4 len 96])), cd[164] << 248, v, cd[132]) # precompiled\n  require erecover.result\n  require address(signer) == address(call.data[80 len 20])\n  require address(call.data[68]) == caller\n  if block.timestamp < call.data[68 len 5]:\n      filledAmount[this.address][call.data[4 len 96]] = call.data[36]\n      log LogOrderCancel(\n            address account=sha3(this.address, call.data[4 len 96]),\n            uint256 matchId=caller,\n            uint256 orderHash=call.data[4])\n\ndef recoverFunds(uint256 matchId): # not payable\n  if not uint8(matchInfo[matchId].field_320):\n      if uint64(matchInfo[matchId].field_256):\n          if block.timestamp > (168 * 24 * 3600 * uint8(matchId)) + uint64(matchInfo[matchId].field_256):\n              require uint8(matchId) <= 100\n              uint8(matchInfo[matchId].field_320) = 1\n              uint8(matchInfo[matchId].field_328) = uint8(matchId)\n              Mask(176, 0, matchInfo[matchId].field_336) = 0\n              matchInfo[matchId].field_512 % 1 = 0\n              log LogFinalizeMatch(\n                    uint256 matchId=uint8(matchId),\n                    uint8 finalPrice=matchId)\n\ndef withdraw(uint256 amount): # not payable\n  if balance[caller] < amount:\n      if balance[caller] > 0:\n          balance[caller] = 0\n          log LogWithdraw(address token=caller)\n          log LogBalanceChange(\n                address account=balance[caller],\n                uint256 oldAmount=0,\n                uint256 newAmount=caller)\n          call caller with:\n             value balance[caller] wei\n               gas 2300 * is_zero(value) wei\n          require ext_call.success\n  else:\n      if amount > 0:\n          balance[caller] -= amount\n          log LogWithdraw(address token=caller)\n          log LogBalanceChange(\n                address account=balance[caller],\n                uint256 oldAmount=balance[caller] - amount,\n                uint256 newAmount=caller)\n          call caller with:\n             value amount wei\n               gas 2300 * is_zero(value) wei\n          require ext_call.success\n\ndef checkMatchBatch(address myAddr, uint256[16] matchIds): # not payable\n  mem[96] = 0\n  mem[128 len 480] = 0\n  mem[608] = 0\n  mem[640 len 480] = 0\n  mem[64] = 1632\n  mem[1120] = 0\n  mem[1152 len 480] = 0\n  s = 0\n  idx = 0\n  while idx < 16:\n      if not cd[((32 * idx) + 36)]:\n          idx = 0\n          while idx < 512:\n              mem[idx + 1632] = mem[idx + 96]\n              idx = idx + 32\n              continue \n          idx = 0\n          while idx < 512:\n              mem[idx + 2144] = mem[idx + 608]\n              idx = idx + 32\n              continue \n          idx = 0\n          while idx < 512:\n              mem[idx + 2656] = mem[idx + 1120]\n              idx = idx + 32\n              continue \n          return memory\n            from 1632\n             len 1536\n      require idx < 16\n      mem[0] = myAddr\n      mem[32] = sha3(cd[((32 * idx) + 36)], 3)\n      mem[(32 * idx) + 96] = matchInfo[cd[((32 * idx) + 36)]][address(myAddr)].field_0\n      mem[(32 * idx) + 608] = bool(uint8(matchInfo[cd[((32 * idx) + 36)]].field_320))\n      mem[(32 * idx) + 1120] = uint8(matchInfo[cd[((32 * idx) + 36)]].field_328)\n      s = sha3(cd[((32 * idx) + 36)], 3)\n      idx = idx + 1\n      continue \n  return mem[96 len 512], mem[608 len 512], mem[1120 len 512]\n\ndef claim(uint256 matchId, uint8 finalPrice, bytes32 r, bytes32 s, uint8 v): # not payable\n  if uint8(matchInfo[matchId].field_320):\n      require uint8(matchInfo[matchId].field_328) == finalPrice\n  else:\n      signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, matchId, finalPrice)), v << 248, r, s) # precompiled\n      require erecover.result\n      require stor1[address(signer)]\n      require finalPrice <= 100\n      uint8(matchInfo[matchId].field_320) = 1\n      uint8(matchInfo[matchId].field_328) = finalPrice\n      Mask(176, 0, matchInfo[matchId].field_336) = 0\n      matchInfo[matchId].field_512 % 1 = 0\n      log LogFinalizeMatch(\n            uint256 matchId=finalPrice,\n            uint8 finalPrice=matchId)\n  if matchInfo[matchId][caller].field_0 >\u2032 0:\n      require matchInfo[matchId][caller].field_0 >=\u2032 0\n      if matchInfo[matchId][caller].field_0:\n          require matchInfo[matchId][caller].field_0\n          require finalPrice * matchInfo[matchId][caller].field_0 / matchInfo[matchId][caller].field_0 == finalPrice\n      require finalPrice * matchInfo[matchId][caller].field_0 / 100 >=\u2032 0\n      matchInfo[matchId][caller].field_0 = 0\n      require (finalPrice * matchInfo[matchId][caller].field_0 / 100) + balance[caller] >= balance[caller]\n      require (finalPrice * matchInfo[matchId][caller].field_0 / 100) + balance[caller] >= finalPrice * matchInfo[matchId][caller].field_0 / 100\n      balance[caller] += finalPrice * matchInfo[matchId][caller].field_0 / 100\n      log LogBalanceChange(\n            address account=balance[caller],\n            uint256 oldAmount=(finalPrice * matchInfo[matchId][caller].field_0 / 100) + balance[caller],\n            uint256 newAmount=caller)\n      log LogClaim(\n            address account=(finalPrice * matchInfo[matchId][caller].field_0 / 100),\n            uint256 matchId=caller,\n            uint256 amount=matchId)\n  else:\n      if matchInfo[matchId][caller].field_0 <\u2032 0:\n          require -matchInfo[matchId][caller].field_0 >=\u2032 0\n          if -matchInfo[matchId][caller].field_0:\n              require -matchInfo[matchId][caller].field_0\n              require -1 * uint8(-finalPrice + 100) * matchInfo[matchId][caller].field_0 / -matchInfo[matchId][caller].field_0 == uint8(-finalPrice + 100)\n          require -1 * uint8(-finalPrice + 100) * matchInfo[matchId][caller].field_0 / 100 >=\u2032 0\n          matchInfo[matchId][caller].field_0 = 0\n          require (-1 * uint8(-finalPrice + 100) * matchInfo[matchId][caller].field_0 / 100) + balance[caller] >= balance[caller]\n          require (-1 * uint8(-finalPrice + 100) * matchInfo[matchId][caller].field_0 / 100) + balance[caller] >= -1 * uint8(-finalPrice + 100) * matchInfo[matchId][caller].field_0 / 100\n          balance[caller] += -1 * uint8(-finalPrice + 100) * matchInfo[matchId][caller].field_0 / 100\n          log LogBalanceChange(\n                address account=balance[caller],\n                uint256 oldAmount=(-1 * uint8(-finalPrice + 100) * matchInfo[matchId][caller].field_0 / 100) + balance[caller],\n                uint256 newAmount=caller)\n          log LogClaim(\n                address account=(-1 * uint8(-finalPrice + 100) * matchInfo[matchId][caller].field_0 / 100),\n                uint256 matchId=caller,\n                uint256 amount=matchId)\n\ndef checkOrderBatch(uint256[48] input): # not payable\n  mem[96] = 0\n  mem[128 len 480] = 0\n  mem[608] = 0\n  mem[640 len 480] = 0\n  mem[1120] = 0\n  mem[1152] = 0\n  mem[1184] = 0\n  mem[64] = 1440\n  mem[1216] = 0\n  mem[1248] = 0\n  mem[1280] = 0\n  mem[1312] = 0\n  mem[1344] = 0\n  mem[1376] = 0\n  mem[1408] = 0\n  s = 1216\n  idx = 0\n  while idx < 16:\n      require 3 * idx < 48\n      mem[1120] = cd[((32 * 3 * idx) + 4)]\n      require (3 * idx) + 1 < 48\n      mem[1152] = cd[((32 * (3 * idx) + 1) + 4)]\n      require (3 * idx) + 2 < 48\n      mem[1184] = cd[((32 * (3 * idx) + 2) + 4)]\n      if not cd[((32 * 3 * idx) + 4)]:\n          _80 = mem[64]\n          idx = 0\n          while idx < 512:\n              mem[idx + _80] = mem[idx + 96]\n              idx = idx + 32\n              continue \n          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n      _79 = mem[64]\n      mem[64] = mem[64] + 224\n      mem[_79] = 0\n      mem[_79 + 32] = 0\n      mem[_79 + 64] = 0\n      mem[_79 + 96] = 0\n      mem[_79 + 128] = 0\n      mem[_79 + 160] = 0\n      mem[_79 + 192] = 0\n      _81 = mem[64]\n      mem[mem[64]] = address(this.address)\n      s = 0\n      while s < 96:\n          mem[s + _81 + 20] = mem[s + 1120]\n          s = s + 32\n          continue \n      mem[_79] = sha3(mem[mem[64] len _81 + -mem[64] + 116])\n      mem[_79 + 32] = mem[1120]\n      mem[_79 + 64] = mem[1152]\n      _89 = mem[1184]\n      mem[_79 + 96] = mem[1184 len 5]\n      mem[_79 + 128] = address(_89)\n      mem[_79 + 160] = Mask(8, 168, _89) >> 168\n      mem[_79 + 192] = Mask(8, 160, _89) >> 160\n      if mem[_79 + 64] > unknown10000000():\n          require idx < 16\n          mem[(32 * idx) + 96] = 3\n          mem[(32 * idx) + 608] = 0\n          s = _79\n          idx = idx + 1\n          continue \n      if not Mask(8, 168, _89):\n          require idx < 16\n          mem[(32 * idx) + 96] = 3\n          mem[(32 * idx) + 608] = 0\n          s = _79\n          idx = idx + 1\n          continue \n      if Mask(8, 168, _89) >> 168 > 99:\n          require idx < 16\n          mem[(32 * idx) + 96] = 3\n          mem[(32 * idx) + 608] = 0\n          s = _79\n          idx = idx + 1\n          continue \n      if Mask(8, 160, _89) >> 160 > 1:\n          require idx < 16\n          mem[(32 * idx) + 96] = 3\n          mem[(32 * idx) + 608] = 0\n          s = _79\n          idx = idx + 1\n          continue \n      mem[0] = mem[_79 + 32]\n      mem[32] = 3\n      _99 = sha3(mem[0], 3)\n      if uint8(matchInfo[mem[0]].field_320):\n          require idx < 16\n          mem[(32 * idx) + 96] = 1\n          mem[(32 * idx) + 608] = 0\n          s = _79\n          idx = idx + 1\n          continue \n      if Mask(8, 160, _89) >> 160:\n          _101 = mem[_79 + 64]\n          mem[0] = mem[_79]\n          _103 = sha3(mem[0], 4)\n          require filledAmount[mem[0]] <= _101\n          if not _101 - filledAmount[mem[0]]:\n              mem[0] = address(_89)\n              mem[32] = _99\n              if stor[_99][address(_89)] <\u2032 0:\n                  require -stor[_99][address(_89)] >=\u2032 0\n                  if not -stor[_99][address(_89)]:\n                      if _101 - stor[_103] < (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                          if not _101 - stor[_103]:\n                              if Mask(8, 168, _89) >> 168:\n                                  if not (100 * _101) - (100 * stor[_103]):\n                                      require -(Mask(8, 168, _89) >> 168) + 100\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if (100 * _101) - (100 * stor[_103]):\n                                      if (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / (100 * _101) - (100 * stor[_103]) == Mask(8, 168, _89) >> 168:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if _101 - stor[_103]:\n                                  if (100 * _101) - (100 * stor[_103]) - (_101 * Mask(8, 168, _89) >> 168) + (stor[_103] * Mask(8, 168, _89) >> 168) / _101 - stor[_103] == -(Mask(8, 168, _89) >> 168) + 100:\n                                      if Mask(8, 168, _89) >> 168:\n                                          if not (100 * _101) - (100 * stor[_103]):\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          if (100 * _101) - (100 * stor[_103]):\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if not (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                              if Mask(8, 168, _89) >> 168:\n                                  if not (100 * _101) - (100 * stor[_103]):\n                                      require -(Mask(8, 168, _89) >> 168) + 100\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  if (100 * _101) - (100 * stor[_103]):\n                                      if (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / (100 * _101) - (100 * stor[_103]) == Mask(8, 168, _89) >> 168:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          else:\n                              if (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                                  if (100 * -1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + (100 * balance[address(_89)]) - (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100 * Mask(8, 168, _89) >> 168) - (balance[address(_89)] * Mask(8, 168, _89) >> 168) / (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)] == -(Mask(8, 168, _89) >> 168) + 100:\n                                      if Mask(8, 168, _89) >> 168:\n                                          if not (100 * _101) - (100 * stor[_103]):\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          if (100 * _101) - (100 * stor[_103]):\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      revert\n                  require -stor[_99][address(_89)]\n                  require -1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / -stor[_99][address(_89)] == Mask(8, 168, _89) >> 168\n                  if _101 - stor[_103] < (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                      if not _101 - stor[_103]:\n                          require Mask(8, 168, _89) >> 168\n                          if not (100 * _101) - (100 * stor[_103]):\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require (100 * _101) - (100 * stor[_103])\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _101 - stor[_103]\n                      require (100 * _101) - (100 * stor[_103]) - (_101 * Mask(8, 168, _89) >> 168) + (stor[_103] * Mask(8, 168, _89) >> 168) / _101 - stor[_103] == -(Mask(8, 168, _89) >> 168) + 100\n                  else:\n                      if not (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                          require Mask(8, 168, _89) >> 168\n                          if not (100 * _101) - (100 * stor[_103]):\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require (100 * _101) - (100 * stor[_103])\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)]\n                      require (100 * -1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + (100 * balance[address(_89)]) - (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100 * Mask(8, 168, _89) >> 168) - (balance[address(_89)] * Mask(8, 168, _89) >> 168) / (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)] == -(Mask(8, 168, _89) >> 168) + 100\n                  require Mask(8, 168, _89) >> 168\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              if _101 - stor[_103] < balance[address(_89)]:\n                  if not _101 - stor[_103]:\n                      require Mask(8, 168, _89) >> 168\n                      if (100 * _101) - (100 * stor[_103]):\n                          require (100 * _101) - (100 * stor[_103])\n                          require (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / (100 * _101) - (100 * stor[_103]) == Mask(8, 168, _89) >> 168\n                      require -(Mask(8, 168, _89) >> 168) + 100\n                      require idx < 16\n                      mem[(32 * idx) + 96] = 0\n                      if _101 - stor[_103] + ((100 * _101) - (100 * stor[_103]) - (_101 * Mask(8, 168, _89) >> 168) + (stor[_103] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168) <= (100 * _101) - (100 * stor[_103]) + ((100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100):\n                          mem[(32 * idx) + 608] = _101 - stor[_103]\n                      else:\n                          mem[(32 * idx) + 608] = (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100\n                      s = _79\n                      idx = idx + 1\n                      continue \n                  if _101 - stor[_103]:\n                      if (100 * _101) - (100 * stor[_103]) - (_101 * Mask(8, 168, _89) >> 168) + (stor[_103] * Mask(8, 168, _89) >> 168) / _101 - stor[_103] == -(Mask(8, 168, _89) >> 168) + 100:\n                          if Mask(8, 168, _89) >> 168:\n                              if not (100 * _101) - (100 * stor[_103]):\n                                  require -(Mask(8, 168, _89) >> 168) + 100\n                                  require idx < 16\n                                  mem[(32 * idx) + 96] = 0\n                                  if _101 - stor[_103] + ((100 * _101) - (100 * stor[_103]) - (_101 * Mask(8, 168, _89) >> 168) + (stor[_103] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168) <= (100 * _101) - (100 * stor[_103]) + ((100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100):\n                                      mem[(32 * idx) + 608] = _101 - stor[_103]\n                                  else:\n                                      mem[(32 * idx) + 608] = (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100\n                                  s = _79\n                                  idx = idx + 1\n                                  continue \n                              if (100 * _101) - (100 * stor[_103]):\n                                  if (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / (100 * _101) - (100 * stor[_103]) == Mask(8, 168, _89) >> 168:\n                                      if -(Mask(8, 168, _89) >> 168) + 100:\n                                          if idx < 16:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              else:\n                  if not balance[address(_89)]:\n                      require Mask(8, 168, _89) >> 168\n                      if (100 * _101) - (100 * stor[_103]):\n                          require (100 * _101) - (100 * stor[_103])\n                          require (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / (100 * _101) - (100 * stor[_103]) == Mask(8, 168, _89) >> 168\n                      require -(Mask(8, 168, _89) >> 168) + 100\n                      require idx < 16\n                      mem[(32 * idx) + 96] = 0\n                      if balance[address(_89)] + ((100 * balance[address(_89)]) - (Mask(8, 168, _89) >> 168 * balance[address(_89)]) / Mask(8, 168, _89) >> 168) <= (100 * _101) - (100 * stor[_103]) + ((100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100):\n                          mem[(32 * idx) + 608] = balance[address(_89)]\n                      else:\n                          mem[(32 * idx) + 608] = (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100\n                      s = _79\n                      idx = idx + 1\n                      continue \n                  if balance[address(_89)]:\n                      if (100 * balance[address(_89)]) - (Mask(8, 168, _89) >> 168 * balance[address(_89)]) / balance[address(_89)] == -(Mask(8, 168, _89) >> 168) + 100:\n                          if Mask(8, 168, _89) >> 168:\n                              if not (100 * _101) - (100 * stor[_103]):\n                                  require -(Mask(8, 168, _89) >> 168) + 100\n                                  require idx < 16\n                                  mem[(32 * idx) + 96] = 0\n                                  if balance[address(_89)] + ((100 * balance[address(_89)]) - (Mask(8, 168, _89) >> 168 * balance[address(_89)]) / Mask(8, 168, _89) >> 168) <= (100 * _101) - (100 * stor[_103]) + ((100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100):\n                                      mem[(32 * idx) + 608] = balance[address(_89)]\n                                  else:\n                                      mem[(32 * idx) + 608] = (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100\n                                  s = _79\n                                  idx = idx + 1\n                                  continue \n                              if (100 * _101) - (100 * stor[_103]):\n                                  if (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / (100 * _101) - (100 * stor[_103]) == Mask(8, 168, _89) >> 168:\n                                      if -(Mask(8, 168, _89) >> 168) + 100:\n                                          if idx < 16:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              revert\n          require _101 - filledAmount[mem[0]]\n          require (100 * _101) - (100 * filledAmount[mem[0]]) / _101 - filledAmount[mem[0]] == 100\n          mem[0] = address(_89)\n          mem[32] = _99\n          if stor[_99][address(_89)] <\u2032 0:\n              require -stor[_99][address(_89)] >=\u2032 0\n              if not -stor[_99][address(_89)]:\n                  if _101 - stor[_103] < (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                      if not _101 - stor[_103]:\n                          require Mask(8, 168, _89) >> 168\n                          if not (100 * _101) - (100 * stor[_103]):\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require (100 * _101) - (100 * stor[_103])\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _101 - stor[_103]\n                      require (100 * _101) - (100 * stor[_103]) - (_101 * Mask(8, 168, _89) >> 168) + (stor[_103] * Mask(8, 168, _89) >> 168) / _101 - stor[_103] == -(Mask(8, 168, _89) >> 168) + 100\n                  else:\n                      if not (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                          require Mask(8, 168, _89) >> 168\n                          if not (100 * _101) - (100 * stor[_103]):\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require (100 * _101) - (100 * stor[_103])\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)]\n                      require (100 * -1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + (100 * balance[address(_89)]) - (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100 * Mask(8, 168, _89) >> 168) - (balance[address(_89)] * Mask(8, 168, _89) >> 168) / (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)] == -(Mask(8, 168, _89) >> 168) + 100\n                  require Mask(8, 168, _89) >> 168\n              else:\n                  require -stor[_99][address(_89)]\n                  require -1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / -stor[_99][address(_89)] == Mask(8, 168, _89) >> 168\n                  if _101 - stor[_103] < (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                      if not _101 - stor[_103]:\n                          require Mask(8, 168, _89) >> 168\n                      else:\n                          require _101 - stor[_103]\n                          require (100 * _101) - (100 * stor[_103]) - (_101 * Mask(8, 168, _89) >> 168) + (stor[_103] * Mask(8, 168, _89) >> 168) / _101 - stor[_103] == -(Mask(8, 168, _89) >> 168) + 100\n                  else:\n                      if not (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                          require Mask(8, 168, _89) >> 168\n                      else:\n                          require (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)]\n                          require (100 * -1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + (100 * balance[address(_89)]) - (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100 * Mask(8, 168, _89) >> 168) - (balance[address(_89)] * Mask(8, 168, _89) >> 168) / (-1 * Mask(8, 168, _89) >> 168 * stor[_99][address(_89)] / 100) + balance[address(_89)] == -(Mask(8, 168, _89) >> 168) + 100\n          else:\n              if _101 - stor[_103] < balance[address(_89)]:\n                  if not _101 - stor[_103]:\n                      require Mask(8, 168, _89) >> 168\n                      if not (100 * _101) - (100 * stor[_103]):\n                          require -(Mask(8, 168, _89) >> 168) + 100\n                          require idx < 16\n                          mem[(32 * idx) + 96] = 0\n                          if _101 - stor[_103] + ((100 * _101) - (100 * stor[_103]) - (_101 * Mask(8, 168, _89) >> 168) + (stor[_103] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168) <= (100 * _101) - (100 * stor[_103]) + ((100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100):\n                              mem[(32 * idx) + 608] = _101 - stor[_103]\n                          else:\n                              mem[(32 * idx) + 608] = (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100\n                          s = _79\n                          idx = idx + 1\n                          continue \n                      require (100 * _101) - (100 * stor[_103])\n                      require (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / (100 * _101) - (100 * stor[_103]) == Mask(8, 168, _89) >> 168\n                      require -(Mask(8, 168, _89) >> 168) + 100\n                      require idx < 16\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _101 - stor[_103]\n                  require (100 * _101) - (100 * stor[_103]) - (_101 * Mask(8, 168, _89) >> 168) + (stor[_103] * Mask(8, 168, _89) >> 168) / _101 - stor[_103] == -(Mask(8, 168, _89) >> 168) + 100\n              else:\n                  if not balance[address(_89)]:\n                      require Mask(8, 168, _89) >> 168\n                      if not (100 * _101) - (100 * stor[_103]):\n                          require -(Mask(8, 168, _89) >> 168) + 100\n                          require idx < 16\n                          mem[(32 * idx) + 96] = 0\n                          if balance[address(_89)] + ((100 * balance[address(_89)]) - (Mask(8, 168, _89) >> 168 * balance[address(_89)]) / Mask(8, 168, _89) >> 168) <= (100 * _101) - (100 * stor[_103]) + ((100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100):\n                              mem[(32 * idx) + 608] = balance[address(_89)]\n                          else:\n                              mem[(32 * idx) + 608] = (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100\n                          s = _79\n                          idx = idx + 1\n                          continue \n                      require (100 * _101) - (100 * stor[_103])\n                      require (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / (100 * _101) - (100 * stor[_103]) == Mask(8, 168, _89) >> 168\n                      require -(Mask(8, 168, _89) >> 168) + 100\n                      require idx < 16\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require balance[address(_89)]\n                  require (100 * balance[address(_89)]) - (Mask(8, 168, _89) >> 168 * balance[address(_89)]) / balance[address(_89)] == -(Mask(8, 168, _89) >> 168) + 100\n              require Mask(8, 168, _89) >> 168\n              if not (100 * _101) - (100 * stor[_103]):\n                  require -(Mask(8, 168, _89) >> 168) + 100\n                  require idx < 16\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require (100 * _101) - (100 * stor[_103])\n              require (100 * _101 * Mask(8, 168, _89) >> 168) - (100 * stor[_103] * Mask(8, 168, _89) >> 168) / (100 * _101) - (100 * stor[_103]) == Mask(8, 168, _89) >> 168\n              require -(Mask(8, 168, _89) >> 168) + 100\n          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n      _104 = mem[_79 + 64]\n      mem[0] = mem[_79]\n      _106 = sha3(mem[0], 4)\n      if filledAmount[mem[0]] <= _104:\n          if not _104 - filledAmount[mem[0]]:\n              mem[0] = address(_89)\n              mem[32] = _99\n              if stor[_99][address(_89)] >\u2032 0:\n                  require stor[_99][address(_89)] >=\u2032 0\n                  if not stor[_99][address(_89)]:\n                      if _104 - stor[_106] < (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                          if not (100 * _104) - (100 * stor[_106]):\n                              require Mask(8, 168, _89) >> 168\n                              if not _104 - stor[_106]:\n                                  require -(Mask(8, 168, _89) >> 168) + 100\n                              else:\n                                  require _104 - stor[_106]\n                                  require (_104 * Mask(8, 168, _89) >> 168) - (stor[_106] * Mask(8, 168, _89) >> 168) / _104 - stor[_106] == Mask(8, 168, _89) >> 168\n                          else:\n                              require (100 * _104) - (100 * stor[_106])\n                              require (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / (100 * _104) - (100 * stor[_106]) == -(Mask(8, 168, _89) >> 168) + 100\n                              require Mask(8, 168, _89) >> 168\n                              if _104 - stor[_106]:\n                                  require _104 - stor[_106]\n                      else:\n                          if not (100 * _104) - (100 * stor[_106]):\n                              require Mask(8, 168, _89) >> 168\n                              if not (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                                  require -(Mask(8, 168, _89) >> 168) + 100\n                              else:\n                                  require (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]\n                                  require (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100 * Mask(8, 168, _89) >> 168) + (balance[address(_89)] * Mask(8, 168, _89) >> 168) / (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)] == Mask(8, 168, _89) >> 168\n                          else:\n                              require (100 * _104) - (100 * stor[_106])\n                              require (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / (100 * _104) - (100 * stor[_106]) == -(Mask(8, 168, _89) >> 168) + 100\n                              require Mask(8, 168, _89) >> 168\n                              if (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                                  require (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]\n                  else:\n                      require stor[_99][address(_89)]\n                      require uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / stor[_99][address(_89)] == uint8(-(Mask(8, 168, _89) >> 168) + 100)\n                      if _104 - stor[_106] < (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                          if not (100 * _104) - (100 * stor[_106]):\n                              require Mask(8, 168, _89) >> 168\n                              if _104 - stor[_106]:\n                                  require _104 - stor[_106]\n                          else:\n                              require (100 * _104) - (100 * stor[_106])\n                              require (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / (100 * _104) - (100 * stor[_106]) == -(Mask(8, 168, _89) >> 168) + 100\n                              require Mask(8, 168, _89) >> 168\n                              if _104 - stor[_106]:\n                      else:\n                          if not (100 * _104) - (100 * stor[_106]):\n                              require Mask(8, 168, _89) >> 168\n                              if (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                                  require (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]\n                          else:\n                              require (100 * _104) - (100 * stor[_106])\n                              require (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / (100 * _104) - (100 * stor[_106]) == -(Mask(8, 168, _89) >> 168) + 100\n                              require Mask(8, 168, _89) >> 168\n                              if (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              if (100 * _104) - (100 * stor[_106]):\n                  require (100 * _104) - (100 * stor[_106])\n                  require (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / (100 * _104) - (100 * stor[_106]) == -(Mask(8, 168, _89) >> 168) + 100\n              require Mask(8, 168, _89) >> 168\n              if _104 - stor[_106] < balance[address(_89)]:\n                  if _104 - stor[_106]:\n                      require _104 - stor[_106]\n                      require (_104 * Mask(8, 168, _89) >> 168) - (stor[_106] * Mask(8, 168, _89) >> 168) / _104 - stor[_106] == Mask(8, 168, _89) >> 168\n                  require -(Mask(8, 168, _89) >> 168) + 100\n                  require idx < 16\n                  mem[(32 * idx) + 96] = 0\n                  if (100 * _104) - (100 * stor[_106]) + ((10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168) <= _104 - stor[_106] + ((_104 * Mask(8, 168, _89) >> 168) - (stor[_106] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100):\n                      mem[(32 * idx) + 608] = (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168\n                  else:\n                      mem[(32 * idx) + 608] = _104 - stor[_106]\n              else:\n                  if balance[address(_89)]:\n                      require balance[address(_89)]\n                      require Mask(8, 168, _89) >> 168 * balance[address(_89)] / balance[address(_89)] == Mask(8, 168, _89) >> 168\n                  require -(Mask(8, 168, _89) >> 168) + 100\n                  require idx < 16\n                  mem[(32 * idx) + 96] = 0\n                  if (100 * _104) - (100 * stor[_106]) + ((10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168) <= balance[address(_89)] + (Mask(8, 168, _89) >> 168 * balance[address(_89)] / -(Mask(8, 168, _89) >> 168) + 100):\n                      mem[(32 * idx) + 608] = (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168\n                  else:\n                      mem[(32 * idx) + 608] = balance[address(_89)]\n              s = _79\n              idx = idx + 1\n              continue \n          if _104 - filledAmount[mem[0]]:\n              if (100 * _104) - (100 * filledAmount[mem[0]]) / _104 - filledAmount[mem[0]] == 100:\n                  mem[0] = address(_89)\n                  mem[32] = _99\n                  if stor[_99][address(_89)] >\u2032 0:\n                      if stor[_99][address(_89)] >=\u2032 0:\n                          if not stor[_99][address(_89)]:\n                              if _104 - stor[_106] < (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                                  if not (100 * _104) - (100 * stor[_106]):\n                                      require Mask(8, 168, _89) >> 168\n                                      if _104 - stor[_106]:\n                                          require _104 - stor[_106]\n                                  else:\n                                      require (100 * _104) - (100 * stor[_106])\n                                      require (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / (100 * _104) - (100 * stor[_106]) == -(Mask(8, 168, _89) >> 168) + 100\n                                      require Mask(8, 168, _89) >> 168\n                                      if _104 - stor[_106]:\n                              else:\n                                  if not (100 * _104) - (100 * stor[_106]):\n                                      require Mask(8, 168, _89) >> 168\n                                      if (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                                          require (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]\n                                  else:\n                                      require (100 * _104) - (100 * stor[_106])\n                                      require (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / (100 * _104) - (100 * stor[_106]) == -(Mask(8, 168, _89) >> 168) + 100\n                                      require Mask(8, 168, _89) >> 168\n                                      if (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          if stor[_99][address(_89)]:\n                              if uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / stor[_99][address(_89)] == uint8(-(Mask(8, 168, _89) >> 168) + 100):\n                                  if _104 - stor[_106] < (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                                      if not (100 * _104) - (100 * stor[_106]):\n                                          require Mask(8, 168, _89) >> 168\n                                          if _104 - stor[_106]:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  else:\n                                      if not (100 * _104) - (100 * stor[_106]):\n                                          require Mask(8, 168, _89) >> 168\n                                          if (uint8(-(Mask(8, 168, _89) >> 168) + 100) * stor[_99][address(_89)] / 100) + balance[address(_89)]:\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  ('bool', ('add', ('mul', 100, ('var', '_104')), ('mul', -100, ('stor', ('var', '_106')))))\n                                  if (100 * _104) - (100 * stor[_106]):\n                                      if (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / (100 * _104) - (100 * stor[_106]) == -(Mask(8, 168, _89) >> 168) + 100:\n                                          if Mask(8, 168, _89) >> 168:\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  else:\n                      if _104 - stor[_106] < balance[address(_89)]:\n                          if not (100 * _104) - (100 * stor[_106]):\n                              require Mask(8, 168, _89) >> 168\n                              if _104 - stor[_106]:\n                                  require _104 - stor[_106]\n                                  require (_104 * Mask(8, 168, _89) >> 168) - (stor[_106] * Mask(8, 168, _89) >> 168) / _104 - stor[_106] == Mask(8, 168, _89) >> 168\n                              require -(Mask(8, 168, _89) >> 168) + 100\n                              require idx < 16\n                              mem[(32 * idx) + 96] = 0\n                              if (100 * _104) - (100 * stor[_106]) + ((10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168) <= _104 - stor[_106] + ((_104 * Mask(8, 168, _89) >> 168) - (stor[_106] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100):\n                                  mem[(32 * idx) + 608] = (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168\n                              else:\n                                  mem[(32 * idx) + 608] = _104 - stor[_106]\n                              s = _79\n                              idx = idx + 1\n                              continue \n                          if (100 * _104) - (100 * stor[_106]):\n                              if (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / (100 * _104) - (100 * stor[_106]) == -(Mask(8, 168, _89) >> 168) + 100:\n                                  if Mask(8, 168, _89) >> 168:\n                                      if not _104 - stor[_106]:\n                                          require -(Mask(8, 168, _89) >> 168) + 100\n                                          require idx < 16\n                                          mem[(32 * idx) + 96] = 0\n                                          if (100 * _104) - (100 * stor[_106]) + ((10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168) <= _104 - stor[_106] + ((_104 * Mask(8, 168, _89) >> 168) - (stor[_106] * Mask(8, 168, _89) >> 168) / -(Mask(8, 168, _89) >> 168) + 100):\n                                              mem[(32 * idx) + 608] = (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168\n                                          else:\n                                              mem[(32 * idx) + 608] = _104 - stor[_106]\n                                          s = _79\n                                          idx = idx + 1\n                                          continue \n                                      if _104 - stor[_106]:\n                                          if (_104 * Mask(8, 168, _89) >> 168) - (stor[_106] * Mask(8, 168, _89) >> 168) / _104 - stor[_106] == Mask(8, 168, _89) >> 168:\n                                              if -(Mask(8, 168, _89) >> 168) + 100:\n                                                  if idx < 16:\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      else:\n                          if not (100 * _104) - (100 * stor[_106]):\n                              require Mask(8, 168, _89) >> 168\n                              if balance[address(_89)]:\n                                  require balance[address(_89)]\n                                  require Mask(8, 168, _89) >> 168 * balance[address(_89)] / balance[address(_89)] == Mask(8, 168, _89) >> 168\n                              require -(Mask(8, 168, _89) >> 168) + 100\n                              require idx < 16\n                              mem[(32 * idx) + 96] = 0\n                              if (100 * _104) - (100 * stor[_106]) + ((10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168) <= balance[address(_89)] + (Mask(8, 168, _89) >> 168 * balance[address(_89)] / -(Mask(8, 168, _89) >> 168) + 100):\n                                  mem[(32 * idx) + 608] = (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168\n                              else:\n                                  mem[(32 * idx) + 608] = balance[address(_89)]\n                              s = _79\n                              idx = idx + 1\n                              continue \n                          if (100 * _104) - (100 * stor[_106]):\n                              if (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / (100 * _104) - (100 * stor[_106]) == -(Mask(8, 168, _89) >> 168) + 100:\n                                  if Mask(8, 168, _89) >> 168:\n                                      if not balance[address(_89)]:\n                                          require -(Mask(8, 168, _89) >> 168) + 100\n                                          require idx < 16\n                                          mem[(32 * idx) + 96] = 0\n                                          if (100 * _104) - (100 * stor[_106]) + ((10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168) <= balance[address(_89)] + (Mask(8, 168, _89) >> 168 * balance[address(_89)] / -(Mask(8, 168, _89) >> 168) + 100):\n                                              mem[(32 * idx) + 608] = (10000 * _104) - (10000 * stor[_106]) - (100 * _104 * Mask(8, 168, _89) >> 168) + (100 * stor[_106] * Mask(8, 168, _89) >> 168) / Mask(8, 168, _89) >> 168\n                                          else:\n                                              mem[(32 * idx) + 608] = balance[address(_89)]\n                                          s = _79\n                                          idx = idx + 1\n                                          continue \n                                      if balance[address(_89)]:\n                                          if Mask(8, 168, _89) >> 168 * balance[address(_89)] / balance[address(_89)] == Mask(8, 168, _89) >> 168:\n                                              if -(Mask(8, 168, _89) >> 168) + 100:\n                                                  if idx < 16:\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n      revert\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef trade(uint256 amount, uint256[3] order, bytes32 r, bytes32 s, uint8 v): # not payable\n  if call.data[68] > unknown10000000():\n      log LogTradeError(\n            address takerAccount=sha3(this.address, call.data[36 len 96]),\n            address makerAccount=3,\n            uint256 matchId=caller,\n            uint256 orderHash=address(call.data[112 len 20]),\n            uint16 status=call.data[36])\n      stop\n  if not Mask(8, 168, call.data[100]):\n      log LogTradeError(\n            address takerAccount=sha3(this.address, call.data[36 len 96]),\n            address makerAccount=3,\n            uint256 matchId=caller,\n            uint256 orderHash=address(call.data[112 len 20]),\n            uint16 status=call.data[36])\n      stop\n  if call.data[110 len 1] > 99:\n      log LogTradeError(\n            address takerAccount=sha3(this.address, call.data[36 len 96]),\n            address makerAccount=3,\n            uint256 matchId=caller,\n            uint256 orderHash=address(call.data[112 len 20]),\n            uint16 status=call.data[36])\n      stop\n  if call.data[111 len 1] > 1:\n      log LogTradeError(\n            address takerAccount=sha3(this.address, call.data[36 len 96]),\n            address makerAccount=3,\n            uint256 matchId=caller,\n            uint256 orderHash=address(call.data[112 len 20]),\n            uint16 status=call.data[36])\n      stop\n  signer = erecover(sha3(Mask(224, 32, '\\x19Ethereum Signed Message:\\n32') >> 32, sha3(this.address, call.data[36 len 96])), cd[196] << 248, v, cd[164]) # precompiled\n  require erecover.result\n  if address(signer) != address(call.data[112 len 20]):\n      log LogTradeError(\n            address takerAccount=sha3(this.address, call.data[36 len 96]),\n            address makerAccount=4,\n            uint256 matchId=caller,\n            uint256 orderHash=address(call.data[100]),\n            uint16 status=call.data[36])\n      stop\n  if block.timestamp >= call.data[100 len 5]:\n      log LogTradeError(\n            address takerAccount=sha3(this.address, call.data[36 len 96]),\n            address makerAccount=2,\n            uint256 matchId=caller,\n            uint256 orderHash=address(call.data[100]),\n            uint16 status=call.data[36])\n      stop\n  if uint8(matchInfo[call.data[36]].field_320):\n      log LogTradeError(\n            address takerAccount=sha3(this.address, call.data[36 len 96]),\n            address makerAccount=1,\n            uint256 matchId=caller,\n            uint256 orderHash=address(call.data[100]),\n            uint16 status=call.data[36])\n      stop\n  if caller == address(call.data[100]):\n      log LogTradeError(\n            address takerAccount=sha3(this.address, call.data[36 len 96]),\n            address makerAccount=6,\n            uint256 matchId=caller,\n            uint256 orderHash=address(call.data[100]),\n            uint16 status=call.data[36])\n      stop\n  if amount > unknown10000000():\n      log LogTradeError(\n            address takerAccount=sha3(this.address, call.data[36 len 96]),\n            address makerAccount=5,\n            uint256 matchId=caller,\n            uint256 orderHash=address(call.data[100]),\n            uint16 status=call.data[36])\n      stop\n  require filledAmount[this.address][call.data[36 len 96]] <= call.data[68]\n  if Mask(8, 160, call.data[100]) >> 160:\n      if matchInfo[call.data[36]][address(call.data[100])].field_0 <\u2032 0:\n          require -matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0\n          if not -matchInfo[call.data[36]][address(call.data[100])].field_0:\n              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                  if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                      require matchInfo[call.data[36]][caller].field_0 >=\u2032 0\n                      if not matchInfo[call.data[36]][caller].field_0:\n                          if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                      else:\n                          require matchInfo[call.data[36]][caller].field_0\n                          require uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / matchInfo[call.data[36]][caller].field_0 == uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100)\n                  else:\n                      if amount < balance[caller]:\n                          if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not amount:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require amount\n                                  require Mask(8, 168, call.data[100]) >> 168 * amount / amount == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                              require (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if amount:\n                                  require amount\n                      else:\n                          if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not balance[caller]:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require balance[caller]\n                                  require Mask(8, 168, call.data[100]) >> 168 * balance[caller] / balance[caller] == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                              require (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if balance[caller]:\n                                  require balance[caller]\n              else:\n                  if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                      require matchInfo[call.data[36]][caller].field_0 >=\u2032 0\n                      if not matchInfo[call.data[36]][caller].field_0:\n                          if (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                      else:\n                          require matchInfo[call.data[36]][caller].field_0\n                          require uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / matchInfo[call.data[36]][caller].field_0 == uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100)\n                  else:\n                      if amount < balance[caller]:\n                          if not (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not amount:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require amount\n                                  require Mask(8, 168, call.data[100]) >> 168 * amount / amount == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]\n                              require (100 * -1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + (100 * balance[address(call.data[100])]) - (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100 * Mask(8, 168, call.data[100]) >> 168) - (balance[address(call.data[100])] * Mask(8, 168, call.data[100]) >> 168) / (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if amount:\n                                  require amount\n                      else:\n                          if not (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not balance[caller]:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require balance[caller]\n                                  require Mask(8, 168, call.data[100]) >> 168 * balance[caller] / balance[caller] == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]\n                              require (100 * -1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + (100 * balance[address(call.data[100])]) - (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100 * Mask(8, 168, call.data[100]) >> 168) - (balance[address(call.data[100])] * Mask(8, 168, call.data[100]) >> 168) / (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if balance[caller]:\n                                  require balance[caller]\n          else:\n              require -matchInfo[call.data[36]][address(call.data[100])].field_0\n              require -1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / -matchInfo[call.data[36]][address(call.data[100])].field_0 == Mask(8, 168, call.data[100]) >> 168\n              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                  if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                      require matchInfo[call.data[36]][caller].field_0 >=\u2032 0\n                      if matchInfo[call.data[36]][caller].field_0:\n                          require matchInfo[call.data[36]][caller].field_0\n                          require uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / matchInfo[call.data[36]][caller].field_0 == uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100)\n                  else:\n                      if amount < balance[caller]:\n                          if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if amount:\n                                  require amount\n                          else:\n                              require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                              require (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if amount:\n                      else:\n                          if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if balance[caller]:\n                                  require balance[caller]\n                          else:\n                              require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                              require (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if balance[caller]:\n              else:\n                  if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                      require matchInfo[call.data[36]][caller].field_0 >=\u2032 0\n                      if matchInfo[call.data[36]][caller].field_0:\n                          require matchInfo[call.data[36]][caller].field_0\n                          require uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / matchInfo[call.data[36]][caller].field_0 == uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100)\n                  else:\n                      if amount < balance[caller]:\n                          if not (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if amount:\n                                  require amount\n                          else:\n                              require (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]\n                              require (100 * -1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + (100 * balance[address(call.data[100])]) - (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100 * Mask(8, 168, call.data[100]) >> 168) - (balance[address(call.data[100])] * Mask(8, 168, call.data[100]) >> 168) / (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if amount:\n                      else:\n                          if not (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if balance[caller]:\n                                  require balance[caller]\n                          else:\n                              require (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]\n                              require (100 * -1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + (100 * balance[address(call.data[100])]) - (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100 * Mask(8, 168, call.data[100]) >> 168) - (balance[address(call.data[100])] * Mask(8, 168, call.data[100]) >> 168) / (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if balance[caller]:\n      else:\n          if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < balance[address(call.data[100])]:\n              if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                  require matchInfo[call.data[36]][caller].field_0 >=\u2032 0\n                  if not matchInfo[call.data[36]][caller].field_0:\n                      if amount < (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                          if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not amount:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require amount\n                                  require Mask(8, 168, call.data[100]) >> 168 * amount / amount == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                              require (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if amount:\n                                  require amount\n                      else:\n                          if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100 * Mask(8, 168, call.data[100]) >> 168) + (balance[caller] * Mask(8, 168, call.data[100]) >> 168) / (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller] == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                              require (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]\n                  else:\n                      require matchInfo[call.data[36]][caller].field_0\n                      require uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / matchInfo[call.data[36]][caller].field_0 == uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100)\n                      if amount < (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                          if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if amount:\n                                  require amount\n                          else:\n                              require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                              require (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if amount:\n                      else:\n                          if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]\n                          else:\n                              require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                              require (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n              else:\n                  if amount < balance[caller]:\n                      if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not amount:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) <= amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                      if (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) + call.data[68] - filledAmount[this.address][call.data[36 len 96]] + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if amount:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                          else:\n                              require amount\n                              require Mask(8, 168, call.data[100]) >> 168 * amount / amount == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) <= amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                      if (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) + call.data[68] - filledAmount[this.address][call.data[36 len 96]] + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if amount:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                      else:\n                          require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                          require (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not amount:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) <= amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                      if (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) + call.data[68] - filledAmount[this.address][call.data[36 len 96]] + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if amount:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                          else:\n                              require amount\n                              require Mask(8, 168, call.data[100]) >> 168 * amount / amount == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) <= amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                      if (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if amount:\n                  else:\n                      if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not balance[caller]:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) <= balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                      if (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) + call.data[68] - filledAmount[this.address][call.data[36 len 96]] + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[caller]:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                          else:\n                              require balance[caller]\n                              require Mask(8, 168, call.data[100]) >> 168 * balance[caller] / balance[caller] == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) <= balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                      if (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) + call.data[68] - filledAmount[this.address][call.data[36 len 96]] + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[caller]:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                      else:\n                          require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                          require (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not balance[caller]:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) <= balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                      if (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) + call.data[68] - filledAmount[this.address][call.data[36 len 96]] + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[caller]:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                          else:\n                              require balance[caller]\n                              require Mask(8, 168, call.data[100]) >> 168 * balance[caller] / balance[caller] == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168) <= balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                      if (100 * call.data[68]) - (100 * filledAmount[this.address][call.data[36 len 96]]) - (call.data[68] * Mask(8, 168, call.data[100]) >> 168) + (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / Mask(8, 168, call.data[100]) >> 168:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[caller]:\n          else:\n              if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                  require matchInfo[call.data[36]][caller].field_0 >=\u2032 0\n                  if not matchInfo[call.data[36]][caller].field_0:\n                      if amount < (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                          if not balance[address(call.data[100])]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not amount:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require amount\n                                  require Mask(8, 168, call.data[100]) >> 168 * amount / amount == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require balance[address(call.data[100])]\n                              require (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / balance[address(call.data[100])] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if amount:\n                                  require amount\n                      else:\n                          if not balance[address(call.data[100])]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100 * Mask(8, 168, call.data[100]) >> 168) + (balance[caller] * Mask(8, 168, call.data[100]) >> 168) / (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller] == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require balance[address(call.data[100])]\n                              require (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / balance[address(call.data[100])] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]\n                  else:\n                      require matchInfo[call.data[36]][caller].field_0\n                      require uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / matchInfo[call.data[36]][caller].field_0 == uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100)\n                      if amount < (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                          if not balance[address(call.data[100])]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if amount:\n                                  require amount\n                          else:\n                              require balance[address(call.data[100])]\n                              require (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / balance[address(call.data[100])] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if amount:\n                      else:\n                          if not balance[address(call.data[100])]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]\n                          else:\n                              require balance[address(call.data[100])]\n                              require (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / balance[address(call.data[100])] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n              else:\n                  if amount < balance[caller]:\n                      if not balance[address(call.data[100])]:\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not amount:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[address(call.data[100])] + ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) <= amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[address(call.data[100])]:\n                                      if (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) + balance[address(call.data[100])] + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if amount:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                          else:\n                              require amount\n                              require Mask(8, 168, call.data[100]) >> 168 * amount / amount == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[address(call.data[100])] + ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) <= amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[address(call.data[100])]:\n                                      if (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) + balance[address(call.data[100])] + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if amount:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                      else:\n                          require balance[address(call.data[100])]\n                          require (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / balance[address(call.data[100])] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not amount:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[address(call.data[100])] + ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) <= amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[address(call.data[100])]:\n                                      if (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) + balance[address(call.data[100])] + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if amount:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                          else:\n                              require amount\n                              require Mask(8, 168, call.data[100]) >> 168 * amount / amount == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[address(call.data[100])] + ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) <= amount + (Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[address(call.data[100])]:\n                                      if (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * amount / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if amount:\n                  else:\n                      if not balance[address(call.data[100])]:\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not balance[caller]:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[address(call.data[100])] + ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) <= balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[address(call.data[100])]:\n                                      if (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) + balance[address(call.data[100])] + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[caller]:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][caller].field_0 >\u2032 0:\n                          else:\n                              require balance[caller]\n                              require Mask(8, 168, call.data[100]) >> 168 * balance[caller] / balance[caller] == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[address(call.data[100])] + ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) <= balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[address(call.data[100])]:\n                                      if (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) + balance[address(call.data[100])] + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[caller]:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                      else:\n                          require balance[address(call.data[100])]\n                          require (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / balance[address(call.data[100])] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not balance[caller]:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[address(call.data[100])] + ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) <= balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[address(call.data[100])]:\n                                      if (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) + balance[address(call.data[100])] + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[caller]:\n                                          if matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0:\n                                              if balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][address(call.data[100])].field_0 <=\u2032 0:\n                          else:\n                              require balance[caller]\n                              require Mask(8, 168, call.data[100]) >> 168 * balance[caller] / balance[caller] == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[address(call.data[100])] + ((100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168) <= balance[caller] + (Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[address(call.data[100])]:\n                                      if (100 * balance[address(call.data[100])]) - (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])]) / Mask(8, 168, call.data[100]) >> 168:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[caller] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[caller]:\n  else:\n      if matchInfo[call.data[36]][caller].field_0 <\u2032 0:\n          require -matchInfo[call.data[36]][caller].field_0 >=\u2032 0\n          if not -matchInfo[call.data[36]][caller].field_0:\n              if amount < (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                  if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                      require matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0\n                      if not matchInfo[call.data[36]][address(call.data[100])].field_0:\n                          if amount:\n                      else:\n                          require matchInfo[call.data[36]][address(call.data[100])].field_0\n                          require uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / matchInfo[call.data[36]][address(call.data[100])].field_0 == uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100)\n                  else:\n                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < balance[address(call.data[100])]:\n                          if not amount:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                                  require (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require amount\n                              require (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / amount == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                  require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                      else:\n                          if not amount:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not balance[address(call.data[100])]:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require balance[address(call.data[100])]\n                                  require Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / balance[address(call.data[100])] == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require amount\n                              require (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / amount == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if balance[address(call.data[100])]:\n                                  require balance[address(call.data[100])]\n              else:\n                  if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                      require matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0\n                      if not matchInfo[call.data[36]][address(call.data[100])].field_0:\n                          if (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                      else:\n                          require matchInfo[call.data[36]][address(call.data[100])].field_0\n                          require uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / matchInfo[call.data[36]][address(call.data[100])].field_0 == uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100)\n                  else:\n                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < balance[address(call.data[100])]:\n                          if not (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                                  require (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]\n                              require (100 * -1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + (100 * balance[caller]) - (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100 * Mask(8, 168, call.data[100]) >> 168) - (balance[caller] * Mask(8, 168, call.data[100]) >> 168) / (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                  require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                      else:\n                          if not (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not balance[address(call.data[100])]:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require balance[address(call.data[100])]\n                                  require Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / balance[address(call.data[100])] == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]\n                              require (100 * -1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + (100 * balance[caller]) - (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100 * Mask(8, 168, call.data[100]) >> 168) - (balance[caller] * Mask(8, 168, call.data[100]) >> 168) / (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if balance[address(call.data[100])]:\n                                  require balance[address(call.data[100])]\n          else:\n              require -matchInfo[call.data[36]][caller].field_0\n              require -1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / -matchInfo[call.data[36]][caller].field_0 == Mask(8, 168, call.data[100]) >> 168\n              if amount < (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                  if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                      require matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0\n                      if matchInfo[call.data[36]][address(call.data[100])].field_0:\n                          require matchInfo[call.data[36]][address(call.data[100])].field_0\n                          require uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / matchInfo[call.data[36]][address(call.data[100])].field_0 == uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100)\n                  else:\n                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < balance[address(call.data[100])]:\n                          if not amount:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                  require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                          else:\n                              require amount\n                              require (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / amount == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                      else:\n                          if not amount:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if balance[address(call.data[100])]:\n                                  require balance[address(call.data[100])]\n                          else:\n                              require amount\n                              require (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / amount == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if balance[address(call.data[100])]:\n              else:\n                  if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                      require matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0\n                      if matchInfo[call.data[36]][address(call.data[100])].field_0:\n                          require matchInfo[call.data[36]][address(call.data[100])].field_0\n                          require uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / matchInfo[call.data[36]][address(call.data[100])].field_0 == uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100)\n                  else:\n                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < balance[address(call.data[100])]:\n                          if not (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                  require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                          else:\n                              require (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]\n                              require (100 * -1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + (100 * balance[caller]) - (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100 * Mask(8, 168, call.data[100]) >> 168) - (balance[caller] * Mask(8, 168, call.data[100]) >> 168) / (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                      else:\n                          if not (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if balance[address(call.data[100])]:\n                                  require balance[address(call.data[100])]\n                          else:\n                              require (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller]\n                              require (100 * -1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + (100 * balance[caller]) - (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100 * Mask(8, 168, call.data[100]) >> 168) - (balance[caller] * Mask(8, 168, call.data[100]) >> 168) / (-1 * Mask(8, 168, call.data[100]) >> 168 * matchInfo[call.data[36]][caller].field_0 / 100) + balance[caller] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if balance[address(call.data[100])]:\n      else:\n          if amount < balance[caller]:\n              if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                  require matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0\n                  if not matchInfo[call.data[36]][address(call.data[100])].field_0:\n                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                          if not amount:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                                  require (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require amount\n                              require (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / amount == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                  require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                      else:\n                          if not amount:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100 * Mask(8, 168, call.data[100]) >> 168) + (balance[address(call.data[100])] * Mask(8, 168, call.data[100]) >> 168) / (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])] == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require amount\n                              require (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / amount == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]\n                  else:\n                      require matchInfo[call.data[36]][address(call.data[100])].field_0\n                      require uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / matchInfo[call.data[36]][address(call.data[100])].field_0 == uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100)\n                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                          if not amount:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                  require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                          else:\n                              require amount\n                              require (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / amount == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                      else:\n                          if not amount:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]\n                          else:\n                              require amount\n                              require (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / amount == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n              else:\n                  if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < balance[address(call.data[100])]:\n                      if not amount:\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if amount + ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) <= call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if amount:\n                                      if (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) + amount + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                              else:\n                                  if (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                          else:\n                              require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                              require (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if amount + ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) <= call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if amount:\n                                      if (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) + amount + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                              else:\n                                  if (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                      else:\n                          require amount\n                          require (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / amount == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if amount + ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) <= call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if amount:\n                                      if (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) + amount + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                              else:\n                                  if (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                          else:\n                              require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                              require (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if amount + ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) <= call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if amount:\n                                      if (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168:\n                              else:\n                                  if (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                  else:\n                      if not amount:\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not balance[address(call.data[100])]:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if amount + ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) <= balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if amount:\n                                      if (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) + amount + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[address(call.data[100])]:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                          else:\n                              require balance[address(call.data[100])]\n                              require Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / balance[address(call.data[100])] == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if amount + ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) <= balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if amount:\n                                      if (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) + amount + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[address(call.data[100])]:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                      else:\n                          require amount\n                          require (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / amount == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not balance[address(call.data[100])]:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if amount + ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) <= balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if amount:\n                                      if (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) + amount + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[address(call.data[100])]:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                          else:\n                              require balance[address(call.data[100])]\n                              require Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / balance[address(call.data[100])] == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if amount + ((100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168) <= balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if amount:\n                                      if (100 * amount) - (Mask(8, 168, call.data[100]) >> 168 * amount) / Mask(8, 168, call.data[100]) >> 168:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[address(call.data[100])]:\n          else:\n              if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                  require matchInfo[call.data[36]][address(call.data[100])].field_0 >=\u2032 0\n                  if not matchInfo[call.data[36]][address(call.data[100])].field_0:\n                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                          if not balance[caller]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                                  require (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require balance[caller]\n                              require (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / balance[caller] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                  require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                      else:\n                          if not balance[caller]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if not (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                                  require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              else:\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100 * Mask(8, 168, call.data[100]) >> 168) + (balance[address(call.data[100])] * Mask(8, 168, call.data[100]) >> 168) / (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])] == Mask(8, 168, call.data[100]) >> 168\n                          else:\n                              require balance[caller]\n                              require (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / balance[caller] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]\n                  else:\n                      require matchInfo[call.data[36]][address(call.data[100])].field_0\n                      require uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / matchInfo[call.data[36]][address(call.data[100])].field_0 == uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100)\n                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                          if not balance[caller]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                  require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                          else:\n                              require balance[caller]\n                              require (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / balance[caller] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                      else:\n                          if not balance[caller]:\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n                                  require (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]\n                          else:\n                              require balance[caller]\n                              require (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / balance[caller] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              require Mask(8, 168, call.data[100]) >> 168\n                              if (uint8(-(Mask(8, 168, call.data[100]) >> 168) + 100) * matchInfo[call.data[36]][address(call.data[100])].field_0 / 100) + balance[address(call.data[100])]:\n              else:\n                  if call.data[68] - filledAmount[this.address][call.data[36 len 96]] < balance[address(call.data[100])]:\n                      if not balance[caller]:\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[caller] + ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) <= call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[caller]:\n                                      if (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) + balance[caller] + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                              else:\n                                  if (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                          else:\n                              require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                              require (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[caller] + ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) <= call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[caller]:\n                                      if (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) + balance[caller] + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                              else:\n                                  if (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                      else:\n                          require balance[caller]\n                          require (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / balance[caller] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[caller] + ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) <= call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[caller]:\n                                      if (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) + balance[caller] + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                              else:\n                                  if (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                          else:\n                              require call.data[68] - filledAmount[this.address][call.data[36 len 96]]\n                              require (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / call.data[68] - filledAmount[this.address][call.data[36 len 96]] == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[caller] + ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) <= call.data[68] - filledAmount[this.address][call.data[36 len 96]] + ((call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[caller]:\n                                      if (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168:\n                              else:\n                                  if (call.data[68] * Mask(8, 168, call.data[100]) >> 168) - (filledAmount[this.address][call.data[36 len 96]] * Mask(8, 168, call.data[100]) >> 168) / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if call.data[68] - filledAmount[this.address][call.data[36 len 96]]:\n                  else:\n                      if not balance[caller]:\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not balance[address(call.data[100])]:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[caller] + ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) <= balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[caller]:\n                                      if (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) + balance[caller] + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[address(call.data[100])]:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                                                  if matchInfo[call.data[36]][address(call.data[100])].field_0 >\u2032 0:\n                          else:\n                              require balance[address(call.data[100])]\n                              require Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / balance[address(call.data[100])] == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[caller] + ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) <= balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[caller]:\n                                      if (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) + balance[caller] + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[address(call.data[100])]:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                      else:\n                          require balance[caller]\n                          require (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / balance[caller] == -(Mask(8, 168, call.data[100]) >> 168) + 100\n                          require Mask(8, 168, call.data[100]) >> 168\n                          if not balance[address(call.data[100])]:\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[caller] + ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) <= balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[caller]:\n                                      if (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) + balance[caller] + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[address(call.data[100])]:\n                                          if matchInfo[call.data[36]][caller].field_0 >=\u2032 0:\n                                              if balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100) + matchInfo[call.data[36]][caller].field_0 <=\u2032 0:\n                          else:\n                              require balance[address(call.data[100])]\n                              require Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / balance[address(call.data[100])] == Mask(8, 168, call.data[100]) >> 168\n                              require -(Mask(8, 168, call.data[100]) >> 168) + 100\n                              if balance[caller] + ((100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168) <= balance[address(call.data[100])] + (Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100):\n                                  if balance[caller]:\n                                      if (100 * balance[caller]) - (Mask(8, 168, call.data[100]) >> 168 * balance[caller]) / Mask(8, 168, call.data[100]) >> 168:\n                              else:\n                                  if Mask(8, 168, call.data[100]) >> 168 * balance[address(call.data[100])] / -(Mask(8, 168, call.data[100]) >> 168) + 100:\n                                      if balance[address(call.data[100])]:\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 47969 tokens. Please reduce the length of the messages."
}