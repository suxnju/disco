{
	"address": "0x6dfdec940b83e424c1433d08b2e6096809d3698b",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the provided decompiled code, the corresponding Solidity contract could look something like this:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract InvestmentContract {\n    mapping (address => uint256) private _checkInvestments;\n    mapping (address => uint256) private _checkRecentInvestment;\n    mapping (address => uint256) private _getMinutes;\n    mapping (address => uint256) private _checkWithdrawals;\n    mapping (address => uint256) private _checkReferral;\n    uint256 private _step;\n    uint256 private _minimum;\n    uint256 private _stakingRequirement;\n    address private _ownerWallet;\n    address private _owner;\n\n    event Invest(address indexed _address, uint256 _amount);\n    event Withdraw(address indexed _address, uint256 _amount);\n    event OwnershipTransferred(address indexed prevOwner, address indexed newOwner);\n    event Bounty(address indexed _address, uint256 _amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == _owner, \"Caller is not the owner\");\n        _;\n    }\n\n    constructor(uint256 step, uint256 minimum, uint256 stakingRequirement, address ownerWallet) {\n        _owner = msg.sender;\n        _step = step;\n        _minimum = minimum;\n        _stakingRequirement = stakingRequirement;\n        _ownerWallet = ownerWallet;\n    }\n\n    function withdraw() public {\n        // implementation here\n    }\n\n    function checkRecentInvestment(address _address) public view returns (uint256) {\n        return _checkRecentInvestment[_address];\n    }\n\n    function minimum() public view returns (uint256) {\n        return _minimum;\n    }\n\n    function stakingRequirement() public view returns (uint256) {\n        return _stakingRequirement;\n    }\n\n    function transferOwnership(address newOwner, address newOwnerWallet) public onlyOwner {\n        _owner = newOwner;\n        _ownerWallet = newOwnerWallet;\n        emit OwnershipTransferred(_owner, newOwner);\n    }\n\n    function checkInvestments(address _address) public view returns (uint256) {\n        return _checkInvestments[_address];\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function ownerWallet() public view returns (address) {\n        return _ownerWallet;\n    }\n\n    function bounty() public {\n        // implementation here\n    }\n\n    function checkWithdrawals(address _address) public view returns (uint256) {\n        return _checkWithdrawals[_address];\n    }\n\n    function checkBalance() public view returns (uint256) {\n        // implementation here\n    }\n\n    function step() public view returns (uint256) {\n        return _step;\n    }\n\n    function buy() public payable {\n        // implementation here\n    }\n\n    function getMinutes(address _address) public view returns (uint256) {\n        return _getMinutes[_address];\n    }\n\n    function getBalance(address _address) public view returns (uint256) {\n        // implementation here\n    }\n\n    function checkReferral(address _address) public view returns (uint256) {\n        return _checkReferral[_address];\n    }\n\n    fallback() external payable {\n        // implementation here\n    }\n}\n```\n\nPlease note that the real implementation of functions `withdraw`, `bounty`, `checkBalance`, `buy`, and the `fallback` function were not specified in the decompiled code, so you'll need to replace the `// implementation here` comments with the actual code. \n\nAlso, the contract should be compiled with a proper solidity version. Here `pragma solidity ^0.8.0;` is used as an example.",
				"role": "assistant"
			}
		}
	],
	"created": 1701469549,
	"id": "chatcmpl-8R6FBXMiynDO9RZ1L96rmVOdJDQyI",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 06:19 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _checkInvestments; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _checkRecentInvestment; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _getMinutes; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _checkWithdrawals; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _checkReferral; // STORAGE[0x4]\nuint256 _step; // STORAGE[0x5]\nuint256 _minimum; // STORAGE[0x6]\nuint256 _stakingRequirement; // STORAGE[0x7]\naddress _ownerWallet; // STORAGE[0x8] bytes 0 to 19\naddress _owner; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nInvest(address, uint256);\nWithdraw(address, uint256);\nOwnershipTransferred(address, address);\nBounty(address, uint256);\n\nfunction 0x1024(uint256 varg0) private { \n    v0 = address(varg0);\n    assert(_getMinutes[v0] <= block.timestamp);\n    assert(60);\n    if ((block.timestamp - _getMinutes[v0]) / 60 >= 4321) {\n        v1 = address(varg0);\n        v2 = 0x1259(150, _checkRecentInvestment[v1]);\n        assert(100);\n        v3 = address(varg0);\n        assert(_checkWithdrawals[v3] <= v2 / 100);\n        v4 = v2 / 100 - _checkWithdrawals[v3];\n    } else {\n        v5 = address(varg0);\n        v6 = 0x1259(_step, _checkRecentInvestment[v5]);\n        assert(100);\n        v7 = 0x1259((block.timestamp - _getMinutes[v0]) / 60, v6 / 100);\n        assert(1440);\n        v8 = address(varg0);\n        assert(_checkWithdrawals[v8] <= v7 / 1440);\n        v4 = v9 = v7 / 1440 - _checkWithdrawals[v8];\n    }\n    return v4;\n}\n\nfunction 0x1259(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = v1 = varg1 * varg0;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction withdraw() public nonPayable { \n    v0 = 0x9be();\n    return v0;\n}\n\nfunction checkRecentInvestment(address varg0) public nonPayable { \n    return _checkRecentInvestment[varg0];\n}\n\nfunction minimum() public nonPayable { \n    return _minimum;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction transferOwnership(address varg0, address varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n    _ownerWallet = varg1;\n}\n\nfunction checkInvestments(address varg0) public nonPayable { \n    return _checkInvestments[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction ownerWallet() public nonPayable { \n    return _ownerWallet;\n}\n\nfunction bounty() public nonPayable { \n    if (_checkReferral[msg.sender] >= _minimum) {\n        if ((address(this)).balance > _checkReferral[msg.sender]) {\n            _checkReferral[msg.sender] = 0;\n            v0 = msg.sender.call().value(_checkReferral[msg.sender]).gas(!_checkReferral[msg.sender] * 2300);\n            require(v0); // checks call status, propagates error data on error\n            emit Bounty(msg.sender, _checkReferral[msg.sender]);\n        }\n    }\n}\n\nfunction checkWithdrawals(address varg0) public nonPayable { \n    return _checkWithdrawals[varg0];\n}\n\nfunction checkBalance() public nonPayable { \n    v0 = 0x1024(msg.sender);\n    return v0;\n}\n\nfunction step() public nonPayable { \n    return _step;\n}\n\nfunction buy(address varg0) public payable { \n    0x535(varg0);\n}\n\nfunction getMinutes(address varg0) public nonPayable { \n    assert(_getMinutes[varg0] <= block.timestamp);\n    assert(60);\n    return (block.timestamp - _getMinutes[varg0]) / 60;\n}\n\nfunction getBalance(address varg0) public nonPayable { \n    v0 = 0x1024(varg0);\n    return v0;\n}\n\nfunction 0x535(uint256 varg0) private { \n    require(msg.value >= _minimum);\n    v0 = v1 = address(varg0) != 0;\n    if (v1) {\n        v0 = v2 = address(varg0) != msg.sender;\n    }\n    if (v0) {\n        v3 = address(varg0);\n        v0 = v4 = _checkInvestments[v3] >= _stakingRequirement;\n    }\n    if (v0) {\n        v5 = 0x1259(5, msg.value);\n        assert(100);\n        v6 = address(varg0);\n        assert(_checkReferral[v6] + v5 / 100 >= _checkReferral[v6]);\n        v7 = address(varg0);\n        _checkReferral[v7] = _checkReferral[v6] + v5 / 100;\n    }\n    if (_checkInvestments[msg.sender] > 0) {\n        v8 = 0x9be();\n        if (v8) {\n            _checkWithdrawals[msg.sender] = 0;\n        }\n    }\n    assert(_checkInvestments[msg.sender] + msg.value >= _checkInvestments[msg.sender]);\n    _checkInvestments[msg.sender] = _checkInvestments[msg.sender] + msg.value;\n    _checkRecentInvestment[msg.sender] = msg.value;\n    _getMinutes[msg.sender] = block.timestamp;\n    v9 = 0x1259(5, msg.value);\n    assert(100);\n    v10 = _ownerWallet.call().value(v9 / 100).gas(!(v9 / 100) * 2300);\n    require(v10); // checks call status, propagates error data on error\n    emit Invest(msg.sender, msg.value);\n    return ;\n}\n\nfunction 0x9be() private { \n    require(_getMinutes[msg.sender] > 0);\n    v0 = 0x1024(msg.sender);\n    if ((address(this)).balance <= v0) {\n        v1 = v2 = 0;\n    } else {\n        if (v0 > 0) {\n            assert(_checkWithdrawals[msg.sender] + v0 >= _checkWithdrawals[msg.sender]);\n            _checkWithdrawals[msg.sender] = _checkWithdrawals[msg.sender] + v0;\n            v3 = msg.sender.call().value(v0).gas(!v0 * 2300);\n            require(v3); // checks call status, propagates error data on error\n            emit Withdraw(msg.sender, v0);\n        }\n        v1 = v4 = 1;\n    }\n    return v1;\n}\n\nfunction fallback() public payable { \n    0x535(0);\n}\n\nfunction checkReferral(address varg0) public nonPayable { \n    return _checkReferral[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0xc19f80e == function_selector) {\n            checkReferral(address);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4484780b == function_selector) {\n            checkRecentInvestment(address);\n        } else if (0x52d6804d == function_selector) {\n            minimum();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x6d435421 == function_selector) {\n            transferOwnership(address,address);\n        } else if (0x835c1154 == function_selector) {\n            checkInvestments(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9335dcb7 == function_selector) {\n            ownerWallet();\n        } else if (0x943dfef1 == function_selector) {\n            bounty();\n        } else if (0x9d9fcc72 == function_selector) {\n            checkWithdrawals(address);\n        } else if (0xc71daccb == function_selector) {\n            checkBalance();\n        } else if (0xe25fe175 == function_selector) {\n            step();\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xf2729d8a == function_selector) {\n            getMinutes(address);\n        } else if (0xf8b2cb4f == function_selector) {\n            getBalance(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 06:19 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _checkInvestments; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _checkRecentInvestment; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _getMinutes; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _checkWithdrawals; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _checkReferral; // STORAGE[0x4]\nuint256 _step; // STORAGE[0x5]\nuint256 _minimum; // STORAGE[0x6]\nuint256 _stakingRequirement; // STORAGE[0x7]\naddress _ownerWallet; // STORAGE[0x8] bytes 0 to 19\naddress _owner; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nInvest(address, uint256);\nWithdraw(address, uint256);\nOwnershipTransferred(address, address);\nBounty(address, uint256);\n\nfunction 0x1024(uint256 varg0) private { \n    v0 = address(varg0);\n    assert(_getMinutes[v0] <= block.timestamp);\n    assert(60);\n    if ((block.timestamp - _getMinutes[v0]) / 60 >= 4321) {\n        v1 = address(varg0);\n        v2 = 0x1259(150, _checkRecentInvestment[v1]);\n        assert(100);\n        v3 = address(varg0);\n        assert(_checkWithdrawals[v3] <= v2 / 100);\n        v4 = v2 / 100 - _checkWithdrawals[v3];\n    } else {\n        v5 = address(varg0);\n        v6 = 0x1259(_step, _checkRecentInvestment[v5]);\n        assert(100);\n        v7 = 0x1259((block.timestamp - _getMinutes[v0]) / 60, v6 / 100);\n        assert(1440);\n        v8 = address(varg0);\n        assert(_checkWithdrawals[v8] <= v7 / 1440);\n        v4 = v9 = v7 / 1440 - _checkWithdrawals[v8];\n    }\n    return v4;\n}\n\nfunction 0x1259(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = v1 = varg1 * varg0;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction withdraw() public nonPayable { \n    v0 = 0x9be();\n    return v0;\n}\n\nfunction checkRecentInvestment(address varg0) public nonPayable { \n    return _checkRecentInvestment[varg0];\n}\n\nfunction minimum() public nonPayable { \n    return _minimum;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction transferOwnership(address varg0, address varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n    _ownerWallet = varg1;\n}\n\nfunction checkInvestments(address varg0) public nonPayable { \n    return _checkInvestments[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction ownerWallet() public nonPayable { \n    return _ownerWallet;\n}\n\nfunction bounty() public nonPayable { \n    if (_checkReferral[msg.sender] >= _minimum) {\n        if ((address(this)).balance > _checkReferral[msg.sender]) {\n            _checkReferral[msg.sender] = 0;\n            v0 = msg.sender.call().value(_checkReferral[msg.sender]).gas(!_checkReferral[msg.sender] * 2300);\n            require(v0); // checks call status, propagates error data on error\n            emit Bounty(msg.sender, _checkReferral[msg.sender]);\n        }\n    }\n}\n\nfunction checkWithdrawals(address varg0) public nonPayable { \n    return _checkWithdrawals[varg0];\n}\n\nfunction checkBalance() public nonPayable { \n    v0 = 0x1024(msg.sender);\n    return v0;\n}\n\nfunction step() public nonPayable { \n    return _step;\n}\n\nfunction buy(address varg0) public payable { \n    0x535(varg0);\n}\n\nfunction getMinutes(address varg0) public nonPayable { \n    assert(_getMinutes[varg0] <= block.timestamp);\n    assert(60);\n    return (block.timestamp - _getMinutes[varg0]) / 60;\n}\n\nfunction getBalance(address varg0) public nonPayable { \n    v0 = 0x1024(varg0);\n    return v0;\n}\n\nfunction 0x535(uint256 varg0) private { \n    require(msg.value >= _minimum);\n    v0 = v1 = address(varg0) != 0;\n    if (v1) {\n        v0 = v2 = address(varg0) != msg.sender;\n    }\n    if (v0) {\n        v3 = address(varg0);\n        v0 = v4 = _checkInvestments[v3] >= _stakingRequirement;\n    }\n    if (v0) {\n        v5 = 0x1259(5, msg.value);\n        assert(100);\n        v6 = address(varg0);\n        assert(_checkReferral[v6] + v5 / 100 >= _checkReferral[v6]);\n        v7 = address(varg0);\n        _checkReferral[v7] = _checkReferral[v6] + v5 / 100;\n    }\n    if (_checkInvestments[msg.sender] > 0) {\n        v8 = 0x9be();\n        if (v8) {\n            _checkWithdrawals[msg.sender] = 0;\n        }\n    }\n    assert(_checkInvestments[msg.sender] + msg.value >= _checkInvestments[msg.sender]);\n    _checkInvestments[msg.sender] = _checkInvestments[msg.sender] + msg.value;\n    _checkRecentInvestment[msg.sender] = msg.value;\n    _getMinutes[msg.sender] = block.timestamp;\n    v9 = 0x1259(5, msg.value);\n    assert(100);\n    v10 = _ownerWallet.call().value(v9 / 100).gas(!(v9 / 100) * 2300);\n    require(v10); // checks call status, propagates error data on error\n    emit Invest(msg.sender, msg.value);\n    return ;\n}\n\nfunction 0x9be() private { \n    require(_getMinutes[msg.sender] > 0);\n    v0 = 0x1024(msg.sender);\n    if ((address(this)).balance <= v0) {\n        v1 = v2 = 0;\n    } else {\n        if (v0 > 0) {\n            assert(_checkWithdrawals[msg.sender] + v0 >= _checkWithdrawals[msg.sender]);\n            _checkWithdrawals[msg.sender] = _checkWithdrawals[msg.sender] + v0;\n            v3 = msg.sender.call().value(v0).gas(!v0 * 2300);\n            require(v3); // checks call status, propagates error data on error\n            emit Withdraw(msg.sender, v0);\n        }\n        v1 = v4 = 1;\n    }\n    return v1;\n}\n\nfunction fallback() public payable { \n    0x535(0);\n}\n\nfunction checkReferral(address varg0) public nonPayable { \n    return _checkReferral[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0xc19f80e == function_selector) {\n            checkReferral(address);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4484780b == function_selector) {\n            checkRecentInvestment(address);\n        } else if (0x52d6804d == function_selector) {\n            minimum();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x6d435421 == function_selector) {\n            transferOwnership(address,address);\n        } else if (0x835c1154 == function_selector) {\n            checkInvestments(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9335dcb7 == function_selector) {\n            ownerWallet();\n        } else if (0x943dfef1 == function_selector) {\n            bounty();\n        } else if (0x9d9fcc72 == function_selector) {\n            checkWithdrawals(address);\n        } else if (0xc71daccb == function_selector) {\n            checkBalance();\n        } else if (0xe25fe175 == function_selector) {\n            step();\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xf2729d8a == function_selector) {\n            getMinutes(address);\n        } else if (0xf8b2cb4f == function_selector) {\n            getBalance(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 06:19 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _checkInvestments; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _checkRecentInvestment; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _getMinutes; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _checkWithdrawals; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _checkReferral; // STORAGE[0x4]\nuint256 _step; // STORAGE[0x5]\nuint256 _minimum; // STORAGE[0x6]\nuint256 _stakingRequirement; // STORAGE[0x7]\naddress _ownerWallet; // STORAGE[0x8] bytes 0 to 19\naddress _owner; // STORAGE[0x9] bytes 0 to 19\n\n// Events\nInvest(address, uint256);\nWithdraw(address, uint256);\nOwnershipTransferred(address, address);\nBounty(address, uint256);\n\nfunction 0x1024(uint256 varg0) private { \n    v0 = address(varg0);\n    assert(_getMinutes[v0] <= block.timestamp);\n    assert(60);\n    if ((block.timestamp - _getMinutes[v0]) / 60 >= 4321) {\n        v1 = address(varg0);\n        v2 = 0x1259(150, _checkRecentInvestment[v1]);\n        assert(100);\n        v3 = address(varg0);\n        assert(_checkWithdrawals[v3] <= v2 / 100);\n        v4 = v2 / 100 - _checkWithdrawals[v3];\n    } else {\n        v5 = address(varg0);\n        v6 = 0x1259(_step, _checkRecentInvestment[v5]);\n        assert(100);\n        v7 = 0x1259((block.timestamp - _getMinutes[v0]) / 60, v6 / 100);\n        assert(1440);\n        v8 = address(varg0);\n        assert(_checkWithdrawals[v8] <= v7 / 1440);\n        v4 = v9 = v7 / 1440 - _checkWithdrawals[v8];\n    }\n    return v4;\n}\n\nfunction 0x1259(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = v1 = varg1 * varg0;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction withdraw() public nonPayable { \n    v0 = 0x9be();\n    return v0;\n}\n\nfunction checkRecentInvestment(address varg0) public nonPayable { \n    return _checkRecentInvestment[varg0];\n}\n\nfunction minimum() public nonPayable { \n    return _minimum;\n}\n\nfunction stakingRequirement() public nonPayable { \n    return _stakingRequirement;\n}\n\nfunction transferOwnership(address varg0, address varg1) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n    _ownerWallet = varg1;\n}\n\nfunction checkInvestments(address varg0) public nonPayable { \n    return _checkInvestments[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction ownerWallet() public nonPayable { \n    return _ownerWallet;\n}\n\nfunction bounty() public nonPayable { \n    if (_checkReferral[msg.sender] >= _minimum) {\n        if ((address(this)).balance > _checkReferral[msg.sender]) {\n            _checkReferral[msg.sender] = 0;\n            v0 = msg.sender.call().value(_checkReferral[msg.sender]).gas(!_checkReferral[msg.sender] * 2300);\n            require(v0); // checks call status, propagates error data on error\n            emit Bounty(msg.sender, _checkReferral[msg.sender]);\n        }\n    }\n}\n\nfunction checkWithdrawals(address varg0) public nonPayable { \n    return _checkWithdrawals[varg0];\n}\n\nfunction checkBalance() public nonPayable { \n    v0 = 0x1024(msg.sender);\n    return v0;\n}\n\nfunction step() public nonPayable { \n    return _step;\n}\n\nfunction buy(address varg0) public payable { \n    0x535(varg0);\n}\n\nfunction getMinutes(address varg0) public nonPayable { \n    assert(_getMinutes[varg0] <= block.timestamp);\n    assert(60);\n    return (block.timestamp - _getMinutes[varg0]) / 60;\n}\n\nfunction getBalance(address varg0) public nonPayable { \n    v0 = 0x1024(varg0);\n    return v0;\n}\n\nfunction 0x535(uint256 varg0) private { \n    require(msg.value >= _minimum);\n    v0 = v1 = address(varg0) != 0;\n    if (v1) {\n        v0 = v2 = address(varg0) != msg.sender;\n    }\n    if (v0) {\n        v3 = address(varg0);\n        v0 = v4 = _checkInvestments[v3] >= _stakingRequirement;\n    }\n    if (v0) {\n        v5 = 0x1259(5, msg.value);\n        assert(100);\n        v6 = address(varg0);\n        assert(_checkReferral[v6] + v5 / 100 >= _checkReferral[v6]);\n        v7 = address(varg0);\n        _checkReferral[v7] = _checkReferral[v6] + v5 / 100;\n    }\n    if (_checkInvestments[msg.sender] > 0) {\n        v8 = 0x9be();\n        if (v8) {\n            _checkWithdrawals[msg.sender] = 0;\n        }\n    }\n    assert(_checkInvestments[msg.sender] + msg.value >= _checkInvestments[msg.sender]);\n    _checkInvestments[msg.sender] = _checkInvestments[msg.sender] + msg.value;\n    _checkRecentInvestment[msg.sender] = msg.value;\n    _getMinutes[msg.sender] = block.timestamp;\n    v9 = 0x1259(5, msg.value);\n    assert(100);\n    v10 = _ownerWallet.call().value(v9 / 100).gas(!(v9 / 100) * 2300);\n    require(v10); // checks call status, propagates error data on error\n    emit Invest(msg.sender, msg.value);\n    return ;\n}\n\nfunction 0x9be() private { \n    require(_getMinutes[msg.sender] > 0);\n    v0 = 0x1024(msg.sender);\n    if ((address(this)).balance <= v0) {\n        v1 = v2 = 0;\n    } else {\n        if (v0 > 0) {\n            assert(_checkWithdrawals[msg.sender] + v0 >= _checkWithdrawals[msg.sender]);\n            _checkWithdrawals[msg.sender] = _checkWithdrawals[msg.sender] + v0;\n            v3 = msg.sender.call().value(v0).gas(!v0 * 2300);\n            require(v3); // checks call status, propagates error data on error\n            emit Withdraw(msg.sender, v0);\n        }\n        v1 = v4 = 1;\n    }\n    return v1;\n}\n\nfunction fallback() public payable { \n    0x535(0);\n}\n\nfunction checkReferral(address varg0) public nonPayable { \n    return _checkReferral[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0xc19f80e == function_selector) {\n            checkReferral(address);\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4484780b == function_selector) {\n            checkRecentInvestment(address);\n        } else if (0x52d6804d == function_selector) {\n            minimum();\n        } else if (0x56d399e8 == function_selector) {\n            stakingRequirement();\n        } else if (0x6d435421 == function_selector) {\n            transferOwnership(address,address);\n        } else if (0x835c1154 == function_selector) {\n            checkInvestments(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9335dcb7 == function_selector) {\n            ownerWallet();\n        } else if (0x943dfef1 == function_selector) {\n            bounty();\n        } else if (0x9d9fcc72 == function_selector) {\n            checkWithdrawals(address);\n        } else if (0xc71daccb == function_selector) {\n            checkBalance();\n        } else if (0xe25fe175 == function_selector) {\n            step();\n        } else if (0xf088d547 == function_selector) {\n            buy(address);\n        } else if (0xf2729d8a == function_selector) {\n            getMinutes(address);\n        } else if (0xf8b2cb4f == function_selector) {\n            getBalance(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 28.112672805786133,
	"usage": {
		"completion_tokens": 750,
		"prompt_tokens": 2155,
		"total_tokens": 2905
	}
}