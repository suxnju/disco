{
	"address": "0xa9375923ddb69cd32955f536a351007415c02696",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Following is a Solidity contract code that reflects the functionality represented by the given EVM Bytecode:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract {\n    uint256 public fee;\n    address public owner;\n    uint256 public totalFees;\n    uint256 public orderCount;\n    mapping(uint256 => Order) public orders;\n    mapping(address => uint256) public balances;\n    mapping(address => uint256) public addressIndex;\n    address public feeToken;\n    address public poolOwners;\n\n    struct Order {\n        uint256 orderType;\n        address orderAddress;\n        uint256 price;\n        uint256 amount;\n    }\n\n    function setFee(uint256 _fee) public {\n        require(msg.sender == owner, \"Sender not authorised\");\n        require(_fee <= 0x06f05b59d3b20000, \"Fee exceeds 50%\");\n        fee = _fee;\n    }\n\n    function transferOwnership(address _newOwner) public {\n        require(msg.sender == owner, \"Sender not authorised\");\n        require(_newOwner != address(0), \"Invalid address\");\n        owner = _newOwner;\n    }\n\n    function addBuyOrder(uint256 price, uint256 amount) public {\n        require(price > 0, \"Price needs to be greater than 0\");\n        require(amount > 0, \"Amount needs to be greater than 0\");\n        orders[orderCount] = Order(1, msg.sender, price, amount);\n        orderCount++;\n    }\n\n    function removeBuyOrder(uint256 orderId) public {\n        require(orders[orderId].orderType == 1, \"This is not a buy order\");\n        require(orders[orderId].orderAddress == msg.sender, \"You are not the sender of this order\");\n        delete orders[orderId];\n    }\n\n    function withdrawDistributedToPoolOwners() public {\n        require(balances[msg.sender] > 0, \"No distributed fee token balance in the contract\");\n        balances[msg.sender] = 0;\n    }\n\n    function withdrawFeeToken(uint256 amount) public {\n        require(balances[msg.sender] >= amount, \"Withdrawing more than your balance\");\n        balances[msg.sender] -= amount;\n    }\n}\n```\n\nPlease note that this is a simplified interpretation of the decompiled code. The original contract might contain more features and checks. Also, the original contract might be using a different version of Solidity, and hence, some commands might behave differently.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474379,
	"id": "chatcmpl-8MvM3JRfAAGZbLcOYY7nq7cHz8gcN",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x0559c114) {\n            // Dispatch table entry for removeSellOrder(uint256)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var var2 = msg.data[0x04:0x24];\n            var var3 = 0x00;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n            var var7 = var6;\n            var var8 = var7;\n            var var9 = 0x05d9;\n            var var10 = 0x08;\n            var var11 = var2;\n            var9 = func_233B(var10, var11);\n            var3 = var9;\n            var temp0 = var3 / 0x02 ** 0xfe;\n            var9 = temp0;\n        \n            if (var9 > 0x02) { assert(); }\n        \n            var temp1 = var9;\n            var4 = temp1;\n            var9 = 0x02;\n            var10 = var4;\n        \n            if (var10 > 0x02) { assert(); }\n        \n            if (var10 == var9) {\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x07;\n                var5 = storage[keccak256(memory[0x00:0x40])];\n            \n                if (var5 == (var3 * 0x04) / 0x02 ** 0xe0) {\n                    var temp2 = var3;\n                    var6 = (temp2 * 0x0400000000) / 0x02 ** 0x91;\n                    var7 = (temp2 * 0x02 ** 0x91) / 0x02 ** 0x91;\n                    var9 = 0x0712;\n                    var10 = 0x08;\n                    var11 = var2;\n                    var9 = func_2351(var10, var11);\n                \n                    if (var9) {\n                        var9 = 0x0760;\n                        var10 = var6;\n                        var11 = var7;\n                    \n                    label_09E1:\n                        var var12 = 0x00;\n                        var var13 = 0x0a2c;\n                        var var14 = 0x0de0b6b3a7640000;\n                        var var15 = 0x0a14;\n                        var var16 = storage[0x02];\n                        var var17 = 0x0a20;\n                        var var18 = 0x0de0b6b3a7640000;\n                        var var19 = 0x0a14;\n                        var var20 = var10;\n                        var var21 = var11;\n                        var19 = func_246E(var20, var21);\n                        var17 = func_0A14(var18, var19);\n                        var15 = func_0A20(var16, var17);\n                        var13 = func_0A14(var14, var15);\n                    \n                    label_0A2C:\n                        var9 = var13;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n                        memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x11;\n                        var temp4 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x26cb:0x26eb];\n                        var temp5 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp4;\n                        memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = temp5;\n                        var temp6 = memory[0x40:0x60];\n                        revert(memory[temp6:temp6 + temp3 - temp6 + 0x64]);\n                    }\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x24;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x596f7520617265206e6f74207468652073656e646572206f662074686973206f;\n                    memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7264657200000000000000000000000000000000000000000000000000000000;\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + temp7 - temp8 + 0x84]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x18;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x54686973206973206e6f7420612073656c6c206f726465720000000000000000;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else if (var0 == 0x05e0141d) {\n            // Dispatch table entry for getOrders(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24];\n            var1, var2, var3, var4, var5 = getOrders(var2);\n            var6 = memory[0x40:0x60];\n            var7 = var6;\n            var8 = var1;\n            var9 = 0x0140;\n            var10 = var9;\n            var11 = var7;\n            var12 = var8;\n            var13 = 0x00;\n        \n            if (var13 >= var10) {\n            label_01AD:\n                var temp11 = var9 + var7;\n                var7 = temp11;\n                var8 = var2;\n                var9 = 0x20 * 0x0a;\n                var10 = var9;\n                var11 = var7;\n                var12 = var8;\n                var13 = 0x00;\n            \n                if (var13 >= var10) {\n                label_01D8:\n                    var temp12 = var9 + var7;\n                    var7 = temp12;\n                    var8 = var3;\n                    var9 = 0x20 * 0x0a;\n                    var10 = var9;\n                    var11 = var7;\n                    var12 = var8;\n                    var13 = 0x00;\n                \n                    if (var13 >= var10) {\n                    label_0203:\n                        var temp13 = var9 + var7;\n                        var7 = temp13;\n                        var8 = var4;\n                        var9 = 0x20 * 0x0a;\n                        var10 = var9;\n                        var11 = var7;\n                        var12 = var8;\n                        var13 = 0x00;\n                    \n                        if (var13 >= var10) {\n                        label_022E:\n                            var temp14 = var9 + var7;\n                            var7 = temp14;\n                            var8 = var5;\n                            var9 = 0x20 * 0x0a;\n                            var10 = var9;\n                            var11 = var7;\n                            var12 = var8;\n                            var13 = 0x00;\n                        \n                            if (var13 >= var10) {\n                            label_0259:\n                                var temp15 = memory[0x40:0x60];\n                                return memory[temp15:temp15 + (var9 + var7) - temp15];\n                            } else {\n                            label_024A:\n                                var temp16 = var13;\n                                memory[temp16 + var11:temp16 + var11 + 0x20] = memory[temp16 + var12:temp16 + var12 + 0x20];\n                                var13 = temp16 + 0x20;\n                            \n                                if (var13 >= var10) { goto label_0259; }\n                                else { goto label_024A; }\n                            }\n                        } else {\n                        label_021F:\n                            var temp17 = var13;\n                            memory[temp17 + var11:temp17 + var11 + 0x20] = memory[temp17 + var12:temp17 + var12 + 0x20];\n                            var13 = temp17 + 0x20;\n                        \n                            if (var13 >= var10) { goto label_022E; }\n                            else { goto label_021F; }\n                        }\n                    } else {\n                    label_01F4:\n                        var temp18 = var13;\n                        memory[temp18 + var11:temp18 + var11 + 0x20] = memory[temp18 + var12:temp18 + var12 + 0x20];\n                        var13 = temp18 + 0x20;\n                    \n                        if (var13 >= var10) { goto label_0203; }\n                        else { goto label_01F4; }\n                    }\n                } else {\n                label_01C9:\n                    var temp19 = var13;\n                    memory[temp19 + var11:temp19 + var11 + 0x20] = memory[temp19 + var12:temp19 + var12 + 0x20];\n                    var13 = temp19 + 0x20;\n                \n                    if (var13 >= var10) { goto label_01D8; }\n                    else { goto label_01C9; }\n                }\n            } else {\n            label_019E:\n                var temp20 = var13;\n                memory[temp20 + var11:temp20 + var11 + 0x20] = memory[temp20 + var12:temp20 + var12 + 0x20];\n                var13 = temp20 + 0x20;\n            \n                if (var13 >= var10) { goto label_01AD; }\n                else { goto label_019E; }\n            }\n        } else if (var0 == 0x13114a9d) {\n            // Dispatch table entry for totalFees()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = totalFees();\n        \n        label_0285:\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = var2;\n            var temp22 = memory[0x40:0x60];\n            return memory[temp22:temp22 + temp21 - temp22 + 0x20];\n        } else if (var0 == 0x169c4733) {\n            // Dispatch table entry for feeForOrder(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            goto label_09E1;\n        } else if (var0 == 0x1a3352c1) {\n            // Dispatch table entry for getOrderBookSize()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var1 = getOrderBookSize();\n            goto label_0285;\n        } else if (var0 == 0x1c76e2b2) {\n            // Dispatch table entry for getOrderBookKey(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24];\n            var1 = getOrderBookKey(var2);\n            goto label_0285;\n        } else if (var0 == 0x2453ffa8) {\n            // Dispatch table entry for orderCount()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = orderCount();\n            goto label_0285;\n        } else if (var0 == 0x3acde419) {\n            // Dispatch table entry for addSellOrder(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = 0x00;\n            var5 = var4;\n            var6 = 0x0a8b;\n            var7 = var2;\n            var6 = func_24A9(var7);\n        \n            if (!var6) {\n            label_0A9B:\n            \n                if (!var6) {\n                    var temp27 = memory[0x40:0x60];\n                    memory[temp27:temp27 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp27 + 0x04:temp27 + 0x04 + 0x20] = 0x20;\n                    memory[temp27 + 0x24:temp27 + 0x24 + 0x20] = 0x20;\n                    memory[temp27 + 0x44:temp27 + 0x44 + 0x20] = 0x5072696365206f7220616d6f756e742065786365656473203131312062697473;\n                    var temp28 = memory[0x40:0x60];\n                    revert(memory[temp28:temp28 + temp27 - temp28 + 0x64]);\n                } else if (var2 <= 0x00) {\n                    var temp25 = memory[0x40:0x60];\n                    memory[temp25:temp25 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n                    memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x20;\n                    memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = 0x5072696365206e6565647320746f2062652067726561746572207468616e2030;\n                    var temp26 = memory[0x40:0x60];\n                    revert(memory[temp26:temp26 + temp25 - temp26 + 0x64]);\n                } else if (var3 > 0x00) {\n                    var6 = 0x0bd1;\n                    var7 = var2;\n                    var8 = var3;\n                    goto label_09E1;\n                } else {\n                    var temp23 = memory[0x40:0x60];\n                    memory[temp23:temp23 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp23 + 0x04:temp23 + 0x04 + 0x20] = 0x20;\n                    memory[temp23 + 0x24:temp23 + 0x24 + 0x20] = 0x21;\n                    memory[temp23 + 0x44:temp23 + 0x44 + 0x20] = 0x416d6f756e74206e6565647320746f2062652067726561746572207468616e20;\n                    memory[temp23 + 0x64:temp23 + 0x64 + 0x20] = 0x3000000000000000000000000000000000000000000000000000000000000000;\n                    var temp24 = memory[0x40:0x60];\n                    revert(memory[temp24:temp24 + temp23 - temp24 + 0x84]);\n                }\n            } else {\n                var6 = 0x0a9b;\n                var7 = var3;\n                var6 = func_24A9(var7);\n                goto label_0A9B;\n            }\n        } else if (var0 == 0x3d48f3af) {\n            // Dispatch table entry for costOfOrder(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = 0x00;\n            var5 = 0x0a2c;\n            var6 = 0x0de0b6b3a7640000;\n            var7 = 0x0a14;\n            var8 = var2;\n            var9 = var3;\n            var7 = func_246E(var8, var9);\n            var5 = func_0A14(var6, var7);\n            goto label_0A2C;\n        } else if (var0 == 0x410ac68c) {\n            // Dispatch table entry for 0x410ac68c (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = func_0E0F();\n            goto label_0285;\n        } else if (var0 == 0x416c334d) {\n            // Dispatch table entry for withdrawDistributedToPoolOwners()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            withdrawDistributedToPoolOwners();\n            stop();\n        } else if (var0 == 0x647846a5) {\n            // Dispatch table entry for feeToken()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0369;\n            var2 = feeToken();\n        \n        label_0369:\n            var temp29 = memory[0x40:0x60];\n            memory[temp29:temp29 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp30 = memory[0x40:0x60];\n            return memory[temp30:temp30 + temp29 - temp30 + 0x20];\n        } else if (var0 == 0x69fe0e2d) {\n            // Dispatch table entry for setFee(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            setFee(var2);\n            stop();\n        } else if (var0 == 0x8cbcca07) {\n            // Dispatch table entry for fillBuyOrder(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var4 = var3;\n            var5 = var4;\n            var6 = var5;\n            var7 = var6;\n            var8 = var7;\n            var9 = var8;\n            var10 = var9;\n            var11 = 0x10ce;\n            var12 = 0x08;\n            var13 = var2;\n            var11 = func_233B(var12, var13);\n            var3 = var11;\n            var temp31 = var3 / 0x02 ** 0xfe;\n            var11 = temp31;\n        \n            if (var11 > 0x02) { assert(); }\n        \n            var temp32 = var11;\n            var4 = temp32;\n            var11 = 0x01;\n            var12 = var4;\n        \n            if (var12 > 0x02) { assert(); }\n        \n            if (var12 == var11) {\n                var11 = 0x1150;\n                var12 = msg.sender;\n                var11 = func_24BC(var12);\n                var5 = var11;\n            \n                if (var5 != (var3 * 0x04) / 0x02 ** 0xe0) {\n                    var temp33 = var3;\n                    var6 = (temp33 * 0x0400000000) / 0x02 ** 0x91;\n                    var7 = (temp33 * 0x02 ** 0x91) / 0x02 ** 0x91;\n                    var11 = 0x11d5;\n                    var12 = var6;\n                    var13 = var7;\n                    goto label_09E1;\n                } else {\n                    var temp34 = memory[0x40:0x60];\n                    memory[temp34:temp34 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp34 + 0x04:temp34 + 0x04 + 0x20] = 0x20;\n                    memory[temp34 + 0x24:temp34 + 0x24 + 0x20] = 0x1e;\n                    memory[temp34 + 0x44:temp34 + 0x44 + 0x20] = 0x596f752063616e6e6f742066696c6c20796f7572206f776e206f726465720000;\n                    var temp35 = memory[0x40:0x60];\n                    revert(memory[temp35:temp35 + temp34 - temp35 + 0x64]);\n                }\n            } else {\n                var temp36 = memory[0x40:0x60];\n                memory[temp36:temp36 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp36 + 0x04:temp36 + 0x04 + 0x20] = 0x20;\n                memory[temp36 + 0x24:temp36 + 0x24 + 0x20] = 0x17;\n                memory[temp36 + 0x44:temp36 + 0x44 + 0x20] = 0x54686973206973206e6f74206120627579206f72646572000000000000000000;\n                var temp37 = memory[0x40:0x60];\n                revert(memory[temp37:temp37 + temp36 - temp37 + 0x64]);\n            }\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0369;\n            var2 = owner();\n            goto label_0369;\n        } else if (var0 == 0x9049681c) {\n            // Dispatch table entry for addBuyOrder(uint256,uint256)\n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = 0x00;\n            var5 = var4;\n            var6 = 0x00;\n            var7 = 0x1534;\n            var8 = var2;\n            var7 = func_24A9(var8);\n        \n            if (!var7) {\n            label_1544:\n            \n                if (!var7) {\n                    var temp42 = memory[0x40:0x60];\n                    memory[temp42:temp42 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp42 + 0x04:temp42 + 0x04 + 0x20] = 0x20;\n                    memory[temp42 + 0x24:temp42 + 0x24 + 0x20] = 0x20;\n                    memory[temp42 + 0x44:temp42 + 0x44 + 0x20] = 0x5072696365206f7220616d6f756e742065786365656473203131312062697473;\n                    var temp43 = memory[0x40:0x60];\n                    revert(memory[temp43:temp43 + temp42 - temp43 + 0x64]);\n                } else if (var2 <= 0x00) {\n                    var temp40 = memory[0x40:0x60];\n                    memory[temp40:temp40 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp40 + 0x04:temp40 + 0x04 + 0x20] = 0x20;\n                    memory[temp40 + 0x24:temp40 + 0x24 + 0x20] = 0x20;\n                    memory[temp40 + 0x44:temp40 + 0x44 + 0x20] = 0x5072696365206e6565647320746f2062652067726561746572207468616e2030;\n                    var temp41 = memory[0x40:0x60];\n                    revert(memory[temp41:temp41 + temp40 - temp41 + 0x64]);\n                } else if (var3 > 0x00) {\n                    var7 = 0x167a;\n                    var8 = var2;\n                    var9 = var3;\n                    goto label_09E1;\n                } else {\n                    var temp38 = memory[0x40:0x60];\n                    memory[temp38:temp38 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp38 + 0x04:temp38 + 0x04 + 0x20] = 0x20;\n                    memory[temp38 + 0x24:temp38 + 0x24 + 0x20] = 0x21;\n                    memory[temp38 + 0x44:temp38 + 0x44 + 0x20] = 0x416d6f756e74206e6565647320746f2062652067726561746572207468616e20;\n                    memory[temp38 + 0x64:temp38 + 0x64 + 0x20] = 0x3000000000000000000000000000000000000000000000000000000000000000;\n                    var temp39 = memory[0x40:0x60];\n                    revert(memory[temp39:temp39 + temp38 - temp39 + 0x84]);\n                }\n            } else {\n                var7 = 0x1544;\n                var8 = var3;\n                var7 = func_24A9(var8);\n                goto label_1544;\n            }\n        } else if (var0 == 0x935c1fb1) {\n            // Dispatch table entry for addressIndex(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = addressIndex(var2);\n            goto label_0285;\n        } else if (var0 == 0xa4c0ed36) {\n            // Dispatch table entry for onTokenTransfer(address,uint256,bytes)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp44 = memory[0x40:0x60];\n            var temp45 = msg.data[0x44:0x64];\n            var temp46 = msg.data[temp45 + 0x04:temp45 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp44 + (temp46 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp44:temp44 + 0x20] = temp46;\n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            memory[temp44 + 0x20:temp44 + 0x20 + temp46] = msg.data[temp45 + 0x24:temp45 + 0x24 + temp46];\n            var4 = temp44;\n            onTokenTransfer(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xaa072d0c) {\n            // Dispatch table entry for 0xaa072d0c (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24];\n            var2 = func_19D9(var2);\n            goto label_0285;\n        } else if (var0 == 0xc375fcfa) {\n            // Dispatch table entry for poolOwners()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0369;\n            var2 = poolOwners();\n            goto label_0369;\n        } else if (var0 == 0xc3aea22e) {\n            // Dispatch table entry for fillSellOrder(uint256)\n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var4 = var3;\n            var5 = var4;\n            var6 = var5;\n            var7 = var6;\n            var8 = var7;\n            var9 = var8;\n            var10 = var9;\n            var11 = 0x1a14;\n            var12 = 0x08;\n            var13 = var2;\n            var11 = func_233B(var12, var13);\n            var3 = var11;\n            var temp47 = var3 / 0x02 ** 0xfe;\n            var11 = temp47;\n        \n            if (var11 > 0x02) { assert(); }\n        \n            var temp48 = var11;\n            var4 = temp48;\n            var11 = 0x02;\n            var12 = var4;\n        \n            if (var12 > 0x02) { assert(); }\n        \n            if (var12 == var11) {\n                var11 = 0x1a96;\n                var12 = msg.sender;\n                var11 = func_24BC(var12);\n                var5 = var11;\n            \n                if (var5 != (var3 * 0x04) / 0x02 ** 0xe0) {\n                    var temp49 = var3;\n                    var6 = (temp49 * 0x0400000000) / 0x02 ** 0x91;\n                    var7 = (temp49 * 0x02 ** 0x91) / 0x02 ** 0x91;\n                    var11 = 0x1b1b;\n                    var12 = var6;\n                    var13 = var7;\n                    goto label_09E1;\n                } else {\n                    var temp50 = memory[0x40:0x60];\n                    memory[temp50:temp50 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp50 + 0x04:temp50 + 0x04 + 0x20] = 0x20;\n                    memory[temp50 + 0x24:temp50 + 0x24 + 0x20] = 0x1e;\n                    memory[temp50 + 0x44:temp50 + 0x44 + 0x20] = 0x596f752063616e6e6f742066696c6c20796f7572206f776e206f726465720000;\n                    var temp51 = memory[0x40:0x60];\n                    revert(memory[temp51:temp51 + temp50 - temp51 + 0x64]);\n                }\n            } else {\n                var temp52 = memory[0x40:0x60];\n                memory[temp52:temp52 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp52 + 0x04:temp52 + 0x04 + 0x20] = 0x20;\n                memory[temp52 + 0x24:temp52 + 0x24 + 0x20] = 0x18;\n                memory[temp52 + 0x44:temp52 + 0x44 + 0x20] = 0x54686973206973206e6f7420612073656c6c206f726465720000000000000000;\n                var temp53 = memory[0x40:0x60];\n                revert(memory[temp53:temp53 + temp52 - temp53 + 0x64]);\n            }\n        } else if (var0 == 0xd05bb517) {\n            // Dispatch table entry for withdrawFeeToken(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            withdrawFeeToken(var2);\n            stop();\n        } else if (var0 == 0xd09ef241) {\n            // Dispatch table entry for getOrder(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04ca;\n            var2 = msg.data[0x04:0x24];\n            var1, var2, var3, var4 = getOrder(var2);\n            var5 = memory[0x40:0x60];\n            var6 = var5;\n            var7 = var1;\n        \n            if (var7 > 0x02) { assert(); }\n        \n            var temp54 = var6;\n            memory[temp54:temp54 + 0x20] = var7 & 0xff;\n            memory[temp54 + 0x20:temp54 + 0x20 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            memory[temp54 + 0x40:temp54 + 0x40 + 0x20] = var3;\n            memory[temp54 + 0x60:temp54 + 0x60 + 0x20] = var4;\n            var temp55 = memory[0x40:0x60];\n            return memory[temp55:temp55 + temp54 - temp55 + 0x80];\n        } else if (var0 == 0xddca3f43) {\n            // Dispatch table entry for fee()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = fee();\n            goto label_0285;\n        } else if (var0 == 0xdef8ecf4) {\n            // Dispatch table entry for removeBuyOrder(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var4 = var3;\n            var5 = var4;\n            var6 = var5;\n            var7 = var6;\n            var8 = var7;\n            var9 = var8;\n            var10 = 0x1f62;\n            var11 = 0x08;\n            var12 = var2;\n            var10 = func_233B(var11, var12);\n            var3 = var10;\n            var temp56 = var3 / 0x02 ** 0xfe;\n            var10 = temp56;\n        \n            if (var10 > 0x02) { assert(); }\n        \n            var temp57 = var10;\n            var4 = temp57;\n            var10 = 0x01;\n            var11 = var4;\n        \n            if (var11 > 0x02) { assert(); }\n        \n            if (var11 == var10) {\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x07;\n                var5 = storage[keccak256(memory[0x00:0x40])];\n            \n                if (var5 == (var3 * 0x04) / 0x02 ** 0xe0) {\n                    var temp58 = var3;\n                    var6 = (temp58 * 0x0400000000) / 0x02 ** 0x91;\n                    var7 = (temp58 * 0x02 ** 0x91) / 0x02 ** 0x91;\n                    var10 = 0x209b;\n                    var11 = 0x08;\n                    var12 = var2;\n                    var10 = func_2351(var11, var12);\n                \n                    if (var10) {\n                        var10 = 0x20e9;\n                        var11 = var6;\n                        var12 = var7;\n                        goto label_09E1;\n                    } else {\n                        var temp59 = memory[0x40:0x60];\n                        memory[temp59:temp59 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp59 + 0x04:temp59 + 0x04 + 0x20] = 0x20;\n                        memory[temp59 + 0x24:temp59 + 0x24 + 0x20] = 0x11;\n                        var temp60 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x26cb:0x26eb];\n                        var temp61 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp60;\n                        memory[temp59 + 0x44:temp59 + 0x44 + 0x20] = temp61;\n                        var temp62 = memory[0x40:0x60];\n                        revert(memory[temp62:temp62 + temp59 - temp62 + 0x64]);\n                    }\n                } else {\n                    var temp63 = memory[0x40:0x60];\n                    memory[temp63:temp63 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp63 + 0x04:temp63 + 0x04 + 0x20] = 0x20;\n                    memory[temp63 + 0x24:temp63 + 0x24 + 0x20] = 0x24;\n                    memory[temp63 + 0x44:temp63 + 0x44 + 0x20] = 0x596f7520617265206e6f74207468652073656e646572206f662074686973206f;\n                    memory[temp63 + 0x64:temp63 + 0x64 + 0x20] = 0x7264657200000000000000000000000000000000000000000000000000000000;\n                    var temp64 = memory[0x40:0x60];\n                    revert(memory[temp64:temp64 + temp63 - temp64 + 0x84]);\n                }\n            } else {\n                var temp65 = memory[0x40:0x60];\n                memory[temp65:temp65 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp65 + 0x04:temp65 + 0x04 + 0x20] = 0x20;\n                memory[temp65 + 0x24:temp65 + 0x24 + 0x20] = 0x17;\n                memory[temp65 + 0x44:temp65 + 0x44 + 0x20] = 0x54686973206973206e6f74206120627579206f72646572000000000000000000;\n                var temp66 = memory[0x40:0x60];\n                revert(memory[temp66:temp66 + temp65 - temp66 + 0x64]);\n            }\n        } else if (var0 == 0xe96716ee) {\n            // Dispatch table entry for 0xe96716ee (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0369;\n            var2 = msg.data[0x04:0x24];\n            var2 = func_21C2(var2);\n            goto label_0369;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            transferOwnership(var2);\n            stop();\n        } else if (var0 == 0xf8b42f78) {\n            // Dispatch table entry for getOrderBookKeys(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0588;\n            var2 = msg.data[0x04:0x24];\n            var1 = getOrderBookKeys(var2);\n            var2 = memory[0x40:0x60];\n            var3 = var2;\n            var4 = var1;\n            var5 = 0x0140;\n            var6 = var5;\n            var7 = var3;\n            var8 = var4;\n            var9 = 0x00;\n        \n            if (var9 >= var6) {\n            label_05AE:\n                var temp67 = memory[0x40:0x60];\n                return memory[temp67:temp67 + (var5 + var3) - temp67];\n            } else {\n            label_059F:\n                var temp68 = var9;\n                memory[temp68 + var7:temp68 + var7 + 0x20] = memory[temp68 + var8:temp68 + var8 + 0x20];\n                var9 = temp68 + 0x20;\n            \n                if (var9 >= var6) { goto label_05AE; }\n                else { goto label_059F; }\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getOrders(var arg0) returns (var r0, var arg0, var r2, var r3, var r4) {\n        r2 = 0x0880;\n        r2 = func_264D();\n        r3 = 0x0888;\n        r3 = func_264D();\n        r4 = 0x0890;\n        r4 = func_264D();\n        var var3 = 0x0898;\n        var3 = func_264D();\n        var var4 = 0x08a0;\n        var4 = func_264D();\n        var var5 = 0x00;\n        var var6 = var5;\n        var var7 = var6;\n    \n        if (var7 >= 0x0a) {\n        label_09CF:\n            var temp0 = r4;\n            r4 = var4;\n            var temp1 = r2;\n            r2 = temp0;\n            r0 = temp1;\n            var temp2 = r3;\n            r3 = var3;\n            arg0 = temp2;\n            return r0, arg0, r2, r3, r4;\n        } else {\n        label_08AF:\n            var var8 = arg0 + var5;\n            var var9 = 0x08bb;\n            var var10 = 0x08;\n            var9 = func_2441(var10);\n        \n            if (var9 == var8) { goto label_09CF; }\n        \n            var8 = 0x08d9;\n            var9 = 0x08;\n            var10 = var5 + arg0;\n            var8 = func_2448(var9, var10);\n            var6 = var8;\n            var8 = var6;\n            var9 = r2;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            memory[var10 * 0x20 + var9:var10 * 0x20 + var9 + 0x20] = var8;\n            var8 = 0x08fe;\n            var9 = 0x08;\n            var10 = var6;\n            var8 = func_233B(var9, var10);\n            var temp3 = var8;\n            var7 = temp3;\n            var8 = 0x06;\n            var9 = (var7 * 0x04) / 0x02 ** 0xe0;\n        \n            if (var9 >= storage[var8]) { assert(); }\n        \n            memory[0x00:0x20] = var8;\n            var8 = storage[keccak256(memory[0x00:0x20]) + var9] & 0x02 ** 0xa0 - 0x01;\n            var9 = r3;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            memory[var10 * 0x20 + var9:var10 * 0x20 + var9 + 0x20] = var8 & 0x02 ** 0xa0 - 0x01;\n            var8 = var7 / 0x02 ** 0xfe;\n        \n            if (var8 > 0x02) { assert(); }\n        \n            var9 = r4;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            var temp4 = var10 * 0x20 + var9;\n            var temp5 = var8;\n            var9 = temp5;\n            var8 = temp4;\n        \n            if (var9 > 0x02) { assert(); }\n        \n            var temp6 = var8;\n            var temp7 = var9;\n            var8 = temp7;\n            var9 = temp6;\n            var10 = var8;\n        \n            if (var10 > 0x02) { assert(); }\n        \n            memory[var9:var9 + 0x20] = var10;\n            var8 = (var7 * 0x0400000000) / 0x02 ** 0x91;\n            var9 = var3;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            memory[var10 * 0x20 + var9:var10 * 0x20 + var9 + 0x20] = var8;\n            var8 = (var7 * 0x02 ** 0x91) / 0x02 ** 0x91;\n            var9 = var4;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            memory[var10 * 0x20 + var9:var10 * 0x20 + var9 + 0x20] = var8;\n            var7 = var7;\n            var5 = var5 + 0x01;\n        \n            if (var5 >= 0x0a) { goto label_09CF; }\n            else { goto label_08AF; }\n        }\n    }\n    \n    function totalFees() returns (var r0) { return storage[0x04]; }\n    \n    function func_0A14(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0A20(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_246E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getOrderBookSize() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0a3f;\n        var var2 = 0x08;\n        return func_2441(var2);\n    }\n    \n    function func_0A42(var arg0) returns (var r0) { return arg0; }\n    \n    function getOrderBookKey(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0a51;\n        var var2 = 0x08;\n        var1 = func_2441(var2);\n    \n        if (arg0 >= var1) {\n            var0 = 0x00;\n        \n        label_0A74:\n            return var0;\n        } else {\n            var1 = 0x0a69;\n            var2 = 0x08;\n            var var3 = arg0;\n            var1 = func_2448(var2, var3);\n            var0 = var1;\n            goto label_0A74;\n        }\n    }\n    \n    function orderCount() returns (var r0) { return storage[0x01]; }\n    \n    function func_0E0F() returns (var r0) { return storage[0x03]; }\n    \n    function withdrawDistributedToPoolOwners() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n        var var0 = 0x00;\n        var var1 = 0x0ebd;\n        var var2 = storage[0x04];\n        var var3 = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x70a08231;\n        var var5 = temp0 + 0x24;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = temp0 - var7 + 0x24;\n        var var9 = var7;\n        var var10 = var0;\n        var var11 = var3;\n        var var12 = !address(var11).code.length;\n    \n        if (var12) { revert(memory[0x00:0x00]); }\n    \n        var1 = func_0E85(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12);\n        var0 = var1;\n    \n        if (var0 > 0x00) {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = temp2 & storage[0x0a];\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = var0;\n            var1 = storage[0x0b] & temp2;\n            var2 = 0xa9059cbb;\n            var3 = temp1 + 0x44;\n            var4 = 0x20;\n            var5 = memory[0x40:0x60];\n            var6 = temp1 - var5 + 0x44;\n            var7 = var5;\n            var8 = 0x00;\n            var9 = var1;\n            var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp3;\n            temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp3;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 >= 0x20) { return; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var temp4 = returndata.length;\n                memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n            memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x39;\n            memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x5468657265206973206e6f2064697374726962757465642066656520746f6b65;\n            memory[temp5 + 0x64:temp5 + 0x64 + 0x20] = 0x6e2062616c616e636520696e2074686520636f6e747261637400000000000000;\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + temp5 - temp6 + 0x84]);\n        }\n    }\n    \n    function func_0E85(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10) returns (var r0) {\n        var temp0;\n        temp0, memory[arg5:arg5 + arg4] = address(arg9).call.gas(msg.gas).value(arg8)(memory[arg7:arg7 + arg6]);\n        arg4 = !temp0;\n    \n        if (!arg4) {\n            arg1 = memory[0x40:0x60];\n            arg2 = returndata.length;\n        \n            if (arg2 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg0;\n            arg0 = memory[arg1:arg1 + 0x20];\n            arg1 = temp1;\n            r0 = func_25CC(arg0, arg1);\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function feeToken() returns (var r0) { return storage[0x0b] & 0x02 ** 0xa0 - 0x01; }\n    \n    function setFee(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x15;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x53656e646572206e6f7420617574686f72697365640000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        } else if (arg0 <= 0x06f05b59d3b20000) {\n            storage[0x02] = arg0;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1b;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x466565732063616e2774206265206d6f7265207468616e203530250000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        }\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function addressIndex(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function onTokenTransfer(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (msg.sender == storage[0x0b] & 0x02 ** 0xa0 - 0x01) {\n            var var1 = 0x198c;\n            var var2 = arg0;\n            var1 = func_24BC(var2);\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x05;\n            var0 = var1;\n            var1 = 0x19ae;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = arg1;\n            var1 = func_2432(var2, var3);\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x19d0;\n            var2 = storage[0x04];\n            var3 = arg1;\n            var1 = func_2432(var2, var3);\n            storage[0x04] = var1;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x20;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x53656e646572206e6565647320746f206265207468652066656520746f6b656e;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        }\n    }\n    \n    function func_19D9(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function poolOwners() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function withdrawFeeToken(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x1d32;\n        var var2 = msg.sender;\n        var1 = func_24BC(var2);\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x05;\n        var0 = var1;\n    \n        if (arg0 <= storage[keccak256(memory[0x00:0x40])]) {\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x05;\n            var1 = 0x1de0;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = arg0;\n            var1 = func_25CC(var2, var3);\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x1e02;\n            var2 = storage[0x04];\n            var3 = arg0;\n            var1 = func_25CC(var2, var3);\n            storage[0x04] = var1;\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x05;\n        \n            if (storage[keccak256(memory[0x00:0x40])]) {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = arg0;\n                var1 = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n                var2 = 0xa9059cbb;\n                var3 = temp0 + 0x44;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = temp0 - var5 + 0x44;\n                var var7 = var5;\n                var var8 = 0x00;\n                var var9 = var1;\n                var var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n            label_1E97:\n                var temp1;\n                temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp1;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 >= 0x20) { return; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp2 = returndata.length;\n                    memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                memory[0x00:0x20] = var0;\n                memory[0x20:0x40] = 0x05;\n                storage[keccak256(memory[0x00:0x40])] = 0x00;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = msg.sender;\n                memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = arg0;\n                var1 = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n                var2 = 0xa9059cbb;\n                var3 = temp3 + 0x44;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = temp3 - var5 + 0x44;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (!var10) { goto label_1E97; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n            memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x29;\n            memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x596f75277265207769746864726177696e67206d6f7265207468616e20796f75;\n            memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x722062616c616e63650000000000000000000000000000000000000000000000;\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n        }\n    }\n    \n    function getOrder(var arg0) returns (var r0, var arg0, var r2, var r3) {\n        r2 = 0x00;\n        r3 = r2;\n        var var2 = r3;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = 0x1ede;\n        var var6 = 0x08;\n        var var7 = arg0;\n        var5 = func_233B(var6, var7);\n        var4 = var5;\n        var temp0 = var4 / 0x02 ** 0xfe;\n        var5 = temp0;\n    \n        if (var5 > 0x02) { assert(); }\n    \n        var6 = 0x06;\n        var7 = (var4 * 0x04) / 0x02 ** 0xe0;\n    \n        if (var7 >= storage[var6]) { assert(); }\n    \n        memory[0x00:0x20] = var6;\n        var temp1 = var4;\n        r3 = (temp1 * 0x02 ** 0x91) / 0x02 ** 0x91;\n        arg0 = storage[keccak256(memory[0x00:0x20]) + var7] & 0x02 ** 0xa0 - 0x01;\n        r2 = (temp1 * 0x0400000000) / 0x02 ** 0x91;\n        r0 = var5;\n        return r0, arg0, r2, r3;\n    }\n    \n    function fee() returns (var r0) { return storage[0x02]; }\n    \n    function func_21C2(var arg0) returns (var arg0) {\n        var var0 = 0x06;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x15;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x53656e646572206e6f7420617574686f72697365640000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0x02 ** 0xa0 - 0x01, stack[-1] & 0x02 ** 0xa0 - 0x01]);\n            storage[0x00] = (temp1 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getOrderBookKeys(var arg0) returns (var r0) {\n        var var0 = 0x22d1;\n        var0 = func_264D();\n        var var1 = 0x00;\n    \n        if (var1 >= 0x0a) {\n        label_2335:\n            return var0;\n        } else {\n        label_22DE:\n            var var2 = 0x22e7;\n            var var3 = 0x08;\n            var2 = func_2441(var3);\n        \n            if (var1 + arg0 >= var2) {\n                var2 = 0x00;\n                var3 = var0;\n                var var4 = var1;\n            \n                if (var4 >= 0x0a) { assert(); }\n            \n                memory[var4 * 0x20 + var3:var4 * 0x20 + var3 + 0x20] = var2;\n                var1 = var1 + 0x01;\n            \n            label_22D4:\n            \n                if (var1 >= 0x0a) { goto label_2335; }\n                else { goto label_22DE; }\n            } else {\n                var2 = 0x2303;\n                var3 = 0x08;\n                var4 = var1 + arg0;\n                var2 = func_2448(var3, var4);\n                var3 = var0;\n                var4 = var1;\n            \n                if (var4 >= 0x0a) { assert(); }\n            \n                memory[var4 * 0x20 + var3:var4 * 0x20 + var3 + 0x20] = var2;\n                var1 = var1 + 0x01;\n                goto label_22D4;\n            }\n        }\n    }\n    \n    function func_233B(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = arg0;\n        return storage[keccak256(memory[0x00:0x40]) + 0x01];\n    }\n    \n    function func_2351(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg1;\n        memory[0x20:0x40] = arg0;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n    \n        if (!storage[var1]) {\n            var0 = 0x00;\n            goto label_242B;\n        } else if (storage[var1] >= storage[arg0 + 0x01]) {\n        label_23F8:\n            var var2 = storage[arg0 + 0x01] + ~0x00;\n            var var3 = 0x240d;\n            var var4 = arg0 + 0x01;\n            var var5 = var2;\n            func_266D(var4, var5);\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = arg0;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = 0x00;\n            storage[temp0 + 0x01] = 0x00;\n            var0 = 0x01;\n        \n        label_242B:\n            return var0;\n        } else {\n            var2 = storage[var1];\n            var temp1 = storage[arg0 + 0x01];\n            var3 = arg0;\n            var5 = arg0 + 0x01;\n            var4 = 0x00;\n            var var6 = temp1 + ~0x00;\n        \n            if (var6 >= temp1) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp2 = var4;\n            memory[temp2:temp2 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])];\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var3;\n            storage[keccak256(memory[0x00:0x00 + temp2 + 0x40])] = var2;\n            var2 = arg0 + 0x01;\n            var temp3 = storage[var2];\n            var3 = temp3 + ~0x00;\n        \n            if (var3 >= temp3) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n            var2 = storage[keccak256(memory[0x00:0x20]) + var3];\n            var3 = arg0 + 0x01;\n            var4 = storage[var1] - 0x01;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            storage[keccak256(memory[0x00:0x20]) + var4] = var2;\n            goto label_23F8;\n        }\n    }\n    \n    function func_2432(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_2441(var arg0) returns (var r0) { return storage[arg0 + 0x01]; }\n    \n    function func_2448(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0 + 0x01;\n        var var2 = arg1;\n    \n        if (var2 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var1;\n        return storage[keccak256(memory[0x00:0x20]) + var2];\n    }\n    \n    function func_246E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_248A:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_248A;\n        }\n    }\n    \n    function func_24A9(var arg0) returns (var r0) { return 0x8000000000000000000000000000 > arg0; }\n    \n    function func_24BC(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])]) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n            goto label_0A74;\n        } else if (0x0100000000 > storage[0x06]) {\n            var temp0 = storage[0x06];\n            var temp1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x07;\n            storage[keccak256(memory[0x00:0x40])] = temp0;\n            storage[0x06] = temp0 + 0x01;\n            memory[0x00:0x20] = 0x06;\n            var temp2 = temp0 + 0xf652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f;\n            storage[temp2] = temp1 | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var0 = storage[0x06] + ~0x00;\n        \n        label_0A74:\n            return var0;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x20;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x526567697374657265642061646472657373657320686974206d6178696d756d;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        }\n    }\n    \n    function func_25CC(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_264D() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0140;\n        memory[temp0:temp0 + 0x0a * 0x20] = code[code.length:code.length + 0x0a * 0x20];\n        return temp0;\n    }\n    \n    function func_266D(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_0FD9:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x0fd9;\n            var var1 = 0x0a42;\n            var var2 = temp3 + temp4;\n            var var3 = arg1 + temp3;\n        \n            if (var2 <= var3) {\n                var1 = func_26A6(var2, var3);\n                var0 = func_0A42(var1);\n                goto label_0FD9;\n            } else {\n            label_269B:\n                var temp5 = var3;\n                storage[temp5] = 0x00;\n                var3 = temp5 + 0x01;\n            \n                if (var2 > var3) { goto label_269B; }\n            \n                var1 = func_26A6(var2, var3);\n                // Error: Could not resolve method call return address!\n            }\n        }\n    }\n    \n    function func_26A6(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x0559c114) {\n            // Dispatch table entry for removeSellOrder(uint256)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var var2 = msg.data[0x04:0x24];\n            var var3 = 0x00;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n            var var7 = var6;\n            var var8 = var7;\n            var var9 = 0x05d9;\n            var var10 = 0x08;\n            var var11 = var2;\n            var9 = func_233B(var10, var11);\n            var3 = var9;\n            var temp0 = var3 / 0x02 ** 0xfe;\n            var9 = temp0;\n        \n            if (var9 > 0x02) { assert(); }\n        \n            var temp1 = var9;\n            var4 = temp1;\n            var9 = 0x02;\n            var10 = var4;\n        \n            if (var10 > 0x02) { assert(); }\n        \n            if (var10 == var9) {\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x07;\n                var5 = storage[keccak256(memory[0x00:0x40])];\n            \n                if (var5 == (var3 * 0x04) / 0x02 ** 0xe0) {\n                    var temp2 = var3;\n                    var6 = (temp2 * 0x0400000000) / 0x02 ** 0x91;\n                    var7 = (temp2 * 0x02 ** 0x91) / 0x02 ** 0x91;\n                    var9 = 0x0712;\n                    var10 = 0x08;\n                    var11 = var2;\n                    var9 = func_2351(var10, var11);\n                \n                    if (var9) {\n                        var9 = 0x0760;\n                        var10 = var6;\n                        var11 = var7;\n                    \n                    label_09E1:\n                        var var12 = 0x00;\n                        var var13 = 0x0a2c;\n                        var var14 = 0x0de0b6b3a7640000;\n                        var var15 = 0x0a14;\n                        var var16 = storage[0x02];\n                        var var17 = 0x0a20;\n                        var var18 = 0x0de0b6b3a7640000;\n                        var var19 = 0x0a14;\n                        var var20 = var10;\n                        var var21 = var11;\n                        var19 = func_246E(var20, var21);\n                        var17 = func_0A14(var18, var19);\n                        var15 = func_0A20(var16, var17);\n                        var13 = func_0A14(var14, var15);\n                    \n                    label_0A2C:\n                        var9 = var13;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n                        memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x11;\n                        var temp4 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x26cb:0x26eb];\n                        var temp5 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp4;\n                        memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = temp5;\n                        var temp6 = memory[0x40:0x60];\n                        revert(memory[temp6:temp6 + temp3 - temp6 + 0x64]);\n                    }\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x24;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x596f7520617265206e6f74207468652073656e646572206f662074686973206f;\n                    memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7264657200000000000000000000000000000000000000000000000000000000;\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + temp7 - temp8 + 0x84]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x18;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x54686973206973206e6f7420612073656c6c206f726465720000000000000000;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else if (var0 == 0x05e0141d) {\n            // Dispatch table entry for getOrders(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24];\n            var1, var2, var3, var4, var5 = getOrders(var2);\n            var6 = memory[0x40:0x60];\n            var7 = var6;\n            var8 = var1;\n            var9 = 0x0140;\n            var10 = var9;\n            var11 = var7;\n            var12 = var8;\n            var13 = 0x00;\n        \n            if (var13 >= var10) {\n            label_01AD:\n                var temp11 = var9 + var7;\n                var7 = temp11;\n                var8 = var2;\n                var9 = 0x20 * 0x0a;\n                var10 = var9;\n                var11 = var7;\n                var12 = var8;\n                var13 = 0x00;\n            \n                if (var13 >= var10) {\n                label_01D8:\n                    var temp12 = var9 + var7;\n                    var7 = temp12;\n                    var8 = var3;\n                    var9 = 0x20 * 0x0a;\n                    var10 = var9;\n                    var11 = var7;\n                    var12 = var8;\n                    var13 = 0x00;\n                \n                    if (var13 >= var10) {\n                    label_0203:\n                        var temp13 = var9 + var7;\n                        var7 = temp13;\n                        var8 = var4;\n                        var9 = 0x20 * 0x0a;\n                        var10 = var9;\n                        var11 = var7;\n                        var12 = var8;\n                        var13 = 0x00;\n                    \n                        if (var13 >= var10) {\n                        label_022E:\n                            var temp14 = var9 + var7;\n                            var7 = temp14;\n                            var8 = var5;\n                            var9 = 0x20 * 0x0a;\n                            var10 = var9;\n                            var11 = var7;\n                            var12 = var8;\n                            var13 = 0x00;\n                        \n                            if (var13 >= var10) {\n                            label_0259:\n                                var temp15 = memory[0x40:0x60];\n                                return memory[temp15:temp15 + (var9 + var7) - temp15];\n                            } else {\n                            label_024A:\n                                var temp16 = var13;\n                                memory[temp16 + var11:temp16 + var11 + 0x20] = memory[temp16 + var12:temp16 + var12 + 0x20];\n                                var13 = temp16 + 0x20;\n                            \n                                if (var13 >= var10) { goto label_0259; }\n                                else { goto label_024A; }\n                            }\n                        } else {\n                        label_021F:\n                            var temp17 = var13;\n                            memory[temp17 + var11:temp17 + var11 + 0x20] = memory[temp17 + var12:temp17 + var12 + 0x20];\n                            var13 = temp17 + 0x20;\n                        \n                            if (var13 >= var10) { goto label_022E; }\n                            else { goto label_021F; }\n                        }\n                    } else {\n                    label_01F4:\n                        var temp18 = var13;\n                        memory[temp18 + var11:temp18 + var11 + 0x20] = memory[temp18 + var12:temp18 + var12 + 0x20];\n                        var13 = temp18 + 0x20;\n                    \n                        if (var13 >= var10) { goto label_0203; }\n                        else { goto label_01F4; }\n                    }\n                } else {\n                label_01C9:\n                    var temp19 = var13;\n                    memory[temp19 + var11:temp19 + var11 + 0x20] = memory[temp19 + var12:temp19 + var12 + 0x20];\n                    var13 = temp19 + 0x20;\n                \n                    if (var13 >= var10) { goto label_01D8; }\n                    else { goto label_01C9; }\n                }\n            } else {\n            label_019E:\n                var temp20 = var13;\n                memory[temp20 + var11:temp20 + var11 + 0x20] = memory[temp20 + var12:temp20 + var12 + 0x20];\n                var13 = temp20 + 0x20;\n            \n                if (var13 >= var10) { goto label_01AD; }\n                else { goto label_019E; }\n            }\n        } else if (var0 == 0x13114a9d) {\n            // Dispatch table entry for totalFees()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = totalFees();\n        \n        label_0285:\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = var2;\n            var temp22 = memory[0x40:0x60];\n            return memory[temp22:temp22 + temp21 - temp22 + 0x20];\n        } else if (var0 == 0x169c4733) {\n            // Dispatch table entry for feeForOrder(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            goto label_09E1;\n        } else if (var0 == 0x1a3352c1) {\n            // Dispatch table entry for getOrderBookSize()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var1 = getOrderBookSize();\n            goto label_0285;\n        } else if (var0 == 0x1c76e2b2) {\n            // Dispatch table entry for getOrderBookKey(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24];\n            var1 = getOrderBookKey(var2);\n            goto label_0285;\n        } else if (var0 == 0x2453ffa8) {\n            // Dispatch table entry for orderCount()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = orderCount();\n            goto label_0285;\n        } else if (var0 == 0x3acde419) {\n            // Dispatch table entry for addSellOrder(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = 0x00;\n            var5 = var4;\n            var6 = 0x0a8b;\n            var7 = var2;\n            var6 = func_24A9(var7);\n        \n            if (!var6) {\n            label_0A9B:\n            \n                if (!var6) {\n                    var temp27 = memory[0x40:0x60];\n                    memory[temp27:temp27 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp27 + 0x04:temp27 + 0x04 + 0x20] = 0x20;\n                    memory[temp27 + 0x24:temp27 + 0x24 + 0x20] = 0x20;\n                    memory[temp27 + 0x44:temp27 + 0x44 + 0x20] = 0x5072696365206f7220616d6f756e742065786365656473203131312062697473;\n                    var temp28 = memory[0x40:0x60];\n                    revert(memory[temp28:temp28 + temp27 - temp28 + 0x64]);\n                } else if (var2 <= 0x00) {\n                    var temp25 = memory[0x40:0x60];\n                    memory[temp25:temp25 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n                    memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x20;\n                    memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = 0x5072696365206e6565647320746f2062652067726561746572207468616e2030;\n                    var temp26 = memory[0x40:0x60];\n                    revert(memory[temp26:temp26 + temp25 - temp26 + 0x64]);\n                } else if (var3 > 0x00) {\n                    var6 = 0x0bd1;\n                    var7 = var2;\n                    var8 = var3;\n                    goto label_09E1;\n                } else {\n                    var temp23 = memory[0x40:0x60];\n                    memory[temp23:temp23 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp23 + 0x04:temp23 + 0x04 + 0x20] = 0x20;\n                    memory[temp23 + 0x24:temp23 + 0x24 + 0x20] = 0x21;\n                    memory[temp23 + 0x44:temp23 + 0x44 + 0x20] = 0x416d6f756e74206e6565647320746f2062652067726561746572207468616e20;\n                    memory[temp23 + 0x64:temp23 + 0x64 + 0x20] = 0x3000000000000000000000000000000000000000000000000000000000000000;\n                    var temp24 = memory[0x40:0x60];\n                    revert(memory[temp24:temp24 + temp23 - temp24 + 0x84]);\n                }\n            } else {\n                var6 = 0x0a9b;\n                var7 = var3;\n                var6 = func_24A9(var7);\n                goto label_0A9B;\n            }\n        } else if (var0 == 0x3d48f3af) {\n            // Dispatch table entry for costOfOrder(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = 0x00;\n            var5 = 0x0a2c;\n            var6 = 0x0de0b6b3a7640000;\n            var7 = 0x0a14;\n            var8 = var2;\n            var9 = var3;\n            var7 = func_246E(var8, var9);\n            var5 = func_0A14(var6, var7);\n            goto label_0A2C;\n        } else if (var0 == 0x410ac68c) {\n            // Dispatch table entry for 0x410ac68c (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = func_0E0F();\n            goto label_0285;\n        } else if (var0 == 0x416c334d) {\n            // Dispatch table entry for withdrawDistributedToPoolOwners()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            withdrawDistributedToPoolOwners();\n            stop();\n        } else if (var0 == 0x647846a5) {\n            // Dispatch table entry for feeToken()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0369;\n            var2 = feeToken();\n        \n        label_0369:\n            var temp29 = memory[0x40:0x60];\n            memory[temp29:temp29 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp30 = memory[0x40:0x60];\n            return memory[temp30:temp30 + temp29 - temp30 + 0x20];\n        } else if (var0 == 0x69fe0e2d) {\n            // Dispatch table entry for setFee(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            setFee(var2);\n            stop();\n        } else if (var0 == 0x8cbcca07) {\n            // Dispatch table entry for fillBuyOrder(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var4 = var3;\n            var5 = var4;\n            var6 = var5;\n            var7 = var6;\n            var8 = var7;\n            var9 = var8;\n            var10 = var9;\n            var11 = 0x10ce;\n            var12 = 0x08;\n            var13 = var2;\n            var11 = func_233B(var12, var13);\n            var3 = var11;\n            var temp31 = var3 / 0x02 ** 0xfe;\n            var11 = temp31;\n        \n            if (var11 > 0x02) { assert(); }\n        \n            var temp32 = var11;\n            var4 = temp32;\n            var11 = 0x01;\n            var12 = var4;\n        \n            if (var12 > 0x02) { assert(); }\n        \n            if (var12 == var11) {\n                var11 = 0x1150;\n                var12 = msg.sender;\n                var11 = func_24BC(var12);\n                var5 = var11;\n            \n                if (var5 != (var3 * 0x04) / 0x02 ** 0xe0) {\n                    var temp33 = var3;\n                    var6 = (temp33 * 0x0400000000) / 0x02 ** 0x91;\n                    var7 = (temp33 * 0x02 ** 0x91) / 0x02 ** 0x91;\n                    var11 = 0x11d5;\n                    var12 = var6;\n                    var13 = var7;\n                    goto label_09E1;\n                } else {\n                    var temp34 = memory[0x40:0x60];\n                    memory[temp34:temp34 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp34 + 0x04:temp34 + 0x04 + 0x20] = 0x20;\n                    memory[temp34 + 0x24:temp34 + 0x24 + 0x20] = 0x1e;\n                    memory[temp34 + 0x44:temp34 + 0x44 + 0x20] = 0x596f752063616e6e6f742066696c6c20796f7572206f776e206f726465720000;\n                    var temp35 = memory[0x40:0x60];\n                    revert(memory[temp35:temp35 + temp34 - temp35 + 0x64]);\n                }\n            } else {\n                var temp36 = memory[0x40:0x60];\n                memory[temp36:temp36 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp36 + 0x04:temp36 + 0x04 + 0x20] = 0x20;\n                memory[temp36 + 0x24:temp36 + 0x24 + 0x20] = 0x17;\n                memory[temp36 + 0x44:temp36 + 0x44 + 0x20] = 0x54686973206973206e6f74206120627579206f72646572000000000000000000;\n                var temp37 = memory[0x40:0x60];\n                revert(memory[temp37:temp37 + temp36 - temp37 + 0x64]);\n            }\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0369;\n            var2 = owner();\n            goto label_0369;\n        } else if (var0 == 0x9049681c) {\n            // Dispatch table entry for addBuyOrder(uint256,uint256)\n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = 0x00;\n            var5 = var4;\n            var6 = 0x00;\n            var7 = 0x1534;\n            var8 = var2;\n            var7 = func_24A9(var8);\n        \n            if (!var7) {\n            label_1544:\n            \n                if (!var7) {\n                    var temp42 = memory[0x40:0x60];\n                    memory[temp42:temp42 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp42 + 0x04:temp42 + 0x04 + 0x20] = 0x20;\n                    memory[temp42 + 0x24:temp42 + 0x24 + 0x20] = 0x20;\n                    memory[temp42 + 0x44:temp42 + 0x44 + 0x20] = 0x5072696365206f7220616d6f756e742065786365656473203131312062697473;\n                    var temp43 = memory[0x40:0x60];\n                    revert(memory[temp43:temp43 + temp42 - temp43 + 0x64]);\n                } else if (var2 <= 0x00) {\n                    var temp40 = memory[0x40:0x60];\n                    memory[temp40:temp40 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp40 + 0x04:temp40 + 0x04 + 0x20] = 0x20;\n                    memory[temp40 + 0x24:temp40 + 0x24 + 0x20] = 0x20;\n                    memory[temp40 + 0x44:temp40 + 0x44 + 0x20] = 0x5072696365206e6565647320746f2062652067726561746572207468616e2030;\n                    var temp41 = memory[0x40:0x60];\n                    revert(memory[temp41:temp41 + temp40 - temp41 + 0x64]);\n                } else if (var3 > 0x00) {\n                    var7 = 0x167a;\n                    var8 = var2;\n                    var9 = var3;\n                    goto label_09E1;\n                } else {\n                    var temp38 = memory[0x40:0x60];\n                    memory[temp38:temp38 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp38 + 0x04:temp38 + 0x04 + 0x20] = 0x20;\n                    memory[temp38 + 0x24:temp38 + 0x24 + 0x20] = 0x21;\n                    memory[temp38 + 0x44:temp38 + 0x44 + 0x20] = 0x416d6f756e74206e6565647320746f2062652067726561746572207468616e20;\n                    memory[temp38 + 0x64:temp38 + 0x64 + 0x20] = 0x3000000000000000000000000000000000000000000000000000000000000000;\n                    var temp39 = memory[0x40:0x60];\n                    revert(memory[temp39:temp39 + temp38 - temp39 + 0x84]);\n                }\n            } else {\n                var7 = 0x1544;\n                var8 = var3;\n                var7 = func_24A9(var8);\n                goto label_1544;\n            }\n        } else if (var0 == 0x935c1fb1) {\n            // Dispatch table entry for addressIndex(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = addressIndex(var2);\n            goto label_0285;\n        } else if (var0 == 0xa4c0ed36) {\n            // Dispatch table entry for onTokenTransfer(address,uint256,bytes)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp44 = memory[0x40:0x60];\n            var temp45 = msg.data[0x44:0x64];\n            var temp46 = msg.data[temp45 + 0x04:temp45 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp44 + (temp46 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp44:temp44 + 0x20] = temp46;\n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            memory[temp44 + 0x20:temp44 + 0x20 + temp46] = msg.data[temp45 + 0x24:temp45 + 0x24 + temp46];\n            var4 = temp44;\n            onTokenTransfer(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xaa072d0c) {\n            // Dispatch table entry for 0xaa072d0c (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24];\n            var2 = func_19D9(var2);\n            goto label_0285;\n        } else if (var0 == 0xc375fcfa) {\n            // Dispatch table entry for poolOwners()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0369;\n            var2 = poolOwners();\n            goto label_0369;\n        } else if (var0 == 0xc3aea22e) {\n            // Dispatch table entry for fillSellOrder(uint256)\n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var4 = var3;\n            var5 = var4;\n            var6 = var5;\n            var7 = var6;\n            var8 = var7;\n            var9 = var8;\n            var10 = var9;\n            var11 = 0x1a14;\n            var12 = 0x08;\n            var13 = var2;\n            var11 = func_233B(var12, var13);\n            var3 = var11;\n            var temp47 = var3 / 0x02 ** 0xfe;\n            var11 = temp47;\n        \n            if (var11 > 0x02) { assert(); }\n        \n            var temp48 = var11;\n            var4 = temp48;\n            var11 = 0x02;\n            var12 = var4;\n        \n            if (var12 > 0x02) { assert(); }\n        \n            if (var12 == var11) {\n                var11 = 0x1a96;\n                var12 = msg.sender;\n                var11 = func_24BC(var12);\n                var5 = var11;\n            \n                if (var5 != (var3 * 0x04) / 0x02 ** 0xe0) {\n                    var temp49 = var3;\n                    var6 = (temp49 * 0x0400000000) / 0x02 ** 0x91;\n                    var7 = (temp49 * 0x02 ** 0x91) / 0x02 ** 0x91;\n                    var11 = 0x1b1b;\n                    var12 = var6;\n                    var13 = var7;\n                    goto label_09E1;\n                } else {\n                    var temp50 = memory[0x40:0x60];\n                    memory[temp50:temp50 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp50 + 0x04:temp50 + 0x04 + 0x20] = 0x20;\n                    memory[temp50 + 0x24:temp50 + 0x24 + 0x20] = 0x1e;\n                    memory[temp50 + 0x44:temp50 + 0x44 + 0x20] = 0x596f752063616e6e6f742066696c6c20796f7572206f776e206f726465720000;\n                    var temp51 = memory[0x40:0x60];\n                    revert(memory[temp51:temp51 + temp50 - temp51 + 0x64]);\n                }\n            } else {\n                var temp52 = memory[0x40:0x60];\n                memory[temp52:temp52 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp52 + 0x04:temp52 + 0x04 + 0x20] = 0x20;\n                memory[temp52 + 0x24:temp52 + 0x24 + 0x20] = 0x18;\n                memory[temp52 + 0x44:temp52 + 0x44 + 0x20] = 0x54686973206973206e6f7420612073656c6c206f726465720000000000000000;\n                var temp53 = memory[0x40:0x60];\n                revert(memory[temp53:temp53 + temp52 - temp53 + 0x64]);\n            }\n        } else if (var0 == 0xd05bb517) {\n            // Dispatch table entry for withdrawFeeToken(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            withdrawFeeToken(var2);\n            stop();\n        } else if (var0 == 0xd09ef241) {\n            // Dispatch table entry for getOrder(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04ca;\n            var2 = msg.data[0x04:0x24];\n            var1, var2, var3, var4 = getOrder(var2);\n            var5 = memory[0x40:0x60];\n            var6 = var5;\n            var7 = var1;\n        \n            if (var7 > 0x02) { assert(); }\n        \n            var temp54 = var6;\n            memory[temp54:temp54 + 0x20] = var7 & 0xff;\n            memory[temp54 + 0x20:temp54 + 0x20 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            memory[temp54 + 0x40:temp54 + 0x40 + 0x20] = var3;\n            memory[temp54 + 0x60:temp54 + 0x60 + 0x20] = var4;\n            var temp55 = memory[0x40:0x60];\n            return memory[temp55:temp55 + temp54 - temp55 + 0x80];\n        } else if (var0 == 0xddca3f43) {\n            // Dispatch table entry for fee()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = fee();\n            goto label_0285;\n        } else if (var0 == 0xdef8ecf4) {\n            // Dispatch table entry for removeBuyOrder(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var4 = var3;\n            var5 = var4;\n            var6 = var5;\n            var7 = var6;\n            var8 = var7;\n            var9 = var8;\n            var10 = 0x1f62;\n            var11 = 0x08;\n            var12 = var2;\n            var10 = func_233B(var11, var12);\n            var3 = var10;\n            var temp56 = var3 / 0x02 ** 0xfe;\n            var10 = temp56;\n        \n            if (var10 > 0x02) { assert(); }\n        \n            var temp57 = var10;\n            var4 = temp57;\n            var10 = 0x01;\n            var11 = var4;\n        \n            if (var11 > 0x02) { assert(); }\n        \n            if (var11 == var10) {\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x07;\n                var5 = storage[keccak256(memory[0x00:0x40])];\n            \n                if (var5 == (var3 * 0x04) / 0x02 ** 0xe0) {\n                    var temp58 = var3;\n                    var6 = (temp58 * 0x0400000000) / 0x02 ** 0x91;\n                    var7 = (temp58 * 0x02 ** 0x91) / 0x02 ** 0x91;\n                    var10 = 0x209b;\n                    var11 = 0x08;\n                    var12 = var2;\n                    var10 = func_2351(var11, var12);\n                \n                    if (var10) {\n                        var10 = 0x20e9;\n                        var11 = var6;\n                        var12 = var7;\n                        goto label_09E1;\n                    } else {\n                        var temp59 = memory[0x40:0x60];\n                        memory[temp59:temp59 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp59 + 0x04:temp59 + 0x04 + 0x20] = 0x20;\n                        memory[temp59 + 0x24:temp59 + 0x24 + 0x20] = 0x11;\n                        var temp60 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x26cb:0x26eb];\n                        var temp61 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp60;\n                        memory[temp59 + 0x44:temp59 + 0x44 + 0x20] = temp61;\n                        var temp62 = memory[0x40:0x60];\n                        revert(memory[temp62:temp62 + temp59 - temp62 + 0x64]);\n                    }\n                } else {\n                    var temp63 = memory[0x40:0x60];\n                    memory[temp63:temp63 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp63 + 0x04:temp63 + 0x04 + 0x20] = 0x20;\n                    memory[temp63 + 0x24:temp63 + 0x24 + 0x20] = 0x24;\n                    memory[temp63 + 0x44:temp63 + 0x44 + 0x20] = 0x596f7520617265206e6f74207468652073656e646572206f662074686973206f;\n                    memory[temp63 + 0x64:temp63 + 0x64 + 0x20] = 0x7264657200000000000000000000000000000000000000000000000000000000;\n                    var temp64 = memory[0x40:0x60];\n                    revert(memory[temp64:temp64 + temp63 - temp64 + 0x84]);\n                }\n            } else {\n                var temp65 = memory[0x40:0x60];\n                memory[temp65:temp65 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp65 + 0x04:temp65 + 0x04 + 0x20] = 0x20;\n                memory[temp65 + 0x24:temp65 + 0x24 + 0x20] = 0x17;\n                memory[temp65 + 0x44:temp65 + 0x44 + 0x20] = 0x54686973206973206e6f74206120627579206f72646572000000000000000000;\n                var temp66 = memory[0x40:0x60];\n                revert(memory[temp66:temp66 + temp65 - temp66 + 0x64]);\n            }\n        } else if (var0 == 0xe96716ee) {\n            // Dispatch table entry for 0xe96716ee (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0369;\n            var2 = msg.data[0x04:0x24];\n            var2 = func_21C2(var2);\n            goto label_0369;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            transferOwnership(var2);\n            stop();\n        } else if (var0 == 0xf8b42f78) {\n            // Dispatch table entry for getOrderBookKeys(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0588;\n            var2 = msg.data[0x04:0x24];\n            var1 = getOrderBookKeys(var2);\n            var2 = memory[0x40:0x60];\n            var3 = var2;\n            var4 = var1;\n            var5 = 0x0140;\n            var6 = var5;\n            var7 = var3;\n            var8 = var4;\n            var9 = 0x00;\n        \n            if (var9 >= var6) {\n            label_05AE:\n                var temp67 = memory[0x40:0x60];\n                return memory[temp67:temp67 + (var5 + var3) - temp67];\n            } else {\n            label_059F:\n                var temp68 = var9;\n                memory[temp68 + var7:temp68 + var7 + 0x20] = memory[temp68 + var8:temp68 + var8 + 0x20];\n                var9 = temp68 + 0x20;\n            \n                if (var9 >= var6) { goto label_05AE; }\n                else { goto label_059F; }\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getOrders(var arg0) returns (var r0, var arg0, var r2, var r3, var r4) {\n        r2 = 0x0880;\n        r2 = func_264D();\n        r3 = 0x0888;\n        r3 = func_264D();\n        r4 = 0x0890;\n        r4 = func_264D();\n        var var3 = 0x0898;\n        var3 = func_264D();\n        var var4 = 0x08a0;\n        var4 = func_264D();\n        var var5 = 0x00;\n        var var6 = var5;\n        var var7 = var6;\n    \n        if (var7 >= 0x0a) {\n        label_09CF:\n            var temp0 = r4;\n            r4 = var4;\n            var temp1 = r2;\n            r2 = temp0;\n            r0 = temp1;\n            var temp2 = r3;\n            r3 = var3;\n            arg0 = temp2;\n            return r0, arg0, r2, r3, r4;\n        } else {\n        label_08AF:\n            var var8 = arg0 + var5;\n            var var9 = 0x08bb;\n            var var10 = 0x08;\n            var9 = func_2441(var10);\n        \n            if (var9 == var8) { goto label_09CF; }\n        \n            var8 = 0x08d9;\n            var9 = 0x08;\n            var10 = var5 + arg0;\n            var8 = func_2448(var9, var10);\n            var6 = var8;\n            var8 = var6;\n            var9 = r2;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            memory[var10 * 0x20 + var9:var10 * 0x20 + var9 + 0x20] = var8;\n            var8 = 0x08fe;\n            var9 = 0x08;\n            var10 = var6;\n            var8 = func_233B(var9, var10);\n            var temp3 = var8;\n            var7 = temp3;\n            var8 = 0x06;\n            var9 = (var7 * 0x04) / 0x02 ** 0xe0;\n        \n            if (var9 >= storage[var8]) { assert(); }\n        \n            memory[0x00:0x20] = var8;\n            var8 = storage[keccak256(memory[0x00:0x20]) + var9] & 0x02 ** 0xa0 - 0x01;\n            var9 = r3;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            memory[var10 * 0x20 + var9:var10 * 0x20 + var9 + 0x20] = var8 & 0x02 ** 0xa0 - 0x01;\n            var8 = var7 / 0x02 ** 0xfe;\n        \n            if (var8 > 0x02) { assert(); }\n        \n            var9 = r4;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            var temp4 = var10 * 0x20 + var9;\n            var temp5 = var8;\n            var9 = temp5;\n            var8 = temp4;\n        \n            if (var9 > 0x02) { assert(); }\n        \n            var temp6 = var8;\n            var temp7 = var9;\n            var8 = temp7;\n            var9 = temp6;\n            var10 = var8;\n        \n            if (var10 > 0x02) { assert(); }\n        \n            memory[var9:var9 + 0x20] = var10;\n            var8 = (var7 * 0x0400000000) / 0x02 ** 0x91;\n            var9 = var3;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            memory[var10 * 0x20 + var9:var10 * 0x20 + var9 + 0x20] = var8;\n            var8 = (var7 * 0x02 ** 0x91) / 0x02 ** 0x91;\n            var9 = var4;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            memory[var10 * 0x20 + var9:var10 * 0x20 + var9 + 0x20] = var8;\n            var7 = var7;\n            var5 = var5 + 0x01;\n        \n            if (var5 >= 0x0a) { goto label_09CF; }\n            else { goto label_08AF; }\n        }\n    }\n    \n    function totalFees() returns (var r0) { return storage[0x04]; }\n    \n    function func_0A14(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0A20(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_246E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getOrderBookSize() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0a3f;\n        var var2 = 0x08;\n        return func_2441(var2);\n    }\n    \n    function func_0A42(var arg0) returns (var r0) { return arg0; }\n    \n    function getOrderBookKey(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0a51;\n        var var2 = 0x08;\n        var1 = func_2441(var2);\n    \n        if (arg0 >= var1) {\n            var0 = 0x00;\n        \n        label_0A74:\n            return var0;\n        } else {\n            var1 = 0x0a69;\n            var2 = 0x08;\n            var var3 = arg0;\n            var1 = func_2448(var2, var3);\n            var0 = var1;\n            goto label_0A74;\n        }\n    }\n    \n    function orderCount() returns (var r0) { return storage[0x01]; }\n    \n    function func_0E0F() returns (var r0) { return storage[0x03]; }\n    \n    function withdrawDistributedToPoolOwners() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n        var var0 = 0x00;\n        var var1 = 0x0ebd;\n        var var2 = storage[0x04];\n        var var3 = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x70a08231;\n        var var5 = temp0 + 0x24;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = temp0 - var7 + 0x24;\n        var var9 = var7;\n        var var10 = var0;\n        var var11 = var3;\n        var var12 = !address(var11).code.length;\n    \n        if (var12) { revert(memory[0x00:0x00]); }\n    \n        var1 = func_0E85(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12);\n        var0 = var1;\n    \n        if (var0 > 0x00) {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = temp2 & storage[0x0a];\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = var0;\n            var1 = storage[0x0b] & temp2;\n            var2 = 0xa9059cbb;\n            var3 = temp1 + 0x44;\n            var4 = 0x20;\n            var5 = memory[0x40:0x60];\n            var6 = temp1 - var5 + 0x44;\n            var7 = var5;\n            var8 = 0x00;\n            var9 = var1;\n            var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp3;\n            temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp3;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 >= 0x20) { return; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var temp4 = returndata.length;\n                memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n            memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x39;\n            memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x5468657265206973206e6f2064697374726962757465642066656520746f6b65;\n            memory[temp5 + 0x64:temp5 + 0x64 + 0x20] = 0x6e2062616c616e636520696e2074686520636f6e747261637400000000000000;\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + temp5 - temp6 + 0x84]);\n        }\n    }\n    \n    function func_0E85(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10) returns (var r0) {\n        var temp0;\n        temp0, memory[arg5:arg5 + arg4] = address(arg9).call.gas(msg.gas).value(arg8)(memory[arg7:arg7 + arg6]);\n        arg4 = !temp0;\n    \n        if (!arg4) {\n            arg1 = memory[0x40:0x60];\n            arg2 = returndata.length;\n        \n            if (arg2 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg0;\n            arg0 = memory[arg1:arg1 + 0x20];\n            arg1 = temp1;\n            r0 = func_25CC(arg0, arg1);\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function feeToken() returns (var r0) { return storage[0x0b] & 0x02 ** 0xa0 - 0x01; }\n    \n    function setFee(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x15;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x53656e646572206e6f7420617574686f72697365640000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        } else if (arg0 <= 0x06f05b59d3b20000) {\n            storage[0x02] = arg0;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1b;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x466565732063616e2774206265206d6f7265207468616e203530250000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        }\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function addressIndex(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function onTokenTransfer(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (msg.sender == storage[0x0b] & 0x02 ** 0xa0 - 0x01) {\n            var var1 = 0x198c;\n            var var2 = arg0;\n            var1 = func_24BC(var2);\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x05;\n            var0 = var1;\n            var1 = 0x19ae;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = arg1;\n            var1 = func_2432(var2, var3);\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x19d0;\n            var2 = storage[0x04];\n            var3 = arg1;\n            var1 = func_2432(var2, var3);\n            storage[0x04] = var1;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x20;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x53656e646572206e6565647320746f206265207468652066656520746f6b656e;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        }\n    }\n    \n    function func_19D9(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function poolOwners() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function withdrawFeeToken(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x1d32;\n        var var2 = msg.sender;\n        var1 = func_24BC(var2);\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x05;\n        var0 = var1;\n    \n        if (arg0 <= storage[keccak256(memory[0x00:0x40])]) {\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x05;\n            var1 = 0x1de0;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = arg0;\n            var1 = func_25CC(var2, var3);\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x1e02;\n            var2 = storage[0x04];\n            var3 = arg0;\n            var1 = func_25CC(var2, var3);\n            storage[0x04] = var1;\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x05;\n        \n            if (storage[keccak256(memory[0x00:0x40])]) {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = arg0;\n                var1 = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n                var2 = 0xa9059cbb;\n                var3 = temp0 + 0x44;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = temp0 - var5 + 0x44;\n                var var7 = var5;\n                var var8 = 0x00;\n                var var9 = var1;\n                var var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n            label_1E97:\n                var temp1;\n                temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp1;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 >= 0x20) { return; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp2 = returndata.length;\n                    memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                memory[0x00:0x20] = var0;\n                memory[0x20:0x40] = 0x05;\n                storage[keccak256(memory[0x00:0x40])] = 0x00;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = msg.sender;\n                memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = arg0;\n                var1 = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n                var2 = 0xa9059cbb;\n                var3 = temp3 + 0x44;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = temp3 - var5 + 0x44;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (!var10) { goto label_1E97; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n            memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x29;\n            memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x596f75277265207769746864726177696e67206d6f7265207468616e20796f75;\n            memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x722062616c616e63650000000000000000000000000000000000000000000000;\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n        }\n    }\n    \n    function getOrder(var arg0) returns (var r0, var arg0, var r2, var r3) {\n        r2 = 0x00;\n        r3 = r2;\n        var var2 = r3;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = 0x1ede;\n        var var6 = 0x08;\n        var var7 = arg0;\n        var5 = func_233B(var6, var7);\n        var4 = var5;\n        var temp0 = var4 / 0x02 ** 0xfe;\n        var5 = temp0;\n    \n        if (var5 > 0x02) { assert(); }\n    \n        var6 = 0x06;\n        var7 = (var4 * 0x04) / 0x02 ** 0xe0;\n    \n        if (var7 >= storage[var6]) { assert(); }\n    \n        memory[0x00:0x20] = var6;\n        var temp1 = var4;\n        r3 = (temp1 * 0x02 ** 0x91) / 0x02 ** 0x91;\n        arg0 = storage[keccak256(memory[0x00:0x20]) + var7] & 0x02 ** 0xa0 - 0x01;\n        r2 = (temp1 * 0x0400000000) / 0x02 ** 0x91;\n        r0 = var5;\n        return r0, arg0, r2, r3;\n    }\n    \n    function fee() returns (var r0) { return storage[0x02]; }\n    \n    function func_21C2(var arg0) returns (var arg0) {\n        var var0 = 0x06;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x15;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x53656e646572206e6f7420617574686f72697365640000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0x02 ** 0xa0 - 0x01, stack[-1] & 0x02 ** 0xa0 - 0x01]);\n            storage[0x00] = (temp1 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getOrderBookKeys(var arg0) returns (var r0) {\n        var var0 = 0x22d1;\n        var0 = func_264D();\n        var var1 = 0x00;\n    \n        if (var1 >= 0x0a) {\n        label_2335:\n            return var0;\n        } else {\n        label_22DE:\n            var var2 = 0x22e7;\n            var var3 = 0x08;\n            var2 = func_2441(var3);\n        \n            if (var1 + arg0 >= var2) {\n                var2 = 0x00;\n                var3 = var0;\n                var var4 = var1;\n            \n                if (var4 >= 0x0a) { assert(); }\n            \n                memory[var4 * 0x20 + var3:var4 * 0x20 + var3 + 0x20] = var2;\n                var1 = var1 + 0x01;\n            \n            label_22D4:\n            \n                if (var1 >= 0x0a) { goto label_2335; }\n                else { goto label_22DE; }\n            } else {\n                var2 = 0x2303;\n                var3 = 0x08;\n                var4 = var1 + arg0;\n                var2 = func_2448(var3, var4);\n                var3 = var0;\n                var4 = var1;\n            \n                if (var4 >= 0x0a) { assert(); }\n            \n                memory[var4 * 0x20 + var3:var4 * 0x20 + var3 + 0x20] = var2;\n                var1 = var1 + 0x01;\n                goto label_22D4;\n            }\n        }\n    }\n    \n    function func_233B(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = arg0;\n        return storage[keccak256(memory[0x00:0x40]) + 0x01];\n    }\n    \n    function func_2351(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg1;\n        memory[0x20:0x40] = arg0;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n    \n        if (!storage[var1]) {\n            var0 = 0x00;\n            goto label_242B;\n        } else if (storage[var1] >= storage[arg0 + 0x01]) {\n        label_23F8:\n            var var2 = storage[arg0 + 0x01] + ~0x00;\n            var var3 = 0x240d;\n            var var4 = arg0 + 0x01;\n            var var5 = var2;\n            func_266D(var4, var5);\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = arg0;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = 0x00;\n            storage[temp0 + 0x01] = 0x00;\n            var0 = 0x01;\n        \n        label_242B:\n            return var0;\n        } else {\n            var2 = storage[var1];\n            var temp1 = storage[arg0 + 0x01];\n            var3 = arg0;\n            var5 = arg0 + 0x01;\n            var4 = 0x00;\n            var var6 = temp1 + ~0x00;\n        \n            if (var6 >= temp1) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp2 = var4;\n            memory[temp2:temp2 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])];\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var3;\n            storage[keccak256(memory[0x00:0x00 + temp2 + 0x40])] = var2;\n            var2 = arg0 + 0x01;\n            var temp3 = storage[var2];\n            var3 = temp3 + ~0x00;\n        \n            if (var3 >= temp3) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n            var2 = storage[keccak256(memory[0x00:0x20]) + var3];\n            var3 = arg0 + 0x01;\n            var4 = storage[var1] - 0x01;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            storage[keccak256(memory[0x00:0x20]) + var4] = var2;\n            goto label_23F8;\n        }\n    }\n    \n    function func_2432(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_2441(var arg0) returns (var r0) { return storage[arg0 + 0x01]; }\n    \n    function func_2448(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0 + 0x01;\n        var var2 = arg1;\n    \n        if (var2 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var1;\n        return storage[keccak256(memory[0x00:0x20]) + var2];\n    }\n    \n    function func_246E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_248A:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_248A;\n        }\n    }\n    \n    function func_24A9(var arg0) returns (var r0) { return 0x8000000000000000000000000000 > arg0; }\n    \n    function func_24BC(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])]) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n            goto label_0A74;\n        } else if (0x0100000000 > storage[0x06]) {\n            var temp0 = storage[0x06];\n            var temp1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x07;\n            storage[keccak256(memory[0x00:0x40])] = temp0;\n            storage[0x06] = temp0 + 0x01;\n            memory[0x00:0x20] = 0x06;\n            var temp2 = temp0 + 0xf652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f;\n            storage[temp2] = temp1 | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var0 = storage[0x06] + ~0x00;\n        \n        label_0A74:\n            return var0;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x20;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x526567697374657265642061646472657373657320686974206d6178696d756d;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        }\n    }\n    \n    function func_25CC(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_264D() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0140;\n        memory[temp0:temp0 + 0x0a * 0x20] = code[code.length:code.length + 0x0a * 0x20];\n        return temp0;\n    }\n    \n    function func_266D(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_0FD9:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x0fd9;\n            var var1 = 0x0a42;\n            var var2 = temp3 + temp4;\n            var var3 = arg1 + temp3;\n        \n            if (var2 <= var3) {\n                var1 = func_26A6(var2, var3);\n                var0 = func_0A42(var1);\n                goto label_0FD9;\n            } else {\n            label_269B:\n                var temp5 = var3;\n                storage[temp5] = 0x00;\n                var3 = temp5 + 0x01;\n            \n                if (var2 > var3) { goto label_269B; }\n            \n                var1 = func_26A6(var2, var3);\n                // Error: Could not resolve method call return address!\n            }\n        }\n    }\n    \n    function func_26A6(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x0559c114) {\n            // Dispatch table entry for removeSellOrder(uint256)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var var2 = msg.data[0x04:0x24];\n            var var3 = 0x00;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n            var var7 = var6;\n            var var8 = var7;\n            var var9 = 0x05d9;\n            var var10 = 0x08;\n            var var11 = var2;\n            var9 = func_233B(var10, var11);\n            var3 = var9;\n            var temp0 = var3 / 0x02 ** 0xfe;\n            var9 = temp0;\n        \n            if (var9 > 0x02) { assert(); }\n        \n            var temp1 = var9;\n            var4 = temp1;\n            var9 = 0x02;\n            var10 = var4;\n        \n            if (var10 > 0x02) { assert(); }\n        \n            if (var10 == var9) {\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x07;\n                var5 = storage[keccak256(memory[0x00:0x40])];\n            \n                if (var5 == (var3 * 0x04) / 0x02 ** 0xe0) {\n                    var temp2 = var3;\n                    var6 = (temp2 * 0x0400000000) / 0x02 ** 0x91;\n                    var7 = (temp2 * 0x02 ** 0x91) / 0x02 ** 0x91;\n                    var9 = 0x0712;\n                    var10 = 0x08;\n                    var11 = var2;\n                    var9 = func_2351(var10, var11);\n                \n                    if (var9) {\n                        var9 = 0x0760;\n                        var10 = var6;\n                        var11 = var7;\n                    \n                    label_09E1:\n                        var var12 = 0x00;\n                        var var13 = 0x0a2c;\n                        var var14 = 0x0de0b6b3a7640000;\n                        var var15 = 0x0a14;\n                        var var16 = storage[0x02];\n                        var var17 = 0x0a20;\n                        var var18 = 0x0de0b6b3a7640000;\n                        var var19 = 0x0a14;\n                        var var20 = var10;\n                        var var21 = var11;\n                        var19 = func_246E(var20, var21);\n                        var17 = func_0A14(var18, var19);\n                        var15 = func_0A20(var16, var17);\n                        var13 = func_0A14(var14, var15);\n                    \n                    label_0A2C:\n                        var9 = var13;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n                        memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x11;\n                        var temp4 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x26cb:0x26eb];\n                        var temp5 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp4;\n                        memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = temp5;\n                        var temp6 = memory[0x40:0x60];\n                        revert(memory[temp6:temp6 + temp3 - temp6 + 0x64]);\n                    }\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x24;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x596f7520617265206e6f74207468652073656e646572206f662074686973206f;\n                    memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7264657200000000000000000000000000000000000000000000000000000000;\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + temp7 - temp8 + 0x84]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x18;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x54686973206973206e6f7420612073656c6c206f726465720000000000000000;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else if (var0 == 0x05e0141d) {\n            // Dispatch table entry for getOrders(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0187;\n            var2 = msg.data[0x04:0x24];\n            var1, var2, var3, var4, var5 = getOrders(var2);\n            var6 = memory[0x40:0x60];\n            var7 = var6;\n            var8 = var1;\n            var9 = 0x0140;\n            var10 = var9;\n            var11 = var7;\n            var12 = var8;\n            var13 = 0x00;\n        \n            if (var13 >= var10) {\n            label_01AD:\n                var temp11 = var9 + var7;\n                var7 = temp11;\n                var8 = var2;\n                var9 = 0x20 * 0x0a;\n                var10 = var9;\n                var11 = var7;\n                var12 = var8;\n                var13 = 0x00;\n            \n                if (var13 >= var10) {\n                label_01D8:\n                    var temp12 = var9 + var7;\n                    var7 = temp12;\n                    var8 = var3;\n                    var9 = 0x20 * 0x0a;\n                    var10 = var9;\n                    var11 = var7;\n                    var12 = var8;\n                    var13 = 0x00;\n                \n                    if (var13 >= var10) {\n                    label_0203:\n                        var temp13 = var9 + var7;\n                        var7 = temp13;\n                        var8 = var4;\n                        var9 = 0x20 * 0x0a;\n                        var10 = var9;\n                        var11 = var7;\n                        var12 = var8;\n                        var13 = 0x00;\n                    \n                        if (var13 >= var10) {\n                        label_022E:\n                            var temp14 = var9 + var7;\n                            var7 = temp14;\n                            var8 = var5;\n                            var9 = 0x20 * 0x0a;\n                            var10 = var9;\n                            var11 = var7;\n                            var12 = var8;\n                            var13 = 0x00;\n                        \n                            if (var13 >= var10) {\n                            label_0259:\n                                var temp15 = memory[0x40:0x60];\n                                return memory[temp15:temp15 + (var9 + var7) - temp15];\n                            } else {\n                            label_024A:\n                                var temp16 = var13;\n                                memory[temp16 + var11:temp16 + var11 + 0x20] = memory[temp16 + var12:temp16 + var12 + 0x20];\n                                var13 = temp16 + 0x20;\n                            \n                                if (var13 >= var10) { goto label_0259; }\n                                else { goto label_024A; }\n                            }\n                        } else {\n                        label_021F:\n                            var temp17 = var13;\n                            memory[temp17 + var11:temp17 + var11 + 0x20] = memory[temp17 + var12:temp17 + var12 + 0x20];\n                            var13 = temp17 + 0x20;\n                        \n                            if (var13 >= var10) { goto label_022E; }\n                            else { goto label_021F; }\n                        }\n                    } else {\n                    label_01F4:\n                        var temp18 = var13;\n                        memory[temp18 + var11:temp18 + var11 + 0x20] = memory[temp18 + var12:temp18 + var12 + 0x20];\n                        var13 = temp18 + 0x20;\n                    \n                        if (var13 >= var10) { goto label_0203; }\n                        else { goto label_01F4; }\n                    }\n                } else {\n                label_01C9:\n                    var temp19 = var13;\n                    memory[temp19 + var11:temp19 + var11 + 0x20] = memory[temp19 + var12:temp19 + var12 + 0x20];\n                    var13 = temp19 + 0x20;\n                \n                    if (var13 >= var10) { goto label_01D8; }\n                    else { goto label_01C9; }\n                }\n            } else {\n            label_019E:\n                var temp20 = var13;\n                memory[temp20 + var11:temp20 + var11 + 0x20] = memory[temp20 + var12:temp20 + var12 + 0x20];\n                var13 = temp20 + 0x20;\n            \n                if (var13 >= var10) { goto label_01AD; }\n                else { goto label_019E; }\n            }\n        } else if (var0 == 0x13114a9d) {\n            // Dispatch table entry for totalFees()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = totalFees();\n        \n        label_0285:\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = var2;\n            var temp22 = memory[0x40:0x60];\n            return memory[temp22:temp22 + temp21 - temp22 + 0x20];\n        } else if (var0 == 0x169c4733) {\n            // Dispatch table entry for feeForOrder(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            goto label_09E1;\n        } else if (var0 == 0x1a3352c1) {\n            // Dispatch table entry for getOrderBookSize()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var1 = getOrderBookSize();\n            goto label_0285;\n        } else if (var0 == 0x1c76e2b2) {\n            // Dispatch table entry for getOrderBookKey(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24];\n            var1 = getOrderBookKey(var2);\n            goto label_0285;\n        } else if (var0 == 0x2453ffa8) {\n            // Dispatch table entry for orderCount()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = orderCount();\n            goto label_0285;\n        } else if (var0 == 0x3acde419) {\n            // Dispatch table entry for addSellOrder(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = 0x00;\n            var5 = var4;\n            var6 = 0x0a8b;\n            var7 = var2;\n            var6 = func_24A9(var7);\n        \n            if (!var6) {\n            label_0A9B:\n            \n                if (!var6) {\n                    var temp27 = memory[0x40:0x60];\n                    memory[temp27:temp27 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp27 + 0x04:temp27 + 0x04 + 0x20] = 0x20;\n                    memory[temp27 + 0x24:temp27 + 0x24 + 0x20] = 0x20;\n                    memory[temp27 + 0x44:temp27 + 0x44 + 0x20] = 0x5072696365206f7220616d6f756e742065786365656473203131312062697473;\n                    var temp28 = memory[0x40:0x60];\n                    revert(memory[temp28:temp28 + temp27 - temp28 + 0x64]);\n                } else if (var2 <= 0x00) {\n                    var temp25 = memory[0x40:0x60];\n                    memory[temp25:temp25 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n                    memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x20;\n                    memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = 0x5072696365206e6565647320746f2062652067726561746572207468616e2030;\n                    var temp26 = memory[0x40:0x60];\n                    revert(memory[temp26:temp26 + temp25 - temp26 + 0x64]);\n                } else if (var3 > 0x00) {\n                    var6 = 0x0bd1;\n                    var7 = var2;\n                    var8 = var3;\n                    goto label_09E1;\n                } else {\n                    var temp23 = memory[0x40:0x60];\n                    memory[temp23:temp23 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp23 + 0x04:temp23 + 0x04 + 0x20] = 0x20;\n                    memory[temp23 + 0x24:temp23 + 0x24 + 0x20] = 0x21;\n                    memory[temp23 + 0x44:temp23 + 0x44 + 0x20] = 0x416d6f756e74206e6565647320746f2062652067726561746572207468616e20;\n                    memory[temp23 + 0x64:temp23 + 0x64 + 0x20] = 0x3000000000000000000000000000000000000000000000000000000000000000;\n                    var temp24 = memory[0x40:0x60];\n                    revert(memory[temp24:temp24 + temp23 - temp24 + 0x84]);\n                }\n            } else {\n                var6 = 0x0a9b;\n                var7 = var3;\n                var6 = func_24A9(var7);\n                goto label_0A9B;\n            }\n        } else if (var0 == 0x3d48f3af) {\n            // Dispatch table entry for costOfOrder(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = 0x00;\n            var5 = 0x0a2c;\n            var6 = 0x0de0b6b3a7640000;\n            var7 = 0x0a14;\n            var8 = var2;\n            var9 = var3;\n            var7 = func_246E(var8, var9);\n            var5 = func_0A14(var6, var7);\n            goto label_0A2C;\n        } else if (var0 == 0x410ac68c) {\n            // Dispatch table entry for 0x410ac68c (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = func_0E0F();\n            goto label_0285;\n        } else if (var0 == 0x416c334d) {\n            // Dispatch table entry for withdrawDistributedToPoolOwners()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            withdrawDistributedToPoolOwners();\n            stop();\n        } else if (var0 == 0x647846a5) {\n            // Dispatch table entry for feeToken()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0369;\n            var2 = feeToken();\n        \n        label_0369:\n            var temp29 = memory[0x40:0x60];\n            memory[temp29:temp29 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp30 = memory[0x40:0x60];\n            return memory[temp30:temp30 + temp29 - temp30 + 0x20];\n        } else if (var0 == 0x69fe0e2d) {\n            // Dispatch table entry for setFee(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            setFee(var2);\n            stop();\n        } else if (var0 == 0x8cbcca07) {\n            // Dispatch table entry for fillBuyOrder(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var4 = var3;\n            var5 = var4;\n            var6 = var5;\n            var7 = var6;\n            var8 = var7;\n            var9 = var8;\n            var10 = var9;\n            var11 = 0x10ce;\n            var12 = 0x08;\n            var13 = var2;\n            var11 = func_233B(var12, var13);\n            var3 = var11;\n            var temp31 = var3 / 0x02 ** 0xfe;\n            var11 = temp31;\n        \n            if (var11 > 0x02) { assert(); }\n        \n            var temp32 = var11;\n            var4 = temp32;\n            var11 = 0x01;\n            var12 = var4;\n        \n            if (var12 > 0x02) { assert(); }\n        \n            if (var12 == var11) {\n                var11 = 0x1150;\n                var12 = msg.sender;\n                var11 = func_24BC(var12);\n                var5 = var11;\n            \n                if (var5 != (var3 * 0x04) / 0x02 ** 0xe0) {\n                    var temp33 = var3;\n                    var6 = (temp33 * 0x0400000000) / 0x02 ** 0x91;\n                    var7 = (temp33 * 0x02 ** 0x91) / 0x02 ** 0x91;\n                    var11 = 0x11d5;\n                    var12 = var6;\n                    var13 = var7;\n                    goto label_09E1;\n                } else {\n                    var temp34 = memory[0x40:0x60];\n                    memory[temp34:temp34 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp34 + 0x04:temp34 + 0x04 + 0x20] = 0x20;\n                    memory[temp34 + 0x24:temp34 + 0x24 + 0x20] = 0x1e;\n                    memory[temp34 + 0x44:temp34 + 0x44 + 0x20] = 0x596f752063616e6e6f742066696c6c20796f7572206f776e206f726465720000;\n                    var temp35 = memory[0x40:0x60];\n                    revert(memory[temp35:temp35 + temp34 - temp35 + 0x64]);\n                }\n            } else {\n                var temp36 = memory[0x40:0x60];\n                memory[temp36:temp36 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp36 + 0x04:temp36 + 0x04 + 0x20] = 0x20;\n                memory[temp36 + 0x24:temp36 + 0x24 + 0x20] = 0x17;\n                memory[temp36 + 0x44:temp36 + 0x44 + 0x20] = 0x54686973206973206e6f74206120627579206f72646572000000000000000000;\n                var temp37 = memory[0x40:0x60];\n                revert(memory[temp37:temp37 + temp36 - temp37 + 0x64]);\n            }\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0369;\n            var2 = owner();\n            goto label_0369;\n        } else if (var0 == 0x9049681c) {\n            // Dispatch table entry for addBuyOrder(uint256,uint256)\n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = 0x00;\n            var5 = var4;\n            var6 = 0x00;\n            var7 = 0x1534;\n            var8 = var2;\n            var7 = func_24A9(var8);\n        \n            if (!var7) {\n            label_1544:\n            \n                if (!var7) {\n                    var temp42 = memory[0x40:0x60];\n                    memory[temp42:temp42 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp42 + 0x04:temp42 + 0x04 + 0x20] = 0x20;\n                    memory[temp42 + 0x24:temp42 + 0x24 + 0x20] = 0x20;\n                    memory[temp42 + 0x44:temp42 + 0x44 + 0x20] = 0x5072696365206f7220616d6f756e742065786365656473203131312062697473;\n                    var temp43 = memory[0x40:0x60];\n                    revert(memory[temp43:temp43 + temp42 - temp43 + 0x64]);\n                } else if (var2 <= 0x00) {\n                    var temp40 = memory[0x40:0x60];\n                    memory[temp40:temp40 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp40 + 0x04:temp40 + 0x04 + 0x20] = 0x20;\n                    memory[temp40 + 0x24:temp40 + 0x24 + 0x20] = 0x20;\n                    memory[temp40 + 0x44:temp40 + 0x44 + 0x20] = 0x5072696365206e6565647320746f2062652067726561746572207468616e2030;\n                    var temp41 = memory[0x40:0x60];\n                    revert(memory[temp41:temp41 + temp40 - temp41 + 0x64]);\n                } else if (var3 > 0x00) {\n                    var7 = 0x167a;\n                    var8 = var2;\n                    var9 = var3;\n                    goto label_09E1;\n                } else {\n                    var temp38 = memory[0x40:0x60];\n                    memory[temp38:temp38 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp38 + 0x04:temp38 + 0x04 + 0x20] = 0x20;\n                    memory[temp38 + 0x24:temp38 + 0x24 + 0x20] = 0x21;\n                    memory[temp38 + 0x44:temp38 + 0x44 + 0x20] = 0x416d6f756e74206e6565647320746f2062652067726561746572207468616e20;\n                    memory[temp38 + 0x64:temp38 + 0x64 + 0x20] = 0x3000000000000000000000000000000000000000000000000000000000000000;\n                    var temp39 = memory[0x40:0x60];\n                    revert(memory[temp39:temp39 + temp38 - temp39 + 0x84]);\n                }\n            } else {\n                var7 = 0x1544;\n                var8 = var3;\n                var7 = func_24A9(var8);\n                goto label_1544;\n            }\n        } else if (var0 == 0x935c1fb1) {\n            // Dispatch table entry for addressIndex(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var2 = addressIndex(var2);\n            goto label_0285;\n        } else if (var0 == 0xa4c0ed36) {\n            // Dispatch table entry for onTokenTransfer(address,uint256,bytes)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp44 = memory[0x40:0x60];\n            var temp45 = msg.data[0x44:0x64];\n            var temp46 = msg.data[temp45 + 0x04:temp45 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp44 + (temp46 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp44:temp44 + 0x20] = temp46;\n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            memory[temp44 + 0x20:temp44 + 0x20 + temp46] = msg.data[temp45 + 0x24:temp45 + 0x24 + temp46];\n            var4 = temp44;\n            onTokenTransfer(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xaa072d0c) {\n            // Dispatch table entry for 0xaa072d0c (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = msg.data[0x04:0x24];\n            var2 = func_19D9(var2);\n            goto label_0285;\n        } else if (var0 == 0xc375fcfa) {\n            // Dispatch table entry for poolOwners()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0369;\n            var2 = poolOwners();\n            goto label_0369;\n        } else if (var0 == 0xc3aea22e) {\n            // Dispatch table entry for fillSellOrder(uint256)\n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var4 = var3;\n            var5 = var4;\n            var6 = var5;\n            var7 = var6;\n            var8 = var7;\n            var9 = var8;\n            var10 = var9;\n            var11 = 0x1a14;\n            var12 = 0x08;\n            var13 = var2;\n            var11 = func_233B(var12, var13);\n            var3 = var11;\n            var temp47 = var3 / 0x02 ** 0xfe;\n            var11 = temp47;\n        \n            if (var11 > 0x02) { assert(); }\n        \n            var temp48 = var11;\n            var4 = temp48;\n            var11 = 0x02;\n            var12 = var4;\n        \n            if (var12 > 0x02) { assert(); }\n        \n            if (var12 == var11) {\n                var11 = 0x1a96;\n                var12 = msg.sender;\n                var11 = func_24BC(var12);\n                var5 = var11;\n            \n                if (var5 != (var3 * 0x04) / 0x02 ** 0xe0) {\n                    var temp49 = var3;\n                    var6 = (temp49 * 0x0400000000) / 0x02 ** 0x91;\n                    var7 = (temp49 * 0x02 ** 0x91) / 0x02 ** 0x91;\n                    var11 = 0x1b1b;\n                    var12 = var6;\n                    var13 = var7;\n                    goto label_09E1;\n                } else {\n                    var temp50 = memory[0x40:0x60];\n                    memory[temp50:temp50 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp50 + 0x04:temp50 + 0x04 + 0x20] = 0x20;\n                    memory[temp50 + 0x24:temp50 + 0x24 + 0x20] = 0x1e;\n                    memory[temp50 + 0x44:temp50 + 0x44 + 0x20] = 0x596f752063616e6e6f742066696c6c20796f7572206f776e206f726465720000;\n                    var temp51 = memory[0x40:0x60];\n                    revert(memory[temp51:temp51 + temp50 - temp51 + 0x64]);\n                }\n            } else {\n                var temp52 = memory[0x40:0x60];\n                memory[temp52:temp52 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp52 + 0x04:temp52 + 0x04 + 0x20] = 0x20;\n                memory[temp52 + 0x24:temp52 + 0x24 + 0x20] = 0x18;\n                memory[temp52 + 0x44:temp52 + 0x44 + 0x20] = 0x54686973206973206e6f7420612073656c6c206f726465720000000000000000;\n                var temp53 = memory[0x40:0x60];\n                revert(memory[temp53:temp53 + temp52 - temp53 + 0x64]);\n            }\n        } else if (var0 == 0xd05bb517) {\n            // Dispatch table entry for withdrawFeeToken(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            withdrawFeeToken(var2);\n            stop();\n        } else if (var0 == 0xd09ef241) {\n            // Dispatch table entry for getOrder(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04ca;\n            var2 = msg.data[0x04:0x24];\n            var1, var2, var3, var4 = getOrder(var2);\n            var5 = memory[0x40:0x60];\n            var6 = var5;\n            var7 = var1;\n        \n            if (var7 > 0x02) { assert(); }\n        \n            var temp54 = var6;\n            memory[temp54:temp54 + 0x20] = var7 & 0xff;\n            memory[temp54 + 0x20:temp54 + 0x20 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            memory[temp54 + 0x40:temp54 + 0x40 + 0x20] = var3;\n            memory[temp54 + 0x60:temp54 + 0x60 + 0x20] = var4;\n            var temp55 = memory[0x40:0x60];\n            return memory[temp55:temp55 + temp54 - temp55 + 0x80];\n        } else if (var0 == 0xddca3f43) {\n            // Dispatch table entry for fee()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0285;\n            var2 = fee();\n            goto label_0285;\n        } else if (var0 == 0xdef8ecf4) {\n            // Dispatch table entry for removeBuyOrder(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var4 = var3;\n            var5 = var4;\n            var6 = var5;\n            var7 = var6;\n            var8 = var7;\n            var9 = var8;\n            var10 = 0x1f62;\n            var11 = 0x08;\n            var12 = var2;\n            var10 = func_233B(var11, var12);\n            var3 = var10;\n            var temp56 = var3 / 0x02 ** 0xfe;\n            var10 = temp56;\n        \n            if (var10 > 0x02) { assert(); }\n        \n            var temp57 = var10;\n            var4 = temp57;\n            var10 = 0x01;\n            var11 = var4;\n        \n            if (var11 > 0x02) { assert(); }\n        \n            if (var11 == var10) {\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x07;\n                var5 = storage[keccak256(memory[0x00:0x40])];\n            \n                if (var5 == (var3 * 0x04) / 0x02 ** 0xe0) {\n                    var temp58 = var3;\n                    var6 = (temp58 * 0x0400000000) / 0x02 ** 0x91;\n                    var7 = (temp58 * 0x02 ** 0x91) / 0x02 ** 0x91;\n                    var10 = 0x209b;\n                    var11 = 0x08;\n                    var12 = var2;\n                    var10 = func_2351(var11, var12);\n                \n                    if (var10) {\n                        var10 = 0x20e9;\n                        var11 = var6;\n                        var12 = var7;\n                        goto label_09E1;\n                    } else {\n                        var temp59 = memory[0x40:0x60];\n                        memory[temp59:temp59 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp59 + 0x04:temp59 + 0x04 + 0x20] = 0x20;\n                        memory[temp59 + 0x24:temp59 + 0x24 + 0x20] = 0x11;\n                        var temp60 = memory[0x00:0x20];\n                        memory[0x00:0x20] = code[0x26cb:0x26eb];\n                        var temp61 = memory[0x00:0x20];\n                        memory[0x00:0x20] = temp60;\n                        memory[temp59 + 0x44:temp59 + 0x44 + 0x20] = temp61;\n                        var temp62 = memory[0x40:0x60];\n                        revert(memory[temp62:temp62 + temp59 - temp62 + 0x64]);\n                    }\n                } else {\n                    var temp63 = memory[0x40:0x60];\n                    memory[temp63:temp63 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp63 + 0x04:temp63 + 0x04 + 0x20] = 0x20;\n                    memory[temp63 + 0x24:temp63 + 0x24 + 0x20] = 0x24;\n                    memory[temp63 + 0x44:temp63 + 0x44 + 0x20] = 0x596f7520617265206e6f74207468652073656e646572206f662074686973206f;\n                    memory[temp63 + 0x64:temp63 + 0x64 + 0x20] = 0x7264657200000000000000000000000000000000000000000000000000000000;\n                    var temp64 = memory[0x40:0x60];\n                    revert(memory[temp64:temp64 + temp63 - temp64 + 0x84]);\n                }\n            } else {\n                var temp65 = memory[0x40:0x60];\n                memory[temp65:temp65 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp65 + 0x04:temp65 + 0x04 + 0x20] = 0x20;\n                memory[temp65 + 0x24:temp65 + 0x24 + 0x20] = 0x17;\n                memory[temp65 + 0x44:temp65 + 0x44 + 0x20] = 0x54686973206973206e6f74206120627579206f72646572000000000000000000;\n                var temp66 = memory[0x40:0x60];\n                revert(memory[temp66:temp66 + temp65 - temp66 + 0x64]);\n            }\n        } else if (var0 == 0xe96716ee) {\n            // Dispatch table entry for 0xe96716ee (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0369;\n            var2 = msg.data[0x04:0x24];\n            var2 = func_21C2(var2);\n            goto label_0369;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x016d;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            transferOwnership(var2);\n            stop();\n        } else if (var0 == 0xf8b42f78) {\n            // Dispatch table entry for getOrderBookKeys(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0588;\n            var2 = msg.data[0x04:0x24];\n            var1 = getOrderBookKeys(var2);\n            var2 = memory[0x40:0x60];\n            var3 = var2;\n            var4 = var1;\n            var5 = 0x0140;\n            var6 = var5;\n            var7 = var3;\n            var8 = var4;\n            var9 = 0x00;\n        \n            if (var9 >= var6) {\n            label_05AE:\n                var temp67 = memory[0x40:0x60];\n                return memory[temp67:temp67 + (var5 + var3) - temp67];\n            } else {\n            label_059F:\n                var temp68 = var9;\n                memory[temp68 + var7:temp68 + var7 + 0x20] = memory[temp68 + var8:temp68 + var8 + 0x20];\n                var9 = temp68 + 0x20;\n            \n                if (var9 >= var6) { goto label_05AE; }\n                else { goto label_059F; }\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getOrders(var arg0) returns (var r0, var arg0, var r2, var r3, var r4) {\n        r2 = 0x0880;\n        r2 = func_264D();\n        r3 = 0x0888;\n        r3 = func_264D();\n        r4 = 0x0890;\n        r4 = func_264D();\n        var var3 = 0x0898;\n        var3 = func_264D();\n        var var4 = 0x08a0;\n        var4 = func_264D();\n        var var5 = 0x00;\n        var var6 = var5;\n        var var7 = var6;\n    \n        if (var7 >= 0x0a) {\n        label_09CF:\n            var temp0 = r4;\n            r4 = var4;\n            var temp1 = r2;\n            r2 = temp0;\n            r0 = temp1;\n            var temp2 = r3;\n            r3 = var3;\n            arg0 = temp2;\n            return r0, arg0, r2, r3, r4;\n        } else {\n        label_08AF:\n            var var8 = arg0 + var5;\n            var var9 = 0x08bb;\n            var var10 = 0x08;\n            var9 = func_2441(var10);\n        \n            if (var9 == var8) { goto label_09CF; }\n        \n            var8 = 0x08d9;\n            var9 = 0x08;\n            var10 = var5 + arg0;\n            var8 = func_2448(var9, var10);\n            var6 = var8;\n            var8 = var6;\n            var9 = r2;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            memory[var10 * 0x20 + var9:var10 * 0x20 + var9 + 0x20] = var8;\n            var8 = 0x08fe;\n            var9 = 0x08;\n            var10 = var6;\n            var8 = func_233B(var9, var10);\n            var temp3 = var8;\n            var7 = temp3;\n            var8 = 0x06;\n            var9 = (var7 * 0x04) / 0x02 ** 0xe0;\n        \n            if (var9 >= storage[var8]) { assert(); }\n        \n            memory[0x00:0x20] = var8;\n            var8 = storage[keccak256(memory[0x00:0x20]) + var9] & 0x02 ** 0xa0 - 0x01;\n            var9 = r3;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            memory[var10 * 0x20 + var9:var10 * 0x20 + var9 + 0x20] = var8 & 0x02 ** 0xa0 - 0x01;\n            var8 = var7 / 0x02 ** 0xfe;\n        \n            if (var8 > 0x02) { assert(); }\n        \n            var9 = r4;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            var temp4 = var10 * 0x20 + var9;\n            var temp5 = var8;\n            var9 = temp5;\n            var8 = temp4;\n        \n            if (var9 > 0x02) { assert(); }\n        \n            var temp6 = var8;\n            var temp7 = var9;\n            var8 = temp7;\n            var9 = temp6;\n            var10 = var8;\n        \n            if (var10 > 0x02) { assert(); }\n        \n            memory[var9:var9 + 0x20] = var10;\n            var8 = (var7 * 0x0400000000) / 0x02 ** 0x91;\n            var9 = var3;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            memory[var10 * 0x20 + var9:var10 * 0x20 + var9 + 0x20] = var8;\n            var8 = (var7 * 0x02 ** 0x91) / 0x02 ** 0x91;\n            var9 = var4;\n            var10 = var5;\n        \n            if (var10 >= 0x0a) { assert(); }\n        \n            memory[var10 * 0x20 + var9:var10 * 0x20 + var9 + 0x20] = var8;\n            var7 = var7;\n            var5 = var5 + 0x01;\n        \n            if (var5 >= 0x0a) { goto label_09CF; }\n            else { goto label_08AF; }\n        }\n    }\n    \n    function totalFees() returns (var r0) { return storage[0x04]; }\n    \n    function func_0A14(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0A20(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_246E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function getOrderBookSize() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0a3f;\n        var var2 = 0x08;\n        return func_2441(var2);\n    }\n    \n    function func_0A42(var arg0) returns (var r0) { return arg0; }\n    \n    function getOrderBookKey(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0a51;\n        var var2 = 0x08;\n        var1 = func_2441(var2);\n    \n        if (arg0 >= var1) {\n            var0 = 0x00;\n        \n        label_0A74:\n            return var0;\n        } else {\n            var1 = 0x0a69;\n            var2 = 0x08;\n            var var3 = arg0;\n            var1 = func_2448(var2, var3);\n            var0 = var1;\n            goto label_0A74;\n        }\n    }\n    \n    function orderCount() returns (var r0) { return storage[0x01]; }\n    \n    function func_0E0F() returns (var r0) { return storage[0x03]; }\n    \n    function withdrawDistributedToPoolOwners() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n        var var0 = 0x00;\n        var var1 = 0x0ebd;\n        var var2 = storage[0x04];\n        var var3 = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x70a08231;\n        var var5 = temp0 + 0x24;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = temp0 - var7 + 0x24;\n        var var9 = var7;\n        var var10 = var0;\n        var var11 = var3;\n        var var12 = !address(var11).code.length;\n    \n        if (var12) { revert(memory[0x00:0x00]); }\n    \n        var1 = func_0E85(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12);\n        var0 = var1;\n    \n        if (var0 > 0x00) {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = temp2 & storage[0x0a];\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = var0;\n            var1 = storage[0x0b] & temp2;\n            var2 = 0xa9059cbb;\n            var3 = temp1 + 0x44;\n            var4 = 0x20;\n            var5 = memory[0x40:0x60];\n            var6 = temp1 - var5 + 0x44;\n            var7 = var5;\n            var8 = 0x00;\n            var9 = var1;\n            var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp3;\n            temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp3;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 >= 0x20) { return; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var temp4 = returndata.length;\n                memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n            memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x39;\n            memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x5468657265206973206e6f2064697374726962757465642066656520746f6b65;\n            memory[temp5 + 0x64:temp5 + 0x64 + 0x20] = 0x6e2062616c616e636520696e2074686520636f6e747261637400000000000000;\n            var temp6 = memory[0x40:0x60];\n            revert(memory[temp6:temp6 + temp5 - temp6 + 0x84]);\n        }\n    }\n    \n    function func_0E85(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10) returns (var r0) {\n        var temp0;\n        temp0, memory[arg5:arg5 + arg4] = address(arg9).call.gas(msg.gas).value(arg8)(memory[arg7:arg7 + arg6]);\n        arg4 = !temp0;\n    \n        if (!arg4) {\n            arg1 = memory[0x40:0x60];\n            arg2 = returndata.length;\n        \n            if (arg2 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg0;\n            arg0 = memory[arg1:arg1 + 0x20];\n            arg1 = temp1;\n            r0 = func_25CC(arg0, arg1);\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function feeToken() returns (var r0) { return storage[0x0b] & 0x02 ** 0xa0 - 0x01; }\n    \n    function setFee(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x15;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x53656e646572206e6f7420617574686f72697365640000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        } else if (arg0 <= 0x06f05b59d3b20000) {\n            storage[0x02] = arg0;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1b;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x466565732063616e2774206265206d6f7265207468616e203530250000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        }\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function addressIndex(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function onTokenTransfer(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (msg.sender == storage[0x0b] & 0x02 ** 0xa0 - 0x01) {\n            var var1 = 0x198c;\n            var var2 = arg0;\n            var1 = func_24BC(var2);\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x05;\n            var0 = var1;\n            var1 = 0x19ae;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = arg1;\n            var1 = func_2432(var2, var3);\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x19d0;\n            var2 = storage[0x04];\n            var3 = arg1;\n            var1 = func_2432(var2, var3);\n            storage[0x04] = var1;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x20;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x53656e646572206e6565647320746f206265207468652066656520746f6b656e;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        }\n    }\n    \n    function func_19D9(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function poolOwners() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function withdrawFeeToken(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x1d32;\n        var var2 = msg.sender;\n        var1 = func_24BC(var2);\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x05;\n        var0 = var1;\n    \n        if (arg0 <= storage[keccak256(memory[0x00:0x40])]) {\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x05;\n            var1 = 0x1de0;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = arg0;\n            var1 = func_25CC(var2, var3);\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x1e02;\n            var2 = storage[0x04];\n            var3 = arg0;\n            var1 = func_25CC(var2, var3);\n            storage[0x04] = var1;\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = 0x05;\n        \n            if (storage[keccak256(memory[0x00:0x40])]) {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = arg0;\n                var1 = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n                var2 = 0xa9059cbb;\n                var3 = temp0 + 0x44;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = temp0 - var5 + 0x44;\n                var var7 = var5;\n                var var8 = 0x00;\n                var var9 = var1;\n                var var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n            label_1E97:\n                var temp1;\n                temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp1;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 >= 0x20) { return; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp2 = returndata.length;\n                    memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                memory[0x00:0x20] = var0;\n                memory[0x20:0x40] = 0x05;\n                storage[keccak256(memory[0x00:0x40])] = 0x00;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = msg.sender;\n                memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = arg0;\n                var1 = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n                var2 = 0xa9059cbb;\n                var3 = temp3 + 0x44;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = temp3 - var5 + 0x44;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (!var10) { goto label_1E97; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n            memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x29;\n            memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x596f75277265207769746864726177696e67206d6f7265207468616e20796f75;\n            memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x722062616c616e63650000000000000000000000000000000000000000000000;\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n        }\n    }\n    \n    function getOrder(var arg0) returns (var r0, var arg0, var r2, var r3) {\n        r2 = 0x00;\n        r3 = r2;\n        var var2 = r3;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = 0x1ede;\n        var var6 = 0x08;\n        var var7 = arg0;\n        var5 = func_233B(var6, var7);\n        var4 = var5;\n        var temp0 = var4 / 0x02 ** 0xfe;\n        var5 = temp0;\n    \n        if (var5 > 0x02) { assert(); }\n    \n        var6 = 0x06;\n        var7 = (var4 * 0x04) / 0x02 ** 0xe0;\n    \n        if (var7 >= storage[var6]) { assert(); }\n    \n        memory[0x00:0x20] = var6;\n        var temp1 = var4;\n        r3 = (temp1 * 0x02 ** 0x91) / 0x02 ** 0x91;\n        arg0 = storage[keccak256(memory[0x00:0x20]) + var7] & 0x02 ** 0xa0 - 0x01;\n        r2 = (temp1 * 0x0400000000) / 0x02 ** 0x91;\n        r0 = var5;\n        return r0, arg0, r2, r3;\n    }\n    \n    function fee() returns (var r0) { return storage[0x02]; }\n    \n    function func_21C2(var arg0) returns (var arg0) {\n        var var0 = 0x06;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x15;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x53656e646572206e6f7420617574686f72697365640000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0x02 ** 0xa0 - 0x01, stack[-1] & 0x02 ** 0xa0 - 0x01]);\n            storage[0x00] = (temp1 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getOrderBookKeys(var arg0) returns (var r0) {\n        var var0 = 0x22d1;\n        var0 = func_264D();\n        var var1 = 0x00;\n    \n        if (var1 >= 0x0a) {\n        label_2335:\n            return var0;\n        } else {\n        label_22DE:\n            var var2 = 0x22e7;\n            var var3 = 0x08;\n            var2 = func_2441(var3);\n        \n            if (var1 + arg0 >= var2) {\n                var2 = 0x00;\n                var3 = var0;\n                var var4 = var1;\n            \n                if (var4 >= 0x0a) { assert(); }\n            \n                memory[var4 * 0x20 + var3:var4 * 0x20 + var3 + 0x20] = var2;\n                var1 = var1 + 0x01;\n            \n            label_22D4:\n            \n                if (var1 >= 0x0a) { goto label_2335; }\n                else { goto label_22DE; }\n            } else {\n                var2 = 0x2303;\n                var3 = 0x08;\n                var4 = var1 + arg0;\n                var2 = func_2448(var3, var4);\n                var3 = var0;\n                var4 = var1;\n            \n                if (var4 >= 0x0a) { assert(); }\n            \n                memory[var4 * 0x20 + var3:var4 * 0x20 + var3 + 0x20] = var2;\n                var1 = var1 + 0x01;\n                goto label_22D4;\n            }\n        }\n    }\n    \n    function func_233B(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg1;\n        memory[0x20:0x40] = arg0;\n        return storage[keccak256(memory[0x00:0x40]) + 0x01];\n    }\n    \n    function func_2351(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg1;\n        memory[0x20:0x40] = arg0;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n    \n        if (!storage[var1]) {\n            var0 = 0x00;\n            goto label_242B;\n        } else if (storage[var1] >= storage[arg0 + 0x01]) {\n        label_23F8:\n            var var2 = storage[arg0 + 0x01] + ~0x00;\n            var var3 = 0x240d;\n            var var4 = arg0 + 0x01;\n            var var5 = var2;\n            func_266D(var4, var5);\n            memory[0x00:0x20] = arg1;\n            memory[0x20:0x40] = arg0;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = 0x00;\n            storage[temp0 + 0x01] = 0x00;\n            var0 = 0x01;\n        \n        label_242B:\n            return var0;\n        } else {\n            var2 = storage[var1];\n            var temp1 = storage[arg0 + 0x01];\n            var3 = arg0;\n            var5 = arg0 + 0x01;\n            var4 = 0x00;\n            var var6 = temp1 + ~0x00;\n        \n            if (var6 >= temp1) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp2 = var4;\n            memory[temp2:temp2 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])];\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var3;\n            storage[keccak256(memory[0x00:0x00 + temp2 + 0x40])] = var2;\n            var2 = arg0 + 0x01;\n            var temp3 = storage[var2];\n            var3 = temp3 + ~0x00;\n        \n            if (var3 >= temp3) { assert(); }\n        \n            memory[0x00:0x20] = var2;\n            var2 = storage[keccak256(memory[0x00:0x20]) + var3];\n            var3 = arg0 + 0x01;\n            var4 = storage[var1] - 0x01;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            storage[keccak256(memory[0x00:0x20]) + var4] = var2;\n            goto label_23F8;\n        }\n    }\n    \n    function func_2432(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_2441(var arg0) returns (var r0) { return storage[arg0 + 0x01]; }\n    \n    function func_2448(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0 + 0x01;\n        var var2 = arg1;\n    \n        if (var2 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var1;\n        return storage[keccak256(memory[0x00:0x20]) + var2];\n    }\n    \n    function func_246E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_248A:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_248A;\n        }\n    }\n    \n    function func_24A9(var arg0) returns (var r0) { return 0x8000000000000000000000000000 > arg0; }\n    \n    function func_24BC(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])]) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n            goto label_0A74;\n        } else if (0x0100000000 > storage[0x06]) {\n            var temp0 = storage[0x06];\n            var temp1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x07;\n            storage[keccak256(memory[0x00:0x40])] = temp0;\n            storage[0x06] = temp0 + 0x01;\n            memory[0x00:0x20] = 0x06;\n            var temp2 = temp0 + 0xf652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f;\n            storage[temp2] = temp1 | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            var0 = storage[0x06] + ~0x00;\n        \n        label_0A74:\n            return var0;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x20;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x526567697374657265642061646472657373657320686974206d6178696d756d;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n        }\n    }\n    \n    function func_25CC(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_264D() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x0140;\n        memory[temp0:temp0 + 0x0a * 0x20] = code[code.length:code.length + 0x0a * 0x20];\n        return temp0;\n    }\n    \n    function func_266D(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_0FD9:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x0fd9;\n            var var1 = 0x0a42;\n            var var2 = temp3 + temp4;\n            var var3 = arg1 + temp3;\n        \n            if (var2 <= var3) {\n                var1 = func_26A6(var2, var3);\n                var0 = func_0A42(var1);\n                goto label_0FD9;\n            } else {\n            label_269B:\n                var temp5 = var3;\n                storage[temp5] = 0x00;\n                var3 = temp5 + 0x01;\n            \n                if (var2 > var3) { goto label_269B; }\n            \n                var1 = func_26A6(var2, var3);\n                // Error: Could not resolve method call return address!\n            }\n        }\n    }\n    \n    function func_26A6(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 62.99679946899414,
	"usage": {
		"completion_tokens": 505,
		"prompt_tokens": 19199,
		"total_tokens": 19704
	}
}