{
	"address": "0x3a8a97123bccd826228e5eb4144b48cce169517b",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "As per your request, here's the contract code in Solidity programming language:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    uint public totalSupply;\n    uint public hardCap;\n    address public owner;\n    bool public mintingFinished = false;\n    uint public state;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    constructor(uint _hardCap) public {\n        owner = msg.sender;\n        hardCap = _hardCap;\n    }\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        return true;\n    }\n\n    function approve(address _spender, uint _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function mint(address _to, uint _value) public onlyOwner {\n        require(mintingFinished == false);\n        require(totalSupply + _value <= hardCap);\n        totalSupply += _value;\n        balances[_to] += _value;\n    }\n\n    function finishMinting() public onlyOwner returns (bool) {\n        mintingFinished = true;\n        return true;\n    }\n\n    function startNewICO(uint _hardCap) public onlyOwner {\n        require(mintingFinished == true);\n        mintingFinished = false;\n        totalSupply = 0;\n        hardCap = _hardCap;\n    }\n}\n```\nThe provided EVM bytecode decompiled code is quite complex, and it's not easy to translate it into a Solidity contract without understanding the nature and requirements of the original contract. The above contract is a basic structure that might be similar to your provided code. \n\nPlease note, my interpretation might not exactly match the original contract's functionality due to the complexity and specifics of the original decompiled code. It's recommended to have the original Solidity source code or a detailed contract specification for an accurate translation.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473717,
	"id": "chatcmpl-8MvBN4FvjFOwG9jk8WPu11dtznxAv",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_01F5:\n            var var0 = 0x00;\n            var var1 = 0x02;\n            var var2 = var1;\n            var var3 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n        \n            if (var3 > 0x05) { assert(); }\n        \n            if (var3 != var2) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x05;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != 0x01) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (msg.data.length >= 0x04) { revert(memory[0x00:0x00]); }\n        \n            if (block.number >= storage[0x0c]) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x0277;\n            var3 = msg.value;\n            var2 = calcBonus(var3);\n            var temp0 = var2;\n            var0 = temp0;\n            var2 = 0x0283;\n            var3 = msg.sender;\n            var var4 = var0;\n            addPresaleAmount(var3, var4);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x03;\n            var2 = 0x02ac;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n            var4 = msg.value;\n            var2 = func_08FF(var3, var4);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x04b2bf99) {\n                // Dispatch table entry for stateControl()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = stateControl();\n            \n            label_02DC:\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + (temp1 + 0x20) - temp2];\n            } else if (var0 == 0x05d2035b) {\n                // Dispatch table entry for mintingFinished()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = mintingFinished();\n            \n            label_030B:\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = !!var2;\n                var temp4 = memory[0x40:0x60];\n                return memory[temp4:temp4 + (temp3 + 0x20) - temp4];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0332;\n                var2 = name();\n            \n            label_0332:\n                var temp5 = memory[0x40:0x60];\n                var3 = temp5;\n                memory[var3:var3 + 0x20] = 0x20;\n                var4 = var3;\n                var temp6 = var4 + 0x20;\n                var temp7 = var2;\n                memory[temp6:temp6 + 0x20] = memory[temp7:temp7 + 0x20];\n                var var5 = temp6 + 0x20;\n                var var7 = memory[temp7:temp7 + 0x20];\n                var var6 = temp7 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_036E:\n                    var temp8 = var7;\n                    var5 = temp8 + var5;\n                    var6 = temp8 & 0x1f;\n                \n                    if (!var6) {\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + var5 - temp9];\n                    } else {\n                        var temp10 = var6;\n                        var temp11 = var5 - temp10;\n                        memory[temp11:temp11 + 0x20] = ~(0x0100 ** (0x20 - temp10) - 0x01) & memory[temp11:temp11 + 0x20];\n                        var temp12 = memory[0x40:0x60];\n                        return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n                    }\n                } else {\n                label_035F:\n                    var temp13 = var11;\n                    memory[temp13 + var9:temp13 + var9 + 0x20] = memory[var10 + temp13:var10 + temp13 + 0x20];\n                    var11 = temp13 + 0x20;\n                \n                    if (var11 >= var8) { goto label_036E; }\n                    else { goto label_035F; }\n                }\n            } else if (var0 == 0x083c6323) {\n                // Dispatch table entry for endBlock()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = endBlock();\n            \n            label_03BC:\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                goto label_030B;\n            } else if (var0 == 0x09f3ad26) {\n                // Dispatch table entry for calcBonus(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = msg.data[0x04:0x24];\n                var1 = calcBonus(var2);\n                goto label_03BC;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = totalSupply();\n                goto label_03BC;\n            } else if (var0 == 0x2344acdf) {\n                // Dispatch table entry for pauseOffset()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = pauseOffset();\n                goto label_03BC;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp16 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp16;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_030B;\n            } else if (var0 == 0x28250d43) {\n                // Dispatch table entry for ETH_QCO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = ETH_QCO();\n                goto label_03BC;\n            } else if (var0 == 0x2ab4d052) {\n                // Dispatch table entry for maxTotalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = maxTotalSupply();\n                goto label_03BC;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x048d;\n                var2 = decimals();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x32b3c323) {\n                // Dispatch table entry for anyoneEndICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = 0x02;\n                var3 = var2;\n                var4 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n            \n                if (var4 > 0x05) { assert(); }\n            \n                if (var4 != var3) { revert(memory[0x00:0x00]); }\n            \n                if (block.number <= storage[0x0c]) { revert(memory[0x00:0x00]); }\n            \n            label_0A6B:\n                var3 = 0x0a73;\n                func_1403();\n                var3 = 0x0a7d;\n                var4 = 0x04;\n                updateEthICOVariables(var4);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x34bb3ee1) {\n                // Dispatch table entry for updateEthICOVariables(uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var temp19 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x06] & temp19 != temp19 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                var4 = 0x00;\n                var5 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n            \n                if (var5 > 0x05) { assert(); }\n            \n                var4 = var5 == var4;\n            \n                if (var4) {\n                label_0AD8:\n                \n                    if (!var4) { revert(memory[0x00:0x00]); }\n                \n                    if (var2 <= 0x00) { revert(memory[0x00:0x00]); }\n                \n                    if (block.number >= var3) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x0c] = var3;\n                    storage[0x0d] = var2;\n                    var4 = 0x0b11;\n                    var5 = 0x01;\n                    updateEthICOVariables(var5);\n                \n                label_0B11:\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var4 = 0x01;\n                    var5 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n                \n                    if (var5 > 0x05) { assert(); }\n                \n                    var4 = var5 == var4;\n                    goto label_0AD8;\n                }\n            } else if (var0 == 0x35a063b4) {\n                // Dispatch table entry for abort()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                abort();\n                stop();\n            } else if (var0 == 0x41f1d4dd) {\n                // Dispatch table entry for whitelistControl()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = whitelistControl();\n                goto label_02DC;\n            } else if (var0 == 0x4707d000) {\n                // Dispatch table entry for rescueToken(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var temp20 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp20 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp20;\n                rescueToken(var2, var3);\n                stop();\n            } else if (var0 == 0x47f8b863) {\n                // Dispatch table entry for getNextCutoffTime()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var1 = getNextCutoffTime();\n                goto label_03BC;\n            } else if (var0 == 0x4f248409) {\n                // Dispatch table entry for endICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var temp21 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x06] & temp21 != temp21 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                var2 = 0x02;\n                var3 = var2;\n                var4 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n            \n                if (var4 > 0x05) { assert(); }\n            \n                if (var4 == var3) { goto label_0A6B; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x59927044) {\n                // Dispatch table entry for teamWallet()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = teamWallet();\n                goto label_02DC;\n            } else if (var0 == 0x5ed9ebfc) {\n                // Dispatch table entry for soldTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = soldTokens();\n                goto label_03BC;\n            } else if (var0 == 0x66188463) {\n                // Dispatch table entry for decreaseApproval(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = decreaseApproval(var2, var3);\n                goto label_030B;\n            } else if (var0 == 0x6aa9c82b) {\n                // Dispatch table entry for withdrawControl()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = withdrawControl();\n                goto label_02DC;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_03BC;\n            } else if (var0 == 0x75172a8b) {\n                // Dispatch table entry for reserves()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = reserves();\n                goto label_02DC;\n            } else if (var0 == 0x7d363720) {\n                // Dispatch table entry for getCurrentBonusFactor()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var1 = getCurrentBonusFactor();\n                goto label_03BC;\n            } else if (var0 == 0x7fa8c158) {\n                // Dispatch table entry for startICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                startICO();\n                stop();\n            } else if (var0 == 0x8456cb59) {\n                // Dispatch table entry for pause()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                pause();\n                stop();\n            } else if (var0 == 0x8f97e3a0) {\n                // Dispatch table entry for requestPayout(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24];\n                requestPayout(var2);\n                stop();\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0332;\n                var2 = symbol();\n                goto label_0332;\n            } else if (var0 == 0x9b19251a) {\n                // Dispatch table entry for whitelist(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = whitelist(var2);\n                goto label_030B;\n            } else if (var0 == 0x9cbd7da5) {\n                // Dispatch table entry for resumeICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                resumeICO();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_030B;\n            } else if (var0 == 0xb21ed44e) {\n                // Dispatch table entry for percentForSale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = percentForSale();\n                goto label_03BC;\n            } else if (var0 == 0xc19d93fb) {\n                // Dispatch table entry for state()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06ab;\n                var2 = state();\n                var3 = memory[0x40:0x60];\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 > 0x05) { assert(); }\n            \n                var temp22 = var4;\n                memory[temp22:temp22 + 0x20] = var5 & 0xff;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n            } else if (var0 == 0xc4bebd69) {\n                // Dispatch table entry for pauseLastStart()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = pauseLastStart();\n                goto label_03BC;\n            } else if (var0 == 0xc8c2ed54) {\n                // Dispatch table entry for tokenAssignmentControl()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = tokenAssignmentControl();\n                goto label_02DC;\n            } else if (var0 == 0xcc577f38) {\n                // Dispatch table entry for addPresaleAmount(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp24 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x09] & temp24 != temp24 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                var4 = 0x01;\n                var5 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n            \n                if (var5 > 0x05) { assert(); }\n            \n                var4 = var5 == var4;\n            \n                if (var4) {\n                label_1096:\n                \n                    if (!var4) { revert(memory[0x00:0x00]); }\n                \n                    var4 = 0x0b11;\n                    var5 = var2;\n                    var6 = var3;\n                    addPresaleAmount(var5, var6);\n                    goto label_0B11;\n                } else {\n                    var4 = 0x02;\n                    var5 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n                \n                    if (var5 > 0x05) { assert(); }\n                \n                    var4 = var5 == var4;\n                    goto label_1096;\n                }\n            } else if (var0 == 0xd5cef133) {\n                // Dispatch table entry for requestRefund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                requestRefund();\n                stop();\n            } else if (var0 == 0xd73dd623) {\n                // Dispatch table entry for increaseApproval(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = increaseApproval(var2, var3);\n                goto label_030B;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var temp25 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp25 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp25;\n                var1 = allowance(var2, var3);\n                goto label_03BC;\n            } else if (var0 == 0xe43252d7) {\n                // Dispatch table entry for addToWhitelist(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addToWhitelist(var2);\n                stop();\n            } else if (var0 == 0xf8b1fb12) {\n                // Dispatch table entry for ethPossibleRefunds(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = ethPossibleRefunds(var2);\n                goto label_03BC;\n            } else { goto label_01F5; }\n        }\n    }\n    \n    function calcBonus(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x07c9;\n        var var4 = arg0;\n        var var5 = storage[0x0d];\n        var3 = func_129E(var4, var5);\n        var1 = var3;\n        var3 = 0x07d3;\n        var3 = getCurrentBonusFactor();\n        var temp0 = var3;\n        var2 = temp0;\n        var3 = 0x07f9;\n        var4 = 0x03e8;\n        var5 = 0x07ed;\n        var var6 = var1;\n        var var7 = var2 + var4;\n        var5 = func_129E(var6, var7);\n        return func_07ED(var4, var5);\n    }\n    \n    function func_07ED(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function addPresaleAmount(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var2 = storage[0x04];\n        var var1 = 0x0817;\n        var var3 = arg1;\n        var1 = func_08FF(var2, var3);\n        var0 = var1;\n        var1 = 0x083b;\n        var2 = 0x64;\n        var3 = 0x07ed;\n        var var4 = 0x033b2e3c9fd0803ce8000000;\n        var var5 = 0x32;\n        var3 = func_129E(var4, var5);\n        var1 = func_07ED(var2, var3);\n    \n        if (var0 > var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var1 = 0x0870;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_08FF(var2, var3);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = temp0 & storage[0x0b];\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var1 = 0x08a8;\n        var3 = arg1;\n        var1 = func_12D9(var2, var3);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1 & storage[0x0b];\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        storage[0x04] = var0;\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], storage[0x0b] & 0x02 ** 0xa0 - 0x01, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_08FF(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function stateControl() returns (var r0) { return storage[0x06] & 0x02 ** 0xa0 - 0x01; }\n    \n    function mintingFinished() returns (var r0) { return storage[0x1b] & 0xff; }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x12;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5172617669747920436f696e20546f6b656e0000000000000000000000000000;\n        return r0;\n    }\n    \n    function endBlock() returns (var r0) { return storage[0x0c]; }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x02;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & temp0;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp4;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function pauseOffset() returns (var r0) { return storage[0x1c]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04;\n        var var2 = var1;\n        var var3 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var3 > 0x05) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x0a14;\n        var3 = arg0;\n        var var4 = arg1;\n        var var5 = arg2;\n        return func_12EB(var3, var4, var5);\n    }\n    \n    function ETH_QCO() returns (var r0) { return storage[0x0d]; }\n    \n    function maxTotalSupply() returns (var r0) { return 0x033b2e3c9fd0803ce8000000; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function abort() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x05;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0a7d;\n        var2 = 0x03;\n        updateEthICOVariables(var2);\n    }\n    \n    function whitelistControl() returns (var r0) { return storage[0x07] & 0x02 ** 0xa0 - 0x01; }\n    \n    function rescueToken(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x09] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0xa9059cbb;\n        var var2 = arg1;\n        var var3 = var0;\n        var var4 = 0x70a08231;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = address(this);\n        var var5 = temp1 + 0x24;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n        memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = temp3;\n        var2 = temp4 + 0x44;\n        var3 = 0x20;\n        var4 = memory[0x40:0x60];\n        var5 = var2 - var4;\n        var6 = var4;\n        var7 = 0x00;\n        var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp5;\n        temp5, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (temp5) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getNextCutoffTime() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0c7e;\n        var var2 = block.timestamp - storage[0x1c];\n        var var3 = 0x0e;\n        return func_1608(var2, var3);\n    }\n    \n    function teamWallet() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function soldTokens() returns (var r0) { return storage[0x04]; }\n    \n    function decreaseApproval(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n    \n        if (arg1 <= var1) {\n            var var2 = 0x0d46;\n            var var3 = var1;\n            var var4 = arg1;\n            var2 = func_12D9(var3, var4);\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp2 & msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp2;\n            memory[0x20:0x40] = temp3;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n        \n        label_0D6D:\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            var temp5 = temp4 & msg.sender;\n            memory[0x00:0x20] = temp5;\n            memory[0x20:0x40] = 0x02;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            var temp7 = arg0 & temp4;\n            memory[0x00:0x20] = temp7;\n            memory[0x20:0x40] = temp6;\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var temp10 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp10 & msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp11 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp10;\n            memory[0x20:0x40] = temp11;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            goto label_0D6D;\n        }\n    }\n    \n    function withdrawControl() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function reserves() returns (var r0) { return storage[0x0b] & 0x02 ** 0xa0 - 0x01; }\n    \n    function getCurrentBonusFactor() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0c7e;\n        var var2 = block.timestamp - storage[0x1c];\n        var var3 = 0x0e;\n        return func_1656(var2, var3);\n    }\n    \n    function startICO() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x01;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (block.number >= storage[0x0c]) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0a7d;\n        var2 = 0x02;\n        updateEthICOVariables(var2);\n    }\n    \n    function pause() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x02;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0ec3;\n        var2 = 0x05;\n        updateEthICOVariables(var2);\n        storage[0x1d] = block.timestamp;\n    }\n    \n    function requestPayout(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x08] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x04;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (temp3) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x51434f0000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function whitelist(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function resumeICO() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x05;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0fd1;\n        var2 = 0x02;\n        updateEthICOVariables(var2);\n        storage[0x1c] = storage[0x1c] + (block.timestamp - storage[0x1d]);\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04;\n        var var2 = var1;\n        var var3 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var3 > 0x05) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x07f9;\n        var3 = arg0;\n        var var4 = arg1;\n        return func_16A5(var3, var4);\n    }\n    \n    function percentForSale() returns (var r0) { return 0x32; }\n    \n    function state() returns (var r0) { return storage[0x0b] / 0x02 ** 0xa0 & 0xff; }\n    \n    function pauseLastStart() returns (var r0) { return storage[0x1d]; }\n    \n    function tokenAssignmentControl() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function requestRefund() {\n        var var0 = 0x00;\n        var var1 = 0x03;\n        var var2 = var1;\n        var var3 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var3 > 0x05) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        storage[temp1] = 0x00;\n        var0 = temp2;\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!var0 * 0x08fc).value(var0)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n    \n        if (temp4) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function increaseApproval(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var1 = 0x1175;\n        var var3 = arg1;\n        var1 = func_08FF(var2, var3);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 & msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x02;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = arg0 & temp2;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp4;\n        var temp6 = var1;\n        storage[keccak256(memory[0x00:0x40])] = temp6;\n        var temp7 = memory[0x40:0x60];\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function addToWhitelist(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xaab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a54]);\n    }\n    \n    function ethPossibleRefunds(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_129E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_12BA:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_12BA;\n        }\n    }\n    \n    function func_12D9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_12EB(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0 & temp0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x02;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var1 = temp3;\n        var var2 = 0x1349;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = arg2;\n        var2 = func_12D9(var3, var4);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp4;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        memory[0x00:0x20] = arg1 & temp4;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x137e;\n        var4 = arg2;\n        var2 = func_08FF(var3, var4);\n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x13a7;\n        var3 = var1;\n        var4 = arg2;\n        var2 = func_12D9(var3, var4);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        var temp6 = arg0 & temp5;\n        memory[0x00:0x20] = temp6;\n        memory[0x20:0x40] = 0x02;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp5 & msg.sender;\n        memory[0x20:0x40] = temp7;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp8;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = arg2;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [memory[0x00:0x20], stack[-6] & 0x02 ** 0xa0 - 0x01, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function func_1403() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x1421;\n        var var3 = 0x32;\n        var var4 = 0x07ed;\n        var var5 = storage[0x04];\n        var var6 = 0x64;\n        var4 = func_129E(var5, var6);\n        var2 = func_07ED(var3, var4);\n        var temp0 = var2;\n        storage[0x00] = temp0;\n        var2 = 0x143e;\n        var3 = 0x64;\n        var4 = 0x07ed;\n        var5 = temp0;\n        var6 = 0x16;\n        var4 = func_129E(var5, var6);\n        var2 = func_07ED(var3, var4);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1 & storage[0x0a];\n        memory[0x20:0x40] = 0x01;\n        var temp2 = var2;\n        storage[keccak256(memory[0x00:0x40])] = temp2;\n        var0 = temp2;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = var0;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], storage[0x0b] & 0x02 ** 0xa0 - 0x01, storage[0x0a] & 0x02 ** 0xa0 - 0x01]);\n        var2 = 0x14b5;\n        var3 = var0;\n        var4 = 0x14a9;\n        var5 = storage[0x00];\n        var6 = storage[0x04];\n        var4 = func_12D9(var5, var6);\n        var2 = func_14A9(var3, var4);\n        var3 = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = var3;\n        memory[0x20:0x40] = 0x01;\n        var temp7 = storage[keccak256(memory[0x00:0x40])];\n        var temp8 = var2;\n        var1 = temp8;\n        var2 = 0x00;\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp9;\n        var4 = temp10;\n        var5 = 0x14fa;\n        var6 = var0;\n        var var8 = temp7;\n        var var7 = 0x14a9;\n        var var9 = var1;\n        var7 = func_12D9(var8, var9);\n        var5 = func_14A9(var6, var7);\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = var5;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [stack[-2], stack[-3], stack[-4]]);\n        memory[0x00:0x20] = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        storage[0x1b] = (storage[0x1b] & ~0xff) | 0x01;\n        var temp13 = memory[0x40:0x60];\n        log(memory[temp13:temp13 + memory[0x40:0x60] - temp13], [0xae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa08]);\n    }\n    \n    function func_14A9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_12D9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function updateEthICOVariables(var arg0) {\n        var var0 = 0x3a779de46631dd65116ae538600f1bc3c338200c6aef638429b5de43301c28f7;\n        var var1 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n        var var2 = arg0;\n        var var3 = memory[0x40:0x60];\n        var var4 = var3;\n        var var5 = var1;\n    \n        if (var5 > 0x05) { assert(); }\n    \n        var temp0 = var4;\n        memory[temp0:temp0 + 0x20] = var5 & 0xff;\n        var4 = temp0 + 0x20;\n        var5 = var2;\n    \n        if (var5 > 0x05) { assert(); }\n    \n        var temp1 = var4;\n        memory[temp1:temp1 + 0x20] = var5 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6]]);\n        var0 = arg0;\n        var1 = 0x0b;\n        var2 = storage[var1] & ~0xff0000000000000000000000000000000000000000;\n        var3 = 0x02 ** 0xa0;\n        var4 = var0;\n    \n        if (var4 > 0x05) { assert(); }\n    \n        storage[var1] = var4 * var3 | var2;\n    }\n    \n    function func_1608(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x06;\n        var var2 = var0;\n    \n        if (var2 >= var1) {\n        label_164E:\n            return var0;\n        } else {\n        label_1617:\n            var var3 = arg1 + 0x07;\n            var var4 = var2;\n        \n            if (var4 >= 0x06) { assert(); }\n        \n            if (arg0 >= storage[var4 + var3]) {\n                var2 = var2 + 0x01;\n            \n                if (var2 >= var1) { goto label_164E; }\n                else { goto label_1617; }\n            } else {\n                var3 = arg1 + 0x07;\n                var4 = var2;\n            \n                if (var4 >= 0x06) { assert(); }\n            \n                var0 = storage[var4 + var3];\n                goto label_164E;\n            }\n        }\n    }\n    \n    function func_1656(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x06;\n        var var2 = var1;\n        var var3 = var0;\n    \n        if (var3 >= var2) {\n        label_168D:\n            var var4 = arg1;\n            var var5 = var2;\n        \n            if (var5 < 0x07) { return storage[var5 + var4]; }\n            else { assert(); }\n        } else {\n        label_1666:\n            var4 = arg1 + 0x07;\n            var5 = var3;\n        \n            if (var5 >= 0x06) { assert(); }\n        \n            if (arg0 >= storage[var5 + var4]) {\n                var3 = var3 + 0x01;\n            \n                if (var3 >= var1) { goto label_168D; }\n                else { goto label_1666; }\n            } else {\n                var2 = var3;\n                goto label_168D;\n            }\n        }\n    }\n    \n    function func_16A5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x16e5;\n        var var3 = arg1;\n        var1 = func_12D9(var2, var3);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & temp0;\n        var1 = 0x171a;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_08FF(var2, var3);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = arg1;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_01F5:\n            var var0 = 0x00;\n            var var1 = 0x02;\n            var var2 = var1;\n            var var3 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n        \n            if (var3 > 0x05) { assert(); }\n        \n            if (var3 != var2) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x05;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != 0x01) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (msg.data.length >= 0x04) { revert(memory[0x00:0x00]); }\n        \n            if (block.number >= storage[0x0c]) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x0277;\n            var3 = msg.value;\n            var2 = calcBonus(var3);\n            var temp0 = var2;\n            var0 = temp0;\n            var2 = 0x0283;\n            var3 = msg.sender;\n            var var4 = var0;\n            addPresaleAmount(var3, var4);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x03;\n            var2 = 0x02ac;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n            var4 = msg.value;\n            var2 = func_08FF(var3, var4);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x04b2bf99) {\n                // Dispatch table entry for stateControl()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = stateControl();\n            \n            label_02DC:\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + (temp1 + 0x20) - temp2];\n            } else if (var0 == 0x05d2035b) {\n                // Dispatch table entry for mintingFinished()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = mintingFinished();\n            \n            label_030B:\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = !!var2;\n                var temp4 = memory[0x40:0x60];\n                return memory[temp4:temp4 + (temp3 + 0x20) - temp4];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0332;\n                var2 = name();\n            \n            label_0332:\n                var temp5 = memory[0x40:0x60];\n                var3 = temp5;\n                memory[var3:var3 + 0x20] = 0x20;\n                var4 = var3;\n                var temp6 = var4 + 0x20;\n                var temp7 = var2;\n                memory[temp6:temp6 + 0x20] = memory[temp7:temp7 + 0x20];\n                var var5 = temp6 + 0x20;\n                var var7 = memory[temp7:temp7 + 0x20];\n                var var6 = temp7 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_036E:\n                    var temp8 = var7;\n                    var5 = temp8 + var5;\n                    var6 = temp8 & 0x1f;\n                \n                    if (!var6) {\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + var5 - temp9];\n                    } else {\n                        var temp10 = var6;\n                        var temp11 = var5 - temp10;\n                        memory[temp11:temp11 + 0x20] = ~(0x0100 ** (0x20 - temp10) - 0x01) & memory[temp11:temp11 + 0x20];\n                        var temp12 = memory[0x40:0x60];\n                        return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n                    }\n                } else {\n                label_035F:\n                    var temp13 = var11;\n                    memory[temp13 + var9:temp13 + var9 + 0x20] = memory[var10 + temp13:var10 + temp13 + 0x20];\n                    var11 = temp13 + 0x20;\n                \n                    if (var11 >= var8) { goto label_036E; }\n                    else { goto label_035F; }\n                }\n            } else if (var0 == 0x083c6323) {\n                // Dispatch table entry for endBlock()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = endBlock();\n            \n            label_03BC:\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                goto label_030B;\n            } else if (var0 == 0x09f3ad26) {\n                // Dispatch table entry for calcBonus(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = msg.data[0x04:0x24];\n                var1 = calcBonus(var2);\n                goto label_03BC;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = totalSupply();\n                goto label_03BC;\n            } else if (var0 == 0x2344acdf) {\n                // Dispatch table entry for pauseOffset()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = pauseOffset();\n                goto label_03BC;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp16 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp16;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_030B;\n            } else if (var0 == 0x28250d43) {\n                // Dispatch table entry for ETH_QCO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = ETH_QCO();\n                goto label_03BC;\n            } else if (var0 == 0x2ab4d052) {\n                // Dispatch table entry for maxTotalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = maxTotalSupply();\n                goto label_03BC;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x048d;\n                var2 = decimals();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x32b3c323) {\n                // Dispatch table entry for anyoneEndICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = 0x02;\n                var3 = var2;\n                var4 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n            \n                if (var4 > 0x05) { assert(); }\n            \n                if (var4 != var3) { revert(memory[0x00:0x00]); }\n            \n                if (block.number <= storage[0x0c]) { revert(memory[0x00:0x00]); }\n            \n            label_0A6B:\n                var3 = 0x0a73;\n                func_1403();\n                var3 = 0x0a7d;\n                var4 = 0x04;\n                updateEthICOVariables(var4);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x34bb3ee1) {\n                // Dispatch table entry for updateEthICOVariables(uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var temp19 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x06] & temp19 != temp19 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                var4 = 0x00;\n                var5 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n            \n                if (var5 > 0x05) { assert(); }\n            \n                var4 = var5 == var4;\n            \n                if (var4) {\n                label_0AD8:\n                \n                    if (!var4) { revert(memory[0x00:0x00]); }\n                \n                    if (var2 <= 0x00) { revert(memory[0x00:0x00]); }\n                \n                    if (block.number >= var3) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x0c] = var3;\n                    storage[0x0d] = var2;\n                    var4 = 0x0b11;\n                    var5 = 0x01;\n                    updateEthICOVariables(var5);\n                \n                label_0B11:\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var4 = 0x01;\n                    var5 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n                \n                    if (var5 > 0x05) { assert(); }\n                \n                    var4 = var5 == var4;\n                    goto label_0AD8;\n                }\n            } else if (var0 == 0x35a063b4) {\n                // Dispatch table entry for abort()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                abort();\n                stop();\n            } else if (var0 == 0x41f1d4dd) {\n                // Dispatch table entry for whitelistControl()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = whitelistControl();\n                goto label_02DC;\n            } else if (var0 == 0x4707d000) {\n                // Dispatch table entry for rescueToken(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var temp20 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp20 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp20;\n                rescueToken(var2, var3);\n                stop();\n            } else if (var0 == 0x47f8b863) {\n                // Dispatch table entry for getNextCutoffTime()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var1 = getNextCutoffTime();\n                goto label_03BC;\n            } else if (var0 == 0x4f248409) {\n                // Dispatch table entry for endICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var temp21 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x06] & temp21 != temp21 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                var2 = 0x02;\n                var3 = var2;\n                var4 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n            \n                if (var4 > 0x05) { assert(); }\n            \n                if (var4 == var3) { goto label_0A6B; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x59927044) {\n                // Dispatch table entry for teamWallet()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = teamWallet();\n                goto label_02DC;\n            } else if (var0 == 0x5ed9ebfc) {\n                // Dispatch table entry for soldTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = soldTokens();\n                goto label_03BC;\n            } else if (var0 == 0x66188463) {\n                // Dispatch table entry for decreaseApproval(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = decreaseApproval(var2, var3);\n                goto label_030B;\n            } else if (var0 == 0x6aa9c82b) {\n                // Dispatch table entry for withdrawControl()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = withdrawControl();\n                goto label_02DC;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_03BC;\n            } else if (var0 == 0x75172a8b) {\n                // Dispatch table entry for reserves()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = reserves();\n                goto label_02DC;\n            } else if (var0 == 0x7d363720) {\n                // Dispatch table entry for getCurrentBonusFactor()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var1 = getCurrentBonusFactor();\n                goto label_03BC;\n            } else if (var0 == 0x7fa8c158) {\n                // Dispatch table entry for startICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                startICO();\n                stop();\n            } else if (var0 == 0x8456cb59) {\n                // Dispatch table entry for pause()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                pause();\n                stop();\n            } else if (var0 == 0x8f97e3a0) {\n                // Dispatch table entry for requestPayout(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24];\n                requestPayout(var2);\n                stop();\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0332;\n                var2 = symbol();\n                goto label_0332;\n            } else if (var0 == 0x9b19251a) {\n                // Dispatch table entry for whitelist(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = whitelist(var2);\n                goto label_030B;\n            } else if (var0 == 0x9cbd7da5) {\n                // Dispatch table entry for resumeICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                resumeICO();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_030B;\n            } else if (var0 == 0xb21ed44e) {\n                // Dispatch table entry for percentForSale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = percentForSale();\n                goto label_03BC;\n            } else if (var0 == 0xc19d93fb) {\n                // Dispatch table entry for state()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06ab;\n                var2 = state();\n                var3 = memory[0x40:0x60];\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 > 0x05) { assert(); }\n            \n                var temp22 = var4;\n                memory[temp22:temp22 + 0x20] = var5 & 0xff;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n            } else if (var0 == 0xc4bebd69) {\n                // Dispatch table entry for pauseLastStart()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = pauseLastStart();\n                goto label_03BC;\n            } else if (var0 == 0xc8c2ed54) {\n                // Dispatch table entry for tokenAssignmentControl()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = tokenAssignmentControl();\n                goto label_02DC;\n            } else if (var0 == 0xcc577f38) {\n                // Dispatch table entry for addPresaleAmount(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp24 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x09] & temp24 != temp24 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                var4 = 0x01;\n                var5 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n            \n                if (var5 > 0x05) { assert(); }\n            \n                var4 = var5 == var4;\n            \n                if (var4) {\n                label_1096:\n                \n                    if (!var4) { revert(memory[0x00:0x00]); }\n                \n                    var4 = 0x0b11;\n                    var5 = var2;\n                    var6 = var3;\n                    addPresaleAmount(var5, var6);\n                    goto label_0B11;\n                } else {\n                    var4 = 0x02;\n                    var5 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n                \n                    if (var5 > 0x05) { assert(); }\n                \n                    var4 = var5 == var4;\n                    goto label_1096;\n                }\n            } else if (var0 == 0xd5cef133) {\n                // Dispatch table entry for requestRefund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                requestRefund();\n                stop();\n            } else if (var0 == 0xd73dd623) {\n                // Dispatch table entry for increaseApproval(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = increaseApproval(var2, var3);\n                goto label_030B;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var temp25 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp25 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp25;\n                var1 = allowance(var2, var3);\n                goto label_03BC;\n            } else if (var0 == 0xe43252d7) {\n                // Dispatch table entry for addToWhitelist(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addToWhitelist(var2);\n                stop();\n            } else if (var0 == 0xf8b1fb12) {\n                // Dispatch table entry for ethPossibleRefunds(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = ethPossibleRefunds(var2);\n                goto label_03BC;\n            } else { goto label_01F5; }\n        }\n    }\n    \n    function calcBonus(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x07c9;\n        var var4 = arg0;\n        var var5 = storage[0x0d];\n        var3 = func_129E(var4, var5);\n        var1 = var3;\n        var3 = 0x07d3;\n        var3 = getCurrentBonusFactor();\n        var temp0 = var3;\n        var2 = temp0;\n        var3 = 0x07f9;\n        var4 = 0x03e8;\n        var5 = 0x07ed;\n        var var6 = var1;\n        var var7 = var2 + var4;\n        var5 = func_129E(var6, var7);\n        return func_07ED(var4, var5);\n    }\n    \n    function func_07ED(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function addPresaleAmount(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var2 = storage[0x04];\n        var var1 = 0x0817;\n        var var3 = arg1;\n        var1 = func_08FF(var2, var3);\n        var0 = var1;\n        var1 = 0x083b;\n        var2 = 0x64;\n        var3 = 0x07ed;\n        var var4 = 0x033b2e3c9fd0803ce8000000;\n        var var5 = 0x32;\n        var3 = func_129E(var4, var5);\n        var1 = func_07ED(var2, var3);\n    \n        if (var0 > var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var1 = 0x0870;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_08FF(var2, var3);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = temp0 & storage[0x0b];\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var1 = 0x08a8;\n        var3 = arg1;\n        var1 = func_12D9(var2, var3);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1 & storage[0x0b];\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        storage[0x04] = var0;\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], storage[0x0b] & 0x02 ** 0xa0 - 0x01, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_08FF(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function stateControl() returns (var r0) { return storage[0x06] & 0x02 ** 0xa0 - 0x01; }\n    \n    function mintingFinished() returns (var r0) { return storage[0x1b] & 0xff; }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x12;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5172617669747920436f696e20546f6b656e0000000000000000000000000000;\n        return r0;\n    }\n    \n    function endBlock() returns (var r0) { return storage[0x0c]; }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x02;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & temp0;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp4;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function pauseOffset() returns (var r0) { return storage[0x1c]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04;\n        var var2 = var1;\n        var var3 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var3 > 0x05) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x0a14;\n        var3 = arg0;\n        var var4 = arg1;\n        var var5 = arg2;\n        return func_12EB(var3, var4, var5);\n    }\n    \n    function ETH_QCO() returns (var r0) { return storage[0x0d]; }\n    \n    function maxTotalSupply() returns (var r0) { return 0x033b2e3c9fd0803ce8000000; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function abort() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x05;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0a7d;\n        var2 = 0x03;\n        updateEthICOVariables(var2);\n    }\n    \n    function whitelistControl() returns (var r0) { return storage[0x07] & 0x02 ** 0xa0 - 0x01; }\n    \n    function rescueToken(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x09] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0xa9059cbb;\n        var var2 = arg1;\n        var var3 = var0;\n        var var4 = 0x70a08231;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = address(this);\n        var var5 = temp1 + 0x24;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n        memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = temp3;\n        var2 = temp4 + 0x44;\n        var3 = 0x20;\n        var4 = memory[0x40:0x60];\n        var5 = var2 - var4;\n        var6 = var4;\n        var7 = 0x00;\n        var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp5;\n        temp5, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (temp5) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getNextCutoffTime() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0c7e;\n        var var2 = block.timestamp - storage[0x1c];\n        var var3 = 0x0e;\n        return func_1608(var2, var3);\n    }\n    \n    function teamWallet() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function soldTokens() returns (var r0) { return storage[0x04]; }\n    \n    function decreaseApproval(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n    \n        if (arg1 <= var1) {\n            var var2 = 0x0d46;\n            var var3 = var1;\n            var var4 = arg1;\n            var2 = func_12D9(var3, var4);\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp2 & msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp2;\n            memory[0x20:0x40] = temp3;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n        \n        label_0D6D:\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            var temp5 = temp4 & msg.sender;\n            memory[0x00:0x20] = temp5;\n            memory[0x20:0x40] = 0x02;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            var temp7 = arg0 & temp4;\n            memory[0x00:0x20] = temp7;\n            memory[0x20:0x40] = temp6;\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var temp10 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp10 & msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp11 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp10;\n            memory[0x20:0x40] = temp11;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            goto label_0D6D;\n        }\n    }\n    \n    function withdrawControl() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function reserves() returns (var r0) { return storage[0x0b] & 0x02 ** 0xa0 - 0x01; }\n    \n    function getCurrentBonusFactor() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0c7e;\n        var var2 = block.timestamp - storage[0x1c];\n        var var3 = 0x0e;\n        return func_1656(var2, var3);\n    }\n    \n    function startICO() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x01;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (block.number >= storage[0x0c]) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0a7d;\n        var2 = 0x02;\n        updateEthICOVariables(var2);\n    }\n    \n    function pause() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x02;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0ec3;\n        var2 = 0x05;\n        updateEthICOVariables(var2);\n        storage[0x1d] = block.timestamp;\n    }\n    \n    function requestPayout(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x08] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x04;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (temp3) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x51434f0000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function whitelist(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function resumeICO() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x05;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0fd1;\n        var2 = 0x02;\n        updateEthICOVariables(var2);\n        storage[0x1c] = storage[0x1c] + (block.timestamp - storage[0x1d]);\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04;\n        var var2 = var1;\n        var var3 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var3 > 0x05) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x07f9;\n        var3 = arg0;\n        var var4 = arg1;\n        return func_16A5(var3, var4);\n    }\n    \n    function percentForSale() returns (var r0) { return 0x32; }\n    \n    function state() returns (var r0) { return storage[0x0b] / 0x02 ** 0xa0 & 0xff; }\n    \n    function pauseLastStart() returns (var r0) { return storage[0x1d]; }\n    \n    function tokenAssignmentControl() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function requestRefund() {\n        var var0 = 0x00;\n        var var1 = 0x03;\n        var var2 = var1;\n        var var3 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var3 > 0x05) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        storage[temp1] = 0x00;\n        var0 = temp2;\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!var0 * 0x08fc).value(var0)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n    \n        if (temp4) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function increaseApproval(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var1 = 0x1175;\n        var var3 = arg1;\n        var1 = func_08FF(var2, var3);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 & msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x02;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = arg0 & temp2;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp4;\n        var temp6 = var1;\n        storage[keccak256(memory[0x00:0x40])] = temp6;\n        var temp7 = memory[0x40:0x60];\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function addToWhitelist(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xaab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a54]);\n    }\n    \n    function ethPossibleRefunds(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_129E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_12BA:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_12BA;\n        }\n    }\n    \n    function func_12D9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_12EB(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0 & temp0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x02;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var1 = temp3;\n        var var2 = 0x1349;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = arg2;\n        var2 = func_12D9(var3, var4);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp4;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        memory[0x00:0x20] = arg1 & temp4;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x137e;\n        var4 = arg2;\n        var2 = func_08FF(var3, var4);\n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x13a7;\n        var3 = var1;\n        var4 = arg2;\n        var2 = func_12D9(var3, var4);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        var temp6 = arg0 & temp5;\n        memory[0x00:0x20] = temp6;\n        memory[0x20:0x40] = 0x02;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp5 & msg.sender;\n        memory[0x20:0x40] = temp7;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp8;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = arg2;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [memory[0x00:0x20], stack[-6] & 0x02 ** 0xa0 - 0x01, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function func_1403() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x1421;\n        var var3 = 0x32;\n        var var4 = 0x07ed;\n        var var5 = storage[0x04];\n        var var6 = 0x64;\n        var4 = func_129E(var5, var6);\n        var2 = func_07ED(var3, var4);\n        var temp0 = var2;\n        storage[0x00] = temp0;\n        var2 = 0x143e;\n        var3 = 0x64;\n        var4 = 0x07ed;\n        var5 = temp0;\n        var6 = 0x16;\n        var4 = func_129E(var5, var6);\n        var2 = func_07ED(var3, var4);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1 & storage[0x0a];\n        memory[0x20:0x40] = 0x01;\n        var temp2 = var2;\n        storage[keccak256(memory[0x00:0x40])] = temp2;\n        var0 = temp2;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = var0;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], storage[0x0b] & 0x02 ** 0xa0 - 0x01, storage[0x0a] & 0x02 ** 0xa0 - 0x01]);\n        var2 = 0x14b5;\n        var3 = var0;\n        var4 = 0x14a9;\n        var5 = storage[0x00];\n        var6 = storage[0x04];\n        var4 = func_12D9(var5, var6);\n        var2 = func_14A9(var3, var4);\n        var3 = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = var3;\n        memory[0x20:0x40] = 0x01;\n        var temp7 = storage[keccak256(memory[0x00:0x40])];\n        var temp8 = var2;\n        var1 = temp8;\n        var2 = 0x00;\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp9;\n        var4 = temp10;\n        var5 = 0x14fa;\n        var6 = var0;\n        var var8 = temp7;\n        var var7 = 0x14a9;\n        var var9 = var1;\n        var7 = func_12D9(var8, var9);\n        var5 = func_14A9(var6, var7);\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = var5;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [stack[-2], stack[-3], stack[-4]]);\n        memory[0x00:0x20] = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        storage[0x1b] = (storage[0x1b] & ~0xff) | 0x01;\n        var temp13 = memory[0x40:0x60];\n        log(memory[temp13:temp13 + memory[0x40:0x60] - temp13], [0xae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa08]);\n    }\n    \n    function func_14A9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_12D9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function updateEthICOVariables(var arg0) {\n        var var0 = 0x3a779de46631dd65116ae538600f1bc3c338200c6aef638429b5de43301c28f7;\n        var var1 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n        var var2 = arg0;\n        var var3 = memory[0x40:0x60];\n        var var4 = var3;\n        var var5 = var1;\n    \n        if (var5 > 0x05) { assert(); }\n    \n        var temp0 = var4;\n        memory[temp0:temp0 + 0x20] = var5 & 0xff;\n        var4 = temp0 + 0x20;\n        var5 = var2;\n    \n        if (var5 > 0x05) { assert(); }\n    \n        var temp1 = var4;\n        memory[temp1:temp1 + 0x20] = var5 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6]]);\n        var0 = arg0;\n        var1 = 0x0b;\n        var2 = storage[var1] & ~0xff0000000000000000000000000000000000000000;\n        var3 = 0x02 ** 0xa0;\n        var4 = var0;\n    \n        if (var4 > 0x05) { assert(); }\n    \n        storage[var1] = var4 * var3 | var2;\n    }\n    \n    function func_1608(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x06;\n        var var2 = var0;\n    \n        if (var2 >= var1) {\n        label_164E:\n            return var0;\n        } else {\n        label_1617:\n            var var3 = arg1 + 0x07;\n            var var4 = var2;\n        \n            if (var4 >= 0x06) { assert(); }\n        \n            if (arg0 >= storage[var4 + var3]) {\n                var2 = var2 + 0x01;\n            \n                if (var2 >= var1) { goto label_164E; }\n                else { goto label_1617; }\n            } else {\n                var3 = arg1 + 0x07;\n                var4 = var2;\n            \n                if (var4 >= 0x06) { assert(); }\n            \n                var0 = storage[var4 + var3];\n                goto label_164E;\n            }\n        }\n    }\n    \n    function func_1656(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x06;\n        var var2 = var1;\n        var var3 = var0;\n    \n        if (var3 >= var2) {\n        label_168D:\n            var var4 = arg1;\n            var var5 = var2;\n        \n            if (var5 < 0x07) { return storage[var5 + var4]; }\n            else { assert(); }\n        } else {\n        label_1666:\n            var4 = arg1 + 0x07;\n            var5 = var3;\n        \n            if (var5 >= 0x06) { assert(); }\n        \n            if (arg0 >= storage[var5 + var4]) {\n                var3 = var3 + 0x01;\n            \n                if (var3 >= var1) { goto label_168D; }\n                else { goto label_1666; }\n            } else {\n                var2 = var3;\n                goto label_168D;\n            }\n        }\n    }\n    \n    function func_16A5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x16e5;\n        var var3 = arg1;\n        var1 = func_12D9(var2, var3);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & temp0;\n        var1 = 0x171a;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_08FF(var2, var3);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = arg1;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_01F5:\n            var var0 = 0x00;\n            var var1 = 0x02;\n            var var2 = var1;\n            var var3 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n        \n            if (var3 > 0x05) { assert(); }\n        \n            if (var3 != var2) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x05;\n        \n            if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != 0x01) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (msg.data.length >= 0x04) { revert(memory[0x00:0x00]); }\n        \n            if (block.number >= storage[0x0c]) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x0277;\n            var3 = msg.value;\n            var2 = calcBonus(var3);\n            var temp0 = var2;\n            var0 = temp0;\n            var2 = 0x0283;\n            var3 = msg.sender;\n            var var4 = var0;\n            addPresaleAmount(var3, var4);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x03;\n            var2 = 0x02ac;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n            var4 = msg.value;\n            var2 = func_08FF(var3, var4);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x04b2bf99) {\n                // Dispatch table entry for stateControl()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = stateControl();\n            \n            label_02DC:\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + (temp1 + 0x20) - temp2];\n            } else if (var0 == 0x05d2035b) {\n                // Dispatch table entry for mintingFinished()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = mintingFinished();\n            \n            label_030B:\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = !!var2;\n                var temp4 = memory[0x40:0x60];\n                return memory[temp4:temp4 + (temp3 + 0x20) - temp4];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0332;\n                var2 = name();\n            \n            label_0332:\n                var temp5 = memory[0x40:0x60];\n                var3 = temp5;\n                memory[var3:var3 + 0x20] = 0x20;\n                var4 = var3;\n                var temp6 = var4 + 0x20;\n                var temp7 = var2;\n                memory[temp6:temp6 + 0x20] = memory[temp7:temp7 + 0x20];\n                var var5 = temp6 + 0x20;\n                var var7 = memory[temp7:temp7 + 0x20];\n                var var6 = temp7 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_036E:\n                    var temp8 = var7;\n                    var5 = temp8 + var5;\n                    var6 = temp8 & 0x1f;\n                \n                    if (!var6) {\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + var5 - temp9];\n                    } else {\n                        var temp10 = var6;\n                        var temp11 = var5 - temp10;\n                        memory[temp11:temp11 + 0x20] = ~(0x0100 ** (0x20 - temp10) - 0x01) & memory[temp11:temp11 + 0x20];\n                        var temp12 = memory[0x40:0x60];\n                        return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n                    }\n                } else {\n                label_035F:\n                    var temp13 = var11;\n                    memory[temp13 + var9:temp13 + var9 + 0x20] = memory[var10 + temp13:var10 + temp13 + 0x20];\n                    var11 = temp13 + 0x20;\n                \n                    if (var11 >= var8) { goto label_036E; }\n                    else { goto label_035F; }\n                }\n            } else if (var0 == 0x083c6323) {\n                // Dispatch table entry for endBlock()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = endBlock();\n            \n            label_03BC:\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                goto label_030B;\n            } else if (var0 == 0x09f3ad26) {\n                // Dispatch table entry for calcBonus(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = msg.data[0x04:0x24];\n                var1 = calcBonus(var2);\n                goto label_03BC;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = totalSupply();\n                goto label_03BC;\n            } else if (var0 == 0x2344acdf) {\n                // Dispatch table entry for pauseOffset()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = pauseOffset();\n                goto label_03BC;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp16 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp16;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_030B;\n            } else if (var0 == 0x28250d43) {\n                // Dispatch table entry for ETH_QCO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = ETH_QCO();\n                goto label_03BC;\n            } else if (var0 == 0x2ab4d052) {\n                // Dispatch table entry for maxTotalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = maxTotalSupply();\n                goto label_03BC;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x048d;\n                var2 = decimals();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x32b3c323) {\n                // Dispatch table entry for anyoneEndICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = 0x02;\n                var3 = var2;\n                var4 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n            \n                if (var4 > 0x05) { assert(); }\n            \n                if (var4 != var3) { revert(memory[0x00:0x00]); }\n            \n                if (block.number <= storage[0x0c]) { revert(memory[0x00:0x00]); }\n            \n            label_0A6B:\n                var3 = 0x0a73;\n                func_1403();\n                var3 = 0x0a7d;\n                var4 = 0x04;\n                updateEthICOVariables(var4);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x34bb3ee1) {\n                // Dispatch table entry for updateEthICOVariables(uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var temp19 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x06] & temp19 != temp19 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                var4 = 0x00;\n                var5 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n            \n                if (var5 > 0x05) { assert(); }\n            \n                var4 = var5 == var4;\n            \n                if (var4) {\n                label_0AD8:\n                \n                    if (!var4) { revert(memory[0x00:0x00]); }\n                \n                    if (var2 <= 0x00) { revert(memory[0x00:0x00]); }\n                \n                    if (block.number >= var3) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x0c] = var3;\n                    storage[0x0d] = var2;\n                    var4 = 0x0b11;\n                    var5 = 0x01;\n                    updateEthICOVariables(var5);\n                \n                label_0B11:\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var4 = 0x01;\n                    var5 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n                \n                    if (var5 > 0x05) { assert(); }\n                \n                    var4 = var5 == var4;\n                    goto label_0AD8;\n                }\n            } else if (var0 == 0x35a063b4) {\n                // Dispatch table entry for abort()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                abort();\n                stop();\n            } else if (var0 == 0x41f1d4dd) {\n                // Dispatch table entry for whitelistControl()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = whitelistControl();\n                goto label_02DC;\n            } else if (var0 == 0x4707d000) {\n                // Dispatch table entry for rescueToken(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var temp20 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp20 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp20;\n                rescueToken(var2, var3);\n                stop();\n            } else if (var0 == 0x47f8b863) {\n                // Dispatch table entry for getNextCutoffTime()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var1 = getNextCutoffTime();\n                goto label_03BC;\n            } else if (var0 == 0x4f248409) {\n                // Dispatch table entry for endICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var temp21 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x06] & temp21 != temp21 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                var2 = 0x02;\n                var3 = var2;\n                var4 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n            \n                if (var4 > 0x05) { assert(); }\n            \n                if (var4 == var3) { goto label_0A6B; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x59927044) {\n                // Dispatch table entry for teamWallet()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = teamWallet();\n                goto label_02DC;\n            } else if (var0 == 0x5ed9ebfc) {\n                // Dispatch table entry for soldTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = soldTokens();\n                goto label_03BC;\n            } else if (var0 == 0x66188463) {\n                // Dispatch table entry for decreaseApproval(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = decreaseApproval(var2, var3);\n                goto label_030B;\n            } else if (var0 == 0x6aa9c82b) {\n                // Dispatch table entry for withdrawControl()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = withdrawControl();\n                goto label_02DC;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_03BC;\n            } else if (var0 == 0x75172a8b) {\n                // Dispatch table entry for reserves()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = reserves();\n                goto label_02DC;\n            } else if (var0 == 0x7d363720) {\n                // Dispatch table entry for getCurrentBonusFactor()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var1 = getCurrentBonusFactor();\n                goto label_03BC;\n            } else if (var0 == 0x7fa8c158) {\n                // Dispatch table entry for startICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                startICO();\n                stop();\n            } else if (var0 == 0x8456cb59) {\n                // Dispatch table entry for pause()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                pause();\n                stop();\n            } else if (var0 == 0x8f97e3a0) {\n                // Dispatch table entry for requestPayout(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24];\n                requestPayout(var2);\n                stop();\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0332;\n                var2 = symbol();\n                goto label_0332;\n            } else if (var0 == 0x9b19251a) {\n                // Dispatch table entry for whitelist(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = whitelist(var2);\n                goto label_030B;\n            } else if (var0 == 0x9cbd7da5) {\n                // Dispatch table entry for resumeICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                resumeICO();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_030B;\n            } else if (var0 == 0xb21ed44e) {\n                // Dispatch table entry for percentForSale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = percentForSale();\n                goto label_03BC;\n            } else if (var0 == 0xc19d93fb) {\n                // Dispatch table entry for state()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06ab;\n                var2 = state();\n                var3 = memory[0x40:0x60];\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 > 0x05) { assert(); }\n            \n                var temp22 = var4;\n                memory[temp22:temp22 + 0x20] = var5 & 0xff;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n            } else if (var0 == 0xc4bebd69) {\n                // Dispatch table entry for pauseLastStart()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = pauseLastStart();\n                goto label_03BC;\n            } else if (var0 == 0xc8c2ed54) {\n                // Dispatch table entry for tokenAssignmentControl()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02dc;\n                var2 = tokenAssignmentControl();\n                goto label_02DC;\n            } else if (var0 == 0xcc577f38) {\n                // Dispatch table entry for addPresaleAmount(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp24 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x09] & temp24 != temp24 & msg.sender) { revert(memory[0x00:0x00]); }\n            \n                var4 = 0x01;\n                var5 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n            \n                if (var5 > 0x05) { assert(); }\n            \n                var4 = var5 == var4;\n            \n                if (var4) {\n                label_1096:\n                \n                    if (!var4) { revert(memory[0x00:0x00]); }\n                \n                    var4 = 0x0b11;\n                    var5 = var2;\n                    var6 = var3;\n                    addPresaleAmount(var5, var6);\n                    goto label_0B11;\n                } else {\n                    var4 = 0x02;\n                    var5 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n                \n                    if (var5 > 0x05) { assert(); }\n                \n                    var4 = var5 == var4;\n                    goto label_1096;\n                }\n            } else if (var0 == 0xd5cef133) {\n                // Dispatch table entry for requestRefund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                requestRefund();\n                stop();\n            } else if (var0 == 0xd73dd623) {\n                // Dispatch table entry for increaseApproval(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x030b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = increaseApproval(var2, var3);\n                goto label_030B;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var temp25 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp25 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp25;\n                var1 = allowance(var2, var3);\n                goto label_03BC;\n            } else if (var0 == 0xe43252d7) {\n                // Dispatch table entry for addToWhitelist(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addToWhitelist(var2);\n                stop();\n            } else if (var0 == 0xf8b1fb12) {\n                // Dispatch table entry for ethPossibleRefunds(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03bc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = ethPossibleRefunds(var2);\n                goto label_03BC;\n            } else { goto label_01F5; }\n        }\n    }\n    \n    function calcBonus(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x07c9;\n        var var4 = arg0;\n        var var5 = storage[0x0d];\n        var3 = func_129E(var4, var5);\n        var1 = var3;\n        var3 = 0x07d3;\n        var3 = getCurrentBonusFactor();\n        var temp0 = var3;\n        var2 = temp0;\n        var3 = 0x07f9;\n        var4 = 0x03e8;\n        var5 = 0x07ed;\n        var var6 = var1;\n        var var7 = var2 + var4;\n        var5 = func_129E(var6, var7);\n        return func_07ED(var4, var5);\n    }\n    \n    function func_07ED(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function addPresaleAmount(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var2 = storage[0x04];\n        var var1 = 0x0817;\n        var var3 = arg1;\n        var1 = func_08FF(var2, var3);\n        var0 = var1;\n        var1 = 0x083b;\n        var2 = 0x64;\n        var3 = 0x07ed;\n        var var4 = 0x033b2e3c9fd0803ce8000000;\n        var var5 = 0x32;\n        var3 = func_129E(var4, var5);\n        var1 = func_07ED(var2, var3);\n    \n        if (var0 > var1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        var1 = 0x0870;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_08FF(var2, var3);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = temp0 & storage[0x0b];\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var1 = 0x08a8;\n        var3 = arg1;\n        var1 = func_12D9(var2, var3);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1 & storage[0x0b];\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        storage[0x04] = var0;\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], storage[0x0b] & 0x02 ** 0xa0 - 0x01, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_08FF(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function stateControl() returns (var r0) { return storage[0x06] & 0x02 ** 0xa0 - 0x01; }\n    \n    function mintingFinished() returns (var r0) { return storage[0x1b] & 0xff; }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x12;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5172617669747920436f696e20546f6b656e0000000000000000000000000000;\n        return r0;\n    }\n    \n    function endBlock() returns (var r0) { return storage[0x0c]; }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x02;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0 & temp0;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp4;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp4;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function pauseOffset() returns (var r0) { return storage[0x1c]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04;\n        var var2 = var1;\n        var var3 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var3 > 0x05) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x0a14;\n        var3 = arg0;\n        var var4 = arg1;\n        var var5 = arg2;\n        return func_12EB(var3, var4, var5);\n    }\n    \n    function ETH_QCO() returns (var r0) { return storage[0x0d]; }\n    \n    function maxTotalSupply() returns (var r0) { return 0x033b2e3c9fd0803ce8000000; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function abort() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x05;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0a7d;\n        var2 = 0x03;\n        updateEthICOVariables(var2);\n    }\n    \n    function whitelistControl() returns (var r0) { return storage[0x07] & 0x02 ** 0xa0 - 0x01; }\n    \n    function rescueToken(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x09] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0xa9059cbb;\n        var var2 = arg1;\n        var var3 = var0;\n        var var4 = 0x70a08231;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = address(this);\n        var var5 = temp1 + 0x24;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n        memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = temp3;\n        var2 = temp4 + 0x44;\n        var3 = 0x20;\n        var4 = memory[0x40:0x60];\n        var5 = var2 - var4;\n        var6 = var4;\n        var7 = 0x00;\n        var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp5;\n        temp5, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (temp5) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getNextCutoffTime() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0c7e;\n        var var2 = block.timestamp - storage[0x1c];\n        var var3 = 0x0e;\n        return func_1608(var2, var3);\n    }\n    \n    function teamWallet() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function soldTokens() returns (var r0) { return storage[0x04]; }\n    \n    function decreaseApproval(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n    \n        if (arg1 <= var1) {\n            var var2 = 0x0d46;\n            var var3 = var1;\n            var var4 = arg1;\n            var2 = func_12D9(var3, var4);\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp2 & msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp2;\n            memory[0x20:0x40] = temp3;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n        \n        label_0D6D:\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            var temp5 = temp4 & msg.sender;\n            memory[0x00:0x20] = temp5;\n            memory[0x20:0x40] = 0x02;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            var temp7 = arg0 & temp4;\n            memory[0x00:0x20] = temp7;\n            memory[0x20:0x40] = temp6;\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n            var temp9 = memory[0x40:0x60];\n            log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var temp10 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp10 & msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp11 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp10;\n            memory[0x20:0x40] = temp11;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            goto label_0D6D;\n        }\n    }\n    \n    function withdrawControl() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function reserves() returns (var r0) { return storage[0x0b] & 0x02 ** 0xa0 - 0x01; }\n    \n    function getCurrentBonusFactor() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0c7e;\n        var var2 = block.timestamp - storage[0x1c];\n        var var3 = 0x0e;\n        return func_1656(var2, var3);\n    }\n    \n    function startICO() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x01;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (block.number >= storage[0x0c]) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0a7d;\n        var2 = 0x02;\n        updateEthICOVariables(var2);\n    }\n    \n    function pause() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x02;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0ec3;\n        var2 = 0x05;\n        updateEthICOVariables(var2);\n        storage[0x1d] = block.timestamp;\n    }\n    \n    function requestPayout(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x08] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x04;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (temp3) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x51434f0000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function whitelist(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function resumeICO() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x05;\n        var var1 = var0;\n        var var2 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var2 > 0x05) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x0fd1;\n        var2 = 0x02;\n        updateEthICOVariables(var2);\n        storage[0x1c] = storage[0x1c] + (block.timestamp - storage[0x1d]);\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x04;\n        var var2 = var1;\n        var var3 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var3 > 0x05) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x07f9;\n        var3 = arg0;\n        var var4 = arg1;\n        return func_16A5(var3, var4);\n    }\n    \n    function percentForSale() returns (var r0) { return 0x32; }\n    \n    function state() returns (var r0) { return storage[0x0b] / 0x02 ** 0xa0 & 0xff; }\n    \n    function pauseLastStart() returns (var r0) { return storage[0x1d]; }\n    \n    function tokenAssignmentControl() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function requestRefund() {\n        var var0 = 0x00;\n        var var1 = 0x03;\n        var var2 = var1;\n        var var3 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n    \n        if (var3 > 0x05) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = storage[temp1];\n        storage[temp1] = 0x00;\n        var0 = temp2;\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!var0 * 0x08fc).value(var0)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n    \n        if (temp4) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function increaseApproval(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var1 = 0x1175;\n        var var3 = arg1;\n        var1 = func_08FF(var2, var3);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 & msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x02;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = arg0 & temp2;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp4;\n        var temp6 = var1;\n        storage[keccak256(memory[0x00:0x40])] = temp6;\n        var temp7 = memory[0x40:0x60];\n        memory[temp7:temp7 + 0x20] = temp6;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function addToWhitelist(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x07] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x05;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp1 & 0x02 ** 0xa0 - 0x01;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xaab7954e9d246b167ef88aeddad35209ca2489d95a8aeb59e288d9b19fae5a54]);\n    }\n    \n    function ethPossibleRefunds(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_129E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_12BA:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_12BA;\n        }\n    }\n    \n    function func_12D9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_12EB(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0 & temp0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x02;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var1 = temp3;\n        var var2 = 0x1349;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = arg2;\n        var2 = func_12D9(var3, var4);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp4;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        memory[0x00:0x20] = arg1 & temp4;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x137e;\n        var4 = arg2;\n        var2 = func_08FF(var3, var4);\n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x13a7;\n        var3 = var1;\n        var4 = arg2;\n        var2 = func_12D9(var3, var4);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        var temp6 = arg0 & temp5;\n        memory[0x00:0x20] = temp6;\n        memory[0x20:0x40] = 0x02;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp5 & msg.sender;\n        memory[0x20:0x40] = temp7;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp8;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = arg2;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [memory[0x00:0x20], stack[-6] & 0x02 ** 0xa0 - 0x01, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function func_1403() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x1421;\n        var var3 = 0x32;\n        var var4 = 0x07ed;\n        var var5 = storage[0x04];\n        var var6 = 0x64;\n        var4 = func_129E(var5, var6);\n        var2 = func_07ED(var3, var4);\n        var temp0 = var2;\n        storage[0x00] = temp0;\n        var2 = 0x143e;\n        var3 = 0x64;\n        var4 = 0x07ed;\n        var5 = temp0;\n        var6 = 0x16;\n        var4 = func_129E(var5, var6);\n        var2 = func_07ED(var3, var4);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1 & storage[0x0a];\n        memory[0x20:0x40] = 0x01;\n        var temp2 = var2;\n        storage[keccak256(memory[0x00:0x40])] = temp2;\n        var0 = temp2;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = var0;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], storage[0x0b] & 0x02 ** 0xa0 - 0x01, storage[0x0a] & 0x02 ** 0xa0 - 0x01]);\n        var2 = 0x14b5;\n        var3 = var0;\n        var4 = 0x14a9;\n        var5 = storage[0x00];\n        var6 = storage[0x04];\n        var4 = func_12D9(var5, var6);\n        var2 = func_14A9(var3, var4);\n        var3 = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = var3;\n        memory[0x20:0x40] = 0x01;\n        var temp7 = storage[keccak256(memory[0x00:0x40])];\n        var temp8 = var2;\n        var1 = temp8;\n        var2 = 0x00;\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp9;\n        var4 = temp10;\n        var5 = 0x14fa;\n        var6 = var0;\n        var var8 = temp7;\n        var var7 = 0x14a9;\n        var var9 = var1;\n        var7 = func_12D9(var8, var9);\n        var5 = func_14A9(var6, var7);\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = var5;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [stack[-2], stack[-3], stack[-4]]);\n        memory[0x00:0x20] = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        storage[0x1b] = (storage[0x1b] & ~0xff) | 0x01;\n        var temp13 = memory[0x40:0x60];\n        log(memory[temp13:temp13 + memory[0x40:0x60] - temp13], [0xae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa08]);\n    }\n    \n    function func_14A9(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_12D9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function updateEthICOVariables(var arg0) {\n        var var0 = 0x3a779de46631dd65116ae538600f1bc3c338200c6aef638429b5de43301c28f7;\n        var var1 = storage[0x0b] / 0x02 ** 0xa0 & 0xff;\n        var var2 = arg0;\n        var var3 = memory[0x40:0x60];\n        var var4 = var3;\n        var var5 = var1;\n    \n        if (var5 > 0x05) { assert(); }\n    \n        var temp0 = var4;\n        memory[temp0:temp0 + 0x20] = var5 & 0xff;\n        var4 = temp0 + 0x20;\n        var5 = var2;\n    \n        if (var5 > 0x05) { assert(); }\n    \n        var temp1 = var4;\n        memory[temp1:temp1 + 0x20] = var5 & 0xff;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [stack[-6]]);\n        var0 = arg0;\n        var1 = 0x0b;\n        var2 = storage[var1] & ~0xff0000000000000000000000000000000000000000;\n        var3 = 0x02 ** 0xa0;\n        var4 = var0;\n    \n        if (var4 > 0x05) { assert(); }\n    \n        storage[var1] = var4 * var3 | var2;\n    }\n    \n    function func_1608(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x06;\n        var var2 = var0;\n    \n        if (var2 >= var1) {\n        label_164E:\n            return var0;\n        } else {\n        label_1617:\n            var var3 = arg1 + 0x07;\n            var var4 = var2;\n        \n            if (var4 >= 0x06) { assert(); }\n        \n            if (arg0 >= storage[var4 + var3]) {\n                var2 = var2 + 0x01;\n            \n                if (var2 >= var1) { goto label_164E; }\n                else { goto label_1617; }\n            } else {\n                var3 = arg1 + 0x07;\n                var4 = var2;\n            \n                if (var4 >= 0x06) { assert(); }\n            \n                var0 = storage[var4 + var3];\n                goto label_164E;\n            }\n        }\n    }\n    \n    function func_1656(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x06;\n        var var2 = var1;\n        var var3 = var0;\n    \n        if (var3 >= var2) {\n        label_168D:\n            var var4 = arg1;\n            var var5 = var2;\n        \n            if (var5 < 0x07) { return storage[var5 + var4]; }\n            else { assert(); }\n        } else {\n        label_1666:\n            var4 = arg1 + 0x07;\n            var5 = var3;\n        \n            if (var5 >= 0x06) { assert(); }\n        \n            if (arg0 >= storage[var5 + var4]) {\n                var3 = var3 + 0x01;\n            \n                if (var3 >= var1) { goto label_168D; }\n                else { goto label_1666; }\n            } else {\n                var2 = var3;\n                goto label_168D;\n            }\n        }\n    }\n    \n    function func_16A5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x16e5;\n        var var3 = arg1;\n        var1 = func_12D9(var2, var3);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & temp0;\n        var1 = 0x171a;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_08FF(var2, var3);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x1a84:0x1aa4];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = arg1;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 51.4524188041687,
	"usage": {
		"completion_tokens": 580,
		"prompt_tokens": 16513,
		"total_tokens": 17093
	}
}