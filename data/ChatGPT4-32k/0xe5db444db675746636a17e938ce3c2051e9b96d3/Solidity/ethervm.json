{
	"address": "0xe5db444db675746636a17e938ce3c2051e9b96d3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a simplified Solidity version of the contract described in the decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.5.1;\n\ncontract Contract {\n    address public owner;\n    uint256 public totalSupply;\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowed;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event OwnershipRenounced(address indexed previousOwner);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function renounceOwnership() public {\n        require(msg.sender == owner);\n        emit OwnershipRenounced(owner);\n        owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n```\n\nThis contract appears to be a basic ERC20 token contract, with additional functions for renouncing and transferring ownership. The contract provides standard ERC20 functionality, including balance checks, token transfers, and spending allowances. The contract owner can renounce their ownership or transfer it to another address. \n\nPlease note that the original decompiled EVM bytecode was quite complex, and this simplified Solidity version might not exactly match the original contract in all details. For example, the original contract may have contained additional checks, events, or other functionality not present in this simplified version.",
				"role": "assistant"
			}
		}
	],
	"created": 1700632394,
	"id": "chatcmpl-8NaSg9gz4Sd5QkyGQL9vnwcXomVGl",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x715018a6 > var0) {\n            if (0x23b872dd > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = 0x0102;\n                    var1 = func_0258();\n                \n                label_0102:\n                    var temp0 = var1;\n                    var1 = 0x010f;\n                    var var2 = temp0;\n                    var var3 = memory[0x40:0x60];\n                    var1 = func_0946(var2, var3);\n                \n                label_010F:\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + var1 - temp1];\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = 0x012b;\n                    var2 = 0x0126;\n                    var3 = msg.data.length;\n                    var var4 = 0x04;\n                    var2, var3 = transfer(var3, var4);\n                    var1 = func_0126(var2, var3);\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = !!var1;\n                    var1 = temp2 + 0x20;\n                    goto label_010F;\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = storage[0x06];\n                \n                label_013F:\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var1;\n                    var1 = temp3 + 0x20;\n                    goto label_010F;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x012b;\n                var2 = 0x015b;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4 = func_08E2(var3, var4);\n                var var5 = 0x00;\n                var var6 = 0x030d;\n                var var7 = var2;\n                var var8 = var3;\n                var var9 = var4;\n            \n            label_0678:\n            \n                if (!(var7 & (0x01 << 0xa0) - 0x01)) {\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                    memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x25;\n                    memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n                    memory[temp8 + 0x64:temp8 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n                    var10 = temp8 + 0x84;\n                    goto label_03F5;\n                } else if (var8 & (0x01 << 0xa0) - 0x01) {\n                    var var10 = 0x077b;\n                    var temp4 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp4 + 0x60;\n                    memory[temp4:temp4 + 0x20] = 0x26;\n                    memory[temp4 + 0x20:temp4 + 0x20 + 0x26] = code[0x09f9:0x0a1f];\n                    memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var var11 = storage[keccak256(memory[0x00:0x40])];\n                    var var12 = var9;\n                    var var13 = temp4;\n                    var10 = func_07FE(var11, var12, var13);\n                    var temp5 = (0x01 << 0xa0) - 0x01;\n                    memory[0x00:0x20] = var7 & temp5;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var10;\n                    memory[0x00:0x20] = var8 & temp5;\n                    var10 = 0x07aa;\n                    var11 = storage[keccak256(memory[0x00:0x40])];\n                    var12 = var9;\n                \n                label_0540:\n                    var13 = 0x00;\n                    var var14 = 0x054c;\n                    var var15 = var12;\n                    var var16 = var11;\n                    var14 = func_0999(var15, var16);\n                    var10 = var14;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x23;\n                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n                    memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x657373 << 0xe8;\n                    var10 = temp6 + 0x84;\n                \n                label_03F5:\n                    var temp7 = memory[0x40:0x60];\n                    revert(memory[temp7:temp7 + var10 - temp7]);\n                }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = storage[0x05] & 0xff;\n                var1 = temp9 + 0x20;\n                goto label_010F;\n            } else if (var0 == 0x39509351) {\n                // Dispatch table entry for increaseAllowance(address,uint256)\n                var1 = 0x012b;\n                var2 = 0x0183;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = transfer(var3, var4);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x02;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = temp10;\n                var6 = msg.sender;\n                var4 = 0x00;\n                var5 = 0x02f7;\n                var7 = var2;\n                var9 = storage[keccak256(memory[var4:var4 + 0x40])];\n                var8 = 0x035a;\n                var10 = var3;\n                goto label_0540;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x013f;\n                var2 = 0x0196;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_0896(var3, var4);\n                var1 = func_0196(var2);\n                goto label_013F;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa9059cbb > var0) {\n            if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = 0x01b9;\n                renounceOwnership();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = storage[0x00] & (0x01 << 0xa0) - 0x01;\n                var1 = temp11 + 0x20;\n                goto label_010F;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x0102;\n                var1 = symbol();\n                goto label_0102;\n            } else if (var0 == 0xa457c2d7) {\n                // Dispatch table entry for decreaseAllowance(address,uint256)\n                var1 = 0x012b;\n                var2 = 0x01ec;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = transfer(var3, var4);\n                var4 = 0x00;\n                var5 = 0x02f7;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = 0x035a;\n                var temp12 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp12 + 0x60;\n                memory[temp12:temp12 + 0x20] = 0x25;\n                memory[temp12 + 0x20:temp12 + 0x20 + 0x25] = code[0x0a47:0x0a6c];\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x02;\n                var temp13 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = temp13;\n                var9 = storage[keccak256(memory[0x00:0x40])];\n                var10 = var3;\n                var11 = temp12;\n                var8 = func_07FE(var9, var10, var11);\n                func_035A(var6, var7, var8);\n                var1 = 0x01;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x012b;\n            var2 = 0x01ff;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = transfer(var3, var4);\n            var4 = 0x00;\n            var5 = 0x02f7;\n            var6 = msg.sender;\n            var7 = var2;\n            var8 = var3;\n            goto label_0678;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x013f;\n            var2 = 0x0212;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = func_08B0(var3, var4);\n            var1 = func_0212(var2, var3);\n            goto label_013F;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = 0x01b9;\n            var2 = 0x024b;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2 = func_0896(var3, var4);\n            func_024B(var2);\n            stop();\n        } else if (var0 == 0xffa1ad74) {\n            // Dispatch table entry for VERSION()\n            var1 = 0x013f;\n            var2 = 0x01;\n            goto label_013F;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0126(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x02f7;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0553(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function func_0196(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0212(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_024B(var arg0) {\n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x20;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n            var0 = temp2 + 0x64;\n            goto label_03F5;\n        } else if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x053d;\n            var var1 = arg0;\n            func_082A(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x26;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x646472657373 << 0xd0;\n            var0 = temp0 + 0x84;\n        \n        label_03F5:\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_0258() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x03;\n        var var2 = 0x0267;\n        var var3 = storage[var1];\n        var2 = func_09BD(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0293;\n        var6 = func_09BD(var7);\n    \n        if (!var6) {\n        label_02E0:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_02D7; }\n        \n        label_02C3:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_02C3; }\n        \n        label_02D7:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02E0;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_02E0;\n        }\n    }\n    \n    function func_035A(var arg0, var arg1, var arg2) {\n        func_0553(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x0408;\n            var var1 = 0x00;\n            func_082A(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x20;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + (temp0 + 0x64) - temp1]);\n        }\n    }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x04;\n        var var2 = 0x0267;\n        var var3 = storage[var1];\n        var2 = func_09BD(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0293;\n        var6 = func_09BD(var7);\n    \n        if (!var6) {\n        label_02E0:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_02D7; }\n        \n        label_02C3:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_02C3; }\n        \n        label_02D7:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02E0;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_02E0;\n        }\n    }\n    \n    function func_0553(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_03F5;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_03F5:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_07FE(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = var1;\n        var1 = 0x03f5;\n        var var2 = temp1;\n        var var3 = temp0 + 0x04;\n        var1 = func_0946(var2, var3);\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + var1 - temp2]);\n    }\n    \n    function func_082A(var arg0) {\n        var temp0 = storage[0x00];\n        var temp1 = (0x01 << 0xa0) - 0x01;\n        var temp2 = temp1 & arg0;\n        storage[0x00] = temp2 | (temp0 & ~((0x01 << 0xa0) - 0x01));\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & (0x01 << 0xa0) - 0x01, stack[-1] & (0x01 << 0xa0) - 0x01]);\n    }\n    \n    function func_087A(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0896(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x054c;\n            var var2 = arg1;\n            return func_087A(var2);\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_08B0(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x08cb;\n            var var3 = arg1;\n            var2 = func_087A(var3);\n            var0 = var2;\n            var2 = 0x08d9;\n            var3 = arg1 + 0x20;\n            var2 = func_087A(var3);\n            arg0 = var2;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var temp0 = var1;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_08E2(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var3 = 0x08ff;\n            var var4 = arg1;\n            var3 = func_087A(var4);\n            var0 = var3;\n            var3 = 0x090d;\n            var4 = arg1 + 0x20;\n            var3 = func_087A(var4);\n            arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else {\n            var temp0 = var2;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x0938;\n            var var3 = arg1;\n            var2 = func_087A(var3);\n            r0 = var2;\n            arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n            return r0, arg0;\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_0946(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = var0;\n    \n        if (var3 >= var2) {\n        label_0972:\n        \n            if (var3 <= var2) { return (var2 + 0x1f & ~0x1f) + arg1 + 0x40; }\n        \n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = var0;\n            return (temp2 + 0x1f & ~0x1f) + temp3 + 0x40;\n        } else {\n        label_095F:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_0972; }\n            else { goto label_095F; }\n        }\n    }\n    \n    function func_0999(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= ~arg0) { return arg1 + arg0; }\n    \n        var temp0 = var0;\n        memory[temp0:temp0 + 0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[temp0:temp0 + 0x24]);\n    }\n    \n    function func_09BD(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 >> 0x01;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 != (var0 < 0x20)) { goto label_09F2; }\n            else { goto label_09DD; }\n        } else if (var1 != (var0 < 0x20)) {\n        label_09F2:\n            return var0;\n        } else {\n        label_09DD:\n            memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x715018a6 > var0) {\n            if (0x23b872dd > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = 0x0102;\n                    var1 = func_0258();\n                \n                label_0102:\n                    var temp0 = var1;\n                    var1 = 0x010f;\n                    var var2 = temp0;\n                    var var3 = memory[0x40:0x60];\n                    var1 = func_0946(var2, var3);\n                \n                label_010F:\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + var1 - temp1];\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = 0x012b;\n                    var2 = 0x0126;\n                    var3 = msg.data.length;\n                    var var4 = 0x04;\n                    var2, var3 = transfer(var3, var4);\n                    var1 = func_0126(var2, var3);\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = !!var1;\n                    var1 = temp2 + 0x20;\n                    goto label_010F;\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = storage[0x06];\n                \n                label_013F:\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var1;\n                    var1 = temp3 + 0x20;\n                    goto label_010F;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x012b;\n                var2 = 0x015b;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4 = func_08E2(var3, var4);\n                var var5 = 0x00;\n                var var6 = 0x030d;\n                var var7 = var2;\n                var var8 = var3;\n                var var9 = var4;\n            \n            label_0678:\n            \n                if (!(var7 & (0x01 << 0xa0) - 0x01)) {\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                    memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x25;\n                    memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n                    memory[temp8 + 0x64:temp8 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n                    var10 = temp8 + 0x84;\n                    goto label_03F5;\n                } else if (var8 & (0x01 << 0xa0) - 0x01) {\n                    var var10 = 0x077b;\n                    var temp4 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp4 + 0x60;\n                    memory[temp4:temp4 + 0x20] = 0x26;\n                    memory[temp4 + 0x20:temp4 + 0x20 + 0x26] = code[0x09f9:0x0a1f];\n                    memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var var11 = storage[keccak256(memory[0x00:0x40])];\n                    var var12 = var9;\n                    var var13 = temp4;\n                    var10 = func_07FE(var11, var12, var13);\n                    var temp5 = (0x01 << 0xa0) - 0x01;\n                    memory[0x00:0x20] = var7 & temp5;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var10;\n                    memory[0x00:0x20] = var8 & temp5;\n                    var10 = 0x07aa;\n                    var11 = storage[keccak256(memory[0x00:0x40])];\n                    var12 = var9;\n                \n                label_0540:\n                    var13 = 0x00;\n                    var var14 = 0x054c;\n                    var var15 = var12;\n                    var var16 = var11;\n                    var14 = func_0999(var15, var16);\n                    var10 = var14;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x23;\n                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n                    memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x657373 << 0xe8;\n                    var10 = temp6 + 0x84;\n                \n                label_03F5:\n                    var temp7 = memory[0x40:0x60];\n                    revert(memory[temp7:temp7 + var10 - temp7]);\n                }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = storage[0x05] & 0xff;\n                var1 = temp9 + 0x20;\n                goto label_010F;\n            } else if (var0 == 0x39509351) {\n                // Dispatch table entry for increaseAllowance(address,uint256)\n                var1 = 0x012b;\n                var2 = 0x0183;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = transfer(var3, var4);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x02;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = temp10;\n                var6 = msg.sender;\n                var4 = 0x00;\n                var5 = 0x02f7;\n                var7 = var2;\n                var9 = storage[keccak256(memory[var4:var4 + 0x40])];\n                var8 = 0x035a;\n                var10 = var3;\n                goto label_0540;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x013f;\n                var2 = 0x0196;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_0896(var3, var4);\n                var1 = func_0196(var2);\n                goto label_013F;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa9059cbb > var0) {\n            if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = 0x01b9;\n                renounceOwnership();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = storage[0x00] & (0x01 << 0xa0) - 0x01;\n                var1 = temp11 + 0x20;\n                goto label_010F;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x0102;\n                var1 = symbol();\n                goto label_0102;\n            } else if (var0 == 0xa457c2d7) {\n                // Dispatch table entry for decreaseAllowance(address,uint256)\n                var1 = 0x012b;\n                var2 = 0x01ec;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = transfer(var3, var4);\n                var4 = 0x00;\n                var5 = 0x02f7;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = 0x035a;\n                var temp12 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp12 + 0x60;\n                memory[temp12:temp12 + 0x20] = 0x25;\n                memory[temp12 + 0x20:temp12 + 0x20 + 0x25] = code[0x0a47:0x0a6c];\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x02;\n                var temp13 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = temp13;\n                var9 = storage[keccak256(memory[0x00:0x40])];\n                var10 = var3;\n                var11 = temp12;\n                var8 = func_07FE(var9, var10, var11);\n                func_035A(var6, var7, var8);\n                var1 = 0x01;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x012b;\n            var2 = 0x01ff;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = transfer(var3, var4);\n            var4 = 0x00;\n            var5 = 0x02f7;\n            var6 = msg.sender;\n            var7 = var2;\n            var8 = var3;\n            goto label_0678;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x013f;\n            var2 = 0x0212;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = func_08B0(var3, var4);\n            var1 = func_0212(var2, var3);\n            goto label_013F;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = 0x01b9;\n            var2 = 0x024b;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2 = func_0896(var3, var4);\n            func_024B(var2);\n            stop();\n        } else if (var0 == 0xffa1ad74) {\n            // Dispatch table entry for VERSION()\n            var1 = 0x013f;\n            var2 = 0x01;\n            goto label_013F;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0126(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x02f7;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0553(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function func_0196(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0212(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_024B(var arg0) {\n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x20;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n            var0 = temp2 + 0x64;\n            goto label_03F5;\n        } else if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x053d;\n            var var1 = arg0;\n            func_082A(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x26;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x646472657373 << 0xd0;\n            var0 = temp0 + 0x84;\n        \n        label_03F5:\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_0258() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x03;\n        var var2 = 0x0267;\n        var var3 = storage[var1];\n        var2 = func_09BD(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0293;\n        var6 = func_09BD(var7);\n    \n        if (!var6) {\n        label_02E0:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_02D7; }\n        \n        label_02C3:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_02C3; }\n        \n        label_02D7:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02E0;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_02E0;\n        }\n    }\n    \n    function func_035A(var arg0, var arg1, var arg2) {\n        func_0553(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x0408;\n            var var1 = 0x00;\n            func_082A(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x20;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + (temp0 + 0x64) - temp1]);\n        }\n    }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x04;\n        var var2 = 0x0267;\n        var var3 = storage[var1];\n        var2 = func_09BD(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0293;\n        var6 = func_09BD(var7);\n    \n        if (!var6) {\n        label_02E0:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_02D7; }\n        \n        label_02C3:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_02C3; }\n        \n        label_02D7:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02E0;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_02E0;\n        }\n    }\n    \n    function func_0553(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_03F5;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_03F5:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_07FE(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = var1;\n        var1 = 0x03f5;\n        var var2 = temp1;\n        var var3 = temp0 + 0x04;\n        var1 = func_0946(var2, var3);\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + var1 - temp2]);\n    }\n    \n    function func_082A(var arg0) {\n        var temp0 = storage[0x00];\n        var temp1 = (0x01 << 0xa0) - 0x01;\n        var temp2 = temp1 & arg0;\n        storage[0x00] = temp2 | (temp0 & ~((0x01 << 0xa0) - 0x01));\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & (0x01 << 0xa0) - 0x01, stack[-1] & (0x01 << 0xa0) - 0x01]);\n    }\n    \n    function func_087A(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0896(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x054c;\n            var var2 = arg1;\n            return func_087A(var2);\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_08B0(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x08cb;\n            var var3 = arg1;\n            var2 = func_087A(var3);\n            var0 = var2;\n            var2 = 0x08d9;\n            var3 = arg1 + 0x20;\n            var2 = func_087A(var3);\n            arg0 = var2;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var temp0 = var1;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_08E2(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var3 = 0x08ff;\n            var var4 = arg1;\n            var3 = func_087A(var4);\n            var0 = var3;\n            var3 = 0x090d;\n            var4 = arg1 + 0x20;\n            var3 = func_087A(var4);\n            arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else {\n            var temp0 = var2;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x0938;\n            var var3 = arg1;\n            var2 = func_087A(var3);\n            r0 = var2;\n            arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n            return r0, arg0;\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_0946(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = var0;\n    \n        if (var3 >= var2) {\n        label_0972:\n        \n            if (var3 <= var2) { return (var2 + 0x1f & ~0x1f) + arg1 + 0x40; }\n        \n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = var0;\n            return (temp2 + 0x1f & ~0x1f) + temp3 + 0x40;\n        } else {\n        label_095F:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_0972; }\n            else { goto label_095F; }\n        }\n    }\n    \n    function func_0999(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= ~arg0) { return arg1 + arg0; }\n    \n        var temp0 = var0;\n        memory[temp0:temp0 + 0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[temp0:temp0 + 0x24]);\n    }\n    \n    function func_09BD(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 >> 0x01;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 != (var0 < 0x20)) { goto label_09F2; }\n            else { goto label_09DD; }\n        } else if (var1 != (var0 < 0x20)) {\n        label_09F2:\n            return var0;\n        } else {\n        label_09DD:\n            memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x715018a6 > var0) {\n            if (0x23b872dd > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = 0x0102;\n                    var1 = func_0258();\n                \n                label_0102:\n                    var temp0 = var1;\n                    var1 = 0x010f;\n                    var var2 = temp0;\n                    var var3 = memory[0x40:0x60];\n                    var1 = func_0946(var2, var3);\n                \n                label_010F:\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + var1 - temp1];\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = 0x012b;\n                    var2 = 0x0126;\n                    var3 = msg.data.length;\n                    var var4 = 0x04;\n                    var2, var3 = transfer(var3, var4);\n                    var1 = func_0126(var2, var3);\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = !!var1;\n                    var1 = temp2 + 0x20;\n                    goto label_010F;\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = storage[0x06];\n                \n                label_013F:\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = var1;\n                    var1 = temp3 + 0x20;\n                    goto label_010F;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x012b;\n                var2 = 0x015b;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4 = func_08E2(var3, var4);\n                var var5 = 0x00;\n                var var6 = 0x030d;\n                var var7 = var2;\n                var var8 = var3;\n                var var9 = var4;\n            \n            label_0678:\n            \n                if (!(var7 & (0x01 << 0xa0) - 0x01)) {\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                    memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x25;\n                    memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n                    memory[temp8 + 0x64:temp8 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n                    var10 = temp8 + 0x84;\n                    goto label_03F5;\n                } else if (var8 & (0x01 << 0xa0) - 0x01) {\n                    var var10 = 0x077b;\n                    var temp4 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp4 + 0x60;\n                    memory[temp4:temp4 + 0x20] = 0x26;\n                    memory[temp4 + 0x20:temp4 + 0x20 + 0x26] = code[0x09f9:0x0a1f];\n                    memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var var11 = storage[keccak256(memory[0x00:0x40])];\n                    var var12 = var9;\n                    var var13 = temp4;\n                    var10 = func_07FE(var11, var12, var13);\n                    var temp5 = (0x01 << 0xa0) - 0x01;\n                    memory[0x00:0x20] = var7 & temp5;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var10;\n                    memory[0x00:0x20] = var8 & temp5;\n                    var10 = 0x07aa;\n                    var11 = storage[keccak256(memory[0x00:0x40])];\n                    var12 = var9;\n                \n                label_0540:\n                    var13 = 0x00;\n                    var var14 = 0x054c;\n                    var var15 = var12;\n                    var var16 = var11;\n                    var14 = func_0999(var15, var16);\n                    var10 = var14;\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x23;\n                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n                    memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x657373 << 0xe8;\n                    var10 = temp6 + 0x84;\n                \n                label_03F5:\n                    var temp7 = memory[0x40:0x60];\n                    revert(memory[temp7:temp7 + var10 - temp7]);\n                }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = storage[0x05] & 0xff;\n                var1 = temp9 + 0x20;\n                goto label_010F;\n            } else if (var0 == 0x39509351) {\n                // Dispatch table entry for increaseAllowance(address,uint256)\n                var1 = 0x012b;\n                var2 = 0x0183;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = transfer(var3, var4);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x02;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = temp10;\n                var6 = msg.sender;\n                var4 = 0x00;\n                var5 = 0x02f7;\n                var7 = var2;\n                var9 = storage[keccak256(memory[var4:var4 + 0x40])];\n                var8 = 0x035a;\n                var10 = var3;\n                goto label_0540;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x013f;\n                var2 = 0x0196;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_0896(var3, var4);\n                var1 = func_0196(var2);\n                goto label_013F;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa9059cbb > var0) {\n            if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = 0x01b9;\n                renounceOwnership();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = storage[0x00] & (0x01 << 0xa0) - 0x01;\n                var1 = temp11 + 0x20;\n                goto label_010F;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x0102;\n                var1 = symbol();\n                goto label_0102;\n            } else if (var0 == 0xa457c2d7) {\n                // Dispatch table entry for decreaseAllowance(address,uint256)\n                var1 = 0x012b;\n                var2 = 0x01ec;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = transfer(var3, var4);\n                var4 = 0x00;\n                var5 = 0x02f7;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = 0x035a;\n                var temp12 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp12 + 0x60;\n                memory[temp12:temp12 + 0x20] = 0x25;\n                memory[temp12 + 0x20:temp12 + 0x20 + 0x25] = code[0x0a47:0x0a6c];\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x02;\n                var temp13 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var7 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = temp13;\n                var9 = storage[keccak256(memory[0x00:0x40])];\n                var10 = var3;\n                var11 = temp12;\n                var8 = func_07FE(var9, var10, var11);\n                func_035A(var6, var7, var8);\n                var1 = 0x01;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x012b;\n            var2 = 0x01ff;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = transfer(var3, var4);\n            var4 = 0x00;\n            var5 = 0x02f7;\n            var6 = msg.sender;\n            var7 = var2;\n            var8 = var3;\n            goto label_0678;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x013f;\n            var2 = 0x0212;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = func_08B0(var3, var4);\n            var1 = func_0212(var2, var3);\n            goto label_013F;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = 0x01b9;\n            var2 = 0x024b;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2 = func_0896(var3, var4);\n            func_024B(var2);\n            stop();\n        } else if (var0 == 0xffa1ad74) {\n            // Dispatch table entry for VERSION()\n            var1 = 0x013f;\n            var2 = 0x01;\n            goto label_013F;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0126(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x02f7;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_0553(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function func_0196(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0212(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_024B(var arg0) {\n        if (msg.sender != storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x20;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n            var0 = temp2 + 0x64;\n            goto label_03F5;\n        } else if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x053d;\n            var var1 = arg0;\n            func_082A(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x26;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x646472657373 << 0xd0;\n            var0 = temp0 + 0x84;\n        \n        label_03F5:\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_0258() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x03;\n        var var2 = 0x0267;\n        var var3 = storage[var1];\n        var2 = func_09BD(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0293;\n        var6 = func_09BD(var7);\n    \n        if (!var6) {\n        label_02E0:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_02D7; }\n        \n        label_02C3:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_02C3; }\n        \n        label_02D7:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02E0;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_02E0;\n        }\n    }\n    \n    function func_035A(var arg0, var arg1, var arg2) {\n        func_0553(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender == storage[0x00] & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x0408;\n            var var1 = 0x00;\n            func_082A(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x20;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + (temp0 + 0x64) - temp1]);\n        }\n    }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x04;\n        var var2 = 0x0267;\n        var var3 = storage[var1];\n        var2 = func_09BD(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0293;\n        var6 = func_09BD(var7);\n    \n        if (!var6) {\n        label_02E0:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_02D7; }\n        \n        label_02C3:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_02C3; }\n        \n        label_02D7:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02E0;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_02E0;\n        }\n    }\n    \n    function func_0553(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_03F5;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_03F5:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_07FE(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg2;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var temp1 = var1;\n        var1 = 0x03f5;\n        var var2 = temp1;\n        var var3 = temp0 + 0x04;\n        var1 = func_0946(var2, var3);\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + var1 - temp2]);\n    }\n    \n    function func_082A(var arg0) {\n        var temp0 = storage[0x00];\n        var temp1 = (0x01 << 0xa0) - 0x01;\n        var temp2 = temp1 & arg0;\n        storage[0x00] = temp2 | (temp0 & ~((0x01 << 0xa0) - 0x01));\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & (0x01 << 0xa0) - 0x01, stack[-1] & (0x01 << 0xa0) - 0x01]);\n    }\n    \n    function func_087A(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0896(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x054c;\n            var var2 = arg1;\n            return func_087A(var2);\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_08B0(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x08cb;\n            var var3 = arg1;\n            var2 = func_087A(var3);\n            var0 = var2;\n            var2 = 0x08d9;\n            var3 = arg1 + 0x20;\n            var2 = func_087A(var3);\n            arg0 = var2;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var temp0 = var1;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_08E2(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var3 = 0x08ff;\n            var var4 = arg1;\n            var3 = func_087A(var4);\n            var0 = var3;\n            var3 = 0x090d;\n            var4 = arg1 + 0x20;\n            var3 = func_087A(var4);\n            arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else {\n            var temp0 = var2;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x0938;\n            var var3 = arg1;\n            var2 = func_087A(var3);\n            r0 = var2;\n            arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n            return r0, arg0;\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_0946(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = var0;\n    \n        if (var3 >= var2) {\n        label_0972:\n        \n            if (var3 <= var2) { return (var2 + 0x1f & ~0x1f) + arg1 + 0x40; }\n        \n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = var0;\n            return (temp2 + 0x1f & ~0x1f) + temp3 + 0x40;\n        } else {\n        label_095F:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_0972; }\n            else { goto label_095F; }\n        }\n    }\n    \n    function func_0999(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= ~arg0) { return arg1 + arg0; }\n    \n        var temp0 = var0;\n        memory[temp0:temp0 + 0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[temp0:temp0 + 0x24]);\n    }\n    \n    function func_09BD(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 >> 0x01;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 != (var0 < 0x20)) { goto label_09F2; }\n            else { goto label_09DD; }\n        } else if (var1 != (var0 < 0x20)) {\n        label_09F2:\n            return var0;\n        } else {\n        label_09DD:\n            memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 30.83712363243103,
	"usage": {
		"completion_tokens": 602,
		"prompt_tokens": 8183,
		"total_tokens": 8785
	}
}