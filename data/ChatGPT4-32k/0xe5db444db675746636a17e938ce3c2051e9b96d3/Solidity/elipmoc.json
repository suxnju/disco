{
	"address": "0xe5db444db675746636a17e938ce3c2051e9b96d3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the equivalent Solidity code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _increaseAllowance;\n    string private _name;\n    string private _symbol;\n    uint256 private _totalSupply;\n    address private _owner;\n    uint8 private _decimals;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n        _balanceOf[msg.sender] = totalSupply;\n        _owner = msg.sender;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _increaseAllowance[owner][spender];\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        require(_balanceOf[msg.sender] >= amount, \"Insufficient balance\");\n        _balanceOf[msg.sender] -= amount;\n        _balanceOf[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _increaseAllowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        require(_balanceOf[sender] >= amount, \"Insufficient balance\");\n        require(_increaseAllowance[sender][msg.sender] >= amount, \"Insufficient allowance\");\n\n        _balanceOf[sender] -= amount;\n        _balanceOf[recipient] += amount;\n        _increaseAllowance[sender][msg.sender] -= amount;\n        \n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _increaseAllowance[msg.sender][spender] += addedValue;\n        emit Approval(msg.sender, spender, _increaseAllowance[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(_increaseAllowance[msg.sender][spender] >= subtractedValue, \"Decreased allowance below zero\");\n        _increaseAllowance[msg.sender][spender] -= subtractedValue;\n        emit Approval(msg.sender, spender, _increaseAllowance[msg.sender][spender]);\n        return true;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(newOwner != address(0), \"New owner is the zero address\");\n        require(msg.sender == _owner, \"Caller is not the owner\");\n        _owner = newOwner;\n        emit OwnershipTransferred(msg.sender, newOwner);\n    }\n\n    function renounceOwnership() public {\n        require(msg.sender == _owner, \"Caller is not the owner\");\n        _owner = address(0);\n        emit OwnershipTransferred(msg.sender, address(0));\n    }\n}\n```\n\nPlease note that I've made some assumptions when creating this Solidity contract from the decompiled EVM bytecode. For example, I assumed that the contract was an ERC20 token contract based on the methods and events present in the decompiled bytecode. Therefore, the resulting contract may not be a perfect match for the original contract, but it should be a close approximation.",
				"role": "assistant"
			}
		}
	],
	"created": 1701486331,
	"id": "chatcmpl-8RAbrUkWkY2oqkr8tHGTOd6anWnic",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2022.11.16 16:07 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _increaseAllowance; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x6]\nuint256 _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _decimals; // STORAGE[0x5] bytes 0 to 0\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nOwnershipTransferred(address, address);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    0x553(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    0x678(varg2, varg1, varg0);\n    v0 = new struct(3);\n    v0.word0 = 40;\n    v1 = _SafeSub(v0, varg2, _increaseAllowance[msg.sender]);\n    0x553(v1, msg.sender, varg0);\n    return 1;\n}\n\nfunction decimals() public payable { \n    return _decimals;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    v0 = _SafeAdd(varg1, _increaseAllowance[varg0]);\n    0x553(v0, varg0, msg.sender);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public payable { \n    require(msg.sender == _owner, Error('Ownable: caller is not the owner'));\n    _owner = 0;\n    emit OwnershipTransferred(_owner, 0);\n}\n\nfunction owner() public payable { \n    return _owner;\n}\n\nfunction symbol() public payable { \n    v0 = 0x9bd(_symbol.length);\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = 0x9bd(_symbol.length);\n    if (v4) {\n        if (31 < v4) {\n            do {\n                MEM[v2] = STORAGE[v5];\n                v5 += 1;\n                v2 += 32;\n            } while (v3 + v4 <= v2);\n        } else {\n            MEM[v3] = _symbol.length >> 8 << 8;\n        }\n    }\n    v6 = v7 = 0;\n    v8 = new array[](v1.length);\n    while (v6 < v1.length) {\n        v8[v6] = v1[v6];\n        v6 += 32;\n    }\n    if (v6 > v1.length) {\n        v8[v1.length] = v7;\n    }\n    return v8;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    v0 = new struct(3);\n    v0.word0 = 37;\n    v1 = _SafeSub(v0, varg1, _increaseAllowance[varg0]);\n    0x553(v1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    0x678(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _increaseAllowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    require(msg.sender == _owner, Error('Ownable: caller is not the owner'));\n    require(varg0, Error('Ownable: new owner is the zero address'));\n    _owner = varg0;\n    emit OwnershipTransferred(_owner, varg0);\n}\n\nfunction VERSION() public payable { \n    return 1;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    require(varg1 <= ~varg0, Panic(17));\n    return varg1 + varg0;\n}\n\nfunction 0x553(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), Error('ERC20: approve from the zero address', 'ERC20: approve from the zero address'));\n    require(address(varg1), Error('ERC20: approve to the zero address'));\n    v0 = address(varg2);\n    v1 = address(varg1);\n    _increaseAllowance[v1] = varg0;\n    emit Approval(v0, v1, varg0);\n    return ;\n}\n\nfunction 0x678(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), Error('ERC20: transfer from the zero address'));\n    require(address(varg1), Error('ERC20: transfer to the zero address'));\n    v0 = new struct(3);\n    v0.word0 = 38;\n    v1 = address(varg2);\n    v2 = _SafeSub(v0, varg0, _balanceOf[v1]);\n    v3 = address(varg2);\n    _balanceOf[v3] = v2;\n    v4 = address(varg1);\n    v5 = _SafeAdd(varg0, _balanceOf[v4]);\n    v6 = address(varg1);\n    _balanceOf[v6] = v5;\n    emit Transfer(address(varg2), v6, varg0);\n    return ;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    if (varg1 <= varg2) {\n        return varg2 - varg1;\n    } else {\n        v0 = v1 = 0;\n        v2 = new array[](varg0.length);\n        while (v0 < varg0.length) {\n            v2[v0] = varg0[v0];\n            v0 += 32;\n        }\n        if (v0 > varg0.length) {\n            v2[varg0.length] = v1;\n        }\n        revert(Error(v2));\n    }\n}\n\nfunction 0x9bd(uint256 varg0) private { \n    v0 = v1 = varg0 >> 1;\n    v2 = varg0 & 0x1;\n    if (!v2) {\n        v0 = v3 = v1 & 0x7f;\n    }\n    require(v2 != v0 < 32, Panic(34));\n    return v0;\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public payable { \n    v0 = 0x9bd(_name.length);\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = 0x9bd(_name.length);\n    if (v4) {\n        if (31 < v4) {\n            do {\n                MEM[v2] = STORAGE[v5];\n                v5 += 1;\n                v2 += 32;\n            } while (v3 + v4 <= v2);\n        } else {\n            MEM[v3] = _name.length >> 8 << 8;\n        }\n    }\n    v6 = v7 = 0;\n    v8 = new array[](v1.length);\n    while (v6 < v1.length) {\n        v8[v6] = v1[v6];\n        v6 += 32;\n    }\n    if (v6 > v1.length) {\n        v8[v1.length] = v7;\n    }\n    return v8;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    require(!msg.value);\n    if (msg.data.length >= 4) {\n        if (0x715018a6 > function_selector >> 224) {\n            if (0x23b872dd > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x39509351 == function_selector >> 224) {\n                increaseAllowance(address,uint256);\n            } else {\n                require(0x70a08231 == function_selector >> 224);\n                balanceOf(address);\n            }\n        } else if (0xa9059cbb > function_selector >> 224) {\n            if (0x715018a6 == function_selector >> 224) {\n                renounceOwnership();\n            } else if (0x8da5cb5b == function_selector >> 224) {\n                owner();\n            } else if (0x95d89b41 == function_selector >> 224) {\n                symbol();\n            } else {\n                require(0xa457c2d7 == function_selector >> 224);\n                decreaseAllowance(address,uint256);\n            }\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector >> 224) {\n            transferOwnership(address);\n        } else {\n            require(0xffa1ad74 == function_selector >> 224);\n            VERSION();\n        }\n    }\n    ();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.16 16:07 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _increaseAllowance; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x6]\nuint256 _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _decimals; // STORAGE[0x5] bytes 0 to 0\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nOwnershipTransferred(address, address);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    0x553(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    0x678(varg2, varg1, varg0);\n    v0 = new struct(3);\n    v0.word0 = 40;\n    v1 = _SafeSub(v0, varg2, _increaseAllowance[msg.sender]);\n    0x553(v1, msg.sender, varg0);\n    return 1;\n}\n\nfunction decimals() public payable { \n    return _decimals;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    v0 = _SafeAdd(varg1, _increaseAllowance[varg0]);\n    0x553(v0, varg0, msg.sender);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public payable { \n    require(msg.sender == _owner, Error('Ownable: caller is not the owner'));\n    _owner = 0;\n    emit OwnershipTransferred(_owner, 0);\n}\n\nfunction owner() public payable { \n    return _owner;\n}\n\nfunction symbol() public payable { \n    v0 = 0x9bd(_symbol.length);\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = 0x9bd(_symbol.length);\n    if (v4) {\n        if (31 < v4) {\n            do {\n                MEM[v2] = STORAGE[v5];\n                v5 += 1;\n                v2 += 32;\n            } while (v3 + v4 <= v2);\n        } else {\n            MEM[v3] = _symbol.length >> 8 << 8;\n        }\n    }\n    v6 = v7 = 0;\n    v8 = new array[](v1.length);\n    while (v6 < v1.length) {\n        v8[v6] = v1[v6];\n        v6 += 32;\n    }\n    if (v6 > v1.length) {\n        v8[v1.length] = v7;\n    }\n    return v8;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    v0 = new struct(3);\n    v0.word0 = 37;\n    v1 = _SafeSub(v0, varg1, _increaseAllowance[varg0]);\n    0x553(v1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    0x678(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _increaseAllowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    require(msg.sender == _owner, Error('Ownable: caller is not the owner'));\n    require(varg0, Error('Ownable: new owner is the zero address'));\n    _owner = varg0;\n    emit OwnershipTransferred(_owner, varg0);\n}\n\nfunction VERSION() public payable { \n    return 1;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    require(varg1 <= ~varg0, Panic(17));\n    return varg1 + varg0;\n}\n\nfunction 0x553(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), Error('ERC20: approve from the zero address', 'ERC20: approve from the zero address'));\n    require(address(varg1), Error('ERC20: approve to the zero address'));\n    v0 = address(varg2);\n    v1 = address(varg1);\n    _increaseAllowance[v1] = varg0;\n    emit Approval(v0, v1, varg0);\n    return ;\n}\n\nfunction 0x678(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), Error('ERC20: transfer from the zero address'));\n    require(address(varg1), Error('ERC20: transfer to the zero address'));\n    v0 = new struct(3);\n    v0.word0 = 38;\n    v1 = address(varg2);\n    v2 = _SafeSub(v0, varg0, _balanceOf[v1]);\n    v3 = address(varg2);\n    _balanceOf[v3] = v2;\n    v4 = address(varg1);\n    v5 = _SafeAdd(varg0, _balanceOf[v4]);\n    v6 = address(varg1);\n    _balanceOf[v6] = v5;\n    emit Transfer(address(varg2), v6, varg0);\n    return ;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    if (varg1 <= varg2) {\n        return varg2 - varg1;\n    } else {\n        v0 = v1 = 0;\n        v2 = new array[](varg0.length);\n        while (v0 < varg0.length) {\n            v2[v0] = varg0[v0];\n            v0 += 32;\n        }\n        if (v0 > varg0.length) {\n            v2[varg0.length] = v1;\n        }\n        revert(Error(v2));\n    }\n}\n\nfunction 0x9bd(uint256 varg0) private { \n    v0 = v1 = varg0 >> 1;\n    v2 = varg0 & 0x1;\n    if (!v2) {\n        v0 = v3 = v1 & 0x7f;\n    }\n    require(v2 != v0 < 32, Panic(34));\n    return v0;\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public payable { \n    v0 = 0x9bd(_name.length);\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = 0x9bd(_name.length);\n    if (v4) {\n        if (31 < v4) {\n            do {\n                MEM[v2] = STORAGE[v5];\n                v5 += 1;\n                v2 += 32;\n            } while (v3 + v4 <= v2);\n        } else {\n            MEM[v3] = _name.length >> 8 << 8;\n        }\n    }\n    v6 = v7 = 0;\n    v8 = new array[](v1.length);\n    while (v6 < v1.length) {\n        v8[v6] = v1[v6];\n        v6 += 32;\n    }\n    if (v6 > v1.length) {\n        v8[v1.length] = v7;\n    }\n    return v8;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    require(!msg.value);\n    if (msg.data.length >= 4) {\n        if (0x715018a6 > function_selector >> 224) {\n            if (0x23b872dd > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x39509351 == function_selector >> 224) {\n                increaseAllowance(address,uint256);\n            } else {\n                require(0x70a08231 == function_selector >> 224);\n                balanceOf(address);\n            }\n        } else if (0xa9059cbb > function_selector >> 224) {\n            if (0x715018a6 == function_selector >> 224) {\n                renounceOwnership();\n            } else if (0x8da5cb5b == function_selector >> 224) {\n                owner();\n            } else if (0x95d89b41 == function_selector >> 224) {\n                symbol();\n            } else {\n                require(0xa457c2d7 == function_selector >> 224);\n                decreaseAllowance(address,uint256);\n            }\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector >> 224) {\n            transferOwnership(address);\n        } else {\n            require(0xffa1ad74 == function_selector >> 224);\n            VERSION();\n        }\n    }\n    ();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.16 16:07 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _increaseAllowance; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x6]\nuint256 _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _decimals; // STORAGE[0x5] bytes 0 to 0\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nOwnershipTransferred(address, address);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    0x553(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    0x678(varg2, varg1, varg0);\n    v0 = new struct(3);\n    v0.word0 = 40;\n    v1 = _SafeSub(v0, varg2, _increaseAllowance[msg.sender]);\n    0x553(v1, msg.sender, varg0);\n    return 1;\n}\n\nfunction decimals() public payable { \n    return _decimals;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    v0 = _SafeAdd(varg1, _increaseAllowance[varg0]);\n    0x553(v0, varg0, msg.sender);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public payable { \n    require(msg.sender == _owner, Error('Ownable: caller is not the owner'));\n    _owner = 0;\n    emit OwnershipTransferred(_owner, 0);\n}\n\nfunction owner() public payable { \n    return _owner;\n}\n\nfunction symbol() public payable { \n    v0 = 0x9bd(_symbol.length);\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = 0x9bd(_symbol.length);\n    if (v4) {\n        if (31 < v4) {\n            do {\n                MEM[v2] = STORAGE[v5];\n                v5 += 1;\n                v2 += 32;\n            } while (v3 + v4 <= v2);\n        } else {\n            MEM[v3] = _symbol.length >> 8 << 8;\n        }\n    }\n    v6 = v7 = 0;\n    v8 = new array[](v1.length);\n    while (v6 < v1.length) {\n        v8[v6] = v1[v6];\n        v6 += 32;\n    }\n    if (v6 > v1.length) {\n        v8[v1.length] = v7;\n    }\n    return v8;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    v0 = new struct(3);\n    v0.word0 = 37;\n    v1 = _SafeSub(v0, varg1, _increaseAllowance[varg0]);\n    0x553(v1, varg0, msg.sender);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    0x678(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _increaseAllowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    require(msg.sender == _owner, Error('Ownable: caller is not the owner'));\n    require(varg0, Error('Ownable: new owner is the zero address'));\n    _owner = varg0;\n    emit OwnershipTransferred(_owner, varg0);\n}\n\nfunction VERSION() public payable { \n    return 1;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    require(varg1 <= ~varg0, Panic(17));\n    return varg1 + varg0;\n}\n\nfunction 0x553(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), Error('ERC20: approve from the zero address', 'ERC20: approve from the zero address'));\n    require(address(varg1), Error('ERC20: approve to the zero address'));\n    v0 = address(varg2);\n    v1 = address(varg1);\n    _increaseAllowance[v1] = varg0;\n    emit Approval(v0, v1, varg0);\n    return ;\n}\n\nfunction 0x678(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), Error('ERC20: transfer from the zero address'));\n    require(address(varg1), Error('ERC20: transfer to the zero address'));\n    v0 = new struct(3);\n    v0.word0 = 38;\n    v1 = address(varg2);\n    v2 = _SafeSub(v0, varg0, _balanceOf[v1]);\n    v3 = address(varg2);\n    _balanceOf[v3] = v2;\n    v4 = address(varg1);\n    v5 = _SafeAdd(varg0, _balanceOf[v4]);\n    v6 = address(varg1);\n    _balanceOf[v6] = v5;\n    emit Transfer(address(varg2), v6, varg0);\n    return ;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    if (varg1 <= varg2) {\n        return varg2 - varg1;\n    } else {\n        v0 = v1 = 0;\n        v2 = new array[](varg0.length);\n        while (v0 < varg0.length) {\n            v2[v0] = varg0[v0];\n            v0 += 32;\n        }\n        if (v0 > varg0.length) {\n            v2[varg0.length] = v1;\n        }\n        revert(Error(v2));\n    }\n}\n\nfunction 0x9bd(uint256 varg0) private { \n    v0 = v1 = varg0 >> 1;\n    v2 = varg0 & 0x1;\n    if (!v2) {\n        v0 = v3 = v1 & 0x7f;\n    }\n    require(v2 != v0 < 32, Panic(34));\n    return v0;\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public payable { \n    v0 = 0x9bd(_name.length);\n    v1 = new bytes[](v0);\n    v2 = v3 = v1.data;\n    v4 = 0x9bd(_name.length);\n    if (v4) {\n        if (31 < v4) {\n            do {\n                MEM[v2] = STORAGE[v5];\n                v5 += 1;\n                v2 += 32;\n            } while (v3 + v4 <= v2);\n        } else {\n            MEM[v3] = _name.length >> 8 << 8;\n        }\n    }\n    v6 = v7 = 0;\n    v8 = new array[](v1.length);\n    while (v6 < v1.length) {\n        v8[v6] = v1[v6];\n        v6 += 32;\n    }\n    if (v6 > v1.length) {\n        v8[v1.length] = v7;\n    }\n    return v8;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    require(!msg.value);\n    if (msg.data.length >= 4) {\n        if (0x715018a6 > function_selector >> 224) {\n            if (0x23b872dd > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x39509351 == function_selector >> 224) {\n                increaseAllowance(address,uint256);\n            } else {\n                require(0x70a08231 == function_selector >> 224);\n                balanceOf(address);\n            }\n        } else if (0xa9059cbb > function_selector >> 224) {\n            if (0x715018a6 == function_selector >> 224) {\n                renounceOwnership();\n            } else if (0x8da5cb5b == function_selector >> 224) {\n                owner();\n            } else if (0x95d89b41 == function_selector >> 224) {\n                symbol();\n            } else {\n                require(0xa457c2d7 == function_selector >> 224);\n                decreaseAllowance(address,uint256);\n            }\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector >> 224) {\n            transferOwnership(address);\n        } else {\n            require(0xffa1ad74 == function_selector >> 224);\n            VERSION();\n        }\n    }\n    ();\n}\n.",
	"status": "1",
	"time_cost": 28.451350688934326,
	"usage": {
		"completion_tokens": 894,
		"prompt_tokens": 2497,
		"total_tokens": 3391
	}
}