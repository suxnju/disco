{
	"address": "0xc1ad68c43508dd5addb8d0ac0927dbe752d149d6",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The decompiled EVM bytecode is quite complex and it seems to contain errors related to stack reads before write. Here is a rough translation to Solidity based on the given decompiled EVM bytecode. It is simplified and may not provide the exact functionality as the original contract.\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract {\n    address public storage_0x02;\n    address public storage_0x0b;\n    uint256 public storage_0x04;\n    mapping(bytes32 => uint256) public storageData;\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_value <= storageData[keccak256(abi.encodePacked(msg.sender))]);\n        storageData[keccak256(abi.encodePacked(msg.sender))] -= _value;\n        storageData[keccak256(abi.encodePacked(_to))] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return storageData[keccak256(abi.encodePacked(_owner))];\n    }\n\n    function setStorage(address _addr, uint256 _value) public {\n        require(msg.sender == storage_0x02);\n        storageData[keccak256(abi.encodePacked(_addr))] = _value;\n    }\n\n    function setStorage_0x02(address _addr) public {\n        require(msg.sender == storage_0x02);\n        storage_0x02 = _addr;\n    }\n\n    function setStorage_0x0b(address _addr) public {\n        require(msg.sender == storage_0x02);\n        storage_0x0b = _addr;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n```\n\nThis Solidity contract provides functions to transfer tokens from one account to another, check the balance of a specific account, and set the storage values. Please be aware that this contract does not provide the exact functionality as the decompiled code due to the complexity and errors in the decompiled EVM bytecode.",
				"role": "assistant"
			}
		}
	],
	"created": 1700475169,
	"id": "chatcmpl-8MvYnZwImNn4mdDmiixJkk8em4et3",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (0x00) {\n            // Error: StackRead before write???\n            var var-2;\n            // Error: StackRead before write???\n            var var-1;\n            memory[0x0160:0x0180] = var-1;\n            memory[0x0140:0x0160] = var-2;\n        \n            if (!address(storage[0x0b]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == storage[0x0b]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = 0xf1bb1086;\n            memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n            var temp53;\n            temp53, memory[0x0220:0x0240] = address(storage[0x0b]).staticcall.gas(msg.gas)(memory[0x01bc:0x01e0]);\n        \n            if (!temp53) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = memory[0x0220:0x0240];\n        \n            if (memory[0x0180:0x01a0] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = memory[0x0180:0x01a0];\n            var-2 = memory[0x00:0x20];\n            // Error: Could not resolve jump destination!\n        } else if (memory[0x00:0x20] == 0x55776b77) {\n            memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            if (!((memory[0x0180:0x01a0] > block.timestamp) & (memory[0x0160:0x0180] > 0x00))) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = 0x16;\n            memory[0x01c0:0x01e0] = 0x6c6971756964697479416464696e67416c6c6f77656400000000000000000000;\n            memory[0xe0:0x0100] = keccak256(memory[0x01c0:0x01c0 + memory[0x01a0:0x01c0]]);\n            memory[0xc0:0xe0] = 0x09;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0160:0x0180];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == memory[0x0140:0x0160]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = 0x70a08231;\n            memory[0x0220:0x0240] = msg.sender;\n            var temp51;\n            temp51, memory[0x0280:0x02a0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x021c:0x0240]);\n        \n            if (!temp51) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0280:0x02a0] < var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0160:0x0180];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == memory[0x0140:0x0160]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02a0:0x02c0] = 0xdd62ed3e;\n            memory[0x02c0:0x02e0] = msg.sender;\n            memory[0x02e0:0x0300] = address(this);\n            var temp52;\n            temp52, memory[0x0340:0x0360] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x02bc:0x0300]);\n        \n            if (!temp52) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0340:0x0360] < var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            var4 = memory[0x01c0:0x01e0];\n            var5 = memory[0x01e0:0x0200];\n            var6 = memory[0x0200:0x0220];\n            var7 = memory[0x0220:0x0240];\n            var8 = memory[0x0240:0x0260];\n            var9 = memory[0x0260:0x0280];\n            var10 = memory[0x0280:0x02a0];\n            var11 = memory[0x02a0:0x02c0];\n            var12 = memory[0x02c0:0x02e0];\n            var13 = memory[0x02e0:0x0300];\n            var14 = memory[0x0300:0x0320];\n            var15 = memory[0x0320:0x0340];\n            var16 = memory[0x0340:0x0360];\n            var17 = memory[0x0360:0x0380];\n            memory[0x0380:0x03a0] = 0x84ba3f69;\n            memory[0x03a0:0x03c0] = memory[0x0140:0x0160];\n            var18 = memory[0x03a0:0x03c0];\n            var19 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x93ca2f8a) {\n            memory[0x0140:0x01c0] = msg.data[0x04:0x84];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            if (!((memory[0x0160:0x0180] > 0x00) & (memory[0x01a0:0x01c0] > block.timestamp))) { revert(memory[0x00:0x00]); }\n        \n            var temp50 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x05;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] < temp50) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x01e0] = 0x18;\n            memory[0x01e0:0x0200] = 0x6c697175696469747952656d6f76696e67416c6c6f7765640000000000000000;\n            memory[0xe0:0x0100] = keccak256(memory[0x01e0:0x01e0 + memory[0x01c0:0x01e0]]);\n            memory[0xc0:0xe0] = 0x09;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x04] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            var4 = memory[0x01c0:0x01e0];\n            var5 = memory[0x01e0:0x0200];\n            var6 = memory[0x0200:0x0220];\n            var7 = memory[0x0220:0x0240];\n            memory[0x0240:0x0260] = 0x84ba3f69;\n            memory[0x0260:0x0280] = memory[0x0140:0x0160];\n            var8 = memory[0x0260:0x0280];\n            var9 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x43d91bf1) {\n            memory[0x0140:0x01e0] = msg.data[0x04:0xa4];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = 0x08;\n            var temp47 = storage[keccak256(memory[0xc0:0x0100])];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (!(storage[keccak256(memory[0xc0:0x0100])] & temp47)) { revert(memory[0x00:0x00]); }\n        \n            if (!((memory[0x0180:0x01a0] > 0x00) & (memory[0x01a0:0x01c0] > 0x00))) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01c0:0x01e0] <= block.timestamp) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01e0:0x0200] = 0x0e;\n            memory[0x0200:0x0220] = 0x74726164696e67416c6c6f776564000000000000000000000000000000000000;\n            memory[0xe0:0x0100] = keccak256(memory[0x0200:0x0200 + memory[0x01e0:0x0200]]);\n            memory[0xc0:0xe0] = 0x09;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0180:0x01a0];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == memory[0x0140:0x0160]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0240:0x0260] = 0x70a08231;\n            memory[0x0260:0x0280] = msg.sender;\n            var temp48;\n            temp48, memory[0x02c0:0x02e0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x025c:0x0280]);\n        \n            if (!temp48) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x02c0:0x02e0] < var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0180:0x01a0];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == memory[0x0140:0x0160]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02e0:0x0300] = 0xdd62ed3e;\n            memory[0x0300:0x0320] = msg.sender;\n            memory[0x0320:0x0340] = address(this);\n            var temp49;\n            temp49, memory[0x0380:0x03a0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x02fc:0x0340]);\n        \n            if (!temp49) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0380:0x03a0] < var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            var4 = memory[0x01c0:0x01e0];\n            var5 = memory[0x01e0:0x0200];\n            var var6 = memory[0x0200:0x0220];\n            var var7 = memory[0x0220:0x0240];\n            var var8 = memory[0x0240:0x0260];\n            var var9 = memory[0x0260:0x0280];\n            var var10 = memory[0x0280:0x02a0];\n            var var11 = memory[0x02a0:0x02c0];\n            var var12 = memory[0x02c0:0x02e0];\n            var var13 = memory[0x02e0:0x0300];\n            var var14 = memory[0x0300:0x0320];\n            var var15 = memory[0x0320:0x0340];\n            var var16 = memory[0x0340:0x0360];\n            var var17 = memory[0x0360:0x0380];\n            var var18 = memory[0x0380:0x03a0];\n            var var19 = memory[0x03a0:0x03c0];\n            memory[0x03c0:0x03e0] = 0x84ba3f69;\n            memory[0x03e0:0x0400] = memory[0x0140:0x0160];\n            var var20 = memory[0x03e0:0x0400];\n            var var21 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x23d7d1a8) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            var temp45 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] == temp45) { revert(memory[0x00:0x00]); }\n        \n            var temp46 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n            storage[keccak256(memory[0xc0:0x0100])] = temp46;\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x44dbd334) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            var temp43 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] == temp43) { revert(memory[0x00:0x00]); }\n        \n            var temp44 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n            storage[keccak256(memory[0xc0:0x0100])] = temp44;\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x903a1001) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01c0] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n        \n            if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            var temp41 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = keccak256(memory[0x01a0:0x01a0 + memory[0x0180:0x01a0]]);\n            memory[0xc0:0xe0] = 0x09;\n            storage[keccak256(memory[0xc0:0x0100])] = temp41;\n            var0 = memory[0x0160:0x0180];\n            var1 = 0x0180;\n            var2 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n            var3 = 0x00;\n            var4 = memory[var1:var1 + 0x20];\n        \n            if (var4 i> 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp42 = var3;\n            var3 = var4;\n        \n            if (var3 i< temp42) { revert(memory[0x00:0x00]); }\n        \n            log(memory[0x00:0x00], [0x22b59c94b6ec143f205f4ac5d8177280de0eab514e8d857330a1af17343e97bd, stack[-2] / 0x0100 ** (memory[0x0180:0x01a0] - stack[-1]), stack[-4]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x80a0628b) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x05;\n            var0 = storage[keccak256(memory[0xc0:0x0100])] * 0x02540be400;\n        \n            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x0180] = var0;\n            var0 = storage[0x04] * 0x02540be400;\n        \n            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = var0;\n            var0 = memory[0xa0:0xc0];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n        \n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n            var temp39 = (var1 * 0x02540be400) i/ var2;\n            var1 = temp39;\n        \n            if (var1 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            var temp40 = var0;\n            var0 = var1;\n        \n            if (var0 i< temp40) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = var0;\n            memory[0x00:0x20] = memory[0x01a0:0x01c0];\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0xf2fde38b) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0140:0x0160] == 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x02] = memory[0x0140:0x0160];\n            log(memory[0x00:0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x02], memory[0x0140:0x0160]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x993f4a20) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01c0] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n        \n            if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x00;\n            memory[0x01e0:0x0200] = 0x038d7ea4c68000;\n            var1 = memory[0xa0:0xc0];\n            var temp29 = memory[0x01e0:0x0200];\n            var2 = temp29;\n            var temp30 = memory[0x0160:0x0180];\n            var3 = temp30;\n            var4 = var3 * var2;\n        \n            if (!((var4 i/ var3 == var2) | !var3)) { revert(memory[0x00:0x00]); }\n        \n            var2 = var4 i/ 0x02540be400;\n        \n            if (var2 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            var temp31 = var1;\n            var1 = var2;\n        \n            if (var1 i< temp31) { revert(memory[0x00:0x00]); }\n        \n            if (var1 i>= var0) {\n                var0 = 0x02540be400;\n                memory[0x01e0:0x0200] = 0x038d7ea4c68000;\n                var1 = memory[0xa0:0xc0];\n                var temp32 = memory[0x01e0:0x0200];\n                var2 = temp32;\n                var temp33 = memory[0x0160:0x0180];\n                var3 = temp33;\n                var4 = var3 * var2;\n            \n                if (!((var4 i/ var3 == var2) | !var3)) { revert(memory[0x00:0x00]); }\n            \n                var2 = var4 i/ 0x02540be400;\n            \n                if (var2 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n            \n                var temp34 = var1;\n                var1 = var2;\n            \n                if (var1 i< temp34) { revert(memory[0x00:0x00]); }\n            \n                var0 = var1 i/ var0;\n            \n            label_1A2C:\n            \n                if (var0 i< 0x00) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = keccak256(memory[0x01a0:0x01a0 + memory[0x0180:0x01a0]]);\n                memory[0xc0:0xe0] = 0x0a;\n                storage[keccak256(memory[0xc0:0x0100])] = var0;\n                var0 = memory[0x0160:0x0180];\n                var1 = 0x0180;\n                var2 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n                var3 = 0x00;\n                var4 = memory[var1:var1 + 0x20];\n            \n                if (var4 i> 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp35 = var3;\n                var3 = var4;\n            \n                if (var3 i< temp35) { revert(memory[0x00:0x00]); }\n            \n                log(memory[0x00:0x00], [0xd8dd23b660d1a2cd022ce86c6122d03c591f721b3c2af378ecb404c0b605ddc7, stack[-2] / 0x0100 ** (memory[0x0180:0x01a0] - stack[-1]), stack[-4]]);\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else {\n                var0 = 0x02540be400;\n                var1 = 0x02540be3ff;\n                memory[0x01e0:0x0200] = 0x038d7ea4c68000;\n                var2 = memory[0xa0:0xc0];\n                var temp36 = memory[0x01e0:0x0200];\n                var3 = temp36;\n                var temp37 = memory[0x0160:0x0180];\n                var4 = temp37;\n                var5 = var4 * var3;\n            \n                if (!((var5 i/ var4 == var3) | !var4)) { revert(memory[0x00:0x00]); }\n            \n                var3 = var5 i/ 0x02540be400;\n            \n                if (var3 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n            \n                var temp38 = var2;\n                var2 = var3;\n            \n                if (var2 i< temp38) { revert(memory[0x00:0x00]); }\n            \n                var0 = var2 - var1 i/ var0;\n                goto label_1A2C;\n            }\n        } else if (memory[0x00:0x20] == 0xe005cbbf) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x01a0] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n        \n            if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = keccak256(memory[0x0180:0x0180 + memory[0x0160:0x0180]]);\n            memory[0xc0:0xe0] = 0x0a;\n            var0 = storage[keccak256(memory[0xc0:0x0100])] * 0x02540be400;\n        \n            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x01e0] = var0;\n            memory[0x01e0:0x0200] = 0x038d7ea4c68000;\n            var0 = memory[0xa0:0xc0];\n            var1 = memory[0x01c0:0x01e0];\n            var2 = memory[0x01e0:0x0200];\n        \n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n            var temp27 = (var1 * 0x02540be400) i/ var2;\n            var1 = temp27;\n        \n            if (var1 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            var temp28 = var0;\n            var0 = var1;\n        \n            if (var0 i< temp28) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = var0;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x86d1e02b) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x0b] = memory[0x0140:0x0160];\n            log(memory[0x00:0x00], [0x12ad2958c2383ce31dd51da097e673d81de88c202731500406f3afc70a8cf170, memory[0x0140:0x0160]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0xa9059cbb) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x05;\n            var0 = keccak256(memory[0xc0:0x0100]);\n        \n            if (storage[var0] < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n        \n            var temp24 = var0;\n            storage[temp24] = storage[temp24] - memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x05;\n            var temp25 = keccak256(memory[0xc0:0x0100]);\n            var0 = temp25;\n        \n            if (storage[var0] + memory[0x0160:0x0180] < storage[var0]) { revert(memory[0x00:0x00]); }\n        \n            var temp26 = var0;\n            storage[temp26] = storage[temp26] + memory[0x0160:0x0180];\n            memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n            log(memory[0x0180:0x01a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, memory[0x0140:0x0160]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x23b872dd) {\n            memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x05;\n            var0 = keccak256(memory[0xc0:0x0100]);\n        \n            if (storage[var0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            var temp19 = var0;\n            storage[temp19] = storage[temp19] - memory[0x0180:0x01a0];\n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = 0x05;\n            var temp20 = keccak256(memory[0xc0:0x0100]);\n            var0 = temp20;\n        \n            if (storage[var0] + memory[0x0180:0x01a0] < storage[var0]) { revert(memory[0x00:0x00]); }\n        \n            var temp21 = var0;\n            storage[temp21] = storage[temp21] + memory[0x0180:0x01a0];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x06;\n            var temp22 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = temp22;\n            var0 = keccak256(memory[0xc0:0x0100]);\n        \n            if (storage[var0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            var temp23 = var0;\n            storage[temp23] = storage[temp23] - memory[0x0180:0x01a0];\n            memory[0x01a0:0x01c0] = memory[0x0180:0x01a0];\n            log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x095ea7b3) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var temp17 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x06;\n            var temp18 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = temp18;\n            storage[keccak256(memory[0xc0:0x0100])] = temp17;\n            memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n            log(memory[0x0180:0x01a0], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, msg.sender]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] != 0x06fdde03) {\n            if (memory[0x00:0x20] != 0x95d89b41) {\n                if (memory[0x00:0x20] != 0x8da5cb5b) {\n                    if (memory[0x00:0x20] != 0x313ce567) {\n                        if (memory[0x00:0x20] != 0x18160ddd) {\n                            if (memory[0x00:0x20] == 0x70a08231) {\n                                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                memory[0xc0:0xe0] = 0x05;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] == 0xdd62ed3e) {\n                                memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x24:0x44];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                memory[0xc0:0xe0] = 0x06;\n                                var temp0 = keccak256(memory[0xc0:0x0100]);\n                                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                memory[0xc0:0xe0] = temp0;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] == 0x4999eb8f) {\n                                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                memory[0xc0:0xe0] = 0x07;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] == 0x51ecd2fa) {\n                                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                var var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                memory[0xc0:0xe0] = 0x08;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] == 0x752708fb) {\n                                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x0160:0x01a0] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                            \n                                if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = keccak256(memory[0x0180:0x0180 + memory[0x0160:0x0180]]);\n                                memory[0xc0:0xe0] = 0x09;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] != 0x2bc51c6d) { revert(memory[0x00:0x00]); }\n                            else if (!msg.value) {\n                                memory[0x00:0x20] = storage[0x0b];\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x04];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x03];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    memory[0x00:0x20] = storage[0x02];\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = 0x01;\n                memory[0xc0:0xe0] = var0;\n                var var1 = keccak256(memory[0xc0:0xe0]);\n                var var2 = 0x0180;\n                var temp1 = storage[var1] + 0x20;\n                var var3 = temp1;\n                var var4 = 0x0120;\n                memory[var4:var4 + 0x20] = 0x00;\n                var var5 = 0x02;\n            \n                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_1FA9; }\n            \n            label_1FAD:\n                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                var temp2 = var4;\n                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                memory[temp2:temp2 + 0x20] = temp3;\n            \n                if (var5 == temp3) { goto label_1FCF; }\n            \n                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_1FAD; }\n            \n            label_1FA9:\n            \n            label_1FCF:\n                var temp4 = memory[0x0180:0x01a0];\n                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                var1 = 0x01e0;\n                var temp5 = memory[0x0180:0x01a0];\n                memory[var1:var1 + 0x20] = temp5;\n                var2 = temp5 + 0x06;\n            \n                if (memory[0x01e0:0x0200] > var0) { goto label_2001; }\n            \n            label_2005:\n                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                var temp6 = var1;\n                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                memory[temp6:temp6 + 0x20] = temp7;\n            \n                if (var2 == temp7) { goto label_2021; }\n            \n                if (memory[0x01e0:0x0200] <= var0) { goto label_2005; }\n            \n            label_2001:\n            \n            label_2021:\n                memory[0x0160:0x0180] = 0x20;\n                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = 0x00;\n            memory[0xc0:0xe0] = var0;\n            var1 = keccak256(memory[0xc0:0xe0]);\n            var2 = 0x0180;\n            var temp9 = storage[var1] + 0x20;\n            var3 = temp9;\n            var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var5 = 0x02;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_1EC6; }\n        \n        label_1ECA:\n            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n            var temp10 = var4;\n            var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n            memory[temp10:temp10 + 0x20] = temp11;\n        \n            if (var5 == temp11) { goto label_1EEC; }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_1ECA; }\n        \n        label_1EC6:\n        \n        label_1EEC:\n            var temp12 = memory[0x0180:0x01a0];\n            var0 = (temp12 + 0x1f) - temp12 - 0x01 % 0x20;\n            var1 = 0x01e0;\n            var temp13 = memory[0x0180:0x01a0];\n            memory[var1:var1 + 0x20] = temp13;\n            var2 = temp13 + 0x20;\n        \n            if (memory[0x01e0:0x0200] > var0) { goto label_1F1E; }\n        \n        label_1F22:\n            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n            var temp14 = var1;\n            var temp15 = memory[temp14:temp14 + 0x20] + 0x01;\n            memory[temp14:temp14 + 0x20] = temp15;\n        \n            if (var2 == temp15) { goto label_1F3E; }\n        \n            if (memory[0x01e0:0x0200] <= var0) { goto label_1F22; }\n        \n        label_1F1E:\n        \n        label_1F3E:\n            memory[0x0160:0x0180] = 0x20;\n            var temp16 = memory[0x0180:0x01a0] + 0x40;\n            return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (0x00) {\n            // Error: StackRead before write???\n            var var-2;\n            // Error: StackRead before write???\n            var var-1;\n            memory[0x0160:0x0180] = var-1;\n            memory[0x0140:0x0160] = var-2;\n        \n            if (!address(storage[0x0b]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == storage[0x0b]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = 0xf1bb1086;\n            memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n            var temp53;\n            temp53, memory[0x0220:0x0240] = address(storage[0x0b]).staticcall.gas(msg.gas)(memory[0x01bc:0x01e0]);\n        \n            if (!temp53) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = memory[0x0220:0x0240];\n        \n            if (memory[0x0180:0x01a0] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = memory[0x0180:0x01a0];\n            var-2 = memory[0x00:0x20];\n            // Error: Could not resolve jump destination!\n        } else if (memory[0x00:0x20] == 0x55776b77) {\n            memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            if (!((memory[0x0180:0x01a0] > block.timestamp) & (memory[0x0160:0x0180] > 0x00))) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = 0x16;\n            memory[0x01c0:0x01e0] = 0x6c6971756964697479416464696e67416c6c6f77656400000000000000000000;\n            memory[0xe0:0x0100] = keccak256(memory[0x01c0:0x01c0 + memory[0x01a0:0x01c0]]);\n            memory[0xc0:0xe0] = 0x09;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0160:0x0180];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == memory[0x0140:0x0160]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = 0x70a08231;\n            memory[0x0220:0x0240] = msg.sender;\n            var temp51;\n            temp51, memory[0x0280:0x02a0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x021c:0x0240]);\n        \n            if (!temp51) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0280:0x02a0] < var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0160:0x0180];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == memory[0x0140:0x0160]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02a0:0x02c0] = 0xdd62ed3e;\n            memory[0x02c0:0x02e0] = msg.sender;\n            memory[0x02e0:0x0300] = address(this);\n            var temp52;\n            temp52, memory[0x0340:0x0360] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x02bc:0x0300]);\n        \n            if (!temp52) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0340:0x0360] < var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            var4 = memory[0x01c0:0x01e0];\n            var5 = memory[0x01e0:0x0200];\n            var6 = memory[0x0200:0x0220];\n            var7 = memory[0x0220:0x0240];\n            var8 = memory[0x0240:0x0260];\n            var9 = memory[0x0260:0x0280];\n            var10 = memory[0x0280:0x02a0];\n            var11 = memory[0x02a0:0x02c0];\n            var12 = memory[0x02c0:0x02e0];\n            var13 = memory[0x02e0:0x0300];\n            var14 = memory[0x0300:0x0320];\n            var15 = memory[0x0320:0x0340];\n            var16 = memory[0x0340:0x0360];\n            var17 = memory[0x0360:0x0380];\n            memory[0x0380:0x03a0] = 0x84ba3f69;\n            memory[0x03a0:0x03c0] = memory[0x0140:0x0160];\n            var18 = memory[0x03a0:0x03c0];\n            var19 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x93ca2f8a) {\n            memory[0x0140:0x01c0] = msg.data[0x04:0x84];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            if (!((memory[0x0160:0x0180] > 0x00) & (memory[0x01a0:0x01c0] > block.timestamp))) { revert(memory[0x00:0x00]); }\n        \n            var temp50 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x05;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] < temp50) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x01e0] = 0x18;\n            memory[0x01e0:0x0200] = 0x6c697175696469747952656d6f76696e67416c6c6f7765640000000000000000;\n            memory[0xe0:0x0100] = keccak256(memory[0x01e0:0x01e0 + memory[0x01c0:0x01e0]]);\n            memory[0xc0:0xe0] = 0x09;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x04] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            var4 = memory[0x01c0:0x01e0];\n            var5 = memory[0x01e0:0x0200];\n            var6 = memory[0x0200:0x0220];\n            var7 = memory[0x0220:0x0240];\n            memory[0x0240:0x0260] = 0x84ba3f69;\n            memory[0x0260:0x0280] = memory[0x0140:0x0160];\n            var8 = memory[0x0260:0x0280];\n            var9 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x43d91bf1) {\n            memory[0x0140:0x01e0] = msg.data[0x04:0xa4];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = 0x08;\n            var temp47 = storage[keccak256(memory[0xc0:0x0100])];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (!(storage[keccak256(memory[0xc0:0x0100])] & temp47)) { revert(memory[0x00:0x00]); }\n        \n            if (!((memory[0x0180:0x01a0] > 0x00) & (memory[0x01a0:0x01c0] > 0x00))) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01c0:0x01e0] <= block.timestamp) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01e0:0x0200] = 0x0e;\n            memory[0x0200:0x0220] = 0x74726164696e67416c6c6f776564000000000000000000000000000000000000;\n            memory[0xe0:0x0100] = keccak256(memory[0x0200:0x0200 + memory[0x01e0:0x0200]]);\n            memory[0xc0:0xe0] = 0x09;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0180:0x01a0];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == memory[0x0140:0x0160]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0240:0x0260] = 0x70a08231;\n            memory[0x0260:0x0280] = msg.sender;\n            var temp48;\n            temp48, memory[0x02c0:0x02e0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x025c:0x0280]);\n        \n            if (!temp48) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x02c0:0x02e0] < var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0180:0x01a0];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == memory[0x0140:0x0160]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02e0:0x0300] = 0xdd62ed3e;\n            memory[0x0300:0x0320] = msg.sender;\n            memory[0x0320:0x0340] = address(this);\n            var temp49;\n            temp49, memory[0x0380:0x03a0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x02fc:0x0340]);\n        \n            if (!temp49) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0380:0x03a0] < var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            var4 = memory[0x01c0:0x01e0];\n            var5 = memory[0x01e0:0x0200];\n            var var6 = memory[0x0200:0x0220];\n            var var7 = memory[0x0220:0x0240];\n            var var8 = memory[0x0240:0x0260];\n            var var9 = memory[0x0260:0x0280];\n            var var10 = memory[0x0280:0x02a0];\n            var var11 = memory[0x02a0:0x02c0];\n            var var12 = memory[0x02c0:0x02e0];\n            var var13 = memory[0x02e0:0x0300];\n            var var14 = memory[0x0300:0x0320];\n            var var15 = memory[0x0320:0x0340];\n            var var16 = memory[0x0340:0x0360];\n            var var17 = memory[0x0360:0x0380];\n            var var18 = memory[0x0380:0x03a0];\n            var var19 = memory[0x03a0:0x03c0];\n            memory[0x03c0:0x03e0] = 0x84ba3f69;\n            memory[0x03e0:0x0400] = memory[0x0140:0x0160];\n            var var20 = memory[0x03e0:0x0400];\n            var var21 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x23d7d1a8) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            var temp45 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] == temp45) { revert(memory[0x00:0x00]); }\n        \n            var temp46 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n            storage[keccak256(memory[0xc0:0x0100])] = temp46;\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x44dbd334) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            var temp43 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] == temp43) { revert(memory[0x00:0x00]); }\n        \n            var temp44 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n            storage[keccak256(memory[0xc0:0x0100])] = temp44;\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x903a1001) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01c0] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n        \n            if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            var temp41 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = keccak256(memory[0x01a0:0x01a0 + memory[0x0180:0x01a0]]);\n            memory[0xc0:0xe0] = 0x09;\n            storage[keccak256(memory[0xc0:0x0100])] = temp41;\n            var0 = memory[0x0160:0x0180];\n            var1 = 0x0180;\n            var2 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n            var3 = 0x00;\n            var4 = memory[var1:var1 + 0x20];\n        \n            if (var4 i> 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp42 = var3;\n            var3 = var4;\n        \n            if (var3 i< temp42) { revert(memory[0x00:0x00]); }\n        \n            log(memory[0x00:0x00], [0x22b59c94b6ec143f205f4ac5d8177280de0eab514e8d857330a1af17343e97bd, stack[-2] / 0x0100 ** (memory[0x0180:0x01a0] - stack[-1]), stack[-4]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x80a0628b) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x05;\n            var0 = storage[keccak256(memory[0xc0:0x0100])] * 0x02540be400;\n        \n            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x0180] = var0;\n            var0 = storage[0x04] * 0x02540be400;\n        \n            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = var0;\n            var0 = memory[0xa0:0xc0];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n        \n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n            var temp39 = (var1 * 0x02540be400) i/ var2;\n            var1 = temp39;\n        \n            if (var1 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            var temp40 = var0;\n            var0 = var1;\n        \n            if (var0 i< temp40) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = var0;\n            memory[0x00:0x20] = memory[0x01a0:0x01c0];\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0xf2fde38b) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0140:0x0160] == 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x02] = memory[0x0140:0x0160];\n            log(memory[0x00:0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x02], memory[0x0140:0x0160]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x993f4a20) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01c0] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n        \n            if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x00;\n            memory[0x01e0:0x0200] = 0x038d7ea4c68000;\n            var1 = memory[0xa0:0xc0];\n            var temp29 = memory[0x01e0:0x0200];\n            var2 = temp29;\n            var temp30 = memory[0x0160:0x0180];\n            var3 = temp30;\n            var4 = var3 * var2;\n        \n            if (!((var4 i/ var3 == var2) | !var3)) { revert(memory[0x00:0x00]); }\n        \n            var2 = var4 i/ 0x02540be400;\n        \n            if (var2 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            var temp31 = var1;\n            var1 = var2;\n        \n            if (var1 i< temp31) { revert(memory[0x00:0x00]); }\n        \n            if (var1 i>= var0) {\n                var0 = 0x02540be400;\n                memory[0x01e0:0x0200] = 0x038d7ea4c68000;\n                var1 = memory[0xa0:0xc0];\n                var temp32 = memory[0x01e0:0x0200];\n                var2 = temp32;\n                var temp33 = memory[0x0160:0x0180];\n                var3 = temp33;\n                var4 = var3 * var2;\n            \n                if (!((var4 i/ var3 == var2) | !var3)) { revert(memory[0x00:0x00]); }\n            \n                var2 = var4 i/ 0x02540be400;\n            \n                if (var2 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n            \n                var temp34 = var1;\n                var1 = var2;\n            \n                if (var1 i< temp34) { revert(memory[0x00:0x00]); }\n            \n                var0 = var1 i/ var0;\n            \n            label_1A2C:\n            \n                if (var0 i< 0x00) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = keccak256(memory[0x01a0:0x01a0 + memory[0x0180:0x01a0]]);\n                memory[0xc0:0xe0] = 0x0a;\n                storage[keccak256(memory[0xc0:0x0100])] = var0;\n                var0 = memory[0x0160:0x0180];\n                var1 = 0x0180;\n                var2 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n                var3 = 0x00;\n                var4 = memory[var1:var1 + 0x20];\n            \n                if (var4 i> 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp35 = var3;\n                var3 = var4;\n            \n                if (var3 i< temp35) { revert(memory[0x00:0x00]); }\n            \n                log(memory[0x00:0x00], [0xd8dd23b660d1a2cd022ce86c6122d03c591f721b3c2af378ecb404c0b605ddc7, stack[-2] / 0x0100 ** (memory[0x0180:0x01a0] - stack[-1]), stack[-4]]);\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else {\n                var0 = 0x02540be400;\n                var1 = 0x02540be3ff;\n                memory[0x01e0:0x0200] = 0x038d7ea4c68000;\n                var2 = memory[0xa0:0xc0];\n                var temp36 = memory[0x01e0:0x0200];\n                var3 = temp36;\n                var temp37 = memory[0x0160:0x0180];\n                var4 = temp37;\n                var5 = var4 * var3;\n            \n                if (!((var5 i/ var4 == var3) | !var4)) { revert(memory[0x00:0x00]); }\n            \n                var3 = var5 i/ 0x02540be400;\n            \n                if (var3 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n            \n                var temp38 = var2;\n                var2 = var3;\n            \n                if (var2 i< temp38) { revert(memory[0x00:0x00]); }\n            \n                var0 = var2 - var1 i/ var0;\n                goto label_1A2C;\n            }\n        } else if (memory[0x00:0x20] == 0xe005cbbf) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x01a0] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n        \n            if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = keccak256(memory[0x0180:0x0180 + memory[0x0160:0x0180]]);\n            memory[0xc0:0xe0] = 0x0a;\n            var0 = storage[keccak256(memory[0xc0:0x0100])] * 0x02540be400;\n        \n            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x01e0] = var0;\n            memory[0x01e0:0x0200] = 0x038d7ea4c68000;\n            var0 = memory[0xa0:0xc0];\n            var1 = memory[0x01c0:0x01e0];\n            var2 = memory[0x01e0:0x0200];\n        \n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n            var temp27 = (var1 * 0x02540be400) i/ var2;\n            var1 = temp27;\n        \n            if (var1 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            var temp28 = var0;\n            var0 = var1;\n        \n            if (var0 i< temp28) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = var0;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x86d1e02b) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x0b] = memory[0x0140:0x0160];\n            log(memory[0x00:0x00], [0x12ad2958c2383ce31dd51da097e673d81de88c202731500406f3afc70a8cf170, memory[0x0140:0x0160]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0xa9059cbb) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x05;\n            var0 = keccak256(memory[0xc0:0x0100]);\n        \n            if (storage[var0] < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n        \n            var temp24 = var0;\n            storage[temp24] = storage[temp24] - memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x05;\n            var temp25 = keccak256(memory[0xc0:0x0100]);\n            var0 = temp25;\n        \n            if (storage[var0] + memory[0x0160:0x0180] < storage[var0]) { revert(memory[0x00:0x00]); }\n        \n            var temp26 = var0;\n            storage[temp26] = storage[temp26] + memory[0x0160:0x0180];\n            memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n            log(memory[0x0180:0x01a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, memory[0x0140:0x0160]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x23b872dd) {\n            memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x05;\n            var0 = keccak256(memory[0xc0:0x0100]);\n        \n            if (storage[var0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            var temp19 = var0;\n            storage[temp19] = storage[temp19] - memory[0x0180:0x01a0];\n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = 0x05;\n            var temp20 = keccak256(memory[0xc0:0x0100]);\n            var0 = temp20;\n        \n            if (storage[var0] + memory[0x0180:0x01a0] < storage[var0]) { revert(memory[0x00:0x00]); }\n        \n            var temp21 = var0;\n            storage[temp21] = storage[temp21] + memory[0x0180:0x01a0];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x06;\n            var temp22 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = temp22;\n            var0 = keccak256(memory[0xc0:0x0100]);\n        \n            if (storage[var0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            var temp23 = var0;\n            storage[temp23] = storage[temp23] - memory[0x0180:0x01a0];\n            memory[0x01a0:0x01c0] = memory[0x0180:0x01a0];\n            log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x095ea7b3) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var temp17 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x06;\n            var temp18 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = temp18;\n            storage[keccak256(memory[0xc0:0x0100])] = temp17;\n            memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n            log(memory[0x0180:0x01a0], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, msg.sender]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] != 0x06fdde03) {\n            if (memory[0x00:0x20] != 0x95d89b41) {\n                if (memory[0x00:0x20] != 0x8da5cb5b) {\n                    if (memory[0x00:0x20] != 0x313ce567) {\n                        if (memory[0x00:0x20] != 0x18160ddd) {\n                            if (memory[0x00:0x20] == 0x70a08231) {\n                                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                memory[0xc0:0xe0] = 0x05;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] == 0xdd62ed3e) {\n                                memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x24:0x44];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                memory[0xc0:0xe0] = 0x06;\n                                var temp0 = keccak256(memory[0xc0:0x0100]);\n                                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                memory[0xc0:0xe0] = temp0;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] == 0x4999eb8f) {\n                                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                memory[0xc0:0xe0] = 0x07;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] == 0x51ecd2fa) {\n                                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                var var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                memory[0xc0:0xe0] = 0x08;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] == 0x752708fb) {\n                                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x0160:0x01a0] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                            \n                                if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = keccak256(memory[0x0180:0x0180 + memory[0x0160:0x0180]]);\n                                memory[0xc0:0xe0] = 0x09;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] != 0x2bc51c6d) { revert(memory[0x00:0x00]); }\n                            else if (!msg.value) {\n                                memory[0x00:0x20] = storage[0x0b];\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x04];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x03];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    memory[0x00:0x20] = storage[0x02];\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = 0x01;\n                memory[0xc0:0xe0] = var0;\n                var var1 = keccak256(memory[0xc0:0xe0]);\n                var var2 = 0x0180;\n                var temp1 = storage[var1] + 0x20;\n                var var3 = temp1;\n                var var4 = 0x0120;\n                memory[var4:var4 + 0x20] = 0x00;\n                var var5 = 0x02;\n            \n                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_1FA9; }\n            \n            label_1FAD:\n                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                var temp2 = var4;\n                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                memory[temp2:temp2 + 0x20] = temp3;\n            \n                if (var5 == temp3) { goto label_1FCF; }\n            \n                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_1FAD; }\n            \n            label_1FA9:\n            \n            label_1FCF:\n                var temp4 = memory[0x0180:0x01a0];\n                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                var1 = 0x01e0;\n                var temp5 = memory[0x0180:0x01a0];\n                memory[var1:var1 + 0x20] = temp5;\n                var2 = temp5 + 0x06;\n            \n                if (memory[0x01e0:0x0200] > var0) { goto label_2001; }\n            \n            label_2005:\n                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                var temp6 = var1;\n                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                memory[temp6:temp6 + 0x20] = temp7;\n            \n                if (var2 == temp7) { goto label_2021; }\n            \n                if (memory[0x01e0:0x0200] <= var0) { goto label_2005; }\n            \n            label_2001:\n            \n            label_2021:\n                memory[0x0160:0x0180] = 0x20;\n                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = 0x00;\n            memory[0xc0:0xe0] = var0;\n            var1 = keccak256(memory[0xc0:0xe0]);\n            var2 = 0x0180;\n            var temp9 = storage[var1] + 0x20;\n            var3 = temp9;\n            var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var5 = 0x02;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_1EC6; }\n        \n        label_1ECA:\n            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n            var temp10 = var4;\n            var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n            memory[temp10:temp10 + 0x20] = temp11;\n        \n            if (var5 == temp11) { goto label_1EEC; }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_1ECA; }\n        \n        label_1EC6:\n        \n        label_1EEC:\n            var temp12 = memory[0x0180:0x01a0];\n            var0 = (temp12 + 0x1f) - temp12 - 0x01 % 0x20;\n            var1 = 0x01e0;\n            var temp13 = memory[0x0180:0x01a0];\n            memory[var1:var1 + 0x20] = temp13;\n            var2 = temp13 + 0x20;\n        \n            if (memory[0x01e0:0x0200] > var0) { goto label_1F1E; }\n        \n        label_1F22:\n            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n            var temp14 = var1;\n            var temp15 = memory[temp14:temp14 + 0x20] + 0x01;\n            memory[temp14:temp14 + 0x20] = temp15;\n        \n            if (var2 == temp15) { goto label_1F3E; }\n        \n            if (memory[0x01e0:0x0200] <= var0) { goto label_1F22; }\n        \n        label_1F1E:\n        \n        label_1F3E:\n            memory[0x0160:0x0180] = 0x20;\n            var temp16 = memory[0x0180:0x01a0] + 0x40;\n            return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (0x00) {\n            // Error: StackRead before write???\n            var var-2;\n            // Error: StackRead before write???\n            var var-1;\n            memory[0x0160:0x0180] = var-1;\n            memory[0x0140:0x0160] = var-2;\n        \n            if (!address(storage[0x0b]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == storage[0x0b]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = 0xf1bb1086;\n            memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n            var temp53;\n            temp53, memory[0x0220:0x0240] = address(storage[0x0b]).staticcall.gas(msg.gas)(memory[0x01bc:0x01e0]);\n        \n            if (!temp53) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = memory[0x0220:0x0240];\n        \n            if (memory[0x0180:0x01a0] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = memory[0x0180:0x01a0];\n            var-2 = memory[0x00:0x20];\n            // Error: Could not resolve jump destination!\n        } else if (memory[0x00:0x20] == 0x55776b77) {\n            memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            if (!((memory[0x0180:0x01a0] > block.timestamp) & (memory[0x0160:0x0180] > 0x00))) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = 0x16;\n            memory[0x01c0:0x01e0] = 0x6c6971756964697479416464696e67416c6c6f77656400000000000000000000;\n            memory[0xe0:0x0100] = keccak256(memory[0x01c0:0x01c0 + memory[0x01a0:0x01c0]]);\n            memory[0xc0:0xe0] = 0x09;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0160:0x0180];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == memory[0x0140:0x0160]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = 0x70a08231;\n            memory[0x0220:0x0240] = msg.sender;\n            var temp51;\n            temp51, memory[0x0280:0x02a0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x021c:0x0240]);\n        \n            if (!temp51) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0280:0x02a0] < var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0160:0x0180];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == memory[0x0140:0x0160]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02a0:0x02c0] = 0xdd62ed3e;\n            memory[0x02c0:0x02e0] = msg.sender;\n            memory[0x02e0:0x0300] = address(this);\n            var temp52;\n            temp52, memory[0x0340:0x0360] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x02bc:0x0300]);\n        \n            if (!temp52) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0340:0x0360] < var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            var4 = memory[0x01c0:0x01e0];\n            var5 = memory[0x01e0:0x0200];\n            var6 = memory[0x0200:0x0220];\n            var7 = memory[0x0220:0x0240];\n            var8 = memory[0x0240:0x0260];\n            var9 = memory[0x0260:0x0280];\n            var10 = memory[0x0280:0x02a0];\n            var11 = memory[0x02a0:0x02c0];\n            var12 = memory[0x02c0:0x02e0];\n            var13 = memory[0x02e0:0x0300];\n            var14 = memory[0x0300:0x0320];\n            var15 = memory[0x0320:0x0340];\n            var16 = memory[0x0340:0x0360];\n            var17 = memory[0x0360:0x0380];\n            memory[0x0380:0x03a0] = 0x84ba3f69;\n            memory[0x03a0:0x03c0] = memory[0x0140:0x0160];\n            var18 = memory[0x03a0:0x03c0];\n            var19 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x93ca2f8a) {\n            memory[0x0140:0x01c0] = msg.data[0x04:0x84];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            if (!((memory[0x0160:0x0180] > 0x00) & (memory[0x01a0:0x01c0] > block.timestamp))) { revert(memory[0x00:0x00]); }\n        \n            var temp50 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x05;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] < temp50) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x01e0] = 0x18;\n            memory[0x01e0:0x0200] = 0x6c697175696469747952656d6f76696e67416c6c6f7765640000000000000000;\n            memory[0xe0:0x0100] = keccak256(memory[0x01e0:0x01e0 + memory[0x01c0:0x01e0]]);\n            memory[0xc0:0xe0] = 0x09;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x04] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            var4 = memory[0x01c0:0x01e0];\n            var5 = memory[0x01e0:0x0200];\n            var6 = memory[0x0200:0x0220];\n            var7 = memory[0x0220:0x0240];\n            memory[0x0240:0x0260] = 0x84ba3f69;\n            memory[0x0260:0x0280] = memory[0x0140:0x0160];\n            var8 = memory[0x0260:0x0280];\n            var9 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x43d91bf1) {\n            memory[0x0140:0x01e0] = msg.data[0x04:0xa4];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = 0x08;\n            var temp47 = storage[keccak256(memory[0xc0:0x0100])];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (!(storage[keccak256(memory[0xc0:0x0100])] & temp47)) { revert(memory[0x00:0x00]); }\n        \n            if (!((memory[0x0180:0x01a0] > 0x00) & (memory[0x01a0:0x01c0] > 0x00))) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x01c0:0x01e0] <= block.timestamp) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01e0:0x0200] = 0x0e;\n            memory[0x0200:0x0220] = 0x74726164696e67416c6c6f776564000000000000000000000000000000000000;\n            memory[0xe0:0x0100] = keccak256(memory[0x0200:0x0200 + memory[0x01e0:0x0200]]);\n            memory[0xc0:0xe0] = 0x09;\n        \n            if (!storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0180:0x01a0];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == memory[0x0140:0x0160]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0240:0x0260] = 0x70a08231;\n            memory[0x0260:0x0280] = msg.sender;\n            var temp48;\n            temp48, memory[0x02c0:0x02e0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x025c:0x0280]);\n        \n            if (!temp48) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x02c0:0x02e0] < var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0180:0x01a0];\n        \n            if (!address(memory[0x0140:0x0160]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (address(this) == memory[0x0140:0x0160]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x02e0:0x0300] = 0xdd62ed3e;\n            memory[0x0300:0x0320] = msg.sender;\n            memory[0x0320:0x0340] = address(this);\n            var temp49;\n            temp49, memory[0x0380:0x03a0] = address(memory[0x0140:0x0160]).staticcall.gas(msg.gas)(memory[0x02fc:0x0340]);\n        \n            if (!temp49) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0380:0x03a0] < var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            var4 = memory[0x01c0:0x01e0];\n            var5 = memory[0x01e0:0x0200];\n            var var6 = memory[0x0200:0x0220];\n            var var7 = memory[0x0220:0x0240];\n            var var8 = memory[0x0240:0x0260];\n            var var9 = memory[0x0260:0x0280];\n            var var10 = memory[0x0280:0x02a0];\n            var var11 = memory[0x02a0:0x02c0];\n            var var12 = memory[0x02c0:0x02e0];\n            var var13 = memory[0x02e0:0x0300];\n            var var14 = memory[0x0300:0x0320];\n            var var15 = memory[0x0320:0x0340];\n            var var16 = memory[0x0340:0x0360];\n            var var17 = memory[0x0360:0x0380];\n            var var18 = memory[0x0380:0x03a0];\n            var var19 = memory[0x03a0:0x03c0];\n            memory[0x03c0:0x03e0] = 0x84ba3f69;\n            memory[0x03e0:0x0400] = memory[0x0140:0x0160];\n            var var20 = memory[0x03e0:0x0400];\n            var var21 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x23d7d1a8) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            var temp45 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] == temp45) { revert(memory[0x00:0x00]); }\n        \n            var temp46 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n            storage[keccak256(memory[0xc0:0x0100])] = temp46;\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x44dbd334) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            var temp43 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] == temp43) { revert(memory[0x00:0x00]); }\n        \n            var temp44 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x08;\n            storage[keccak256(memory[0xc0:0x0100])] = temp44;\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x903a1001) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01c0] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n        \n            if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            var temp41 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = keccak256(memory[0x01a0:0x01a0 + memory[0x0180:0x01a0]]);\n            memory[0xc0:0xe0] = 0x09;\n            storage[keccak256(memory[0xc0:0x0100])] = temp41;\n            var0 = memory[0x0160:0x0180];\n            var1 = 0x0180;\n            var2 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n            var3 = 0x00;\n            var4 = memory[var1:var1 + 0x20];\n        \n            if (var4 i> 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp42 = var3;\n            var3 = var4;\n        \n            if (var3 i< temp42) { revert(memory[0x00:0x00]); }\n        \n            log(memory[0x00:0x00], [0x22b59c94b6ec143f205f4ac5d8177280de0eab514e8d857330a1af17343e97bd, stack[-2] / 0x0100 ** (memory[0x0180:0x01a0] - stack[-1]), stack[-4]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x80a0628b) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x05;\n            var0 = storage[keccak256(memory[0xc0:0x0100])] * 0x02540be400;\n        \n            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x0180] = var0;\n            var0 = storage[0x04] * 0x02540be400;\n        \n            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = var0;\n            var0 = memory[0xa0:0xc0];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n        \n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n            var temp39 = (var1 * 0x02540be400) i/ var2;\n            var1 = temp39;\n        \n            if (var1 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            var temp40 = var0;\n            var0 = var1;\n        \n            if (var0 i< temp40) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = var0;\n            memory[0x00:0x20] = memory[0x01a0:0x01c0];\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0xf2fde38b) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0140:0x0160] == 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x02] = memory[0x0140:0x0160];\n            log(memory[0x00:0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x02], memory[0x0140:0x0160]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x993f4a20) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01c0] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n        \n            if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x00;\n            memory[0x01e0:0x0200] = 0x038d7ea4c68000;\n            var1 = memory[0xa0:0xc0];\n            var temp29 = memory[0x01e0:0x0200];\n            var2 = temp29;\n            var temp30 = memory[0x0160:0x0180];\n            var3 = temp30;\n            var4 = var3 * var2;\n        \n            if (!((var4 i/ var3 == var2) | !var3)) { revert(memory[0x00:0x00]); }\n        \n            var2 = var4 i/ 0x02540be400;\n        \n            if (var2 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            var temp31 = var1;\n            var1 = var2;\n        \n            if (var1 i< temp31) { revert(memory[0x00:0x00]); }\n        \n            if (var1 i>= var0) {\n                var0 = 0x02540be400;\n                memory[0x01e0:0x0200] = 0x038d7ea4c68000;\n                var1 = memory[0xa0:0xc0];\n                var temp32 = memory[0x01e0:0x0200];\n                var2 = temp32;\n                var temp33 = memory[0x0160:0x0180];\n                var3 = temp33;\n                var4 = var3 * var2;\n            \n                if (!((var4 i/ var3 == var2) | !var3)) { revert(memory[0x00:0x00]); }\n            \n                var2 = var4 i/ 0x02540be400;\n            \n                if (var2 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n            \n                var temp34 = var1;\n                var1 = var2;\n            \n                if (var1 i< temp34) { revert(memory[0x00:0x00]); }\n            \n                var0 = var1 i/ var0;\n            \n            label_1A2C:\n            \n                if (var0 i< 0x00) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = keccak256(memory[0x01a0:0x01a0 + memory[0x0180:0x01a0]]);\n                memory[0xc0:0xe0] = 0x0a;\n                storage[keccak256(memory[0xc0:0x0100])] = var0;\n                var0 = memory[0x0160:0x0180];\n                var1 = 0x0180;\n                var2 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n                var3 = 0x00;\n                var4 = memory[var1:var1 + 0x20];\n            \n                if (var4 i> 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp35 = var3;\n                var3 = var4;\n            \n                if (var3 i< temp35) { revert(memory[0x00:0x00]); }\n            \n                log(memory[0x00:0x00], [0xd8dd23b660d1a2cd022ce86c6122d03c591f721b3c2af378ecb404c0b605ddc7, stack[-2] / 0x0100 ** (memory[0x0180:0x01a0] - stack[-1]), stack[-4]]);\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else {\n                var0 = 0x02540be400;\n                var1 = 0x02540be3ff;\n                memory[0x01e0:0x0200] = 0x038d7ea4c68000;\n                var2 = memory[0xa0:0xc0];\n                var temp36 = memory[0x01e0:0x0200];\n                var3 = temp36;\n                var temp37 = memory[0x0160:0x0180];\n                var4 = temp37;\n                var5 = var4 * var3;\n            \n                if (!((var5 i/ var4 == var3) | !var4)) { revert(memory[0x00:0x00]); }\n            \n                var3 = var5 i/ 0x02540be400;\n            \n                if (var3 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n            \n                var temp38 = var2;\n                var2 = var3;\n            \n                if (var2 i< temp38) { revert(memory[0x00:0x00]); }\n            \n                var0 = var2 - var1 i/ var0;\n                goto label_1A2C;\n            }\n        } else if (memory[0x00:0x20] == 0xe005cbbf) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x01a0] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n        \n            if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = keccak256(memory[0x0180:0x0180 + memory[0x0160:0x0180]]);\n            memory[0xc0:0xe0] = 0x0a;\n            var0 = storage[keccak256(memory[0xc0:0x0100])] * 0x02540be400;\n        \n            if (var0 > memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x01e0] = var0;\n            memory[0x01e0:0x0200] = 0x038d7ea4c68000;\n            var0 = memory[0xa0:0xc0];\n            var1 = memory[0x01c0:0x01e0];\n            var2 = memory[0x01e0:0x0200];\n        \n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n            var temp27 = (var1 * 0x02540be400) i/ var2;\n            var1 = temp27;\n        \n            if (var1 i> memory[0x80:0xa0]) { revert(memory[0x00:0x00]); }\n        \n            var temp28 = var0;\n            var0 = var1;\n        \n            if (var0 i< temp28) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = var0;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x86d1e02b) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x0b] = memory[0x0140:0x0160];\n            log(memory[0x00:0x00], [0x12ad2958c2383ce31dd51da097e673d81de88c202731500406f3afc70a8cf170, memory[0x0140:0x0160]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0xa9059cbb) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x05;\n            var0 = keccak256(memory[0xc0:0x0100]);\n        \n            if (storage[var0] < memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n        \n            var temp24 = var0;\n            storage[temp24] = storage[temp24] - memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x05;\n            var temp25 = keccak256(memory[0xc0:0x0100]);\n            var0 = temp25;\n        \n            if (storage[var0] + memory[0x0160:0x0180] < storage[var0]) { revert(memory[0x00:0x00]); }\n        \n            var temp26 = var0;\n            storage[temp26] = storage[temp26] + memory[0x0160:0x0180];\n            memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n            log(memory[0x0180:0x01a0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, memory[0x0140:0x0160]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x23b872dd) {\n            memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x05;\n            var0 = keccak256(memory[0xc0:0x0100]);\n        \n            if (storage[var0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            var temp19 = var0;\n            storage[temp19] = storage[temp19] - memory[0x0180:0x01a0];\n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = 0x05;\n            var temp20 = keccak256(memory[0xc0:0x0100]);\n            var0 = temp20;\n        \n            if (storage[var0] + memory[0x0180:0x01a0] < storage[var0]) { revert(memory[0x00:0x00]); }\n        \n            var temp21 = var0;\n            storage[temp21] = storage[temp21] + memory[0x0180:0x01a0];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x06;\n            var temp22 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = temp22;\n            var0 = keccak256(memory[0xc0:0x0100]);\n        \n            if (storage[var0] < memory[0x0180:0x01a0]) { revert(memory[0x00:0x00]); }\n        \n            var temp23 = var0;\n            storage[temp23] = storage[temp23] - memory[0x0180:0x01a0];\n            memory[0x01a0:0x01c0] = memory[0x0180:0x01a0];\n            log(memory[0x01a0:0x01c0], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x095ea7b3) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var temp17 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x06;\n            var temp18 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = temp18;\n            storage[keccak256(memory[0xc0:0x0100])] = temp17;\n            memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n            log(memory[0x0180:0x01a0], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, msg.sender]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] != 0x06fdde03) {\n            if (memory[0x00:0x20] != 0x95d89b41) {\n                if (memory[0x00:0x20] != 0x8da5cb5b) {\n                    if (memory[0x00:0x20] != 0x313ce567) {\n                        if (memory[0x00:0x20] != 0x18160ddd) {\n                            if (memory[0x00:0x20] == 0x70a08231) {\n                                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                memory[0xc0:0xe0] = 0x05;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] == 0xdd62ed3e) {\n                                memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x24:0x44];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                memory[0xc0:0xe0] = 0x06;\n                                var temp0 = keccak256(memory[0xc0:0x0100]);\n                                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                memory[0xc0:0xe0] = temp0;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] == 0x4999eb8f) {\n                                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                memory[0xc0:0xe0] = 0x07;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] == 0x51ecd2fa) {\n                                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                var var0 = msg.data[0x04:0x24];\n                            \n                                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                memory[0xc0:0xe0] = 0x08;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] == 0x752708fb) {\n                                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                            \n                                if (msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x0160:0x01a0] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x40];\n                            \n                                if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x20) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0xe0:0x0100] = keccak256(memory[0x0180:0x0180 + memory[0x0160:0x0180]]);\n                                memory[0xc0:0xe0] = 0x09;\n                                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                return memory[0x00:0x20];\n                            } else if (memory[0x00:0x20] != 0x2bc51c6d) { revert(memory[0x00:0x00]); }\n                            else if (!msg.value) {\n                                memory[0x00:0x20] = storage[0x0b];\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x04];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x03];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    memory[0x00:0x20] = storage[0x02];\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = 0x01;\n                memory[0xc0:0xe0] = var0;\n                var var1 = keccak256(memory[0xc0:0xe0]);\n                var var2 = 0x0180;\n                var temp1 = storage[var1] + 0x20;\n                var var3 = temp1;\n                var var4 = 0x0120;\n                memory[var4:var4 + 0x20] = 0x00;\n                var var5 = 0x02;\n            \n                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_1FA9; }\n            \n            label_1FAD:\n                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                var temp2 = var4;\n                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                memory[temp2:temp2 + 0x20] = temp3;\n            \n                if (var5 == temp3) { goto label_1FCF; }\n            \n                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_1FAD; }\n            \n            label_1FA9:\n            \n            label_1FCF:\n                var temp4 = memory[0x0180:0x01a0];\n                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                var1 = 0x01e0;\n                var temp5 = memory[0x0180:0x01a0];\n                memory[var1:var1 + 0x20] = temp5;\n                var2 = temp5 + 0x06;\n            \n                if (memory[0x01e0:0x0200] > var0) { goto label_2001; }\n            \n            label_2005:\n                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                var temp6 = var1;\n                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                memory[temp6:temp6 + 0x20] = temp7;\n            \n                if (var2 == temp7) { goto label_2021; }\n            \n                if (memory[0x01e0:0x0200] <= var0) { goto label_2005; }\n            \n            label_2001:\n            \n            label_2021:\n                memory[0x0160:0x0180] = 0x20;\n                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = 0x00;\n            memory[0xc0:0xe0] = var0;\n            var1 = keccak256(memory[0xc0:0xe0]);\n            var2 = 0x0180;\n            var temp9 = storage[var1] + 0x20;\n            var3 = temp9;\n            var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var5 = 0x02;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_1EC6; }\n        \n        label_1ECA:\n            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n            var temp10 = var4;\n            var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n            memory[temp10:temp10 + 0x20] = temp11;\n        \n            if (var5 == temp11) { goto label_1EEC; }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_1ECA; }\n        \n        label_1EC6:\n        \n        label_1EEC:\n            var temp12 = memory[0x0180:0x01a0];\n            var0 = (temp12 + 0x1f) - temp12 - 0x01 % 0x20;\n            var1 = 0x01e0;\n            var temp13 = memory[0x0180:0x01a0];\n            memory[var1:var1 + 0x20] = temp13;\n            var2 = temp13 + 0x20;\n        \n            if (memory[0x01e0:0x0200] > var0) { goto label_1F1E; }\n        \n        label_1F22:\n            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n            var temp14 = var1;\n            var temp15 = memory[temp14:temp14 + 0x20] + 0x01;\n            memory[temp14:temp14 + 0x20] = temp15;\n        \n            if (var2 == temp15) { goto label_1F3E; }\n        \n            if (memory[0x01e0:0x0200] <= var0) { goto label_1F22; }\n        \n        label_1F1E:\n        \n        label_1F3E:\n            memory[0x0160:0x0180] = 0x20;\n            var temp16 = memory[0x0180:0x01a0] + 0x40;\n            return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 30.961371660232544,
	"usage": {
		"completion_tokens": 446,
		"prompt_tokens": 13226,
		"total_tokens": 13672
	}
}