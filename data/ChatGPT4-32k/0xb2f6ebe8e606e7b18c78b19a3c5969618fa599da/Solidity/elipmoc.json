{
	"address": "0xb2f6ebe8e606e7b18c78b19a3c5969618fa599da",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code based on the decompiled code provided:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\ncontract TokenSale {\n    uint256 private _raisedAmount = 0;\n    address private _owner;\n    address private _token;\n    uint8 private _initialized = 0;\n\n    event BoughtTokens(address, uint256);\n\n    function isActive() public pure returns (bool) {\n        return true;\n    }\n\n    function initialTokens() public pure returns (uint256) {\n        return 0x1cf389cd46047d03000000;\n    }\n\n    function tokensAvailable() public pure returns (uint256) {\n        return 0x623;\n    }\n\n    function RATE() public pure returns (uint256) {\n        return 2200;\n    }\n\n    function goalReached() public view returns (bool) {\n        return _raisedAmount >= 0x35e7b9aa13510d80000;\n    }\n\n    function initialize() public {\n        require(msg.sender == _owner);\n        require(_initialized == 0);\n        _initialized = 1;\n    }\n\n    function destroy() public {\n        require(msg.sender == _owner);\n        selfdestruct(_owner);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function START() public pure returns (uint256) {\n        return 0x59ae4b70;\n    }\n\n    function DAYS() public pure returns (uint256) {\n        return 7;\n    }\n\n    function raisedAmount() public view returns (uint256) {\n        return _raisedAmount;\n    }\n\n    function buyTokens() public payable {\n        emit BoughtTokens(msg.sender, msg.value * 2200);\n        _raisedAmount += msg.value;\n    }\n\n    function CAP() public pure returns (uint256) {\n        return 15910;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner);\n        require(newOwner != address(0));\n        _owner = newOwner;\n    }\n\n    function token() public view returns (address) {\n        return _token;\n    }\n}\n```\n\nPlease note that some functions like `_SafeAdd` and the private functions `0x3ad`, `0x5a6`, `0x623` were omitted because they are called internally and their actual implementation couldn't be inferred from the decompiled code provided. The function `__function_selector__` was also omitted since it's not originally present in the Solidity code and its use in this context is unclear.",
				"role": "assistant"
			}
		}
	],
	"created": 1701466199,
	"id": "chatcmpl-8R5N9w6JcwBjGesCs0hR5laXRmFRJ",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 05:01 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _raisedAmount; // STORAGE[0x2]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _token; // STORAGE[0x1] bytes 0 to 19\nuint8 _initialized; // STORAGE[0x1] bytes 20 to 20\n\n// Events\nBoughtTokens(address, uint256);\n\nfunction isActive() public nonPayable { \n    v0 = 0x5a6();\n    return v0;\n}\n\nfunction initialTokens() public nonPayable { \n    return 0x1cf389cd46047d03000000;\n}\n\nfunction tokensAvailable() public nonPayable { \n    v0 = 0x623();\n    return v0;\n}\n\nfunction RATE() public nonPayable { \n    return 2200;\n}\n\nfunction goalReached() public nonPayable { \n    return _raisedAmount >= 0x35e7b9aa13510d80000;\n}\n\nfunction initialize() public nonPayable { \n    require(msg.sender == _owner);\n    require(_initialized == 0);\n    v0 = 0x623();\n    require(v0 == 0x1cf389cd46047d03000000);\n    _initialized = 1;\n}\n\nfunction destroy() public nonPayable { \n    require(msg.sender == _owner);\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v0, v1 = _token.balanceOf(address(this)).gas(msg.gas - 710);\n    require(v0);\n    assert(v1 > 0);\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v2, v3 = _token.transfer(_owner, v1).gas(msg.gas - 710);\n    require(v2);\n    selfdestruct(_owner);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction START() public nonPayable { \n    return 0x59ae4b70;\n}\n\nfunction DAYS() public nonPayable { \n    return 7;\n}\n\nfunction raisedAmount() public nonPayable { \n    return _raisedAmount;\n}\n\nfunction buyTokens() public payable { \n    0x3ad();\n}\n\nfunction CAP() public nonPayable { \n    return 15910;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    _owner = varg0;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\nfunction 0x3ad() private { \n    v0 = 0x5a6();\n    assert(v0);\n    v1 = v2 = msg.value == 0;\n    if (msg.value != 0) {\n        assert(msg.value);\n        v1 = msg.value * 2200 / msg.value == 2200;\n    }\n    assert(v1);\n    emit BoughtTokens(msg.sender, msg.value * 2200);\n    v3 = _SafeAdd(msg.value, _raisedAmount);\n    _raisedAmount = v3;\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v4, v5 = _token.transfer(msg.sender, msg.value * 2200).gas(msg.gas - 710);\n    require(v4);\n    v6 = _owner.call().value(msg.value).gas(!msg.value * 2300);\n    require(v6);\n    return ;\n}\n\nfunction 0x5a6() private { \n    v0 = v1 = _initialized == 1;\n    if (v1) {\n        v0 = v2 = block.timestamp >= 0x59ae4b70;\n    }\n    if (v0) {\n        v3 = _SafeAdd(0x93a80, 0x59ae4b70);\n        v0 = v4 = block.timestamp <= v3;\n    }\n    if (v0) {\n        v0 = v5 = _raisedAmount >= 0x35e7b9aa13510d80000 == 0;\n    }\n    return v0;\n}\n\nfunction 0x623() private { \n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v0, v1 = _token.balanceOf(address(this)).gas(msg.gas - 710);\n    require(v0);\n    return v1;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction initialized() public nonPayable { \n    return _initialized;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x158ef93e == function_selector) {\n            initialized();\n        } else if (0x22f3e2d4 == function_selector) {\n            isActive();\n        } else if (0x50bfeadc == function_selector) {\n            initialTokens();\n        } else if (0x60659a92 == function_selector) {\n            tokensAvailable();\n        } else if (0x664e9704 == function_selector) {\n            RATE();\n        } else if (0x7d3d6522 == function_selector) {\n            goalReached();\n        } else if (0x8129fc1c == function_selector) {\n            initialize();\n        } else if (0x83197ef0 == function_selector) {\n            destroy();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xba9a061a == function_selector) {\n            START();\n        } else if (0xc549e6b9 == function_selector) {\n            DAYS();\n        } else if (0xc59ee1dc == function_selector) {\n            raisedAmount();\n        } else if (0xd0febe4c == function_selector) {\n            buyTokens();\n        } else if (0xec81b483 == function_selector) {\n            CAP();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfc0c546a == function_selector) {\n            token();\n        }\n    }\n    0x3ad();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 05:01 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _raisedAmount; // STORAGE[0x2]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _token; // STORAGE[0x1] bytes 0 to 19\nuint8 _initialized; // STORAGE[0x1] bytes 20 to 20\n\n// Events\nBoughtTokens(address, uint256);\n\nfunction isActive() public nonPayable { \n    v0 = 0x5a6();\n    return v0;\n}\n\nfunction initialTokens() public nonPayable { \n    return 0x1cf389cd46047d03000000;\n}\n\nfunction tokensAvailable() public nonPayable { \n    v0 = 0x623();\n    return v0;\n}\n\nfunction RATE() public nonPayable { \n    return 2200;\n}\n\nfunction goalReached() public nonPayable { \n    return _raisedAmount >= 0x35e7b9aa13510d80000;\n}\n\nfunction initialize() public nonPayable { \n    require(msg.sender == _owner);\n    require(_initialized == 0);\n    v0 = 0x623();\n    require(v0 == 0x1cf389cd46047d03000000);\n    _initialized = 1;\n}\n\nfunction destroy() public nonPayable { \n    require(msg.sender == _owner);\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v0, v1 = _token.balanceOf(address(this)).gas(msg.gas - 710);\n    require(v0);\n    assert(v1 > 0);\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v2, v3 = _token.transfer(_owner, v1).gas(msg.gas - 710);\n    require(v2);\n    selfdestruct(_owner);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction START() public nonPayable { \n    return 0x59ae4b70;\n}\n\nfunction DAYS() public nonPayable { \n    return 7;\n}\n\nfunction raisedAmount() public nonPayable { \n    return _raisedAmount;\n}\n\nfunction buyTokens() public payable { \n    0x3ad();\n}\n\nfunction CAP() public nonPayable { \n    return 15910;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    _owner = varg0;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\nfunction 0x3ad() private { \n    v0 = 0x5a6();\n    assert(v0);\n    v1 = v2 = msg.value == 0;\n    if (msg.value != 0) {\n        assert(msg.value);\n        v1 = msg.value * 2200 / msg.value == 2200;\n    }\n    assert(v1);\n    emit BoughtTokens(msg.sender, msg.value * 2200);\n    v3 = _SafeAdd(msg.value, _raisedAmount);\n    _raisedAmount = v3;\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v4, v5 = _token.transfer(msg.sender, msg.value * 2200).gas(msg.gas - 710);\n    require(v4);\n    v6 = _owner.call().value(msg.value).gas(!msg.value * 2300);\n    require(v6);\n    return ;\n}\n\nfunction 0x5a6() private { \n    v0 = v1 = _initialized == 1;\n    if (v1) {\n        v0 = v2 = block.timestamp >= 0x59ae4b70;\n    }\n    if (v0) {\n        v3 = _SafeAdd(0x93a80, 0x59ae4b70);\n        v0 = v4 = block.timestamp <= v3;\n    }\n    if (v0) {\n        v0 = v5 = _raisedAmount >= 0x35e7b9aa13510d80000 == 0;\n    }\n    return v0;\n}\n\nfunction 0x623() private { \n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v0, v1 = _token.balanceOf(address(this)).gas(msg.gas - 710);\n    require(v0);\n    return v1;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction initialized() public nonPayable { \n    return _initialized;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x158ef93e == function_selector) {\n            initialized();\n        } else if (0x22f3e2d4 == function_selector) {\n            isActive();\n        } else if (0x50bfeadc == function_selector) {\n            initialTokens();\n        } else if (0x60659a92 == function_selector) {\n            tokensAvailable();\n        } else if (0x664e9704 == function_selector) {\n            RATE();\n        } else if (0x7d3d6522 == function_selector) {\n            goalReached();\n        } else if (0x8129fc1c == function_selector) {\n            initialize();\n        } else if (0x83197ef0 == function_selector) {\n            destroy();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xba9a061a == function_selector) {\n            START();\n        } else if (0xc549e6b9 == function_selector) {\n            DAYS();\n        } else if (0xc59ee1dc == function_selector) {\n            raisedAmount();\n        } else if (0xd0febe4c == function_selector) {\n            buyTokens();\n        } else if (0xec81b483 == function_selector) {\n            CAP();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfc0c546a == function_selector) {\n            token();\n        }\n    }\n    0x3ad();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 05:01 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _raisedAmount; // STORAGE[0x2]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\naddress _token; // STORAGE[0x1] bytes 0 to 19\nuint8 _initialized; // STORAGE[0x1] bytes 20 to 20\n\n// Events\nBoughtTokens(address, uint256);\n\nfunction isActive() public nonPayable { \n    v0 = 0x5a6();\n    return v0;\n}\n\nfunction initialTokens() public nonPayable { \n    return 0x1cf389cd46047d03000000;\n}\n\nfunction tokensAvailable() public nonPayable { \n    v0 = 0x623();\n    return v0;\n}\n\nfunction RATE() public nonPayable { \n    return 2200;\n}\n\nfunction goalReached() public nonPayable { \n    return _raisedAmount >= 0x35e7b9aa13510d80000;\n}\n\nfunction initialize() public nonPayable { \n    require(msg.sender == _owner);\n    require(_initialized == 0);\n    v0 = 0x623();\n    require(v0 == 0x1cf389cd46047d03000000);\n    _initialized = 1;\n}\n\nfunction destroy() public nonPayable { \n    require(msg.sender == _owner);\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v0, v1 = _token.balanceOf(address(this)).gas(msg.gas - 710);\n    require(v0);\n    assert(v1 > 0);\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v2, v3 = _token.transfer(_owner, v1).gas(msg.gas - 710);\n    require(v2);\n    selfdestruct(_owner);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction START() public nonPayable { \n    return 0x59ae4b70;\n}\n\nfunction DAYS() public nonPayable { \n    return 7;\n}\n\nfunction raisedAmount() public nonPayable { \n    return _raisedAmount;\n}\n\nfunction buyTokens() public payable { \n    0x3ad();\n}\n\nfunction CAP() public nonPayable { \n    return 15910;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    _owner = varg0;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\nfunction 0x3ad() private { \n    v0 = 0x5a6();\n    assert(v0);\n    v1 = v2 = msg.value == 0;\n    if (msg.value != 0) {\n        assert(msg.value);\n        v1 = msg.value * 2200 / msg.value == 2200;\n    }\n    assert(v1);\n    emit BoughtTokens(msg.sender, msg.value * 2200);\n    v3 = _SafeAdd(msg.value, _raisedAmount);\n    _raisedAmount = v3;\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v4, v5 = _token.transfer(msg.sender, msg.value * 2200).gas(msg.gas - 710);\n    require(v4);\n    v6 = _owner.call().value(msg.value).gas(!msg.value * 2300);\n    require(v6);\n    return ;\n}\n\nfunction 0x5a6() private { \n    v0 = v1 = _initialized == 1;\n    if (v1) {\n        v0 = v2 = block.timestamp >= 0x59ae4b70;\n    }\n    if (v0) {\n        v3 = _SafeAdd(0x93a80, 0x59ae4b70);\n        v0 = v4 = block.timestamp <= v3;\n    }\n    if (v0) {\n        v0 = v5 = _raisedAmount >= 0x35e7b9aa13510d80000 == 0;\n    }\n    return v0;\n}\n\nfunction 0x623() private { \n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v0, v1 = _token.balanceOf(address(this)).gas(msg.gas - 710);\n    require(v0);\n    return v1;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction initialized() public nonPayable { \n    return _initialized;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x158ef93e == function_selector) {\n            initialized();\n        } else if (0x22f3e2d4 == function_selector) {\n            isActive();\n        } else if (0x50bfeadc == function_selector) {\n            initialTokens();\n        } else if (0x60659a92 == function_selector) {\n            tokensAvailable();\n        } else if (0x664e9704 == function_selector) {\n            RATE();\n        } else if (0x7d3d6522 == function_selector) {\n            goalReached();\n        } else if (0x8129fc1c == function_selector) {\n            initialize();\n        } else if (0x83197ef0 == function_selector) {\n            destroy();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xba9a061a == function_selector) {\n            START();\n        } else if (0xc549e6b9 == function_selector) {\n            DAYS();\n        } else if (0xc59ee1dc == function_selector) {\n            raisedAmount();\n        } else if (0xd0febe4c == function_selector) {\n            buyTokens();\n        } else if (0xec81b483 == function_selector) {\n            CAP();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfc0c546a == function_selector) {\n            token();\n        }\n    }\n    0x3ad();\n}\n.",
	"status": "1",
	"time_cost": 18.677199840545654,
	"usage": {
		"completion_tokens": 542,
		"prompt_tokens": 1489,
		"total_tokens": 2031
	}
}