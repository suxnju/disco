{
	"address": "0x37f387fe48c9569500b514a1c7e1f6b04be8d421",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity code equivalent to the decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n        \n    mapping (uint256 => uint256) private _balanceOf;\n    uint256 private _totalSupply;\n    mapping (uint256 => uint256) private _allowance;\n    uint256[] private _name;\n    uint256[] private _symbol;\n    uint256 private _iNITIAL_SUPPLY;\n    uint256 private _eth2qiuRate;\n    uint8 private _decimals;\n    uint8 private _exchangeForETH;\n    address private _owner;\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event ExchangeForQIU(address indexed from, address indexed to, uint256 value, uint256 amount);\n    event ExchangeForETH(address indexed from, address indexed to, uint256 value, uint256 amount);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function name() public view returns (string memory) {\n        return string(abi.encodePacked(_name));\n    }\n    \n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n    \n    function originTransfer(address to, uint256 value) public returns (bool) {\n        require(to != address(0));\n        require(value <= _balanceOf[tx.origin]);\n        _balanceOf[tx.origin] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(tx.origin, to, value);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(to != address(0));\n        require(value <= _balanceOf[from]);\n        require(value <= _allowance[msg.sender]);\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        _allowance[msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n    \n    function INITIAL_SUPPLY() public view returns (uint256) {\n        return _iNITIAL_SUPPLY;\n    }\n    \n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n    \n    function exchangeForQIU() public payable {\n        uint256 amount = msg.value * _eth2qiuRate / 1 ether;\n        require(amount <= _balanceOf[address(this)]);\n        _balanceOf[address(this)] -= amount;\n        _balanceOf[msg.sender] += amount;\n        emit ExchangeForQIU(address(this), msg.sender, amount, msg.value);\n    }\n    \n    function ownerTransferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(msg.sender == _owner);\n        require(to != address(0));\n        require(value <= _balanceOf[from]);\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n    \n    function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool) {\n        uint256 oldValue = _allowance[spender];\n        if (oldValue >= subtractedValue) {\n            _allowance[spender] -= subtractedValue;\n        } else {\n            _allowance[spender] = 0;\n        }\n        emit Approval(msg.sender, spender, _allowance[spender]);\n        return true;\n    }\n    \n    function eth2qiuRate() public view returns (uint256) {\n        return _eth2qiuRate;\n    }\n    \n    function getETHBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n    \n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n    \n    function getOwner() public view returns (address) {\n        return _owner;\n    }\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n    \n    function symbol() public view returns (string memory) {\n        return string(abi.encodePacked(_symbol));\n    }\n    \n    function transfer(address to, uint256 value) public returns (bool) {\n        require(to != address(0));\n        require(value <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n    \n    function exchangeForETH(uint256 value) public {\n        require(_exchangeForETH == 1);\n        require(address(this).balance >= value * 1 ether / _eth2qiuRate);\n        _balanceOf[address(this)] += value;\n        _balanceOf[msg.sender] -= value;\n        msg.sender.transfer(value * 1 ether / _eth2qiuRate);\n        emit ExchangeForETH(address(this), msg.sender, value, value * 1 ether / _eth2qiuRate);\n    }\n    \n    function increaseApproval(address spender, uint256 addedValue) public returns (bool) {\n        _allowance[spender] += addedValue;\n        emit Approval(msg.sender, spender, _allowance[spender]);\n        return true;\n    }\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[spender];\n    }\n    \n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner);\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n```\n\nPlease note that this contract doesn't exactly match the original because the original contract uses low-level operations and assembly to manipulate memory and storage. Also, it's not possible to directly translate the `__function_selector__` function from the decompiled code into Solidity. So, I have omitted it in the translated contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701458314,
	"id": "chatcmpl-8R3Jy63UrKHStndE5s9KY2NTdQ21e",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 12:17 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x4]\nuint256[] _symbol; // STORAGE[0x5]\nuint256 _iNITIAL_SUPPLY; // STORAGE[0x7]\nuint256 _eth2qiuRate; // STORAGE[0x8]\nuint8 _decimals; // STORAGE[0x6] bytes 0 to 0\nuint8 _exchangeForETH; // STORAGE[0x8] bytes 0 to 0\naddress _owner; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nExchangeForQIU(address, address, uint256, uint256);\nExchangeForETH(address, address, uint256, uint256);\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction originTransfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[address(tx.origin)]);\n    assert(varg1 <= _balanceOf[address(tx.origin)]);\n    _balanceOf[address(tx.origin)] = _balanceOf[address(tx.origin)] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(address(tx.origin), varg0, varg1);\n    return 1;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return _iNITIAL_SUPPLY;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction exchangeForQIU() public payable { \n    require(msg.value * _eth2qiuRate / 0xde0b6b3a7640000 <= _balanceOf[address(this)]);\n    assert(msg.value * _eth2qiuRate / 0xde0b6b3a7640000 <= _balanceOf[address(this)]);\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value * _eth2qiuRate / 0xde0b6b3a7640000;\n    assert(_balanceOf[msg.sender] + msg.value * _eth2qiuRate / 0xde0b6b3a7640000 >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value * _eth2qiuRate / 0xde0b6b3a7640000;\n    emit ExchangeForQIU(address(this), msg.sender, msg.value * _eth2qiuRate / 0xde0b6b3a7640000, msg.value);\n    return 1;\n}\n\nfunction ownerTransferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(address(tx.origin) == _owner);\n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction eth2qiuRate() public nonPayable { \n    return _eth2qiuRate;\n}\n\nfunction getETHBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction getOwner() public nonPayable { \n    return _owner;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction exchangeForETH(uint256 varg0) public nonPayable { \n    assert(_exchangeForETH);\n    require((address(this)).balance >= varg0 * 0xde0b6b3a7640000 / _eth2qiuRate);\n    assert(_balanceOf[address(this)] + varg0 >= _balanceOf[address(this)]);\n    _balanceOf[address(this)] = _balanceOf[address(this)] + varg0;\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = msg.sender.call().value(varg0 * 0xde0b6b3a7640000 / _eth2qiuRate).gas(!(varg0 * 0xde0b6b3a7640000 / _eth2qiuRate) * 2300);\n    require(v0);\n    emit ExchangeForETH(address(this), msg.sender, varg0, varg0 * 0xde0b6b3a7640000 / _eth2qiuRate);\n    return 1;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1d32ab99 == function_selector) {\n            originTransfer(address,uint256);\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2ff2e9dc == function_selector) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x379ba2ab == function_selector) {\n            exchangeForQIU();\n        } else if (0x53043490 == function_selector) {\n            ownerTransferFrom(address,address,uint256);\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x661b6dae == function_selector) {\n            eth2qiuRate();\n        } else if (0x6e947298 == function_selector) {\n            getETHBalance();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x893d20e8 == function_selector) {\n            getOwner();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xae7b3825 == function_selector) {\n            exchangeForETH(uint256);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 12:17 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x4]\nuint256[] _symbol; // STORAGE[0x5]\nuint256 _iNITIAL_SUPPLY; // STORAGE[0x7]\nuint256 _eth2qiuRate; // STORAGE[0x8]\nuint8 _decimals; // STORAGE[0x6] bytes 0 to 0\nuint8 _exchangeForETH; // STORAGE[0x8] bytes 0 to 0\naddress _owner; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nExchangeForQIU(address, address, uint256, uint256);\nExchangeForETH(address, address, uint256, uint256);\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction originTransfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[address(tx.origin)]);\n    assert(varg1 <= _balanceOf[address(tx.origin)]);\n    _balanceOf[address(tx.origin)] = _balanceOf[address(tx.origin)] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(address(tx.origin), varg0, varg1);\n    return 1;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return _iNITIAL_SUPPLY;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction exchangeForQIU() public payable { \n    require(msg.value * _eth2qiuRate / 0xde0b6b3a7640000 <= _balanceOf[address(this)]);\n    assert(msg.value * _eth2qiuRate / 0xde0b6b3a7640000 <= _balanceOf[address(this)]);\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value * _eth2qiuRate / 0xde0b6b3a7640000;\n    assert(_balanceOf[msg.sender] + msg.value * _eth2qiuRate / 0xde0b6b3a7640000 >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value * _eth2qiuRate / 0xde0b6b3a7640000;\n    emit ExchangeForQIU(address(this), msg.sender, msg.value * _eth2qiuRate / 0xde0b6b3a7640000, msg.value);\n    return 1;\n}\n\nfunction ownerTransferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(address(tx.origin) == _owner);\n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction eth2qiuRate() public nonPayable { \n    return _eth2qiuRate;\n}\n\nfunction getETHBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction getOwner() public nonPayable { \n    return _owner;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction exchangeForETH(uint256 varg0) public nonPayable { \n    assert(_exchangeForETH);\n    require((address(this)).balance >= varg0 * 0xde0b6b3a7640000 / _eth2qiuRate);\n    assert(_balanceOf[address(this)] + varg0 >= _balanceOf[address(this)]);\n    _balanceOf[address(this)] = _balanceOf[address(this)] + varg0;\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = msg.sender.call().value(varg0 * 0xde0b6b3a7640000 / _eth2qiuRate).gas(!(varg0 * 0xde0b6b3a7640000 / _eth2qiuRate) * 2300);\n    require(v0);\n    emit ExchangeForETH(address(this), msg.sender, varg0, varg0 * 0xde0b6b3a7640000 / _eth2qiuRate);\n    return 1;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1d32ab99 == function_selector) {\n            originTransfer(address,uint256);\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2ff2e9dc == function_selector) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x379ba2ab == function_selector) {\n            exchangeForQIU();\n        } else if (0x53043490 == function_selector) {\n            ownerTransferFrom(address,address,uint256);\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x661b6dae == function_selector) {\n            eth2qiuRate();\n        } else if (0x6e947298 == function_selector) {\n            getETHBalance();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x893d20e8 == function_selector) {\n            getOwner();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xae7b3825 == function_selector) {\n            exchangeForETH(uint256);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 12:17 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x4]\nuint256[] _symbol; // STORAGE[0x5]\nuint256 _iNITIAL_SUPPLY; // STORAGE[0x7]\nuint256 _eth2qiuRate; // STORAGE[0x8]\nuint8 _decimals; // STORAGE[0x6] bytes 0 to 0\nuint8 _exchangeForETH; // STORAGE[0x8] bytes 0 to 0\naddress _owner; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nExchangeForQIU(address, address, uint256, uint256);\nExchangeForETH(address, address, uint256, uint256);\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction originTransfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[address(tx.origin)]);\n    assert(varg1 <= _balanceOf[address(tx.origin)]);\n    _balanceOf[address(tx.origin)] = _balanceOf[address(tx.origin)] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(address(tx.origin), varg0, varg1);\n    return 1;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return _iNITIAL_SUPPLY;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction exchangeForQIU() public payable { \n    require(msg.value * _eth2qiuRate / 0xde0b6b3a7640000 <= _balanceOf[address(this)]);\n    assert(msg.value * _eth2qiuRate / 0xde0b6b3a7640000 <= _balanceOf[address(this)]);\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value * _eth2qiuRate / 0xde0b6b3a7640000;\n    assert(_balanceOf[msg.sender] + msg.value * _eth2qiuRate / 0xde0b6b3a7640000 >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value * _eth2qiuRate / 0xde0b6b3a7640000;\n    emit ExchangeForQIU(address(this), msg.sender, msg.value * _eth2qiuRate / 0xde0b6b3a7640000, msg.value);\n    return 1;\n}\n\nfunction ownerTransferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(address(tx.origin) == _owner);\n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction eth2qiuRate() public nonPayable { \n    return _eth2qiuRate;\n}\n\nfunction getETHBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction getOwner() public nonPayable { \n    return _owner;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction exchangeForETH(uint256 varg0) public nonPayable { \n    assert(_exchangeForETH);\n    require((address(this)).balance >= varg0 * 0xde0b6b3a7640000 / _eth2qiuRate);\n    assert(_balanceOf[address(this)] + varg0 >= _balanceOf[address(this)]);\n    _balanceOf[address(this)] = _balanceOf[address(this)] + varg0;\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = msg.sender.call().value(varg0 * 0xde0b6b3a7640000 / _eth2qiuRate).gas(!(varg0 * 0xde0b6b3a7640000 / _eth2qiuRate) * 2300);\n    require(v0);\n    emit ExchangeForETH(address(this), msg.sender, varg0, varg0 * 0xde0b6b3a7640000 / _eth2qiuRate);\n    return 1;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1d32ab99 == function_selector) {\n            originTransfer(address,uint256);\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2ff2e9dc == function_selector) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x379ba2ab == function_selector) {\n            exchangeForQIU();\n        } else if (0x53043490 == function_selector) {\n            ownerTransferFrom(address,address,uint256);\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x661b6dae == function_selector) {\n            eth2qiuRate();\n        } else if (0x6e947298 == function_selector) {\n            getETHBalance();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x893d20e8 == function_selector) {\n            getOwner();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xae7b3825 == function_selector) {\n            exchangeForETH(uint256);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 79.17656755447388,
	"usage": {
		"completion_tokens": 1285,
		"prompt_tokens": 2937,
		"total_tokens": 4222
	}
}