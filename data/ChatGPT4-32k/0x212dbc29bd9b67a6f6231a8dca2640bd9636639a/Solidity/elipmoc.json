{
	"address": "0x212dbc29bd9b67a6f6231a8dca2640bd9636639a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity version of the decompiled code. The structure of the code has been largely preserved, but the syntax and some language constructs have been adjusted to be valid Solidity:\n\n```solidity\npragma solidity ^0.8.4;\n\ncontract MyContract {\n    uint256[] private _name; \n    uint256[] private _symbol;\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowanceEliminate;\n    mapping (address => mapping (address => uint256)) private _allowanceTransfer;\n    uint256 private stor_8;\n    uint256 private stor_9;\n    uint256 private stor_a;\n    uint256 private _sellPrice;\n    uint256 private _buyPrice;\n    address private _owner;\n    uint8 private _decimals;\n\n    event Eliminate(address indexed from, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    function name() public view returns (uint256[] memory) {\n        return _name;\n    }\n\n    function eliminate(uint256 amount) public { \n        require(_balanceOf[msg.sender] >= amount);\n        _balanceOf[msg.sender] -= amount;\n        _totalSupply -= amount;\n        emit Eliminate(msg.sender, amount);\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public { \n        require(amount <= _allowanceTransfer[msg.sender][sender]);\n        _allowanceTransfer[msg.sender][sender] -= amount;\n        _transfer(amount, recipient, sender);\n    }\n\n    function eliminateFrom(address account, uint256 amount) public { \n        require(_balanceOf[account] >= amount);\n        require(amount <= _allowanceEliminate[msg.sender][account]);\n        _balanceOf[account] -= amount;\n        _allowanceEliminate[msg.sender][account] -= amount;\n        _totalSupply -= amount;\n        emit Eliminate(account, amount);\n    }\n\n    function allowanceEliminate(address owner, address spender) public view returns (uint256) { \n        return _allowanceEliminate[spender][owner];\n    }\n\n    function decimals() public view returns (uint8) { \n        return _decimals;\n    }\n\n    function sellPrice() public view returns (uint256) { \n        return _sellPrice;\n    }\n\n    function updatePrice() public { \n        require(_totalSupply > 0);\n        _sellPrice = 10 ** _decimals * (stor_8 * stor_a) / _totalSupply;\n        _buyPrice = 10 ** _decimals * (stor_9 * stor_a) / _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) { \n        return _balanceOf[account];\n    }\n\n    function buyPrice() public view returns (uint256) { \n        return _buyPrice;\n    }\n\n    function approveEliminate(address spender, uint256 amount) public { \n        _allowanceEliminate[spender][msg.sender] = amount;\n    }\n\n    function owner() public view returns (address) { \n        return _owner;\n    }\n\n    function symbol() public view returns (uint256[] memory) { \n        return _symbol;\n    }\n\n    function buy() public payable { \n        require(_buyPrice > 0);\n        _transfer(1000 * msg.value / _buyPrice, msg.sender, address(this));\n    }\n\n    function transfer(address recipient, uint256 amount) public { \n        _transfer(amount, recipient, msg.sender);\n    }\n\n    function allowanceTransfer(address owner, address spender) public view returns (uint256) { \n        return _allowanceTransfer[spender][owner];\n    }\n\n    function sell(uint256 amount) public { \n        require(address(this).balance >= amount * _sellPrice / 1000);\n        _transfer(amount, address(this), msg.sender);\n        payable(msg.sender).transfer(amount * _sellPrice / 1000);\n    }\n\n    function transferOwnership(address newOwner) public { \n        require(_owner == msg.sender);\n        _owner = newOwner;\n    }\n\n    function approveTransfer(address spender, uint256 amount) public { \n        _allowanceTransfer[spender][msg.sender] = amount;\n    }\n\n    function _transfer(uint256 amount, address recipient, address sender) private { \n        require(recipient != address(0));\n        require(_balanceOf[sender] >= amount);\n        require(_balanceOf[recipient] + amount > _balanceOf[recipient]);\n        \n        _balanceOf[sender] -= amount;\n        _balanceOf[recipient] += amount;\n        \n        emit Transfer(sender, recipient, amount);\n        assert(_balanceOf[sender] + _balanceOf[recipient] == _balanceOf[sender] + _balanceOf[recipient]);\n    }\n}\n```\n\nPlease note that this is a simplified version of the contract that may not fully respect the original logic. For example, the `_name` and `_symbol` variables are arrays of integers, which is unusual for a token contract. A typical ERC20 token contract would have these as strings. Additionally, the `buy` and `sell` functions assume that the token has a fixed buy and sell price, which may not be the case in a real-world contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701459258,
	"id": "chatcmpl-8R3ZCBtE6ixlpFhLizxq1ERw2ytsx",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 00:55 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowanceEliminate; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _allowanceTransfer; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 _sellPrice; // STORAGE[0xd]\nuint256 _buyPrice; // STORAGE[0xe]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nEliminate(address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction eliminate(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Eliminate(msg.sender, varg0);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowanceTransfer[msg.sender]);\n    _allowanceTransfer[msg.sender] = _allowanceTransfer[msg.sender] - varg2;\n    0x8dc(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction eliminateFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowanceEliminate[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowanceEliminate[msg.sender] = _allowanceEliminate[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Eliminate(varg0, varg1);\n    return 1;\n}\n\nfunction allowanceEliminate(address varg0, address varg1) public nonPayable { \n    return _allowanceEliminate[varg1];\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction updatePrice() public nonPayable { \n    assert(_totalSupply);\n    _sellPrice = 10 ** _decimals * (stor_8 * stor_a) / _totalSupply;\n    assert(_totalSupply);\n    _buyPrice = 10 ** _decimals * (stor_9 * stor_a) / _totalSupply;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction approveEliminate(address varg0, uint256 varg1) public nonPayable { \n    _allowanceEliminate[varg0] = varg1;\n    return 1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    assert(_buyPrice);\n    0x8dc(1000 * msg.value / _buyPrice, msg.sender, this);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x8dc(varg1, varg0, msg.sender);\n}\n\nfunction allowanceTransfer(address varg0, address varg1) public nonPayable { \n    return _allowanceTransfer[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require((address(this)).balance >= varg0 * _sellPrice / 1000);\n    0x8dc(varg0, this, msg.sender);\n    v0 = msg.sender.call().value(varg0 * _sellPrice / 1000).gas(!(varg0 * _sellPrice / 1000) * 2300);\n    require(v0);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _owner = varg0;\n}\n\nfunction approveTransfer(address varg0, uint256 varg1) public nonPayable { \n    _allowanceTransfer[varg0] = varg1;\n    return 1;\n}\n\nfunction 0x8dc(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    _balanceOf[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v5] + _balanceOf[v4]);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0xe07658b == function_selector) {\n            eliminate(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x23c105a2 == function_selector) {\n            eliminateFrom(address,uint256);\n        } else if (0x2d980646 == function_selector) {\n            allowanceEliminate(address,address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x673a7e28 == function_selector) {\n            updatePrice();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8cc98bc3 == function_selector) {\n            approveEliminate(address,uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb00a0dbf == function_selector) {\n            allowanceTransfer(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfa02c4b7 == function_selector) {\n            approveTransfer(address,uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 00:55 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowanceEliminate; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _allowanceTransfer; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 _sellPrice; // STORAGE[0xd]\nuint256 _buyPrice; // STORAGE[0xe]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nEliminate(address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction eliminate(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Eliminate(msg.sender, varg0);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowanceTransfer[msg.sender]);\n    _allowanceTransfer[msg.sender] = _allowanceTransfer[msg.sender] - varg2;\n    0x8dc(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction eliminateFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowanceEliminate[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowanceEliminate[msg.sender] = _allowanceEliminate[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Eliminate(varg0, varg1);\n    return 1;\n}\n\nfunction allowanceEliminate(address varg0, address varg1) public nonPayable { \n    return _allowanceEliminate[varg1];\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction updatePrice() public nonPayable { \n    assert(_totalSupply);\n    _sellPrice = 10 ** _decimals * (stor_8 * stor_a) / _totalSupply;\n    assert(_totalSupply);\n    _buyPrice = 10 ** _decimals * (stor_9 * stor_a) / _totalSupply;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction approveEliminate(address varg0, uint256 varg1) public nonPayable { \n    _allowanceEliminate[varg0] = varg1;\n    return 1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    assert(_buyPrice);\n    0x8dc(1000 * msg.value / _buyPrice, msg.sender, this);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x8dc(varg1, varg0, msg.sender);\n}\n\nfunction allowanceTransfer(address varg0, address varg1) public nonPayable { \n    return _allowanceTransfer[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require((address(this)).balance >= varg0 * _sellPrice / 1000);\n    0x8dc(varg0, this, msg.sender);\n    v0 = msg.sender.call().value(varg0 * _sellPrice / 1000).gas(!(varg0 * _sellPrice / 1000) * 2300);\n    require(v0);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _owner = varg0;\n}\n\nfunction approveTransfer(address varg0, uint256 varg1) public nonPayable { \n    _allowanceTransfer[varg0] = varg1;\n    return 1;\n}\n\nfunction 0x8dc(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    _balanceOf[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v5] + _balanceOf[v4]);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0xe07658b == function_selector) {\n            eliminate(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x23c105a2 == function_selector) {\n            eliminateFrom(address,uint256);\n        } else if (0x2d980646 == function_selector) {\n            allowanceEliminate(address,address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x673a7e28 == function_selector) {\n            updatePrice();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8cc98bc3 == function_selector) {\n            approveEliminate(address,uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb00a0dbf == function_selector) {\n            allowanceTransfer(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfa02c4b7 == function_selector) {\n            approveTransfer(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 00:55 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowanceEliminate; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _allowanceTransfer; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 _sellPrice; // STORAGE[0xd]\nuint256 _buyPrice; // STORAGE[0xe]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nEliminate(address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction eliminate(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Eliminate(msg.sender, varg0);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowanceTransfer[msg.sender]);\n    _allowanceTransfer[msg.sender] = _allowanceTransfer[msg.sender] - varg2;\n    0x8dc(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction eliminateFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowanceEliminate[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowanceEliminate[msg.sender] = _allowanceEliminate[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Eliminate(varg0, varg1);\n    return 1;\n}\n\nfunction allowanceEliminate(address varg0, address varg1) public nonPayable { \n    return _allowanceEliminate[varg1];\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction updatePrice() public nonPayable { \n    assert(_totalSupply);\n    _sellPrice = 10 ** _decimals * (stor_8 * stor_a) / _totalSupply;\n    assert(_totalSupply);\n    _buyPrice = 10 ** _decimals * (stor_9 * stor_a) / _totalSupply;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction approveEliminate(address varg0, uint256 varg1) public nonPayable { \n    _allowanceEliminate[varg0] = varg1;\n    return 1;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    assert(_buyPrice);\n    0x8dc(1000 * msg.value / _buyPrice, msg.sender, this);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x8dc(varg1, varg0, msg.sender);\n}\n\nfunction allowanceTransfer(address varg0, address varg1) public nonPayable { \n    return _allowanceTransfer[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require((address(this)).balance >= varg0 * _sellPrice / 1000);\n    0x8dc(varg0, this, msg.sender);\n    v0 = msg.sender.call().value(varg0 * _sellPrice / 1000).gas(!(varg0 * _sellPrice / 1000) * 2300);\n    require(v0);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    _owner = varg0;\n}\n\nfunction approveTransfer(address varg0, uint256 varg1) public nonPayable { \n    _allowanceTransfer[varg0] = varg1;\n    return 1;\n}\n\nfunction 0x8dc(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    _balanceOf[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v5] + _balanceOf[v4]);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0xe07658b == function_selector) {\n            eliminate(uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x23c105a2 == function_selector) {\n            eliminateFrom(address,uint256);\n        } else if (0x2d980646 == function_selector) {\n            allowanceEliminate(address,address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x673a7e28 == function_selector) {\n            updatePrice();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8cc98bc3 == function_selector) {\n            approveEliminate(address,uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb00a0dbf == function_selector) {\n            allowanceTransfer(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfa02c4b7 == function_selector) {\n            approveTransfer(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 55.64717245101929,
	"usage": {
		"completion_tokens": 1137,
		"prompt_tokens": 2334,
		"total_tokens": 3471
	}
}