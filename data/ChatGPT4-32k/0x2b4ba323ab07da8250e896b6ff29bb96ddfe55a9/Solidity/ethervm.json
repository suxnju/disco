{
	"address": "0x2b4ba323ab07da8250e896b6ff29bb96ddfe55a9",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Since the given decompiled code is not fully translatable to Solidity due to its low-level nature, I'll provide a simplified version of the contract in Solidity.\n\n```solidity\npragma solidity ^0.6.0;\n\ncontract Contract {\n    mapping(uint => address) public accounts;\n    mapping(address => uint256) public balances;\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function setAccount(uint id, address addr) public {\n        require(msg.sender == owner, \"Only the contract owner can set accounts\");\n        accounts[id] = addr;\n    }\n\n    function setBalance(address addr, uint256 balance) public {\n        require(msg.sender == owner, \"Only the contract owner can set balances\");\n        balances[addr] = balance;\n    }\n\n    function getBalance(address addr) public view returns (uint256) {\n        return balances[addr];\n    }\n\n    function getAccount(uint id) public view returns (address) {\n        return accounts[id];\n    }\n}\n```\n\nThis Solidity contract provides a simple mapping of account IDs to addresses and addresses to balances, as well as functions to get and set those balances. The functions to set balances and accounts are only callable by the contract owner, to mimic the original code's access control.\n\nPlease note that this is a simplification and may not cover all functionality of the given decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700475042,
	"id": "chatcmpl-8MvWkivTmQcA2Fj7J572AzBGPMTc2",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] == 0xfa75d160) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0x00;\n            var0 = 0x01a0;\n            memory[var0:var0 + 0x20] = 0x00;\n            var1 = 0x05;\n            var2 = memory[0x01a0:0x01c0];\n        \n            if (var2 >= 0x05) { revert(memory[0x00:0x00]); }\n        \n        label_00E9:\n            memory[0xc0:0xe0] = 0x02;\n            memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + var2];\n        \n            if (memory[0x0160:0x0180] == 0x00) {\n            label_025D:\n                var temp11 = var0;\n                var temp12 = memory[temp11:temp11 + 0x20] + 0x01;\n                memory[temp11:temp11 + 0x20] = temp12;\n            \n                if (var1 != temp12) {\n                    var2 = memory[0x01a0:0x01c0];\n                \n                    if (var2 < 0x05) { goto label_00E9; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    memory[0x00:0x20] = memory[0x0180:0x01a0];\n                    return memory[0x00:0x20];\n                }\n            } else if (address(memory[0x0160:0x0180]).code.length) {\n                if (address(this) == memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01e0:0x0200] = 0x70a08231;\n                memory[0x0200:0x0220] = memory[0x0140:0x0160];\n                var temp13;\n                temp13, memory[0x0260:0x0280] = address(memory[0x0160:0x0180]).staticcall.gas(msg.gas)(memory[0x01fc:0x0220]);\n            \n                if (!temp13) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01c0:0x01e0] = memory[0x0260:0x0280];\n                var2 = 0x0180;\n                var3 = memory[var2:var2 + 0x20];\n            \n                if (!0x05f5e100) { revert(memory[0x00:0x00]); }\n            \n                var4 = 0x05f5e100;\n            \n                if (memory[0x01c0:0x01e0]) {\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x03;\n                    var temp14 = storage[keccak256(memory[0xc0:0x0100])];\n                    var temp15 = memory[0x01c0:0x01e0];\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x03;\n                \n                    if ((memory[0x01c0:0x01e0] * storage[keccak256(memory[0xc0:0x0100])]) / temp15 != temp14) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x03;\n                \n                    if (memory[var2:var2 + 0x20] + (memory[0x01c0:0x01e0] * storage[keccak256(memory[0xc0:0x0100])]) / var4 < var3) { revert(memory[0x00:0x00]); }\n                \n                label_01E1:\n                \n                    if (!0x05f5e100) { revert(memory[0x00:0x00]); }\n                \n                    var3 = 0x05f5e100;\n                \n                    if (memory[0x01c0:0x01e0]) {\n                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                        memory[0xc0:0xe0] = 0x03;\n                        var temp16 = storage[keccak256(memory[0xc0:0x0100])];\n                        var temp17 = memory[0x01c0:0x01e0];\n                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                        memory[0xc0:0xe0] = 0x03;\n                    \n                        if ((memory[0x01c0:0x01e0] * storage[keccak256(memory[0xc0:0x0100])]) / temp17 != temp16) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                        memory[0xc0:0xe0] = 0x03;\n                        var temp18 = var2;\n                        memory[temp18:temp18 + 0x20] = memory[temp18:temp18 + 0x20] + (memory[0x01c0:0x01e0] * storage[keccak256(memory[0xc0:0x0100])]) / var3;\n                        goto label_025D;\n                    } else {\n                        var4 = 0x00;\n                        var temp19 = var2;\n                        memory[temp19:temp19 + 0x20] = memory[temp19:temp19 + 0x20] + var4 / var3;\n                        goto label_025D;\n                    }\n                } else {\n                    var5 = 0x00;\n                \n                    if (memory[var2:var2 + 0x20] + var5 / var4 >= var3) { goto label_01E1; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0x3d710a9d) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x60:0x80];\n            var1 = msg.data[0x24:0x44];\n        \n            if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n        \n            var temp10 = var0;\n            var0 = var1;\n        \n            if (var0 i< temp10) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n        \n            if (var1 >= 0x05) { revert(memory[0x00:0x00]); }\n        \n            memory[0xc0:0xe0] = 0x02;\n            storage[keccak256(memory[0xc0:0xe0]) + var1] = var0;\n            log(memory[0x00:0x00], [0xa92882985915193a9370218a3a7e82c81fc53c081fbc542aa6766ba82239902d, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x457972de) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n        \n            if (!((0x0f4240 <= memory[0x0160:0x0180]) & (memory[0x0160:0x0180] <= 0x52b7d2dcc80cd2e4000000))) { revert(memory[0x00:0x00]); }\n        \n            var temp9 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x03;\n            storage[keccak256(memory[0xc0:0x0100])] = temp9;\n            log(memory[0x00:0x00], [0x0d86730737b142fc160892fa8a0f2db687a92a0e294d1ad70624cf5acef03b84, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] != 0x06fdde03) {\n            if (memory[0x00:0x20] != 0x8da5cb5b) {\n                if (memory[0x00:0x20] == 0xb1c9f095) {\n                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x60:0x80];\n                    var var1 = msg.data[0x04:0x24];\n                \n                    if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                \n                    var temp0 = var0;\n                    var0 = var1;\n                \n                    if (var0 i< temp0) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x0140:0x0160];\n                \n                    if (var0 >= 0x05) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xc0:0xe0] = 0x02;\n                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + var0];\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] != 0xf1bb1086) { revert(memory[0x00:0x00]); }\n                else {\n                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x03;\n                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                    return memory[0x00:0x20];\n                }\n            } else if (!msg.value) {\n                memory[0x00:0x20] = storage[0x01];\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = 0x00;\n            memory[0xc0:0xe0] = var0;\n            var1 = keccak256(memory[0xc0:0xe0]);\n            var var2 = 0x0180;\n            var temp1 = storage[var1] + 0x20;\n            var var3 = temp1;\n            var var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var var5 = 0x02;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_043D; }\n        \n        label_0441:\n            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n            var temp2 = var4;\n            var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n            memory[temp2:temp2 + 0x20] = temp3;\n        \n            if (var5 == temp3) { goto label_0463; }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0441; }\n        \n        label_043D:\n        \n        label_0463:\n            var temp4 = memory[0x0180:0x01a0];\n            var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n            var1 = 0x01e0;\n            var temp5 = memory[0x0180:0x01a0];\n            memory[var1:var1 + 0x20] = temp5;\n            var2 = temp5 + 0x10;\n        \n            if (memory[0x01e0:0x0200] > var0) { goto label_0495; }\n        \n        label_0499:\n            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n            var temp6 = var1;\n            var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n            memory[temp6:temp6 + 0x20] = temp7;\n        \n            if (var2 == temp7) { goto label_04B5; }\n        \n            if (memory[0x01e0:0x0200] <= var0) { goto label_0499; }\n        \n        label_0495:\n        \n        label_04B5:\n            memory[0x0160:0x0180] = 0x20;\n            var temp8 = memory[0x0180:0x01a0] + 0x40;\n            return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] == 0xfa75d160) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0x00;\n            var0 = 0x01a0;\n            memory[var0:var0 + 0x20] = 0x00;\n            var1 = 0x05;\n            var2 = memory[0x01a0:0x01c0];\n        \n            if (var2 >= 0x05) { revert(memory[0x00:0x00]); }\n        \n        label_00E9:\n            memory[0xc0:0xe0] = 0x02;\n            memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + var2];\n        \n            if (memory[0x0160:0x0180] == 0x00) {\n            label_025D:\n                var temp11 = var0;\n                var temp12 = memory[temp11:temp11 + 0x20] + 0x01;\n                memory[temp11:temp11 + 0x20] = temp12;\n            \n                if (var1 != temp12) {\n                    var2 = memory[0x01a0:0x01c0];\n                \n                    if (var2 < 0x05) { goto label_00E9; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    memory[0x00:0x20] = memory[0x0180:0x01a0];\n                    return memory[0x00:0x20];\n                }\n            } else if (address(memory[0x0160:0x0180]).code.length) {\n                if (address(this) == memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01e0:0x0200] = 0x70a08231;\n                memory[0x0200:0x0220] = memory[0x0140:0x0160];\n                var temp13;\n                temp13, memory[0x0260:0x0280] = address(memory[0x0160:0x0180]).staticcall.gas(msg.gas)(memory[0x01fc:0x0220]);\n            \n                if (!temp13) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01c0:0x01e0] = memory[0x0260:0x0280];\n                var2 = 0x0180;\n                var3 = memory[var2:var2 + 0x20];\n            \n                if (!0x05f5e100) { revert(memory[0x00:0x00]); }\n            \n                var4 = 0x05f5e100;\n            \n                if (memory[0x01c0:0x01e0]) {\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x03;\n                    var temp14 = storage[keccak256(memory[0xc0:0x0100])];\n                    var temp15 = memory[0x01c0:0x01e0];\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x03;\n                \n                    if ((memory[0x01c0:0x01e0] * storage[keccak256(memory[0xc0:0x0100])]) / temp15 != temp14) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x03;\n                \n                    if (memory[var2:var2 + 0x20] + (memory[0x01c0:0x01e0] * storage[keccak256(memory[0xc0:0x0100])]) / var4 < var3) { revert(memory[0x00:0x00]); }\n                \n                label_01E1:\n                \n                    if (!0x05f5e100) { revert(memory[0x00:0x00]); }\n                \n                    var3 = 0x05f5e100;\n                \n                    if (memory[0x01c0:0x01e0]) {\n                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                        memory[0xc0:0xe0] = 0x03;\n                        var temp16 = storage[keccak256(memory[0xc0:0x0100])];\n                        var temp17 = memory[0x01c0:0x01e0];\n                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                        memory[0xc0:0xe0] = 0x03;\n                    \n                        if ((memory[0x01c0:0x01e0] * storage[keccak256(memory[0xc0:0x0100])]) / temp17 != temp16) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                        memory[0xc0:0xe0] = 0x03;\n                        var temp18 = var2;\n                        memory[temp18:temp18 + 0x20] = memory[temp18:temp18 + 0x20] + (memory[0x01c0:0x01e0] * storage[keccak256(memory[0xc0:0x0100])]) / var3;\n                        goto label_025D;\n                    } else {\n                        var4 = 0x00;\n                        var temp19 = var2;\n                        memory[temp19:temp19 + 0x20] = memory[temp19:temp19 + 0x20] + var4 / var3;\n                        goto label_025D;\n                    }\n                } else {\n                    var5 = 0x00;\n                \n                    if (memory[var2:var2 + 0x20] + var5 / var4 >= var3) { goto label_01E1; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0x3d710a9d) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x60:0x80];\n            var1 = msg.data[0x24:0x44];\n        \n            if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n        \n            var temp10 = var0;\n            var0 = var1;\n        \n            if (var0 i< temp10) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n        \n            if (var1 >= 0x05) { revert(memory[0x00:0x00]); }\n        \n            memory[0xc0:0xe0] = 0x02;\n            storage[keccak256(memory[0xc0:0xe0]) + var1] = var0;\n            log(memory[0x00:0x00], [0xa92882985915193a9370218a3a7e82c81fc53c081fbc542aa6766ba82239902d, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x457972de) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n        \n            if (!((0x0f4240 <= memory[0x0160:0x0180]) & (memory[0x0160:0x0180] <= 0x52b7d2dcc80cd2e4000000))) { revert(memory[0x00:0x00]); }\n        \n            var temp9 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x03;\n            storage[keccak256(memory[0xc0:0x0100])] = temp9;\n            log(memory[0x00:0x00], [0x0d86730737b142fc160892fa8a0f2db687a92a0e294d1ad70624cf5acef03b84, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] != 0x06fdde03) {\n            if (memory[0x00:0x20] != 0x8da5cb5b) {\n                if (memory[0x00:0x20] == 0xb1c9f095) {\n                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x60:0x80];\n                    var var1 = msg.data[0x04:0x24];\n                \n                    if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                \n                    var temp0 = var0;\n                    var0 = var1;\n                \n                    if (var0 i< temp0) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x0140:0x0160];\n                \n                    if (var0 >= 0x05) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xc0:0xe0] = 0x02;\n                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + var0];\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] != 0xf1bb1086) { revert(memory[0x00:0x00]); }\n                else {\n                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x03;\n                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                    return memory[0x00:0x20];\n                }\n            } else if (!msg.value) {\n                memory[0x00:0x20] = storage[0x01];\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = 0x00;\n            memory[0xc0:0xe0] = var0;\n            var1 = keccak256(memory[0xc0:0xe0]);\n            var var2 = 0x0180;\n            var temp1 = storage[var1] + 0x20;\n            var var3 = temp1;\n            var var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var var5 = 0x02;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_043D; }\n        \n        label_0441:\n            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n            var temp2 = var4;\n            var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n            memory[temp2:temp2 + 0x20] = temp3;\n        \n            if (var5 == temp3) { goto label_0463; }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0441; }\n        \n        label_043D:\n        \n        label_0463:\n            var temp4 = memory[0x0180:0x01a0];\n            var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n            var1 = 0x01e0;\n            var temp5 = memory[0x0180:0x01a0];\n            memory[var1:var1 + 0x20] = temp5;\n            var2 = temp5 + 0x10;\n        \n            if (memory[0x01e0:0x0200] > var0) { goto label_0495; }\n        \n        label_0499:\n            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n            var temp6 = var1;\n            var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n            memory[temp6:temp6 + 0x20] = temp7;\n        \n            if (var2 == temp7) { goto label_04B5; }\n        \n            if (memory[0x01e0:0x0200] <= var0) { goto label_0499; }\n        \n        label_0495:\n        \n        label_04B5:\n            memory[0x0160:0x0180] = 0x20;\n            var temp8 = memory[0x0180:0x01a0] + 0x40;\n            return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] == 0xfa75d160) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0180:0x01a0] = 0x00;\n            var0 = 0x01a0;\n            memory[var0:var0 + 0x20] = 0x00;\n            var1 = 0x05;\n            var2 = memory[0x01a0:0x01c0];\n        \n            if (var2 >= 0x05) { revert(memory[0x00:0x00]); }\n        \n        label_00E9:\n            memory[0xc0:0xe0] = 0x02;\n            memory[0x0160:0x0180] = storage[keccak256(memory[0xc0:0xe0]) + var2];\n        \n            if (memory[0x0160:0x0180] == 0x00) {\n            label_025D:\n                var temp11 = var0;\n                var temp12 = memory[temp11:temp11 + 0x20] + 0x01;\n                memory[temp11:temp11 + 0x20] = temp12;\n            \n                if (var1 != temp12) {\n                    var2 = memory[0x01a0:0x01c0];\n                \n                    if (var2 < 0x05) { goto label_00E9; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    memory[0x00:0x20] = memory[0x0180:0x01a0];\n                    return memory[0x00:0x20];\n                }\n            } else if (address(memory[0x0160:0x0180]).code.length) {\n                if (address(this) == memory[0x0160:0x0180]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01e0:0x0200] = 0x70a08231;\n                memory[0x0200:0x0220] = memory[0x0140:0x0160];\n                var temp13;\n                temp13, memory[0x0260:0x0280] = address(memory[0x0160:0x0180]).staticcall.gas(msg.gas)(memory[0x01fc:0x0220]);\n            \n                if (!temp13) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01c0:0x01e0] = memory[0x0260:0x0280];\n                var2 = 0x0180;\n                var3 = memory[var2:var2 + 0x20];\n            \n                if (!0x05f5e100) { revert(memory[0x00:0x00]); }\n            \n                var4 = 0x05f5e100;\n            \n                if (memory[0x01c0:0x01e0]) {\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x03;\n                    var temp14 = storage[keccak256(memory[0xc0:0x0100])];\n                    var temp15 = memory[0x01c0:0x01e0];\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x03;\n                \n                    if ((memory[0x01c0:0x01e0] * storage[keccak256(memory[0xc0:0x0100])]) / temp15 != temp14) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x03;\n                \n                    if (memory[var2:var2 + 0x20] + (memory[0x01c0:0x01e0] * storage[keccak256(memory[0xc0:0x0100])]) / var4 < var3) { revert(memory[0x00:0x00]); }\n                \n                label_01E1:\n                \n                    if (!0x05f5e100) { revert(memory[0x00:0x00]); }\n                \n                    var3 = 0x05f5e100;\n                \n                    if (memory[0x01c0:0x01e0]) {\n                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                        memory[0xc0:0xe0] = 0x03;\n                        var temp16 = storage[keccak256(memory[0xc0:0x0100])];\n                        var temp17 = memory[0x01c0:0x01e0];\n                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                        memory[0xc0:0xe0] = 0x03;\n                    \n                        if ((memory[0x01c0:0x01e0] * storage[keccak256(memory[0xc0:0x0100])]) / temp17 != temp16) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                        memory[0xc0:0xe0] = 0x03;\n                        var temp18 = var2;\n                        memory[temp18:temp18 + 0x20] = memory[temp18:temp18 + 0x20] + (memory[0x01c0:0x01e0] * storage[keccak256(memory[0xc0:0x0100])]) / var3;\n                        goto label_025D;\n                    } else {\n                        var4 = 0x00;\n                        var temp19 = var2;\n                        memory[temp19:temp19 + 0x20] = memory[temp19:temp19 + 0x20] + var4 / var3;\n                        goto label_025D;\n                    }\n                } else {\n                    var5 = 0x00;\n                \n                    if (memory[var2:var2 + 0x20] + var5 / var4 >= var3) { goto label_01E1; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0x3d710a9d) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x60:0x80];\n            var1 = msg.data[0x24:0x44];\n        \n            if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n        \n            var temp10 = var0;\n            var0 = var1;\n        \n            if (var0 i< temp10) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n        \n            if (var1 >= 0x05) { revert(memory[0x00:0x00]); }\n        \n            memory[0xc0:0xe0] = 0x02;\n            storage[keccak256(memory[0xc0:0xe0]) + var1] = var0;\n            log(memory[0x00:0x00], [0xa92882985915193a9370218a3a7e82c81fc53c081fbc542aa6766ba82239902d, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x457972de) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x01]) { revert(memory[0x00:0x00]); }\n        \n            if (!((0x0f4240 <= memory[0x0160:0x0180]) & (memory[0x0160:0x0180] <= 0x52b7d2dcc80cd2e4000000))) { revert(memory[0x00:0x00]); }\n        \n            var temp9 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x03;\n            storage[keccak256(memory[0xc0:0x0100])] = temp9;\n            log(memory[0x00:0x00], [0x0d86730737b142fc160892fa8a0f2db687a92a0e294d1ad70624cf5acef03b84, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n            memory[0x00:0x20] = 0x01;\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] != 0x06fdde03) {\n            if (memory[0x00:0x20] != 0x8da5cb5b) {\n                if (memory[0x00:0x20] == 0xb1c9f095) {\n                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x60:0x80];\n                    var var1 = msg.data[0x04:0x24];\n                \n                    if (var1 i> memory[0x40:0x60]) { revert(memory[0x00:0x00]); }\n                \n                    var temp0 = var0;\n                    var0 = var1;\n                \n                    if (var0 i< temp0) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[0x0140:0x0160];\n                \n                    if (var0 >= 0x05) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xc0:0xe0] = 0x02;\n                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0xe0]) + var0];\n                    return memory[0x00:0x20];\n                } else if (memory[0x00:0x20] != 0xf1bb1086) { revert(memory[0x00:0x00]); }\n                else {\n                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                \n                    if (msg.value) { revert(memory[0x00:0x00]); }\n                \n                    var var0 = msg.data[0x04:0x24];\n                \n                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                \n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x03;\n                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                    return memory[0x00:0x20];\n                }\n            } else if (!msg.value) {\n                memory[0x00:0x20] = storage[0x01];\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = 0x00;\n            memory[0xc0:0xe0] = var0;\n            var1 = keccak256(memory[0xc0:0xe0]);\n            var var2 = 0x0180;\n            var temp1 = storage[var1] + 0x20;\n            var var3 = temp1;\n            var var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var var5 = 0x02;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_043D; }\n        \n        label_0441:\n            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n            var temp2 = var4;\n            var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n            memory[temp2:temp2 + 0x20] = temp3;\n        \n            if (var5 == temp3) { goto label_0463; }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0441; }\n        \n        label_043D:\n        \n        label_0463:\n            var temp4 = memory[0x0180:0x01a0];\n            var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n            var1 = 0x01e0;\n            var temp5 = memory[0x0180:0x01a0];\n            memory[var1:var1 + 0x20] = temp5;\n            var2 = temp5 + 0x10;\n        \n            if (memory[0x01e0:0x0200] > var0) { goto label_0495; }\n        \n        label_0499:\n            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n            var temp6 = var1;\n            var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n            memory[temp6:temp6 + 0x20] = temp7;\n        \n            if (var2 == temp7) { goto label_04B5; }\n        \n            if (memory[0x01e0:0x0200] <= var0) { goto label_0499; }\n        \n        label_0495:\n        \n        label_04B5:\n            memory[0x0160:0x0180] = 0x20;\n            var temp8 = memory[0x0180:0x01a0] + 0x40;\n            return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 15.38411831855774,
	"usage": {
		"completion_tokens": 284,
		"prompt_tokens": 3980,
		"total_tokens": 4264
	}
}