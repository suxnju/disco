{
	"address": "0xf0b3ba2dd4b2ef75d727a4045d7fbcc415b77bf0",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity contract equivalent to the provided decompiled code would be something like this:\n\n```solidity\npragma solidity ^0.6.6;\n\ncontract Contract {\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowed;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n```\n\nPlease note that this is a simplified version of the provided contract. The actual contract may have additional functions and features not included in this example. For instance, the provided decompiled code has a `burn`, `BuyTokens`, `SellTokens`, `getReserve`, `split` methods that are not included in this example. This example features the base structure of an ERC20 token contract, which the provided decompiled code seems to be. \n\nThe decompiled code also uses low-level operations such as bitwise operations, explicit memory management, and dynamic function dispatching, which are not typical in high-level Solidity code. This makes it hard to translate it directly into high-level Solidity. \n\nYou would need a thorough understanding of the logic and functionality of the contract to write an equivalent high-level Solidity contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474558,
	"id": "chatcmpl-8MvOwb8hZ0ckL3AHZVNpmQs8zRrDr",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0108;\n            var var2 = name();\n            var temp0 = memory[0x40:0x60];\n            var var3 = temp0;\n            var var4 = var3;\n            var temp1 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp1 - var4;\n            var temp2 = var2;\n            memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n            var var5 = temp1 + 0x20;\n            var var6 = temp2 + 0x20;\n            var var7 = memory[temp2:temp2 + 0x20];\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0148:\n                var temp3 = var7;\n                var5 = temp3 + var5;\n                var6 = temp3 & 0x1f;\n            \n                if (!var6) {\n                    var temp4 = memory[0x40:0x60];\n                    return memory[temp4:temp4 + var5 - temp4];\n                } else {\n                    var temp5 = var6;\n                    var temp6 = var5 - temp5;\n                    memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                    var temp7 = memory[0x40:0x60];\n                    return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                }\n            } else {\n            label_0136:\n                var temp8 = var11;\n                memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                var11 = temp8 + 0x20;\n            \n                if (var11 >= var8) { goto label_0148; }\n                else { goto label_0136; }\n            }\n        } else if (var0 == 0x095ea7b3) {\n            // Dispatch table entry for approve(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ce;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = approve(var2, var3);\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = !!var1;\n            var temp10 = memory[0x40:0x60];\n            return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01fd;\n            var1 = totalSupply();\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = var1;\n            var temp12 = memory[0x40:0x60];\n            return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n        } else if (var0 == 0x23b872dd) {\n            // Dispatch table entry for transferFrom(address,address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x027e;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = msg.data[0x44:0x64];\n            var1 = transferFrom(var2, var3, var4);\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = !!var1;\n            var temp14 = memory[0x40:0x60];\n            return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n        } else if (var0 == 0x27e235e3) {\n            // Dispatch table entry for balances(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d9;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = balances(var2);\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = var2;\n            var temp16 = memory[0x40:0x60];\n            return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0304;\n            var2 = decimals();\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = var2 & 0xff;\n            var temp18 = memory[0x40:0x60];\n            return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n        } else if (var0 == 0x3eaaf86b) {\n            // Dispatch table entry for _totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0335;\n            var2 = _totalSupply();\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = var2;\n            var temp20 = memory[0x40:0x60];\n            return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n        } else if (var0 == 0x42966c68) {\n            // Dispatch table entry for burn(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0376;\n            var2 = msg.data[0x04:0x24];\n            var1 = burn(var2);\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = !!var1;\n            var temp22 = memory[0x40:0x60];\n            return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n        } else if (var0 == 0x59bf5d39) {\n            // Dispatch table entry for getReserve()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03a5;\n            var1 = getReserve();\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = var1;\n            var temp24 = memory[0x40:0x60];\n            return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n        } else if (var0 == 0x5c658165) {\n            // Dispatch table entry for allowed(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x041c;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = allowed(var2, var3);\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = var2;\n            var temp26 = memory[0x40:0x60];\n            return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0473;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = balanceOf(var2);\n            var temp27 = memory[0x40:0x60];\n            memory[temp27:temp27 + 0x20] = var1;\n            var temp28 = memory[0x40:0x60];\n            return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x049e;\n            var2 = symbol();\n            var temp29 = memory[0x40:0x60];\n            var3 = temp29;\n            var4 = var3;\n            var temp30 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp30 - var4;\n            var temp31 = var2;\n            memory[temp30:temp30 + 0x20] = memory[temp31:temp31 + 0x20];\n            var5 = temp30 + 0x20;\n            var7 = memory[temp31:temp31 + 0x20];\n            var6 = temp31 + 0x20;\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_04DE:\n                var temp32 = var7;\n                var5 = temp32 + var5;\n                var6 = temp32 & 0x1f;\n            \n                if (!var6) {\n                    var temp33 = memory[0x40:0x60];\n                    return memory[temp33:temp33 + var5 - temp33];\n                } else {\n                    var temp34 = var6;\n                    var temp35 = var5 - temp34;\n                    memory[temp35:temp35 + 0x20] = ~(0x0100 ** (0x20 - temp34) - 0x01) & memory[temp35:temp35 + 0x20];\n                    var temp36 = memory[0x40:0x60];\n                    return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n                }\n            } else {\n            label_04CC:\n                var temp37 = var11;\n                memory[var9 + temp37:var9 + temp37 + 0x20] = memory[var10 + temp37:var10 + temp37 + 0x20];\n                var11 = temp37 + 0x20;\n            \n                if (var11 >= var8) { goto label_04DE; }\n                else { goto label_04CC; }\n            }\n        } else if (var0 == 0x9c7ebb30) {\n            // Dispatch table entry for SellTokens(uint256)\n            var1 = 0x0537;\n            var2 = msg.data[0x04:0x24];\n            var1 = SellTokens(var2);\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = var1;\n            var temp39 = memory[0x40:0x60];\n            return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0598;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            var temp40 = memory[0x40:0x60];\n            memory[temp40:temp40 + 0x20] = !!var1;\n            var temp41 = memory[0x40:0x60];\n            return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n        } else if (var0 == 0xd81111ab) {\n            // Dispatch table entry for BuyTokens()\n            var1 = 0x05ba;\n            var1 = BuyTokens();\n            var temp42 = memory[0x40:0x60];\n            memory[temp42:temp42 + 0x20] = var1;\n            var temp43 = memory[0x40:0x60];\n            return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0631;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = allowance(var2, var3);\n            var temp44 = memory[0x40:0x60];\n            memory[temp44:temp44 + 0x20] = var1;\n            var temp45 = memory[0x40:0x60];\n            return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n        } else if (var0 == 0xf7654176) {\n            // Dispatch table entry for split()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x065c;\n            var1 = split();\n            var temp46 = memory[0x40:0x60];\n            memory[temp46:temp46 + 0x20] = !!var1;\n            var temp47 = memory[0x40:0x60];\n            return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n        } else { stop(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_070C:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0703; }\n        \n        label_06EF:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_06EF; }\n        \n        label_0703:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_070C;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_070C;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) {\n        memory[0x00:0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        memory[0x20:0x40] = 0x03;\n        return storage[0x00] - storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0a9c;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_1EE3(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x0b31;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1EFC(var2, var3);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x0c03;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1EE3(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x01) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = arg2;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            var temp5 = arg1;\n            var temp6 = storage[0x05] + 0x01;\n            storage[0x05] = temp6;\n            memory[0x00:0x20] = 0x05;\n            var temp7 = keccak256(memory[0x00:0x20]) + (temp6 - 0x01);\n            storage[temp7] = (temp5 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp5 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = (storage[temp8] & ~0xff) | 0x01;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = arg2;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        }\n    }\n    \n    function balances(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function _totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function burn(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 <= var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] - arg0 < 0x1043561a8829300000) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0efb;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg0;\n        var1 = func_1EE3(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x0f53;\n        var2 = storage[0x00];\n        var3 = arg0;\n        var1 = func_1EE3(var2, var3);\n        storage[0x00] = var1;\n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, msg.sender]);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        return 0x01;\n    }\n    \n    function getReserve() returns (var r0) { return address(this).balance; }\n    \n    function allowed(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_113E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1135; }\n        \n        label_1121:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1121; }\n        \n        label_1135:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_113E;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_113E;\n        }\n    }\n    \n    function SellTokens(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x01;\n    \n        if (arg0 < 0x0de0b6b3a7640000) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value < 0x0324b0) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] - arg0 < 0x1043561a8829300000) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg0) { revert(memory[0x00:0x00]); }\n    \n        var2 = address(this);\n        var var4 = storage[0x00];\n        var var5 = storage[0x00] - arg0 * 0x0de0b6b3a7640000;\n    \n        if (!var4) { assert(); }\n    \n        var temp0 = var5 / var4;\n        var0 = temp0;\n        var4 = 0x0de0b6b3a7640000;\n        var5 = var4;\n        var var6 = var0 ** 0x02;\n    \n        if (!var5) { assert(); }\n    \n        var5 = var6 / var5;\n        var6 = 0x0de0b6b3a7640000;\n        var var7 = var0 ** 0x02;\n    \n        if (!var6) { assert(); }\n    \n        var5 = var7 / var6 * var5;\n    \n        if (!var4) { assert(); }\n    \n        var temp1 = 0x0de0b6b3a7640000 - var5 / var4;\n        var0 = temp1;\n        var4 = 0x8ac7230489e80000;\n        var5 = var0 * (address(var2 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value) * 0x09;\n    \n        if (!var4) { assert(); }\n    \n        var0 = var5 / var4;\n        var4 = 0x0a;\n        var5 = storage[0x00];\n        var6 = arg0 * (address(var2 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value) * 0x24;\n    \n        if (!var5) { assert(); }\n    \n        var5 = var6 / var5;\n    \n        if (!var4) { assert(); }\n    \n        var3 = var5 / var4;\n    \n        if (var3 <= var0) { revert(memory[0x00:0x00]); }\n    \n        if (var0 >= address(var2 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] - temp2;\n        storage[0x00] = storage[0x00] - temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, msg.sender]);\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp2;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        var temp8 = var0;\n        var temp9 = memory[0x40:0x60];\n        var temp10;\n        temp10, memory[temp9:temp9 + 0x00] = address(msg.sender).call.gas(!temp8 * 0x08fc).value(temp8)(memory[temp9:temp9 + memory[0x40:0x60] - temp9]);\n        var4 = !temp10;\n    \n        if (!var4) { return var0; }\n    \n        var temp11 = returndata.length;\n        memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x154c;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_1EE3(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x15e1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_1EFC(var2, var3);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x01) {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = arg1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            var temp3 = arg0;\n            var temp4 = storage[0x05] + 0x01;\n            storage[0x05] = temp4;\n            memory[0x00:0x20] = 0x05;\n            var temp5 = keccak256(memory[0x00:0x20]) + (temp4 - 0x01);\n            storage[temp5] = (temp3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp5] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp3 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            storage[temp6] = (storage[temp6] & ~0xff) | 0x01;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = arg1;\n            var temp8 = memory[0x40:0x60];\n            log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        }\n    }\n    \n    function BuyTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var1 = address(this);\n        var var5 = storage[0x00];\n        var var6 = address(var1 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value * 0x04 * 0x02 * 0x0de0b6b3a7640000;\n    \n        if (!var5) { assert(); }\n    \n        var2 = var6 / var5;\n    \n        if (msg.value < var2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var1;\n        var5 = address(temp0 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value;\n        var6 = address(temp0 & 0xffffffffffffffffffffffffffffffffffffffff).balance - 0x0324b0 * 0x0de0b6b3a7640000;\n    \n        if (!var5) { assert(); }\n    \n        var temp1 = var6 / var5;\n        var0 = temp1;\n        var5 = 0x02;\n        var6 = var0 + 0x0de0b6b3a7640000;\n    \n        if (!var5) { assert(); }\n    \n        var temp2 = var6 / var5;\n        var3 = temp2;\n        var5 = 0x02;\n        var6 = var3;\n        var var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp3 = var6 / var5;\n        var3 = temp3;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp4 = var6 / var5;\n        var3 = temp4;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp5 = var6 / var5;\n        var3 = temp5;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp6 = var6 / var5;\n        var3 = temp6;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp7 = var6 / var5;\n        var3 = temp7;\n        var0 = var3;\n        var5 = 0x02;\n        var6 = var0 + 0x0de0b6b3a7640000;\n    \n        if (!var5) { assert(); }\n    \n        var temp8 = var6 / var5;\n        var3 = temp8;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp9 = var6 / var5;\n        var3 = temp9;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp10 = var6 / var5;\n        var3 = temp10;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp11 = var6 / var5;\n        var3 = temp11;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp12 = var6 / var5;\n        var3 = temp12;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var3 = var6 / var5;\n        var temp13 = var3 - 0x0de0b6b3a7640000;\n        var0 = temp13;\n        var5 = 0x0de0b6b3a7640000;\n        var6 = var0 * storage[0x00];\n    \n        if (!var5) { assert(); }\n    \n        var0 = var6 / var5;\n        var5 = 0x04;\n        var6 = address(var1 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value;\n        var7 = msg.value - 0x0324b0 * storage[0x00];\n    \n        if (!var6) { assert(); }\n    \n        var6 = var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var4 = var6 / var5;\n    \n        if (var4 < var0) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var0;\n        storage[0x00] = storage[0x00] + temp14;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp15 = keccak256(memory[0x00:0x40]);\n        storage[temp15] = storage[temp15] + temp14;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x01) {\n            var temp16 = var0;\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = temp16;\n            var temp18 = memory[0x40:0x60];\n            log(memory[temp18:temp18 + (temp17 + 0x20) - temp18], [0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, msg.sender]);\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = temp16;\n            var temp20 = memory[0x40:0x60];\n            log(memory[temp20:temp20 + (temp19 + 0x20) - temp20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, msg.sender]);\n            return temp16;\n        } else {\n            var temp21 = storage[0x05] + 0x01;\n            storage[0x05] = temp21;\n            memory[0x00:0x20] = 0x05;\n            var temp22 = keccak256(memory[0x00:0x20]) + (temp21 - 0x01);\n            storage[temp22] = msg.sender | (storage[temp22] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var temp23 = keccak256(memory[0x00:0x40]);\n            storage[temp23] = (storage[temp23] & ~0xff) | 0x01;\n            var temp24 = var0;\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = temp24;\n            var temp26 = memory[0x40:0x60];\n            log(memory[temp26:temp26 + (temp25 + 0x20) - temp26], [0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, msg.sender]);\n            var temp27 = memory[0x40:0x60];\n            memory[temp27:temp27 + 0x20] = temp24;\n            var temp28 = memory[0x40:0x60];\n            log(memory[temp28:temp28 + (temp27 + 0x20) - temp28], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, msg.sender]);\n            return temp24;\n        }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function split() returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var1 = address(this);\n        var var4 = storage[0x00];\n        var var5 = address(var1 & 0xffffffffffffffffffffffffffffffffffffffff).balance * 0x04 * 0x0a;\n    \n        if (!var4) { assert(); }\n    \n        var2 = var5 / var4;\n    \n        if (var2 <= 0x0a) { revert(memory[0x00:0x00]); }\n    \n        var2 = var2 * 0x0a;\n        var3 = 0x00;\n    \n        if (var3 >= storage[0x05]) {\n        label_1E93:\n            var temp0 = var2;\n            storage[0x00] = storage[0x00] * temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x734b7c838092bed0c73268b7a2cb67b07305321ec5c5610480c2c4c5d43d698e]);\n            return 0x01;\n        } else {\n        label_1E01:\n            var4 = var2;\n            var5 = 0x03;\n            var var6 = 0x00;\n            var var7 = 0x05;\n            var var8 = var3;\n        \n            if (var8 >= storage[var7]) { assert(); }\n        \n            memory[0x00:0x20] = var7;\n            var temp3 = var6;\n            memory[temp3:temp3 + 0x20] = storage[keccak256(memory[0x00:0x20]) + var8] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x00 + temp4 + 0x20]);\n            storage[temp5] = storage[temp5] * var4;\n            var3 = var3 + 0x01;\n        \n            if (var3 >= storage[0x05]) { goto label_1E93; }\n            else { goto label_1E01; }\n        }\n    }\n    \n    function func_1EE3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1EFC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0108;\n            var var2 = name();\n            var temp0 = memory[0x40:0x60];\n            var var3 = temp0;\n            var var4 = var3;\n            var temp1 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp1 - var4;\n            var temp2 = var2;\n            memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n            var var5 = temp1 + 0x20;\n            var var6 = temp2 + 0x20;\n            var var7 = memory[temp2:temp2 + 0x20];\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0148:\n                var temp3 = var7;\n                var5 = temp3 + var5;\n                var6 = temp3 & 0x1f;\n            \n                if (!var6) {\n                    var temp4 = memory[0x40:0x60];\n                    return memory[temp4:temp4 + var5 - temp4];\n                } else {\n                    var temp5 = var6;\n                    var temp6 = var5 - temp5;\n                    memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                    var temp7 = memory[0x40:0x60];\n                    return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                }\n            } else {\n            label_0136:\n                var temp8 = var11;\n                memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                var11 = temp8 + 0x20;\n            \n                if (var11 >= var8) { goto label_0148; }\n                else { goto label_0136; }\n            }\n        } else if (var0 == 0x095ea7b3) {\n            // Dispatch table entry for approve(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ce;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = approve(var2, var3);\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = !!var1;\n            var temp10 = memory[0x40:0x60];\n            return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01fd;\n            var1 = totalSupply();\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = var1;\n            var temp12 = memory[0x40:0x60];\n            return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n        } else if (var0 == 0x23b872dd) {\n            // Dispatch table entry for transferFrom(address,address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x027e;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = msg.data[0x44:0x64];\n            var1 = transferFrom(var2, var3, var4);\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = !!var1;\n            var temp14 = memory[0x40:0x60];\n            return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n        } else if (var0 == 0x27e235e3) {\n            // Dispatch table entry for balances(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d9;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = balances(var2);\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = var2;\n            var temp16 = memory[0x40:0x60];\n            return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0304;\n            var2 = decimals();\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = var2 & 0xff;\n            var temp18 = memory[0x40:0x60];\n            return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n        } else if (var0 == 0x3eaaf86b) {\n            // Dispatch table entry for _totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0335;\n            var2 = _totalSupply();\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = var2;\n            var temp20 = memory[0x40:0x60];\n            return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n        } else if (var0 == 0x42966c68) {\n            // Dispatch table entry for burn(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0376;\n            var2 = msg.data[0x04:0x24];\n            var1 = burn(var2);\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = !!var1;\n            var temp22 = memory[0x40:0x60];\n            return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n        } else if (var0 == 0x59bf5d39) {\n            // Dispatch table entry for getReserve()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03a5;\n            var1 = getReserve();\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = var1;\n            var temp24 = memory[0x40:0x60];\n            return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n        } else if (var0 == 0x5c658165) {\n            // Dispatch table entry for allowed(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x041c;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = allowed(var2, var3);\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = var2;\n            var temp26 = memory[0x40:0x60];\n            return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0473;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = balanceOf(var2);\n            var temp27 = memory[0x40:0x60];\n            memory[temp27:temp27 + 0x20] = var1;\n            var temp28 = memory[0x40:0x60];\n            return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x049e;\n            var2 = symbol();\n            var temp29 = memory[0x40:0x60];\n            var3 = temp29;\n            var4 = var3;\n            var temp30 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp30 - var4;\n            var temp31 = var2;\n            memory[temp30:temp30 + 0x20] = memory[temp31:temp31 + 0x20];\n            var5 = temp30 + 0x20;\n            var7 = memory[temp31:temp31 + 0x20];\n            var6 = temp31 + 0x20;\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_04DE:\n                var temp32 = var7;\n                var5 = temp32 + var5;\n                var6 = temp32 & 0x1f;\n            \n                if (!var6) {\n                    var temp33 = memory[0x40:0x60];\n                    return memory[temp33:temp33 + var5 - temp33];\n                } else {\n                    var temp34 = var6;\n                    var temp35 = var5 - temp34;\n                    memory[temp35:temp35 + 0x20] = ~(0x0100 ** (0x20 - temp34) - 0x01) & memory[temp35:temp35 + 0x20];\n                    var temp36 = memory[0x40:0x60];\n                    return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n                }\n            } else {\n            label_04CC:\n                var temp37 = var11;\n                memory[var9 + temp37:var9 + temp37 + 0x20] = memory[var10 + temp37:var10 + temp37 + 0x20];\n                var11 = temp37 + 0x20;\n            \n                if (var11 >= var8) { goto label_04DE; }\n                else { goto label_04CC; }\n            }\n        } else if (var0 == 0x9c7ebb30) {\n            // Dispatch table entry for SellTokens(uint256)\n            var1 = 0x0537;\n            var2 = msg.data[0x04:0x24];\n            var1 = SellTokens(var2);\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = var1;\n            var temp39 = memory[0x40:0x60];\n            return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0598;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            var temp40 = memory[0x40:0x60];\n            memory[temp40:temp40 + 0x20] = !!var1;\n            var temp41 = memory[0x40:0x60];\n            return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n        } else if (var0 == 0xd81111ab) {\n            // Dispatch table entry for BuyTokens()\n            var1 = 0x05ba;\n            var1 = BuyTokens();\n            var temp42 = memory[0x40:0x60];\n            memory[temp42:temp42 + 0x20] = var1;\n            var temp43 = memory[0x40:0x60];\n            return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0631;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = allowance(var2, var3);\n            var temp44 = memory[0x40:0x60];\n            memory[temp44:temp44 + 0x20] = var1;\n            var temp45 = memory[0x40:0x60];\n            return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n        } else if (var0 == 0xf7654176) {\n            // Dispatch table entry for split()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x065c;\n            var1 = split();\n            var temp46 = memory[0x40:0x60];\n            memory[temp46:temp46 + 0x20] = !!var1;\n            var temp47 = memory[0x40:0x60];\n            return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n        } else { stop(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_070C:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0703; }\n        \n        label_06EF:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_06EF; }\n        \n        label_0703:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_070C;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_070C;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) {\n        memory[0x00:0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        memory[0x20:0x40] = 0x03;\n        return storage[0x00] - storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0a9c;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_1EE3(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x0b31;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1EFC(var2, var3);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x0c03;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1EE3(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x01) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = arg2;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            var temp5 = arg1;\n            var temp6 = storage[0x05] + 0x01;\n            storage[0x05] = temp6;\n            memory[0x00:0x20] = 0x05;\n            var temp7 = keccak256(memory[0x00:0x20]) + (temp6 - 0x01);\n            storage[temp7] = (temp5 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp5 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = (storage[temp8] & ~0xff) | 0x01;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = arg2;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        }\n    }\n    \n    function balances(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function _totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function burn(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 <= var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] - arg0 < 0x1043561a8829300000) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0efb;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg0;\n        var1 = func_1EE3(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x0f53;\n        var2 = storage[0x00];\n        var3 = arg0;\n        var1 = func_1EE3(var2, var3);\n        storage[0x00] = var1;\n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, msg.sender]);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        return 0x01;\n    }\n    \n    function getReserve() returns (var r0) { return address(this).balance; }\n    \n    function allowed(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_113E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1135; }\n        \n        label_1121:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1121; }\n        \n        label_1135:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_113E;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_113E;\n        }\n    }\n    \n    function SellTokens(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x01;\n    \n        if (arg0 < 0x0de0b6b3a7640000) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value < 0x0324b0) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] - arg0 < 0x1043561a8829300000) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg0) { revert(memory[0x00:0x00]); }\n    \n        var2 = address(this);\n        var var4 = storage[0x00];\n        var var5 = storage[0x00] - arg0 * 0x0de0b6b3a7640000;\n    \n        if (!var4) { assert(); }\n    \n        var temp0 = var5 / var4;\n        var0 = temp0;\n        var4 = 0x0de0b6b3a7640000;\n        var5 = var4;\n        var var6 = var0 ** 0x02;\n    \n        if (!var5) { assert(); }\n    \n        var5 = var6 / var5;\n        var6 = 0x0de0b6b3a7640000;\n        var var7 = var0 ** 0x02;\n    \n        if (!var6) { assert(); }\n    \n        var5 = var7 / var6 * var5;\n    \n        if (!var4) { assert(); }\n    \n        var temp1 = 0x0de0b6b3a7640000 - var5 / var4;\n        var0 = temp1;\n        var4 = 0x8ac7230489e80000;\n        var5 = var0 * (address(var2 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value) * 0x09;\n    \n        if (!var4) { assert(); }\n    \n        var0 = var5 / var4;\n        var4 = 0x0a;\n        var5 = storage[0x00];\n        var6 = arg0 * (address(var2 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value) * 0x24;\n    \n        if (!var5) { assert(); }\n    \n        var5 = var6 / var5;\n    \n        if (!var4) { assert(); }\n    \n        var3 = var5 / var4;\n    \n        if (var3 <= var0) { revert(memory[0x00:0x00]); }\n    \n        if (var0 >= address(var2 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] - temp2;\n        storage[0x00] = storage[0x00] - temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, msg.sender]);\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp2;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        var temp8 = var0;\n        var temp9 = memory[0x40:0x60];\n        var temp10;\n        temp10, memory[temp9:temp9 + 0x00] = address(msg.sender).call.gas(!temp8 * 0x08fc).value(temp8)(memory[temp9:temp9 + memory[0x40:0x60] - temp9]);\n        var4 = !temp10;\n    \n        if (!var4) { return var0; }\n    \n        var temp11 = returndata.length;\n        memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x154c;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_1EE3(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x15e1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_1EFC(var2, var3);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x01) {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = arg1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            var temp3 = arg0;\n            var temp4 = storage[0x05] + 0x01;\n            storage[0x05] = temp4;\n            memory[0x00:0x20] = 0x05;\n            var temp5 = keccak256(memory[0x00:0x20]) + (temp4 - 0x01);\n            storage[temp5] = (temp3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp5] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp3 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            storage[temp6] = (storage[temp6] & ~0xff) | 0x01;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = arg1;\n            var temp8 = memory[0x40:0x60];\n            log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        }\n    }\n    \n    function BuyTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var1 = address(this);\n        var var5 = storage[0x00];\n        var var6 = address(var1 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value * 0x04 * 0x02 * 0x0de0b6b3a7640000;\n    \n        if (!var5) { assert(); }\n    \n        var2 = var6 / var5;\n    \n        if (msg.value < var2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var1;\n        var5 = address(temp0 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value;\n        var6 = address(temp0 & 0xffffffffffffffffffffffffffffffffffffffff).balance - 0x0324b0 * 0x0de0b6b3a7640000;\n    \n        if (!var5) { assert(); }\n    \n        var temp1 = var6 / var5;\n        var0 = temp1;\n        var5 = 0x02;\n        var6 = var0 + 0x0de0b6b3a7640000;\n    \n        if (!var5) { assert(); }\n    \n        var temp2 = var6 / var5;\n        var3 = temp2;\n        var5 = 0x02;\n        var6 = var3;\n        var var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp3 = var6 / var5;\n        var3 = temp3;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp4 = var6 / var5;\n        var3 = temp4;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp5 = var6 / var5;\n        var3 = temp5;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp6 = var6 / var5;\n        var3 = temp6;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp7 = var6 / var5;\n        var3 = temp7;\n        var0 = var3;\n        var5 = 0x02;\n        var6 = var0 + 0x0de0b6b3a7640000;\n    \n        if (!var5) { assert(); }\n    \n        var temp8 = var6 / var5;\n        var3 = temp8;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp9 = var6 / var5;\n        var3 = temp9;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp10 = var6 / var5;\n        var3 = temp10;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp11 = var6 / var5;\n        var3 = temp11;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp12 = var6 / var5;\n        var3 = temp12;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var3 = var6 / var5;\n        var temp13 = var3 - 0x0de0b6b3a7640000;\n        var0 = temp13;\n        var5 = 0x0de0b6b3a7640000;\n        var6 = var0 * storage[0x00];\n    \n        if (!var5) { assert(); }\n    \n        var0 = var6 / var5;\n        var5 = 0x04;\n        var6 = address(var1 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value;\n        var7 = msg.value - 0x0324b0 * storage[0x00];\n    \n        if (!var6) { assert(); }\n    \n        var6 = var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var4 = var6 / var5;\n    \n        if (var4 < var0) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var0;\n        storage[0x00] = storage[0x00] + temp14;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp15 = keccak256(memory[0x00:0x40]);\n        storage[temp15] = storage[temp15] + temp14;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x01) {\n            var temp16 = var0;\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = temp16;\n            var temp18 = memory[0x40:0x60];\n            log(memory[temp18:temp18 + (temp17 + 0x20) - temp18], [0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, msg.sender]);\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = temp16;\n            var temp20 = memory[0x40:0x60];\n            log(memory[temp20:temp20 + (temp19 + 0x20) - temp20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, msg.sender]);\n            return temp16;\n        } else {\n            var temp21 = storage[0x05] + 0x01;\n            storage[0x05] = temp21;\n            memory[0x00:0x20] = 0x05;\n            var temp22 = keccak256(memory[0x00:0x20]) + (temp21 - 0x01);\n            storage[temp22] = msg.sender | (storage[temp22] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var temp23 = keccak256(memory[0x00:0x40]);\n            storage[temp23] = (storage[temp23] & ~0xff) | 0x01;\n            var temp24 = var0;\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = temp24;\n            var temp26 = memory[0x40:0x60];\n            log(memory[temp26:temp26 + (temp25 + 0x20) - temp26], [0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, msg.sender]);\n            var temp27 = memory[0x40:0x60];\n            memory[temp27:temp27 + 0x20] = temp24;\n            var temp28 = memory[0x40:0x60];\n            log(memory[temp28:temp28 + (temp27 + 0x20) - temp28], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, msg.sender]);\n            return temp24;\n        }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function split() returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var1 = address(this);\n        var var4 = storage[0x00];\n        var var5 = address(var1 & 0xffffffffffffffffffffffffffffffffffffffff).balance * 0x04 * 0x0a;\n    \n        if (!var4) { assert(); }\n    \n        var2 = var5 / var4;\n    \n        if (var2 <= 0x0a) { revert(memory[0x00:0x00]); }\n    \n        var2 = var2 * 0x0a;\n        var3 = 0x00;\n    \n        if (var3 >= storage[0x05]) {\n        label_1E93:\n            var temp0 = var2;\n            storage[0x00] = storage[0x00] * temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x734b7c838092bed0c73268b7a2cb67b07305321ec5c5610480c2c4c5d43d698e]);\n            return 0x01;\n        } else {\n        label_1E01:\n            var4 = var2;\n            var5 = 0x03;\n            var var6 = 0x00;\n            var var7 = 0x05;\n            var var8 = var3;\n        \n            if (var8 >= storage[var7]) { assert(); }\n        \n            memory[0x00:0x20] = var7;\n            var temp3 = var6;\n            memory[temp3:temp3 + 0x20] = storage[keccak256(memory[0x00:0x20]) + var8] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x00 + temp4 + 0x20]);\n            storage[temp5] = storage[temp5] * var4;\n            var3 = var3 + 0x01;\n        \n            if (var3 >= storage[0x05]) { goto label_1E93; }\n            else { goto label_1E01; }\n        }\n    }\n    \n    function func_1EE3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1EFC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0108;\n            var var2 = name();\n            var temp0 = memory[0x40:0x60];\n            var var3 = temp0;\n            var var4 = var3;\n            var temp1 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp1 - var4;\n            var temp2 = var2;\n            memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n            var var5 = temp1 + 0x20;\n            var var6 = temp2 + 0x20;\n            var var7 = memory[temp2:temp2 + 0x20];\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_0148:\n                var temp3 = var7;\n                var5 = temp3 + var5;\n                var6 = temp3 & 0x1f;\n            \n                if (!var6) {\n                    var temp4 = memory[0x40:0x60];\n                    return memory[temp4:temp4 + var5 - temp4];\n                } else {\n                    var temp5 = var6;\n                    var temp6 = var5 - temp5;\n                    memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                    var temp7 = memory[0x40:0x60];\n                    return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                }\n            } else {\n            label_0136:\n                var temp8 = var11;\n                memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                var11 = temp8 + 0x20;\n            \n                if (var11 >= var8) { goto label_0148; }\n                else { goto label_0136; }\n            }\n        } else if (var0 == 0x095ea7b3) {\n            // Dispatch table entry for approve(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01ce;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = approve(var2, var3);\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = !!var1;\n            var temp10 = memory[0x40:0x60];\n            return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01fd;\n            var1 = totalSupply();\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = var1;\n            var temp12 = memory[0x40:0x60];\n            return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n        } else if (var0 == 0x23b872dd) {\n            // Dispatch table entry for transferFrom(address,address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x027e;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = msg.data[0x44:0x64];\n            var1 = transferFrom(var2, var3, var4);\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = !!var1;\n            var temp14 = memory[0x40:0x60];\n            return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n        } else if (var0 == 0x27e235e3) {\n            // Dispatch table entry for balances(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d9;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = balances(var2);\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = var2;\n            var temp16 = memory[0x40:0x60];\n            return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0304;\n            var2 = decimals();\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = var2 & 0xff;\n            var temp18 = memory[0x40:0x60];\n            return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n        } else if (var0 == 0x3eaaf86b) {\n            // Dispatch table entry for _totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0335;\n            var2 = _totalSupply();\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = var2;\n            var temp20 = memory[0x40:0x60];\n            return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n        } else if (var0 == 0x42966c68) {\n            // Dispatch table entry for burn(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0376;\n            var2 = msg.data[0x04:0x24];\n            var1 = burn(var2);\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = !!var1;\n            var temp22 = memory[0x40:0x60];\n            return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n        } else if (var0 == 0x59bf5d39) {\n            // Dispatch table entry for getReserve()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03a5;\n            var1 = getReserve();\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = var1;\n            var temp24 = memory[0x40:0x60];\n            return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n        } else if (var0 == 0x5c658165) {\n            // Dispatch table entry for allowed(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x041c;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = allowed(var2, var3);\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = var2;\n            var temp26 = memory[0x40:0x60];\n            return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0473;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = balanceOf(var2);\n            var temp27 = memory[0x40:0x60];\n            memory[temp27:temp27 + 0x20] = var1;\n            var temp28 = memory[0x40:0x60];\n            return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x049e;\n            var2 = symbol();\n            var temp29 = memory[0x40:0x60];\n            var3 = temp29;\n            var4 = var3;\n            var temp30 = var4 + 0x20;\n            memory[var4:var4 + 0x20] = temp30 - var4;\n            var temp31 = var2;\n            memory[temp30:temp30 + 0x20] = memory[temp31:temp31 + 0x20];\n            var5 = temp30 + 0x20;\n            var7 = memory[temp31:temp31 + 0x20];\n            var6 = temp31 + 0x20;\n            var8 = var7;\n            var9 = var5;\n            var10 = var6;\n            var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_04DE:\n                var temp32 = var7;\n                var5 = temp32 + var5;\n                var6 = temp32 & 0x1f;\n            \n                if (!var6) {\n                    var temp33 = memory[0x40:0x60];\n                    return memory[temp33:temp33 + var5 - temp33];\n                } else {\n                    var temp34 = var6;\n                    var temp35 = var5 - temp34;\n                    memory[temp35:temp35 + 0x20] = ~(0x0100 ** (0x20 - temp34) - 0x01) & memory[temp35:temp35 + 0x20];\n                    var temp36 = memory[0x40:0x60];\n                    return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n                }\n            } else {\n            label_04CC:\n                var temp37 = var11;\n                memory[var9 + temp37:var9 + temp37 + 0x20] = memory[var10 + temp37:var10 + temp37 + 0x20];\n                var11 = temp37 + 0x20;\n            \n                if (var11 >= var8) { goto label_04DE; }\n                else { goto label_04CC; }\n            }\n        } else if (var0 == 0x9c7ebb30) {\n            // Dispatch table entry for SellTokens(uint256)\n            var1 = 0x0537;\n            var2 = msg.data[0x04:0x24];\n            var1 = SellTokens(var2);\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = var1;\n            var temp39 = memory[0x40:0x60];\n            return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0598;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            var temp40 = memory[0x40:0x60];\n            memory[temp40:temp40 + 0x20] = !!var1;\n            var temp41 = memory[0x40:0x60];\n            return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n        } else if (var0 == 0xd81111ab) {\n            // Dispatch table entry for BuyTokens()\n            var1 = 0x05ba;\n            var1 = BuyTokens();\n            var temp42 = memory[0x40:0x60];\n            memory[temp42:temp42 + 0x20] = var1;\n            var temp43 = memory[0x40:0x60];\n            return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0631;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = allowance(var2, var3);\n            var temp44 = memory[0x40:0x60];\n            memory[temp44:temp44 + 0x20] = var1;\n            var temp45 = memory[0x40:0x60];\n            return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n        } else if (var0 == 0xf7654176) {\n            // Dispatch table entry for split()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x065c;\n            var1 = split();\n            var temp46 = memory[0x40:0x60];\n            memory[temp46:temp46 + 0x20] = !!var1;\n            var temp47 = memory[0x40:0x60];\n            return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n        } else { stop(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_070C:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0703; }\n        \n        label_06EF:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_06EF; }\n        \n        label_0703:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_070C;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_070C;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) {\n        memory[0x00:0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        memory[0x20:0x40] = 0x03;\n        return storage[0x00] - storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0a9c;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_1EE3(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x0b31;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1EFC(var2, var3);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x0c03;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1EE3(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x01) {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = arg2;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            var temp5 = arg1;\n            var temp6 = storage[0x05] + 0x01;\n            storage[0x05] = temp6;\n            memory[0x00:0x20] = 0x05;\n            var temp7 = keccak256(memory[0x00:0x20]) + (temp6 - 0x01);\n            storage[temp7] = (temp5 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp7] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp5 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            storage[temp8] = (storage[temp8] & ~0xff) | 0x01;\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = arg2;\n            var temp10 = memory[0x40:0x60];\n            log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        }\n    }\n    \n    function balances(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function _totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function burn(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 <= var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] - arg0 < 0x1043561a8829300000) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0efb;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg0;\n        var1 = func_1EE3(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x0f53;\n        var2 = storage[0x00];\n        var3 = arg0;\n        var1 = func_1EE3(var2, var3);\n        storage[0x00] = var1;\n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, msg.sender]);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        return 0x01;\n    }\n    \n    function getReserve() returns (var r0) { return address(this).balance; }\n    \n    function allowed(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_113E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_1135; }\n        \n        label_1121:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1121; }\n        \n        label_1135:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_113E;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_113E;\n        }\n    }\n    \n    function SellTokens(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x01;\n    \n        if (arg0 < 0x0de0b6b3a7640000) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value < 0x0324b0) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] - arg0 < 0x1043561a8829300000) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg0) { revert(memory[0x00:0x00]); }\n    \n        var2 = address(this);\n        var var4 = storage[0x00];\n        var var5 = storage[0x00] - arg0 * 0x0de0b6b3a7640000;\n    \n        if (!var4) { assert(); }\n    \n        var temp0 = var5 / var4;\n        var0 = temp0;\n        var4 = 0x0de0b6b3a7640000;\n        var5 = var4;\n        var var6 = var0 ** 0x02;\n    \n        if (!var5) { assert(); }\n    \n        var5 = var6 / var5;\n        var6 = 0x0de0b6b3a7640000;\n        var var7 = var0 ** 0x02;\n    \n        if (!var6) { assert(); }\n    \n        var5 = var7 / var6 * var5;\n    \n        if (!var4) { assert(); }\n    \n        var temp1 = 0x0de0b6b3a7640000 - var5 / var4;\n        var0 = temp1;\n        var4 = 0x8ac7230489e80000;\n        var5 = var0 * (address(var2 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value) * 0x09;\n    \n        if (!var4) { assert(); }\n    \n        var0 = var5 / var4;\n        var4 = 0x0a;\n        var5 = storage[0x00];\n        var6 = arg0 * (address(var2 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value) * 0x24;\n    \n        if (!var5) { assert(); }\n    \n        var5 = var6 / var5;\n    \n        if (!var4) { assert(); }\n    \n        var3 = var5 / var4;\n    \n        if (var3 <= var0) { revert(memory[0x00:0x00]); }\n    \n        if (var0 >= address(var2 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = storage[temp3] - temp2;\n        storage[0x00] = storage[0x00] - temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, msg.sender]);\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp2;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, 0xffffffffffffffffffffffffffffffffffffffff & 0x00]);\n        var temp8 = var0;\n        var temp9 = memory[0x40:0x60];\n        var temp10;\n        temp10, memory[temp9:temp9 + 0x00] = address(msg.sender).call.gas(!temp8 * 0x08fc).value(temp8)(memory[temp9:temp9 + memory[0x40:0x60] - temp9]);\n        var4 = !temp10;\n    \n        if (!var4) { return var0; }\n    \n        var temp11 = returndata.length;\n        memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= var0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x154c;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_1EE3(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x15e1;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_1EFC(var2, var3);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x01) {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = arg1;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            var temp3 = arg0;\n            var temp4 = storage[0x05] + 0x01;\n            storage[0x05] = temp4;\n            memory[0x00:0x20] = 0x05;\n            var temp5 = keccak256(memory[0x00:0x20]) + (temp4 - 0x01);\n            storage[temp5] = (temp3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp5] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp3 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            storage[temp6] = (storage[temp6] & ~0xff) | 0x01;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = arg1;\n            var temp8 = memory[0x40:0x60];\n            log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        }\n    }\n    \n    function BuyTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var1 = address(this);\n        var var5 = storage[0x00];\n        var var6 = address(var1 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value * 0x04 * 0x02 * 0x0de0b6b3a7640000;\n    \n        if (!var5) { assert(); }\n    \n        var2 = var6 / var5;\n    \n        if (msg.value < var2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var1;\n        var5 = address(temp0 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value;\n        var6 = address(temp0 & 0xffffffffffffffffffffffffffffffffffffffff).balance - 0x0324b0 * 0x0de0b6b3a7640000;\n    \n        if (!var5) { assert(); }\n    \n        var temp1 = var6 / var5;\n        var0 = temp1;\n        var5 = 0x02;\n        var6 = var0 + 0x0de0b6b3a7640000;\n    \n        if (!var5) { assert(); }\n    \n        var temp2 = var6 / var5;\n        var3 = temp2;\n        var5 = 0x02;\n        var6 = var3;\n        var var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp3 = var6 / var5;\n        var3 = temp3;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp4 = var6 / var5;\n        var3 = temp4;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp5 = var6 / var5;\n        var3 = temp5;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp6 = var6 / var5;\n        var3 = temp6;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp7 = var6 / var5;\n        var3 = temp7;\n        var0 = var3;\n        var5 = 0x02;\n        var6 = var0 + 0x0de0b6b3a7640000;\n    \n        if (!var5) { assert(); }\n    \n        var temp8 = var6 / var5;\n        var3 = temp8;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp9 = var6 / var5;\n        var3 = temp9;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp10 = var6 / var5;\n        var3 = temp10;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp11 = var6 / var5;\n        var3 = temp11;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var temp12 = var6 / var5;\n        var3 = temp12;\n        var5 = 0x02;\n        var6 = var3;\n        var7 = var0 * 0x0de0b6b3a7640000;\n    \n        if (!var6) { assert(); }\n    \n        var6 = var3 + var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var3 = var6 / var5;\n        var temp13 = var3 - 0x0de0b6b3a7640000;\n        var0 = temp13;\n        var5 = 0x0de0b6b3a7640000;\n        var6 = var0 * storage[0x00];\n    \n        if (!var5) { assert(); }\n    \n        var0 = var6 / var5;\n        var5 = 0x04;\n        var6 = address(var1 & 0xffffffffffffffffffffffffffffffffffffffff).balance - msg.value;\n        var7 = msg.value - 0x0324b0 * storage[0x00];\n    \n        if (!var6) { assert(); }\n    \n        var6 = var7 / var6;\n    \n        if (!var5) { assert(); }\n    \n        var4 = var6 / var5;\n    \n        if (var4 < var0) { revert(memory[0x00:0x00]); }\n    \n        var temp14 = var0;\n        storage[0x00] = storage[0x00] + temp14;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp15 = keccak256(memory[0x00:0x40]);\n        storage[temp15] = storage[temp15] + temp14;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) == !!0x01) {\n            var temp16 = var0;\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = temp16;\n            var temp18 = memory[0x40:0x60];\n            log(memory[temp18:temp18 + (temp17 + 0x20) - temp18], [0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, msg.sender]);\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = temp16;\n            var temp20 = memory[0x40:0x60];\n            log(memory[temp20:temp20 + (temp19 + 0x20) - temp20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, msg.sender]);\n            return temp16;\n        } else {\n            var temp21 = storage[0x05] + 0x01;\n            storage[0x05] = temp21;\n            memory[0x00:0x20] = 0x05;\n            var temp22 = keccak256(memory[0x00:0x20]) + (temp21 - 0x01);\n            storage[temp22] = msg.sender | (storage[temp22] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var temp23 = keccak256(memory[0x00:0x40]);\n            storage[temp23] = (storage[temp23] & ~0xff) | 0x01;\n            var temp24 = var0;\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = temp24;\n            var temp26 = memory[0x40:0x60];\n            log(memory[temp26:temp26 + (temp25 + 0x20) - temp26], [0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, msg.sender]);\n            var temp27 = memory[0x40:0x60];\n            memory[temp27:temp27 + 0x20] = temp24;\n            var temp28 = memory[0x40:0x60];\n            log(memory[temp28:temp28 + (temp27 + 0x20) - temp28], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, msg.sender]);\n            return temp24;\n        }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function split() returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var1 = address(this);\n        var var4 = storage[0x00];\n        var var5 = address(var1 & 0xffffffffffffffffffffffffffffffffffffffff).balance * 0x04 * 0x0a;\n    \n        if (!var4) { assert(); }\n    \n        var2 = var5 / var4;\n    \n        if (var2 <= 0x0a) { revert(memory[0x00:0x00]); }\n    \n        var2 = var2 * 0x0a;\n        var3 = 0x00;\n    \n        if (var3 >= storage[0x05]) {\n        label_1E93:\n            var temp0 = var2;\n            storage[0x00] = storage[0x00] * temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x734b7c838092bed0c73268b7a2cb67b07305321ec5c5610480c2c4c5d43d698e]);\n            return 0x01;\n        } else {\n        label_1E01:\n            var4 = var2;\n            var5 = 0x03;\n            var var6 = 0x00;\n            var var7 = 0x05;\n            var var8 = var3;\n        \n            if (var8 >= storage[var7]) { assert(); }\n        \n            memory[0x00:0x20] = var7;\n            var temp3 = var6;\n            memory[temp3:temp3 + 0x20] = storage[keccak256(memory[0x00:0x20]) + var8] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x00 + temp4 + 0x20]);\n            storage[temp5] = storage[temp5] * var4;\n            var3 = var3 + 0x01;\n        \n            if (var3 >= storage[0x05]) { goto label_1E93; }\n            else { goto label_1E01; }\n        }\n    }\n    \n    function func_1EE3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1EFC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 37.75140142440796,
	"usage": {
		"completion_tokens": 478,
		"prompt_tokens": 13200,
		"total_tokens": 13678
	}
}