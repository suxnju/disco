{
	"address": "0xb9fbe1315824a466d05df4882ffac592ce9c009a",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity code for the given decompiled code:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint256) public contributions;\n    mapping(address => uint256) public refundable;\n    address public owner;\n    address public beneficiary;\n    uint256 public round = 0;\n    uint256 public startTime;\n    uint256 public duration;\n    uint256 public hardCap;\n\n    function propose(address _proposer, string _prop1, string _prop2, string _prop3, string _prop4, string _prop5, uint256 _value1, uint256 _value2, uint256 _value3, uint256 _value4) public {\n        // implementation depends on the logic\n    }\n\n    function initialize(address _beneficiary) public {\n        require(msg.sender == owner);\n        beneficiary = _beneficiary;\n    }\n\n    function setRefundable(address _contributor, uint256 _value) public {\n        require(msg.sender == owner);\n        refundable[_contributor] = _value;\n    }\n\n    function getContributions(address _contributor) public view returns (uint256) {\n        return contributions[_contributor];\n    }\n\n    function refund(address _contributor) public {\n        require(refundable[_contributor] > 0);\n        uint256 refundAmount = refundable[_contributor];\n        refundable[_contributor] = 0;\n        _contributor.transfer(refundAmount);\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == owner);\n        owner = newOwner;\n    }\n\n    function reset(uint256 newStartTime, uint256 newDuration, uint256 newHardCap) public {\n        require(msg.sender == owner);\n        startTime = newStartTime;\n        duration = newDuration;\n        hardCap = newHardCap;\n        round++;\n    }\n\n    function duration() public view returns (uint256) {\n        return duration;\n    }\n\n    function startTime() public view returns (uint256) {\n        return startTime;\n    }\n\n    function hardCap() public view returns (uint256) {\n        return hardCap;\n    }\n\n    function owner() public view returns (address) {\n        return owner;\n    }\n\n    function round() public view returns (uint256) {\n        return round;\n    }\n\n    function beneficiary() public view returns (address) {\n        return beneficiary;\n    }\n}\n```\n\nNote: The propose function was not implemented because its logic was not clear from the given decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471525,
	"id": "chatcmpl-8Muc1FQkyC2YFqaYDC6NubQ46ndEO",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x0ef845df) {\n            // Dispatch table entry for propose(address,string,string,string,string,string,uint256,uint256,uint256,uint256)\n            var var1 = 0x02bb;\n            var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp0 = msg.data[0x24:0x44] + 0x04;\n            var temp1 = msg.data[temp0:temp0 + 0x20];\n            var temp2 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp1;\n            memory[temp2 + 0x20:temp2 + 0x20 + temp1] = msg.data[temp0 + 0x20:temp0 + 0x20 + temp1];\n            var var3 = temp2;\n            var temp3 = msg.data[0x44:0x64] + 0x04;\n            var temp4 = msg.data[temp3:temp3 + 0x20];\n            var temp5 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp5 + (temp4 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp5:temp5 + 0x20] = temp4;\n            memory[temp5 + 0x20:temp5 + 0x20 + temp4] = msg.data[temp3 + 0x20:temp3 + 0x20 + temp4];\n            var var4 = temp5;\n            var temp6 = msg.data[0x64:0x84] + 0x04;\n            var temp7 = msg.data[temp6:temp6 + 0x20];\n            var temp8 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp8:temp8 + 0x20] = temp7;\n            memory[temp8 + 0x20:temp8 + 0x20 + temp7] = msg.data[temp6 + 0x20:temp6 + 0x20 + temp7];\n            var var5 = temp8;\n            var temp9 = msg.data[0x84:0xa4] + 0x04;\n            var temp10 = msg.data[temp9:temp9 + 0x20];\n            var temp11 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp11 + (temp10 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp11:temp11 + 0x20] = temp10;\n            memory[temp11 + 0x20:temp11 + 0x20 + temp10] = msg.data[temp9 + 0x20:temp9 + 0x20 + temp10];\n            var var6 = temp11;\n            var temp12 = msg.data[0xa4:0xc4] + 0x04;\n            var temp13 = msg.data[temp12:temp12 + 0x20];\n            var temp14 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp14 + (temp13 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp14:temp14 + 0x20] = temp13;\n            memory[temp14 + 0x20:temp14 + 0x20 + temp13] = msg.data[temp12 + 0x20:temp12 + 0x20 + temp13];\n            var var7 = temp14;\n            var var8 = msg.data[0xc4:0xe4];\n            var var9 = msg.data[0xe4:0x0104];\n            var var10 = msg.data[0x0104:0x0124];\n            var var11 = msg.data[0x0124:0x0144];\n            propose(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11);\n            stop();\n        } else if (var0 == 0x0fb5a6b4) {\n            // Dispatch table entry for duration()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d2;\n            var2 = duration();\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = var2;\n            var temp16 = memory[0x40:0x60];\n            return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n        } else if (var0 == 0x146ca531) {\n            // Dispatch table entry for round()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02fd;\n            var2 = round();\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = var2;\n            var temp18 = memory[0x40:0x60];\n            return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n        } else if (var0 == 0x38af3eed) {\n            // Dispatch table entry for beneficiary()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0328;\n            var2 = beneficiary();\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp20 = memory[0x40:0x60];\n            return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n        } else if (var0 == 0x3f19d043) {\n            // Dispatch table entry for getContributions(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ab;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = getContributions(var2);\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = var1;\n            var temp22 = memory[0x40:0x60];\n            return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n        } else if (var0 == 0x41c0e1b5) {\n            // Dispatch table entry for kill()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03d6;\n        \n            if (msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { selfdestruct(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff); }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x51dc78df) {\n            // Dispatch table entry for roundContribution(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0403;\n            var2 = msg.data[0x04:0x24];\n            var2 = roundContribution(var2);\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = var2;\n            var temp24 = memory[0x40:0x60];\n            return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n        } else if (var0 == 0x68ec0d99) {\n            // Dispatch table entry for refundable(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x045a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = refundable(var2);\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = var2;\n            var temp26 = memory[0x40:0x60];\n            return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n        } else if (var0 == 0x752430df) {\n            // Dispatch table entry for proposals(uint256,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2, var3, var4, var5, var6, var7, var8, var9, var10, var11 = proposals(var2, var3);\n            var temp27 = memory[0x40:0x60];\n            var var12 = temp27;\n            memory[var12:var12 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp28 = var12 + 0x20;\n            var var13 = temp28;\n            var var14 = var13 + 0x20;\n            var var15 = var14 + 0x20;\n            var var16 = var15 + 0x20;\n            var var17 = var16 + 0x20;\n            var temp29 = var17 + 0x20;\n            memory[temp29:temp29 + 0x20] = var8;\n            var temp30 = temp29 + 0x20;\n            memory[temp30:temp30 + 0x20] = var9;\n            var temp31 = temp30 + 0x20;\n            memory[temp31:temp31 + 0x20] = var10;\n            var temp32 = temp31 + 0x20;\n            memory[temp32:temp32 + 0x20] = var11;\n            var temp33 = temp32 + 0x20;\n            memory[var13:var13 + 0x20] = temp33 - var12;\n            var temp34 = var3;\n            memory[temp33:temp33 + 0x20] = memory[temp34:temp34 + 0x20];\n            var var18 = temp33 + 0x20;\n            var var20 = memory[temp34:temp34 + 0x20];\n            var var19 = temp34 + 0x20;\n            var var21 = var20;\n            var var22 = var18;\n            var var23 = var19;\n            var var24 = 0x00;\n        \n            if (var24 >= var21) {\n            label_0555:\n                var temp35 = var20;\n                var18 = temp35 + var18;\n                var19 = temp35 & 0x1f;\n            \n                if (!var19) {\n                    var temp36 = var18;\n                    memory[var14:var14 + 0x20] = temp36 - var12;\n                    var temp37 = var4;\n                    memory[temp36:temp36 + 0x20] = memory[temp37:temp37 + 0x20];\n                    var18 = temp36 + 0x20;\n                    var19 = temp37 + 0x20;\n                    var20 = memory[temp37:temp37 + 0x20];\n                    var21 = var20;\n                    var22 = var18;\n                    var23 = var19;\n                    var24 = 0x00;\n                \n                    if (var24 >= var21) {\n                    label_05BB:\n                        var temp38 = var20;\n                        var18 = temp38 + var18;\n                        var19 = temp38 & 0x1f;\n                    \n                        if (!var19) {\n                            var temp39 = var18;\n                            memory[var15:var15 + 0x20] = temp39 - var12;\n                            var temp40 = var5;\n                            memory[temp39:temp39 + 0x20] = memory[temp40:temp40 + 0x20];\n                            var18 = temp39 + 0x20;\n                            var19 = temp40 + 0x20;\n                            var20 = memory[temp40:temp40 + 0x20];\n                            var21 = var20;\n                            var22 = var18;\n                            var23 = var19;\n                            var24 = 0x00;\n                        \n                            if (var24 >= var21) {\n                            label_0621:\n                                var temp41 = var20;\n                                var18 = temp41 + var18;\n                                var19 = temp41 & 0x1f;\n                            \n                                if (!var19) {\n                                    var temp42 = var18;\n                                    memory[var16:var16 + 0x20] = temp42 - var12;\n                                    var temp43 = var6;\n                                    memory[temp42:temp42 + 0x20] = memory[temp43:temp43 + 0x20];\n                                    var18 = temp42 + 0x20;\n                                    var19 = temp43 + 0x20;\n                                    var20 = memory[temp43:temp43 + 0x20];\n                                    var21 = var20;\n                                    var22 = var18;\n                                    var23 = var19;\n                                    var24 = 0x00;\n                                \n                                    if (var24 >= var21) {\n                                    label_0687:\n                                        var temp44 = var20;\n                                        var18 = temp44 + var18;\n                                        var19 = temp44 & 0x1f;\n                                    \n                                        if (!var19) {\n                                            var temp45 = var18;\n                                            memory[var17:var17 + 0x20] = temp45 - var12;\n                                            var temp46 = var7;\n                                            memory[temp45:temp45 + 0x20] = memory[temp46:temp46 + 0x20];\n                                            var18 = temp45 + 0x20;\n                                            var19 = temp46 + 0x20;\n                                            var20 = memory[temp46:temp46 + 0x20];\n                                            var21 = var20;\n                                            var22 = var18;\n                                            var23 = var19;\n                                            var24 = 0x00;\n                                        \n                                            if (var24 >= var21) {\n                                            label_06ED:\n                                                var temp47 = var20;\n                                                var18 = temp47 + var18;\n                                                var19 = temp47 & 0x1f;\n                                            \n                                                if (!var19) {\n                                                    var temp48 = memory[0x40:0x60];\n                                                    return memory[temp48:temp48 + var18 - temp48];\n                                                } else {\n                                                    var temp49 = var19;\n                                                    var temp50 = var18 - temp49;\n                                                    memory[temp50:temp50 + 0x20] = ~(0x0100 ** (0x20 - temp49) - 0x01) & memory[temp50:temp50 + 0x20];\n                                                    var temp51 = memory[0x40:0x60];\n                                                    return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n                                                }\n                                            } else {\n                                            label_06DB:\n                                                var temp52 = var24;\n                                                memory[var22 + temp52:var22 + temp52 + 0x20] = memory[var23 + temp52:var23 + temp52 + 0x20];\n                                                var24 = temp52 + 0x20;\n                                            \n                                                if (var24 >= var21) { goto label_06ED; }\n                                                else { goto label_06DB; }\n                                            }\n                                        } else {\n                                            var temp53 = var19;\n                                            var temp54 = var18 - temp53;\n                                            memory[temp54:temp54 + 0x20] = ~(0x0100 ** (0x20 - temp53) - 0x01) & memory[temp54:temp54 + 0x20];\n                                            var temp55 = temp54 + 0x20;\n                                            memory[var17:var17 + 0x20] = temp55 - var12;\n                                            var temp56 = var7;\n                                            memory[temp55:temp55 + 0x20] = memory[temp56:temp56 + 0x20];\n                                            var18 = temp55 + 0x20;\n                                            var20 = memory[temp56:temp56 + 0x20];\n                                            var19 = temp56 + 0x20;\n                                            var21 = var20;\n                                            var22 = var18;\n                                            var23 = var19;\n                                            var24 = 0x00;\n                                        \n                                            if (var24 >= var21) { goto label_06ED; }\n                                            else { goto label_06DB; }\n                                        }\n                                    } else {\n                                    label_0675:\n                                        var temp57 = var24;\n                                        memory[var22 + temp57:var22 + temp57 + 0x20] = memory[var23 + temp57:var23 + temp57 + 0x20];\n                                        var24 = temp57 + 0x20;\n                                    \n                                        if (var24 >= var21) { goto label_0687; }\n                                        else { goto label_0675; }\n                                    }\n                                } else {\n                                    var temp58 = var19;\n                                    var temp59 = var18 - temp58;\n                                    memory[temp59:temp59 + 0x20] = ~(0x0100 ** (0x20 - temp58) - 0x01) & memory[temp59:temp59 + 0x20];\n                                    var temp60 = temp59 + 0x20;\n                                    memory[var16:var16 + 0x20] = temp60 - var12;\n                                    var temp61 = var6;\n                                    memory[temp60:temp60 + 0x20] = memory[temp61:temp61 + 0x20];\n                                    var18 = temp60 + 0x20;\n                                    var20 = memory[temp61:temp61 + 0x20];\n                                    var19 = temp61 + 0x20;\n                                    var21 = var20;\n                                    var22 = var18;\n                                    var23 = var19;\n                                    var24 = 0x00;\n                                \n                                    if (var24 >= var21) { goto label_0687; }\n                                    else { goto label_0675; }\n                                }\n                            } else {\n                            label_060F:\n                                var temp62 = var24;\n                                memory[var22 + temp62:var22 + temp62 + 0x20] = memory[var23 + temp62:var23 + temp62 + 0x20];\n                                var24 = temp62 + 0x20;\n                            \n                                if (var24 >= var21) { goto label_0621; }\n                                else { goto label_060F; }\n                            }\n                        } else {\n                            var temp63 = var19;\n                            var temp64 = var18 - temp63;\n                            memory[temp64:temp64 + 0x20] = ~(0x0100 ** (0x20 - temp63) - 0x01) & memory[temp64:temp64 + 0x20];\n                            var temp65 = temp64 + 0x20;\n                            memory[var15:var15 + 0x20] = temp65 - var12;\n                            var temp66 = var5;\n                            memory[temp65:temp65 + 0x20] = memory[temp66:temp66 + 0x20];\n                            var18 = temp65 + 0x20;\n                            var20 = memory[temp66:temp66 + 0x20];\n                            var19 = temp66 + 0x20;\n                            var21 = var20;\n                            var22 = var18;\n                            var23 = var19;\n                            var24 = 0x00;\n                        \n                            if (var24 >= var21) { goto label_0621; }\n                            else { goto label_060F; }\n                        }\n                    } else {\n                    label_05A9:\n                        var temp67 = var24;\n                        memory[var22 + temp67:var22 + temp67 + 0x20] = memory[var23 + temp67:var23 + temp67 + 0x20];\n                        var24 = temp67 + 0x20;\n                    \n                        if (var24 >= var21) { goto label_05BB; }\n                        else { goto label_05A9; }\n                    }\n                } else {\n                    var temp68 = var19;\n                    var temp69 = var18 - temp68;\n                    memory[temp69:temp69 + 0x20] = ~(0x0100 ** (0x20 - temp68) - 0x01) & memory[temp69:temp69 + 0x20];\n                    var temp70 = temp69 + 0x20;\n                    memory[var14:var14 + 0x20] = temp70 - var12;\n                    var temp71 = var4;\n                    memory[temp70:temp70 + 0x20] = memory[temp71:temp71 + 0x20];\n                    var18 = temp70 + 0x20;\n                    var19 = temp71 + 0x20;\n                    var20 = memory[temp71:temp71 + 0x20];\n                    var21 = var20;\n                    var22 = var18;\n                    var23 = var19;\n                    var24 = 0x00;\n                \n                    if (var24 >= var21) { goto label_05BB; }\n                    else { goto label_05A9; }\n                }\n            } else {\n            label_0543:\n                var temp72 = var24;\n                memory[var22 + temp72:var22 + temp72 + 0x20] = memory[var23 + temp72:var23 + temp72 + 0x20];\n                var24 = temp72 + 0x20;\n            \n                if (var24 >= var21) { goto label_0555; }\n                else { goto label_0543; }\n            }\n        } else if (var0 == 0x78e97925) {\n            // Dispatch table entry for startTime()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x074a;\n            var2 = startTime();\n            var temp73 = memory[0x40:0x60];\n            memory[temp73:temp73 + 0x20] = var2;\n            var temp74 = memory[0x40:0x60];\n            return memory[temp74:temp74 + (temp73 + 0x20) - temp74];\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0775;\n            var2 = owner();\n            var temp75 = memory[0x40:0x60];\n            memory[temp75:temp75 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp76 = memory[0x40:0x60];\n            return memory[temp76:temp76 + (temp75 + 0x20) - temp76];\n        } else if (var0 == 0xa6801cbd) {\n            // Dispatch table entry for reset(uint256,uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x07f6;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64];\n            reset(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xc4d66de8) {\n            // Dispatch table entry for initialize(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0839;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            initialize(var2);\n            stop();\n        } else if (var0 == 0xc50c0d78) {\n            // Dispatch table entry for proposalInfos(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x087c;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2, var3, var4 = proposalInfos(var2);\n            var temp77 = memory[0x40:0x60];\n            memory[temp77:temp77 + 0x20] = var2;\n            var temp78 = temp77 + 0x20;\n            memory[temp78:temp78 + 0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp79 = temp78 + 0x20;\n            memory[temp79:temp79 + 0x20] = var4;\n            var temp80 = memory[0x40:0x60];\n            return memory[temp80:temp80 + (temp79 + 0x20) - temp80];\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x090d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            transferOwnership(var2);\n            stop();\n        } else if (var0 == 0xf54a2ddc) {\n            // Dispatch table entry for setRefundable(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x095a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            setRefundable(var2, var3);\n            stop();\n        } else if (var0 == 0xfa89401a) {\n            // Dispatch table entry for refund(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x099d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            refund(var2);\n            stop();\n        } else if (var0 == 0xfb86a404) {\n            // Dispatch table entry for hardCap()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x09b4;\n            var2 = hardCap();\n            var temp81 = memory[0x40:0x60];\n            memory[temp81:temp81 + 0x20] = var2;\n            var temp82 = memory[0x40:0x60];\n            return memory[temp82:temp82 + (temp81 + 0x20) - temp82];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function propose(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40])] != 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x07] + storage[0x09];\n        var var1 = 0x0a2a;\n        var1 = func_19C9();\n    \n        if (var1 >= var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value < storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        var0 = temp0;\n        memory[0x40:0x60] = var0 + 0x0140;\n        var temp1 = arg0;\n        memory[var0:var0 + 0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = var0 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = arg3;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = arg6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + 0x20] = arg7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + 0x20] = arg8;\n        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = arg9;\n        memory[0x00:0x20] = storage[0x01];\n        memory[0x20:0x40] = 0x03;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp10;\n        var temp11 = keccak256(memory[0x00:0x40]);\n        var1 = temp11;\n        var temp12 = var1;\n        storage[temp12] = (memory[var0:var0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp12] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp13 = memory[var0 + 0x20:var0 + 0x20 + 0x20];\n        var var2 = 0x0b59;\n        var var3 = var1 + 0x01;\n        var var4 = temp13 + 0x20;\n        var var5 = memory[temp13:temp13 + 0x20];\n        var2 = func_1A06(var3, var4, var5);\n        var temp14 = memory[var0 + 0x40:var0 + 0x40 + 0x20];\n        var2 = 0x0b76;\n        var3 = var1 + 0x02;\n        var5 = memory[temp14:temp14 + 0x20];\n        var4 = temp14 + 0x20;\n        var2 = func_1A06(var3, var4, var5);\n        var temp15 = memory[var0 + 0x60:var0 + 0x60 + 0x20];\n        var2 = 0x0b93;\n        var3 = var1 + 0x03;\n        var5 = memory[temp15:temp15 + 0x20];\n        var4 = temp15 + 0x20;\n        var2 = func_1A06(var3, var4, var5);\n        var temp16 = memory[var0 + 0x80:var0 + 0x80 + 0x20];\n        var2 = 0x0bb0;\n        var3 = var1 + 0x04;\n        var4 = temp16 + 0x20;\n        var5 = memory[temp16:temp16 + 0x20];\n        var2 = func_1A06(var3, var4, var5);\n        var temp17 = memory[var0 + 0xa0:var0 + 0xa0 + 0x20];\n        var2 = 0x0bcd;\n        var3 = var1 + 0x05;\n        var4 = temp17 + 0x20;\n        var5 = memory[temp17:temp17 + 0x20];\n        var2 = func_1A06(var3, var4, var5);\n        var temp18 = var0;\n        var temp19 = var1;\n        storage[temp19 + 0x06] = memory[temp18 + 0xc0:temp18 + 0xc0 + 0x20];\n        storage[temp19 + 0x07] = memory[temp18 + 0xe0:temp18 + 0xe0 + 0x20];\n        storage[temp19 + 0x08] = memory[temp18 + 0x0100:temp18 + 0x0100 + 0x20];\n        storage[temp19 + 0x09] = memory[temp18 + 0x0120:temp18 + 0x0120 + 0x20];\n        var temp20 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp20 + 0x60;\n        memory[temp20:temp20 + 0x20] = msg.value;\n        var temp21 = temp20 + 0x20;\n        memory[temp21:temp21 + 0x20] = msg.sender;\n        memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = storage[0x01];\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp22 = keccak256(memory[0x00:0x40]);\n        storage[temp22] = memory[temp20:temp20 + 0x20];\n        var temp23 = temp22 + 0x01;\n        storage[temp23] = (memory[temp20 + 0x20:temp20 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp23] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp22 + 0x02] = memory[temp20 + 0x40:temp20 + 0x40 + 0x20];\n        var0 = 0x0cf4;\n        memory[0x00:0x20] = storage[0x01];\n        memory[0x20:0x40] = 0x05;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = msg.value;\n        var0 = func_19D1(var1, var2);\n        memory[0x00:0x20] = storage[0x01];\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp24 = memory[0x40:0x60];\n        memory[temp24:temp24 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp25 = memory[0x40:0x60];\n        log(memory[temp25:temp25 + (temp24 + 0x20) - temp25], [0x46ea865f00e44354e9a94289893da72054251f9d0131ecbc6ce70c3c77c60195, storage[0x01]]);\n    }\n    \n    function duration() returns (var r0) { return storage[0x09]; }\n    \n    function round() returns (var r0) { return storage[0x01]; }\n    \n    function beneficiary() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function getContributions(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function roundContribution(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function refundable(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function proposals(var arg0, var arg1) returns (var arg0, var arg1, var r2, var r3, var r4, var r5, var r6, var r7, var r8, var r9) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = temp0;\n        var temp1 = arg1 + 0x01;\n        var temp2 = storage[temp1];\n        var temp3 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r2 = temp4;\n        r3 = temp1;\n        r4 = temp3;\n        memory[r2:r2 + 0x20] = r4;\n        r5 = r2 + 0x20;\n        r6 = r3;\n        var temp5 = storage[r6];\n        r7 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n    \n        if (!r7) {\n        label_0FA2:\n            var temp6 = r2;\n            var temp7 = arg1;\n            r2 = temp7;\n            arg1 = temp6;\n            var temp8 = r2 + 0x02;\n            var temp9 = storage[temp8];\n            var temp10 = (!(temp9 & 0x01) * 0x0100 - 0x01 & temp9) / 0x02;\n            var temp11 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp11 + (temp10 + 0x1f) / 0x20 * 0x20 + 0x20;\n            r3 = temp11;\n            r4 = temp8;\n            r5 = temp10;\n            memory[r3:r3 + 0x20] = r5;\n            r6 = r3 + 0x20;\n            r7 = r4;\n            var temp12 = storage[r7];\n            r8 = (!(temp12 & 0x01) * 0x0100 - 0x01 & temp12) / 0x02;\n        \n            if (!r8) {\n            label_1040:\n                var temp13 = r2;\n                r2 = r3;\n                r3 = temp13;\n                var temp14 = r3 + 0x03;\n                var temp15 = storage[temp14];\n                var temp16 = (!(temp15 & 0x01) * 0x0100 - 0x01 & temp15) / 0x02;\n                var temp17 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n                r4 = temp17;\n                r5 = temp14;\n                r6 = temp16;\n                memory[r4:r4 + 0x20] = r6;\n                r7 = r4 + 0x20;\n                r8 = r5;\n                var temp18 = storage[r8];\n                r9 = (!(temp18 & 0x01) * 0x0100 - 0x01 & temp18) / 0x02;\n            \n                if (!r9) {\n                label_10DE:\n                    var temp19 = r4;\n                    var temp20 = r3;\n                    r4 = temp20;\n                    r3 = temp19;\n                    var temp21 = r4 + 0x04;\n                    var temp22 = storage[temp21];\n                    var temp23 = (!(temp22 & 0x01) * 0x0100 - 0x01 & temp22) / 0x02;\n                    var temp24 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp24 + (temp23 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    r5 = temp24;\n                    r6 = temp21;\n                    r7 = temp23;\n                    memory[r5:r5 + 0x20] = r7;\n                    r8 = r5 + 0x20;\n                    r9 = r6;\n                    var temp25 = storage[r9];\n                    var var8 = (!(temp25 & 0x01) * 0x0100 - 0x01 & temp25) / 0x02;\n                \n                    if (!var8) {\n                    label_117C:\n                        var temp26 = r4;\n                        var temp27 = r5;\n                        r5 = temp26;\n                        r4 = temp27;\n                        var temp28 = r5 + 0x05;\n                        var temp29 = storage[temp28];\n                        var temp30 = (!(temp29 & 0x01) * 0x0100 - 0x01 & temp29) / 0x02;\n                        var temp31 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp31 + (temp30 + 0x1f) / 0x20 * 0x20 + 0x20;\n                        r6 = temp31;\n                        r7 = temp28;\n                        r8 = temp30;\n                        memory[r6:r6 + 0x20] = r8;\n                        r9 = r6 + 0x20;\n                        var8 = r7;\n                        var temp32 = storage[var8];\n                        var var9 = (!(temp32 & 0x01) * 0x0100 - 0x01 & temp32) / 0x02;\n                    \n                        if (!var9) {\n                        label_121A:\n                            var temp33 = r5;\n                            r5 = r6;\n                            r6 = storage[temp33 + 0x06];\n                            r7 = storage[temp33 + 0x07];\n                            r8 = storage[temp33 + 0x08];\n                            r9 = storage[temp33 + 0x09];\n                            return arg0, arg1, r2, r3, r4, r5, r6, r7, r8, r9;\n                        } else if (0x1f < var9) {\n                            var temp34 = r9;\n                            var temp35 = temp34 + var9;\n                            r9 = temp35;\n                            memory[0x00:0x20] = var8;\n                            var temp36 = keccak256(memory[0x00:0x20]);\n                            memory[temp34:temp34 + 0x20] = storage[temp36];\n                            var8 = temp36 + 0x01;\n                            var9 = temp34 + 0x20;\n                        \n                            if (r9 <= var9) { goto label_1211; }\n                        \n                        label_11FD:\n                            var temp37 = var8;\n                            var temp38 = var9;\n                            memory[temp38:temp38 + 0x20] = storage[temp37];\n                            var8 = temp37 + 0x01;\n                            var9 = temp38 + 0x20;\n                        \n                            if (r9 > var9) { goto label_11FD; }\n                        \n                        label_1211:\n                            var temp39 = r9;\n                            var temp40 = temp39 + (var9 - temp39 & 0x1f);\n                            var9 = temp39;\n                            r9 = temp40;\n                            goto label_121A;\n                        } else {\n                            var temp41 = r9;\n                            memory[temp41:temp41 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n                            r9 = temp41 + 0x20;\n                            var9 = var9;\n                            goto label_121A;\n                        }\n                    } else if (0x1f < var8) {\n                        var temp42 = r8;\n                        var temp43 = temp42 + var8;\n                        r8 = temp43;\n                        memory[0x00:0x20] = r9;\n                        var temp44 = keccak256(memory[0x00:0x20]);\n                        memory[temp42:temp42 + 0x20] = storage[temp44];\n                        r9 = temp44 + 0x01;\n                        var8 = temp42 + 0x20;\n                    \n                        if (r8 <= var8) { goto label_1173; }\n                    \n                    label_115F:\n                        var temp45 = r9;\n                        var temp46 = var8;\n                        memory[temp46:temp46 + 0x20] = storage[temp45];\n                        r9 = temp45 + 0x01;\n                        var8 = temp46 + 0x20;\n                    \n                        if (r8 > var8) { goto label_115F; }\n                    \n                    label_1173:\n                        var temp47 = r8;\n                        var temp48 = temp47 + (var8 - temp47 & 0x1f);\n                        var8 = temp47;\n                        r8 = temp48;\n                        goto label_117C;\n                    } else {\n                        var temp49 = r8;\n                        memory[temp49:temp49 + 0x20] = storage[r9] / 0x0100 * 0x0100;\n                        r8 = temp49 + 0x20;\n                        var8 = var8;\n                        goto label_117C;\n                    }\n                } else if (0x1f < r9) {\n                    var temp50 = r7;\n                    var temp51 = temp50 + r9;\n                    r7 = temp51;\n                    memory[0x00:0x20] = r8;\n                    var temp52 = keccak256(memory[0x00:0x20]);\n                    memory[temp50:temp50 + 0x20] = storage[temp52];\n                    r8 = temp52 + 0x01;\n                    r9 = temp50 + 0x20;\n                \n                    if (r7 <= r9) { goto label_10D5; }\n                \n                label_10C1:\n                    var temp53 = r8;\n                    var temp54 = r9;\n                    memory[temp54:temp54 + 0x20] = storage[temp53];\n                    r8 = temp53 + 0x01;\n                    r9 = temp54 + 0x20;\n                \n                    if (r7 > r9) { goto label_10C1; }\n                \n                label_10D5:\n                    var temp55 = r7;\n                    var temp56 = temp55 + (r9 - temp55 & 0x1f);\n                    r9 = temp55;\n                    r7 = temp56;\n                    goto label_10DE;\n                } else {\n                    var temp57 = r7;\n                    memory[temp57:temp57 + 0x20] = storage[r8] / 0x0100 * 0x0100;\n                    r7 = temp57 + 0x20;\n                    r9 = r9;\n                    goto label_10DE;\n                }\n            } else if (0x1f < r8) {\n                var temp58 = r6;\n                var temp59 = temp58 + r8;\n                r6 = temp59;\n                memory[0x00:0x20] = r7;\n                var temp60 = keccak256(memory[0x00:0x20]);\n                memory[temp58:temp58 + 0x20] = storage[temp60];\n                r7 = temp60 + 0x01;\n                r8 = temp58 + 0x20;\n            \n                if (r6 <= r8) { goto label_1037; }\n            \n            label_1023:\n                var temp61 = r7;\n                var temp62 = r8;\n                memory[temp62:temp62 + 0x20] = storage[temp61];\n                r7 = temp61 + 0x01;\n                r8 = temp62 + 0x20;\n            \n                if (r6 > r8) { goto label_1023; }\n            \n            label_1037:\n                var temp63 = r6;\n                var temp64 = temp63 + (r8 - temp63 & 0x1f);\n                r8 = temp63;\n                r6 = temp64;\n                goto label_1040;\n            } else {\n                var temp65 = r6;\n                memory[temp65:temp65 + 0x20] = storage[r7] / 0x0100 * 0x0100;\n                r6 = temp65 + 0x20;\n                r8 = r8;\n                goto label_1040;\n            }\n        } else if (0x1f < r7) {\n            var temp66 = r5;\n            var temp67 = temp66 + r7;\n            r5 = temp67;\n            memory[0x00:0x20] = r6;\n            var temp68 = keccak256(memory[0x00:0x20]);\n            memory[temp66:temp66 + 0x20] = storage[temp68];\n            r6 = temp68 + 0x01;\n            r7 = temp66 + 0x20;\n        \n            if (r5 <= r7) { goto label_0F99; }\n        \n        label_0F85:\n            var temp69 = r6;\n            var temp70 = r7;\n            memory[temp70:temp70 + 0x20] = storage[temp69];\n            r6 = temp69 + 0x01;\n            r7 = temp70 + 0x20;\n        \n            if (r5 > r7) { goto label_0F85; }\n        \n        label_0F99:\n            var temp71 = r5;\n            var temp72 = temp71 + (r7 - temp71 & 0x1f);\n            r7 = temp71;\n            r5 = temp72;\n            goto label_0FA2;\n        } else {\n            var temp73 = r5;\n            memory[temp73:temp73 + 0x20] = storage[r6] / 0x0100 * 0x0100;\n            r5 = temp73 + 0x20;\n            r7 = r7;\n            goto label_0FA2;\n        }\n    }\n    \n    function startTime() returns (var r0) { return storage[0x07]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function reset(var arg0, var arg1, var arg2) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x07] + storage[0x09];\n        var var1 = 0x12d1;\n        var1 = func_19C9();\n    \n        if (var1 < var0) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x01] <= 0x00) {\n        label_1381:\n            storage[0x07] = arg0;\n            storage[0x09] = arg1;\n            storage[0x08] = arg2;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = storage[0x01];\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xd49620ec6474d72a2f05dd60f5ab59ad0d2d9d29090cb3b81defc30db3d510c3]);\n            storage[0x01] = storage[0x01] + 0x01;\n            return;\n        } else {\n            memory[0x00:0x20] = storage[0x01];\n            memory[0x20:0x40] = 0x05;\n            var temp2 = address(this).balance - storage[keccak256(memory[0x00:0x40])];\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x00] = address(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n            var0 = !temp4;\n        \n            if (!var0) { goto label_1381; }\n        \n            var temp5 = returndata.length;\n            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function initialize(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function proposalInfos(var arg0) returns (var arg0, var r1, var r2) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r2 = storage[temp0 + 0x02];\n        return arg0, r1, r2;\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function setRefundable(var arg0, var arg1) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = arg1;\n    }\n    \n    function refund(var arg0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var var1 = storage[keccak256(memory[0x00:0x40])] > var0;\n    \n        if (!var1) {\n        label_175A:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp1 = storage[keccak256(memory[0x00:0x40])];\n            var0 = temp1;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var1 = 0x185a;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            memory[0x20:0x40] = 0x05;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = var0;\n            var1 = func_19ED(var2, var3);\n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp3 = var0;\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n            var1 = !temp5;\n        \n            if (!var1) {\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp7 = memory[0x40:0x60];\n                log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xdfe4a8c8989865d5117985fe19383af4fbc50754c51da9e8f66b01f0d27830a0]);\n                return;\n            } else {\n                var temp8 = returndata.length;\n                memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var2 = 0x1758;\n            var2 = func_19C9();\n            var1 = var2 < var1;\n            goto label_175A;\n        }\n    }\n    \n    function hardCap() returns (var r0) { return storage[0x08]; }\n    \n    function func_19C9() returns (var r0) { return block.timestamp; }\n    \n    function func_19D1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_19ED(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1A06(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_1A75:\n                var temp4 = arg1;\n                arg1 = 0x1a82;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1A86(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_1A74:\n                    goto label_1A75;\n                } else {\n                label_1A62:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var0 = temp8 + 0x01;\n                    var1 = var1;\n                \n                    if (var1 <= arg2) { goto label_1A74; }\n                    else { goto label_1A62; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_1A75;\n        }\n    }\n    \n    function func_1A86(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1aa8;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_1AA4(arg1, var0); }\n    \n    label_1A95:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_1A95; }\n    \n        arg0 = func_1AA4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1AA4(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x0ef845df) {\n            // Dispatch table entry for propose(address,string,string,string,string,string,uint256,uint256,uint256,uint256)\n            var var1 = 0x02bb;\n            var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp0 = msg.data[0x24:0x44] + 0x04;\n            var temp1 = msg.data[temp0:temp0 + 0x20];\n            var temp2 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp1;\n            memory[temp2 + 0x20:temp2 + 0x20 + temp1] = msg.data[temp0 + 0x20:temp0 + 0x20 + temp1];\n            var var3 = temp2;\n            var temp3 = msg.data[0x44:0x64] + 0x04;\n            var temp4 = msg.data[temp3:temp3 + 0x20];\n            var temp5 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp5 + (temp4 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp5:temp5 + 0x20] = temp4;\n            memory[temp5 + 0x20:temp5 + 0x20 + temp4] = msg.data[temp3 + 0x20:temp3 + 0x20 + temp4];\n            var var4 = temp5;\n            var temp6 = msg.data[0x64:0x84] + 0x04;\n            var temp7 = msg.data[temp6:temp6 + 0x20];\n            var temp8 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp8:temp8 + 0x20] = temp7;\n            memory[temp8 + 0x20:temp8 + 0x20 + temp7] = msg.data[temp6 + 0x20:temp6 + 0x20 + temp7];\n            var var5 = temp8;\n            var temp9 = msg.data[0x84:0xa4] + 0x04;\n            var temp10 = msg.data[temp9:temp9 + 0x20];\n            var temp11 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp11 + (temp10 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp11:temp11 + 0x20] = temp10;\n            memory[temp11 + 0x20:temp11 + 0x20 + temp10] = msg.data[temp9 + 0x20:temp9 + 0x20 + temp10];\n            var var6 = temp11;\n            var temp12 = msg.data[0xa4:0xc4] + 0x04;\n            var temp13 = msg.data[temp12:temp12 + 0x20];\n            var temp14 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp14 + (temp13 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp14:temp14 + 0x20] = temp13;\n            memory[temp14 + 0x20:temp14 + 0x20 + temp13] = msg.data[temp12 + 0x20:temp12 + 0x20 + temp13];\n            var var7 = temp14;\n            var var8 = msg.data[0xc4:0xe4];\n            var var9 = msg.data[0xe4:0x0104];\n            var var10 = msg.data[0x0104:0x0124];\n            var var11 = msg.data[0x0124:0x0144];\n            propose(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11);\n            stop();\n        } else if (var0 == 0x0fb5a6b4) {\n            // Dispatch table entry for duration()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d2;\n            var2 = duration();\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = var2;\n            var temp16 = memory[0x40:0x60];\n            return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n        } else if (var0 == 0x146ca531) {\n            // Dispatch table entry for round()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02fd;\n            var2 = round();\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = var2;\n            var temp18 = memory[0x40:0x60];\n            return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n        } else if (var0 == 0x38af3eed) {\n            // Dispatch table entry for beneficiary()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0328;\n            var2 = beneficiary();\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp20 = memory[0x40:0x60];\n            return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n        } else if (var0 == 0x3f19d043) {\n            // Dispatch table entry for getContributions(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ab;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = getContributions(var2);\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = var1;\n            var temp22 = memory[0x40:0x60];\n            return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n        } else if (var0 == 0x41c0e1b5) {\n            // Dispatch table entry for kill()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03d6;\n        \n            if (msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { selfdestruct(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff); }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x51dc78df) {\n            // Dispatch table entry for roundContribution(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0403;\n            var2 = msg.data[0x04:0x24];\n            var2 = roundContribution(var2);\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = var2;\n            var temp24 = memory[0x40:0x60];\n            return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n        } else if (var0 == 0x68ec0d99) {\n            // Dispatch table entry for refundable(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x045a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = refundable(var2);\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = var2;\n            var temp26 = memory[0x40:0x60];\n            return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n        } else if (var0 == 0x752430df) {\n            // Dispatch table entry for proposals(uint256,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2, var3, var4, var5, var6, var7, var8, var9, var10, var11 = proposals(var2, var3);\n            var temp27 = memory[0x40:0x60];\n            var var12 = temp27;\n            memory[var12:var12 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp28 = var12 + 0x20;\n            var var13 = temp28;\n            var var14 = var13 + 0x20;\n            var var15 = var14 + 0x20;\n            var var16 = var15 + 0x20;\n            var var17 = var16 + 0x20;\n            var temp29 = var17 + 0x20;\n            memory[temp29:temp29 + 0x20] = var8;\n            var temp30 = temp29 + 0x20;\n            memory[temp30:temp30 + 0x20] = var9;\n            var temp31 = temp30 + 0x20;\n            memory[temp31:temp31 + 0x20] = var10;\n            var temp32 = temp31 + 0x20;\n            memory[temp32:temp32 + 0x20] = var11;\n            var temp33 = temp32 + 0x20;\n            memory[var13:var13 + 0x20] = temp33 - var12;\n            var temp34 = var3;\n            memory[temp33:temp33 + 0x20] = memory[temp34:temp34 + 0x20];\n            var var18 = temp33 + 0x20;\n            var var20 = memory[temp34:temp34 + 0x20];\n            var var19 = temp34 + 0x20;\n            var var21 = var20;\n            var var22 = var18;\n            var var23 = var19;\n            var var24 = 0x00;\n        \n            if (var24 >= var21) {\n            label_0555:\n                var temp35 = var20;\n                var18 = temp35 + var18;\n                var19 = temp35 & 0x1f;\n            \n                if (!var19) {\n                    var temp36 = var18;\n                    memory[var14:var14 + 0x20] = temp36 - var12;\n                    var temp37 = var4;\n                    memory[temp36:temp36 + 0x20] = memory[temp37:temp37 + 0x20];\n                    var18 = temp36 + 0x20;\n                    var19 = temp37 + 0x20;\n                    var20 = memory[temp37:temp37 + 0x20];\n                    var21 = var20;\n                    var22 = var18;\n                    var23 = var19;\n                    var24 = 0x00;\n                \n                    if (var24 >= var21) {\n                    label_05BB:\n                        var temp38 = var20;\n                        var18 = temp38 + var18;\n                        var19 = temp38 & 0x1f;\n                    \n                        if (!var19) {\n                            var temp39 = var18;\n                            memory[var15:var15 + 0x20] = temp39 - var12;\n                            var temp40 = var5;\n                            memory[temp39:temp39 + 0x20] = memory[temp40:temp40 + 0x20];\n                            var18 = temp39 + 0x20;\n                            var19 = temp40 + 0x20;\n                            var20 = memory[temp40:temp40 + 0x20];\n                            var21 = var20;\n                            var22 = var18;\n                            var23 = var19;\n                            var24 = 0x00;\n                        \n                            if (var24 >= var21) {\n                            label_0621:\n                                var temp41 = var20;\n                                var18 = temp41 + var18;\n                                var19 = temp41 & 0x1f;\n                            \n                                if (!var19) {\n                                    var temp42 = var18;\n                                    memory[var16:var16 + 0x20] = temp42 - var12;\n                                    var temp43 = var6;\n                                    memory[temp42:temp42 + 0x20] = memory[temp43:temp43 + 0x20];\n                                    var18 = temp42 + 0x20;\n                                    var19 = temp43 + 0x20;\n                                    var20 = memory[temp43:temp43 + 0x20];\n                                    var21 = var20;\n                                    var22 = var18;\n                                    var23 = var19;\n                                    var24 = 0x00;\n                                \n                                    if (var24 >= var21) {\n                                    label_0687:\n                                        var temp44 = var20;\n                                        var18 = temp44 + var18;\n                                        var19 = temp44 & 0x1f;\n                                    \n                                        if (!var19) {\n                                            var temp45 = var18;\n                                            memory[var17:var17 + 0x20] = temp45 - var12;\n                                            var temp46 = var7;\n                                            memory[temp45:temp45 + 0x20] = memory[temp46:temp46 + 0x20];\n                                            var18 = temp45 + 0x20;\n                                            var19 = temp46 + 0x20;\n                                            var20 = memory[temp46:temp46 + 0x20];\n                                            var21 = var20;\n                                            var22 = var18;\n                                            var23 = var19;\n                                            var24 = 0x00;\n                                        \n                                            if (var24 >= var21) {\n                                            label_06ED:\n                                                var temp47 = var20;\n                                                var18 = temp47 + var18;\n                                                var19 = temp47 & 0x1f;\n                                            \n                                                if (!var19) {\n                                                    var temp48 = memory[0x40:0x60];\n                                                    return memory[temp48:temp48 + var18 - temp48];\n                                                } else {\n                                                    var temp49 = var19;\n                                                    var temp50 = var18 - temp49;\n                                                    memory[temp50:temp50 + 0x20] = ~(0x0100 ** (0x20 - temp49) - 0x01) & memory[temp50:temp50 + 0x20];\n                                                    var temp51 = memory[0x40:0x60];\n                                                    return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n                                                }\n                                            } else {\n                                            label_06DB:\n                                                var temp52 = var24;\n                                                memory[var22 + temp52:var22 + temp52 + 0x20] = memory[var23 + temp52:var23 + temp52 + 0x20];\n                                                var24 = temp52 + 0x20;\n                                            \n                                                if (var24 >= var21) { goto label_06ED; }\n                                                else { goto label_06DB; }\n                                            }\n                                        } else {\n                                            var temp53 = var19;\n                                            var temp54 = var18 - temp53;\n                                            memory[temp54:temp54 + 0x20] = ~(0x0100 ** (0x20 - temp53) - 0x01) & memory[temp54:temp54 + 0x20];\n                                            var temp55 = temp54 + 0x20;\n                                            memory[var17:var17 + 0x20] = temp55 - var12;\n                                            var temp56 = var7;\n                                            memory[temp55:temp55 + 0x20] = memory[temp56:temp56 + 0x20];\n                                            var18 = temp55 + 0x20;\n                                            var20 = memory[temp56:temp56 + 0x20];\n                                            var19 = temp56 + 0x20;\n                                            var21 = var20;\n                                            var22 = var18;\n                                            var23 = var19;\n                                            var24 = 0x00;\n                                        \n                                            if (var24 >= var21) { goto label_06ED; }\n                                            else { goto label_06DB; }\n                                        }\n                                    } else {\n                                    label_0675:\n                                        var temp57 = var24;\n                                        memory[var22 + temp57:var22 + temp57 + 0x20] = memory[var23 + temp57:var23 + temp57 + 0x20];\n                                        var24 = temp57 + 0x20;\n                                    \n                                        if (var24 >= var21) { goto label_0687; }\n                                        else { goto label_0675; }\n                                    }\n                                } else {\n                                    var temp58 = var19;\n                                    var temp59 = var18 - temp58;\n                                    memory[temp59:temp59 + 0x20] = ~(0x0100 ** (0x20 - temp58) - 0x01) & memory[temp59:temp59 + 0x20];\n                                    var temp60 = temp59 + 0x20;\n                                    memory[var16:var16 + 0x20] = temp60 - var12;\n                                    var temp61 = var6;\n                                    memory[temp60:temp60 + 0x20] = memory[temp61:temp61 + 0x20];\n                                    var18 = temp60 + 0x20;\n                                    var20 = memory[temp61:temp61 + 0x20];\n                                    var19 = temp61 + 0x20;\n                                    var21 = var20;\n                                    var22 = var18;\n                                    var23 = var19;\n                                    var24 = 0x00;\n                                \n                                    if (var24 >= var21) { goto label_0687; }\n                                    else { goto label_0675; }\n                                }\n                            } else {\n                            label_060F:\n                                var temp62 = var24;\n                                memory[var22 + temp62:var22 + temp62 + 0x20] = memory[var23 + temp62:var23 + temp62 + 0x20];\n                                var24 = temp62 + 0x20;\n                            \n                                if (var24 >= var21) { goto label_0621; }\n                                else { goto label_060F; }\n                            }\n                        } else {\n                            var temp63 = var19;\n                            var temp64 = var18 - temp63;\n                            memory[temp64:temp64 + 0x20] = ~(0x0100 ** (0x20 - temp63) - 0x01) & memory[temp64:temp64 + 0x20];\n                            var temp65 = temp64 + 0x20;\n                            memory[var15:var15 + 0x20] = temp65 - var12;\n                            var temp66 = var5;\n                            memory[temp65:temp65 + 0x20] = memory[temp66:temp66 + 0x20];\n                            var18 = temp65 + 0x20;\n                            var20 = memory[temp66:temp66 + 0x20];\n                            var19 = temp66 + 0x20;\n                            var21 = var20;\n                            var22 = var18;\n                            var23 = var19;\n                            var24 = 0x00;\n                        \n                            if (var24 >= var21) { goto label_0621; }\n                            else { goto label_060F; }\n                        }\n                    } else {\n                    label_05A9:\n                        var temp67 = var24;\n                        memory[var22 + temp67:var22 + temp67 + 0x20] = memory[var23 + temp67:var23 + temp67 + 0x20];\n                        var24 = temp67 + 0x20;\n                    \n                        if (var24 >= var21) { goto label_05BB; }\n                        else { goto label_05A9; }\n                    }\n                } else {\n                    var temp68 = var19;\n                    var temp69 = var18 - temp68;\n                    memory[temp69:temp69 + 0x20] = ~(0x0100 ** (0x20 - temp68) - 0x01) & memory[temp69:temp69 + 0x20];\n                    var temp70 = temp69 + 0x20;\n                    memory[var14:var14 + 0x20] = temp70 - var12;\n                    var temp71 = var4;\n                    memory[temp70:temp70 + 0x20] = memory[temp71:temp71 + 0x20];\n                    var18 = temp70 + 0x20;\n                    var19 = temp71 + 0x20;\n                    var20 = memory[temp71:temp71 + 0x20];\n                    var21 = var20;\n                    var22 = var18;\n                    var23 = var19;\n                    var24 = 0x00;\n                \n                    if (var24 >= var21) { goto label_05BB; }\n                    else { goto label_05A9; }\n                }\n            } else {\n            label_0543:\n                var temp72 = var24;\n                memory[var22 + temp72:var22 + temp72 + 0x20] = memory[var23 + temp72:var23 + temp72 + 0x20];\n                var24 = temp72 + 0x20;\n            \n                if (var24 >= var21) { goto label_0555; }\n                else { goto label_0543; }\n            }\n        } else if (var0 == 0x78e97925) {\n            // Dispatch table entry for startTime()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x074a;\n            var2 = startTime();\n            var temp73 = memory[0x40:0x60];\n            memory[temp73:temp73 + 0x20] = var2;\n            var temp74 = memory[0x40:0x60];\n            return memory[temp74:temp74 + (temp73 + 0x20) - temp74];\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0775;\n            var2 = owner();\n            var temp75 = memory[0x40:0x60];\n            memory[temp75:temp75 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp76 = memory[0x40:0x60];\n            return memory[temp76:temp76 + (temp75 + 0x20) - temp76];\n        } else if (var0 == 0xa6801cbd) {\n            // Dispatch table entry for reset(uint256,uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x07f6;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64];\n            reset(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xc4d66de8) {\n            // Dispatch table entry for initialize(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0839;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            initialize(var2);\n            stop();\n        } else if (var0 == 0xc50c0d78) {\n            // Dispatch table entry for proposalInfos(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x087c;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2, var3, var4 = proposalInfos(var2);\n            var temp77 = memory[0x40:0x60];\n            memory[temp77:temp77 + 0x20] = var2;\n            var temp78 = temp77 + 0x20;\n            memory[temp78:temp78 + 0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp79 = temp78 + 0x20;\n            memory[temp79:temp79 + 0x20] = var4;\n            var temp80 = memory[0x40:0x60];\n            return memory[temp80:temp80 + (temp79 + 0x20) - temp80];\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x090d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            transferOwnership(var2);\n            stop();\n        } else if (var0 == 0xf54a2ddc) {\n            // Dispatch table entry for setRefundable(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x095a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            setRefundable(var2, var3);\n            stop();\n        } else if (var0 == 0xfa89401a) {\n            // Dispatch table entry for refund(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x099d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            refund(var2);\n            stop();\n        } else if (var0 == 0xfb86a404) {\n            // Dispatch table entry for hardCap()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x09b4;\n            var2 = hardCap();\n            var temp81 = memory[0x40:0x60];\n            memory[temp81:temp81 + 0x20] = var2;\n            var temp82 = memory[0x40:0x60];\n            return memory[temp82:temp82 + (temp81 + 0x20) - temp82];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function propose(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40])] != 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x07] + storage[0x09];\n        var var1 = 0x0a2a;\n        var1 = func_19C9();\n    \n        if (var1 >= var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value < storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        var0 = temp0;\n        memory[0x40:0x60] = var0 + 0x0140;\n        var temp1 = arg0;\n        memory[var0:var0 + 0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = var0 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = arg3;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = arg6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + 0x20] = arg7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + 0x20] = arg8;\n        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = arg9;\n        memory[0x00:0x20] = storage[0x01];\n        memory[0x20:0x40] = 0x03;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp10;\n        var temp11 = keccak256(memory[0x00:0x40]);\n        var1 = temp11;\n        var temp12 = var1;\n        storage[temp12] = (memory[var0:var0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp12] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp13 = memory[var0 + 0x20:var0 + 0x20 + 0x20];\n        var var2 = 0x0b59;\n        var var3 = var1 + 0x01;\n        var var4 = temp13 + 0x20;\n        var var5 = memory[temp13:temp13 + 0x20];\n        var2 = func_1A06(var3, var4, var5);\n        var temp14 = memory[var0 + 0x40:var0 + 0x40 + 0x20];\n        var2 = 0x0b76;\n        var3 = var1 + 0x02;\n        var5 = memory[temp14:temp14 + 0x20];\n        var4 = temp14 + 0x20;\n        var2 = func_1A06(var3, var4, var5);\n        var temp15 = memory[var0 + 0x60:var0 + 0x60 + 0x20];\n        var2 = 0x0b93;\n        var3 = var1 + 0x03;\n        var5 = memory[temp15:temp15 + 0x20];\n        var4 = temp15 + 0x20;\n        var2 = func_1A06(var3, var4, var5);\n        var temp16 = memory[var0 + 0x80:var0 + 0x80 + 0x20];\n        var2 = 0x0bb0;\n        var3 = var1 + 0x04;\n        var4 = temp16 + 0x20;\n        var5 = memory[temp16:temp16 + 0x20];\n        var2 = func_1A06(var3, var4, var5);\n        var temp17 = memory[var0 + 0xa0:var0 + 0xa0 + 0x20];\n        var2 = 0x0bcd;\n        var3 = var1 + 0x05;\n        var4 = temp17 + 0x20;\n        var5 = memory[temp17:temp17 + 0x20];\n        var2 = func_1A06(var3, var4, var5);\n        var temp18 = var0;\n        var temp19 = var1;\n        storage[temp19 + 0x06] = memory[temp18 + 0xc0:temp18 + 0xc0 + 0x20];\n        storage[temp19 + 0x07] = memory[temp18 + 0xe0:temp18 + 0xe0 + 0x20];\n        storage[temp19 + 0x08] = memory[temp18 + 0x0100:temp18 + 0x0100 + 0x20];\n        storage[temp19 + 0x09] = memory[temp18 + 0x0120:temp18 + 0x0120 + 0x20];\n        var temp20 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp20 + 0x60;\n        memory[temp20:temp20 + 0x20] = msg.value;\n        var temp21 = temp20 + 0x20;\n        memory[temp21:temp21 + 0x20] = msg.sender;\n        memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = storage[0x01];\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp22 = keccak256(memory[0x00:0x40]);\n        storage[temp22] = memory[temp20:temp20 + 0x20];\n        var temp23 = temp22 + 0x01;\n        storage[temp23] = (memory[temp20 + 0x20:temp20 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp23] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp22 + 0x02] = memory[temp20 + 0x40:temp20 + 0x40 + 0x20];\n        var0 = 0x0cf4;\n        memory[0x00:0x20] = storage[0x01];\n        memory[0x20:0x40] = 0x05;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = msg.value;\n        var0 = func_19D1(var1, var2);\n        memory[0x00:0x20] = storage[0x01];\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp24 = memory[0x40:0x60];\n        memory[temp24:temp24 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp25 = memory[0x40:0x60];\n        log(memory[temp25:temp25 + (temp24 + 0x20) - temp25], [0x46ea865f00e44354e9a94289893da72054251f9d0131ecbc6ce70c3c77c60195, storage[0x01]]);\n    }\n    \n    function duration() returns (var r0) { return storage[0x09]; }\n    \n    function round() returns (var r0) { return storage[0x01]; }\n    \n    function beneficiary() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function getContributions(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function roundContribution(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function refundable(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function proposals(var arg0, var arg1) returns (var arg0, var arg1, var r2, var r3, var r4, var r5, var r6, var r7, var r8, var r9) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = temp0;\n        var temp1 = arg1 + 0x01;\n        var temp2 = storage[temp1];\n        var temp3 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r2 = temp4;\n        r3 = temp1;\n        r4 = temp3;\n        memory[r2:r2 + 0x20] = r4;\n        r5 = r2 + 0x20;\n        r6 = r3;\n        var temp5 = storage[r6];\n        r7 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n    \n        if (!r7) {\n        label_0FA2:\n            var temp6 = r2;\n            var temp7 = arg1;\n            r2 = temp7;\n            arg1 = temp6;\n            var temp8 = r2 + 0x02;\n            var temp9 = storage[temp8];\n            var temp10 = (!(temp9 & 0x01) * 0x0100 - 0x01 & temp9) / 0x02;\n            var temp11 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp11 + (temp10 + 0x1f) / 0x20 * 0x20 + 0x20;\n            r3 = temp11;\n            r4 = temp8;\n            r5 = temp10;\n            memory[r3:r3 + 0x20] = r5;\n            r6 = r3 + 0x20;\n            r7 = r4;\n            var temp12 = storage[r7];\n            r8 = (!(temp12 & 0x01) * 0x0100 - 0x01 & temp12) / 0x02;\n        \n            if (!r8) {\n            label_1040:\n                var temp13 = r2;\n                r2 = r3;\n                r3 = temp13;\n                var temp14 = r3 + 0x03;\n                var temp15 = storage[temp14];\n                var temp16 = (!(temp15 & 0x01) * 0x0100 - 0x01 & temp15) / 0x02;\n                var temp17 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n                r4 = temp17;\n                r5 = temp14;\n                r6 = temp16;\n                memory[r4:r4 + 0x20] = r6;\n                r7 = r4 + 0x20;\n                r8 = r5;\n                var temp18 = storage[r8];\n                r9 = (!(temp18 & 0x01) * 0x0100 - 0x01 & temp18) / 0x02;\n            \n                if (!r9) {\n                label_10DE:\n                    var temp19 = r4;\n                    var temp20 = r3;\n                    r4 = temp20;\n                    r3 = temp19;\n                    var temp21 = r4 + 0x04;\n                    var temp22 = storage[temp21];\n                    var temp23 = (!(temp22 & 0x01) * 0x0100 - 0x01 & temp22) / 0x02;\n                    var temp24 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp24 + (temp23 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    r5 = temp24;\n                    r6 = temp21;\n                    r7 = temp23;\n                    memory[r5:r5 + 0x20] = r7;\n                    r8 = r5 + 0x20;\n                    r9 = r6;\n                    var temp25 = storage[r9];\n                    var var8 = (!(temp25 & 0x01) * 0x0100 - 0x01 & temp25) / 0x02;\n                \n                    if (!var8) {\n                    label_117C:\n                        var temp26 = r4;\n                        var temp27 = r5;\n                        r5 = temp26;\n                        r4 = temp27;\n                        var temp28 = r5 + 0x05;\n                        var temp29 = storage[temp28];\n                        var temp30 = (!(temp29 & 0x01) * 0x0100 - 0x01 & temp29) / 0x02;\n                        var temp31 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp31 + (temp30 + 0x1f) / 0x20 * 0x20 + 0x20;\n                        r6 = temp31;\n                        r7 = temp28;\n                        r8 = temp30;\n                        memory[r6:r6 + 0x20] = r8;\n                        r9 = r6 + 0x20;\n                        var8 = r7;\n                        var temp32 = storage[var8];\n                        var var9 = (!(temp32 & 0x01) * 0x0100 - 0x01 & temp32) / 0x02;\n                    \n                        if (!var9) {\n                        label_121A:\n                            var temp33 = r5;\n                            r5 = r6;\n                            r6 = storage[temp33 + 0x06];\n                            r7 = storage[temp33 + 0x07];\n                            r8 = storage[temp33 + 0x08];\n                            r9 = storage[temp33 + 0x09];\n                            return arg0, arg1, r2, r3, r4, r5, r6, r7, r8, r9;\n                        } else if (0x1f < var9) {\n                            var temp34 = r9;\n                            var temp35 = temp34 + var9;\n                            r9 = temp35;\n                            memory[0x00:0x20] = var8;\n                            var temp36 = keccak256(memory[0x00:0x20]);\n                            memory[temp34:temp34 + 0x20] = storage[temp36];\n                            var8 = temp36 + 0x01;\n                            var9 = temp34 + 0x20;\n                        \n                            if (r9 <= var9) { goto label_1211; }\n                        \n                        label_11FD:\n                            var temp37 = var8;\n                            var temp38 = var9;\n                            memory[temp38:temp38 + 0x20] = storage[temp37];\n                            var8 = temp37 + 0x01;\n                            var9 = temp38 + 0x20;\n                        \n                            if (r9 > var9) { goto label_11FD; }\n                        \n                        label_1211:\n                            var temp39 = r9;\n                            var temp40 = temp39 + (var9 - temp39 & 0x1f);\n                            var9 = temp39;\n                            r9 = temp40;\n                            goto label_121A;\n                        } else {\n                            var temp41 = r9;\n                            memory[temp41:temp41 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n                            r9 = temp41 + 0x20;\n                            var9 = var9;\n                            goto label_121A;\n                        }\n                    } else if (0x1f < var8) {\n                        var temp42 = r8;\n                        var temp43 = temp42 + var8;\n                        r8 = temp43;\n                        memory[0x00:0x20] = r9;\n                        var temp44 = keccak256(memory[0x00:0x20]);\n                        memory[temp42:temp42 + 0x20] = storage[temp44];\n                        r9 = temp44 + 0x01;\n                        var8 = temp42 + 0x20;\n                    \n                        if (r8 <= var8) { goto label_1173; }\n                    \n                    label_115F:\n                        var temp45 = r9;\n                        var temp46 = var8;\n                        memory[temp46:temp46 + 0x20] = storage[temp45];\n                        r9 = temp45 + 0x01;\n                        var8 = temp46 + 0x20;\n                    \n                        if (r8 > var8) { goto label_115F; }\n                    \n                    label_1173:\n                        var temp47 = r8;\n                        var temp48 = temp47 + (var8 - temp47 & 0x1f);\n                        var8 = temp47;\n                        r8 = temp48;\n                        goto label_117C;\n                    } else {\n                        var temp49 = r8;\n                        memory[temp49:temp49 + 0x20] = storage[r9] / 0x0100 * 0x0100;\n                        r8 = temp49 + 0x20;\n                        var8 = var8;\n                        goto label_117C;\n                    }\n                } else if (0x1f < r9) {\n                    var temp50 = r7;\n                    var temp51 = temp50 + r9;\n                    r7 = temp51;\n                    memory[0x00:0x20] = r8;\n                    var temp52 = keccak256(memory[0x00:0x20]);\n                    memory[temp50:temp50 + 0x20] = storage[temp52];\n                    r8 = temp52 + 0x01;\n                    r9 = temp50 + 0x20;\n                \n                    if (r7 <= r9) { goto label_10D5; }\n                \n                label_10C1:\n                    var temp53 = r8;\n                    var temp54 = r9;\n                    memory[temp54:temp54 + 0x20] = storage[temp53];\n                    r8 = temp53 + 0x01;\n                    r9 = temp54 + 0x20;\n                \n                    if (r7 > r9) { goto label_10C1; }\n                \n                label_10D5:\n                    var temp55 = r7;\n                    var temp56 = temp55 + (r9 - temp55 & 0x1f);\n                    r9 = temp55;\n                    r7 = temp56;\n                    goto label_10DE;\n                } else {\n                    var temp57 = r7;\n                    memory[temp57:temp57 + 0x20] = storage[r8] / 0x0100 * 0x0100;\n                    r7 = temp57 + 0x20;\n                    r9 = r9;\n                    goto label_10DE;\n                }\n            } else if (0x1f < r8) {\n                var temp58 = r6;\n                var temp59 = temp58 + r8;\n                r6 = temp59;\n                memory[0x00:0x20] = r7;\n                var temp60 = keccak256(memory[0x00:0x20]);\n                memory[temp58:temp58 + 0x20] = storage[temp60];\n                r7 = temp60 + 0x01;\n                r8 = temp58 + 0x20;\n            \n                if (r6 <= r8) { goto label_1037; }\n            \n            label_1023:\n                var temp61 = r7;\n                var temp62 = r8;\n                memory[temp62:temp62 + 0x20] = storage[temp61];\n                r7 = temp61 + 0x01;\n                r8 = temp62 + 0x20;\n            \n                if (r6 > r8) { goto label_1023; }\n            \n            label_1037:\n                var temp63 = r6;\n                var temp64 = temp63 + (r8 - temp63 & 0x1f);\n                r8 = temp63;\n                r6 = temp64;\n                goto label_1040;\n            } else {\n                var temp65 = r6;\n                memory[temp65:temp65 + 0x20] = storage[r7] / 0x0100 * 0x0100;\n                r6 = temp65 + 0x20;\n                r8 = r8;\n                goto label_1040;\n            }\n        } else if (0x1f < r7) {\n            var temp66 = r5;\n            var temp67 = temp66 + r7;\n            r5 = temp67;\n            memory[0x00:0x20] = r6;\n            var temp68 = keccak256(memory[0x00:0x20]);\n            memory[temp66:temp66 + 0x20] = storage[temp68];\n            r6 = temp68 + 0x01;\n            r7 = temp66 + 0x20;\n        \n            if (r5 <= r7) { goto label_0F99; }\n        \n        label_0F85:\n            var temp69 = r6;\n            var temp70 = r7;\n            memory[temp70:temp70 + 0x20] = storage[temp69];\n            r6 = temp69 + 0x01;\n            r7 = temp70 + 0x20;\n        \n            if (r5 > r7) { goto label_0F85; }\n        \n        label_0F99:\n            var temp71 = r5;\n            var temp72 = temp71 + (r7 - temp71 & 0x1f);\n            r7 = temp71;\n            r5 = temp72;\n            goto label_0FA2;\n        } else {\n            var temp73 = r5;\n            memory[temp73:temp73 + 0x20] = storage[r6] / 0x0100 * 0x0100;\n            r5 = temp73 + 0x20;\n            r7 = r7;\n            goto label_0FA2;\n        }\n    }\n    \n    function startTime() returns (var r0) { return storage[0x07]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function reset(var arg0, var arg1, var arg2) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x07] + storage[0x09];\n        var var1 = 0x12d1;\n        var1 = func_19C9();\n    \n        if (var1 < var0) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x01] <= 0x00) {\n        label_1381:\n            storage[0x07] = arg0;\n            storage[0x09] = arg1;\n            storage[0x08] = arg2;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = storage[0x01];\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xd49620ec6474d72a2f05dd60f5ab59ad0d2d9d29090cb3b81defc30db3d510c3]);\n            storage[0x01] = storage[0x01] + 0x01;\n            return;\n        } else {\n            memory[0x00:0x20] = storage[0x01];\n            memory[0x20:0x40] = 0x05;\n            var temp2 = address(this).balance - storage[keccak256(memory[0x00:0x40])];\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x00] = address(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n            var0 = !temp4;\n        \n            if (!var0) { goto label_1381; }\n        \n            var temp5 = returndata.length;\n            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function initialize(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function proposalInfos(var arg0) returns (var arg0, var r1, var r2) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r2 = storage[temp0 + 0x02];\n        return arg0, r1, r2;\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function setRefundable(var arg0, var arg1) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = arg1;\n    }\n    \n    function refund(var arg0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var var1 = storage[keccak256(memory[0x00:0x40])] > var0;\n    \n        if (!var1) {\n        label_175A:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp1 = storage[keccak256(memory[0x00:0x40])];\n            var0 = temp1;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var1 = 0x185a;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            memory[0x20:0x40] = 0x05;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = var0;\n            var1 = func_19ED(var2, var3);\n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp3 = var0;\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n            var1 = !temp5;\n        \n            if (!var1) {\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp7 = memory[0x40:0x60];\n                log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xdfe4a8c8989865d5117985fe19383af4fbc50754c51da9e8f66b01f0d27830a0]);\n                return;\n            } else {\n                var temp8 = returndata.length;\n                memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var2 = 0x1758;\n            var2 = func_19C9();\n            var1 = var2 < var1;\n            goto label_175A;\n        }\n    }\n    \n    function hardCap() returns (var r0) { return storage[0x08]; }\n    \n    function func_19C9() returns (var r0) { return block.timestamp; }\n    \n    function func_19D1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_19ED(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1A06(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_1A75:\n                var temp4 = arg1;\n                arg1 = 0x1a82;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1A86(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_1A74:\n                    goto label_1A75;\n                } else {\n                label_1A62:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var0 = temp8 + 0x01;\n                    var1 = var1;\n                \n                    if (var1 <= arg2) { goto label_1A74; }\n                    else { goto label_1A62; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_1A75;\n        }\n    }\n    \n    function func_1A86(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1aa8;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_1AA4(arg1, var0); }\n    \n    label_1A95:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_1A95; }\n    \n        arg0 = func_1AA4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1AA4(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x0ef845df) {\n            // Dispatch table entry for propose(address,string,string,string,string,string,uint256,uint256,uint256,uint256)\n            var var1 = 0x02bb;\n            var var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp0 = msg.data[0x24:0x44] + 0x04;\n            var temp1 = msg.data[temp0:temp0 + 0x20];\n            var temp2 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp1;\n            memory[temp2 + 0x20:temp2 + 0x20 + temp1] = msg.data[temp0 + 0x20:temp0 + 0x20 + temp1];\n            var var3 = temp2;\n            var temp3 = msg.data[0x44:0x64] + 0x04;\n            var temp4 = msg.data[temp3:temp3 + 0x20];\n            var temp5 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp5 + (temp4 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp5:temp5 + 0x20] = temp4;\n            memory[temp5 + 0x20:temp5 + 0x20 + temp4] = msg.data[temp3 + 0x20:temp3 + 0x20 + temp4];\n            var var4 = temp5;\n            var temp6 = msg.data[0x64:0x84] + 0x04;\n            var temp7 = msg.data[temp6:temp6 + 0x20];\n            var temp8 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp8 + (temp7 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp8:temp8 + 0x20] = temp7;\n            memory[temp8 + 0x20:temp8 + 0x20 + temp7] = msg.data[temp6 + 0x20:temp6 + 0x20 + temp7];\n            var var5 = temp8;\n            var temp9 = msg.data[0x84:0xa4] + 0x04;\n            var temp10 = msg.data[temp9:temp9 + 0x20];\n            var temp11 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp11 + (temp10 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp11:temp11 + 0x20] = temp10;\n            memory[temp11 + 0x20:temp11 + 0x20 + temp10] = msg.data[temp9 + 0x20:temp9 + 0x20 + temp10];\n            var var6 = temp11;\n            var temp12 = msg.data[0xa4:0xc4] + 0x04;\n            var temp13 = msg.data[temp12:temp12 + 0x20];\n            var temp14 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp14 + (temp13 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp14:temp14 + 0x20] = temp13;\n            memory[temp14 + 0x20:temp14 + 0x20 + temp13] = msg.data[temp12 + 0x20:temp12 + 0x20 + temp13];\n            var var7 = temp14;\n            var var8 = msg.data[0xc4:0xe4];\n            var var9 = msg.data[0xe4:0x0104];\n            var var10 = msg.data[0x0104:0x0124];\n            var var11 = msg.data[0x0124:0x0144];\n            propose(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11);\n            stop();\n        } else if (var0 == 0x0fb5a6b4) {\n            // Dispatch table entry for duration()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02d2;\n            var2 = duration();\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = var2;\n            var temp16 = memory[0x40:0x60];\n            return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n        } else if (var0 == 0x146ca531) {\n            // Dispatch table entry for round()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x02fd;\n            var2 = round();\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = var2;\n            var temp18 = memory[0x40:0x60];\n            return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n        } else if (var0 == 0x38af3eed) {\n            // Dispatch table entry for beneficiary()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0328;\n            var2 = beneficiary();\n            var temp19 = memory[0x40:0x60];\n            memory[temp19:temp19 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp20 = memory[0x40:0x60];\n            return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n        } else if (var0 == 0x3f19d043) {\n            // Dispatch table entry for getContributions(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03ab;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = getContributions(var2);\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = var1;\n            var temp22 = memory[0x40:0x60];\n            return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n        } else if (var0 == 0x41c0e1b5) {\n            // Dispatch table entry for kill()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03d6;\n        \n            if (msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { selfdestruct(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff); }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x51dc78df) {\n            // Dispatch table entry for roundContribution(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0403;\n            var2 = msg.data[0x04:0x24];\n            var2 = roundContribution(var2);\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = var2;\n            var temp24 = memory[0x40:0x60];\n            return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n        } else if (var0 == 0x68ec0d99) {\n            // Dispatch table entry for refundable(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x045a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = refundable(var2);\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = var2;\n            var temp26 = memory[0x40:0x60];\n            return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n        } else if (var0 == 0x752430df) {\n            // Dispatch table entry for proposals(uint256,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2, var3, var4, var5, var6, var7, var8, var9, var10, var11 = proposals(var2, var3);\n            var temp27 = memory[0x40:0x60];\n            var var12 = temp27;\n            memory[var12:var12 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp28 = var12 + 0x20;\n            var var13 = temp28;\n            var var14 = var13 + 0x20;\n            var var15 = var14 + 0x20;\n            var var16 = var15 + 0x20;\n            var var17 = var16 + 0x20;\n            var temp29 = var17 + 0x20;\n            memory[temp29:temp29 + 0x20] = var8;\n            var temp30 = temp29 + 0x20;\n            memory[temp30:temp30 + 0x20] = var9;\n            var temp31 = temp30 + 0x20;\n            memory[temp31:temp31 + 0x20] = var10;\n            var temp32 = temp31 + 0x20;\n            memory[temp32:temp32 + 0x20] = var11;\n            var temp33 = temp32 + 0x20;\n            memory[var13:var13 + 0x20] = temp33 - var12;\n            var temp34 = var3;\n            memory[temp33:temp33 + 0x20] = memory[temp34:temp34 + 0x20];\n            var var18 = temp33 + 0x20;\n            var var20 = memory[temp34:temp34 + 0x20];\n            var var19 = temp34 + 0x20;\n            var var21 = var20;\n            var var22 = var18;\n            var var23 = var19;\n            var var24 = 0x00;\n        \n            if (var24 >= var21) {\n            label_0555:\n                var temp35 = var20;\n                var18 = temp35 + var18;\n                var19 = temp35 & 0x1f;\n            \n                if (!var19) {\n                    var temp36 = var18;\n                    memory[var14:var14 + 0x20] = temp36 - var12;\n                    var temp37 = var4;\n                    memory[temp36:temp36 + 0x20] = memory[temp37:temp37 + 0x20];\n                    var18 = temp36 + 0x20;\n                    var19 = temp37 + 0x20;\n                    var20 = memory[temp37:temp37 + 0x20];\n                    var21 = var20;\n                    var22 = var18;\n                    var23 = var19;\n                    var24 = 0x00;\n                \n                    if (var24 >= var21) {\n                    label_05BB:\n                        var temp38 = var20;\n                        var18 = temp38 + var18;\n                        var19 = temp38 & 0x1f;\n                    \n                        if (!var19) {\n                            var temp39 = var18;\n                            memory[var15:var15 + 0x20] = temp39 - var12;\n                            var temp40 = var5;\n                            memory[temp39:temp39 + 0x20] = memory[temp40:temp40 + 0x20];\n                            var18 = temp39 + 0x20;\n                            var19 = temp40 + 0x20;\n                            var20 = memory[temp40:temp40 + 0x20];\n                            var21 = var20;\n                            var22 = var18;\n                            var23 = var19;\n                            var24 = 0x00;\n                        \n                            if (var24 >= var21) {\n                            label_0621:\n                                var temp41 = var20;\n                                var18 = temp41 + var18;\n                                var19 = temp41 & 0x1f;\n                            \n                                if (!var19) {\n                                    var temp42 = var18;\n                                    memory[var16:var16 + 0x20] = temp42 - var12;\n                                    var temp43 = var6;\n                                    memory[temp42:temp42 + 0x20] = memory[temp43:temp43 + 0x20];\n                                    var18 = temp42 + 0x20;\n                                    var19 = temp43 + 0x20;\n                                    var20 = memory[temp43:temp43 + 0x20];\n                                    var21 = var20;\n                                    var22 = var18;\n                                    var23 = var19;\n                                    var24 = 0x00;\n                                \n                                    if (var24 >= var21) {\n                                    label_0687:\n                                        var temp44 = var20;\n                                        var18 = temp44 + var18;\n                                        var19 = temp44 & 0x1f;\n                                    \n                                        if (!var19) {\n                                            var temp45 = var18;\n                                            memory[var17:var17 + 0x20] = temp45 - var12;\n                                            var temp46 = var7;\n                                            memory[temp45:temp45 + 0x20] = memory[temp46:temp46 + 0x20];\n                                            var18 = temp45 + 0x20;\n                                            var19 = temp46 + 0x20;\n                                            var20 = memory[temp46:temp46 + 0x20];\n                                            var21 = var20;\n                                            var22 = var18;\n                                            var23 = var19;\n                                            var24 = 0x00;\n                                        \n                                            if (var24 >= var21) {\n                                            label_06ED:\n                                                var temp47 = var20;\n                                                var18 = temp47 + var18;\n                                                var19 = temp47 & 0x1f;\n                                            \n                                                if (!var19) {\n                                                    var temp48 = memory[0x40:0x60];\n                                                    return memory[temp48:temp48 + var18 - temp48];\n                                                } else {\n                                                    var temp49 = var19;\n                                                    var temp50 = var18 - temp49;\n                                                    memory[temp50:temp50 + 0x20] = ~(0x0100 ** (0x20 - temp49) - 0x01) & memory[temp50:temp50 + 0x20];\n                                                    var temp51 = memory[0x40:0x60];\n                                                    return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n                                                }\n                                            } else {\n                                            label_06DB:\n                                                var temp52 = var24;\n                                                memory[var22 + temp52:var22 + temp52 + 0x20] = memory[var23 + temp52:var23 + temp52 + 0x20];\n                                                var24 = temp52 + 0x20;\n                                            \n                                                if (var24 >= var21) { goto label_06ED; }\n                                                else { goto label_06DB; }\n                                            }\n                                        } else {\n                                            var temp53 = var19;\n                                            var temp54 = var18 - temp53;\n                                            memory[temp54:temp54 + 0x20] = ~(0x0100 ** (0x20 - temp53) - 0x01) & memory[temp54:temp54 + 0x20];\n                                            var temp55 = temp54 + 0x20;\n                                            memory[var17:var17 + 0x20] = temp55 - var12;\n                                            var temp56 = var7;\n                                            memory[temp55:temp55 + 0x20] = memory[temp56:temp56 + 0x20];\n                                            var18 = temp55 + 0x20;\n                                            var20 = memory[temp56:temp56 + 0x20];\n                                            var19 = temp56 + 0x20;\n                                            var21 = var20;\n                                            var22 = var18;\n                                            var23 = var19;\n                                            var24 = 0x00;\n                                        \n                                            if (var24 >= var21) { goto label_06ED; }\n                                            else { goto label_06DB; }\n                                        }\n                                    } else {\n                                    label_0675:\n                                        var temp57 = var24;\n                                        memory[var22 + temp57:var22 + temp57 + 0x20] = memory[var23 + temp57:var23 + temp57 + 0x20];\n                                        var24 = temp57 + 0x20;\n                                    \n                                        if (var24 >= var21) { goto label_0687; }\n                                        else { goto label_0675; }\n                                    }\n                                } else {\n                                    var temp58 = var19;\n                                    var temp59 = var18 - temp58;\n                                    memory[temp59:temp59 + 0x20] = ~(0x0100 ** (0x20 - temp58) - 0x01) & memory[temp59:temp59 + 0x20];\n                                    var temp60 = temp59 + 0x20;\n                                    memory[var16:var16 + 0x20] = temp60 - var12;\n                                    var temp61 = var6;\n                                    memory[temp60:temp60 + 0x20] = memory[temp61:temp61 + 0x20];\n                                    var18 = temp60 + 0x20;\n                                    var20 = memory[temp61:temp61 + 0x20];\n                                    var19 = temp61 + 0x20;\n                                    var21 = var20;\n                                    var22 = var18;\n                                    var23 = var19;\n                                    var24 = 0x00;\n                                \n                                    if (var24 >= var21) { goto label_0687; }\n                                    else { goto label_0675; }\n                                }\n                            } else {\n                            label_060F:\n                                var temp62 = var24;\n                                memory[var22 + temp62:var22 + temp62 + 0x20] = memory[var23 + temp62:var23 + temp62 + 0x20];\n                                var24 = temp62 + 0x20;\n                            \n                                if (var24 >= var21) { goto label_0621; }\n                                else { goto label_060F; }\n                            }\n                        } else {\n                            var temp63 = var19;\n                            var temp64 = var18 - temp63;\n                            memory[temp64:temp64 + 0x20] = ~(0x0100 ** (0x20 - temp63) - 0x01) & memory[temp64:temp64 + 0x20];\n                            var temp65 = temp64 + 0x20;\n                            memory[var15:var15 + 0x20] = temp65 - var12;\n                            var temp66 = var5;\n                            memory[temp65:temp65 + 0x20] = memory[temp66:temp66 + 0x20];\n                            var18 = temp65 + 0x20;\n                            var20 = memory[temp66:temp66 + 0x20];\n                            var19 = temp66 + 0x20;\n                            var21 = var20;\n                            var22 = var18;\n                            var23 = var19;\n                            var24 = 0x00;\n                        \n                            if (var24 >= var21) { goto label_0621; }\n                            else { goto label_060F; }\n                        }\n                    } else {\n                    label_05A9:\n                        var temp67 = var24;\n                        memory[var22 + temp67:var22 + temp67 + 0x20] = memory[var23 + temp67:var23 + temp67 + 0x20];\n                        var24 = temp67 + 0x20;\n                    \n                        if (var24 >= var21) { goto label_05BB; }\n                        else { goto label_05A9; }\n                    }\n                } else {\n                    var temp68 = var19;\n                    var temp69 = var18 - temp68;\n                    memory[temp69:temp69 + 0x20] = ~(0x0100 ** (0x20 - temp68) - 0x01) & memory[temp69:temp69 + 0x20];\n                    var temp70 = temp69 + 0x20;\n                    memory[var14:var14 + 0x20] = temp70 - var12;\n                    var temp71 = var4;\n                    memory[temp70:temp70 + 0x20] = memory[temp71:temp71 + 0x20];\n                    var18 = temp70 + 0x20;\n                    var19 = temp71 + 0x20;\n                    var20 = memory[temp71:temp71 + 0x20];\n                    var21 = var20;\n                    var22 = var18;\n                    var23 = var19;\n                    var24 = 0x00;\n                \n                    if (var24 >= var21) { goto label_05BB; }\n                    else { goto label_05A9; }\n                }\n            } else {\n            label_0543:\n                var temp72 = var24;\n                memory[var22 + temp72:var22 + temp72 + 0x20] = memory[var23 + temp72:var23 + temp72 + 0x20];\n                var24 = temp72 + 0x20;\n            \n                if (var24 >= var21) { goto label_0555; }\n                else { goto label_0543; }\n            }\n        } else if (var0 == 0x78e97925) {\n            // Dispatch table entry for startTime()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x074a;\n            var2 = startTime();\n            var temp73 = memory[0x40:0x60];\n            memory[temp73:temp73 + 0x20] = var2;\n            var temp74 = memory[0x40:0x60];\n            return memory[temp74:temp74 + (temp73 + 0x20) - temp74];\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0775;\n            var2 = owner();\n            var temp75 = memory[0x40:0x60];\n            memory[temp75:temp75 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp76 = memory[0x40:0x60];\n            return memory[temp76:temp76 + (temp75 + 0x20) - temp76];\n        } else if (var0 == 0xa6801cbd) {\n            // Dispatch table entry for reset(uint256,uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x07f6;\n            var2 = msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44];\n            var4 = msg.data[0x44:0x64];\n            reset(var2, var3, var4);\n            stop();\n        } else if (var0 == 0xc4d66de8) {\n            // Dispatch table entry for initialize(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0839;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            initialize(var2);\n            stop();\n        } else if (var0 == 0xc50c0d78) {\n            // Dispatch table entry for proposalInfos(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x087c;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2, var3, var4 = proposalInfos(var2);\n            var temp77 = memory[0x40:0x60];\n            memory[temp77:temp77 + 0x20] = var2;\n            var temp78 = temp77 + 0x20;\n            memory[temp78:temp78 + 0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp79 = temp78 + 0x20;\n            memory[temp79:temp79 + 0x20] = var4;\n            var temp80 = memory[0x40:0x60];\n            return memory[temp80:temp80 + (temp79 + 0x20) - temp80];\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x090d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            transferOwnership(var2);\n            stop();\n        } else if (var0 == 0xf54a2ddc) {\n            // Dispatch table entry for setRefundable(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x095a;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = msg.data[0x24:0x44];\n            setRefundable(var2, var3);\n            stop();\n        } else if (var0 == 0xfa89401a) {\n            // Dispatch table entry for refund(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x099d;\n            var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n            refund(var2);\n            stop();\n        } else if (var0 == 0xfb86a404) {\n            // Dispatch table entry for hardCap()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x09b4;\n            var2 = hardCap();\n            var temp81 = memory[0x40:0x60];\n            memory[temp81:temp81 + 0x20] = var2;\n            var temp82 = memory[0x40:0x60];\n            return memory[temp82:temp82 + (temp81 + 0x20) - temp82];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function propose(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40])] != 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x07] + storage[0x09];\n        var var1 = 0x0a2a;\n        var1 = func_19C9();\n    \n        if (var1 >= var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.value < storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        var0 = temp0;\n        memory[0x40:0x60] = var0 + 0x0140;\n        var temp1 = arg0;\n        memory[var0:var0 + 0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = var0 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = arg3;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg5;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = arg6;\n        var temp8 = temp7 + 0x20;\n        memory[temp8:temp8 + 0x20] = arg7;\n        var temp9 = temp8 + 0x20;\n        memory[temp9:temp9 + 0x20] = arg8;\n        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = arg9;\n        memory[0x00:0x20] = storage[0x01];\n        memory[0x20:0x40] = 0x03;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp10;\n        var temp11 = keccak256(memory[0x00:0x40]);\n        var1 = temp11;\n        var temp12 = var1;\n        storage[temp12] = (memory[var0:var0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp12] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp13 = memory[var0 + 0x20:var0 + 0x20 + 0x20];\n        var var2 = 0x0b59;\n        var var3 = var1 + 0x01;\n        var var4 = temp13 + 0x20;\n        var var5 = memory[temp13:temp13 + 0x20];\n        var2 = func_1A06(var3, var4, var5);\n        var temp14 = memory[var0 + 0x40:var0 + 0x40 + 0x20];\n        var2 = 0x0b76;\n        var3 = var1 + 0x02;\n        var5 = memory[temp14:temp14 + 0x20];\n        var4 = temp14 + 0x20;\n        var2 = func_1A06(var3, var4, var5);\n        var temp15 = memory[var0 + 0x60:var0 + 0x60 + 0x20];\n        var2 = 0x0b93;\n        var3 = var1 + 0x03;\n        var5 = memory[temp15:temp15 + 0x20];\n        var4 = temp15 + 0x20;\n        var2 = func_1A06(var3, var4, var5);\n        var temp16 = memory[var0 + 0x80:var0 + 0x80 + 0x20];\n        var2 = 0x0bb0;\n        var3 = var1 + 0x04;\n        var4 = temp16 + 0x20;\n        var5 = memory[temp16:temp16 + 0x20];\n        var2 = func_1A06(var3, var4, var5);\n        var temp17 = memory[var0 + 0xa0:var0 + 0xa0 + 0x20];\n        var2 = 0x0bcd;\n        var3 = var1 + 0x05;\n        var4 = temp17 + 0x20;\n        var5 = memory[temp17:temp17 + 0x20];\n        var2 = func_1A06(var3, var4, var5);\n        var temp18 = var0;\n        var temp19 = var1;\n        storage[temp19 + 0x06] = memory[temp18 + 0xc0:temp18 + 0xc0 + 0x20];\n        storage[temp19 + 0x07] = memory[temp18 + 0xe0:temp18 + 0xe0 + 0x20];\n        storage[temp19 + 0x08] = memory[temp18 + 0x0100:temp18 + 0x0100 + 0x20];\n        storage[temp19 + 0x09] = memory[temp18 + 0x0120:temp18 + 0x0120 + 0x20];\n        var temp20 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp20 + 0x60;\n        memory[temp20:temp20 + 0x20] = msg.value;\n        var temp21 = temp20 + 0x20;\n        memory[temp21:temp21 + 0x20] = msg.sender;\n        memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = storage[0x01];\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        var temp22 = keccak256(memory[0x00:0x40]);\n        storage[temp22] = memory[temp20:temp20 + 0x20];\n        var temp23 = temp22 + 0x01;\n        storage[temp23] = (memory[temp20 + 0x20:temp20 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp23] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[temp22 + 0x02] = memory[temp20 + 0x40:temp20 + 0x40 + 0x20];\n        var0 = 0x0cf4;\n        memory[0x00:0x20] = storage[0x01];\n        memory[0x20:0x40] = 0x05;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = msg.value;\n        var0 = func_19D1(var1, var2);\n        memory[0x00:0x20] = storage[0x01];\n        memory[0x20:0x40] = 0x05;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp24 = memory[0x40:0x60];\n        memory[temp24:temp24 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp25 = memory[0x40:0x60];\n        log(memory[temp25:temp25 + (temp24 + 0x20) - temp25], [0x46ea865f00e44354e9a94289893da72054251f9d0131ecbc6ce70c3c77c60195, storage[0x01]]);\n    }\n    \n    function duration() returns (var r0) { return storage[0x09]; }\n    \n    function round() returns (var r0) { return storage[0x01]; }\n    \n    function beneficiary() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function getContributions(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function roundContribution(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function refundable(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function proposals(var arg0, var arg1) returns (var arg0, var arg1, var r2, var r3, var r4, var r5, var r6, var r7, var r8, var r9) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = temp0;\n        var temp1 = arg1 + 0x01;\n        var temp2 = storage[temp1];\n        var temp3 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r2 = temp4;\n        r3 = temp1;\n        r4 = temp3;\n        memory[r2:r2 + 0x20] = r4;\n        r5 = r2 + 0x20;\n        r6 = r3;\n        var temp5 = storage[r6];\n        r7 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n    \n        if (!r7) {\n        label_0FA2:\n            var temp6 = r2;\n            var temp7 = arg1;\n            r2 = temp7;\n            arg1 = temp6;\n            var temp8 = r2 + 0x02;\n            var temp9 = storage[temp8];\n            var temp10 = (!(temp9 & 0x01) * 0x0100 - 0x01 & temp9) / 0x02;\n            var temp11 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp11 + (temp10 + 0x1f) / 0x20 * 0x20 + 0x20;\n            r3 = temp11;\n            r4 = temp8;\n            r5 = temp10;\n            memory[r3:r3 + 0x20] = r5;\n            r6 = r3 + 0x20;\n            r7 = r4;\n            var temp12 = storage[r7];\n            r8 = (!(temp12 & 0x01) * 0x0100 - 0x01 & temp12) / 0x02;\n        \n            if (!r8) {\n            label_1040:\n                var temp13 = r2;\n                r2 = r3;\n                r3 = temp13;\n                var temp14 = r3 + 0x03;\n                var temp15 = storage[temp14];\n                var temp16 = (!(temp15 & 0x01) * 0x0100 - 0x01 & temp15) / 0x02;\n                var temp17 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp17 + (temp16 + 0x1f) / 0x20 * 0x20 + 0x20;\n                r4 = temp17;\n                r5 = temp14;\n                r6 = temp16;\n                memory[r4:r4 + 0x20] = r6;\n                r7 = r4 + 0x20;\n                r8 = r5;\n                var temp18 = storage[r8];\n                r9 = (!(temp18 & 0x01) * 0x0100 - 0x01 & temp18) / 0x02;\n            \n                if (!r9) {\n                label_10DE:\n                    var temp19 = r4;\n                    var temp20 = r3;\n                    r4 = temp20;\n                    r3 = temp19;\n                    var temp21 = r4 + 0x04;\n                    var temp22 = storage[temp21];\n                    var temp23 = (!(temp22 & 0x01) * 0x0100 - 0x01 & temp22) / 0x02;\n                    var temp24 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp24 + (temp23 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    r5 = temp24;\n                    r6 = temp21;\n                    r7 = temp23;\n                    memory[r5:r5 + 0x20] = r7;\n                    r8 = r5 + 0x20;\n                    r9 = r6;\n                    var temp25 = storage[r9];\n                    var var8 = (!(temp25 & 0x01) * 0x0100 - 0x01 & temp25) / 0x02;\n                \n                    if (!var8) {\n                    label_117C:\n                        var temp26 = r4;\n                        var temp27 = r5;\n                        r5 = temp26;\n                        r4 = temp27;\n                        var temp28 = r5 + 0x05;\n                        var temp29 = storage[temp28];\n                        var temp30 = (!(temp29 & 0x01) * 0x0100 - 0x01 & temp29) / 0x02;\n                        var temp31 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp31 + (temp30 + 0x1f) / 0x20 * 0x20 + 0x20;\n                        r6 = temp31;\n                        r7 = temp28;\n                        r8 = temp30;\n                        memory[r6:r6 + 0x20] = r8;\n                        r9 = r6 + 0x20;\n                        var8 = r7;\n                        var temp32 = storage[var8];\n                        var var9 = (!(temp32 & 0x01) * 0x0100 - 0x01 & temp32) / 0x02;\n                    \n                        if (!var9) {\n                        label_121A:\n                            var temp33 = r5;\n                            r5 = r6;\n                            r6 = storage[temp33 + 0x06];\n                            r7 = storage[temp33 + 0x07];\n                            r8 = storage[temp33 + 0x08];\n                            r9 = storage[temp33 + 0x09];\n                            return arg0, arg1, r2, r3, r4, r5, r6, r7, r8, r9;\n                        } else if (0x1f < var9) {\n                            var temp34 = r9;\n                            var temp35 = temp34 + var9;\n                            r9 = temp35;\n                            memory[0x00:0x20] = var8;\n                            var temp36 = keccak256(memory[0x00:0x20]);\n                            memory[temp34:temp34 + 0x20] = storage[temp36];\n                            var8 = temp36 + 0x01;\n                            var9 = temp34 + 0x20;\n                        \n                            if (r9 <= var9) { goto label_1211; }\n                        \n                        label_11FD:\n                            var temp37 = var8;\n                            var temp38 = var9;\n                            memory[temp38:temp38 + 0x20] = storage[temp37];\n                            var8 = temp37 + 0x01;\n                            var9 = temp38 + 0x20;\n                        \n                            if (r9 > var9) { goto label_11FD; }\n                        \n                        label_1211:\n                            var temp39 = r9;\n                            var temp40 = temp39 + (var9 - temp39 & 0x1f);\n                            var9 = temp39;\n                            r9 = temp40;\n                            goto label_121A;\n                        } else {\n                            var temp41 = r9;\n                            memory[temp41:temp41 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n                            r9 = temp41 + 0x20;\n                            var9 = var9;\n                            goto label_121A;\n                        }\n                    } else if (0x1f < var8) {\n                        var temp42 = r8;\n                        var temp43 = temp42 + var8;\n                        r8 = temp43;\n                        memory[0x00:0x20] = r9;\n                        var temp44 = keccak256(memory[0x00:0x20]);\n                        memory[temp42:temp42 + 0x20] = storage[temp44];\n                        r9 = temp44 + 0x01;\n                        var8 = temp42 + 0x20;\n                    \n                        if (r8 <= var8) { goto label_1173; }\n                    \n                    label_115F:\n                        var temp45 = r9;\n                        var temp46 = var8;\n                        memory[temp46:temp46 + 0x20] = storage[temp45];\n                        r9 = temp45 + 0x01;\n                        var8 = temp46 + 0x20;\n                    \n                        if (r8 > var8) { goto label_115F; }\n                    \n                    label_1173:\n                        var temp47 = r8;\n                        var temp48 = temp47 + (var8 - temp47 & 0x1f);\n                        var8 = temp47;\n                        r8 = temp48;\n                        goto label_117C;\n                    } else {\n                        var temp49 = r8;\n                        memory[temp49:temp49 + 0x20] = storage[r9] / 0x0100 * 0x0100;\n                        r8 = temp49 + 0x20;\n                        var8 = var8;\n                        goto label_117C;\n                    }\n                } else if (0x1f < r9) {\n                    var temp50 = r7;\n                    var temp51 = temp50 + r9;\n                    r7 = temp51;\n                    memory[0x00:0x20] = r8;\n                    var temp52 = keccak256(memory[0x00:0x20]);\n                    memory[temp50:temp50 + 0x20] = storage[temp52];\n                    r8 = temp52 + 0x01;\n                    r9 = temp50 + 0x20;\n                \n                    if (r7 <= r9) { goto label_10D5; }\n                \n                label_10C1:\n                    var temp53 = r8;\n                    var temp54 = r9;\n                    memory[temp54:temp54 + 0x20] = storage[temp53];\n                    r8 = temp53 + 0x01;\n                    r9 = temp54 + 0x20;\n                \n                    if (r7 > r9) { goto label_10C1; }\n                \n                label_10D5:\n                    var temp55 = r7;\n                    var temp56 = temp55 + (r9 - temp55 & 0x1f);\n                    r9 = temp55;\n                    r7 = temp56;\n                    goto label_10DE;\n                } else {\n                    var temp57 = r7;\n                    memory[temp57:temp57 + 0x20] = storage[r8] / 0x0100 * 0x0100;\n                    r7 = temp57 + 0x20;\n                    r9 = r9;\n                    goto label_10DE;\n                }\n            } else if (0x1f < r8) {\n                var temp58 = r6;\n                var temp59 = temp58 + r8;\n                r6 = temp59;\n                memory[0x00:0x20] = r7;\n                var temp60 = keccak256(memory[0x00:0x20]);\n                memory[temp58:temp58 + 0x20] = storage[temp60];\n                r7 = temp60 + 0x01;\n                r8 = temp58 + 0x20;\n            \n                if (r6 <= r8) { goto label_1037; }\n            \n            label_1023:\n                var temp61 = r7;\n                var temp62 = r8;\n                memory[temp62:temp62 + 0x20] = storage[temp61];\n                r7 = temp61 + 0x01;\n                r8 = temp62 + 0x20;\n            \n                if (r6 > r8) { goto label_1023; }\n            \n            label_1037:\n                var temp63 = r6;\n                var temp64 = temp63 + (r8 - temp63 & 0x1f);\n                r8 = temp63;\n                r6 = temp64;\n                goto label_1040;\n            } else {\n                var temp65 = r6;\n                memory[temp65:temp65 + 0x20] = storage[r7] / 0x0100 * 0x0100;\n                r6 = temp65 + 0x20;\n                r8 = r8;\n                goto label_1040;\n            }\n        } else if (0x1f < r7) {\n            var temp66 = r5;\n            var temp67 = temp66 + r7;\n            r5 = temp67;\n            memory[0x00:0x20] = r6;\n            var temp68 = keccak256(memory[0x00:0x20]);\n            memory[temp66:temp66 + 0x20] = storage[temp68];\n            r6 = temp68 + 0x01;\n            r7 = temp66 + 0x20;\n        \n            if (r5 <= r7) { goto label_0F99; }\n        \n        label_0F85:\n            var temp69 = r6;\n            var temp70 = r7;\n            memory[temp70:temp70 + 0x20] = storage[temp69];\n            r6 = temp69 + 0x01;\n            r7 = temp70 + 0x20;\n        \n            if (r5 > r7) { goto label_0F85; }\n        \n        label_0F99:\n            var temp71 = r5;\n            var temp72 = temp71 + (r7 - temp71 & 0x1f);\n            r7 = temp71;\n            r5 = temp72;\n            goto label_0FA2;\n        } else {\n            var temp73 = r5;\n            memory[temp73:temp73 + 0x20] = storage[r6] / 0x0100 * 0x0100;\n            r5 = temp73 + 0x20;\n            r7 = r7;\n            goto label_0FA2;\n        }\n    }\n    \n    function startTime() returns (var r0) { return storage[0x07]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function reset(var arg0, var arg1, var arg2) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x07] + storage[0x09];\n        var var1 = 0x12d1;\n        var1 = func_19C9();\n    \n        if (var1 < var0) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x01] <= 0x00) {\n        label_1381:\n            storage[0x07] = arg0;\n            storage[0x09] = arg1;\n            storage[0x08] = arg2;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = storage[0x01];\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xd49620ec6474d72a2f05dd60f5ab59ad0d2d9d29090cb3b81defc30db3d510c3]);\n            storage[0x01] = storage[0x01] + 0x01;\n            return;\n        } else {\n            memory[0x00:0x20] = storage[0x01];\n            memory[0x20:0x40] = 0x05;\n            var temp2 = address(this).balance - storage[keccak256(memory[0x00:0x40])];\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x00] = address(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n            var0 = !temp4;\n        \n            if (!var0) { goto label_1381; }\n        \n            var temp5 = returndata.length;\n            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function initialize(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function proposalInfos(var arg0) returns (var arg0, var r1, var r2) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0];\n        r1 = storage[temp0 + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r2 = storage[temp0 + 0x02];\n        return arg0, r1, r2;\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function setRefundable(var arg0, var arg1) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = arg1;\n    }\n    \n    function refund(var arg0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x06;\n        var var1 = storage[keccak256(memory[0x00:0x40])] > var0;\n    \n        if (!var1) {\n        label_175A:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp1 = storage[keccak256(memory[0x00:0x40])];\n            var0 = temp1;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var1 = 0x185a;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            memory[0x20:0x40] = 0x05;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = var0;\n            var1 = func_19ED(var2, var3);\n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            memory[0x00:0x20] = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            memory[0x20:0x40] = 0x05;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp3 = var0;\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(storage[keccak256(memory[0x00:0x40]) + 0x01] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n            var1 = !temp5;\n        \n            if (!var1) {\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp7 = memory[0x40:0x60];\n                log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xdfe4a8c8989865d5117985fe19383af4fbc50754c51da9e8f66b01f0d27830a0]);\n                return;\n            } else {\n                var temp8 = returndata.length;\n                memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x06;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var2 = 0x1758;\n            var2 = func_19C9();\n            var1 = var2 < var1;\n            goto label_175A;\n        }\n    }\n    \n    function hardCap() returns (var r0) { return storage[0x08]; }\n    \n    function func_19C9() returns (var r0) { return block.timestamp; }\n    \n    function func_19D1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n        else { assert(); }\n    }\n    \n    function func_19ED(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1A06(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_1A75:\n                var temp4 = arg1;\n                arg1 = 0x1a82;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1A86(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_1A74:\n                    goto label_1A75;\n                } else {\n                label_1A62:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var0 = temp8 + 0x01;\n                    var1 = var1;\n                \n                    if (var1 <= arg2) { goto label_1A74; }\n                    else { goto label_1A62; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_1A75;\n        }\n    }\n    \n    function func_1A86(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1aa8;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_1AA4(arg1, var0); }\n    \n    label_1A95:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_1A95; }\n    \n        arg0 = func_1AA4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1AA4(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 31.29168200492859,
	"usage": {
		"completion_tokens": 515,
		"prompt_tokens": 14772,
		"total_tokens": 15287
	}
}