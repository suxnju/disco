{
	"address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity code that corresponds to the given decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint256) private balances;\n    mapping(address => mapping(address => uint256)) private allowed;\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint256 _amount) public {\n        require(balances[msg.sender] >= _amount);\n        balances[msg.sender] -= _amount;\n        msg.sender.transfer(_amount);\n    }\n}\n```\nThis Solidity contract represents a basic ERC20 token with additional deposit and withdraw functions. The contract maintains a mapping of balances for each address, allows transfers of its tokens between addresses, and allows an address to approve another to spend its tokens. The contract also includes a deposit function for adding Ether to the contract and a withdraw function for removing Ether from the contract. The deposit function updates the balance of the message sender, and the withdraw function removes the specified amount from the balance of the message sender and transfers the corresponding Ether.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470493,
	"id": "chatcmpl-8MuLNiJpWkObVyEzIJQEPq6BqMT5I",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_00AF:\n            var var0 = 0x00b7;\n            deposit();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x00cc;\n                var var2 = name();\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp1 - var4;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var6 = temp2 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_010C:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_00FA:\n                    var temp8 = var11;\n                    memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_010C; }\n                    else { goto label_00FA; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0187;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = !!var1;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b4;\n                var1 = totalSupply();\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0229;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0264;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0279;\n                var2 = decimals();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0xff;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02cc;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = balanceOf(var2);\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f5;\n                var2 = symbol();\n                var temp19 = memory[0x40:0x60];\n                var3 = temp19;\n                var4 = var3;\n                var temp20 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp20 - var4;\n                var temp21 = var2;\n                memory[temp20:temp20 + 0x20] = memory[temp21:temp21 + 0x20];\n                var5 = temp20 + 0x20;\n                var6 = temp21 + 0x20;\n                var7 = memory[temp21:temp21 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0335:\n                    var temp22 = var7;\n                    var5 = temp22 + var5;\n                    var6 = temp22 & 0x1f;\n                \n                    if (!var6) {\n                        var temp23 = memory[0x40:0x60];\n                        return memory[temp23:temp23 + var5 - temp23];\n                    } else {\n                        var temp24 = var6;\n                        var temp25 = var5 - temp24;\n                        memory[temp25:temp25 + 0x20] = ~(0x0100 ** (0x20 - temp24) - 0x01) & memory[temp25:temp25 + 0x20];\n                        var temp26 = memory[0x40:0x60];\n                        return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n                    }\n                } else {\n                label_0323:\n                    var temp27 = var11;\n                    memory[var9 + temp27:var9 + temp27 + 0x20] = memory[var10 + temp27:var10 + temp27 + 0x20];\n                    var11 = temp27 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0335; }\n                    else { goto label_0323; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b0;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = !!var1;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x03d2;\n                deposit();\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x042a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = allowance(var2, var3);\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = var2;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n            } else { goto label_00AF; }\n        }\n    }\n    \n    function deposit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] + msg.value;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = msg.value;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0573:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_056A; }\n        \n        label_0556:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0556; }\n        \n        label_056A:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0573;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0573;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return address(this).balance; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender;\n    \n        if (var1) {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp10 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp10;\n        \n            if (storage[keccak256(memory[0x00:0x40])] == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { goto label_08CF; }\n            else { goto label_07BA; }\n        } else if (!var1) {\n        label_08CF:\n            var temp0 = arg2;\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x03;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = storage[temp2] - temp0;\n            var temp3 = arg1;\n            memory[0x00:0x20] = temp3 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x03;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] + temp0;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp0;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n        label_07BA:\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp7;\n        \n            if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp8;\n            var temp9 = keccak256(memory[0x00:0x40]);\n            storage[temp9] = storage[temp9] - arg2;\n            goto label_08CF;\n        }\n    }\n    \n    function withdraw(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] - temp0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65, msg.sender]);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x02] & 0xff; }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0BC6:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0BBD; }\n        \n        label_0BA9:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0BA9; }\n        \n        label_0BBD:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0BC6;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0BC6;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0bdb;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        return transferFrom(var2, var3, var4);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_00AF:\n            var var0 = 0x00b7;\n            deposit();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x00cc;\n                var var2 = name();\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp1 - var4;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var6 = temp2 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_010C:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_00FA:\n                    var temp8 = var11;\n                    memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_010C; }\n                    else { goto label_00FA; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0187;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = !!var1;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b4;\n                var1 = totalSupply();\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0229;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0264;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0279;\n                var2 = decimals();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0xff;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02cc;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = balanceOf(var2);\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f5;\n                var2 = symbol();\n                var temp19 = memory[0x40:0x60];\n                var3 = temp19;\n                var4 = var3;\n                var temp20 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp20 - var4;\n                var temp21 = var2;\n                memory[temp20:temp20 + 0x20] = memory[temp21:temp21 + 0x20];\n                var5 = temp20 + 0x20;\n                var6 = temp21 + 0x20;\n                var7 = memory[temp21:temp21 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0335:\n                    var temp22 = var7;\n                    var5 = temp22 + var5;\n                    var6 = temp22 & 0x1f;\n                \n                    if (!var6) {\n                        var temp23 = memory[0x40:0x60];\n                        return memory[temp23:temp23 + var5 - temp23];\n                    } else {\n                        var temp24 = var6;\n                        var temp25 = var5 - temp24;\n                        memory[temp25:temp25 + 0x20] = ~(0x0100 ** (0x20 - temp24) - 0x01) & memory[temp25:temp25 + 0x20];\n                        var temp26 = memory[0x40:0x60];\n                        return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n                    }\n                } else {\n                label_0323:\n                    var temp27 = var11;\n                    memory[var9 + temp27:var9 + temp27 + 0x20] = memory[var10 + temp27:var10 + temp27 + 0x20];\n                    var11 = temp27 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0335; }\n                    else { goto label_0323; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b0;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = !!var1;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x03d2;\n                deposit();\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x042a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = allowance(var2, var3);\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = var2;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n            } else { goto label_00AF; }\n        }\n    }\n    \n    function deposit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] + msg.value;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = msg.value;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0573:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_056A; }\n        \n        label_0556:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0556; }\n        \n        label_056A:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0573;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0573;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return address(this).balance; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender;\n    \n        if (var1) {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp10 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp10;\n        \n            if (storage[keccak256(memory[0x00:0x40])] == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { goto label_08CF; }\n            else { goto label_07BA; }\n        } else if (!var1) {\n        label_08CF:\n            var temp0 = arg2;\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x03;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = storage[temp2] - temp0;\n            var temp3 = arg1;\n            memory[0x00:0x20] = temp3 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x03;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] + temp0;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp0;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n        label_07BA:\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp7;\n        \n            if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp8;\n            var temp9 = keccak256(memory[0x00:0x40]);\n            storage[temp9] = storage[temp9] - arg2;\n            goto label_08CF;\n        }\n    }\n    \n    function withdraw(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] - temp0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65, msg.sender]);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x02] & 0xff; }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0BC6:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0BBD; }\n        \n        label_0BA9:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0BA9; }\n        \n        label_0BBD:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0BC6;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0BC6;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0bdb;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        return transferFrom(var2, var3, var4);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_00AF:\n            var var0 = 0x00b7;\n            deposit();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x00cc;\n                var var2 = name();\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp1 - var4;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var6 = temp2 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_010C:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_00FA:\n                    var temp8 = var11;\n                    memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_010C; }\n                    else { goto label_00FA; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0187;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = !!var1;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b4;\n                var1 = totalSupply();\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0229;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0264;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0279;\n                var2 = decimals();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0xff;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02cc;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = balanceOf(var2);\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02f5;\n                var2 = symbol();\n                var temp19 = memory[0x40:0x60];\n                var3 = temp19;\n                var4 = var3;\n                var temp20 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp20 - var4;\n                var temp21 = var2;\n                memory[temp20:temp20 + 0x20] = memory[temp21:temp21 + 0x20];\n                var5 = temp20 + 0x20;\n                var6 = temp21 + 0x20;\n                var7 = memory[temp21:temp21 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0335:\n                    var temp22 = var7;\n                    var5 = temp22 + var5;\n                    var6 = temp22 & 0x1f;\n                \n                    if (!var6) {\n                        var temp23 = memory[0x40:0x60];\n                        return memory[temp23:temp23 + var5 - temp23];\n                    } else {\n                        var temp24 = var6;\n                        var temp25 = var5 - temp24;\n                        memory[temp25:temp25 + 0x20] = ~(0x0100 ** (0x20 - temp24) - 0x01) & memory[temp25:temp25 + 0x20];\n                        var temp26 = memory[0x40:0x60];\n                        return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n                    }\n                } else {\n                label_0323:\n                    var temp27 = var11;\n                    memory[var9 + temp27:var9 + temp27 + 0x20] = memory[var10 + temp27:var10 + temp27 + 0x20];\n                    var11 = temp27 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0335; }\n                    else { goto label_0323; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b0;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = !!var1;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x03d2;\n                deposit();\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x042a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = allowance(var2, var3);\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = var2;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n            } else { goto label_00AF; }\n        }\n    }\n    \n    function deposit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] + msg.value;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = msg.value;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0573:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_056A; }\n        \n        label_0556:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0556; }\n        \n        label_056A:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0573;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0573;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return address(this).balance; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender;\n    \n        if (var1) {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp10 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp10;\n        \n            if (storage[keccak256(memory[0x00:0x40])] == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { goto label_08CF; }\n            else { goto label_07BA; }\n        } else if (!var1) {\n        label_08CF:\n            var temp0 = arg2;\n            var temp1 = arg0;\n            memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x03;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = storage[temp2] - temp0;\n            var temp3 = arg1;\n            memory[0x00:0x20] = temp3 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x03;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] + temp0;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp0;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n        label_07BA:\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp7;\n        \n            if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x04;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp8;\n            var temp9 = keccak256(memory[0x00:0x40]);\n            storage[temp9] = storage[temp9] - arg2;\n            goto label_08CF;\n        }\n    }\n    \n    function withdraw(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = storage[temp1] - temp0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg0;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65, msg.sender]);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x02] & 0xff; }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0BC6:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0BBD; }\n        \n        label_0BA9:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0BA9; }\n        \n        label_0BBD:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0BC6;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0BC6;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0bdb;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        return transferFrom(var2, var3, var4);\n    }\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 43.41807794570923,
	"usage": {
		"completion_tokens": 550,
		"prompt_tokens": 5726,
		"total_tokens": 6276
	}
}