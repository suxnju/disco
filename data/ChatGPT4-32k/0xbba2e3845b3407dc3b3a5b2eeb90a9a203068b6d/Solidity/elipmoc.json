{
	"address": "0xbba2e3845b3407dc3b3a5b2eeb90a9a203068b6d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is the Solidity code based on the decompiled code you provided:\n\n```solidity\npragma solidity ^0.6.12;\n\ncontract Wallet {\n    mapping (address => uint256) private _percentages;\n    mapping (address => uint256) private _withdraws;\n    uint256 private _fallback;\n\n    function percentages(address owner) public view returns (uint256) {\n        return _percentages[owner];\n    }\n\n    receive() external payable {\n        _fallback += msg.value;\n    }\n\n    function withdraw() public {\n        require(_percentages[msg.sender] != 0, 'You are not a member');\n        uint256 amount = _percentages[msg.sender] * _fallback / 10000;\n        require(amount > _withdraws[msg.sender], 'No funds to withdraw');\n        _withdraws[msg.sender] = amount;\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n\n    function withdraws(address owner) public view returns (uint256) {\n        return _withdraws[owner];\n    }\n\n    function balanceOf(address owner) public view returns (uint256) {\n        uint256 balance = _percentages[owner] * _fallback / 10000;\n        if(balance > _withdraws[owner]) {\n            return balance - _withdraws[owner];\n        }\n        return 0;\n    }\n\n    function changeWallet(address newOwner) public {\n        require(_percentages[msg.sender] != 0, 'You are not a member');\n        require(newOwner != address(0), 'Zero address');\n        _percentages[newOwner] = _percentages[msg.sender];\n        _withdraws[newOwner] = _withdraws[msg.sender];\n        _percentages[msg.sender] = 0;\n        _withdraws[msg.sender] = 0;\n    }\n}\n```\n\nPlease note that this code is only a rough approximation. Some functionalities may not be exact due to the lack of context.",
				"role": "assistant"
			}
		}
	],
	"created": 1701458688,
	"id": "chatcmpl-8R3Q0AWMqstMNgQqdgkGrK6rQRAwP",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.13 11:41 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _percentages; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _withdraws; // STORAGE[0x1]\nuint256 _fallback; // STORAGE[0x2]\n\n\nfunction percentages(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return uint16(_percentages[varg0]);\n}\n\nfunction fallback() public payable { \n    _fallback += msg.value;\n}\n\nfunction withdraw() public nonPayable { \n    require(uint16(_percentages[msg.sender]), 'You are not a member');\n    v0 = v1 = uint16(_percentages[msg.sender]) * _fallback / 10000;\n    if (uint16(_percentages[msg.sender]) * _fallback / 10000) {\n        v0 = uint16(_percentages[msg.sender]) * _fallback / 10000 > _withdraws[msg.sender];\n    }\n    require(v0, 'No funds to withdraw');\n    _withdraws[msg.sender] += uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender];\n    v2 = msg.sender.call().value(uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender]).gas(2300 * !(uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n}\n\nfunction withdraws(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _withdraws[varg0];\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (uint16(_percentages[address(varg0)])) {\n        v0 = v1 = uint16(_percentages[address(varg0)]) * _fallback / 10000;\n    } else {\n        v0 = v2 = 0;\n    }\n    if (v0 > _withdraws[varg0]) {\n        v3 = v4 = v0 - _withdraws[varg0];\n    } else {\n        v3 = v5 = 0;\n    }\n    return v3;\n}\n\nfunction changeWallet(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(uint16(_percentages[msg.sender]), 'You are not a member');\n    require(varg0, 'Zero address');\n    v0 = varg0;\n    _percentages[v0] = ~0xffff & _percentages[v0] | uint16(_percentages[msg.sender]);\n    _withdraws[v0] = _withdraws[v0];\n    MEM[0] = msg.sender;\n    _percentages[msg.sender] = ~0xffff & _percentages[msg.sender];\n    _withdraws[v0] = 0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3ccfd60b == function_selector >> 224) {\n            withdraw();\n        } else if (0x48179ee5 == function_selector >> 224) {\n            withdraws(address);\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x98b9a2dc == function_selector >> 224) {\n            changeWallet(address);\n        } else if (0x9d592c66 == function_selector >> 224) {\n            percentages(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 11:41 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _percentages; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _withdraws; // STORAGE[0x1]\nuint256 _fallback; // STORAGE[0x2]\n\n\nfunction percentages(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return uint16(_percentages[varg0]);\n}\n\nfunction fallback() public payable { \n    _fallback += msg.value;\n}\n\nfunction withdraw() public nonPayable { \n    require(uint16(_percentages[msg.sender]), 'You are not a member');\n    v0 = v1 = uint16(_percentages[msg.sender]) * _fallback / 10000;\n    if (uint16(_percentages[msg.sender]) * _fallback / 10000) {\n        v0 = uint16(_percentages[msg.sender]) * _fallback / 10000 > _withdraws[msg.sender];\n    }\n    require(v0, 'No funds to withdraw');\n    _withdraws[msg.sender] += uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender];\n    v2 = msg.sender.call().value(uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender]).gas(2300 * !(uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n}\n\nfunction withdraws(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _withdraws[varg0];\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (uint16(_percentages[address(varg0)])) {\n        v0 = v1 = uint16(_percentages[address(varg0)]) * _fallback / 10000;\n    } else {\n        v0 = v2 = 0;\n    }\n    if (v0 > _withdraws[varg0]) {\n        v3 = v4 = v0 - _withdraws[varg0];\n    } else {\n        v3 = v5 = 0;\n    }\n    return v3;\n}\n\nfunction changeWallet(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(uint16(_percentages[msg.sender]), 'You are not a member');\n    require(varg0, 'Zero address');\n    v0 = varg0;\n    _percentages[v0] = ~0xffff & _percentages[v0] | uint16(_percentages[msg.sender]);\n    _withdraws[v0] = _withdraws[v0];\n    MEM[0] = msg.sender;\n    _percentages[msg.sender] = ~0xffff & _percentages[msg.sender];\n    _withdraws[v0] = 0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3ccfd60b == function_selector >> 224) {\n            withdraw();\n        } else if (0x48179ee5 == function_selector >> 224) {\n            withdraws(address);\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x98b9a2dc == function_selector >> 224) {\n            changeWallet(address);\n        } else if (0x9d592c66 == function_selector >> 224) {\n            percentages(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 11:41 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _percentages; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _withdraws; // STORAGE[0x1]\nuint256 _fallback; // STORAGE[0x2]\n\n\nfunction percentages(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return uint16(_percentages[varg0]);\n}\n\nfunction fallback() public payable { \n    _fallback += msg.value;\n}\n\nfunction withdraw() public nonPayable { \n    require(uint16(_percentages[msg.sender]), 'You are not a member');\n    v0 = v1 = uint16(_percentages[msg.sender]) * _fallback / 10000;\n    if (uint16(_percentages[msg.sender]) * _fallback / 10000) {\n        v0 = uint16(_percentages[msg.sender]) * _fallback / 10000 > _withdraws[msg.sender];\n    }\n    require(v0, 'No funds to withdraw');\n    _withdraws[msg.sender] += uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender];\n    v2 = msg.sender.call().value(uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender]).gas(2300 * !(uint16(_percentages[msg.sender]) * _fallback / 10000 - _withdraws[msg.sender]));\n    require(v2); // checks call status, propagates error data on error\n}\n\nfunction withdraws(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _withdraws[varg0];\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (uint16(_percentages[address(varg0)])) {\n        v0 = v1 = uint16(_percentages[address(varg0)]) * _fallback / 10000;\n    } else {\n        v0 = v2 = 0;\n    }\n    if (v0 > _withdraws[varg0]) {\n        v3 = v4 = v0 - _withdraws[varg0];\n    } else {\n        v3 = v5 = 0;\n    }\n    return v3;\n}\n\nfunction changeWallet(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(uint16(_percentages[msg.sender]), 'You are not a member');\n    require(varg0, 'Zero address');\n    v0 = varg0;\n    _percentages[v0] = ~0xffff & _percentages[v0] | uint16(_percentages[msg.sender]);\n    _withdraws[v0] = _withdraws[v0];\n    MEM[0] = msg.sender;\n    _percentages[msg.sender] = ~0xffff & _percentages[msg.sender];\n    _withdraws[v0] = 0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x3ccfd60b == function_selector >> 224) {\n            withdraw();\n        } else if (0x48179ee5 == function_selector >> 224) {\n            withdraws(address);\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x98b9a2dc == function_selector >> 224) {\n            changeWallet(address);\n        } else if (0x9d592c66 == function_selector >> 224) {\n            percentages(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 16.918932914733887,
	"usage": {
		"completion_tokens": 411,
		"prompt_tokens": 910,
		"total_tokens": 1321
	}
}