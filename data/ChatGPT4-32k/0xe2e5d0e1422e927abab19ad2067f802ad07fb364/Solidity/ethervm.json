{
	"address": "0xe2e5d0e1422e927abab19ad2067f802ad07fb364",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity code according to the decompiled code:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint256) balances;\n    mapping(address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n    uint256 public decimals;\n    string public name;\n    string public symbol;\n    address public owner;\n    uint256 public cliff;\n    address public airdropWallet5Pct;\n    address public preicobrandingWallet1Pct;\n    address public cf1Wallet2Pct;\n    address public cf2Wallet2Pct;\n    address public dev1Wallet2Pct;\n    address public dev2Wallet2Pct;\n    address public dev3Wallet2Pct;\n    address public dev4Wallet2Pct;\n    address public lotusWallet75Pct;\n    address public vc1Wallet4Pct;\n    address public vc2Wallet4Pct;\n    address public vc3Wallet4Pct;\n    uint256 public stage;\n    uint256 public tokensSold;\n    \n    constructor() public {\n        // Initialize contract parameters here\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        return true;\n    }\n    \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n\n    // Custom functions translated from decompiled code here...\n    \n}\n```\n\nThis contract is a basic ERC20 token contract with some additional functionality. The `approve`, `allowance`, `balanceOf`, `transfer`, and `transferFrom` functions are standard ERC20 functions. The custom functions translated from the decompiled code are not included because the decompiled code provided is not complete and it's not clear what those functions should do. \n\nThe other variables and mappings appear to be used for managing different aspects of the token, such as the total supply, the name and symbol of the token, the number of decimal places for the token, and the addresses of different wallets. \n\nThe `owner` and `cliff` variables seem to be used for some form of access control or timing mechanism, but it's not clear what they do without more context. \n\nThe `stage` variable might be used to manage different stages of a token sale, and the `tokensSold` variable keeps track of how many tokens have been sold. \n\nThere are also a number of wallet address variables that are probably used to distribute tokens to different parties. \n\nPlease note that this is a simplified version of the contract and may not include all the functionality present in the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472808,
	"id": "chatcmpl-8Muwix57FDRUep92jBAHYHWmuLmYf",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0202:\n            var var0 = 0x00;\n            var var1 = var0;\n            var var2 = var1;\n            var var3 = var2;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n            var var7 = 0x01;\n            var var8 = storage[0x2e] & 0xff;\n        \n            if (var8 > 0x06) { assert(); }\n        \n            var7 = var8 == var7;\n        \n            if (var7) {\n            label_0239:\n            \n                if (var7) {\n                label_0254:\n                \n                    if (!var7) { revert(memory[0x00:0x00]); }\n                \n                    if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n                \n                    var7 = 0x0274;\n                    var7 = currentMinPurchase();\n                    var temp0 = msg.value >= var7;\n                    var7 = temp0;\n                \n                    if (!var7) {\n                    label_028A:\n                    \n                        if (!var7) { revert(memory[0x00:0x00]); }\n                    \n                        var7 = 0x029d;\n                        var7 = currentSalePriceInWei();\n                        var0 = var7;\n                        var7 = 0x02a7;\n                        var7 = currentSaleLimit();\n                        var1 = var7;\n                        var7 = 0x02b1;\n                        var7 = currentSaleSold();\n                        var2 = var7;\n                        var7 = 0x02bb;\n                        var7 = currentSaleLimitPerAddress();\n                        var3 = var7;\n                        var7 = 0x02c5;\n                        var7 = currentStageTokensBoughtByAddress();\n                        var4 = var7;\n                        var5 = msg.value;\n                        var7 = 0x0a ** storage[0x05];\n                        var8 = var0;\n                        var var9 = var5;\n                    \n                        if (!var8) { assert(); }\n                    \n                        var6 = var9 / var8 * var7;\n                    \n                        if (var6 + var2 > var1) { revert(memory[0x00:0x00]); }\n                    \n                        if (var4 + var6 > var3) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x00;\n                        var7 = 0x0322;\n                        var8 = storage[keccak256(memory[0x00:0x40])];\n                        var9 = var6;\n                        var7 = func_0D69(var8, var9);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x00;\n                        storage[keccak256(memory[0x00:0x40])] = var7;\n                        var8 = storage[0x15];\n                        var7 = 0x0348;\n                        var9 = var6;\n                        var7 = func_0D69(var8, var9);\n                        storage[0x15] = var7;\n                        var7 = 0x0354;\n                        var8 = var6;\n                        func_0D8D(var8);\n                        var7 = 0x035c;\n                        memory[0x00:0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x16;\n                        var9 = storage[keccak256(memory[0x00:0x40])];\n                        var8 = 0x0f4b;\n                        var var10 = 0x64;\n                        var var11 = msg.value * 0x04;\n                        var8 = func_0F45(var9, var10, var11);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var7 = 0x0286;\n                        var7 = currentMaxPurchase();\n                        var7 = msg.value <= var7;\n                        goto label_028A;\n                    }\n                } else {\n                    var7 = 0x05;\n                    var8 = storage[0x2e] & 0xff;\n                \n                    if (var8 > 0x06) { assert(); }\n                \n                    var7 = var8 == var7;\n                    goto label_0254;\n                }\n            } else {\n                var7 = 0x03;\n                var8 = storage[0x2e] & 0xff;\n            \n                if (var8 > 0x06) { assert(); }\n            \n                var7 = var8 == var7;\n                goto label_0239;\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0xfdc73f) {\n                // Dispatch table entry for currentMinPurchase()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentMinPurchase();\n            \n            label_03AD:\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var1;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + (temp1 + 0x20) - temp2];\n            } else if (var0 == 0x047fc9aa) {\n                // Dispatch table entry for supply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = supply();\n                goto label_03AD;\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e5;\n                var2 = name();\n            \n            label_03E5:\n                var temp3 = memory[0x40:0x60];\n                var3 = temp3;\n                memory[var3:var3 + 0x20] = 0x20;\n                var4 = var3;\n                var temp4 = var4 + 0x20;\n                var temp5 = var2;\n                memory[temp4:temp4 + 0x20] = memory[temp5:temp5 + 0x20];\n                var5 = temp4 + 0x20;\n                var7 = memory[temp5:temp5 + 0x20];\n                var6 = temp5 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0421:\n                    var temp6 = var7;\n                    var5 = temp6 + var5;\n                    var6 = temp6 & 0x1f;\n                \n                    if (!var6) {\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + var5 - temp7];\n                    } else {\n                        var temp8 = var6;\n                        var temp9 = var5 - temp8;\n                        memory[temp9:temp9 + 0x20] = ~(0x0100 ** (0x20 - temp8) - 0x01) & memory[temp9:temp9 + 0x20];\n                        var temp10 = memory[0x40:0x60];\n                        return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n                    }\n                } else {\n                label_0412:\n                    var temp11 = var11;\n                    memory[temp11 + var9:temp11 + var9 + 0x20] = memory[var10 + temp11:var10 + temp11 + 0x20];\n                    var11 = temp11 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0421; }\n                    else { goto label_0412; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_047E:\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = !!var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x0c26ac30) {\n                // Dispatch table entry for closeEarlyAdopters()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                closeEarlyAdopters();\n                stop();\n            } else if (var0 == 0x0fac20e1) {\n                // Dispatch table entry for dev1Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = dev1Wallet2Pct();\n            \n            label_04BA:\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x13d033c0) {\n                // Dispatch table entry for cliff()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = cliff();\n                goto label_03AD;\n            } else if (var0 == 0x1615d035) {\n                // Dispatch table entry for airdropWallet5Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = airdropWallet5Pct();\n                goto label_04BA;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = totalSupply();\n                goto label_03AD;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047e;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp16 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp16;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_047E;\n            } else if (var0 == 0x2a18ca16) {\n                // Dispatch table entry for currentSaleLimit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentSaleLimit();\n                goto label_03AD;\n            } else if (var0 == 0x2ca1aa16) {\n                // Dispatch table entry for currentSaleLimitPerAddress()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentSaleLimitPerAddress();\n                goto label_03AD;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = decimals();\n                goto label_03AD;\n            } else if (var0 == 0x341cc817) {\n                // Dispatch table entry for preicobrandingWallet1Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = preicobrandingWallet1Pct();\n                goto label_04BA;\n            } else if (var0 == 0x39f05521) {\n                // Dispatch table entry for withdrawVestedTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                withdrawVestedTokens();\n                stop();\n            } else if (var0 == 0x3be1c410) {\n                // Dispatch table entry for dev2Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = dev2Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0x3dbae9f9) {\n                // Dispatch table entry for startIcoTwo()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                startIcoTwo();\n                stop();\n            } else if (var0 == 0x4266806b) {\n                // Dispatch table entry for cf1Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = cf1Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0x518ab2a8) {\n                // Dispatch table entry for tokensSold()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = tokensSold();\n                goto label_03AD;\n            } else if (var0 == 0x66005ede) {\n                // Dispatch table entry for vc1Wallet4Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = vc1Wallet4Pct();\n                goto label_04BA;\n            } else if (var0 == 0x6f3ad341) {\n                // Dispatch table entry for ICO_ONE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0608;\n                var2, var3, var4, var5, var6, var7 = ICO_ONE();\n            \n            label_0608:\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2;\n                var temp18 = temp17 + 0x20;\n                memory[temp18:temp18 + 0x20] = var3;\n                var temp19 = temp18 + 0x20;\n                memory[temp19:temp19 + 0x20] = var4;\n                var temp20 = temp19 + 0x20;\n                memory[temp20:temp20 + 0x20] = var5;\n                var temp21 = temp20 + 0x20;\n                memory[temp21:temp21 + 0x20] = var6;\n                var temp22 = temp21 + 0x20;\n                memory[temp22:temp22 + 0x20] = var7;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_03AD;\n            } else if (var0 == 0x90427b6c) {\n                // Dispatch table entry for dev4Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = dev4Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e5;\n                var2 = symbol();\n                goto label_03E5;\n            } else if (var0 == 0xa0695fc2) {\n                // Dispatch table entry for startIcoOne()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                startIcoOne();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_047E;\n            } else if (var0 == 0xac7b986f) {\n                // Dispatch table entry for lotusWallet75Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = lotusWallet75Pct();\n                goto label_04BA;\n            } else if (var0 == 0xaf0638f6) {\n                // Dispatch table entry for currentMaxPurchase()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentMaxPurchase();\n                goto label_03AD;\n            } else if (var0 == 0xb154f47c) {\n                // Dispatch table entry for dev3Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = dev3Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0xbb814746) {\n                // Dispatch table entry for ICO_TWO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0608;\n                var2, var3, var4, var5, var6, var7 = ICO_TWO();\n                goto label_0608;\n            } else if (var0 == 0xc2d25167) {\n                // Dispatch table entry for closeIcoOne()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                closeIcoOne();\n                stop();\n            } else if (var0 == 0xc467706d) {\n                // Dispatch table entry for startEarlyAdopters()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                startEarlyAdopters();\n                stop();\n            } else if (var0 == 0xcb6b1f05) {\n                // Dispatch table entry for cf2Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = cf2Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0xd042ce2c) {\n                // Dispatch table entry for currentStageTokensBoughtByAddress()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentStageTokensBoughtByAddress();\n                goto label_03AD;\n            } else if (var0 == 0xdcd6561d) {\n                // Dispatch table entry for currentSaleSold()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentSaleSold();\n                goto label_03AD;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var temp24 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp24 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp24;\n                var1 = allowance(var2, var3);\n                goto label_03AD;\n            } else if (var0 == 0xdef1a2da) {\n                // Dispatch table entry for vc3Wallet4Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = vc3Wallet4Pct();\n                goto label_04BA;\n            } else if (var0 == 0xe50e2f65) {\n                // Dispatch table entry for EARLYADOPTERS()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0608;\n                var2, var3, var4, var5, var6, var7 = EARLYADOPTERS();\n                goto label_0608;\n            } else if (var0 == 0xeb570b05) {\n                // Dispatch table entry for currentSalePriceInWei()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentSalePriceInWei();\n                goto label_03AD;\n            } else if (var0 == 0xee224707) {\n                // Dispatch table entry for withdrawAllocation()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                withdrawAllocation();\n                stop();\n            } else if (var0 == 0xee55efee) {\n                // Dispatch table entry for closeSale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                closeSale();\n                stop();\n            } else if (var0 == 0xf3635a02) {\n                // Dispatch table entry for vc2Wallet4Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = vc2Wallet4Pct();\n                goto label_04BA;\n            } else { goto label_0202; }\n        }\n    }\n    \n    function currentMinPurchase() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_082E:\n        \n            if (var1) {\n            label_0849:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x28];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x22];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1c];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0849;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_082E;\n        }\n    }\n    \n    function currentMaxPurchase() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_08EA:\n        \n            if (var1) {\n            label_0905:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x29];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x23];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1d];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0905;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_08EA;\n        }\n    }\n    \n    function currentSalePriceInWei() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_09A7:\n        \n            if (var1) {\n            label_09C2:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x26];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x20];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1a];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_09C2;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_09A7;\n        }\n    }\n    \n    function currentSaleLimit() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_0A64:\n        \n            if (var1) {\n            label_0A7F:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x25];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x1f];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x19];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0A7F;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_0A64;\n        }\n    }\n    \n    function currentSaleSold() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_0B21:\n        \n            if (var1) {\n            label_0B3C:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x27];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x21];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1b];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0B3C;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_0B21;\n        }\n    }\n    \n    function currentSaleLimitPerAddress() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_0BDE:\n        \n            if (var1) {\n            label_0BF9:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x2a];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x24];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1e];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0BF9;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_0BDE;\n        }\n    }\n    \n    function currentStageTokensBoughtByAddress() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_0C9B:\n        \n            if (var1) {\n            label_0CB6:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x2d;\n                            var0 = storage[keccak256(memory[0x00:0x40])];\n                            goto label_08B6;\n                        }\n                    } else {\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x2c;\n                        var0 = storage[keccak256(memory[0x00:0x40])];\n                        goto label_08B6;\n                    }\n                } else {\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x2b;\n                    var0 = storage[keccak256(memory[0x00:0x40])];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0CB6;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_0C9B;\n        }\n    }\n    \n    function func_0D69(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n        var var2 = var1 >= temp0;\n    \n        if (var1 >= temp0) {\n            if (!var2) { assert(); }\n        \n        label_0D86:\n            return var1;\n        } else if (var1 >= arg1) { goto label_0D86; }\n        else { assert(); }\n    }\n    \n    function func_0D8D(var arg0) {\n        var var0 = 0x01;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        var0 = var1 == var0;\n    \n        if (var0) {\n        label_0DBC:\n        \n            if (var0) {\n            label_0DD7:\n            \n                if (!var0) { revert(memory[0x00:0x00]); }\n            \n                var0 = 0x01;\n                var1 = storage[0x2e] & 0xff;\n            \n                if (var1 > 0x06) { assert(); }\n            \n                if (var1 != var0) {\n                    var0 = 0x03;\n                    var1 = storage[0x2e] & 0xff;\n                \n                    if (var1 > 0x06) { assert(); }\n                \n                    if (var1 != var0) {\n                        var0 = 0x05;\n                        var1 = storage[0x2e] & 0xff;\n                    \n                        if (var1 > 0x06) { assert(); }\n                    \n                        if (var1 != var0) {\n                        label_0F1C:\n                            return;\n                        } else {\n                            var1 = storage[0x27];\n                            var0 = 0x0edc;\n                            var var2 = arg0;\n                            var0 = func_0D69(var1, var2);\n                            storage[0x27] = var0;\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x2d;\n                            var0 = 0x0f02;\n                            var1 = storage[keccak256(memory[0x00:0x40])];\n                            var2 = arg0;\n                            var0 = func_0D69(var1, var2);\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x2d;\n                            storage[keccak256(memory[0x00:0x40])] = var0;\n                            goto label_0F1C;\n                        }\n                    } else {\n                        var1 = storage[0x21];\n                        var0 = 0x0e72;\n                        var2 = arg0;\n                        var0 = func_0D69(var1, var2);\n                        storage[0x21] = var0;\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x2c;\n                        var0 = 0x0e98;\n                        var1 = storage[keccak256(memory[0x00:0x40])];\n                        var2 = arg0;\n                        var0 = func_0D69(var1, var2);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x2c;\n                        storage[keccak256(memory[0x00:0x40])] = var0;\n                        goto label_0F1C;\n                    }\n                } else {\n                    var1 = storage[0x1b];\n                    var0 = 0x0e08;\n                    var2 = arg0;\n                    var0 = func_0D69(var1, var2);\n                    storage[0x1b] = var0;\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x2b;\n                    var1 = storage[keccak256(memory[0x00:0x40])];\n                    var0 = 0x0e2e;\n                    var2 = arg0;\n                    var0 = func_0D69(var1, var2);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x2b;\n                    storage[keccak256(memory[0x00:0x40])] = var0;\n                    goto label_0F1C;\n                }\n            } else {\n                var0 = 0x05;\n                var1 = storage[0x2e] & 0xff;\n            \n                if (var1 > 0x06) { assert(); }\n            \n                var0 = var1 == var0;\n                goto label_0DD7;\n            }\n        } else {\n            var0 = 0x03;\n            var1 = storage[0x2e] & 0xff;\n        \n            if (var1 > 0x06) { assert(); }\n        \n            var0 = var1 == var0;\n            goto label_0DBC;\n        }\n    }\n    \n    function func_0F45(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_0D69(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function supply() returns (var r0) { return storage[0x02]; }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x03;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1245:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_123C; }\n        \n        label_1228:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1228; }\n        \n        label_123C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1245;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_1245;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (!var1) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_128A; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1) {\n        label_128A:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function closeEarlyAdopters() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x01;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x2e] = (storage[0x2e] & ~0xff) | 0x02;\n    }\n    \n    function dev1Wallet2Pct() returns (var r0) { return storage[0x0e] & 0x02 ** 0xa0 - 0x01; }\n    \n    function cliff() returns (var r0) { return storage[0x07]; }\n    \n    function airdropWallet5Pct() returns (var r0) { return storage[0x14] & 0x02 ** 0xa0 - 0x01; }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = var0;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var temp2 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (temp2 + arg2 <= temp2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var var1 = 0x140f;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_0D69(var2, var3);\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg1 & temp3;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & temp3;\n        var1 = 0x143e;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1BA0(var2, var3);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp4;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x20:0x40] = 0x01;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp4 & msg.sender;\n        memory[0x20:0x40] = temp5;\n        var1 = 0x1479;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1BA0(var2, var3);\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var temp7 = arg0 & temp6;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x01;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp6 & msg.sender;\n        memory[0x20:0x40] = temp8;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp9;\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = arg2;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [memory[0x00:0x20], stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05]; }\n    \n    function preicobrandingWallet1Pct() returns (var r0) { return storage[0x12] & 0x02 ** 0xa0 - 0x01; }\n    \n    function withdrawVestedTokens() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = 0x06;\n        var var4 = storage[0x2e] & 0xff;\n    \n        if (var4 > 0x06) { assert(); }\n    \n        if (var4 != var3) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x07] <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (block.timestamp < storage[0x07]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x17;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x18;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= temp0) { revert(memory[0x00:0x00]); }\n    \n        var3 = storage[0x08];\n        var4 = block.timestamp - storage[0x07];\n    \n        if (!var3) { assert(); }\n    \n        var0 = var4 / var3 + 0x01;\n        var3 = var0;\n        var4 = 0x0f;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x17;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (!var4) { assert(); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x18;\n        var1 = var5 / var4 * var3;\n        var temp1 = var1 - storage[keccak256(memory[0x00:0x40])];\n        var2 = temp1;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x15d2;\n        var5 = var2;\n        var3 = func_0D69(var4, var5);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x18;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x20:0x40] = 0x00;\n        var3 = 0x1600;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = var2;\n        var3 = func_0D69(var4, var5);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], address(this), msg.sender]);\n    }\n    \n    function dev2Wallet2Pct() returns (var r0) { return storage[0x0f] & 0x02 ** 0xa0 - 0x01; }\n    \n    function startIcoTwo() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x03;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        var0 = var1 == var0;\n    \n        if (var0) {\n        label_16BB:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x05;\n            var1 = 0x2e;\n            var var2 = storage[var1] & ~0xff;\n            var var3 = 0x01;\n            var var4 = var0;\n            storage[var1] = var4 * var3 | var2;\n            return;\n        } else {\n            var0 = 0x04;\n            var1 = storage[0x2e] & 0xff;\n        \n            if (var1 > 0x06) { assert(); }\n        \n            var0 = var1 == var0;\n            goto label_16BB;\n        }\n    }\n    \n    function cf1Wallet2Pct() returns (var r0) { return storage[0x0c] & 0x02 ** 0xa0 - 0x01; }\n    \n    function tokensSold() returns (var r0) { return storage[0x15]; }\n    \n    function vc1Wallet4Pct() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function ICO_ONE() returns (var r0, var r1, var r2, var r3, var r4, var r5) {\n        r0 = storage[0x1f];\n        r1 = storage[0x20];\n        r2 = storage[0x21];\n        r3 = storage[0x22];\n        r4 = storage[0x23];\n        r5 = storage[0x24];\n        return r0, r1, r2, r3, r4, r5;\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function dev4Wallet2Pct() returns (var r0) { return storage[0x11] & 0x02 ** 0xa0 - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x04;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1245:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_123C; }\n        \n        label_1228:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1228; }\n        \n        label_123C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1245;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1245;\n        }\n    }\n    \n    function startIcoOne() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x01;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        var0 = var1 == var0;\n    \n        if (var0) {\n        label_17F2:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x03;\n            var1 = 0x2e;\n            var var2 = storage[var1] & ~0xff;\n            var var3 = 0x01;\n            var var4 = var0;\n            storage[var1] = var4 * var3 | var2;\n            return;\n        } else {\n            var0 = 0x02;\n            var1 = storage[0x2e] & 0xff;\n        \n            if (var1 > 0x06) { assert(); }\n        \n            var0 = var1 == var0;\n            goto label_17F2;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = var0;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (temp0 + arg1 <= temp0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x1880;\n        var var3 = arg1;\n        var1 = func_1BA0(var2, var3);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1 & msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & temp1;\n        var1 = 0x18af;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_0D69(var2, var3);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = arg1;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function lotusWallet75Pct() returns (var r0) { return storage[0x13] & 0x02 ** 0xa0 - 0x01; }\n    \n    function dev3Wallet2Pct() returns (var r0) { return storage[0x10] & 0x02 ** 0xa0 - 0x01; }\n    \n    function ICO_TWO() returns (var r0, var r1, var r2, var r3, var r4, var r5) {\n        r0 = storage[0x25];\n        r1 = storage[0x26];\n        r2 = storage[0x27];\n        r3 = storage[0x28];\n        r4 = storage[0x29];\n        r5 = storage[0x2a];\n        return r0, r1, r2, r3, r4, r5;\n    }\n    \n    function closeIcoOne() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x03;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x04;\n        var1 = 0x2e;\n        var var2 = storage[var1] & ~0xff;\n        var var3 = 0x01;\n        var var4 = var0;\n        storage[var1] = var4 * var3 | var2;\n    }\n    \n    function startEarlyAdopters() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x00;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x01;\n        var1 = 0x2e;\n        var var2 = storage[var1] & ~0xff;\n        var var3 = var0;\n        var var4 = var3;\n        storage[var1] = var4 * var3 | var2;\n    }\n    \n    function cf2Wallet2Pct() returns (var r0) { return storage[0x0d] & 0x02 ** 0xa0 - 0x01; }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function vc3Wallet4Pct() returns (var r0) { return storage[0x0b] & 0x02 ** 0xa0 - 0x01; }\n    \n    function EARLYADOPTERS() returns (var r0, var r1, var r2, var r3, var r4, var r5) {\n        r0 = storage[0x19];\n        r1 = storage[0x1a];\n        r2 = storage[0x1b];\n        r3 = storage[0x1c];\n        r4 = storage[0x1d];\n        r5 = storage[0x1e];\n        return r0, r1, r2, r3, r4, r5;\n    }\n    \n    function withdrawAllocation() {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x16;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] <= var0) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x02;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_1A91:\n        \n            if (var1) {\n            label_1AAC:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                var1 = storage[0x13] & temp0 != temp0 & msg.sender;\n            \n                if (var1) {\n                label_1AE5:\n                \n                    if (!var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp1 = msg.sender;\n                    memory[0x00:0x20] = temp1;\n                    memory[0x20:0x40] = 0x16;\n                    var temp2 = keccak256(memory[0x00:0x40]);\n                    var temp3 = storage[temp2];\n                    storage[temp2] = 0x00;\n                    var0 = temp3;\n                    var temp4 = memory[0x40:0x60];\n                    var temp5;\n                    temp5, memory[temp4:temp4 + 0x00] = address(temp1).call.gas(!var0 * 0x08fc).value(var0)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n                \n                    if (temp5) { return; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var1 = 0x06;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    var1 = var2 == var1;\n                    goto label_1AE5;\n                }\n            } else {\n                var1 = 0x06;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_1AAC;\n            }\n        } else {\n            var1 = 0x04;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_1A91;\n        }\n    }\n    \n    function closeSale() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x05;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x2e] = (storage[0x2e] & ~0xff) | 0x06;\n        var0 = 0x1b86;\n        func_1BB2();\n        storage[0x07] = block.timestamp + 0xed4e00;\n    }\n    \n    function vc2Wallet4Pct() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_1BA0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1BB2() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = storage[0x13] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var0 = (storage[0x02] * 0x28) / 0x64;\n        var1 = var0 - storage[0x15];\n        var var4 = 0x1c16;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n        var var6 = 0x64;\n        var var7 = var1 * 0x4b;\n        var4 = func_0F45(var5, var6, var7);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1 & storage[0x13];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = var1;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = (temp4 * 0x4b) / 0x64;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], address(this), storage[0x13] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x1c98;\n        var6 = 0x64;\n        var7 = (temp4 * 0x04) / var6 * 0x19;\n    \n        if (!var6) { assert(); }\n    \n        var4 = func_0F45(var5, var6, var7);\n        var temp7 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp7 & storage[0x09];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp8;\n        var temp10 = var1;\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = ((temp10 * 0x04) / 0x64 * 0x19) / 0x64;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [memory[0x00:0x20], address(this), storage[0x09] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x1d20;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = (temp10 * 0x04) / var6 * 0x4b;\n    \n        if (!var6) { assert(); }\n    \n        var4 = func_0F45(var5, var6, var7);\n        var temp13 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp13 & storage[0x09];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp13 & storage[0x0a];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x1d61;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var var8 = var1 * 0x04;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp14 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp14 & storage[0x0a];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp15 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp16 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp15;\n        var temp17 = var1;\n        var temp18 = memory[0x40:0x60];\n        memory[temp18:temp18 + 0x20] = ((temp17 * 0x04) / 0x64 * 0x19) / 0x64;\n        var temp19 = memory[0x40:0x60];\n        log(memory[temp19:temp19 + (temp18 + 0x20) - temp19], [memory[0x00:0x20], address(this), storage[0x0a] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0a] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x1de0;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp17 * 0x04;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp20 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp20 & storage[0x0a];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp20 & storage[0x0b];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x1e21;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x04;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp21 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp21 & storage[0x0b];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp22 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp23 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp22;\n        var temp24 = var1;\n        var temp25 = memory[0x40:0x60];\n        memory[temp25:temp25 + 0x20] = ((temp24 * 0x04) / 0x64 * 0x19) / 0x64;\n        var temp26 = memory[0x40:0x60];\n        log(memory[temp26:temp26 + (temp25 + 0x20) - temp26], [memory[0x00:0x20], address(this), storage[0x0b] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x1ea0;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp24 * 0x04;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp27 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp27 & storage[0x0b];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp27 & storage[0x0c];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x1ee1;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp28 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp28 & storage[0x0c];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp29 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp30 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp29;\n        var temp31 = var1;\n        var temp32 = memory[0x40:0x60];\n        memory[temp32:temp32 + 0x20] = ((temp31 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp33 = memory[0x40:0x60];\n        log(memory[temp33:temp33 + (temp32 + 0x20) - temp33], [memory[0x00:0x20], address(this), storage[0x0c] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0c] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x1f60;\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp31 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp34 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp34 & storage[0x0c];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp34 & storage[0x0d];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x1fa1;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp35 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp35 & storage[0x0d];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp36 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp37 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp36;\n        var temp38 = var1;\n        var temp39 = memory[0x40:0x60];\n        memory[temp39:temp39 + 0x20] = ((temp38 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp40 = memory[0x40:0x60];\n        log(memory[temp40:temp40 + (temp39 + 0x20) - temp40], [memory[0x00:0x20], address(this), storage[0x0d] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0d] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x2020;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp38 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp41 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp41 & storage[0x0d];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp41 & storage[0x0e];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x2061;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp42 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp42 & storage[0x0e];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp43 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp44 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp43;\n        var temp45 = var1;\n        var temp46 = memory[0x40:0x60];\n        memory[temp46:temp46 + 0x20] = ((temp45 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp47 = memory[0x40:0x60];\n        log(memory[temp47:temp47 + (temp46 + 0x20) - temp47], [memory[0x00:0x20], address(this), storage[0x0e] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0e] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x20e0;\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp45 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp48 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp48 & storage[0x0e];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp48 & storage[0x0f];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x2121;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp49 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp49 & storage[0x0f];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp50 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp51 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp50;\n        var temp52 = var1;\n        var temp53 = memory[0x40:0x60];\n        memory[temp53:temp53 + 0x20] = ((temp52 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp54 = memory[0x40:0x60];\n        log(memory[temp54:temp54 + (temp53 + 0x20) - temp54], [memory[0x00:0x20], address(this), storage[0x0f] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0f] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x21a0;\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp52 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp55 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp55 & storage[0x0f];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp55 & storage[0x10];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x21e1;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp56 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp56 & storage[0x10];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp57 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp58 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp57;\n        var temp59 = var1;\n        var temp60 = memory[0x40:0x60];\n        memory[temp60:temp60 + 0x20] = ((temp59 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp61 = memory[0x40:0x60];\n        log(memory[temp61:temp61 + (temp60 + 0x20) - temp61], [memory[0x00:0x20], address(this), storage[0x10] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x10] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x2260;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp59 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp62 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp62 & storage[0x10];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp62 & storage[0x12];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x229e;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp63 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp63 & storage[0x12];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp64 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp65 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp64;\n        var temp66 = memory[0x40:0x60];\n        memory[temp66:temp66 + 0x20] = (var1 / 0x64 * 0x19) / 0x64;\n        var temp67 = memory[0x40:0x60];\n        log(memory[temp67:temp67 + (temp66 + 0x20) - temp67], [memory[0x00:0x20], address(this), storage[0x12] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x12] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x2316;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp68 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp68 & storage[0x12];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp68 & storage[0x11];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x2357;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp69 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp69 & storage[0x11];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp70 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp71 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp70;\n        var temp72 = var1;\n        var temp73 = memory[0x40:0x60];\n        memory[temp73:temp73 + 0x20] = ((temp72 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp74 = memory[0x40:0x60];\n        log(memory[temp74:temp74 + (temp73 + 0x20) - temp74], [memory[0x00:0x20], address(this), storage[0x11] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x11] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x23d6;\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp72 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        memory[0x00:0x20] = storage[0x11] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = storage[0x13] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var2 = (storage[0x02] * 0x37) / 0x64;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x2424;\n        var6 = var2;\n        var4 = func_0D69(var5, var6);\n        var temp75 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp75 & storage[0x13];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp76 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp77 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp76;\n        var temp78 = memory[0x40:0x60];\n        memory[temp78:temp78 + 0x20] = var2;\n        var temp79 = memory[0x40:0x60];\n        log(memory[temp79:temp79 + (temp78 + 0x20) - temp79], [memory[0x00:0x20], address(this), storage[0x13] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x14] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var3 = (storage[0x02] * 0x05) / 0x64;\n        var4 = 0x24a5;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = var3;\n        var4 = func_0D69(var5, var6);\n        var temp80 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp80 & storage[0x14];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp81 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp82 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp81;\n        var temp83 = memory[0x40:0x60];\n        memory[temp83:temp83 + 0x20] = var3;\n        var temp84 = memory[0x40:0x60];\n        log(memory[temp84:temp84 + (temp83 + 0x20) - temp84], [memory[0x00:0x20], address(this), storage[0x14] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1C8B(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        arg2 = arg3 / arg2 * 0x19;\n    \n        if (!arg1) { assert(); }\n    \n        r0 = func_0F45(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1D13(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        arg2 = arg3 / arg2 * 0x4b;\n    \n        if (!arg1) { assert(); }\n    \n        r0 = func_0F45(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0202:\n            var var0 = 0x00;\n            var var1 = var0;\n            var var2 = var1;\n            var var3 = var2;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n            var var7 = 0x01;\n            var var8 = storage[0x2e] & 0xff;\n        \n            if (var8 > 0x06) { assert(); }\n        \n            var7 = var8 == var7;\n        \n            if (var7) {\n            label_0239:\n            \n                if (var7) {\n                label_0254:\n                \n                    if (!var7) { revert(memory[0x00:0x00]); }\n                \n                    if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n                \n                    var7 = 0x0274;\n                    var7 = currentMinPurchase();\n                    var temp0 = msg.value >= var7;\n                    var7 = temp0;\n                \n                    if (!var7) {\n                    label_028A:\n                    \n                        if (!var7) { revert(memory[0x00:0x00]); }\n                    \n                        var7 = 0x029d;\n                        var7 = currentSalePriceInWei();\n                        var0 = var7;\n                        var7 = 0x02a7;\n                        var7 = currentSaleLimit();\n                        var1 = var7;\n                        var7 = 0x02b1;\n                        var7 = currentSaleSold();\n                        var2 = var7;\n                        var7 = 0x02bb;\n                        var7 = currentSaleLimitPerAddress();\n                        var3 = var7;\n                        var7 = 0x02c5;\n                        var7 = currentStageTokensBoughtByAddress();\n                        var4 = var7;\n                        var5 = msg.value;\n                        var7 = 0x0a ** storage[0x05];\n                        var8 = var0;\n                        var var9 = var5;\n                    \n                        if (!var8) { assert(); }\n                    \n                        var6 = var9 / var8 * var7;\n                    \n                        if (var6 + var2 > var1) { revert(memory[0x00:0x00]); }\n                    \n                        if (var4 + var6 > var3) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x00;\n                        var7 = 0x0322;\n                        var8 = storage[keccak256(memory[0x00:0x40])];\n                        var9 = var6;\n                        var7 = func_0D69(var8, var9);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x00;\n                        storage[keccak256(memory[0x00:0x40])] = var7;\n                        var8 = storage[0x15];\n                        var7 = 0x0348;\n                        var9 = var6;\n                        var7 = func_0D69(var8, var9);\n                        storage[0x15] = var7;\n                        var7 = 0x0354;\n                        var8 = var6;\n                        func_0D8D(var8);\n                        var7 = 0x035c;\n                        memory[0x00:0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x16;\n                        var9 = storage[keccak256(memory[0x00:0x40])];\n                        var8 = 0x0f4b;\n                        var var10 = 0x64;\n                        var var11 = msg.value * 0x04;\n                        var8 = func_0F45(var9, var10, var11);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var7 = 0x0286;\n                        var7 = currentMaxPurchase();\n                        var7 = msg.value <= var7;\n                        goto label_028A;\n                    }\n                } else {\n                    var7 = 0x05;\n                    var8 = storage[0x2e] & 0xff;\n                \n                    if (var8 > 0x06) { assert(); }\n                \n                    var7 = var8 == var7;\n                    goto label_0254;\n                }\n            } else {\n                var7 = 0x03;\n                var8 = storage[0x2e] & 0xff;\n            \n                if (var8 > 0x06) { assert(); }\n            \n                var7 = var8 == var7;\n                goto label_0239;\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0xfdc73f) {\n                // Dispatch table entry for currentMinPurchase()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentMinPurchase();\n            \n            label_03AD:\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var1;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + (temp1 + 0x20) - temp2];\n            } else if (var0 == 0x047fc9aa) {\n                // Dispatch table entry for supply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = supply();\n                goto label_03AD;\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e5;\n                var2 = name();\n            \n            label_03E5:\n                var temp3 = memory[0x40:0x60];\n                var3 = temp3;\n                memory[var3:var3 + 0x20] = 0x20;\n                var4 = var3;\n                var temp4 = var4 + 0x20;\n                var temp5 = var2;\n                memory[temp4:temp4 + 0x20] = memory[temp5:temp5 + 0x20];\n                var5 = temp4 + 0x20;\n                var7 = memory[temp5:temp5 + 0x20];\n                var6 = temp5 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0421:\n                    var temp6 = var7;\n                    var5 = temp6 + var5;\n                    var6 = temp6 & 0x1f;\n                \n                    if (!var6) {\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + var5 - temp7];\n                    } else {\n                        var temp8 = var6;\n                        var temp9 = var5 - temp8;\n                        memory[temp9:temp9 + 0x20] = ~(0x0100 ** (0x20 - temp8) - 0x01) & memory[temp9:temp9 + 0x20];\n                        var temp10 = memory[0x40:0x60];\n                        return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n                    }\n                } else {\n                label_0412:\n                    var temp11 = var11;\n                    memory[temp11 + var9:temp11 + var9 + 0x20] = memory[var10 + temp11:var10 + temp11 + 0x20];\n                    var11 = temp11 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0421; }\n                    else { goto label_0412; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_047E:\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = !!var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x0c26ac30) {\n                // Dispatch table entry for closeEarlyAdopters()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                closeEarlyAdopters();\n                stop();\n            } else if (var0 == 0x0fac20e1) {\n                // Dispatch table entry for dev1Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = dev1Wallet2Pct();\n            \n            label_04BA:\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x13d033c0) {\n                // Dispatch table entry for cliff()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = cliff();\n                goto label_03AD;\n            } else if (var0 == 0x1615d035) {\n                // Dispatch table entry for airdropWallet5Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = airdropWallet5Pct();\n                goto label_04BA;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = totalSupply();\n                goto label_03AD;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047e;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp16 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp16;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_047E;\n            } else if (var0 == 0x2a18ca16) {\n                // Dispatch table entry for currentSaleLimit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentSaleLimit();\n                goto label_03AD;\n            } else if (var0 == 0x2ca1aa16) {\n                // Dispatch table entry for currentSaleLimitPerAddress()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentSaleLimitPerAddress();\n                goto label_03AD;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = decimals();\n                goto label_03AD;\n            } else if (var0 == 0x341cc817) {\n                // Dispatch table entry for preicobrandingWallet1Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = preicobrandingWallet1Pct();\n                goto label_04BA;\n            } else if (var0 == 0x39f05521) {\n                // Dispatch table entry for withdrawVestedTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                withdrawVestedTokens();\n                stop();\n            } else if (var0 == 0x3be1c410) {\n                // Dispatch table entry for dev2Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = dev2Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0x3dbae9f9) {\n                // Dispatch table entry for startIcoTwo()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                startIcoTwo();\n                stop();\n            } else if (var0 == 0x4266806b) {\n                // Dispatch table entry for cf1Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = cf1Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0x518ab2a8) {\n                // Dispatch table entry for tokensSold()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = tokensSold();\n                goto label_03AD;\n            } else if (var0 == 0x66005ede) {\n                // Dispatch table entry for vc1Wallet4Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = vc1Wallet4Pct();\n                goto label_04BA;\n            } else if (var0 == 0x6f3ad341) {\n                // Dispatch table entry for ICO_ONE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0608;\n                var2, var3, var4, var5, var6, var7 = ICO_ONE();\n            \n            label_0608:\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2;\n                var temp18 = temp17 + 0x20;\n                memory[temp18:temp18 + 0x20] = var3;\n                var temp19 = temp18 + 0x20;\n                memory[temp19:temp19 + 0x20] = var4;\n                var temp20 = temp19 + 0x20;\n                memory[temp20:temp20 + 0x20] = var5;\n                var temp21 = temp20 + 0x20;\n                memory[temp21:temp21 + 0x20] = var6;\n                var temp22 = temp21 + 0x20;\n                memory[temp22:temp22 + 0x20] = var7;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_03AD;\n            } else if (var0 == 0x90427b6c) {\n                // Dispatch table entry for dev4Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = dev4Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e5;\n                var2 = symbol();\n                goto label_03E5;\n            } else if (var0 == 0xa0695fc2) {\n                // Dispatch table entry for startIcoOne()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                startIcoOne();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_047E;\n            } else if (var0 == 0xac7b986f) {\n                // Dispatch table entry for lotusWallet75Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = lotusWallet75Pct();\n                goto label_04BA;\n            } else if (var0 == 0xaf0638f6) {\n                // Dispatch table entry for currentMaxPurchase()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentMaxPurchase();\n                goto label_03AD;\n            } else if (var0 == 0xb154f47c) {\n                // Dispatch table entry for dev3Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = dev3Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0xbb814746) {\n                // Dispatch table entry for ICO_TWO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0608;\n                var2, var3, var4, var5, var6, var7 = ICO_TWO();\n                goto label_0608;\n            } else if (var0 == 0xc2d25167) {\n                // Dispatch table entry for closeIcoOne()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                closeIcoOne();\n                stop();\n            } else if (var0 == 0xc467706d) {\n                // Dispatch table entry for startEarlyAdopters()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                startEarlyAdopters();\n                stop();\n            } else if (var0 == 0xcb6b1f05) {\n                // Dispatch table entry for cf2Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = cf2Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0xd042ce2c) {\n                // Dispatch table entry for currentStageTokensBoughtByAddress()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentStageTokensBoughtByAddress();\n                goto label_03AD;\n            } else if (var0 == 0xdcd6561d) {\n                // Dispatch table entry for currentSaleSold()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentSaleSold();\n                goto label_03AD;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var temp24 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp24 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp24;\n                var1 = allowance(var2, var3);\n                goto label_03AD;\n            } else if (var0 == 0xdef1a2da) {\n                // Dispatch table entry for vc3Wallet4Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = vc3Wallet4Pct();\n                goto label_04BA;\n            } else if (var0 == 0xe50e2f65) {\n                // Dispatch table entry for EARLYADOPTERS()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0608;\n                var2, var3, var4, var5, var6, var7 = EARLYADOPTERS();\n                goto label_0608;\n            } else if (var0 == 0xeb570b05) {\n                // Dispatch table entry for currentSalePriceInWei()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentSalePriceInWei();\n                goto label_03AD;\n            } else if (var0 == 0xee224707) {\n                // Dispatch table entry for withdrawAllocation()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                withdrawAllocation();\n                stop();\n            } else if (var0 == 0xee55efee) {\n                // Dispatch table entry for closeSale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                closeSale();\n                stop();\n            } else if (var0 == 0xf3635a02) {\n                // Dispatch table entry for vc2Wallet4Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = vc2Wallet4Pct();\n                goto label_04BA;\n            } else { goto label_0202; }\n        }\n    }\n    \n    function currentMinPurchase() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_082E:\n        \n            if (var1) {\n            label_0849:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x28];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x22];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1c];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0849;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_082E;\n        }\n    }\n    \n    function currentMaxPurchase() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_08EA:\n        \n            if (var1) {\n            label_0905:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x29];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x23];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1d];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0905;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_08EA;\n        }\n    }\n    \n    function currentSalePriceInWei() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_09A7:\n        \n            if (var1) {\n            label_09C2:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x26];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x20];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1a];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_09C2;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_09A7;\n        }\n    }\n    \n    function currentSaleLimit() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_0A64:\n        \n            if (var1) {\n            label_0A7F:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x25];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x1f];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x19];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0A7F;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_0A64;\n        }\n    }\n    \n    function currentSaleSold() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_0B21:\n        \n            if (var1) {\n            label_0B3C:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x27];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x21];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1b];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0B3C;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_0B21;\n        }\n    }\n    \n    function currentSaleLimitPerAddress() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_0BDE:\n        \n            if (var1) {\n            label_0BF9:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x2a];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x24];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1e];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0BF9;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_0BDE;\n        }\n    }\n    \n    function currentStageTokensBoughtByAddress() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_0C9B:\n        \n            if (var1) {\n            label_0CB6:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x2d;\n                            var0 = storage[keccak256(memory[0x00:0x40])];\n                            goto label_08B6;\n                        }\n                    } else {\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x2c;\n                        var0 = storage[keccak256(memory[0x00:0x40])];\n                        goto label_08B6;\n                    }\n                } else {\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x2b;\n                    var0 = storage[keccak256(memory[0x00:0x40])];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0CB6;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_0C9B;\n        }\n    }\n    \n    function func_0D69(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n        var var2 = var1 >= temp0;\n    \n        if (var1 >= temp0) {\n            if (!var2) { assert(); }\n        \n        label_0D86:\n            return var1;\n        } else if (var1 >= arg1) { goto label_0D86; }\n        else { assert(); }\n    }\n    \n    function func_0D8D(var arg0) {\n        var var0 = 0x01;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        var0 = var1 == var0;\n    \n        if (var0) {\n        label_0DBC:\n        \n            if (var0) {\n            label_0DD7:\n            \n                if (!var0) { revert(memory[0x00:0x00]); }\n            \n                var0 = 0x01;\n                var1 = storage[0x2e] & 0xff;\n            \n                if (var1 > 0x06) { assert(); }\n            \n                if (var1 != var0) {\n                    var0 = 0x03;\n                    var1 = storage[0x2e] & 0xff;\n                \n                    if (var1 > 0x06) { assert(); }\n                \n                    if (var1 != var0) {\n                        var0 = 0x05;\n                        var1 = storage[0x2e] & 0xff;\n                    \n                        if (var1 > 0x06) { assert(); }\n                    \n                        if (var1 != var0) {\n                        label_0F1C:\n                            return;\n                        } else {\n                            var1 = storage[0x27];\n                            var0 = 0x0edc;\n                            var var2 = arg0;\n                            var0 = func_0D69(var1, var2);\n                            storage[0x27] = var0;\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x2d;\n                            var0 = 0x0f02;\n                            var1 = storage[keccak256(memory[0x00:0x40])];\n                            var2 = arg0;\n                            var0 = func_0D69(var1, var2);\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x2d;\n                            storage[keccak256(memory[0x00:0x40])] = var0;\n                            goto label_0F1C;\n                        }\n                    } else {\n                        var1 = storage[0x21];\n                        var0 = 0x0e72;\n                        var2 = arg0;\n                        var0 = func_0D69(var1, var2);\n                        storage[0x21] = var0;\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x2c;\n                        var0 = 0x0e98;\n                        var1 = storage[keccak256(memory[0x00:0x40])];\n                        var2 = arg0;\n                        var0 = func_0D69(var1, var2);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x2c;\n                        storage[keccak256(memory[0x00:0x40])] = var0;\n                        goto label_0F1C;\n                    }\n                } else {\n                    var1 = storage[0x1b];\n                    var0 = 0x0e08;\n                    var2 = arg0;\n                    var0 = func_0D69(var1, var2);\n                    storage[0x1b] = var0;\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x2b;\n                    var1 = storage[keccak256(memory[0x00:0x40])];\n                    var0 = 0x0e2e;\n                    var2 = arg0;\n                    var0 = func_0D69(var1, var2);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x2b;\n                    storage[keccak256(memory[0x00:0x40])] = var0;\n                    goto label_0F1C;\n                }\n            } else {\n                var0 = 0x05;\n                var1 = storage[0x2e] & 0xff;\n            \n                if (var1 > 0x06) { assert(); }\n            \n                var0 = var1 == var0;\n                goto label_0DD7;\n            }\n        } else {\n            var0 = 0x03;\n            var1 = storage[0x2e] & 0xff;\n        \n            if (var1 > 0x06) { assert(); }\n        \n            var0 = var1 == var0;\n            goto label_0DBC;\n        }\n    }\n    \n    function func_0F45(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_0D69(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function supply() returns (var r0) { return storage[0x02]; }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x03;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1245:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_123C; }\n        \n        label_1228:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1228; }\n        \n        label_123C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1245;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_1245;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (!var1) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_128A; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1) {\n        label_128A:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function closeEarlyAdopters() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x01;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x2e] = (storage[0x2e] & ~0xff) | 0x02;\n    }\n    \n    function dev1Wallet2Pct() returns (var r0) { return storage[0x0e] & 0x02 ** 0xa0 - 0x01; }\n    \n    function cliff() returns (var r0) { return storage[0x07]; }\n    \n    function airdropWallet5Pct() returns (var r0) { return storage[0x14] & 0x02 ** 0xa0 - 0x01; }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = var0;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var temp2 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (temp2 + arg2 <= temp2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var var1 = 0x140f;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_0D69(var2, var3);\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg1 & temp3;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & temp3;\n        var1 = 0x143e;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1BA0(var2, var3);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp4;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x20:0x40] = 0x01;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp4 & msg.sender;\n        memory[0x20:0x40] = temp5;\n        var1 = 0x1479;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1BA0(var2, var3);\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var temp7 = arg0 & temp6;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x01;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp6 & msg.sender;\n        memory[0x20:0x40] = temp8;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp9;\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = arg2;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [memory[0x00:0x20], stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05]; }\n    \n    function preicobrandingWallet1Pct() returns (var r0) { return storage[0x12] & 0x02 ** 0xa0 - 0x01; }\n    \n    function withdrawVestedTokens() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = 0x06;\n        var var4 = storage[0x2e] & 0xff;\n    \n        if (var4 > 0x06) { assert(); }\n    \n        if (var4 != var3) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x07] <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (block.timestamp < storage[0x07]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x17;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x18;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= temp0) { revert(memory[0x00:0x00]); }\n    \n        var3 = storage[0x08];\n        var4 = block.timestamp - storage[0x07];\n    \n        if (!var3) { assert(); }\n    \n        var0 = var4 / var3 + 0x01;\n        var3 = var0;\n        var4 = 0x0f;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x17;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (!var4) { assert(); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x18;\n        var1 = var5 / var4 * var3;\n        var temp1 = var1 - storage[keccak256(memory[0x00:0x40])];\n        var2 = temp1;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x15d2;\n        var5 = var2;\n        var3 = func_0D69(var4, var5);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x18;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x20:0x40] = 0x00;\n        var3 = 0x1600;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = var2;\n        var3 = func_0D69(var4, var5);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], address(this), msg.sender]);\n    }\n    \n    function dev2Wallet2Pct() returns (var r0) { return storage[0x0f] & 0x02 ** 0xa0 - 0x01; }\n    \n    function startIcoTwo() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x03;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        var0 = var1 == var0;\n    \n        if (var0) {\n        label_16BB:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x05;\n            var1 = 0x2e;\n            var var2 = storage[var1] & ~0xff;\n            var var3 = 0x01;\n            var var4 = var0;\n            storage[var1] = var4 * var3 | var2;\n            return;\n        } else {\n            var0 = 0x04;\n            var1 = storage[0x2e] & 0xff;\n        \n            if (var1 > 0x06) { assert(); }\n        \n            var0 = var1 == var0;\n            goto label_16BB;\n        }\n    }\n    \n    function cf1Wallet2Pct() returns (var r0) { return storage[0x0c] & 0x02 ** 0xa0 - 0x01; }\n    \n    function tokensSold() returns (var r0) { return storage[0x15]; }\n    \n    function vc1Wallet4Pct() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function ICO_ONE() returns (var r0, var r1, var r2, var r3, var r4, var r5) {\n        r0 = storage[0x1f];\n        r1 = storage[0x20];\n        r2 = storage[0x21];\n        r3 = storage[0x22];\n        r4 = storage[0x23];\n        r5 = storage[0x24];\n        return r0, r1, r2, r3, r4, r5;\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function dev4Wallet2Pct() returns (var r0) { return storage[0x11] & 0x02 ** 0xa0 - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x04;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1245:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_123C; }\n        \n        label_1228:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1228; }\n        \n        label_123C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1245;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1245;\n        }\n    }\n    \n    function startIcoOne() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x01;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        var0 = var1 == var0;\n    \n        if (var0) {\n        label_17F2:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x03;\n            var1 = 0x2e;\n            var var2 = storage[var1] & ~0xff;\n            var var3 = 0x01;\n            var var4 = var0;\n            storage[var1] = var4 * var3 | var2;\n            return;\n        } else {\n            var0 = 0x02;\n            var1 = storage[0x2e] & 0xff;\n        \n            if (var1 > 0x06) { assert(); }\n        \n            var0 = var1 == var0;\n            goto label_17F2;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = var0;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (temp0 + arg1 <= temp0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x1880;\n        var var3 = arg1;\n        var1 = func_1BA0(var2, var3);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1 & msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & temp1;\n        var1 = 0x18af;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_0D69(var2, var3);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = arg1;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function lotusWallet75Pct() returns (var r0) { return storage[0x13] & 0x02 ** 0xa0 - 0x01; }\n    \n    function dev3Wallet2Pct() returns (var r0) { return storage[0x10] & 0x02 ** 0xa0 - 0x01; }\n    \n    function ICO_TWO() returns (var r0, var r1, var r2, var r3, var r4, var r5) {\n        r0 = storage[0x25];\n        r1 = storage[0x26];\n        r2 = storage[0x27];\n        r3 = storage[0x28];\n        r4 = storage[0x29];\n        r5 = storage[0x2a];\n        return r0, r1, r2, r3, r4, r5;\n    }\n    \n    function closeIcoOne() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x03;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x04;\n        var1 = 0x2e;\n        var var2 = storage[var1] & ~0xff;\n        var var3 = 0x01;\n        var var4 = var0;\n        storage[var1] = var4 * var3 | var2;\n    }\n    \n    function startEarlyAdopters() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x00;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x01;\n        var1 = 0x2e;\n        var var2 = storage[var1] & ~0xff;\n        var var3 = var0;\n        var var4 = var3;\n        storage[var1] = var4 * var3 | var2;\n    }\n    \n    function cf2Wallet2Pct() returns (var r0) { return storage[0x0d] & 0x02 ** 0xa0 - 0x01; }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function vc3Wallet4Pct() returns (var r0) { return storage[0x0b] & 0x02 ** 0xa0 - 0x01; }\n    \n    function EARLYADOPTERS() returns (var r0, var r1, var r2, var r3, var r4, var r5) {\n        r0 = storage[0x19];\n        r1 = storage[0x1a];\n        r2 = storage[0x1b];\n        r3 = storage[0x1c];\n        r4 = storage[0x1d];\n        r5 = storage[0x1e];\n        return r0, r1, r2, r3, r4, r5;\n    }\n    \n    function withdrawAllocation() {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x16;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] <= var0) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x02;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_1A91:\n        \n            if (var1) {\n            label_1AAC:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                var1 = storage[0x13] & temp0 != temp0 & msg.sender;\n            \n                if (var1) {\n                label_1AE5:\n                \n                    if (!var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp1 = msg.sender;\n                    memory[0x00:0x20] = temp1;\n                    memory[0x20:0x40] = 0x16;\n                    var temp2 = keccak256(memory[0x00:0x40]);\n                    var temp3 = storage[temp2];\n                    storage[temp2] = 0x00;\n                    var0 = temp3;\n                    var temp4 = memory[0x40:0x60];\n                    var temp5;\n                    temp5, memory[temp4:temp4 + 0x00] = address(temp1).call.gas(!var0 * 0x08fc).value(var0)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n                \n                    if (temp5) { return; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var1 = 0x06;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    var1 = var2 == var1;\n                    goto label_1AE5;\n                }\n            } else {\n                var1 = 0x06;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_1AAC;\n            }\n        } else {\n            var1 = 0x04;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_1A91;\n        }\n    }\n    \n    function closeSale() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x05;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x2e] = (storage[0x2e] & ~0xff) | 0x06;\n        var0 = 0x1b86;\n        func_1BB2();\n        storage[0x07] = block.timestamp + 0xed4e00;\n    }\n    \n    function vc2Wallet4Pct() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_1BA0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1BB2() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = storage[0x13] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var0 = (storage[0x02] * 0x28) / 0x64;\n        var1 = var0 - storage[0x15];\n        var var4 = 0x1c16;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n        var var6 = 0x64;\n        var var7 = var1 * 0x4b;\n        var4 = func_0F45(var5, var6, var7);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1 & storage[0x13];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = var1;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = (temp4 * 0x4b) / 0x64;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], address(this), storage[0x13] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x1c98;\n        var6 = 0x64;\n        var7 = (temp4 * 0x04) / var6 * 0x19;\n    \n        if (!var6) { assert(); }\n    \n        var4 = func_0F45(var5, var6, var7);\n        var temp7 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp7 & storage[0x09];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp8;\n        var temp10 = var1;\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = ((temp10 * 0x04) / 0x64 * 0x19) / 0x64;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [memory[0x00:0x20], address(this), storage[0x09] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x1d20;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = (temp10 * 0x04) / var6 * 0x4b;\n    \n        if (!var6) { assert(); }\n    \n        var4 = func_0F45(var5, var6, var7);\n        var temp13 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp13 & storage[0x09];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp13 & storage[0x0a];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x1d61;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var var8 = var1 * 0x04;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp14 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp14 & storage[0x0a];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp15 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp16 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp15;\n        var temp17 = var1;\n        var temp18 = memory[0x40:0x60];\n        memory[temp18:temp18 + 0x20] = ((temp17 * 0x04) / 0x64 * 0x19) / 0x64;\n        var temp19 = memory[0x40:0x60];\n        log(memory[temp19:temp19 + (temp18 + 0x20) - temp19], [memory[0x00:0x20], address(this), storage[0x0a] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0a] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x1de0;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp17 * 0x04;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp20 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp20 & storage[0x0a];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp20 & storage[0x0b];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x1e21;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x04;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp21 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp21 & storage[0x0b];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp22 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp23 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp22;\n        var temp24 = var1;\n        var temp25 = memory[0x40:0x60];\n        memory[temp25:temp25 + 0x20] = ((temp24 * 0x04) / 0x64 * 0x19) / 0x64;\n        var temp26 = memory[0x40:0x60];\n        log(memory[temp26:temp26 + (temp25 + 0x20) - temp26], [memory[0x00:0x20], address(this), storage[0x0b] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x1ea0;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp24 * 0x04;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp27 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp27 & storage[0x0b];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp27 & storage[0x0c];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x1ee1;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp28 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp28 & storage[0x0c];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp29 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp30 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp29;\n        var temp31 = var1;\n        var temp32 = memory[0x40:0x60];\n        memory[temp32:temp32 + 0x20] = ((temp31 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp33 = memory[0x40:0x60];\n        log(memory[temp33:temp33 + (temp32 + 0x20) - temp33], [memory[0x00:0x20], address(this), storage[0x0c] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0c] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x1f60;\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp31 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp34 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp34 & storage[0x0c];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp34 & storage[0x0d];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x1fa1;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp35 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp35 & storage[0x0d];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp36 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp37 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp36;\n        var temp38 = var1;\n        var temp39 = memory[0x40:0x60];\n        memory[temp39:temp39 + 0x20] = ((temp38 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp40 = memory[0x40:0x60];\n        log(memory[temp40:temp40 + (temp39 + 0x20) - temp40], [memory[0x00:0x20], address(this), storage[0x0d] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0d] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x2020;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp38 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp41 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp41 & storage[0x0d];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp41 & storage[0x0e];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x2061;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp42 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp42 & storage[0x0e];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp43 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp44 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp43;\n        var temp45 = var1;\n        var temp46 = memory[0x40:0x60];\n        memory[temp46:temp46 + 0x20] = ((temp45 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp47 = memory[0x40:0x60];\n        log(memory[temp47:temp47 + (temp46 + 0x20) - temp47], [memory[0x00:0x20], address(this), storage[0x0e] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0e] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x20e0;\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp45 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp48 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp48 & storage[0x0e];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp48 & storage[0x0f];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x2121;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp49 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp49 & storage[0x0f];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp50 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp51 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp50;\n        var temp52 = var1;\n        var temp53 = memory[0x40:0x60];\n        memory[temp53:temp53 + 0x20] = ((temp52 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp54 = memory[0x40:0x60];\n        log(memory[temp54:temp54 + (temp53 + 0x20) - temp54], [memory[0x00:0x20], address(this), storage[0x0f] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0f] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x21a0;\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp52 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp55 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp55 & storage[0x0f];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp55 & storage[0x10];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x21e1;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp56 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp56 & storage[0x10];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp57 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp58 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp57;\n        var temp59 = var1;\n        var temp60 = memory[0x40:0x60];\n        memory[temp60:temp60 + 0x20] = ((temp59 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp61 = memory[0x40:0x60];\n        log(memory[temp61:temp61 + (temp60 + 0x20) - temp61], [memory[0x00:0x20], address(this), storage[0x10] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x10] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x2260;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp59 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp62 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp62 & storage[0x10];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp62 & storage[0x12];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x229e;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp63 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp63 & storage[0x12];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp64 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp65 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp64;\n        var temp66 = memory[0x40:0x60];\n        memory[temp66:temp66 + 0x20] = (var1 / 0x64 * 0x19) / 0x64;\n        var temp67 = memory[0x40:0x60];\n        log(memory[temp67:temp67 + (temp66 + 0x20) - temp67], [memory[0x00:0x20], address(this), storage[0x12] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x12] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x2316;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp68 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp68 & storage[0x12];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp68 & storage[0x11];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x2357;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp69 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp69 & storage[0x11];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp70 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp71 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp70;\n        var temp72 = var1;\n        var temp73 = memory[0x40:0x60];\n        memory[temp73:temp73 + 0x20] = ((temp72 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp74 = memory[0x40:0x60];\n        log(memory[temp74:temp74 + (temp73 + 0x20) - temp74], [memory[0x00:0x20], address(this), storage[0x11] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x11] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x23d6;\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp72 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        memory[0x00:0x20] = storage[0x11] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = storage[0x13] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var2 = (storage[0x02] * 0x37) / 0x64;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x2424;\n        var6 = var2;\n        var4 = func_0D69(var5, var6);\n        var temp75 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp75 & storage[0x13];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp76 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp77 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp76;\n        var temp78 = memory[0x40:0x60];\n        memory[temp78:temp78 + 0x20] = var2;\n        var temp79 = memory[0x40:0x60];\n        log(memory[temp79:temp79 + (temp78 + 0x20) - temp79], [memory[0x00:0x20], address(this), storage[0x13] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x14] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var3 = (storage[0x02] * 0x05) / 0x64;\n        var4 = 0x24a5;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = var3;\n        var4 = func_0D69(var5, var6);\n        var temp80 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp80 & storage[0x14];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp81 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp82 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp81;\n        var temp83 = memory[0x40:0x60];\n        memory[temp83:temp83 + 0x20] = var3;\n        var temp84 = memory[0x40:0x60];\n        log(memory[temp84:temp84 + (temp83 + 0x20) - temp84], [memory[0x00:0x20], address(this), storage[0x14] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1C8B(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        arg2 = arg3 / arg2 * 0x19;\n    \n        if (!arg1) { assert(); }\n    \n        r0 = func_0F45(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1D13(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        arg2 = arg3 / arg2 * 0x4b;\n    \n        if (!arg1) { assert(); }\n    \n        r0 = func_0F45(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0202:\n            var var0 = 0x00;\n            var var1 = var0;\n            var var2 = var1;\n            var var3 = var2;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n            var var7 = 0x01;\n            var var8 = storage[0x2e] & 0xff;\n        \n            if (var8 > 0x06) { assert(); }\n        \n            var7 = var8 == var7;\n        \n            if (var7) {\n            label_0239:\n            \n                if (var7) {\n                label_0254:\n                \n                    if (!var7) { revert(memory[0x00:0x00]); }\n                \n                    if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n                \n                    var7 = 0x0274;\n                    var7 = currentMinPurchase();\n                    var temp0 = msg.value >= var7;\n                    var7 = temp0;\n                \n                    if (!var7) {\n                    label_028A:\n                    \n                        if (!var7) { revert(memory[0x00:0x00]); }\n                    \n                        var7 = 0x029d;\n                        var7 = currentSalePriceInWei();\n                        var0 = var7;\n                        var7 = 0x02a7;\n                        var7 = currentSaleLimit();\n                        var1 = var7;\n                        var7 = 0x02b1;\n                        var7 = currentSaleSold();\n                        var2 = var7;\n                        var7 = 0x02bb;\n                        var7 = currentSaleLimitPerAddress();\n                        var3 = var7;\n                        var7 = 0x02c5;\n                        var7 = currentStageTokensBoughtByAddress();\n                        var4 = var7;\n                        var5 = msg.value;\n                        var7 = 0x0a ** storage[0x05];\n                        var8 = var0;\n                        var var9 = var5;\n                    \n                        if (!var8) { assert(); }\n                    \n                        var6 = var9 / var8 * var7;\n                    \n                        if (var6 + var2 > var1) { revert(memory[0x00:0x00]); }\n                    \n                        if (var4 + var6 > var3) { revert(memory[0x00:0x00]); }\n                    \n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x00;\n                        var7 = 0x0322;\n                        var8 = storage[keccak256(memory[0x00:0x40])];\n                        var9 = var6;\n                        var7 = func_0D69(var8, var9);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x00;\n                        storage[keccak256(memory[0x00:0x40])] = var7;\n                        var8 = storage[0x15];\n                        var7 = 0x0348;\n                        var9 = var6;\n                        var7 = func_0D69(var8, var9);\n                        storage[0x15] = var7;\n                        var7 = 0x0354;\n                        var8 = var6;\n                        func_0D8D(var8);\n                        var7 = 0x035c;\n                        memory[0x00:0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x16;\n                        var9 = storage[keccak256(memory[0x00:0x40])];\n                        var8 = 0x0f4b;\n                        var var10 = 0x64;\n                        var var11 = msg.value * 0x04;\n                        var8 = func_0F45(var9, var10, var11);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var7 = 0x0286;\n                        var7 = currentMaxPurchase();\n                        var7 = msg.value <= var7;\n                        goto label_028A;\n                    }\n                } else {\n                    var7 = 0x05;\n                    var8 = storage[0x2e] & 0xff;\n                \n                    if (var8 > 0x06) { assert(); }\n                \n                    var7 = var8 == var7;\n                    goto label_0254;\n                }\n            } else {\n                var7 = 0x03;\n                var8 = storage[0x2e] & 0xff;\n            \n                if (var8 > 0x06) { assert(); }\n            \n                var7 = var8 == var7;\n                goto label_0239;\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0xfdc73f) {\n                // Dispatch table entry for currentMinPurchase()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentMinPurchase();\n            \n            label_03AD:\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var1;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + (temp1 + 0x20) - temp2];\n            } else if (var0 == 0x047fc9aa) {\n                // Dispatch table entry for supply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = supply();\n                goto label_03AD;\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e5;\n                var2 = name();\n            \n            label_03E5:\n                var temp3 = memory[0x40:0x60];\n                var3 = temp3;\n                memory[var3:var3 + 0x20] = 0x20;\n                var4 = var3;\n                var temp4 = var4 + 0x20;\n                var temp5 = var2;\n                memory[temp4:temp4 + 0x20] = memory[temp5:temp5 + 0x20];\n                var5 = temp4 + 0x20;\n                var7 = memory[temp5:temp5 + 0x20];\n                var6 = temp5 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0421:\n                    var temp6 = var7;\n                    var5 = temp6 + var5;\n                    var6 = temp6 & 0x1f;\n                \n                    if (!var6) {\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + var5 - temp7];\n                    } else {\n                        var temp8 = var6;\n                        var temp9 = var5 - temp8;\n                        memory[temp9:temp9 + 0x20] = ~(0x0100 ** (0x20 - temp8) - 0x01) & memory[temp9:temp9 + 0x20];\n                        var temp10 = memory[0x40:0x60];\n                        return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n                    }\n                } else {\n                label_0412:\n                    var temp11 = var11;\n                    memory[temp11 + var9:temp11 + var9 + 0x20] = memory[var10 + temp11:var10 + temp11 + 0x20];\n                    var11 = temp11 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0421; }\n                    else { goto label_0412; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_047E:\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = !!var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x0c26ac30) {\n                // Dispatch table entry for closeEarlyAdopters()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                closeEarlyAdopters();\n                stop();\n            } else if (var0 == 0x0fac20e1) {\n                // Dispatch table entry for dev1Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = dev1Wallet2Pct();\n            \n            label_04BA:\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x13d033c0) {\n                // Dispatch table entry for cliff()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = cliff();\n                goto label_03AD;\n            } else if (var0 == 0x1615d035) {\n                // Dispatch table entry for airdropWallet5Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = airdropWallet5Pct();\n                goto label_04BA;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = totalSupply();\n                goto label_03AD;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047e;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp16 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp16;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_047E;\n            } else if (var0 == 0x2a18ca16) {\n                // Dispatch table entry for currentSaleLimit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentSaleLimit();\n                goto label_03AD;\n            } else if (var0 == 0x2ca1aa16) {\n                // Dispatch table entry for currentSaleLimitPerAddress()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentSaleLimitPerAddress();\n                goto label_03AD;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = decimals();\n                goto label_03AD;\n            } else if (var0 == 0x341cc817) {\n                // Dispatch table entry for preicobrandingWallet1Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = preicobrandingWallet1Pct();\n                goto label_04BA;\n            } else if (var0 == 0x39f05521) {\n                // Dispatch table entry for withdrawVestedTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                withdrawVestedTokens();\n                stop();\n            } else if (var0 == 0x3be1c410) {\n                // Dispatch table entry for dev2Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = dev2Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0x3dbae9f9) {\n                // Dispatch table entry for startIcoTwo()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                startIcoTwo();\n                stop();\n            } else if (var0 == 0x4266806b) {\n                // Dispatch table entry for cf1Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = cf1Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0x518ab2a8) {\n                // Dispatch table entry for tokensSold()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = tokensSold();\n                goto label_03AD;\n            } else if (var0 == 0x66005ede) {\n                // Dispatch table entry for vc1Wallet4Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = vc1Wallet4Pct();\n                goto label_04BA;\n            } else if (var0 == 0x6f3ad341) {\n                // Dispatch table entry for ICO_ONE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0608;\n                var2, var3, var4, var5, var6, var7 = ICO_ONE();\n            \n            label_0608:\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2;\n                var temp18 = temp17 + 0x20;\n                memory[temp18:temp18 + 0x20] = var3;\n                var temp19 = temp18 + 0x20;\n                memory[temp19:temp19 + 0x20] = var4;\n                var temp20 = temp19 + 0x20;\n                memory[temp20:temp20 + 0x20] = var5;\n                var temp21 = temp20 + 0x20;\n                memory[temp21:temp21 + 0x20] = var6;\n                var temp22 = temp21 + 0x20;\n                memory[temp22:temp22 + 0x20] = var7;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_03AD;\n            } else if (var0 == 0x90427b6c) {\n                // Dispatch table entry for dev4Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = dev4Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e5;\n                var2 = symbol();\n                goto label_03E5;\n            } else if (var0 == 0xa0695fc2) {\n                // Dispatch table entry for startIcoOne()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                startIcoOne();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047e;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_047E;\n            } else if (var0 == 0xac7b986f) {\n                // Dispatch table entry for lotusWallet75Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = lotusWallet75Pct();\n                goto label_04BA;\n            } else if (var0 == 0xaf0638f6) {\n                // Dispatch table entry for currentMaxPurchase()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentMaxPurchase();\n                goto label_03AD;\n            } else if (var0 == 0xb154f47c) {\n                // Dispatch table entry for dev3Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = dev3Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0xbb814746) {\n                // Dispatch table entry for ICO_TWO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0608;\n                var2, var3, var4, var5, var6, var7 = ICO_TWO();\n                goto label_0608;\n            } else if (var0 == 0xc2d25167) {\n                // Dispatch table entry for closeIcoOne()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                closeIcoOne();\n                stop();\n            } else if (var0 == 0xc467706d) {\n                // Dispatch table entry for startEarlyAdopters()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                startEarlyAdopters();\n                stop();\n            } else if (var0 == 0xcb6b1f05) {\n                // Dispatch table entry for cf2Wallet2Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = cf2Wallet2Pct();\n                goto label_04BA;\n            } else if (var0 == 0xd042ce2c) {\n                // Dispatch table entry for currentStageTokensBoughtByAddress()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentStageTokensBoughtByAddress();\n                goto label_03AD;\n            } else if (var0 == 0xdcd6561d) {\n                // Dispatch table entry for currentSaleSold()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentSaleSold();\n                goto label_03AD;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var temp24 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp24 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp24;\n                var1 = allowance(var2, var3);\n                goto label_03AD;\n            } else if (var0 == 0xdef1a2da) {\n                // Dispatch table entry for vc3Wallet4Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = vc3Wallet4Pct();\n                goto label_04BA;\n            } else if (var0 == 0xe50e2f65) {\n                // Dispatch table entry for EARLYADOPTERS()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0608;\n                var2, var3, var4, var5, var6, var7 = EARLYADOPTERS();\n                goto label_0608;\n            } else if (var0 == 0xeb570b05) {\n                // Dispatch table entry for currentSalePriceInWei()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03ad;\n                var1 = currentSalePriceInWei();\n                goto label_03AD;\n            } else if (var0 == 0xee224707) {\n                // Dispatch table entry for withdrawAllocation()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                withdrawAllocation();\n                stop();\n            } else if (var0 == 0xee55efee) {\n                // Dispatch table entry for closeSale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a5;\n                closeSale();\n                stop();\n            } else if (var0 == 0xf3635a02) {\n                // Dispatch table entry for vc2Wallet4Pct()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04ba;\n                var2 = vc2Wallet4Pct();\n                goto label_04BA;\n            } else { goto label_0202; }\n        }\n    }\n    \n    function currentMinPurchase() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_082E:\n        \n            if (var1) {\n            label_0849:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x28];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x22];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1c];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0849;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_082E;\n        }\n    }\n    \n    function currentMaxPurchase() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_08EA:\n        \n            if (var1) {\n            label_0905:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x29];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x23];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1d];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0905;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_08EA;\n        }\n    }\n    \n    function currentSalePriceInWei() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_09A7:\n        \n            if (var1) {\n            label_09C2:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x26];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x20];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1a];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_09C2;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_09A7;\n        }\n    }\n    \n    function currentSaleLimit() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_0A64:\n        \n            if (var1) {\n            label_0A7F:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x25];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x1f];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x19];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0A7F;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_0A64;\n        }\n    }\n    \n    function currentSaleSold() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_0B21:\n        \n            if (var1) {\n            label_0B3C:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x27];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x21];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1b];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0B3C;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_0B21;\n        }\n    }\n    \n    function currentSaleLimitPerAddress() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_0BDE:\n        \n            if (var1) {\n            label_0BF9:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            var0 = storage[0x2a];\n                            goto label_08B6;\n                        }\n                    } else {\n                        var0 = storage[0x24];\n                        goto label_08B6;\n                    }\n                } else {\n                    var0 = storage[0x1e];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0BF9;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_0BDE;\n        }\n    }\n    \n    function currentStageTokensBoughtByAddress() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_0C9B:\n        \n            if (var1) {\n            label_0CB6:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                if (var2 != var1) {\n                    var1 = 0x03;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    if (var2 != var1) {\n                        var1 = 0x05;\n                        var2 = storage[0x2e] & 0xff;\n                    \n                        if (var2 > 0x06) { assert(); }\n                    \n                        if (var2 != var1) {\n                        label_08B6:\n                            return var0;\n                        } else {\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x2d;\n                            var0 = storage[keccak256(memory[0x00:0x40])];\n                            goto label_08B6;\n                        }\n                    } else {\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x2c;\n                        var0 = storage[keccak256(memory[0x00:0x40])];\n                        goto label_08B6;\n                    }\n                } else {\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x2b;\n                    var0 = storage[keccak256(memory[0x00:0x40])];\n                    goto label_08B6;\n                }\n            } else {\n                var1 = 0x05;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_0CB6;\n            }\n        } else {\n            var1 = 0x03;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_0C9B;\n        }\n    }\n    \n    function func_0D69(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n        var var2 = var1 >= temp0;\n    \n        if (var1 >= temp0) {\n            if (!var2) { assert(); }\n        \n        label_0D86:\n            return var1;\n        } else if (var1 >= arg1) { goto label_0D86; }\n        else { assert(); }\n    }\n    \n    function func_0D8D(var arg0) {\n        var var0 = 0x01;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        var0 = var1 == var0;\n    \n        if (var0) {\n        label_0DBC:\n        \n            if (var0) {\n            label_0DD7:\n            \n                if (!var0) { revert(memory[0x00:0x00]); }\n            \n                var0 = 0x01;\n                var1 = storage[0x2e] & 0xff;\n            \n                if (var1 > 0x06) { assert(); }\n            \n                if (var1 != var0) {\n                    var0 = 0x03;\n                    var1 = storage[0x2e] & 0xff;\n                \n                    if (var1 > 0x06) { assert(); }\n                \n                    if (var1 != var0) {\n                        var0 = 0x05;\n                        var1 = storage[0x2e] & 0xff;\n                    \n                        if (var1 > 0x06) { assert(); }\n                    \n                        if (var1 != var0) {\n                        label_0F1C:\n                            return;\n                        } else {\n                            var1 = storage[0x27];\n                            var0 = 0x0edc;\n                            var var2 = arg0;\n                            var0 = func_0D69(var1, var2);\n                            storage[0x27] = var0;\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x2d;\n                            var0 = 0x0f02;\n                            var1 = storage[keccak256(memory[0x00:0x40])];\n                            var2 = arg0;\n                            var0 = func_0D69(var1, var2);\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x2d;\n                            storage[keccak256(memory[0x00:0x40])] = var0;\n                            goto label_0F1C;\n                        }\n                    } else {\n                        var1 = storage[0x21];\n                        var0 = 0x0e72;\n                        var2 = arg0;\n                        var0 = func_0D69(var1, var2);\n                        storage[0x21] = var0;\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x2c;\n                        var0 = 0x0e98;\n                        var1 = storage[keccak256(memory[0x00:0x40])];\n                        var2 = arg0;\n                        var0 = func_0D69(var1, var2);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x2c;\n                        storage[keccak256(memory[0x00:0x40])] = var0;\n                        goto label_0F1C;\n                    }\n                } else {\n                    var1 = storage[0x1b];\n                    var0 = 0x0e08;\n                    var2 = arg0;\n                    var0 = func_0D69(var1, var2);\n                    storage[0x1b] = var0;\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x2b;\n                    var1 = storage[keccak256(memory[0x00:0x40])];\n                    var0 = 0x0e2e;\n                    var2 = arg0;\n                    var0 = func_0D69(var1, var2);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x2b;\n                    storage[keccak256(memory[0x00:0x40])] = var0;\n                    goto label_0F1C;\n                }\n            } else {\n                var0 = 0x05;\n                var1 = storage[0x2e] & 0xff;\n            \n                if (var1 > 0x06) { assert(); }\n            \n                var0 = var1 == var0;\n                goto label_0DD7;\n            }\n        } else {\n            var0 = 0x03;\n            var1 = storage[0x2e] & 0xff;\n        \n            if (var1 > 0x06) { assert(); }\n        \n            var0 = var1 == var0;\n            goto label_0DBC;\n        }\n    }\n    \n    function func_0F45(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_0D69(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function supply() returns (var r0) { return storage[0x02]; }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x03;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1245:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_123C; }\n        \n        label_1228:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1228; }\n        \n        label_123C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1245;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_1245;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (!var1) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_128A; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1) {\n        label_128A:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function closeEarlyAdopters() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x01;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x2e] = (storage[0x2e] & ~0xff) | 0x02;\n    }\n    \n    function dev1Wallet2Pct() returns (var r0) { return storage[0x0e] & 0x02 ** 0xa0 - 0x01; }\n    \n    function cliff() returns (var r0) { return storage[0x07]; }\n    \n    function airdropWallet5Pct() returns (var r0) { return storage[0x14] & 0x02 ** 0xa0 - 0x01; }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = var0;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var temp2 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (temp2 + arg2 <= temp2) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var var1 = 0x140f;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_0D69(var2, var3);\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg1 & temp3;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & temp3;\n        var1 = 0x143e;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1BA0(var2, var3);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp4;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x20:0x40] = 0x01;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp4 & msg.sender;\n        memory[0x20:0x40] = temp5;\n        var1 = 0x1479;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1BA0(var2, var3);\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var temp7 = arg0 & temp6;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x01;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp6 & msg.sender;\n        memory[0x20:0x40] = temp8;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp10 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp9;\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = arg2;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [memory[0x00:0x20], stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05]; }\n    \n    function preicobrandingWallet1Pct() returns (var r0) { return storage[0x12] & 0x02 ** 0xa0 - 0x01; }\n    \n    function withdrawVestedTokens() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = 0x06;\n        var var4 = storage[0x2e] & 0xff;\n    \n        if (var4 > 0x06) { assert(); }\n    \n        if (var4 != var3) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x07] <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (block.timestamp < storage[0x07]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x17;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x18;\n    \n        if (storage[keccak256(memory[0x00:0x40])] >= temp0) { revert(memory[0x00:0x00]); }\n    \n        var3 = storage[0x08];\n        var4 = block.timestamp - storage[0x07];\n    \n        if (!var3) { assert(); }\n    \n        var0 = var4 / var3 + 0x01;\n        var3 = var0;\n        var4 = 0x0f;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x17;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (!var4) { assert(); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x18;\n        var1 = var5 / var4 * var3;\n        var temp1 = var1 - storage[keccak256(memory[0x00:0x40])];\n        var2 = temp1;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x15d2;\n        var5 = var2;\n        var3 = func_0D69(var4, var5);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x18;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x20:0x40] = 0x00;\n        var3 = 0x1600;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = var2;\n        var3 = func_0D69(var4, var5);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], address(this), msg.sender]);\n    }\n    \n    function dev2Wallet2Pct() returns (var r0) { return storage[0x0f] & 0x02 ** 0xa0 - 0x01; }\n    \n    function startIcoTwo() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x03;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        var0 = var1 == var0;\n    \n        if (var0) {\n        label_16BB:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x05;\n            var1 = 0x2e;\n            var var2 = storage[var1] & ~0xff;\n            var var3 = 0x01;\n            var var4 = var0;\n            storage[var1] = var4 * var3 | var2;\n            return;\n        } else {\n            var0 = 0x04;\n            var1 = storage[0x2e] & 0xff;\n        \n            if (var1 > 0x06) { assert(); }\n        \n            var0 = var1 == var0;\n            goto label_16BB;\n        }\n    }\n    \n    function cf1Wallet2Pct() returns (var r0) { return storage[0x0c] & 0x02 ** 0xa0 - 0x01; }\n    \n    function tokensSold() returns (var r0) { return storage[0x15]; }\n    \n    function vc1Wallet4Pct() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function ICO_ONE() returns (var r0, var r1, var r2, var r3, var r4, var r5) {\n        r0 = storage[0x1f];\n        r1 = storage[0x20];\n        r2 = storage[0x21];\n        r3 = storage[0x22];\n        r4 = storage[0x23];\n        r5 = storage[0x24];\n        return r0, r1, r2, r3, r4, r5;\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function dev4Wallet2Pct() returns (var r0) { return storage[0x11] & 0x02 ** 0xa0 - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x04;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_1245:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_123C; }\n        \n        label_1228:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_1228; }\n        \n        label_123C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_1245;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_1245;\n        }\n    }\n    \n    function startIcoOne() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x01;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        var0 = var1 == var0;\n    \n        if (var0) {\n        label_17F2:\n        \n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x03;\n            var1 = 0x2e;\n            var var2 = storage[var1] & ~0xff;\n            var var3 = 0x01;\n            var var4 = var0;\n            storage[var1] = var4 * var3 | var2;\n            return;\n        } else {\n            var0 = 0x02;\n            var1 = storage[0x2e] & 0xff;\n        \n            if (var1 > 0x06) { assert(); }\n        \n            var0 = var1 == var0;\n            goto label_17F2;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = var0;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (temp0 + arg1 <= temp0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var1 = 0x1880;\n        var var3 = arg1;\n        var1 = func_1BA0(var2, var3);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1 & msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = arg0 & temp1;\n        var1 = 0x18af;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_0D69(var2, var3);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = arg1;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function lotusWallet75Pct() returns (var r0) { return storage[0x13] & 0x02 ** 0xa0 - 0x01; }\n    \n    function dev3Wallet2Pct() returns (var r0) { return storage[0x10] & 0x02 ** 0xa0 - 0x01; }\n    \n    function ICO_TWO() returns (var r0, var r1, var r2, var r3, var r4, var r5) {\n        r0 = storage[0x25];\n        r1 = storage[0x26];\n        r2 = storage[0x27];\n        r3 = storage[0x28];\n        r4 = storage[0x29];\n        r5 = storage[0x2a];\n        return r0, r1, r2, r3, r4, r5;\n    }\n    \n    function closeIcoOne() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x03;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x04;\n        var1 = 0x2e;\n        var var2 = storage[var1] & ~0xff;\n        var var3 = 0x01;\n        var var4 = var0;\n        storage[var1] = var4 * var3 | var2;\n    }\n    \n    function startEarlyAdopters() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x00;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x01;\n        var1 = 0x2e;\n        var var2 = storage[var1] & ~0xff;\n        var var3 = var0;\n        var var4 = var3;\n        storage[var1] = var4 * var3 | var2;\n    }\n    \n    function cf2Wallet2Pct() returns (var r0) { return storage[0x0d] & 0x02 ** 0xa0 - 0x01; }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function vc3Wallet4Pct() returns (var r0) { return storage[0x0b] & 0x02 ** 0xa0 - 0x01; }\n    \n    function EARLYADOPTERS() returns (var r0, var r1, var r2, var r3, var r4, var r5) {\n        r0 = storage[0x19];\n        r1 = storage[0x1a];\n        r2 = storage[0x1b];\n        r3 = storage[0x1c];\n        r4 = storage[0x1d];\n        r5 = storage[0x1e];\n        return r0, r1, r2, r3, r4, r5;\n    }\n    \n    function withdrawAllocation() {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x16;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] <= var0) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x02;\n        var var2 = storage[0x2e] & 0xff;\n    \n        if (var2 > 0x06) { assert(); }\n    \n        var1 = var2 == var1;\n    \n        if (var1) {\n        label_1A91:\n        \n            if (var1) {\n            label_1AAC:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                var1 = storage[0x13] & temp0 != temp0 & msg.sender;\n            \n                if (var1) {\n                label_1AE5:\n                \n                    if (!var1) { revert(memory[0x00:0x00]); }\n                \n                    var temp1 = msg.sender;\n                    memory[0x00:0x20] = temp1;\n                    memory[0x20:0x40] = 0x16;\n                    var temp2 = keccak256(memory[0x00:0x40]);\n                    var temp3 = storage[temp2];\n                    storage[temp2] = 0x00;\n                    var0 = temp3;\n                    var temp4 = memory[0x40:0x60];\n                    var temp5;\n                    temp5, memory[temp4:temp4 + 0x00] = address(temp1).call.gas(!var0 * 0x08fc).value(var0)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n                \n                    if (temp5) { return; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var1 = 0x06;\n                    var2 = storage[0x2e] & 0xff;\n                \n                    if (var2 > 0x06) { assert(); }\n                \n                    var1 = var2 == var1;\n                    goto label_1AE5;\n                }\n            } else {\n                var1 = 0x06;\n                var2 = storage[0x2e] & 0xff;\n            \n                if (var2 > 0x06) { assert(); }\n            \n                var1 = var2 == var1;\n                goto label_1AAC;\n            }\n        } else {\n            var1 = 0x04;\n            var2 = storage[0x2e] & 0xff;\n        \n            if (var2 > 0x06) { assert(); }\n        \n            var1 = var2 == var1;\n            goto label_1A91;\n        }\n    }\n    \n    function closeSale() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x05;\n        var var1 = storage[0x2e] & 0xff;\n    \n        if (var1 > 0x06) { assert(); }\n    \n        if (var1 != var0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x2e] = (storage[0x2e] & ~0xff) | 0x06;\n        var0 = 0x1b86;\n        func_1BB2();\n        storage[0x07] = block.timestamp + 0xed4e00;\n    }\n    \n    function vc2Wallet4Pct() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_1BA0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1BB2() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x06] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = storage[0x13] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var0 = (storage[0x02] * 0x28) / 0x64;\n        var1 = var0 - storage[0x15];\n        var var4 = 0x1c16;\n        var var5 = storage[keccak256(memory[0x00:0x40])];\n        var var6 = 0x64;\n        var var7 = var1 * 0x4b;\n        var4 = func_0F45(var5, var6, var7);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1 & storage[0x13];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = var1;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = (temp4 * 0x4b) / 0x64;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], address(this), storage[0x13] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x1c98;\n        var6 = 0x64;\n        var7 = (temp4 * 0x04) / var6 * 0x19;\n    \n        if (!var6) { assert(); }\n    \n        var4 = func_0F45(var5, var6, var7);\n        var temp7 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp7 & storage[0x09];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp8;\n        var temp10 = var1;\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = ((temp10 * 0x04) / 0x64 * 0x19) / 0x64;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [memory[0x00:0x20], address(this), storage[0x09] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x1d20;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = (temp10 * 0x04) / var6 * 0x4b;\n    \n        if (!var6) { assert(); }\n    \n        var4 = func_0F45(var5, var6, var7);\n        var temp13 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp13 & storage[0x09];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp13 & storage[0x0a];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x1d61;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var var8 = var1 * 0x04;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp14 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp14 & storage[0x0a];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp15 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp16 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp15;\n        var temp17 = var1;\n        var temp18 = memory[0x40:0x60];\n        memory[temp18:temp18 + 0x20] = ((temp17 * 0x04) / 0x64 * 0x19) / 0x64;\n        var temp19 = memory[0x40:0x60];\n        log(memory[temp19:temp19 + (temp18 + 0x20) - temp19], [memory[0x00:0x20], address(this), storage[0x0a] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0a] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x1de0;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp17 * 0x04;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp20 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp20 & storage[0x0a];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp20 & storage[0x0b];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x1e21;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x04;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp21 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp21 & storage[0x0b];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp22 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp23 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp22;\n        var temp24 = var1;\n        var temp25 = memory[0x40:0x60];\n        memory[temp25:temp25 + 0x20] = ((temp24 * 0x04) / 0x64 * 0x19) / 0x64;\n        var temp26 = memory[0x40:0x60];\n        log(memory[temp26:temp26 + (temp25 + 0x20) - temp26], [memory[0x00:0x20], address(this), storage[0x0b] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0b] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x1ea0;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp24 * 0x04;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp27 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp27 & storage[0x0b];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp27 & storage[0x0c];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x1ee1;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp28 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp28 & storage[0x0c];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp29 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp30 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp29;\n        var temp31 = var1;\n        var temp32 = memory[0x40:0x60];\n        memory[temp32:temp32 + 0x20] = ((temp31 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp33 = memory[0x40:0x60];\n        log(memory[temp33:temp33 + (temp32 + 0x20) - temp33], [memory[0x00:0x20], address(this), storage[0x0c] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0c] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x1f60;\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp31 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp34 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp34 & storage[0x0c];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp34 & storage[0x0d];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x1fa1;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp35 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp35 & storage[0x0d];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp36 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp37 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp36;\n        var temp38 = var1;\n        var temp39 = memory[0x40:0x60];\n        memory[temp39:temp39 + 0x20] = ((temp38 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp40 = memory[0x40:0x60];\n        log(memory[temp40:temp40 + (temp39 + 0x20) - temp40], [memory[0x00:0x20], address(this), storage[0x0d] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0d] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x2020;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp38 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp41 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp41 & storage[0x0d];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp41 & storage[0x0e];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x2061;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp42 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp42 & storage[0x0e];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp43 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp44 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp43;\n        var temp45 = var1;\n        var temp46 = memory[0x40:0x60];\n        memory[temp46:temp46 + 0x20] = ((temp45 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp47 = memory[0x40:0x60];\n        log(memory[temp47:temp47 + (temp46 + 0x20) - temp47], [memory[0x00:0x20], address(this), storage[0x0e] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0e] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x20e0;\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp45 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp48 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp48 & storage[0x0e];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp48 & storage[0x0f];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x2121;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp49 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp49 & storage[0x0f];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp50 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp51 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp50;\n        var temp52 = var1;\n        var temp53 = memory[0x40:0x60];\n        memory[temp53:temp53 + 0x20] = ((temp52 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp54 = memory[0x40:0x60];\n        log(memory[temp54:temp54 + (temp53 + 0x20) - temp54], [memory[0x00:0x20], address(this), storage[0x0f] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x0f] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x21a0;\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp52 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp55 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp55 & storage[0x0f];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp55 & storage[0x10];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x21e1;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp56 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp56 & storage[0x10];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp57 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp58 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp57;\n        var temp59 = var1;\n        var temp60 = memory[0x40:0x60];\n        memory[temp60:temp60 + 0x20] = ((temp59 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp61 = memory[0x40:0x60];\n        log(memory[temp61:temp61 + (temp60 + 0x20) - temp61], [memory[0x00:0x20], address(this), storage[0x10] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x10] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x2260;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp59 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp62 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp62 & storage[0x10];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp62 & storage[0x12];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x229e;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp63 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp63 & storage[0x12];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp64 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp65 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp64;\n        var temp66 = memory[0x40:0x60];\n        memory[temp66:temp66 + 0x20] = (var1 / 0x64 * 0x19) / 0x64;\n        var temp67 = memory[0x40:0x60];\n        log(memory[temp67:temp67 + (temp66 + 0x20) - temp67], [memory[0x00:0x20], address(this), storage[0x12] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x12] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var4 = 0x2316;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1;\n        var4 = func_1D13(var5, var6, var7, var8);\n        var temp68 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp68 & storage[0x12];\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = temp68 & storage[0x11];\n        memory[0x20:0x40] = 0x00;\n        var4 = 0x2357;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = 0x64;\n        var7 = var6;\n        var8 = var1 * 0x02;\n        var4 = func_1C8B(var5, var6, var7, var8);\n        var temp69 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp69 & storage[0x11];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp70 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp71 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp70;\n        var temp72 = var1;\n        var temp73 = memory[0x40:0x60];\n        memory[temp73:temp73 + 0x20] = ((temp72 * 0x02) / 0x64 * 0x19) / 0x64;\n        var temp74 = memory[0x40:0x60];\n        log(memory[temp74:temp74 + (temp73 + 0x20) - temp74], [memory[0x00:0x20], address(this), storage[0x11] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x11] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x23d6;\n        var6 = 0x64;\n        var7 = var6;\n        var8 = temp72 * 0x02;\n        var4 = func_1D13(var5, var6, var7, var8);\n        memory[0x00:0x20] = storage[0x11] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x00:0x20] = storage[0x13] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var2 = (storage[0x02] * 0x37) / 0x64;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var4 = 0x2424;\n        var6 = var2;\n        var4 = func_0D69(var5, var6);\n        var temp75 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp75 & storage[0x13];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp76 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp77 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp76;\n        var temp78 = memory[0x40:0x60];\n        memory[temp78:temp78 + 0x20] = var2;\n        var temp79 = memory[0x40:0x60];\n        log(memory[temp79:temp79 + (temp78 + 0x20) - temp79], [memory[0x00:0x20], address(this), storage[0x13] & 0x02 ** 0xa0 - 0x01]);\n        memory[0x00:0x20] = storage[0x14] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        var3 = (storage[0x02] * 0x05) / 0x64;\n        var4 = 0x24a5;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = var3;\n        var4 = func_0D69(var5, var6);\n        var temp80 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp80 & storage[0x14];\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        var temp81 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x24fa:0x251a];\n        var temp82 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp81;\n        var temp83 = memory[0x40:0x60];\n        memory[temp83:temp83 + 0x20] = var3;\n        var temp84 = memory[0x40:0x60];\n        log(memory[temp84:temp84 + (temp83 + 0x20) - temp84], [memory[0x00:0x20], address(this), storage[0x14] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1C8B(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        arg2 = arg3 / arg2 * 0x19;\n    \n        if (!arg1) { assert(); }\n    \n        r0 = func_0F45(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1D13(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        arg2 = arg3 / arg2 * 0x4b;\n    \n        if (!arg1) { assert(); }\n    \n        r0 = func_0F45(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 71.99959254264832,
	"usage": {
		"completion_tokens": 729,
		"prompt_tokens": 25620,
		"total_tokens": 26349
	}
}