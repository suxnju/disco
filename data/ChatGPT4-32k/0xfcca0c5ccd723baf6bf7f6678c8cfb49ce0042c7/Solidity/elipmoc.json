{
	"address": "0xfcca0c5ccd723baf6bf7f6678c8cfb49ce0042c7",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's a Solidity smart contract that corresponds to the decompiled code:\n\n```Solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _totalSupply;\n    address private _owner;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed _from, uint256 _value);\n\n    function name() public pure returns(string memory) { \n        return \"One Metric That Matters\";\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) { \n        _allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(_value <= _balanceOf[_from]);\n        require(_value <= _allowance[_from][msg.sender]);\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        _allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function INITIAL_SUPPLY() public pure returns (uint256) { \n        return 0x19d971e4fe8401e74000000;\n    }\n\n    function decimals() public pure returns (uint8) { \n        return 18;\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(_value <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= _value;\n        _totalSupply -= _value;\n        emit Burn(msg.sender, _value);\n        emit Transfer(msg.sender, address(0), _value);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint256 _value) public returns (bool success) { \n        if (_value <= _allowance[msg.sender][_spender]) {\n            _allowance[msg.sender][_spender] -= _value;\n        } else {\n            _allowance[msg.sender][_spender] = 0;\n        }\n        emit Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) { \n        return _balanceOf[_owner];\n    }\n\n    function owner() public view returns (address) { \n        return _owner;\n    }\n\n    function symbol() public pure returns (string memory) { \n        return \"OMTM\";\n    }\n\n    function FREE_SUPPLY() public pure returns (uint256) { \n        return 0x121836204bc2ce21e000000;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) { \n        require(_to != address(0));\n        require(_value <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) { \n        _allowance[msg.sender][_spender] += _addedValue;\n        emit Approval(msg.sender, _spender, _allowance[msg.sender][_spender]);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) { \n        return _allowance[_owner][_spender];\n    }\n\n    function safeWithdrawal() public {\n        require(msg.sender == _owner);\n        payable(_owner).transfer(address(this).balance);\n    }\n\n    // The fallback function is executed on a call to the contract if none of the other\n    // functions match the given function signature.\n    fallback() external payable {\n        // Custom logic here\n    }\n}\n```\n\nPlease note that due to the limitations of EVM decompilation, there might be inaccuracies, and some logic had to be inferred. The `fallback()` function was left empty because the logic couldn't be clearly determined from the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701469399,
	"id": "chatcmpl-8R6ClQRrygz6K93aM0EV12KoxaJVG",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 15:10 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _fallback; // STORAGE[0x4]\nuint256 stor_5; // STORAGE[0x5]\naddress _owner; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (23) {\n        MEM[v0.data] = ~0xffffffffffffffffff & 'One Metric That Matters';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return 0x19d971e4fe8401e74000000;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    emit Transfer(msg.sender, 0, varg0);\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4f4d544d00000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction FREE_SUPPLY() public nonPayable { \n    return 0x121836204bc2ce21e000000;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction safeWithdrawal() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction fallback() public payable { \n    if (!(0xff & _fallback[msg.sender])) {\n        _fallback[msg.sender] = 0x1 | ~0xff & _fallback[msg.sender];\n        require(_balanceOf[address(this)] >= 0xbdbc41e0348b300000);\n        require(_balanceOf[msg.sender] + 0xbdbc41e0348b300000 > _balanceOf[msg.sender]);\n        assert(0xbdbc41e0348b300000 <= _balanceOf[address(this)]);\n        _balanceOf[address(this)] = _balanceOf[address(this)] - 0xbdbc41e0348b300000;\n        assert(_balanceOf[msg.sender] + 0xbdbc41e0348b300000 >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + 0xbdbc41e0348b300000;\n        emit Transfer(address(this), msg.sender, 0xbdbc41e0348b300000);\n    }\n    v0 = v1 = block.timestamp - stor_5 > 0x278d00;\n    if (v1) {\n        v0 = _balanceOf[address(this)] > 0;\n    }\n    if (v0) {\n        assert(_balanceOf[address(this)] <= _totalSupply);\n        _totalSupply = _totalSupply - _balanceOf[address(this)];\n        _balanceOf[address(this)] = 0;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2ff2e9dc == function_selector) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9858cf19 == function_selector) {\n            FREE_SUPPLY();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 15:10 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _fallback; // STORAGE[0x4]\nuint256 stor_5; // STORAGE[0x5]\naddress _owner; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (23) {\n        MEM[v0.data] = ~0xffffffffffffffffff & 'One Metric That Matters';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return 0x19d971e4fe8401e74000000;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    emit Transfer(msg.sender, 0, varg0);\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4f4d544d00000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction FREE_SUPPLY() public nonPayable { \n    return 0x121836204bc2ce21e000000;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction safeWithdrawal() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction fallback() public payable { \n    if (!(0xff & _fallback[msg.sender])) {\n        _fallback[msg.sender] = 0x1 | ~0xff & _fallback[msg.sender];\n        require(_balanceOf[address(this)] >= 0xbdbc41e0348b300000);\n        require(_balanceOf[msg.sender] + 0xbdbc41e0348b300000 > _balanceOf[msg.sender]);\n        assert(0xbdbc41e0348b300000 <= _balanceOf[address(this)]);\n        _balanceOf[address(this)] = _balanceOf[address(this)] - 0xbdbc41e0348b300000;\n        assert(_balanceOf[msg.sender] + 0xbdbc41e0348b300000 >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + 0xbdbc41e0348b300000;\n        emit Transfer(address(this), msg.sender, 0xbdbc41e0348b300000);\n    }\n    v0 = v1 = block.timestamp - stor_5 > 0x278d00;\n    if (v1) {\n        v0 = _balanceOf[address(this)] > 0;\n    }\n    if (v0) {\n        assert(_balanceOf[address(this)] <= _totalSupply);\n        _totalSupply = _totalSupply - _balanceOf[address(this)];\n        _balanceOf[address(this)] = 0;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2ff2e9dc == function_selector) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9858cf19 == function_selector) {\n            FREE_SUPPLY();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 15:10 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _fallback; // STORAGE[0x4]\nuint256 stor_5; // STORAGE[0x5]\naddress _owner; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (23) {\n        MEM[v0.data] = ~0xffffffffffffffffff & 'One Metric That Matters';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return 0x19d971e4fe8401e74000000;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    emit Transfer(msg.sender, 0, varg0);\n}\n\nfunction decreaseApproval(address varg0, uint256 varg1) public nonPayable { \n    if (varg1 <= _allowance[varg0]) {\n        assert(varg1 <= _allowance[varg0]);\n        _allowance[varg0] = _allowance[varg0] - varg1;\n    } else {\n        _allowance[varg0] = 0;\n    }\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4f4d544d00000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction FREE_SUPPLY() public nonPayable { \n    return 0x121836204bc2ce21e000000;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction increaseApproval(address varg0, uint256 varg1) public nonPayable { \n    assert(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction safeWithdrawal() public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction fallback() public payable { \n    if (!(0xff & _fallback[msg.sender])) {\n        _fallback[msg.sender] = 0x1 | ~0xff & _fallback[msg.sender];\n        require(_balanceOf[address(this)] >= 0xbdbc41e0348b300000);\n        require(_balanceOf[msg.sender] + 0xbdbc41e0348b300000 > _balanceOf[msg.sender]);\n        assert(0xbdbc41e0348b300000 <= _balanceOf[address(this)]);\n        _balanceOf[address(this)] = _balanceOf[address(this)] - 0xbdbc41e0348b300000;\n        assert(_balanceOf[msg.sender] + 0xbdbc41e0348b300000 >= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] + 0xbdbc41e0348b300000;\n        emit Transfer(address(this), msg.sender, 0xbdbc41e0348b300000);\n    }\n    v0 = v1 = block.timestamp - stor_5 > 0x278d00;\n    if (v1) {\n        v0 = _balanceOf[address(this)] > 0;\n    }\n    if (v0) {\n        assert(_balanceOf[address(this)] <= _totalSupply);\n        _totalSupply = _totalSupply - _balanceOf[address(this)];\n        _balanceOf[address(this)] = 0;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2ff2e9dc == function_selector) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x66188463 == function_selector) {\n            decreaseApproval(address,uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9858cf19 == function_selector) {\n            FREE_SUPPLY();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xd73dd623 == function_selector) {\n            increaseApproval(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 34.733415603637695,
	"usage": {
		"completion_tokens": 945,
		"prompt_tokens": 2048,
		"total_tokens": 2993
	}
}